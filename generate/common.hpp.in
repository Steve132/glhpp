/*

Copyright (c) 2012 Steven Braeger

Permission is hereby granted, free of charge, to any person obtaining a copy of this software
and associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute, 
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice 
shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR 
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/

#ifndef GL_HPP_COMMON_HPP
#define GL_HPP_COMMON_HPP

#include<string>
#include<sstream>
#include<iterator>

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)  //if C++0x, then use hash set instead for speed.
#include<unordered_set>
typedef std::unordered_set<std::string> EXTENSION_SET;
#define CONSTRUCT_EXTENSION_SET(x) std::unordered_set<std::string> x(128)
#else
#include<set>
typedef std::set<std::string> EXTENSION_SET;
#define CONSTRUCT_EXTENSION_SET(x) std::set<std::string> x;
#endif


#include<stdexcept>
#include<utility>


%(TYPEDEFS)s
%(API_NAMES)s

#define GLHPP_GL_VERSION                        0x1F02
#define GLHPP_GL_EXTENSIONS			0x1F03
#define GLHPP_GL_NUM_EXTENSIONS                 0x821D
extern "C"
{
extern const GLubyte* glGetString(GLenum name);
extern void glGetIntegerv(GLenum pname,GLint *params);
}
//define Opengl
namespace gl
{
class ProcedureNotFound: public std::runtime_error
{
public:
	explicit ProcedureNotFound(const std::string& s):
		std::runtime_error(s)
	{}	
};

typedef std::pair<unsigned int,unsigned int> version_info;

bool check_extension(const std::string& extname);
bool check_version(unsigned int vmaj,unsigned int vmin);
bool check_version(const version_info& version);
const version_info& get_version();
void* get_proc_address(const std::string& funcname);
void* get_proc_address(const std::string& funcname,const std::string& extname);
const EXTENSION_SET& get_extensions();



namespace _impl
{

inline version_info _get_version()
{
	const char* vs=reinterpret_cast<const char*>(glGetString(GLHPP_GL_VERSION));
	std::istringstream iss(vs);
	unsigned int maj,min;
	iss >> maj;
	iss.ignore();
	iss >> min;
	return std::make_pair(maj,min);
}
typedef const GLubyte* (*PFNGLGETSTRINGIPROC_PRIV)(GLenum name, GLuint index);

inline EXTENSION_SET _get_extensions()
{
	CONSTRUCT_EXTENSION_SET(extlist);
	GLint extmax;
	if(check_version(3,0))
	{
		static PFNGLGETSTRINGIPROC_PRIV gsi=reinterpret_cast<PFNGLGETSTRINGIPROC_PRIV>(_prim_GetProcAddress("glGetStringi"));
		glGetIntegerv(GLHPP_GL_NUM_EXTENSIONS,&extmax);
		for(GLint i=0;i<extmax;i++)
		{
			extlist.insert((const char*)gsi(GLHPP_GL_EXTENSIONS,i));
		}
	}
	else
	{
		std::istringstream extstream((const char*)glGetString(GLHPP_GL_EXTENSIONS));
		extlist.insert(std::istream_iterator<std::string>(extstream),std::istream_iterator<std::string>());
	}
	
	return extlist;
}

inline void* _get_proc_address(const char* frequest,const char* extext)
{
	if(check_extension(extext))
	{
		void* fptr=_prim_GetProcAddress(frequest);
		if(fptr)
			return fptr;
		else
		{
			std::ostringstream oss;
			oss << "Error, " << extext << " is supported, but " << frequest << " was not found in the context.";
			throw ProcedureNotFound(oss.str());
		}
	}
	else
	{	
		std::ostringstream oss;
		oss << "Error, " << extext << " is not supported, so " << frequest << " was not found in the context.";
		throw ProcedureNotFound(oss.str());
	}
}
inline void* _get_proc_address(const char* frequest,unsigned int vmaj,unsigned int vmin)
{
	if(check_version(vmaj,vmin))
	{
		void* fptr=_prim_GetProcAddress(frequest);
		if(fptr)
			return fptr;
		else
		{
			std::ostringstream oss;
			oss << "Error, OpenGL Version " << vmaj << '.' << vmin << " is supported, but " << frequest << " was not found in the context.  Could this function be deprecated in this context?";
			throw ProcedureNotFound(oss.str());
		}
	}
	else
	{
		std::ostringstream oss;
		oss << "Error, OpenGL Version " << vmaj << '.' << vmin << " is not supported, so " << frequest << " could not be found in the context.";
		throw ProcedureNotFound(oss.str());
	}
}
}

inline bool check_extension(const std::string& extname)
{
	static const EXTENSION_SET& extarray=get_extensions();
	return extarray.find(extname)!=extarray.end();
}

inline const version_info& get_version()
{
	static version_info v=_impl::_get_version();
	return v;
}
inline bool check_version(unsigned int vmaj,unsigned int vmin)
{
	static const version_info& v=get_version();
	return (vmaj*10+vmin) <= (v.first*10+v.second);
}
inline bool check_version(const version_info& v)
{
	return check_version(v.first,v.second);
}
inline void* get_proc_address(const std::string& funcname)
{
	void* fptr=_prim_GetProcAddress(funcname.c_str());
	if(fptr)
		return fptr;
	else
	{
		std::ostringstream oss;
		oss << "Error, " << funcname << " was not found in the context.";
		throw ProcedureNotFound(oss.str());
	}
}
inline void* get_proc_address(const std::string& funcname,const std::string& extname)
{
	return _impl::_get_proc_address(funcname.c_str(),extname.c_str());
}
inline const EXTENSION_SET& get_extensions()
{
	static EXTENSION_SET extarray=_impl::_get_extensions();
	return extarray;
}
}

#endif
