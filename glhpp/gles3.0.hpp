#ifndef GL_HPP_GL_ES_VERSION_3_0_HPP
#define GL_HPP_GL_ES_VERSION_3_0_HPP
#include "common.hpp"


#ifndef GL_HPP_API_NAME
#define GL_HPP_API_NAME GL_HPP_GLES_API
#endif
#ifndef GL_HPP_API_VERSION
#define GL_HPP_API_VERSION 300
#endif
#ifndef GL_NO_ERROR
#define GL_NO_ERROR 0
#endif //GL_NO_ERROR
#ifndef GL_ZERO
#define GL_ZERO 0
#endif //GL_ZERO
#ifndef GL_NONE
#define GL_NONE 0
#endif //GL_NONE
#ifndef GL_FALSE
#define GL_FALSE 0
#endif //GL_FALSE
#ifndef GL_POINTS
#define GL_POINTS 0x0000
#endif //GL_POINTS
#ifndef GL_SYNC_FLUSH_COMMANDS_BIT
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#endif //GL_SYNC_FLUSH_COMMANDS_BIT
#ifndef GL_DEPTH_BUFFER_BIT
#define GL_DEPTH_BUFFER_BIT 0x00000100
#endif //GL_DEPTH_BUFFER_BIT
#ifndef GL_STENCIL_BUFFER_BIT
#define GL_STENCIL_BUFFER_BIT 0x00000400
#endif //GL_STENCIL_BUFFER_BIT
#ifndef GL_COLOR_BUFFER_BIT
#define GL_COLOR_BUFFER_BIT 0x00004000
#endif //GL_COLOR_BUFFER_BIT
#ifndef GL_LINES
#define GL_LINES 0x0001
#endif //GL_LINES
#ifndef GL_MAP_READ_BIT
#define GL_MAP_READ_BIT 0x0001
#endif //GL_MAP_READ_BIT
#ifndef GL_MAP_WRITE_BIT
#define GL_MAP_WRITE_BIT 0x0002
#endif //GL_MAP_WRITE_BIT
#ifndef GL_LINE_LOOP
#define GL_LINE_LOOP 0x0002
#endif //GL_LINE_LOOP
#ifndef GL_LINE_STRIP
#define GL_LINE_STRIP 0x0003
#endif //GL_LINE_STRIP
#ifndef GL_MAP_INVALIDATE_RANGE_BIT
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#endif //GL_MAP_INVALIDATE_RANGE_BIT
#ifndef GL_TRIANGLES
#define GL_TRIANGLES 0x0004
#endif //GL_TRIANGLES
#ifndef GL_TRIANGLE_STRIP
#define GL_TRIANGLE_STRIP 0x0005
#endif //GL_TRIANGLE_STRIP
#ifndef GL_TRIANGLE_FAN
#define GL_TRIANGLE_FAN 0x0006
#endif //GL_TRIANGLE_FAN
#ifndef GL_MAP_INVALIDATE_BUFFER_BIT
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#endif //GL_MAP_INVALIDATE_BUFFER_BIT
#ifndef GL_MAP_FLUSH_EXPLICIT_BIT
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#endif //GL_MAP_FLUSH_EXPLICIT_BIT
#ifndef GL_MAP_UNSYNCHRONIZED_BIT
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#endif //GL_MAP_UNSYNCHRONIZED_BIT
#ifndef GL_NEVER
#define GL_NEVER 0x0200
#endif //GL_NEVER
#ifndef GL_LESS
#define GL_LESS 0x0201
#endif //GL_LESS
#ifndef GL_EQUAL
#define GL_EQUAL 0x0202
#endif //GL_EQUAL
#ifndef GL_LEQUAL
#define GL_LEQUAL 0x0203
#endif //GL_LEQUAL
#ifndef GL_GREATER
#define GL_GREATER 0x0204
#endif //GL_GREATER
#ifndef GL_NOTEQUAL
#define GL_NOTEQUAL 0x0205
#endif //GL_NOTEQUAL
#ifndef GL_GEQUAL
#define GL_GEQUAL 0x0206
#endif //GL_GEQUAL
#ifndef GL_ALWAYS
#define GL_ALWAYS 0x0207
#endif //GL_ALWAYS
#ifndef GL_SRC_COLOR
#define GL_SRC_COLOR 0x0300
#endif //GL_SRC_COLOR
#ifndef GL_ONE_MINUS_SRC_COLOR
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#endif //GL_ONE_MINUS_SRC_COLOR
#ifndef GL_SRC_ALPHA
#define GL_SRC_ALPHA 0x0302
#endif //GL_SRC_ALPHA
#ifndef GL_ONE_MINUS_SRC_ALPHA
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#endif //GL_ONE_MINUS_SRC_ALPHA
#ifndef GL_DST_ALPHA
#define GL_DST_ALPHA 0x0304
#endif //GL_DST_ALPHA
#ifndef GL_ONE_MINUS_DST_ALPHA
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#endif //GL_ONE_MINUS_DST_ALPHA
#ifndef GL_DST_COLOR
#define GL_DST_COLOR 0x0306
#endif //GL_DST_COLOR
#ifndef GL_ONE_MINUS_DST_COLOR
#define GL_ONE_MINUS_DST_COLOR 0x0307
#endif //GL_ONE_MINUS_DST_COLOR
#ifndef GL_SRC_ALPHA_SATURATE
#define GL_SRC_ALPHA_SATURATE 0x0308
#endif //GL_SRC_ALPHA_SATURATE
#ifndef GL_FRONT
#define GL_FRONT 0x0404
#endif //GL_FRONT
#ifndef GL_BACK
#define GL_BACK 0x0405
#endif //GL_BACK
#ifndef GL_FRONT_AND_BACK
#define GL_FRONT_AND_BACK 0x0408
#endif //GL_FRONT_AND_BACK
#ifndef GL_INVALID_ENUM
#define GL_INVALID_ENUM 0x0500
#endif //GL_INVALID_ENUM
#ifndef GL_INVALID_VALUE
#define GL_INVALID_VALUE 0x0501
#endif //GL_INVALID_VALUE
#ifndef GL_INVALID_OPERATION
#define GL_INVALID_OPERATION 0x0502
#endif //GL_INVALID_OPERATION
#ifndef GL_OUT_OF_MEMORY
#define GL_OUT_OF_MEMORY 0x0505
#endif //GL_OUT_OF_MEMORY
#ifndef GL_INVALID_FRAMEBUFFER_OPERATION
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#endif //GL_INVALID_FRAMEBUFFER_OPERATION
#ifndef GL_CW
#define GL_CW 0x0900
#endif //GL_CW
#ifndef GL_CCW
#define GL_CCW 0x0901
#endif //GL_CCW
#ifndef GL_LINE_WIDTH
#define GL_LINE_WIDTH 0x0B21
#endif //GL_LINE_WIDTH
#ifndef GL_CULL_FACE
#define GL_CULL_FACE 0x0B44
#endif //GL_CULL_FACE
#ifndef GL_CULL_FACE_MODE
#define GL_CULL_FACE_MODE 0x0B45
#endif //GL_CULL_FACE_MODE
#ifndef GL_FRONT_FACE
#define GL_FRONT_FACE 0x0B46
#endif //GL_FRONT_FACE
#ifndef GL_DEPTH_RANGE
#define GL_DEPTH_RANGE 0x0B70
#endif //GL_DEPTH_RANGE
#ifndef GL_DEPTH_TEST
#define GL_DEPTH_TEST 0x0B71
#endif //GL_DEPTH_TEST
#ifndef GL_DEPTH_WRITEMASK
#define GL_DEPTH_WRITEMASK 0x0B72
#endif //GL_DEPTH_WRITEMASK
#ifndef GL_DEPTH_CLEAR_VALUE
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#endif //GL_DEPTH_CLEAR_VALUE
#ifndef GL_DEPTH_FUNC
#define GL_DEPTH_FUNC 0x0B74
#endif //GL_DEPTH_FUNC
#ifndef GL_STENCIL_TEST
#define GL_STENCIL_TEST 0x0B90
#endif //GL_STENCIL_TEST
#ifndef GL_STENCIL_CLEAR_VALUE
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#endif //GL_STENCIL_CLEAR_VALUE
#ifndef GL_STENCIL_FUNC
#define GL_STENCIL_FUNC 0x0B92
#endif //GL_STENCIL_FUNC
#ifndef GL_STENCIL_VALUE_MASK
#define GL_STENCIL_VALUE_MASK 0x0B93
#endif //GL_STENCIL_VALUE_MASK
#ifndef GL_STENCIL_FAIL
#define GL_STENCIL_FAIL 0x0B94
#endif //GL_STENCIL_FAIL
#ifndef GL_STENCIL_PASS_DEPTH_FAIL
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#endif //GL_STENCIL_PASS_DEPTH_FAIL
#ifndef GL_STENCIL_PASS_DEPTH_PASS
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#endif //GL_STENCIL_PASS_DEPTH_PASS
#ifndef GL_STENCIL_REF
#define GL_STENCIL_REF 0x0B97
#endif //GL_STENCIL_REF
#ifndef GL_STENCIL_WRITEMASK
#define GL_STENCIL_WRITEMASK 0x0B98
#endif //GL_STENCIL_WRITEMASK
#ifndef GL_VIEWPORT
#define GL_VIEWPORT 0x0BA2
#endif //GL_VIEWPORT
#ifndef GL_DITHER
#define GL_DITHER 0x0BD0
#endif //GL_DITHER
#ifndef GL_BLEND
#define GL_BLEND 0x0BE2
#endif //GL_BLEND
#ifndef GL_READ_BUFFER
#define GL_READ_BUFFER 0x0C02
#endif //GL_READ_BUFFER
#ifndef GL_SCISSOR_BOX
#define GL_SCISSOR_BOX 0x0C10
#endif //GL_SCISSOR_BOX
#ifndef GL_SCISSOR_TEST
#define GL_SCISSOR_TEST 0x0C11
#endif //GL_SCISSOR_TEST
#ifndef GL_COLOR_CLEAR_VALUE
#define GL_COLOR_CLEAR_VALUE 0x0C22
#endif //GL_COLOR_CLEAR_VALUE
#ifndef GL_COLOR_WRITEMASK
#define GL_COLOR_WRITEMASK 0x0C23
#endif //GL_COLOR_WRITEMASK
#ifndef GL_UNPACK_ROW_LENGTH
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#endif //GL_UNPACK_ROW_LENGTH
#ifndef GL_UNPACK_SKIP_ROWS
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#endif //GL_UNPACK_SKIP_ROWS
#ifndef GL_UNPACK_SKIP_PIXELS
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#endif //GL_UNPACK_SKIP_PIXELS
#ifndef GL_UNPACK_ALIGNMENT
#define GL_UNPACK_ALIGNMENT 0x0CF5
#endif //GL_UNPACK_ALIGNMENT
#ifndef GL_PACK_ROW_LENGTH
#define GL_PACK_ROW_LENGTH 0x0D02
#endif //GL_PACK_ROW_LENGTH
#ifndef GL_PACK_SKIP_ROWS
#define GL_PACK_SKIP_ROWS 0x0D03
#endif //GL_PACK_SKIP_ROWS
#ifndef GL_PACK_SKIP_PIXELS
#define GL_PACK_SKIP_PIXELS 0x0D04
#endif //GL_PACK_SKIP_PIXELS
#ifndef GL_PACK_ALIGNMENT
#define GL_PACK_ALIGNMENT 0x0D05
#endif //GL_PACK_ALIGNMENT
#ifndef GL_MAX_TEXTURE_SIZE
#define GL_MAX_TEXTURE_SIZE 0x0D33
#endif //GL_MAX_TEXTURE_SIZE
#ifndef GL_MAX_VIEWPORT_DIMS
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#endif //GL_MAX_VIEWPORT_DIMS
#ifndef GL_SUBPIXEL_BITS
#define GL_SUBPIXEL_BITS 0x0D50
#endif //GL_SUBPIXEL_BITS
#ifndef GL_RED_BITS
#define GL_RED_BITS 0x0D52
#endif //GL_RED_BITS
#ifndef GL_GREEN_BITS
#define GL_GREEN_BITS 0x0D53
#endif //GL_GREEN_BITS
#ifndef GL_BLUE_BITS
#define GL_BLUE_BITS 0x0D54
#endif //GL_BLUE_BITS
#ifndef GL_ALPHA_BITS
#define GL_ALPHA_BITS 0x0D55
#endif //GL_ALPHA_BITS
#ifndef GL_DEPTH_BITS
#define GL_DEPTH_BITS 0x0D56
#endif //GL_DEPTH_BITS
#ifndef GL_STENCIL_BITS
#define GL_STENCIL_BITS 0x0D57
#endif //GL_STENCIL_BITS
#ifndef GL_TEXTURE_2D
#define GL_TEXTURE_2D 0x0DE1
#endif //GL_TEXTURE_2D
#ifndef GL_DONT_CARE
#define GL_DONT_CARE 0x1100
#endif //GL_DONT_CARE
#ifndef GL_FASTEST
#define GL_FASTEST 0x1101
#endif //GL_FASTEST
#ifndef GL_NICEST
#define GL_NICEST 0x1102
#endif //GL_NICEST
#ifndef GL_BYTE
#define GL_BYTE 0x1400
#endif //GL_BYTE
#ifndef GL_UNSIGNED_BYTE
#define GL_UNSIGNED_BYTE 0x1401
#endif //GL_UNSIGNED_BYTE
#ifndef GL_SHORT
#define GL_SHORT 0x1402
#endif //GL_SHORT
#ifndef GL_UNSIGNED_SHORT
#define GL_UNSIGNED_SHORT 0x1403
#endif //GL_UNSIGNED_SHORT
#ifndef GL_INT
#define GL_INT 0x1404
#endif //GL_INT
#ifndef GL_UNSIGNED_INT
#define GL_UNSIGNED_INT 0x1405
#endif //GL_UNSIGNED_INT
#ifndef GL_FLOAT
#define GL_FLOAT 0x1406
#endif //GL_FLOAT
#ifndef GL_HALF_FLOAT
#define GL_HALF_FLOAT 0x140B
#endif //GL_HALF_FLOAT
#ifndef GL_FIXED
#define GL_FIXED 0x140C
#endif //GL_FIXED
#ifndef GL_INVERT
#define GL_INVERT 0x150A
#endif //GL_INVERT
#ifndef GL_TEXTURE
#define GL_TEXTURE 0x1702
#endif //GL_TEXTURE
#ifndef GL_COLOR
#define GL_COLOR 0x1800
#endif //GL_COLOR
#ifndef GL_DEPTH
#define GL_DEPTH 0x1801
#endif //GL_DEPTH
#ifndef GL_STENCIL
#define GL_STENCIL 0x1802
#endif //GL_STENCIL
#ifndef GL_DEPTH_COMPONENT
#define GL_DEPTH_COMPONENT 0x1902
#endif //GL_DEPTH_COMPONENT
#ifndef GL_RED
#define GL_RED 0x1903
#endif //GL_RED
#ifndef GL_GREEN
#define GL_GREEN 0x1904
#endif //GL_GREEN
#ifndef GL_BLUE
#define GL_BLUE 0x1905
#endif //GL_BLUE
#ifndef GL_ALPHA
#define GL_ALPHA 0x1906
#endif //GL_ALPHA
#ifndef GL_RGB
#define GL_RGB 0x1907
#endif //GL_RGB
#ifndef GL_RGBA
#define GL_RGBA 0x1908
#endif //GL_RGBA
#ifndef GL_LUMINANCE
#define GL_LUMINANCE 0x1909
#endif //GL_LUMINANCE
#ifndef GL_LUMINANCE_ALPHA
#define GL_LUMINANCE_ALPHA 0x190A
#endif //GL_LUMINANCE_ALPHA
#ifndef GL_KEEP
#define GL_KEEP 0x1E00
#endif //GL_KEEP
#ifndef GL_REPLACE
#define GL_REPLACE 0x1E01
#endif //GL_REPLACE
#ifndef GL_INCR
#define GL_INCR 0x1E02
#endif //GL_INCR
#ifndef GL_DECR
#define GL_DECR 0x1E03
#endif //GL_DECR
#ifndef GL_VENDOR
#define GL_VENDOR 0x1F00
#endif //GL_VENDOR
#ifndef GL_RENDERER
#define GL_RENDERER 0x1F01
#endif //GL_RENDERER
#ifndef GL_VERSION
#define GL_VERSION 0x1F02
#endif //GL_VERSION
#ifndef GL_EXTENSIONS
#define GL_EXTENSIONS 0x1F03
#endif //GL_EXTENSIONS
#ifndef GL_NEAREST
#define GL_NEAREST 0x2600
#endif //GL_NEAREST
#ifndef GL_LINEAR
#define GL_LINEAR 0x2601
#endif //GL_LINEAR
#ifndef GL_NEAREST_MIPMAP_NEAREST
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#endif //GL_NEAREST_MIPMAP_NEAREST
#ifndef GL_LINEAR_MIPMAP_NEAREST
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#endif //GL_LINEAR_MIPMAP_NEAREST
#ifndef GL_NEAREST_MIPMAP_LINEAR
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#endif //GL_NEAREST_MIPMAP_LINEAR
#ifndef GL_LINEAR_MIPMAP_LINEAR
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#endif //GL_LINEAR_MIPMAP_LINEAR
#ifndef GL_TEXTURE_MAG_FILTER
#define GL_TEXTURE_MAG_FILTER 0x2800
#endif //GL_TEXTURE_MAG_FILTER
#ifndef GL_TEXTURE_MIN_FILTER
#define GL_TEXTURE_MIN_FILTER 0x2801
#endif //GL_TEXTURE_MIN_FILTER
#ifndef GL_TEXTURE_WRAP_S
#define GL_TEXTURE_WRAP_S 0x2802
#endif //GL_TEXTURE_WRAP_S
#ifndef GL_TEXTURE_WRAP_T
#define GL_TEXTURE_WRAP_T 0x2803
#endif //GL_TEXTURE_WRAP_T
#ifndef GL_REPEAT
#define GL_REPEAT 0x2901
#endif //GL_REPEAT
#ifndef GL_POLYGON_OFFSET_UNITS
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#endif //GL_POLYGON_OFFSET_UNITS
#ifndef GL_CONSTANT_COLOR
#define GL_CONSTANT_COLOR 0x8001
#endif //GL_CONSTANT_COLOR
#ifndef GL_ONE_MINUS_CONSTANT_COLOR
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#endif //GL_ONE_MINUS_CONSTANT_COLOR
#ifndef GL_CONSTANT_ALPHA
#define GL_CONSTANT_ALPHA 0x8003
#endif //GL_CONSTANT_ALPHA
#ifndef GL_ONE_MINUS_CONSTANT_ALPHA
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#endif //GL_ONE_MINUS_CONSTANT_ALPHA
#ifndef GL_BLEND_COLOR
#define GL_BLEND_COLOR 0x8005
#endif //GL_BLEND_COLOR
#ifndef GL_FUNC_ADD
#define GL_FUNC_ADD 0x8006
#endif //GL_FUNC_ADD
#ifndef GL_MIN
#define GL_MIN 0x8007
#endif //GL_MIN
#ifndef GL_MAX
#define GL_MAX 0x8008
#endif //GL_MAX
#ifndef GL_BLEND_EQUATION
#define GL_BLEND_EQUATION 0x8009
#endif //GL_BLEND_EQUATION
#ifndef GL_BLEND_EQUATION_RGB
#define GL_BLEND_EQUATION_RGB 0x8009
#endif //GL_BLEND_EQUATION_RGB
#ifndef GL_FUNC_SUBTRACT
#define GL_FUNC_SUBTRACT 0x800A
#endif //GL_FUNC_SUBTRACT
#ifndef GL_FUNC_REVERSE_SUBTRACT
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#endif //GL_FUNC_REVERSE_SUBTRACT
#ifndef GL_UNSIGNED_SHORT_4_4_4_4
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#endif //GL_UNSIGNED_SHORT_4_4_4_4
#ifndef GL_UNSIGNED_SHORT_5_5_5_1
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#endif //GL_UNSIGNED_SHORT_5_5_5_1
#ifndef GL_POLYGON_OFFSET_FILL
#define GL_POLYGON_OFFSET_FILL 0x8037
#endif //GL_POLYGON_OFFSET_FILL
#ifndef GL_POLYGON_OFFSET_FACTOR
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#endif //GL_POLYGON_OFFSET_FACTOR
#ifndef GL_RGB8
#define GL_RGB8 0x8051
#endif //GL_RGB8
#ifndef GL_RGBA4
#define GL_RGBA4 0x8056
#endif //GL_RGBA4
#ifndef GL_RGB5_A1
#define GL_RGB5_A1 0x8057
#endif //GL_RGB5_A1
#ifndef GL_RGBA8
#define GL_RGBA8 0x8058
#endif //GL_RGBA8
#ifndef GL_RGB10_A2
#define GL_RGB10_A2 0x8059
#endif //GL_RGB10_A2
#ifndef GL_TEXTURE_BINDING_2D
#define GL_TEXTURE_BINDING_2D 0x8069
#endif //GL_TEXTURE_BINDING_2D
#ifndef GL_TEXTURE_BINDING_3D
#define GL_TEXTURE_BINDING_3D 0x806A
#endif //GL_TEXTURE_BINDING_3D
#ifndef GL_UNPACK_SKIP_IMAGES
#define GL_UNPACK_SKIP_IMAGES 0x806D
#endif //GL_UNPACK_SKIP_IMAGES
#ifndef GL_UNPACK_IMAGE_HEIGHT
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#endif //GL_UNPACK_IMAGE_HEIGHT
#ifndef GL_TEXTURE_3D
#define GL_TEXTURE_3D 0x806F
#endif //GL_TEXTURE_3D
#ifndef GL_TEXTURE_WRAP_R
#define GL_TEXTURE_WRAP_R 0x8072
#endif //GL_TEXTURE_WRAP_R
#ifndef GL_MAX_3D_TEXTURE_SIZE
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#endif //GL_MAX_3D_TEXTURE_SIZE
#ifndef GL_SAMPLE_ALPHA_TO_COVERAGE
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#endif //GL_SAMPLE_ALPHA_TO_COVERAGE
#ifndef GL_SAMPLE_COVERAGE
#define GL_SAMPLE_COVERAGE 0x80A0
#endif //GL_SAMPLE_COVERAGE
#ifndef GL_SAMPLE_BUFFERS
#define GL_SAMPLE_BUFFERS 0x80A8
#endif //GL_SAMPLE_BUFFERS
#ifndef GL_SAMPLES
#define GL_SAMPLES 0x80A9
#endif //GL_SAMPLES
#ifndef GL_SAMPLE_COVERAGE_VALUE
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#endif //GL_SAMPLE_COVERAGE_VALUE
#ifndef GL_SAMPLE_COVERAGE_INVERT
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#endif //GL_SAMPLE_COVERAGE_INVERT
#ifndef GL_BLEND_DST_RGB
#define GL_BLEND_DST_RGB 0x80C8
#endif //GL_BLEND_DST_RGB
#ifndef GL_BLEND_SRC_RGB
#define GL_BLEND_SRC_RGB 0x80C9
#endif //GL_BLEND_SRC_RGB
#ifndef GL_BLEND_DST_ALPHA
#define GL_BLEND_DST_ALPHA 0x80CA
#endif //GL_BLEND_DST_ALPHA
#ifndef GL_BLEND_SRC_ALPHA
#define GL_BLEND_SRC_ALPHA 0x80CB
#endif //GL_BLEND_SRC_ALPHA
#ifndef GL_MAX_ELEMENTS_VERTICES
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#endif //GL_MAX_ELEMENTS_VERTICES
#ifndef GL_MAX_ELEMENTS_INDICES
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#endif //GL_MAX_ELEMENTS_INDICES
#ifndef GL_CLAMP_TO_EDGE
#define GL_CLAMP_TO_EDGE 0x812F
#endif //GL_CLAMP_TO_EDGE
#ifndef GL_TEXTURE_MIN_LOD
#define GL_TEXTURE_MIN_LOD 0x813A
#endif //GL_TEXTURE_MIN_LOD
#ifndef GL_TEXTURE_MAX_LOD
#define GL_TEXTURE_MAX_LOD 0x813B
#endif //GL_TEXTURE_MAX_LOD
#ifndef GL_TEXTURE_BASE_LEVEL
#define GL_TEXTURE_BASE_LEVEL 0x813C
#endif //GL_TEXTURE_BASE_LEVEL
#ifndef GL_TEXTURE_MAX_LEVEL
#define GL_TEXTURE_MAX_LEVEL 0x813D
#endif //GL_TEXTURE_MAX_LEVEL
#ifndef GL_GENERATE_MIPMAP_HINT
#define GL_GENERATE_MIPMAP_HINT 0x8192
#endif //GL_GENERATE_MIPMAP_HINT
#ifndef GL_DEPTH_COMPONENT16
#define GL_DEPTH_COMPONENT16 0x81A5
#endif //GL_DEPTH_COMPONENT16
#ifndef GL_DEPTH_COMPONENT24
#define GL_DEPTH_COMPONENT24 0x81A6
#endif //GL_DEPTH_COMPONENT24
#ifndef GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#endif //GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
#ifndef GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#endif //GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#endif //GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#endif //GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#endif //GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#endif //GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#endif //GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#endif //GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
#ifndef GL_FRAMEBUFFER_DEFAULT
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#endif //GL_FRAMEBUFFER_DEFAULT
#ifndef GL_FRAMEBUFFER_UNDEFINED
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#endif //GL_FRAMEBUFFER_UNDEFINED
#ifndef GL_DEPTH_STENCIL_ATTACHMENT
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#endif //GL_DEPTH_STENCIL_ATTACHMENT
#ifndef GL_MAJOR_VERSION
#define GL_MAJOR_VERSION 0x821B
#endif //GL_MAJOR_VERSION
#ifndef GL_MINOR_VERSION
#define GL_MINOR_VERSION 0x821C
#endif //GL_MINOR_VERSION
#ifndef GL_NUM_EXTENSIONS
#define GL_NUM_EXTENSIONS 0x821D
#endif //GL_NUM_EXTENSIONS
#ifndef GL_RG
#define GL_RG 0x8227
#endif //GL_RG
#ifndef GL_RG_INTEGER
#define GL_RG_INTEGER 0x8228
#endif //GL_RG_INTEGER
#ifndef GL_R8
#define GL_R8 0x8229
#endif //GL_R8
#ifndef GL_RG8
#define GL_RG8 0x822B
#endif //GL_RG8
#ifndef GL_R16F
#define GL_R16F 0x822D
#endif //GL_R16F
#ifndef GL_R32F
#define GL_R32F 0x822E
#endif //GL_R32F
#ifndef GL_RG16F
#define GL_RG16F 0x822F
#endif //GL_RG16F
#ifndef GL_RG32F
#define GL_RG32F 0x8230
#endif //GL_RG32F
#ifndef GL_R8I
#define GL_R8I 0x8231
#endif //GL_R8I
#ifndef GL_R8UI
#define GL_R8UI 0x8232
#endif //GL_R8UI
#ifndef GL_R16I
#define GL_R16I 0x8233
#endif //GL_R16I
#ifndef GL_R16UI
#define GL_R16UI 0x8234
#endif //GL_R16UI
#ifndef GL_R32I
#define GL_R32I 0x8235
#endif //GL_R32I
#ifndef GL_R32UI
#define GL_R32UI 0x8236
#endif //GL_R32UI
#ifndef GL_RG8I
#define GL_RG8I 0x8237
#endif //GL_RG8I
#ifndef GL_RG8UI
#define GL_RG8UI 0x8238
#endif //GL_RG8UI
#ifndef GL_RG16I
#define GL_RG16I 0x8239
#endif //GL_RG16I
#ifndef GL_RG16UI
#define GL_RG16UI 0x823A
#endif //GL_RG16UI
#ifndef GL_RG32I
#define GL_RG32I 0x823B
#endif //GL_RG32I
#ifndef GL_RG32UI
#define GL_RG32UI 0x823C
#endif //GL_RG32UI
#ifndef GL_PROGRAM_BINARY_RETRIEVABLE_HINT
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#endif //GL_PROGRAM_BINARY_RETRIEVABLE_HINT
#ifndef GL_TEXTURE_IMMUTABLE_LEVELS
#define GL_TEXTURE_IMMUTABLE_LEVELS 0x82DF
#endif //GL_TEXTURE_IMMUTABLE_LEVELS
#ifndef GL_UNSIGNED_SHORT_5_6_5
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#endif //GL_UNSIGNED_SHORT_5_6_5
#ifndef GL_UNSIGNED_INT_2_10_10_10_REV
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#endif //GL_UNSIGNED_INT_2_10_10_10_REV
#ifndef GL_MIRRORED_REPEAT
#define GL_MIRRORED_REPEAT 0x8370
#endif //GL_MIRRORED_REPEAT
#ifndef GL_ALIASED_POINT_SIZE_RANGE
#define GL_ALIASED_POINT_SIZE_RANGE 0x846D
#endif //GL_ALIASED_POINT_SIZE_RANGE
#ifndef GL_ALIASED_LINE_WIDTH_RANGE
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#endif //GL_ALIASED_LINE_WIDTH_RANGE
#ifndef GL_TEXTURE0
#define GL_TEXTURE0 0x84C0
#endif //GL_TEXTURE0
#ifndef GL_TEXTURE1
#define GL_TEXTURE1 0x84C1
#endif //GL_TEXTURE1
#ifndef GL_TEXTURE2
#define GL_TEXTURE2 0x84C2
#endif //GL_TEXTURE2
#ifndef GL_TEXTURE3
#define GL_TEXTURE3 0x84C3
#endif //GL_TEXTURE3
#ifndef GL_TEXTURE4
#define GL_TEXTURE4 0x84C4
#endif //GL_TEXTURE4
#ifndef GL_TEXTURE5
#define GL_TEXTURE5 0x84C5
#endif //GL_TEXTURE5
#ifndef GL_TEXTURE6
#define GL_TEXTURE6 0x84C6
#endif //GL_TEXTURE6
#ifndef GL_TEXTURE7
#define GL_TEXTURE7 0x84C7
#endif //GL_TEXTURE7
#ifndef GL_TEXTURE8
#define GL_TEXTURE8 0x84C8
#endif //GL_TEXTURE8
#ifndef GL_TEXTURE9
#define GL_TEXTURE9 0x84C9
#endif //GL_TEXTURE9
#ifndef GL_TEXTURE10
#define GL_TEXTURE10 0x84CA
#endif //GL_TEXTURE10
#ifndef GL_TEXTURE11
#define GL_TEXTURE11 0x84CB
#endif //GL_TEXTURE11
#ifndef GL_TEXTURE12
#define GL_TEXTURE12 0x84CC
#endif //GL_TEXTURE12
#ifndef GL_TEXTURE13
#define GL_TEXTURE13 0x84CD
#endif //GL_TEXTURE13
#ifndef GL_TEXTURE14
#define GL_TEXTURE14 0x84CE
#endif //GL_TEXTURE14
#ifndef GL_TEXTURE15
#define GL_TEXTURE15 0x84CF
#endif //GL_TEXTURE15
#ifndef GL_TEXTURE16
#define GL_TEXTURE16 0x84D0
#endif //GL_TEXTURE16
#ifndef GL_TEXTURE17
#define GL_TEXTURE17 0x84D1
#endif //GL_TEXTURE17
#ifndef GL_TEXTURE18
#define GL_TEXTURE18 0x84D2
#endif //GL_TEXTURE18
#ifndef GL_TEXTURE19
#define GL_TEXTURE19 0x84D3
#endif //GL_TEXTURE19
#ifndef GL_TEXTURE20
#define GL_TEXTURE20 0x84D4
#endif //GL_TEXTURE20
#ifndef GL_TEXTURE21
#define GL_TEXTURE21 0x84D5
#endif //GL_TEXTURE21
#ifndef GL_TEXTURE22
#define GL_TEXTURE22 0x84D6
#endif //GL_TEXTURE22
#ifndef GL_TEXTURE23
#define GL_TEXTURE23 0x84D7
#endif //GL_TEXTURE23
#ifndef GL_TEXTURE24
#define GL_TEXTURE24 0x84D8
#endif //GL_TEXTURE24
#ifndef GL_TEXTURE25
#define GL_TEXTURE25 0x84D9
#endif //GL_TEXTURE25
#ifndef GL_TEXTURE26
#define GL_TEXTURE26 0x84DA
#endif //GL_TEXTURE26
#ifndef GL_TEXTURE27
#define GL_TEXTURE27 0x84DB
#endif //GL_TEXTURE27
#ifndef GL_TEXTURE28
#define GL_TEXTURE28 0x84DC
#endif //GL_TEXTURE28
#ifndef GL_TEXTURE29
#define GL_TEXTURE29 0x84DD
#endif //GL_TEXTURE29
#ifndef GL_TEXTURE30
#define GL_TEXTURE30 0x84DE
#endif //GL_TEXTURE30
#ifndef GL_TEXTURE31
#define GL_TEXTURE31 0x84DF
#endif //GL_TEXTURE31
#ifndef GL_ACTIVE_TEXTURE
#define GL_ACTIVE_TEXTURE 0x84E0
#endif //GL_ACTIVE_TEXTURE
#ifndef GL_MAX_RENDERBUFFER_SIZE
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#endif //GL_MAX_RENDERBUFFER_SIZE
#ifndef GL_DEPTH_STENCIL
#define GL_DEPTH_STENCIL 0x84F9
#endif //GL_DEPTH_STENCIL
#ifndef GL_UNSIGNED_INT_24_8
#define GL_UNSIGNED_INT_24_8 0x84FA
#endif //GL_UNSIGNED_INT_24_8
#ifndef GL_MAX_TEXTURE_LOD_BIAS
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#endif //GL_MAX_TEXTURE_LOD_BIAS
#ifndef GL_INCR_WRAP
#define GL_INCR_WRAP 0x8507
#endif //GL_INCR_WRAP
#ifndef GL_DECR_WRAP
#define GL_DECR_WRAP 0x8508
#endif //GL_DECR_WRAP
#ifndef GL_TEXTURE_CUBE_MAP
#define GL_TEXTURE_CUBE_MAP 0x8513
#endif //GL_TEXTURE_CUBE_MAP
#ifndef GL_TEXTURE_BINDING_CUBE_MAP
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#endif //GL_TEXTURE_BINDING_CUBE_MAP
#ifndef GL_TEXTURE_CUBE_MAP_POSITIVE_X
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#endif //GL_TEXTURE_CUBE_MAP_POSITIVE_X
#ifndef GL_TEXTURE_CUBE_MAP_NEGATIVE_X
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#endif //GL_TEXTURE_CUBE_MAP_NEGATIVE_X
#ifndef GL_TEXTURE_CUBE_MAP_POSITIVE_Y
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#endif //GL_TEXTURE_CUBE_MAP_POSITIVE_Y
#ifndef GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#endif //GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
#ifndef GL_TEXTURE_CUBE_MAP_POSITIVE_Z
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#endif //GL_TEXTURE_CUBE_MAP_POSITIVE_Z
#ifndef GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#endif //GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
#ifndef GL_MAX_CUBE_MAP_TEXTURE_SIZE
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#endif //GL_MAX_CUBE_MAP_TEXTURE_SIZE
#ifndef GL_VERTEX_ARRAY_BINDING
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#endif //GL_VERTEX_ARRAY_BINDING
#ifndef GL_VERTEX_ATTRIB_ARRAY_ENABLED
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#endif //GL_VERTEX_ATTRIB_ARRAY_ENABLED
#ifndef GL_VERTEX_ATTRIB_ARRAY_SIZE
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#endif //GL_VERTEX_ATTRIB_ARRAY_SIZE
#ifndef GL_VERTEX_ATTRIB_ARRAY_STRIDE
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#endif //GL_VERTEX_ATTRIB_ARRAY_STRIDE
#ifndef GL_VERTEX_ATTRIB_ARRAY_TYPE
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#endif //GL_VERTEX_ATTRIB_ARRAY_TYPE
#ifndef GL_CURRENT_VERTEX_ATTRIB
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#endif //GL_CURRENT_VERTEX_ATTRIB
#ifndef GL_VERTEX_ATTRIB_ARRAY_POINTER
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#endif //GL_VERTEX_ATTRIB_ARRAY_POINTER
#ifndef GL_NUM_COMPRESSED_TEXTURE_FORMATS
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#endif //GL_NUM_COMPRESSED_TEXTURE_FORMATS
#ifndef GL_COMPRESSED_TEXTURE_FORMATS
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#endif //GL_COMPRESSED_TEXTURE_FORMATS
#ifndef GL_PROGRAM_BINARY_LENGTH
#define GL_PROGRAM_BINARY_LENGTH 0x8741
#endif //GL_PROGRAM_BINARY_LENGTH
#ifndef GL_BUFFER_SIZE
#define GL_BUFFER_SIZE 0x8764
#endif //GL_BUFFER_SIZE
#ifndef GL_BUFFER_USAGE
#define GL_BUFFER_USAGE 0x8765
#endif //GL_BUFFER_USAGE
#ifndef GL_NUM_PROGRAM_BINARY_FORMATS
#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE
#endif //GL_NUM_PROGRAM_BINARY_FORMATS
#ifndef GL_PROGRAM_BINARY_FORMATS
#define GL_PROGRAM_BINARY_FORMATS 0x87FF
#endif //GL_PROGRAM_BINARY_FORMATS
#ifndef GL_STENCIL_BACK_FUNC
#define GL_STENCIL_BACK_FUNC 0x8800
#endif //GL_STENCIL_BACK_FUNC
#ifndef GL_STENCIL_BACK_FAIL
#define GL_STENCIL_BACK_FAIL 0x8801
#endif //GL_STENCIL_BACK_FAIL
#ifndef GL_STENCIL_BACK_PASS_DEPTH_FAIL
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#endif //GL_STENCIL_BACK_PASS_DEPTH_FAIL
#ifndef GL_STENCIL_BACK_PASS_DEPTH_PASS
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#endif //GL_STENCIL_BACK_PASS_DEPTH_PASS
#ifndef GL_RGBA32F
#define GL_RGBA32F 0x8814
#endif //GL_RGBA32F
#ifndef GL_RGB32F
#define GL_RGB32F 0x8815
#endif //GL_RGB32F
#ifndef GL_RGBA16F
#define GL_RGBA16F 0x881A
#endif //GL_RGBA16F
#ifndef GL_RGB16F
#define GL_RGB16F 0x881B
#endif //GL_RGB16F
#ifndef GL_MAX_DRAW_BUFFERS
#define GL_MAX_DRAW_BUFFERS 0x8824
#endif //GL_MAX_DRAW_BUFFERS
#ifndef GL_DRAW_BUFFER0
#define GL_DRAW_BUFFER0 0x8825
#endif //GL_DRAW_BUFFER0
#ifndef GL_DRAW_BUFFER1
#define GL_DRAW_BUFFER1 0x8826
#endif //GL_DRAW_BUFFER1
#ifndef GL_DRAW_BUFFER2
#define GL_DRAW_BUFFER2 0x8827
#endif //GL_DRAW_BUFFER2
#ifndef GL_DRAW_BUFFER3
#define GL_DRAW_BUFFER3 0x8828
#endif //GL_DRAW_BUFFER3
#ifndef GL_DRAW_BUFFER4
#define GL_DRAW_BUFFER4 0x8829
#endif //GL_DRAW_BUFFER4
#ifndef GL_DRAW_BUFFER5
#define GL_DRAW_BUFFER5 0x882A
#endif //GL_DRAW_BUFFER5
#ifndef GL_DRAW_BUFFER6
#define GL_DRAW_BUFFER6 0x882B
#endif //GL_DRAW_BUFFER6
#ifndef GL_DRAW_BUFFER7
#define GL_DRAW_BUFFER7 0x882C
#endif //GL_DRAW_BUFFER7
#ifndef GL_DRAW_BUFFER8
#define GL_DRAW_BUFFER8 0x882D
#endif //GL_DRAW_BUFFER8
#ifndef GL_DRAW_BUFFER9
#define GL_DRAW_BUFFER9 0x882E
#endif //GL_DRAW_BUFFER9
#ifndef GL_DRAW_BUFFER10
#define GL_DRAW_BUFFER10 0x882F
#endif //GL_DRAW_BUFFER10
#ifndef GL_DRAW_BUFFER11
#define GL_DRAW_BUFFER11 0x8830
#endif //GL_DRAW_BUFFER11
#ifndef GL_DRAW_BUFFER12
#define GL_DRAW_BUFFER12 0x8831
#endif //GL_DRAW_BUFFER12
#ifndef GL_DRAW_BUFFER13
#define GL_DRAW_BUFFER13 0x8832
#endif //GL_DRAW_BUFFER13
#ifndef GL_DRAW_BUFFER14
#define GL_DRAW_BUFFER14 0x8833
#endif //GL_DRAW_BUFFER14
#ifndef GL_DRAW_BUFFER15
#define GL_DRAW_BUFFER15 0x8834
#endif //GL_DRAW_BUFFER15
#ifndef GL_BLEND_EQUATION_ALPHA
#define GL_BLEND_EQUATION_ALPHA 0x883D
#endif //GL_BLEND_EQUATION_ALPHA
#ifndef GL_TEXTURE_COMPARE_MODE
#define GL_TEXTURE_COMPARE_MODE 0x884C
#endif //GL_TEXTURE_COMPARE_MODE
#ifndef GL_TEXTURE_COMPARE_FUNC
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#endif //GL_TEXTURE_COMPARE_FUNC
#ifndef GL_COMPARE_REF_TO_TEXTURE
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#endif //GL_COMPARE_REF_TO_TEXTURE
#ifndef GL_CURRENT_QUERY
#define GL_CURRENT_QUERY 0x8865
#endif //GL_CURRENT_QUERY
#ifndef GL_QUERY_RESULT
#define GL_QUERY_RESULT 0x8866
#endif //GL_QUERY_RESULT
#ifndef GL_QUERY_RESULT_AVAILABLE
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#endif //GL_QUERY_RESULT_AVAILABLE
#ifndef GL_MAX_VERTEX_ATTRIBS
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#endif //GL_MAX_VERTEX_ATTRIBS
#ifndef GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#endif //GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
#ifndef GL_MAX_TEXTURE_IMAGE_UNITS
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#endif //GL_MAX_TEXTURE_IMAGE_UNITS
#ifndef GL_ARRAY_BUFFER
#define GL_ARRAY_BUFFER 0x8892
#endif //GL_ARRAY_BUFFER
#ifndef GL_ELEMENT_ARRAY_BUFFER
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#endif //GL_ELEMENT_ARRAY_BUFFER
#ifndef GL_ARRAY_BUFFER_BINDING
#define GL_ARRAY_BUFFER_BINDING 0x8894
#endif //GL_ARRAY_BUFFER_BINDING
#ifndef GL_ELEMENT_ARRAY_BUFFER_BINDING
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#endif //GL_ELEMENT_ARRAY_BUFFER_BINDING
#ifndef GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#endif //GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
#ifndef GL_BUFFER_MAPPED
#define GL_BUFFER_MAPPED 0x88BC
#endif //GL_BUFFER_MAPPED
#ifndef GL_BUFFER_MAP_POINTER
#define GL_BUFFER_MAP_POINTER 0x88BD
#endif //GL_BUFFER_MAP_POINTER
#ifndef GL_STREAM_DRAW
#define GL_STREAM_DRAW 0x88E0
#endif //GL_STREAM_DRAW
#ifndef GL_STREAM_READ
#define GL_STREAM_READ 0x88E1
#endif //GL_STREAM_READ
#ifndef GL_STREAM_COPY
#define GL_STREAM_COPY 0x88E2
#endif //GL_STREAM_COPY
#ifndef GL_STATIC_DRAW
#define GL_STATIC_DRAW 0x88E4
#endif //GL_STATIC_DRAW
#ifndef GL_STATIC_READ
#define GL_STATIC_READ 0x88E5
#endif //GL_STATIC_READ
#ifndef GL_STATIC_COPY
#define GL_STATIC_COPY 0x88E6
#endif //GL_STATIC_COPY
#ifndef GL_DYNAMIC_DRAW
#define GL_DYNAMIC_DRAW 0x88E8
#endif //GL_DYNAMIC_DRAW
#ifndef GL_DYNAMIC_READ
#define GL_DYNAMIC_READ 0x88E9
#endif //GL_DYNAMIC_READ
#ifndef GL_DYNAMIC_COPY
#define GL_DYNAMIC_COPY 0x88EA
#endif //GL_DYNAMIC_COPY
#ifndef GL_PIXEL_PACK_BUFFER
#define GL_PIXEL_PACK_BUFFER 0x88EB
#endif //GL_PIXEL_PACK_BUFFER
#ifndef GL_PIXEL_UNPACK_BUFFER
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#endif //GL_PIXEL_UNPACK_BUFFER
#ifndef GL_PIXEL_PACK_BUFFER_BINDING
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#endif //GL_PIXEL_PACK_BUFFER_BINDING
#ifndef GL_PIXEL_UNPACK_BUFFER_BINDING
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#endif //GL_PIXEL_UNPACK_BUFFER_BINDING
#ifndef GL_DEPTH24_STENCIL8
#define GL_DEPTH24_STENCIL8 0x88F0
#endif //GL_DEPTH24_STENCIL8
#ifndef GL_VERTEX_ATTRIB_ARRAY_INTEGER
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#endif //GL_VERTEX_ATTRIB_ARRAY_INTEGER
#ifndef GL_VERTEX_ATTRIB_ARRAY_DIVISOR
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE
#endif //GL_VERTEX_ATTRIB_ARRAY_DIVISOR
#ifndef GL_MAX_ARRAY_TEXTURE_LAYERS
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#endif //GL_MAX_ARRAY_TEXTURE_LAYERS
#ifndef GL_MIN_PROGRAM_TEXEL_OFFSET
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#endif //GL_MIN_PROGRAM_TEXEL_OFFSET
#ifndef GL_MAX_PROGRAM_TEXEL_OFFSET
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#endif //GL_MAX_PROGRAM_TEXEL_OFFSET
#ifndef GL_SAMPLER_BINDING
#define GL_SAMPLER_BINDING 0x8919
#endif //GL_SAMPLER_BINDING
#ifndef GL_UNIFORM_BUFFER
#define GL_UNIFORM_BUFFER 0x8A11
#endif //GL_UNIFORM_BUFFER
#ifndef GL_UNIFORM_BUFFER_BINDING
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#endif //GL_UNIFORM_BUFFER_BINDING
#ifndef GL_UNIFORM_BUFFER_START
#define GL_UNIFORM_BUFFER_START 0x8A29
#endif //GL_UNIFORM_BUFFER_START
#ifndef GL_UNIFORM_BUFFER_SIZE
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#endif //GL_UNIFORM_BUFFER_SIZE
#ifndef GL_MAX_VERTEX_UNIFORM_BLOCKS
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#endif //GL_MAX_VERTEX_UNIFORM_BLOCKS
#ifndef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#endif //GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#ifndef GL_MAX_COMBINED_UNIFORM_BLOCKS
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#endif //GL_MAX_COMBINED_UNIFORM_BLOCKS
#ifndef GL_MAX_UNIFORM_BUFFER_BINDINGS
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#endif //GL_MAX_UNIFORM_BUFFER_BINDINGS
#ifndef GL_MAX_UNIFORM_BLOCK_SIZE
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#endif //GL_MAX_UNIFORM_BLOCK_SIZE
#ifndef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#endif //GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#ifndef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#endif //GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#ifndef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#endif //GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#ifndef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#endif //GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#ifndef GL_ACTIVE_UNIFORM_BLOCKS
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#endif //GL_ACTIVE_UNIFORM_BLOCKS
#ifndef GL_UNIFORM_TYPE
#define GL_UNIFORM_TYPE 0x8A37
#endif //GL_UNIFORM_TYPE
#ifndef GL_UNIFORM_SIZE
#define GL_UNIFORM_SIZE 0x8A38
#endif //GL_UNIFORM_SIZE
#ifndef GL_UNIFORM_NAME_LENGTH
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif //GL_UNIFORM_NAME_LENGTH
#ifndef GL_UNIFORM_BLOCK_INDEX
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#endif //GL_UNIFORM_BLOCK_INDEX
#ifndef GL_UNIFORM_OFFSET
#define GL_UNIFORM_OFFSET 0x8A3B
#endif //GL_UNIFORM_OFFSET
#ifndef GL_UNIFORM_ARRAY_STRIDE
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#endif //GL_UNIFORM_ARRAY_STRIDE
#ifndef GL_UNIFORM_MATRIX_STRIDE
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#endif //GL_UNIFORM_MATRIX_STRIDE
#ifndef GL_UNIFORM_IS_ROW_MAJOR
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#endif //GL_UNIFORM_IS_ROW_MAJOR
#ifndef GL_UNIFORM_BLOCK_BINDING
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#endif //GL_UNIFORM_BLOCK_BINDING
#ifndef GL_UNIFORM_BLOCK_DATA_SIZE
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#endif //GL_UNIFORM_BLOCK_DATA_SIZE
#ifndef GL_UNIFORM_BLOCK_NAME_LENGTH
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#endif //GL_UNIFORM_BLOCK_NAME_LENGTH
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#endif //GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#endif //GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#endif //GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#endif //GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#ifndef GL_FRAGMENT_SHADER
#define GL_FRAGMENT_SHADER 0x8B30
#endif //GL_FRAGMENT_SHADER
#ifndef GL_VERTEX_SHADER
#define GL_VERTEX_SHADER 0x8B31
#endif //GL_VERTEX_SHADER
#ifndef GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#endif //GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
#ifndef GL_MAX_VERTEX_UNIFORM_COMPONENTS
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#endif //GL_MAX_VERTEX_UNIFORM_COMPONENTS
#ifndef GL_MAX_VARYING_COMPONENTS
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#endif //GL_MAX_VARYING_COMPONENTS
#ifndef GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#endif //GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
#ifndef GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#endif //GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
#ifndef GL_SHADER_TYPE
#define GL_SHADER_TYPE 0x8B4F
#endif //GL_SHADER_TYPE
#ifndef GL_FLOAT_VEC2
#define GL_FLOAT_VEC2 0x8B50
#endif //GL_FLOAT_VEC2
#ifndef GL_FLOAT_VEC3
#define GL_FLOAT_VEC3 0x8B51
#endif //GL_FLOAT_VEC3
#ifndef GL_FLOAT_VEC4
#define GL_FLOAT_VEC4 0x8B52
#endif //GL_FLOAT_VEC4
#ifndef GL_INT_VEC2
#define GL_INT_VEC2 0x8B53
#endif //GL_INT_VEC2
#ifndef GL_INT_VEC3
#define GL_INT_VEC3 0x8B54
#endif //GL_INT_VEC3
#ifndef GL_INT_VEC4
#define GL_INT_VEC4 0x8B55
#endif //GL_INT_VEC4
#ifndef GL_BOOL
#define GL_BOOL 0x8B56
#endif //GL_BOOL
#ifndef GL_BOOL_VEC2
#define GL_BOOL_VEC2 0x8B57
#endif //GL_BOOL_VEC2
#ifndef GL_BOOL_VEC3
#define GL_BOOL_VEC3 0x8B58
#endif //GL_BOOL_VEC3
#ifndef GL_BOOL_VEC4
#define GL_BOOL_VEC4 0x8B59
#endif //GL_BOOL_VEC4
#ifndef GL_FLOAT_MAT2
#define GL_FLOAT_MAT2 0x8B5A
#endif //GL_FLOAT_MAT2
#ifndef GL_FLOAT_MAT3
#define GL_FLOAT_MAT3 0x8B5B
#endif //GL_FLOAT_MAT3
#ifndef GL_FLOAT_MAT4
#define GL_FLOAT_MAT4 0x8B5C
#endif //GL_FLOAT_MAT4
#ifndef GL_SAMPLER_2D
#define GL_SAMPLER_2D 0x8B5E
#endif //GL_SAMPLER_2D
#ifndef GL_SAMPLER_3D
#define GL_SAMPLER_3D 0x8B5F
#endif //GL_SAMPLER_3D
#ifndef GL_SAMPLER_CUBE
#define GL_SAMPLER_CUBE 0x8B60
#endif //GL_SAMPLER_CUBE
#ifndef GL_SAMPLER_2D_SHADOW
#define GL_SAMPLER_2D_SHADOW 0x8B62
#endif //GL_SAMPLER_2D_SHADOW
#ifndef GL_FLOAT_MAT2x3
#define GL_FLOAT_MAT2x3 0x8B65
#endif //GL_FLOAT_MAT2x3
#ifndef GL_FLOAT_MAT2x4
#define GL_FLOAT_MAT2x4 0x8B66
#endif //GL_FLOAT_MAT2x4
#ifndef GL_FLOAT_MAT3x2
#define GL_FLOAT_MAT3x2 0x8B67
#endif //GL_FLOAT_MAT3x2
#ifndef GL_FLOAT_MAT3x4
#define GL_FLOAT_MAT3x4 0x8B68
#endif //GL_FLOAT_MAT3x4
#ifndef GL_FLOAT_MAT4x2
#define GL_FLOAT_MAT4x2 0x8B69
#endif //GL_FLOAT_MAT4x2
#ifndef GL_FLOAT_MAT4x3
#define GL_FLOAT_MAT4x3 0x8B6A
#endif //GL_FLOAT_MAT4x3
#ifndef GL_DELETE_STATUS
#define GL_DELETE_STATUS 0x8B80
#endif //GL_DELETE_STATUS
#ifndef GL_COMPILE_STATUS
#define GL_COMPILE_STATUS 0x8B81
#endif //GL_COMPILE_STATUS
#ifndef GL_LINK_STATUS
#define GL_LINK_STATUS 0x8B82
#endif //GL_LINK_STATUS
#ifndef GL_VALIDATE_STATUS
#define GL_VALIDATE_STATUS 0x8B83
#endif //GL_VALIDATE_STATUS
#ifndef GL_INFO_LOG_LENGTH
#define GL_INFO_LOG_LENGTH 0x8B84
#endif //GL_INFO_LOG_LENGTH
#ifndef GL_ATTACHED_SHADERS
#define GL_ATTACHED_SHADERS 0x8B85
#endif //GL_ATTACHED_SHADERS
#ifndef GL_ACTIVE_UNIFORMS
#define GL_ACTIVE_UNIFORMS 0x8B86
#endif //GL_ACTIVE_UNIFORMS
#ifndef GL_ACTIVE_UNIFORM_MAX_LENGTH
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#endif //GL_ACTIVE_UNIFORM_MAX_LENGTH
#ifndef GL_SHADER_SOURCE_LENGTH
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#endif //GL_SHADER_SOURCE_LENGTH
#ifndef GL_ACTIVE_ATTRIBUTES
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#endif //GL_ACTIVE_ATTRIBUTES
#ifndef GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#endif //GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
#ifndef GL_FRAGMENT_SHADER_DERIVATIVE_HINT
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#endif //GL_FRAGMENT_SHADER_DERIVATIVE_HINT
#ifndef GL_SHADING_LANGUAGE_VERSION
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#endif //GL_SHADING_LANGUAGE_VERSION
#ifndef GL_CURRENT_PROGRAM
#define GL_CURRENT_PROGRAM 0x8B8D
#endif //GL_CURRENT_PROGRAM
#ifndef GL_IMPLEMENTATION_COLOR_READ_TYPE
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#endif //GL_IMPLEMENTATION_COLOR_READ_TYPE
#ifndef GL_IMPLEMENTATION_COLOR_READ_FORMAT
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#endif //GL_IMPLEMENTATION_COLOR_READ_FORMAT
#ifndef GL_UNSIGNED_NORMALIZED
#define GL_UNSIGNED_NORMALIZED 0x8C17
#endif //GL_UNSIGNED_NORMALIZED
#ifndef GL_TEXTURE_2D_ARRAY
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#endif //GL_TEXTURE_2D_ARRAY
#ifndef GL_TEXTURE_BINDING_2D_ARRAY
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#endif //GL_TEXTURE_BINDING_2D_ARRAY
#ifndef GL_ANY_SAMPLES_PASSED
#define GL_ANY_SAMPLES_PASSED 0x8C2F
#endif //GL_ANY_SAMPLES_PASSED
#ifndef GL_R11F_G11F_B10F
#define GL_R11F_G11F_B10F 0x8C3A
#endif //GL_R11F_G11F_B10F
#ifndef GL_UNSIGNED_INT_10F_11F_11F_REV
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#endif //GL_UNSIGNED_INT_10F_11F_11F_REV
#ifndef GL_RGB9_E5
#define GL_RGB9_E5 0x8C3D
#endif //GL_RGB9_E5
#ifndef GL_UNSIGNED_INT_5_9_9_9_REV
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#endif //GL_UNSIGNED_INT_5_9_9_9_REV
#ifndef GL_SRGB
#define GL_SRGB 0x8C40
#endif //GL_SRGB
#ifndef GL_SRGB8
#define GL_SRGB8 0x8C41
#endif //GL_SRGB8
#ifndef GL_SRGB8_ALPHA8
#define GL_SRGB8_ALPHA8 0x8C43
#endif //GL_SRGB8_ALPHA8
#ifndef GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#endif //GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_MODE
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_MODE
#ifndef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#endif //GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
#ifndef GL_TRANSFORM_FEEDBACK_VARYINGS
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#endif //GL_TRANSFORM_FEEDBACK_VARYINGS
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_START
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_START
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
#ifndef GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#endif //GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
#ifndef GL_RASTERIZER_DISCARD
#define GL_RASTERIZER_DISCARD 0x8C89
#endif //GL_RASTERIZER_DISCARD
#ifndef GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#endif //GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
#ifndef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#endif //GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
#ifndef GL_INTERLEAVED_ATTRIBS
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#endif //GL_INTERLEAVED_ATTRIBS
#ifndef GL_SEPARATE_ATTRIBS
#define GL_SEPARATE_ATTRIBS 0x8C8D
#endif //GL_SEPARATE_ATTRIBS
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#endif //GL_TRANSFORM_FEEDBACK_BUFFER
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
#ifndef GL_STENCIL_BACK_REF
#define GL_STENCIL_BACK_REF 0x8CA3
#endif //GL_STENCIL_BACK_REF
#ifndef GL_STENCIL_BACK_VALUE_MASK
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#endif //GL_STENCIL_BACK_VALUE_MASK
#ifndef GL_STENCIL_BACK_WRITEMASK
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#endif //GL_STENCIL_BACK_WRITEMASK
#ifndef GL_FRAMEBUFFER_BINDING
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#endif //GL_FRAMEBUFFER_BINDING
#ifndef GL_DRAW_FRAMEBUFFER_BINDING
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#endif //GL_DRAW_FRAMEBUFFER_BINDING
#ifndef GL_RENDERBUFFER_BINDING
#define GL_RENDERBUFFER_BINDING 0x8CA7
#endif //GL_RENDERBUFFER_BINDING
#ifndef GL_READ_FRAMEBUFFER
#define GL_READ_FRAMEBUFFER 0x8CA8
#endif //GL_READ_FRAMEBUFFER
#ifndef GL_DRAW_FRAMEBUFFER
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#endif //GL_DRAW_FRAMEBUFFER
#ifndef GL_READ_FRAMEBUFFER_BINDING
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#endif //GL_READ_FRAMEBUFFER_BINDING
#ifndef GL_RENDERBUFFER_SAMPLES
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#endif //GL_RENDERBUFFER_SAMPLES
#ifndef GL_DEPTH_COMPONENT32F
#define GL_DEPTH_COMPONENT32F 0x8CAC
#endif //GL_DEPTH_COMPONENT32F
#ifndef GL_DEPTH32F_STENCIL8
#define GL_DEPTH32F_STENCIL8 0x8CAD
#endif //GL_DEPTH32F_STENCIL8
#ifndef GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#endif //GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#endif //GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
#ifndef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#endif //GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
#ifndef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#endif //GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#endif //GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
#ifndef GL_FRAMEBUFFER_COMPLETE
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#endif //GL_FRAMEBUFFER_COMPLETE
#ifndef GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#endif //GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
#ifndef GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#endif //GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
#ifndef GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS 0x8CD9
#endif //GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
#ifndef GL_FRAMEBUFFER_UNSUPPORTED
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#endif //GL_FRAMEBUFFER_UNSUPPORTED
#ifndef GL_MAX_COLOR_ATTACHMENTS
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#endif //GL_MAX_COLOR_ATTACHMENTS
#ifndef GL_COLOR_ATTACHMENT0
#define GL_COLOR_ATTACHMENT0 0x8CE0
#endif //GL_COLOR_ATTACHMENT0
#ifndef GL_COLOR_ATTACHMENT1
#define GL_COLOR_ATTACHMENT1 0x8CE1
#endif //GL_COLOR_ATTACHMENT1
#ifndef GL_COLOR_ATTACHMENT2
#define GL_COLOR_ATTACHMENT2 0x8CE2
#endif //GL_COLOR_ATTACHMENT2
#ifndef GL_COLOR_ATTACHMENT3
#define GL_COLOR_ATTACHMENT3 0x8CE3
#endif //GL_COLOR_ATTACHMENT3
#ifndef GL_COLOR_ATTACHMENT4
#define GL_COLOR_ATTACHMENT4 0x8CE4
#endif //GL_COLOR_ATTACHMENT4
#ifndef GL_COLOR_ATTACHMENT5
#define GL_COLOR_ATTACHMENT5 0x8CE5
#endif //GL_COLOR_ATTACHMENT5
#ifndef GL_COLOR_ATTACHMENT6
#define GL_COLOR_ATTACHMENT6 0x8CE6
#endif //GL_COLOR_ATTACHMENT6
#ifndef GL_COLOR_ATTACHMENT7
#define GL_COLOR_ATTACHMENT7 0x8CE7
#endif //GL_COLOR_ATTACHMENT7
#ifndef GL_COLOR_ATTACHMENT8
#define GL_COLOR_ATTACHMENT8 0x8CE8
#endif //GL_COLOR_ATTACHMENT8
#ifndef GL_COLOR_ATTACHMENT9
#define GL_COLOR_ATTACHMENT9 0x8CE9
#endif //GL_COLOR_ATTACHMENT9
#ifndef GL_COLOR_ATTACHMENT10
#define GL_COLOR_ATTACHMENT10 0x8CEA
#endif //GL_COLOR_ATTACHMENT10
#ifndef GL_COLOR_ATTACHMENT11
#define GL_COLOR_ATTACHMENT11 0x8CEB
#endif //GL_COLOR_ATTACHMENT11
#ifndef GL_COLOR_ATTACHMENT12
#define GL_COLOR_ATTACHMENT12 0x8CEC
#endif //GL_COLOR_ATTACHMENT12
#ifndef GL_COLOR_ATTACHMENT13
#define GL_COLOR_ATTACHMENT13 0x8CED
#endif //GL_COLOR_ATTACHMENT13
#ifndef GL_COLOR_ATTACHMENT14
#define GL_COLOR_ATTACHMENT14 0x8CEE
#endif //GL_COLOR_ATTACHMENT14
#ifndef GL_COLOR_ATTACHMENT15
#define GL_COLOR_ATTACHMENT15 0x8CEF
#endif //GL_COLOR_ATTACHMENT15
#ifndef GL_DEPTH_ATTACHMENT
#define GL_DEPTH_ATTACHMENT 0x8D00
#endif //GL_DEPTH_ATTACHMENT
#ifndef GL_STENCIL_ATTACHMENT
#define GL_STENCIL_ATTACHMENT 0x8D20
#endif //GL_STENCIL_ATTACHMENT
#ifndef GL_FRAMEBUFFER
#define GL_FRAMEBUFFER 0x8D40
#endif //GL_FRAMEBUFFER
#ifndef GL_RENDERBUFFER
#define GL_RENDERBUFFER 0x8D41
#endif //GL_RENDERBUFFER
#ifndef GL_RENDERBUFFER_WIDTH
#define GL_RENDERBUFFER_WIDTH 0x8D42
#endif //GL_RENDERBUFFER_WIDTH
#ifndef GL_RENDERBUFFER_HEIGHT
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#endif //GL_RENDERBUFFER_HEIGHT
#ifndef GL_RENDERBUFFER_INTERNAL_FORMAT
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#endif //GL_RENDERBUFFER_INTERNAL_FORMAT
#ifndef GL_STENCIL_INDEX8
#define GL_STENCIL_INDEX8 0x8D48
#endif //GL_STENCIL_INDEX8
#ifndef GL_RENDERBUFFER_RED_SIZE
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#endif //GL_RENDERBUFFER_RED_SIZE
#ifndef GL_RENDERBUFFER_GREEN_SIZE
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#endif //GL_RENDERBUFFER_GREEN_SIZE
#ifndef GL_RENDERBUFFER_BLUE_SIZE
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#endif //GL_RENDERBUFFER_BLUE_SIZE
#ifndef GL_RENDERBUFFER_ALPHA_SIZE
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#endif //GL_RENDERBUFFER_ALPHA_SIZE
#ifndef GL_RENDERBUFFER_DEPTH_SIZE
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#endif //GL_RENDERBUFFER_DEPTH_SIZE
#ifndef GL_RENDERBUFFER_STENCIL_SIZE
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#endif //GL_RENDERBUFFER_STENCIL_SIZE
#ifndef GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#endif //GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
#ifndef GL_MAX_SAMPLES
#define GL_MAX_SAMPLES 0x8D57
#endif //GL_MAX_SAMPLES
#ifndef GL_RGB565
#define GL_RGB565 0x8D62
#endif //GL_RGB565
#ifndef GL_PRIMITIVE_RESTART_FIXED_INDEX
#define GL_PRIMITIVE_RESTART_FIXED_INDEX 0x8D69
#endif //GL_PRIMITIVE_RESTART_FIXED_INDEX
#ifndef GL_ANY_SAMPLES_PASSED_CONSERVATIVE
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0x8D6A
#endif //GL_ANY_SAMPLES_PASSED_CONSERVATIVE
#ifndef GL_MAX_ELEMENT_INDEX
#define GL_MAX_ELEMENT_INDEX 0x8D6B
#endif //GL_MAX_ELEMENT_INDEX
#ifndef GL_RGBA32UI
#define GL_RGBA32UI 0x8D70
#endif //GL_RGBA32UI
#ifndef GL_RGB32UI
#define GL_RGB32UI 0x8D71
#endif //GL_RGB32UI
#ifndef GL_RGBA16UI
#define GL_RGBA16UI 0x8D76
#endif //GL_RGBA16UI
#ifndef GL_RGB16UI
#define GL_RGB16UI 0x8D77
#endif //GL_RGB16UI
#ifndef GL_RGBA8UI
#define GL_RGBA8UI 0x8D7C
#endif //GL_RGBA8UI
#ifndef GL_RGB8UI
#define GL_RGB8UI 0x8D7D
#endif //GL_RGB8UI
#ifndef GL_RGBA32I
#define GL_RGBA32I 0x8D82
#endif //GL_RGBA32I
#ifndef GL_RGB32I
#define GL_RGB32I 0x8D83
#endif //GL_RGB32I
#ifndef GL_RGBA16I
#define GL_RGBA16I 0x8D88
#endif //GL_RGBA16I
#ifndef GL_RGB16I
#define GL_RGB16I 0x8D89
#endif //GL_RGB16I
#ifndef GL_RGBA8I
#define GL_RGBA8I 0x8D8E
#endif //GL_RGBA8I
#ifndef GL_RGB8I
#define GL_RGB8I 0x8D8F
#endif //GL_RGB8I
#ifndef GL_RED_INTEGER
#define GL_RED_INTEGER 0x8D94
#endif //GL_RED_INTEGER
#ifndef GL_RGB_INTEGER
#define GL_RGB_INTEGER 0x8D98
#endif //GL_RGB_INTEGER
#ifndef GL_RGBA_INTEGER
#define GL_RGBA_INTEGER 0x8D99
#endif //GL_RGBA_INTEGER
#ifndef GL_INT_2_10_10_10_REV
#define GL_INT_2_10_10_10_REV 0x8D9F
#endif //GL_INT_2_10_10_10_REV
#ifndef GL_FLOAT_32_UNSIGNED_INT_24_8_REV
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#endif //GL_FLOAT_32_UNSIGNED_INT_24_8_REV
#ifndef GL_SAMPLER_2D_ARRAY
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#endif //GL_SAMPLER_2D_ARRAY
#ifndef GL_SAMPLER_2D_ARRAY_SHADOW
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#endif //GL_SAMPLER_2D_ARRAY_SHADOW
#ifndef GL_SAMPLER_CUBE_SHADOW
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#endif //GL_SAMPLER_CUBE_SHADOW
#ifndef GL_UNSIGNED_INT_VEC2
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#endif //GL_UNSIGNED_INT_VEC2
#ifndef GL_UNSIGNED_INT_VEC3
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#endif //GL_UNSIGNED_INT_VEC3
#ifndef GL_UNSIGNED_INT_VEC4
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#endif //GL_UNSIGNED_INT_VEC4
#ifndef GL_INT_SAMPLER_2D
#define GL_INT_SAMPLER_2D 0x8DCA
#endif //GL_INT_SAMPLER_2D
#ifndef GL_INT_SAMPLER_3D
#define GL_INT_SAMPLER_3D 0x8DCB
#endif //GL_INT_SAMPLER_3D
#ifndef GL_INT_SAMPLER_CUBE
#define GL_INT_SAMPLER_CUBE 0x8DCC
#endif //GL_INT_SAMPLER_CUBE
#ifndef GL_INT_SAMPLER_2D_ARRAY
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#endif //GL_INT_SAMPLER_2D_ARRAY
#ifndef GL_UNSIGNED_INT_SAMPLER_2D
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#endif //GL_UNSIGNED_INT_SAMPLER_2D
#ifndef GL_UNSIGNED_INT_SAMPLER_3D
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#endif //GL_UNSIGNED_INT_SAMPLER_3D
#ifndef GL_UNSIGNED_INT_SAMPLER_CUBE
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#endif //GL_UNSIGNED_INT_SAMPLER_CUBE
#ifndef GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#endif //GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
#ifndef GL_LOW_FLOAT
#define GL_LOW_FLOAT 0x8DF0
#endif //GL_LOW_FLOAT
#ifndef GL_MEDIUM_FLOAT
#define GL_MEDIUM_FLOAT 0x8DF1
#endif //GL_MEDIUM_FLOAT
#ifndef GL_HIGH_FLOAT
#define GL_HIGH_FLOAT 0x8DF2
#endif //GL_HIGH_FLOAT
#ifndef GL_LOW_INT
#define GL_LOW_INT 0x8DF3
#endif //GL_LOW_INT
#ifndef GL_MEDIUM_INT
#define GL_MEDIUM_INT 0x8DF4
#endif //GL_MEDIUM_INT
#ifndef GL_HIGH_INT
#define GL_HIGH_INT 0x8DF5
#endif //GL_HIGH_INT
#ifndef GL_SHADER_BINARY_FORMATS
#define GL_SHADER_BINARY_FORMATS 0x8DF8
#endif //GL_SHADER_BINARY_FORMATS
#ifndef GL_NUM_SHADER_BINARY_FORMATS
#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
#endif //GL_NUM_SHADER_BINARY_FORMATS
#ifndef GL_SHADER_COMPILER
#define GL_SHADER_COMPILER 0x8DFA
#endif //GL_SHADER_COMPILER
#ifndef GL_MAX_VERTEX_UNIFORM_VECTORS
#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
#endif //GL_MAX_VERTEX_UNIFORM_VECTORS
#ifndef GL_MAX_VARYING_VECTORS
#define GL_MAX_VARYING_VECTORS 0x8DFC
#endif //GL_MAX_VARYING_VECTORS
#ifndef GL_MAX_FRAGMENT_UNIFORM_VECTORS
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
#endif //GL_MAX_FRAGMENT_UNIFORM_VECTORS
#ifndef GL_TRANSFORM_FEEDBACK
#define GL_TRANSFORM_FEEDBACK 0x8E22
#endif //GL_TRANSFORM_FEEDBACK
#ifndef GL_TRANSFORM_FEEDBACK_PAUSED
#define GL_TRANSFORM_FEEDBACK_PAUSED 0x8E23
#endif //GL_TRANSFORM_FEEDBACK_PAUSED
#ifndef GL_TRANSFORM_FEEDBACK_ACTIVE
#define GL_TRANSFORM_FEEDBACK_ACTIVE 0x8E24
#endif //GL_TRANSFORM_FEEDBACK_ACTIVE
#ifndef GL_TRANSFORM_FEEDBACK_BINDING
#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
#endif //GL_TRANSFORM_FEEDBACK_BINDING
#ifndef GL_TEXTURE_SWIZZLE_R
#define GL_TEXTURE_SWIZZLE_R 0x8E42
#endif //GL_TEXTURE_SWIZZLE_R
#ifndef GL_TEXTURE_SWIZZLE_G
#define GL_TEXTURE_SWIZZLE_G 0x8E43
#endif //GL_TEXTURE_SWIZZLE_G
#ifndef GL_TEXTURE_SWIZZLE_B
#define GL_TEXTURE_SWIZZLE_B 0x8E44
#endif //GL_TEXTURE_SWIZZLE_B
#ifndef GL_TEXTURE_SWIZZLE_A
#define GL_TEXTURE_SWIZZLE_A 0x8E45
#endif //GL_TEXTURE_SWIZZLE_A
#ifndef GL_COPY_READ_BUFFER_BINDING
#define GL_COPY_READ_BUFFER_BINDING 0x8F36
#endif //GL_COPY_READ_BUFFER_BINDING
#ifndef GL_COPY_READ_BUFFER
#define GL_COPY_READ_BUFFER 0x8F36
#endif //GL_COPY_READ_BUFFER
#ifndef GL_COPY_WRITE_BUFFER
#define GL_COPY_WRITE_BUFFER 0x8F37
#endif //GL_COPY_WRITE_BUFFER
#ifndef GL_COPY_WRITE_BUFFER_BINDING
#define GL_COPY_WRITE_BUFFER_BINDING 0x8F37
#endif //GL_COPY_WRITE_BUFFER_BINDING
#ifndef GL_R8_SNORM
#define GL_R8_SNORM 0x8F94
#endif //GL_R8_SNORM
#ifndef GL_RG8_SNORM
#define GL_RG8_SNORM 0x8F95
#endif //GL_RG8_SNORM
#ifndef GL_RGB8_SNORM
#define GL_RGB8_SNORM 0x8F96
#endif //GL_RGB8_SNORM
#ifndef GL_RGBA8_SNORM
#define GL_RGBA8_SNORM 0x8F97
#endif //GL_RGBA8_SNORM
#ifndef GL_SIGNED_NORMALIZED
#define GL_SIGNED_NORMALIZED 0x8F9C
#endif //GL_SIGNED_NORMALIZED
#ifndef GL_RGB10_A2UI
#define GL_RGB10_A2UI 0x906F
#endif //GL_RGB10_A2UI
#ifndef GL_MAX_SERVER_WAIT_TIMEOUT
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#endif //GL_MAX_SERVER_WAIT_TIMEOUT
#ifndef GL_OBJECT_TYPE
#define GL_OBJECT_TYPE 0x9112
#endif //GL_OBJECT_TYPE
#ifndef GL_SYNC_CONDITION
#define GL_SYNC_CONDITION 0x9113
#endif //GL_SYNC_CONDITION
#ifndef GL_SYNC_STATUS
#define GL_SYNC_STATUS 0x9114
#endif //GL_SYNC_STATUS
#ifndef GL_SYNC_FLAGS
#define GL_SYNC_FLAGS 0x9115
#endif //GL_SYNC_FLAGS
#ifndef GL_SYNC_FENCE
#define GL_SYNC_FENCE 0x9116
#endif //GL_SYNC_FENCE
#ifndef GL_SYNC_GPU_COMMANDS_COMPLETE
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#endif //GL_SYNC_GPU_COMMANDS_COMPLETE
#ifndef GL_UNSIGNALED
#define GL_UNSIGNALED 0x9118
#endif //GL_UNSIGNALED
#ifndef GL_SIGNALED
#define GL_SIGNALED 0x9119
#endif //GL_SIGNALED
#ifndef GL_ALREADY_SIGNALED
#define GL_ALREADY_SIGNALED 0x911A
#endif //GL_ALREADY_SIGNALED
#ifndef GL_TIMEOUT_EXPIRED
#define GL_TIMEOUT_EXPIRED 0x911B
#endif //GL_TIMEOUT_EXPIRED
#ifndef GL_CONDITION_SATISFIED
#define GL_CONDITION_SATISFIED 0x911C
#endif //GL_CONDITION_SATISFIED
#ifndef GL_WAIT_FAILED
#define GL_WAIT_FAILED 0x911D
#endif //GL_WAIT_FAILED
#ifndef GL_BUFFER_ACCESS_FLAGS
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#endif //GL_BUFFER_ACCESS_FLAGS
#ifndef GL_BUFFER_MAP_LENGTH
#define GL_BUFFER_MAP_LENGTH 0x9120
#endif //GL_BUFFER_MAP_LENGTH
#ifndef GL_BUFFER_MAP_OFFSET
#define GL_BUFFER_MAP_OFFSET 0x9121
#endif //GL_BUFFER_MAP_OFFSET
#ifndef GL_MAX_VERTEX_OUTPUT_COMPONENTS
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
#endif //GL_MAX_VERTEX_OUTPUT_COMPONENTS
#ifndef GL_MAX_FRAGMENT_INPUT_COMPONENTS
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
#endif //GL_MAX_FRAGMENT_INPUT_COMPONENTS
#ifndef GL_TEXTURE_IMMUTABLE_FORMAT
#define GL_TEXTURE_IMMUTABLE_FORMAT 0x912F
#endif //GL_TEXTURE_IMMUTABLE_FORMAT
#ifndef GL_COMPRESSED_R11_EAC
#define GL_COMPRESSED_R11_EAC 0x9270
#endif //GL_COMPRESSED_R11_EAC
#ifndef GL_COMPRESSED_SIGNED_R11_EAC
#define GL_COMPRESSED_SIGNED_R11_EAC 0x9271
#endif //GL_COMPRESSED_SIGNED_R11_EAC
#ifndef GL_COMPRESSED_RG11_EAC
#define GL_COMPRESSED_RG11_EAC 0x9272
#endif //GL_COMPRESSED_RG11_EAC
#ifndef GL_COMPRESSED_SIGNED_RG11_EAC
#define GL_COMPRESSED_SIGNED_RG11_EAC 0x9273
#endif //GL_COMPRESSED_SIGNED_RG11_EAC
#ifndef GL_COMPRESSED_RGB8_ETC2
#define GL_COMPRESSED_RGB8_ETC2 0x9274
#endif //GL_COMPRESSED_RGB8_ETC2
#ifndef GL_COMPRESSED_SRGB8_ETC2
#define GL_COMPRESSED_SRGB8_ETC2 0x9275
#endif //GL_COMPRESSED_SRGB8_ETC2
#ifndef GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276
#endif //GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
#ifndef GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277
#endif //GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
#ifndef GL_COMPRESSED_RGBA8_ETC2_EAC
#define GL_COMPRESSED_RGBA8_ETC2_EAC 0x9278
#endif //GL_COMPRESSED_RGBA8_ETC2_EAC
#ifndef GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0x9279
#endif //GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
#ifndef GL_NUM_SAMPLE_COUNTS
#define GL_NUM_SAMPLE_COUNTS 0x9380
#endif //GL_NUM_SAMPLE_COUNTS
#ifndef GL_INVALID_INDEX
#define GL_INVALID_INDEX 0xFFFFFFFF
#endif //GL_INVALID_INDEX
#ifndef GL_TIMEOUT_IGNORED
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFF
#endif //GL_TIMEOUT_IGNORED
#ifndef GL_TRUE
#define GL_TRUE 1
#endif //GL_TRUE
#ifndef GL_ONE
#define GL_ONE 1
#endif //GL_ONE
extern "C" {
extern void glActiveTexture(GLenum);
extern void glAttachShader(GLuint,GLuint);
extern void glBeginQuery(GLenum,GLuint);
extern void glBeginTransformFeedback(GLenum);
extern void glBindAttribLocation(GLuint,GLuint,const GLchar *);
extern void glBindBuffer(GLenum,GLuint);
extern void glBindBufferBase(GLenum,GLuint,GLuint);
extern void glBindBufferRange(GLenum,GLuint,GLuint,GLintptr,GLsizeiptr);
extern void glBindFramebuffer(GLenum,GLuint);
extern void glBindRenderbuffer(GLenum,GLuint);
extern void glBindSampler(GLuint,GLuint);
extern void glBindTexture(GLenum,GLuint);
extern void glBindTransformFeedback(GLenum,GLuint);
extern void glBindVertexArray(GLuint);
extern void glBlendColor(GLfloat,GLfloat,GLfloat,GLfloat);
extern void glBlendEquation(GLenum);
extern void glBlendEquationSeparate(GLenum,GLenum);
extern void glBlendFunc(GLenum,GLenum);
extern void glBlendFuncSeparate(GLenum,GLenum,GLenum,GLenum);
extern void glBlitFramebuffer(GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLbitfield,GLenum);
extern void glBufferData(GLenum,GLsizeiptr,const void *,GLenum);
extern void glBufferSubData(GLenum,GLintptr,GLsizeiptr,const void *);
extern GLenum glCheckFramebufferStatus(GLenum);
extern void glClear(GLbitfield);
extern void glClearBufferfi(GLenum,GLint,GLfloat,GLint);
extern void glClearBufferfv(GLenum,GLint,const GLfloat *);
extern void glClearBufferiv(GLenum,GLint,const GLint *);
extern void glClearBufferuiv(GLenum,GLint,const GLuint *);
extern void glClearColor(GLfloat,GLfloat,GLfloat,GLfloat);
extern void glClearDepthf(GLfloat);
extern void glClearStencil(GLint);
extern GLenum glClientWaitSync(GLsync,GLbitfield,GLuint64);
extern void glColorMask(GLboolean,GLboolean,GLboolean,GLboolean);
extern void glCompileShader(GLuint);
extern void glCompressedTexImage2D(GLenum,GLint,GLenum,GLsizei,GLsizei,GLint,GLsizei,const void *);
extern void glCompressedTexImage3D(GLenum,GLint,GLenum,GLsizei,GLsizei,GLsizei,GLint,GLsizei,const void *);
extern void glCompressedTexSubImage2D(GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLsizei,const void *);
extern void glCompressedTexSubImage3D(GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLsizei,const void *);
extern void glCopyBufferSubData(GLenum,GLenum,GLintptr,GLintptr,GLsizeiptr);
extern void glCopyTexImage2D(GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLsizei,GLint);
extern void glCopyTexSubImage2D(GLenum,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
extern void glCopyTexSubImage3D(GLenum,GLint,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
extern GLuint glCreateProgram();
extern GLuint glCreateShader(GLenum);
extern void glCullFace(GLenum);
extern void glDeleteBuffers(GLsizei,const GLuint *);
extern void glDeleteFramebuffers(GLsizei,const GLuint *);
extern void glDeleteProgram(GLuint);
extern void glDeleteQueries(GLsizei,const GLuint *);
extern void glDeleteRenderbuffers(GLsizei,const GLuint *);
extern void glDeleteSamplers(GLsizei,const GLuint *);
extern void glDeleteShader(GLuint);
extern void glDeleteSync(GLsync);
extern void glDeleteTextures(GLsizei,const GLuint *);
extern void glDeleteTransformFeedbacks(GLsizei,const GLuint *);
extern void glDeleteVertexArrays(GLsizei,const GLuint *);
extern void glDepthFunc(GLenum);
extern void glDepthMask(GLboolean);
extern void glDepthRangef(GLfloat,GLfloat);
extern void glDetachShader(GLuint,GLuint);
extern void glDisable(GLenum);
extern void glDisableVertexAttribArray(GLuint);
extern void glDrawArrays(GLenum,GLint,GLsizei);
extern void glDrawArraysInstanced(GLenum,GLint,GLsizei,GLsizei);
extern void glDrawBuffers(GLsizei,const GLenum *);
extern void glDrawElements(GLenum,GLsizei,GLenum,const void *);
extern void glDrawElementsInstanced(GLenum,GLsizei,GLenum,const void *,GLsizei);
extern void glDrawRangeElements(GLenum,GLuint,GLuint,GLsizei,GLenum,const void *);
extern void glEnable(GLenum);
extern void glEnableVertexAttribArray(GLuint);
extern void glEndQuery(GLenum);
extern void glEndTransformFeedback();
extern GLsync glFenceSync(GLenum,GLbitfield);
extern void glFinish();
extern void glFlush();
extern void glFlushMappedBufferRange(GLenum,GLintptr,GLsizeiptr);
extern void glFramebufferRenderbuffer(GLenum,GLenum,GLenum,GLuint);
extern void glFramebufferTexture2D(GLenum,GLenum,GLenum,GLuint,GLint);
extern void glFramebufferTextureLayer(GLenum,GLenum,GLuint,GLint,GLint);
extern void glFrontFace(GLenum);
extern void glGenBuffers(GLsizei,GLuint *);
extern void glGenFramebuffers(GLsizei,GLuint *);
extern void glGenQueries(GLsizei,GLuint *);
extern void glGenRenderbuffers(GLsizei,GLuint *);
extern void glGenSamplers(GLsizei,GLuint *);
extern void glGenTextures(GLsizei,GLuint *);
extern void glGenTransformFeedbacks(GLsizei,GLuint *);
extern void glGenVertexArrays(GLsizei,GLuint *);
extern void glGenerateMipmap(GLenum);
extern void glGetActiveAttrib(GLuint,GLuint,GLsizei,GLsizei *,GLint *,GLenum *,GLchar *);
extern void glGetActiveUniform(GLuint,GLuint,GLsizei,GLsizei *,GLint *,GLenum *,GLchar *);
extern void glGetActiveUniformBlockName(GLuint,GLuint,GLsizei,GLsizei *,GLchar *);
extern void glGetActiveUniformBlockiv(GLuint,GLuint,GLenum,GLint *);
extern void glGetActiveUniformsiv(GLuint,GLsizei,const GLuint *,GLenum,GLint *);
extern void glGetAttachedShaders(GLuint,GLsizei,GLsizei *,GLuint *);
extern GLint glGetAttribLocation(GLuint,const GLchar *);
extern void glGetBooleanv(GLenum,GLboolean *);
extern void glGetBufferParameteri64v(GLenum,GLenum,GLint64 *);
extern void glGetBufferParameteriv(GLenum,GLenum,GLint *);
extern void glGetBufferPointerv(GLenum,GLenum,void **);
extern GLenum glGetError();
extern void glGetFloatv(GLenum,GLfloat *);
extern GLint glGetFragDataLocation(GLuint,const GLchar *);
extern void glGetFramebufferAttachmentParameteriv(GLenum,GLenum,GLenum,GLint *);
extern void glGetInteger64i_v(GLenum,GLuint,GLint64 *);
extern void glGetInteger64v(GLenum,GLint64 *);
extern void glGetIntegeri_v(GLenum,GLuint,GLint *);
extern void glGetIntegerv(GLenum,GLint *);
extern void glGetInternalformativ(GLenum,GLenum,GLenum,GLsizei,GLint *);
extern void glGetProgramBinary(GLuint,GLsizei,GLsizei *,GLenum *,void *);
extern void glGetProgramInfoLog(GLuint,GLsizei,GLsizei *,GLchar *);
extern void glGetProgramiv(GLuint,GLenum,GLint *);
extern void glGetQueryObjectuiv(GLuint,GLenum,GLuint *);
extern void glGetQueryiv(GLenum,GLenum,GLint *);
extern void glGetRenderbufferParameteriv(GLenum,GLenum,GLint *);
extern void glGetSamplerParameterfv(GLuint,GLenum,GLfloat *);
extern void glGetSamplerParameteriv(GLuint,GLenum,GLint *);
extern void glGetShaderInfoLog(GLuint,GLsizei,GLsizei *,GLchar *);
extern void glGetShaderPrecisionFormat(GLenum,GLenum,GLint *,GLint *);
extern void glGetShaderSource(GLuint,GLsizei,GLsizei *,GLchar *);
extern void glGetShaderiv(GLuint,GLenum,GLint *);
extern const GLubyte * glGetString(GLenum);
extern const GLubyte * glGetStringi(GLenum,GLuint);
extern void glGetSynciv(GLsync,GLenum,GLsizei,GLsizei *,GLint *);
extern void glGetTexParameterfv(GLenum,GLenum,GLfloat *);
extern void glGetTexParameteriv(GLenum,GLenum,GLint *);
extern void glGetTransformFeedbackVarying(GLuint,GLuint,GLsizei,GLsizei *,GLsizei *,GLenum *,GLchar *);
extern GLuint glGetUniformBlockIndex(GLuint,const GLchar *);
extern void glGetUniformIndices(GLuint,GLsizei,const GLchar *const*,GLuint *);
extern GLint glGetUniformLocation(GLuint,const GLchar *);
extern void glGetUniformfv(GLuint,GLint,GLfloat *);
extern void glGetUniformiv(GLuint,GLint,GLint *);
extern void glGetUniformuiv(GLuint,GLint,GLuint *);
extern void glGetVertexAttribIiv(GLuint,GLenum,GLint *);
extern void glGetVertexAttribIuiv(GLuint,GLenum,GLuint *);
extern void glGetVertexAttribPointerv(GLuint,GLenum,void **);
extern void glGetVertexAttribfv(GLuint,GLenum,GLfloat *);
extern void glGetVertexAttribiv(GLuint,GLenum,GLint *);
extern void glHint(GLenum,GLenum);
extern void glInvalidateFramebuffer(GLenum,GLsizei,const GLenum *);
extern void glInvalidateSubFramebuffer(GLenum,GLsizei,const GLenum *,GLint,GLint,GLsizei,GLsizei);
extern GLboolean glIsBuffer(GLuint);
extern GLboolean glIsEnabled(GLenum);
extern GLboolean glIsFramebuffer(GLuint);
extern GLboolean glIsProgram(GLuint);
extern GLboolean glIsQuery(GLuint);
extern GLboolean glIsRenderbuffer(GLuint);
extern GLboolean glIsSampler(GLuint);
extern GLboolean glIsShader(GLuint);
extern GLboolean glIsSync(GLsync);
extern GLboolean glIsTexture(GLuint);
extern GLboolean glIsTransformFeedback(GLuint);
extern GLboolean glIsVertexArray(GLuint);
extern void glLineWidth(GLfloat);
extern void glLinkProgram(GLuint);
extern void * glMapBufferRange(GLenum,GLintptr,GLsizeiptr,GLbitfield);
extern void glPauseTransformFeedback();
extern void glPixelStorei(GLenum,GLint);
extern void glPolygonOffset(GLfloat,GLfloat);
extern void glProgramBinary(GLuint,GLenum,const void *,GLsizei);
extern void glProgramParameteri(GLuint,GLenum,GLint);
extern void glReadBuffer(GLenum);
extern void glReadPixels(GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,void *);
extern void glReleaseShaderCompiler();
extern void glRenderbufferStorage(GLenum,GLenum,GLsizei,GLsizei);
extern void glRenderbufferStorageMultisample(GLenum,GLsizei,GLenum,GLsizei,GLsizei);
extern void glResumeTransformFeedback();
extern void glSampleCoverage(GLfloat,GLboolean);
extern void glSamplerParameterf(GLuint,GLenum,GLfloat);
extern void glSamplerParameterfv(GLuint,GLenum,const GLfloat *);
extern void glSamplerParameteri(GLuint,GLenum,GLint);
extern void glSamplerParameteriv(GLuint,GLenum,const GLint *);
extern void glScissor(GLint,GLint,GLsizei,GLsizei);
extern void glShaderBinary(GLsizei,const GLuint *,GLenum,const void *,GLsizei);
extern void glShaderSource(GLuint,GLsizei,const GLchar *const*,const GLint *);
extern void glStencilFunc(GLenum,GLint,GLuint);
extern void glStencilFuncSeparate(GLenum,GLenum,GLint,GLuint);
extern void glStencilMask(GLuint);
extern void glStencilMaskSeparate(GLenum,GLuint);
extern void glStencilOp(GLenum,GLenum,GLenum);
extern void glStencilOpSeparate(GLenum,GLenum,GLenum,GLenum);
extern void glTexImage2D(GLenum,GLint,GLint,GLsizei,GLsizei,GLint,GLenum,GLenum,const void *);
extern void glTexImage3D(GLenum,GLint,GLint,GLsizei,GLsizei,GLsizei,GLint,GLenum,GLenum,const void *);
extern void glTexParameterf(GLenum,GLenum,GLfloat);
extern void glTexParameterfv(GLenum,GLenum,const GLfloat *);
extern void glTexParameteri(GLenum,GLenum,GLint);
extern void glTexParameteriv(GLenum,GLenum,const GLint *);
extern void glTexStorage2D(GLenum,GLsizei,GLenum,GLsizei,GLsizei);
extern void glTexStorage3D(GLenum,GLsizei,GLenum,GLsizei,GLsizei,GLsizei);
extern void glTexSubImage2D(GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,const void *);
extern void glTexSubImage3D(GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,const void *);
extern void glTransformFeedbackVaryings(GLuint,GLsizei,const GLchar *const*,GLenum);
extern void glUniform1f(GLint,GLfloat);
extern void glUniform1fv(GLint,GLsizei,const GLfloat *);
extern void glUniform1i(GLint,GLint);
extern void glUniform1iv(GLint,GLsizei,const GLint *);
extern void glUniform1ui(GLint,GLuint);
extern void glUniform1uiv(GLint,GLsizei,const GLuint *);
extern void glUniform2f(GLint,GLfloat,GLfloat);
extern void glUniform2fv(GLint,GLsizei,const GLfloat *);
extern void glUniform2i(GLint,GLint,GLint);
extern void glUniform2iv(GLint,GLsizei,const GLint *);
extern void glUniform2ui(GLint,GLuint,GLuint);
extern void glUniform2uiv(GLint,GLsizei,const GLuint *);
extern void glUniform3f(GLint,GLfloat,GLfloat,GLfloat);
extern void glUniform3fv(GLint,GLsizei,const GLfloat *);
extern void glUniform3i(GLint,GLint,GLint,GLint);
extern void glUniform3iv(GLint,GLsizei,const GLint *);
extern void glUniform3ui(GLint,GLuint,GLuint,GLuint);
extern void glUniform3uiv(GLint,GLsizei,const GLuint *);
extern void glUniform4f(GLint,GLfloat,GLfloat,GLfloat,GLfloat);
extern void glUniform4fv(GLint,GLsizei,const GLfloat *);
extern void glUniform4i(GLint,GLint,GLint,GLint,GLint);
extern void glUniform4iv(GLint,GLsizei,const GLint *);
extern void glUniform4ui(GLint,GLuint,GLuint,GLuint,GLuint);
extern void glUniform4uiv(GLint,GLsizei,const GLuint *);
extern void glUniformBlockBinding(GLuint,GLuint,GLuint);
extern void glUniformMatrix2fv(GLint,GLsizei,GLboolean,const GLfloat *);
extern void glUniformMatrix2x3fv(GLint,GLsizei,GLboolean,const GLfloat *);
extern void glUniformMatrix2x4fv(GLint,GLsizei,GLboolean,const GLfloat *);
extern void glUniformMatrix3fv(GLint,GLsizei,GLboolean,const GLfloat *);
extern void glUniformMatrix3x2fv(GLint,GLsizei,GLboolean,const GLfloat *);
extern void glUniformMatrix3x4fv(GLint,GLsizei,GLboolean,const GLfloat *);
extern void glUniformMatrix4fv(GLint,GLsizei,GLboolean,const GLfloat *);
extern void glUniformMatrix4x2fv(GLint,GLsizei,GLboolean,const GLfloat *);
extern void glUniformMatrix4x3fv(GLint,GLsizei,GLboolean,const GLfloat *);
extern GLboolean glUnmapBuffer(GLenum);
extern void glUseProgram(GLuint);
extern void glValidateProgram(GLuint);
extern void glVertexAttrib1f(GLuint,GLfloat);
extern void glVertexAttrib1fv(GLuint,const GLfloat *);
extern void glVertexAttrib2f(GLuint,GLfloat,GLfloat);
extern void glVertexAttrib2fv(GLuint,const GLfloat *);
extern void glVertexAttrib3f(GLuint,GLfloat,GLfloat,GLfloat);
extern void glVertexAttrib3fv(GLuint,const GLfloat *);
extern void glVertexAttrib4f(GLuint,GLfloat,GLfloat,GLfloat,GLfloat);
extern void glVertexAttrib4fv(GLuint,const GLfloat *);
extern void glVertexAttribDivisor(GLuint,GLuint);
extern void glVertexAttribI4i(GLuint,GLint,GLint,GLint,GLint);
extern void glVertexAttribI4iv(GLuint,const GLint *);
extern void glVertexAttribI4ui(GLuint,GLuint,GLuint,GLuint,GLuint);
extern void glVertexAttribI4uiv(GLuint,const GLuint *);
extern void glVertexAttribIPointer(GLuint,GLint,GLenum,GLsizei,const void *);
extern void glVertexAttribPointer(GLuint,GLint,GLenum,GLboolean,GLsizei,const void *);
extern void glViewport(GLint,GLint,GLsizei,GLsizei);
extern void glWaitSync(GLsync,GLbitfield,GLuint64);
}
namespace gl{

#ifndef	GL_HPP_FUNDEF_ActiveTexture
#define GL_HPP_FUNDEF_ActiveTexture
typedef void (*PFNGLACTIVETEXTUREPROC_HPP)(GLenum);
static inline void ActiveTexture(GLenum texture1)
{
	static PFNGLACTIVETEXTUREPROC_HPP fn=reinterpret_cast<PFNGLACTIVETEXTUREPROC_HPP>(_impl::_get_proc_address("glActiveTexture",3,0));
	 fn(texture1);
}
#endif

#ifndef	GL_HPP_FUNDEF_AttachShader
#define GL_HPP_FUNDEF_AttachShader
typedef void (*PFNGLATTACHSHADERPROC_HPP)(GLuint,GLuint);
static inline void AttachShader(GLuint program1,GLuint shader1)
{
	static PFNGLATTACHSHADERPROC_HPP fn=reinterpret_cast<PFNGLATTACHSHADERPROC_HPP>(_impl::_get_proc_address("glAttachShader",3,0));
	 fn(program1,shader1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BeginQuery
#define GL_HPP_FUNDEF_BeginQuery
typedef void (*PFNGLBEGINQUERYPROC_HPP)(GLenum,GLuint);
static inline void BeginQuery(GLenum target1,GLuint id1)
{
	static PFNGLBEGINQUERYPROC_HPP fn=reinterpret_cast<PFNGLBEGINQUERYPROC_HPP>(_impl::_get_proc_address("glBeginQuery",3,0));
	 fn(target1,id1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BeginTransformFeedback
#define GL_HPP_FUNDEF_BeginTransformFeedback
typedef void (*PFNGLBEGINTRANSFORMFEEDBACKPROC_HPP)(GLenum);
static inline void BeginTransformFeedback(GLenum primitiveMode1)
{
	static PFNGLBEGINTRANSFORMFEEDBACKPROC_HPP fn=reinterpret_cast<PFNGLBEGINTRANSFORMFEEDBACKPROC_HPP>(_impl::_get_proc_address("glBeginTransformFeedback",3,0));
	 fn(primitiveMode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindAttribLocation
#define GL_HPP_FUNDEF_BindAttribLocation
typedef void (*PFNGLBINDATTRIBLOCATIONPROC_HPP)(GLuint,GLuint,const GLchar *);
static inline void BindAttribLocation(GLuint program1,GLuint index1,const GLchar * name1)
{
	static PFNGLBINDATTRIBLOCATIONPROC_HPP fn=reinterpret_cast<PFNGLBINDATTRIBLOCATIONPROC_HPP>(_impl::_get_proc_address("glBindAttribLocation",3,0));
	 fn(program1,index1,name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindBuffer
#define GL_HPP_FUNDEF_BindBuffer
typedef void (*PFNGLBINDBUFFERPROC_HPP)(GLenum,GLuint);
static inline void BindBuffer(GLenum target1,GLuint buffer1)
{
	static PFNGLBINDBUFFERPROC_HPP fn=reinterpret_cast<PFNGLBINDBUFFERPROC_HPP>(_impl::_get_proc_address("glBindBuffer",3,0));
	 fn(target1,buffer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindBufferBase
#define GL_HPP_FUNDEF_BindBufferBase
typedef void (*PFNGLBINDBUFFERBASEPROC_HPP)(GLenum,GLuint,GLuint);
static inline void BindBufferBase(GLenum target1,GLuint index1,GLuint buffer1)
{
	static PFNGLBINDBUFFERBASEPROC_HPP fn=reinterpret_cast<PFNGLBINDBUFFERBASEPROC_HPP>(_impl::_get_proc_address("glBindBufferBase",3,0));
	 fn(target1,index1,buffer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindBufferRange
#define GL_HPP_FUNDEF_BindBufferRange
typedef void (*PFNGLBINDBUFFERRANGEPROC_HPP)(GLenum,GLuint,GLuint,GLintptr,GLsizeiptr);
static inline void BindBufferRange(GLenum target1,GLuint index1,GLuint buffer1,GLintptr offset1,GLsizeiptr size1)
{
	static PFNGLBINDBUFFERRANGEPROC_HPP fn=reinterpret_cast<PFNGLBINDBUFFERRANGEPROC_HPP>(_impl::_get_proc_address("glBindBufferRange",3,0));
	 fn(target1,index1,buffer1,offset1,size1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindFramebuffer
#define GL_HPP_FUNDEF_BindFramebuffer
typedef void (*PFNGLBINDFRAMEBUFFERPROC_HPP)(GLenum,GLuint);
static inline void BindFramebuffer(GLenum target1,GLuint framebuffer1)
{
	static PFNGLBINDFRAMEBUFFERPROC_HPP fn=reinterpret_cast<PFNGLBINDFRAMEBUFFERPROC_HPP>(_impl::_get_proc_address("glBindFramebuffer",3,0));
	 fn(target1,framebuffer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindRenderbuffer
#define GL_HPP_FUNDEF_BindRenderbuffer
typedef void (*PFNGLBINDRENDERBUFFERPROC_HPP)(GLenum,GLuint);
static inline void BindRenderbuffer(GLenum target1,GLuint renderbuffer1)
{
	static PFNGLBINDRENDERBUFFERPROC_HPP fn=reinterpret_cast<PFNGLBINDRENDERBUFFERPROC_HPP>(_impl::_get_proc_address("glBindRenderbuffer",3,0));
	 fn(target1,renderbuffer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindSampler
#define GL_HPP_FUNDEF_BindSampler
typedef void (*PFNGLBINDSAMPLERPROC_HPP)(GLuint,GLuint);
static inline void BindSampler(GLuint unit1,GLuint sampler1)
{
	static PFNGLBINDSAMPLERPROC_HPP fn=reinterpret_cast<PFNGLBINDSAMPLERPROC_HPP>(_impl::_get_proc_address("glBindSampler",3,0));
	 fn(unit1,sampler1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindTexture
#define GL_HPP_FUNDEF_BindTexture
typedef void (*PFNGLBINDTEXTUREPROC_HPP)(GLenum,GLuint);
static inline void BindTexture(GLenum target1,GLuint texture1)
{
	static PFNGLBINDTEXTUREPROC_HPP fn=reinterpret_cast<PFNGLBINDTEXTUREPROC_HPP>(_impl::_get_proc_address("glBindTexture",3,0));
	 fn(target1,texture1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindTransformFeedback
#define GL_HPP_FUNDEF_BindTransformFeedback
typedef void (*PFNGLBINDTRANSFORMFEEDBACKPROC_HPP)(GLenum,GLuint);
static inline void BindTransformFeedback(GLenum target1,GLuint id1)
{
	static PFNGLBINDTRANSFORMFEEDBACKPROC_HPP fn=reinterpret_cast<PFNGLBINDTRANSFORMFEEDBACKPROC_HPP>(_impl::_get_proc_address("glBindTransformFeedback",3,0));
	 fn(target1,id1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindVertexArray
#define GL_HPP_FUNDEF_BindVertexArray
typedef void (*PFNGLBINDVERTEXARRAYPROC_HPP)(GLuint);
static inline void BindVertexArray(GLuint array1)
{
	static PFNGLBINDVERTEXARRAYPROC_HPP fn=reinterpret_cast<PFNGLBINDVERTEXARRAYPROC_HPP>(_impl::_get_proc_address("glBindVertexArray",3,0));
	 fn(array1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BlendColor
#define GL_HPP_FUNDEF_BlendColor
typedef void (*PFNGLBLENDCOLORPROC_HPP)(GLfloat,GLfloat,GLfloat,GLfloat);
static inline void BlendColor(GLfloat red1,GLfloat green1,GLfloat blue1,GLfloat alpha1)
{
	static PFNGLBLENDCOLORPROC_HPP fn=reinterpret_cast<PFNGLBLENDCOLORPROC_HPP>(_impl::_get_proc_address("glBlendColor",3,0));
	 fn(red1,green1,blue1,alpha1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BlendEquation
#define GL_HPP_FUNDEF_BlendEquation
typedef void (*PFNGLBLENDEQUATIONPROC_HPP)(GLenum);
static inline void BlendEquation(GLenum mode1)
{
	static PFNGLBLENDEQUATIONPROC_HPP fn=reinterpret_cast<PFNGLBLENDEQUATIONPROC_HPP>(_impl::_get_proc_address("glBlendEquation",3,0));
	 fn(mode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BlendEquationSeparate
#define GL_HPP_FUNDEF_BlendEquationSeparate
typedef void (*PFNGLBLENDEQUATIONSEPARATEPROC_HPP)(GLenum,GLenum);
static inline void BlendEquationSeparate(GLenum modeRGB1,GLenum modeAlpha1)
{
	static PFNGLBLENDEQUATIONSEPARATEPROC_HPP fn=reinterpret_cast<PFNGLBLENDEQUATIONSEPARATEPROC_HPP>(_impl::_get_proc_address("glBlendEquationSeparate",3,0));
	 fn(modeRGB1,modeAlpha1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BlendFunc
#define GL_HPP_FUNDEF_BlendFunc
typedef void (*PFNGLBLENDFUNCPROC_HPP)(GLenum,GLenum);
static inline void BlendFunc(GLenum sfactor1,GLenum dfactor1)
{
	static PFNGLBLENDFUNCPROC_HPP fn=reinterpret_cast<PFNGLBLENDFUNCPROC_HPP>(_impl::_get_proc_address("glBlendFunc",3,0));
	 fn(sfactor1,dfactor1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BlendFuncSeparate
#define GL_HPP_FUNDEF_BlendFuncSeparate
typedef void (*PFNGLBLENDFUNCSEPARATEPROC_HPP)(GLenum,GLenum,GLenum,GLenum);
static inline void BlendFuncSeparate(GLenum sfactorRGB1,GLenum dfactorRGB1,GLenum sfactorAlpha1,GLenum dfactorAlpha1)
{
	static PFNGLBLENDFUNCSEPARATEPROC_HPP fn=reinterpret_cast<PFNGLBLENDFUNCSEPARATEPROC_HPP>(_impl::_get_proc_address("glBlendFuncSeparate",3,0));
	 fn(sfactorRGB1,dfactorRGB1,sfactorAlpha1,dfactorAlpha1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BlitFramebuffer
#define GL_HPP_FUNDEF_BlitFramebuffer
typedef void (*PFNGLBLITFRAMEBUFFERPROC_HPP)(GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLbitfield,GLenum);
static inline void BlitFramebuffer(GLint srcX01,GLint srcY01,GLint srcX11,GLint srcY11,GLint dstX01,GLint dstY01,GLint dstX11,GLint dstY11,GLbitfield mask1,GLenum filter1)
{
	static PFNGLBLITFRAMEBUFFERPROC_HPP fn=reinterpret_cast<PFNGLBLITFRAMEBUFFERPROC_HPP>(_impl::_get_proc_address("glBlitFramebuffer",3,0));
	 fn(srcX01,srcY01,srcX11,srcY11,dstX01,dstY01,dstX11,dstY11,mask1,filter1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BufferData
#define GL_HPP_FUNDEF_BufferData
typedef void (*PFNGLBUFFERDATAPROC_HPP)(GLenum,GLsizeiptr,const void *,GLenum);
static inline void BufferData(GLenum target1,GLsizeiptr size1,const void * data1,GLenum usage1)
{
	static PFNGLBUFFERDATAPROC_HPP fn=reinterpret_cast<PFNGLBUFFERDATAPROC_HPP>(_impl::_get_proc_address("glBufferData",3,0));
	 fn(target1,size1,data1,usage1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BufferSubData
#define GL_HPP_FUNDEF_BufferSubData
typedef void (*PFNGLBUFFERSUBDATAPROC_HPP)(GLenum,GLintptr,GLsizeiptr,const void *);
static inline void BufferSubData(GLenum target1,GLintptr offset1,GLsizeiptr size1,const void * data1)
{
	static PFNGLBUFFERSUBDATAPROC_HPP fn=reinterpret_cast<PFNGLBUFFERSUBDATAPROC_HPP>(_impl::_get_proc_address("glBufferSubData",3,0));
	 fn(target1,offset1,size1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CheckFramebufferStatus
#define GL_HPP_FUNDEF_CheckFramebufferStatus
typedef GLenum (*PFNGLCHECKFRAMEBUFFERSTATUSPROC_HPP)(GLenum);
static inline GLenum CheckFramebufferStatus(GLenum target1)
{
	static PFNGLCHECKFRAMEBUFFERSTATUSPROC_HPP fn=reinterpret_cast<PFNGLCHECKFRAMEBUFFERSTATUSPROC_HPP>(_impl::_get_proc_address("glCheckFramebufferStatus",3,0));
	return fn(target1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Clear
#define GL_HPP_FUNDEF_Clear
typedef void (*PFNGLCLEARPROC_HPP)(GLbitfield);
static inline void Clear(GLbitfield mask1)
{
	static PFNGLCLEARPROC_HPP fn=reinterpret_cast<PFNGLCLEARPROC_HPP>(_impl::_get_proc_address("glClear",3,0));
	 fn(mask1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ClearBufferfi
#define GL_HPP_FUNDEF_ClearBufferfi
typedef void (*PFNGLCLEARBUFFERFIPROC_HPP)(GLenum,GLint,GLfloat,GLint);
static inline void ClearBufferfi(GLenum buffer1,GLint drawbuffer1,GLfloat depth1,GLint stencil1)
{
	static PFNGLCLEARBUFFERFIPROC_HPP fn=reinterpret_cast<PFNGLCLEARBUFFERFIPROC_HPP>(_impl::_get_proc_address("glClearBufferfi",3,0));
	 fn(buffer1,drawbuffer1,depth1,stencil1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ClearBufferfv
#define GL_HPP_FUNDEF_ClearBufferfv
typedef void (*PFNGLCLEARBUFFERFVPROC_HPP)(GLenum,GLint,const GLfloat *);
static inline void ClearBufferfv(GLenum buffer1,GLint drawbuffer1,const GLfloat * value1)
{
	static PFNGLCLEARBUFFERFVPROC_HPP fn=reinterpret_cast<PFNGLCLEARBUFFERFVPROC_HPP>(_impl::_get_proc_address("glClearBufferfv",3,0));
	 fn(buffer1,drawbuffer1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ClearBufferiv
#define GL_HPP_FUNDEF_ClearBufferiv
typedef void (*PFNGLCLEARBUFFERIVPROC_HPP)(GLenum,GLint,const GLint *);
static inline void ClearBufferiv(GLenum buffer1,GLint drawbuffer1,const GLint * value1)
{
	static PFNGLCLEARBUFFERIVPROC_HPP fn=reinterpret_cast<PFNGLCLEARBUFFERIVPROC_HPP>(_impl::_get_proc_address("glClearBufferiv",3,0));
	 fn(buffer1,drawbuffer1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ClearBufferuiv
#define GL_HPP_FUNDEF_ClearBufferuiv
typedef void (*PFNGLCLEARBUFFERUIVPROC_HPP)(GLenum,GLint,const GLuint *);
static inline void ClearBufferuiv(GLenum buffer1,GLint drawbuffer1,const GLuint * value1)
{
	static PFNGLCLEARBUFFERUIVPROC_HPP fn=reinterpret_cast<PFNGLCLEARBUFFERUIVPROC_HPP>(_impl::_get_proc_address("glClearBufferuiv",3,0));
	 fn(buffer1,drawbuffer1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ClearColor
#define GL_HPP_FUNDEF_ClearColor
typedef void (*PFNGLCLEARCOLORPROC_HPP)(GLfloat,GLfloat,GLfloat,GLfloat);
static inline void ClearColor(GLfloat red1,GLfloat green1,GLfloat blue1,GLfloat alpha1)
{
	static PFNGLCLEARCOLORPROC_HPP fn=reinterpret_cast<PFNGLCLEARCOLORPROC_HPP>(_impl::_get_proc_address("glClearColor",3,0));
	 fn(red1,green1,blue1,alpha1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ClearDepthf
#define GL_HPP_FUNDEF_ClearDepthf
typedef void (*PFNGLCLEARDEPTHFPROC_HPP)(GLfloat);
static inline void ClearDepthf(GLfloat d1)
{
	static PFNGLCLEARDEPTHFPROC_HPP fn=reinterpret_cast<PFNGLCLEARDEPTHFPROC_HPP>(_impl::_get_proc_address("glClearDepthf",3,0));
	 fn(d1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ClearStencil
#define GL_HPP_FUNDEF_ClearStencil
typedef void (*PFNGLCLEARSTENCILPROC_HPP)(GLint);
static inline void ClearStencil(GLint s1)
{
	static PFNGLCLEARSTENCILPROC_HPP fn=reinterpret_cast<PFNGLCLEARSTENCILPROC_HPP>(_impl::_get_proc_address("glClearStencil",3,0));
	 fn(s1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ClientWaitSync
#define GL_HPP_FUNDEF_ClientWaitSync
typedef GLenum (*PFNGLCLIENTWAITSYNCPROC_HPP)(GLsync,GLbitfield,GLuint64);
static inline GLenum ClientWaitSync(GLsync sync1,GLbitfield flags1,GLuint64 timeout1)
{
	static PFNGLCLIENTWAITSYNCPROC_HPP fn=reinterpret_cast<PFNGLCLIENTWAITSYNCPROC_HPP>(_impl::_get_proc_address("glClientWaitSync",3,0));
	return fn(sync1,flags1,timeout1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ColorMask
#define GL_HPP_FUNDEF_ColorMask
typedef void (*PFNGLCOLORMASKPROC_HPP)(GLboolean,GLboolean,GLboolean,GLboolean);
static inline void ColorMask(GLboolean red1,GLboolean green1,GLboolean blue1,GLboolean alpha1)
{
	static PFNGLCOLORMASKPROC_HPP fn=reinterpret_cast<PFNGLCOLORMASKPROC_HPP>(_impl::_get_proc_address("glColorMask",3,0));
	 fn(red1,green1,blue1,alpha1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CompileShader
#define GL_HPP_FUNDEF_CompileShader
typedef void (*PFNGLCOMPILESHADERPROC_HPP)(GLuint);
static inline void CompileShader(GLuint shader1)
{
	static PFNGLCOMPILESHADERPROC_HPP fn=reinterpret_cast<PFNGLCOMPILESHADERPROC_HPP>(_impl::_get_proc_address("glCompileShader",3,0));
	 fn(shader1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CompressedTexImage2D
#define GL_HPP_FUNDEF_CompressedTexImage2D
typedef void (*PFNGLCOMPRESSEDTEXIMAGE2DPROC_HPP)(GLenum,GLint,GLenum,GLsizei,GLsizei,GLint,GLsizei,const void *);
static inline void CompressedTexImage2D(GLenum target1,GLint level1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLint border1,GLsizei imageSize1,const void * data1)
{
	static PFNGLCOMPRESSEDTEXIMAGE2DPROC_HPP fn=reinterpret_cast<PFNGLCOMPRESSEDTEXIMAGE2DPROC_HPP>(_impl::_get_proc_address("glCompressedTexImage2D",3,0));
	 fn(target1,level1,internalformat1,width1,height1,border1,imageSize1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CompressedTexImage3D
#define GL_HPP_FUNDEF_CompressedTexImage3D
typedef void (*PFNGLCOMPRESSEDTEXIMAGE3DPROC_HPP)(GLenum,GLint,GLenum,GLsizei,GLsizei,GLsizei,GLint,GLsizei,const void *);
static inline void CompressedTexImage3D(GLenum target1,GLint level1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLint border1,GLsizei imageSize1,const void * data1)
{
	static PFNGLCOMPRESSEDTEXIMAGE3DPROC_HPP fn=reinterpret_cast<PFNGLCOMPRESSEDTEXIMAGE3DPROC_HPP>(_impl::_get_proc_address("glCompressedTexImage3D",3,0));
	 fn(target1,level1,internalformat1,width1,height1,depth1,border1,imageSize1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CompressedTexSubImage2D
#define GL_HPP_FUNDEF_CompressedTexSubImage2D
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC_HPP)(GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLsizei,const void *);
static inline void CompressedTexSubImage2D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLsizei width1,GLsizei height1,GLenum format1,GLsizei imageSize1,const void * data1)
{
	static PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC_HPP fn=reinterpret_cast<PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC_HPP>(_impl::_get_proc_address("glCompressedTexSubImage2D",3,0));
	 fn(target1,level1,xoffset1,yoffset1,width1,height1,format1,imageSize1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CompressedTexSubImage3D
#define GL_HPP_FUNDEF_CompressedTexSubImage3D
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC_HPP)(GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLsizei,const void *);
static inline void CompressedTexSubImage3D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLsizei width1,GLsizei height1,GLsizei depth1,GLenum format1,GLsizei imageSize1,const void * data1)
{
	static PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC_HPP fn=reinterpret_cast<PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC_HPP>(_impl::_get_proc_address("glCompressedTexSubImage3D",3,0));
	 fn(target1,level1,xoffset1,yoffset1,zoffset1,width1,height1,depth1,format1,imageSize1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CopyBufferSubData
#define GL_HPP_FUNDEF_CopyBufferSubData
typedef void (*PFNGLCOPYBUFFERSUBDATAPROC_HPP)(GLenum,GLenum,GLintptr,GLintptr,GLsizeiptr);
static inline void CopyBufferSubData(GLenum readTarget1,GLenum writeTarget1,GLintptr readOffset1,GLintptr writeOffset1,GLsizeiptr size1)
{
	static PFNGLCOPYBUFFERSUBDATAPROC_HPP fn=reinterpret_cast<PFNGLCOPYBUFFERSUBDATAPROC_HPP>(_impl::_get_proc_address("glCopyBufferSubData",3,0));
	 fn(readTarget1,writeTarget1,readOffset1,writeOffset1,size1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CopyTexImage2D
#define GL_HPP_FUNDEF_CopyTexImage2D
typedef void (*PFNGLCOPYTEXIMAGE2DPROC_HPP)(GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLsizei,GLint);
static inline void CopyTexImage2D(GLenum target1,GLint level1,GLenum internalformat1,GLint x1,GLint y1,GLsizei width1,GLsizei height1,GLint border1)
{
	static PFNGLCOPYTEXIMAGE2DPROC_HPP fn=reinterpret_cast<PFNGLCOPYTEXIMAGE2DPROC_HPP>(_impl::_get_proc_address("glCopyTexImage2D",3,0));
	 fn(target1,level1,internalformat1,x1,y1,width1,height1,border1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CopyTexSubImage2D
#define GL_HPP_FUNDEF_CopyTexSubImage2D
typedef void (*PFNGLCOPYTEXSUBIMAGE2DPROC_HPP)(GLenum,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
static inline void CopyTexSubImage2D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
	static PFNGLCOPYTEXSUBIMAGE2DPROC_HPP fn=reinterpret_cast<PFNGLCOPYTEXSUBIMAGE2DPROC_HPP>(_impl::_get_proc_address("glCopyTexSubImage2D",3,0));
	 fn(target1,level1,xoffset1,yoffset1,x1,y1,width1,height1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CopyTexSubImage3D
#define GL_HPP_FUNDEF_CopyTexSubImage3D
typedef void (*PFNGLCOPYTEXSUBIMAGE3DPROC_HPP)(GLenum,GLint,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
static inline void CopyTexSubImage3D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
	static PFNGLCOPYTEXSUBIMAGE3DPROC_HPP fn=reinterpret_cast<PFNGLCOPYTEXSUBIMAGE3DPROC_HPP>(_impl::_get_proc_address("glCopyTexSubImage3D",3,0));
	 fn(target1,level1,xoffset1,yoffset1,zoffset1,x1,y1,width1,height1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CreateProgram
#define GL_HPP_FUNDEF_CreateProgram
typedef GLuint (*PFNGLCREATEPROGRAMPROC_HPP)();
static inline GLuint CreateProgram()
{
	static PFNGLCREATEPROGRAMPROC_HPP fn=reinterpret_cast<PFNGLCREATEPROGRAMPROC_HPP>(_impl::_get_proc_address("glCreateProgram",3,0));
	return fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_CreateShader
#define GL_HPP_FUNDEF_CreateShader
typedef GLuint (*PFNGLCREATESHADERPROC_HPP)(GLenum);
static inline GLuint CreateShader(GLenum type1)
{
	static PFNGLCREATESHADERPROC_HPP fn=reinterpret_cast<PFNGLCREATESHADERPROC_HPP>(_impl::_get_proc_address("glCreateShader",3,0));
	return fn(type1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CullFace
#define GL_HPP_FUNDEF_CullFace
typedef void (*PFNGLCULLFACEPROC_HPP)(GLenum);
static inline void CullFace(GLenum mode1)
{
	static PFNGLCULLFACEPROC_HPP fn=reinterpret_cast<PFNGLCULLFACEPROC_HPP>(_impl::_get_proc_address("glCullFace",3,0));
	 fn(mode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteBuffers
#define GL_HPP_FUNDEF_DeleteBuffers
typedef void (*PFNGLDELETEBUFFERSPROC_HPP)(GLsizei,const GLuint *);
static inline void DeleteBuffers(GLsizei n1,const GLuint * buffers1)
{
	static PFNGLDELETEBUFFERSPROC_HPP fn=reinterpret_cast<PFNGLDELETEBUFFERSPROC_HPP>(_impl::_get_proc_address("glDeleteBuffers",3,0));
	 fn(n1,buffers1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteFramebuffers
#define GL_HPP_FUNDEF_DeleteFramebuffers
typedef void (*PFNGLDELETEFRAMEBUFFERSPROC_HPP)(GLsizei,const GLuint *);
static inline void DeleteFramebuffers(GLsizei n1,const GLuint * framebuffers1)
{
	static PFNGLDELETEFRAMEBUFFERSPROC_HPP fn=reinterpret_cast<PFNGLDELETEFRAMEBUFFERSPROC_HPP>(_impl::_get_proc_address("glDeleteFramebuffers",3,0));
	 fn(n1,framebuffers1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteProgram
#define GL_HPP_FUNDEF_DeleteProgram
typedef void (*PFNGLDELETEPROGRAMPROC_HPP)(GLuint);
static inline void DeleteProgram(GLuint program1)
{
	static PFNGLDELETEPROGRAMPROC_HPP fn=reinterpret_cast<PFNGLDELETEPROGRAMPROC_HPP>(_impl::_get_proc_address("glDeleteProgram",3,0));
	 fn(program1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteQueries
#define GL_HPP_FUNDEF_DeleteQueries
typedef void (*PFNGLDELETEQUERIESPROC_HPP)(GLsizei,const GLuint *);
static inline void DeleteQueries(GLsizei n1,const GLuint * ids1)
{
	static PFNGLDELETEQUERIESPROC_HPP fn=reinterpret_cast<PFNGLDELETEQUERIESPROC_HPP>(_impl::_get_proc_address("glDeleteQueries",3,0));
	 fn(n1,ids1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteRenderbuffers
#define GL_HPP_FUNDEF_DeleteRenderbuffers
typedef void (*PFNGLDELETERENDERBUFFERSPROC_HPP)(GLsizei,const GLuint *);
static inline void DeleteRenderbuffers(GLsizei n1,const GLuint * renderbuffers1)
{
	static PFNGLDELETERENDERBUFFERSPROC_HPP fn=reinterpret_cast<PFNGLDELETERENDERBUFFERSPROC_HPP>(_impl::_get_proc_address("glDeleteRenderbuffers",3,0));
	 fn(n1,renderbuffers1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteSamplers
#define GL_HPP_FUNDEF_DeleteSamplers
typedef void (*PFNGLDELETESAMPLERSPROC_HPP)(GLsizei,const GLuint *);
static inline void DeleteSamplers(GLsizei count1,const GLuint * samplers1)
{
	static PFNGLDELETESAMPLERSPROC_HPP fn=reinterpret_cast<PFNGLDELETESAMPLERSPROC_HPP>(_impl::_get_proc_address("glDeleteSamplers",3,0));
	 fn(count1,samplers1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteShader
#define GL_HPP_FUNDEF_DeleteShader
typedef void (*PFNGLDELETESHADERPROC_HPP)(GLuint);
static inline void DeleteShader(GLuint shader1)
{
	static PFNGLDELETESHADERPROC_HPP fn=reinterpret_cast<PFNGLDELETESHADERPROC_HPP>(_impl::_get_proc_address("glDeleteShader",3,0));
	 fn(shader1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteSync
#define GL_HPP_FUNDEF_DeleteSync
typedef void (*PFNGLDELETESYNCPROC_HPP)(GLsync);
static inline void DeleteSync(GLsync sync1)
{
	static PFNGLDELETESYNCPROC_HPP fn=reinterpret_cast<PFNGLDELETESYNCPROC_HPP>(_impl::_get_proc_address("glDeleteSync",3,0));
	 fn(sync1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteTextures
#define GL_HPP_FUNDEF_DeleteTextures
typedef void (*PFNGLDELETETEXTURESPROC_HPP)(GLsizei,const GLuint *);
static inline void DeleteTextures(GLsizei n1,const GLuint * textures1)
{
	static PFNGLDELETETEXTURESPROC_HPP fn=reinterpret_cast<PFNGLDELETETEXTURESPROC_HPP>(_impl::_get_proc_address("glDeleteTextures",3,0));
	 fn(n1,textures1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteTransformFeedbacks
#define GL_HPP_FUNDEF_DeleteTransformFeedbacks
typedef void (*PFNGLDELETETRANSFORMFEEDBACKSPROC_HPP)(GLsizei,const GLuint *);
static inline void DeleteTransformFeedbacks(GLsizei n1,const GLuint * ids1)
{
	static PFNGLDELETETRANSFORMFEEDBACKSPROC_HPP fn=reinterpret_cast<PFNGLDELETETRANSFORMFEEDBACKSPROC_HPP>(_impl::_get_proc_address("glDeleteTransformFeedbacks",3,0));
	 fn(n1,ids1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteVertexArrays
#define GL_HPP_FUNDEF_DeleteVertexArrays
typedef void (*PFNGLDELETEVERTEXARRAYSPROC_HPP)(GLsizei,const GLuint *);
static inline void DeleteVertexArrays(GLsizei n1,const GLuint * arrays1)
{
	static PFNGLDELETEVERTEXARRAYSPROC_HPP fn=reinterpret_cast<PFNGLDELETEVERTEXARRAYSPROC_HPP>(_impl::_get_proc_address("glDeleteVertexArrays",3,0));
	 fn(n1,arrays1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DepthFunc
#define GL_HPP_FUNDEF_DepthFunc
typedef void (*PFNGLDEPTHFUNCPROC_HPP)(GLenum);
static inline void DepthFunc(GLenum func1)
{
	static PFNGLDEPTHFUNCPROC_HPP fn=reinterpret_cast<PFNGLDEPTHFUNCPROC_HPP>(_impl::_get_proc_address("glDepthFunc",3,0));
	 fn(func1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DepthMask
#define GL_HPP_FUNDEF_DepthMask
typedef void (*PFNGLDEPTHMASKPROC_HPP)(GLboolean);
static inline void DepthMask(GLboolean flag1)
{
	static PFNGLDEPTHMASKPROC_HPP fn=reinterpret_cast<PFNGLDEPTHMASKPROC_HPP>(_impl::_get_proc_address("glDepthMask",3,0));
	 fn(flag1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DepthRangef
#define GL_HPP_FUNDEF_DepthRangef
typedef void (*PFNGLDEPTHRANGEFPROC_HPP)(GLfloat,GLfloat);
static inline void DepthRangef(GLfloat n1,GLfloat f1)
{
	static PFNGLDEPTHRANGEFPROC_HPP fn=reinterpret_cast<PFNGLDEPTHRANGEFPROC_HPP>(_impl::_get_proc_address("glDepthRangef",3,0));
	 fn(n1,f1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DetachShader
#define GL_HPP_FUNDEF_DetachShader
typedef void (*PFNGLDETACHSHADERPROC_HPP)(GLuint,GLuint);
static inline void DetachShader(GLuint program1,GLuint shader1)
{
	static PFNGLDETACHSHADERPROC_HPP fn=reinterpret_cast<PFNGLDETACHSHADERPROC_HPP>(_impl::_get_proc_address("glDetachShader",3,0));
	 fn(program1,shader1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Disable
#define GL_HPP_FUNDEF_Disable
typedef void (*PFNGLDISABLEPROC_HPP)(GLenum);
static inline void Disable(GLenum cap1)
{
	static PFNGLDISABLEPROC_HPP fn=reinterpret_cast<PFNGLDISABLEPROC_HPP>(_impl::_get_proc_address("glDisable",3,0));
	 fn(cap1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DisableVertexAttribArray
#define GL_HPP_FUNDEF_DisableVertexAttribArray
typedef void (*PFNGLDISABLEVERTEXATTRIBARRAYPROC_HPP)(GLuint);
static inline void DisableVertexAttribArray(GLuint index1)
{
	static PFNGLDISABLEVERTEXATTRIBARRAYPROC_HPP fn=reinterpret_cast<PFNGLDISABLEVERTEXATTRIBARRAYPROC_HPP>(_impl::_get_proc_address("glDisableVertexAttribArray",3,0));
	 fn(index1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DrawArrays
#define GL_HPP_FUNDEF_DrawArrays
typedef void (*PFNGLDRAWARRAYSPROC_HPP)(GLenum,GLint,GLsizei);
static inline void DrawArrays(GLenum mode1,GLint first1,GLsizei count1)
{
	static PFNGLDRAWARRAYSPROC_HPP fn=reinterpret_cast<PFNGLDRAWARRAYSPROC_HPP>(_impl::_get_proc_address("glDrawArrays",3,0));
	 fn(mode1,first1,count1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DrawArraysInstanced
#define GL_HPP_FUNDEF_DrawArraysInstanced
typedef void (*PFNGLDRAWARRAYSINSTANCEDPROC_HPP)(GLenum,GLint,GLsizei,GLsizei);
static inline void DrawArraysInstanced(GLenum mode1,GLint first1,GLsizei count1,GLsizei instancecount1)
{
	static PFNGLDRAWARRAYSINSTANCEDPROC_HPP fn=reinterpret_cast<PFNGLDRAWARRAYSINSTANCEDPROC_HPP>(_impl::_get_proc_address("glDrawArraysInstanced",3,0));
	 fn(mode1,first1,count1,instancecount1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DrawBuffers
#define GL_HPP_FUNDEF_DrawBuffers
typedef void (*PFNGLDRAWBUFFERSPROC_HPP)(GLsizei,const GLenum *);
static inline void DrawBuffers(GLsizei n1,const GLenum * bufs1)
{
	static PFNGLDRAWBUFFERSPROC_HPP fn=reinterpret_cast<PFNGLDRAWBUFFERSPROC_HPP>(_impl::_get_proc_address("glDrawBuffers",3,0));
	 fn(n1,bufs1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DrawElements
#define GL_HPP_FUNDEF_DrawElements
typedef void (*PFNGLDRAWELEMENTSPROC_HPP)(GLenum,GLsizei,GLenum,const void *);
static inline void DrawElements(GLenum mode1,GLsizei count1,GLenum type1,const void * indices1)
{
	static PFNGLDRAWELEMENTSPROC_HPP fn=reinterpret_cast<PFNGLDRAWELEMENTSPROC_HPP>(_impl::_get_proc_address("glDrawElements",3,0));
	 fn(mode1,count1,type1,indices1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DrawElementsInstanced
#define GL_HPP_FUNDEF_DrawElementsInstanced
typedef void (*PFNGLDRAWELEMENTSINSTANCEDPROC_HPP)(GLenum,GLsizei,GLenum,const void *,GLsizei);
static inline void DrawElementsInstanced(GLenum mode1,GLsizei count1,GLenum type1,const void * indices1,GLsizei instancecount1)
{
	static PFNGLDRAWELEMENTSINSTANCEDPROC_HPP fn=reinterpret_cast<PFNGLDRAWELEMENTSINSTANCEDPROC_HPP>(_impl::_get_proc_address("glDrawElementsInstanced",3,0));
	 fn(mode1,count1,type1,indices1,instancecount1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DrawRangeElements
#define GL_HPP_FUNDEF_DrawRangeElements
typedef void (*PFNGLDRAWRANGEELEMENTSPROC_HPP)(GLenum,GLuint,GLuint,GLsizei,GLenum,const void *);
static inline void DrawRangeElements(GLenum mode1,GLuint start1,GLuint end1,GLsizei count1,GLenum type1,const void * indices1)
{
	static PFNGLDRAWRANGEELEMENTSPROC_HPP fn=reinterpret_cast<PFNGLDRAWRANGEELEMENTSPROC_HPP>(_impl::_get_proc_address("glDrawRangeElements",3,0));
	 fn(mode1,start1,end1,count1,type1,indices1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Enable
#define GL_HPP_FUNDEF_Enable
typedef void (*PFNGLENABLEPROC_HPP)(GLenum);
static inline void Enable(GLenum cap1)
{
	static PFNGLENABLEPROC_HPP fn=reinterpret_cast<PFNGLENABLEPROC_HPP>(_impl::_get_proc_address("glEnable",3,0));
	 fn(cap1);
}
#endif

#ifndef	GL_HPP_FUNDEF_EnableVertexAttribArray
#define GL_HPP_FUNDEF_EnableVertexAttribArray
typedef void (*PFNGLENABLEVERTEXATTRIBARRAYPROC_HPP)(GLuint);
static inline void EnableVertexAttribArray(GLuint index1)
{
	static PFNGLENABLEVERTEXATTRIBARRAYPROC_HPP fn=reinterpret_cast<PFNGLENABLEVERTEXATTRIBARRAYPROC_HPP>(_impl::_get_proc_address("glEnableVertexAttribArray",3,0));
	 fn(index1);
}
#endif

#ifndef	GL_HPP_FUNDEF_EndQuery
#define GL_HPP_FUNDEF_EndQuery
typedef void (*PFNGLENDQUERYPROC_HPP)(GLenum);
static inline void EndQuery(GLenum target1)
{
	static PFNGLENDQUERYPROC_HPP fn=reinterpret_cast<PFNGLENDQUERYPROC_HPP>(_impl::_get_proc_address("glEndQuery",3,0));
	 fn(target1);
}
#endif

#ifndef	GL_HPP_FUNDEF_EndTransformFeedback
#define GL_HPP_FUNDEF_EndTransformFeedback
typedef void (*PFNGLENDTRANSFORMFEEDBACKPROC_HPP)();
static inline void EndTransformFeedback()
{
	static PFNGLENDTRANSFORMFEEDBACKPROC_HPP fn=reinterpret_cast<PFNGLENDTRANSFORMFEEDBACKPROC_HPP>(_impl::_get_proc_address("glEndTransformFeedback",3,0));
	 fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_FenceSync
#define GL_HPP_FUNDEF_FenceSync
typedef GLsync (*PFNGLFENCESYNCPROC_HPP)(GLenum,GLbitfield);
static inline GLsync FenceSync(GLenum condition1,GLbitfield flags1)
{
	static PFNGLFENCESYNCPROC_HPP fn=reinterpret_cast<PFNGLFENCESYNCPROC_HPP>(_impl::_get_proc_address("glFenceSync",3,0));
	return fn(condition1,flags1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Finish
#define GL_HPP_FUNDEF_Finish
typedef void (*PFNGLFINISHPROC_HPP)();
static inline void Finish()
{
	static PFNGLFINISHPROC_HPP fn=reinterpret_cast<PFNGLFINISHPROC_HPP>(_impl::_get_proc_address("glFinish",3,0));
	 fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_Flush
#define GL_HPP_FUNDEF_Flush
typedef void (*PFNGLFLUSHPROC_HPP)();
static inline void Flush()
{
	static PFNGLFLUSHPROC_HPP fn=reinterpret_cast<PFNGLFLUSHPROC_HPP>(_impl::_get_proc_address("glFlush",3,0));
	 fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_FlushMappedBufferRange
#define GL_HPP_FUNDEF_FlushMappedBufferRange
typedef void (*PFNGLFLUSHMAPPEDBUFFERRANGEPROC_HPP)(GLenum,GLintptr,GLsizeiptr);
static inline void FlushMappedBufferRange(GLenum target1,GLintptr offset1,GLsizeiptr length1)
{
	static PFNGLFLUSHMAPPEDBUFFERRANGEPROC_HPP fn=reinterpret_cast<PFNGLFLUSHMAPPEDBUFFERRANGEPROC_HPP>(_impl::_get_proc_address("glFlushMappedBufferRange",3,0));
	 fn(target1,offset1,length1);
}
#endif

#ifndef	GL_HPP_FUNDEF_FramebufferRenderbuffer
#define GL_HPP_FUNDEF_FramebufferRenderbuffer
typedef void (*PFNGLFRAMEBUFFERRENDERBUFFERPROC_HPP)(GLenum,GLenum,GLenum,GLuint);
static inline void FramebufferRenderbuffer(GLenum target1,GLenum attachment1,GLenum renderbuffertarget1,GLuint renderbuffer1)
{
	static PFNGLFRAMEBUFFERRENDERBUFFERPROC_HPP fn=reinterpret_cast<PFNGLFRAMEBUFFERRENDERBUFFERPROC_HPP>(_impl::_get_proc_address("glFramebufferRenderbuffer",3,0));
	 fn(target1,attachment1,renderbuffertarget1,renderbuffer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_FramebufferTexture2D
#define GL_HPP_FUNDEF_FramebufferTexture2D
typedef void (*PFNGLFRAMEBUFFERTEXTURE2DPROC_HPP)(GLenum,GLenum,GLenum,GLuint,GLint);
static inline void FramebufferTexture2D(GLenum target1,GLenum attachment1,GLenum textarget1,GLuint texture1,GLint level1)
{
	static PFNGLFRAMEBUFFERTEXTURE2DPROC_HPP fn=reinterpret_cast<PFNGLFRAMEBUFFERTEXTURE2DPROC_HPP>(_impl::_get_proc_address("glFramebufferTexture2D",3,0));
	 fn(target1,attachment1,textarget1,texture1,level1);
}
#endif

#ifndef	GL_HPP_FUNDEF_FramebufferTextureLayer
#define GL_HPP_FUNDEF_FramebufferTextureLayer
typedef void (*PFNGLFRAMEBUFFERTEXTURELAYERPROC_HPP)(GLenum,GLenum,GLuint,GLint,GLint);
static inline void FramebufferTextureLayer(GLenum target1,GLenum attachment1,GLuint texture1,GLint level1,GLint layer1)
{
	static PFNGLFRAMEBUFFERTEXTURELAYERPROC_HPP fn=reinterpret_cast<PFNGLFRAMEBUFFERTEXTURELAYERPROC_HPP>(_impl::_get_proc_address("glFramebufferTextureLayer",3,0));
	 fn(target1,attachment1,texture1,level1,layer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_FrontFace
#define GL_HPP_FUNDEF_FrontFace
typedef void (*PFNGLFRONTFACEPROC_HPP)(GLenum);
static inline void FrontFace(GLenum mode1)
{
	static PFNGLFRONTFACEPROC_HPP fn=reinterpret_cast<PFNGLFRONTFACEPROC_HPP>(_impl::_get_proc_address("glFrontFace",3,0));
	 fn(mode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GenBuffers
#define GL_HPP_FUNDEF_GenBuffers
typedef void (*PFNGLGENBUFFERSPROC_HPP)(GLsizei,GLuint *);
static inline void GenBuffers(GLsizei n1,GLuint * buffers1)
{
	static PFNGLGENBUFFERSPROC_HPP fn=reinterpret_cast<PFNGLGENBUFFERSPROC_HPP>(_impl::_get_proc_address("glGenBuffers",3,0));
	 fn(n1,buffers1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GenFramebuffers
#define GL_HPP_FUNDEF_GenFramebuffers
typedef void (*PFNGLGENFRAMEBUFFERSPROC_HPP)(GLsizei,GLuint *);
static inline void GenFramebuffers(GLsizei n1,GLuint * framebuffers1)
{
	static PFNGLGENFRAMEBUFFERSPROC_HPP fn=reinterpret_cast<PFNGLGENFRAMEBUFFERSPROC_HPP>(_impl::_get_proc_address("glGenFramebuffers",3,0));
	 fn(n1,framebuffers1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GenQueries
#define GL_HPP_FUNDEF_GenQueries
typedef void (*PFNGLGENQUERIESPROC_HPP)(GLsizei,GLuint *);
static inline void GenQueries(GLsizei n1,GLuint * ids1)
{
	static PFNGLGENQUERIESPROC_HPP fn=reinterpret_cast<PFNGLGENQUERIESPROC_HPP>(_impl::_get_proc_address("glGenQueries",3,0));
	 fn(n1,ids1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GenRenderbuffers
#define GL_HPP_FUNDEF_GenRenderbuffers
typedef void (*PFNGLGENRENDERBUFFERSPROC_HPP)(GLsizei,GLuint *);
static inline void GenRenderbuffers(GLsizei n1,GLuint * renderbuffers1)
{
	static PFNGLGENRENDERBUFFERSPROC_HPP fn=reinterpret_cast<PFNGLGENRENDERBUFFERSPROC_HPP>(_impl::_get_proc_address("glGenRenderbuffers",3,0));
	 fn(n1,renderbuffers1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GenSamplers
#define GL_HPP_FUNDEF_GenSamplers
typedef void (*PFNGLGENSAMPLERSPROC_HPP)(GLsizei,GLuint *);
static inline void GenSamplers(GLsizei count1,GLuint * samplers1)
{
	static PFNGLGENSAMPLERSPROC_HPP fn=reinterpret_cast<PFNGLGENSAMPLERSPROC_HPP>(_impl::_get_proc_address("glGenSamplers",3,0));
	 fn(count1,samplers1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GenTextures
#define GL_HPP_FUNDEF_GenTextures
typedef void (*PFNGLGENTEXTURESPROC_HPP)(GLsizei,GLuint *);
static inline void GenTextures(GLsizei n1,GLuint * textures1)
{
	static PFNGLGENTEXTURESPROC_HPP fn=reinterpret_cast<PFNGLGENTEXTURESPROC_HPP>(_impl::_get_proc_address("glGenTextures",3,0));
	 fn(n1,textures1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GenTransformFeedbacks
#define GL_HPP_FUNDEF_GenTransformFeedbacks
typedef void (*PFNGLGENTRANSFORMFEEDBACKSPROC_HPP)(GLsizei,GLuint *);
static inline void GenTransformFeedbacks(GLsizei n1,GLuint * ids1)
{
	static PFNGLGENTRANSFORMFEEDBACKSPROC_HPP fn=reinterpret_cast<PFNGLGENTRANSFORMFEEDBACKSPROC_HPP>(_impl::_get_proc_address("glGenTransformFeedbacks",3,0));
	 fn(n1,ids1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GenVertexArrays
#define GL_HPP_FUNDEF_GenVertexArrays
typedef void (*PFNGLGENVERTEXARRAYSPROC_HPP)(GLsizei,GLuint *);
static inline void GenVertexArrays(GLsizei n1,GLuint * arrays1)
{
	static PFNGLGENVERTEXARRAYSPROC_HPP fn=reinterpret_cast<PFNGLGENVERTEXARRAYSPROC_HPP>(_impl::_get_proc_address("glGenVertexArrays",3,0));
	 fn(n1,arrays1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GenerateMipmap
#define GL_HPP_FUNDEF_GenerateMipmap
typedef void (*PFNGLGENERATEMIPMAPPROC_HPP)(GLenum);
static inline void GenerateMipmap(GLenum target1)
{
	static PFNGLGENERATEMIPMAPPROC_HPP fn=reinterpret_cast<PFNGLGENERATEMIPMAPPROC_HPP>(_impl::_get_proc_address("glGenerateMipmap",3,0));
	 fn(target1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetActiveAttrib
#define GL_HPP_FUNDEF_GetActiveAttrib
typedef void (*PFNGLGETACTIVEATTRIBPROC_HPP)(GLuint,GLuint,GLsizei,GLsizei *,GLint *,GLenum *,GLchar *);
static inline void GetActiveAttrib(GLuint program1,GLuint index1,GLsizei bufSize1,GLsizei * length1,GLint * size1,GLenum * type1,GLchar * name1)
{
	static PFNGLGETACTIVEATTRIBPROC_HPP fn=reinterpret_cast<PFNGLGETACTIVEATTRIBPROC_HPP>(_impl::_get_proc_address("glGetActiveAttrib",3,0));
	 fn(program1,index1,bufSize1,length1,size1,type1,name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetActiveUniform
#define GL_HPP_FUNDEF_GetActiveUniform
typedef void (*PFNGLGETACTIVEUNIFORMPROC_HPP)(GLuint,GLuint,GLsizei,GLsizei *,GLint *,GLenum *,GLchar *);
static inline void GetActiveUniform(GLuint program1,GLuint index1,GLsizei bufSize1,GLsizei * length1,GLint * size1,GLenum * type1,GLchar * name1)
{
	static PFNGLGETACTIVEUNIFORMPROC_HPP fn=reinterpret_cast<PFNGLGETACTIVEUNIFORMPROC_HPP>(_impl::_get_proc_address("glGetActiveUniform",3,0));
	 fn(program1,index1,bufSize1,length1,size1,type1,name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetActiveUniformBlockName
#define GL_HPP_FUNDEF_GetActiveUniformBlockName
typedef void (*PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC_HPP)(GLuint,GLuint,GLsizei,GLsizei *,GLchar *);
static inline void GetActiveUniformBlockName(GLuint program1,GLuint uniformBlockIndex1,GLsizei bufSize1,GLsizei * length1,GLchar * uniformBlockName1)
{
	static PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC_HPP fn=reinterpret_cast<PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC_HPP>(_impl::_get_proc_address("glGetActiveUniformBlockName",3,0));
	 fn(program1,uniformBlockIndex1,bufSize1,length1,uniformBlockName1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetActiveUniformBlockiv
#define GL_HPP_FUNDEF_GetActiveUniformBlockiv
typedef void (*PFNGLGETACTIVEUNIFORMBLOCKIVPROC_HPP)(GLuint,GLuint,GLenum,GLint *);
static inline void GetActiveUniformBlockiv(GLuint program1,GLuint uniformBlockIndex1,GLenum pname1,GLint * params1)
{
	static PFNGLGETACTIVEUNIFORMBLOCKIVPROC_HPP fn=reinterpret_cast<PFNGLGETACTIVEUNIFORMBLOCKIVPROC_HPP>(_impl::_get_proc_address("glGetActiveUniformBlockiv",3,0));
	 fn(program1,uniformBlockIndex1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetActiveUniformsiv
#define GL_HPP_FUNDEF_GetActiveUniformsiv
typedef void (*PFNGLGETACTIVEUNIFORMSIVPROC_HPP)(GLuint,GLsizei,const GLuint *,GLenum,GLint *);
static inline void GetActiveUniformsiv(GLuint program1,GLsizei uniformCount1,const GLuint * uniformIndices1,GLenum pname1,GLint * params1)
{
	static PFNGLGETACTIVEUNIFORMSIVPROC_HPP fn=reinterpret_cast<PFNGLGETACTIVEUNIFORMSIVPROC_HPP>(_impl::_get_proc_address("glGetActiveUniformsiv",3,0));
	 fn(program1,uniformCount1,uniformIndices1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetAttachedShaders
#define GL_HPP_FUNDEF_GetAttachedShaders
typedef void (*PFNGLGETATTACHEDSHADERSPROC_HPP)(GLuint,GLsizei,GLsizei *,GLuint *);
static inline void GetAttachedShaders(GLuint program1,GLsizei maxCount1,GLsizei * count1,GLuint * shaders1)
{
	static PFNGLGETATTACHEDSHADERSPROC_HPP fn=reinterpret_cast<PFNGLGETATTACHEDSHADERSPROC_HPP>(_impl::_get_proc_address("glGetAttachedShaders",3,0));
	 fn(program1,maxCount1,count1,shaders1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetAttribLocation
#define GL_HPP_FUNDEF_GetAttribLocation
typedef GLint (*PFNGLGETATTRIBLOCATIONPROC_HPP)(GLuint,const GLchar *);
static inline GLint GetAttribLocation(GLuint program1,const GLchar * name1)
{
	static PFNGLGETATTRIBLOCATIONPROC_HPP fn=reinterpret_cast<PFNGLGETATTRIBLOCATIONPROC_HPP>(_impl::_get_proc_address("glGetAttribLocation",3,0));
	return fn(program1,name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetBooleanv
#define GL_HPP_FUNDEF_GetBooleanv
typedef void (*PFNGLGETBOOLEANVPROC_HPP)(GLenum,GLboolean *);
static inline void GetBooleanv(GLenum pname1,GLboolean * data1)
{
	static PFNGLGETBOOLEANVPROC_HPP fn=reinterpret_cast<PFNGLGETBOOLEANVPROC_HPP>(_impl::_get_proc_address("glGetBooleanv",3,0));
	 fn(pname1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetBufferParameteri64v
#define GL_HPP_FUNDEF_GetBufferParameteri64v
typedef void (*PFNGLGETBUFFERPARAMETERI64VPROC_HPP)(GLenum,GLenum,GLint64 *);
static inline void GetBufferParameteri64v(GLenum target1,GLenum pname1,GLint64 * params1)
{
	static PFNGLGETBUFFERPARAMETERI64VPROC_HPP fn=reinterpret_cast<PFNGLGETBUFFERPARAMETERI64VPROC_HPP>(_impl::_get_proc_address("glGetBufferParameteri64v",3,0));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetBufferParameteriv
#define GL_HPP_FUNDEF_GetBufferParameteriv
typedef void (*PFNGLGETBUFFERPARAMETERIVPROC_HPP)(GLenum,GLenum,GLint *);
static inline void GetBufferParameteriv(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETBUFFERPARAMETERIVPROC_HPP fn=reinterpret_cast<PFNGLGETBUFFERPARAMETERIVPROC_HPP>(_impl::_get_proc_address("glGetBufferParameteriv",3,0));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetBufferPointerv
#define GL_HPP_FUNDEF_GetBufferPointerv
typedef void (*PFNGLGETBUFFERPOINTERVPROC_HPP)(GLenum,GLenum,void **);
static inline void GetBufferPointerv(GLenum target1,GLenum pname1,void ** params1)
{
	static PFNGLGETBUFFERPOINTERVPROC_HPP fn=reinterpret_cast<PFNGLGETBUFFERPOINTERVPROC_HPP>(_impl::_get_proc_address("glGetBufferPointerv",3,0));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetError
#define GL_HPP_FUNDEF_GetError
typedef GLenum (*PFNGLGETERRORPROC_HPP)();
static inline GLenum GetError()
{
	static PFNGLGETERRORPROC_HPP fn=reinterpret_cast<PFNGLGETERRORPROC_HPP>(_impl::_get_proc_address("glGetError",3,0));
	return fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_GetFloatv
#define GL_HPP_FUNDEF_GetFloatv
typedef void (*PFNGLGETFLOATVPROC_HPP)(GLenum,GLfloat *);
static inline void GetFloatv(GLenum pname1,GLfloat * data1)
{
	static PFNGLGETFLOATVPROC_HPP fn=reinterpret_cast<PFNGLGETFLOATVPROC_HPP>(_impl::_get_proc_address("glGetFloatv",3,0));
	 fn(pname1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetFragDataLocation
#define GL_HPP_FUNDEF_GetFragDataLocation
typedef GLint (*PFNGLGETFRAGDATALOCATIONPROC_HPP)(GLuint,const GLchar *);
static inline GLint GetFragDataLocation(GLuint program1,const GLchar * name1)
{
	static PFNGLGETFRAGDATALOCATIONPROC_HPP fn=reinterpret_cast<PFNGLGETFRAGDATALOCATIONPROC_HPP>(_impl::_get_proc_address("glGetFragDataLocation",3,0));
	return fn(program1,name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetFramebufferAttachmentParameteriv
#define GL_HPP_FUNDEF_GetFramebufferAttachmentParameteriv
typedef void (*PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC_HPP)(GLenum,GLenum,GLenum,GLint *);
static inline void GetFramebufferAttachmentParameteriv(GLenum target1,GLenum attachment1,GLenum pname1,GLint * params1)
{
	static PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC_HPP fn=reinterpret_cast<PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC_HPP>(_impl::_get_proc_address("glGetFramebufferAttachmentParameteriv",3,0));
	 fn(target1,attachment1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetInteger64i_v
#define GL_HPP_FUNDEF_GetInteger64i_v
typedef void (*PFNGLGETINTEGER64I_VPROC_HPP)(GLenum,GLuint,GLint64 *);
static inline void GetInteger64i_v(GLenum target1,GLuint index1,GLint64 * data1)
{
	static PFNGLGETINTEGER64I_VPROC_HPP fn=reinterpret_cast<PFNGLGETINTEGER64I_VPROC_HPP>(_impl::_get_proc_address("glGetInteger64i_v",3,0));
	 fn(target1,index1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetInteger64v
#define GL_HPP_FUNDEF_GetInteger64v
typedef void (*PFNGLGETINTEGER64VPROC_HPP)(GLenum,GLint64 *);
static inline void GetInteger64v(GLenum pname1,GLint64 * data1)
{
	static PFNGLGETINTEGER64VPROC_HPP fn=reinterpret_cast<PFNGLGETINTEGER64VPROC_HPP>(_impl::_get_proc_address("glGetInteger64v",3,0));
	 fn(pname1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetIntegeri_v
#define GL_HPP_FUNDEF_GetIntegeri_v
typedef void (*PFNGLGETINTEGERI_VPROC_HPP)(GLenum,GLuint,GLint *);
static inline void GetIntegeri_v(GLenum target1,GLuint index1,GLint * data1)
{
	static PFNGLGETINTEGERI_VPROC_HPP fn=reinterpret_cast<PFNGLGETINTEGERI_VPROC_HPP>(_impl::_get_proc_address("glGetIntegeri_v",3,0));
	 fn(target1,index1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetIntegerv
#define GL_HPP_FUNDEF_GetIntegerv
typedef void (*PFNGLGETINTEGERVPROC_HPP)(GLenum,GLint *);
static inline void GetIntegerv(GLenum pname1,GLint * data1)
{
	static PFNGLGETINTEGERVPROC_HPP fn=reinterpret_cast<PFNGLGETINTEGERVPROC_HPP>(_impl::_get_proc_address("glGetIntegerv",3,0));
	 fn(pname1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetInternalformativ
#define GL_HPP_FUNDEF_GetInternalformativ
typedef void (*PFNGLGETINTERNALFORMATIVPROC_HPP)(GLenum,GLenum,GLenum,GLsizei,GLint *);
static inline void GetInternalformativ(GLenum target1,GLenum internalformat1,GLenum pname1,GLsizei bufSize1,GLint * params1)
{
	static PFNGLGETINTERNALFORMATIVPROC_HPP fn=reinterpret_cast<PFNGLGETINTERNALFORMATIVPROC_HPP>(_impl::_get_proc_address("glGetInternalformativ",3,0));
	 fn(target1,internalformat1,pname1,bufSize1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetProgramBinary
#define GL_HPP_FUNDEF_GetProgramBinary
typedef void (*PFNGLGETPROGRAMBINARYPROC_HPP)(GLuint,GLsizei,GLsizei *,GLenum *,void *);
static inline void GetProgramBinary(GLuint program1,GLsizei bufSize1,GLsizei * length1,GLenum * binaryFormat1,void * binary1)
{
	static PFNGLGETPROGRAMBINARYPROC_HPP fn=reinterpret_cast<PFNGLGETPROGRAMBINARYPROC_HPP>(_impl::_get_proc_address("glGetProgramBinary",3,0));
	 fn(program1,bufSize1,length1,binaryFormat1,binary1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetProgramInfoLog
#define GL_HPP_FUNDEF_GetProgramInfoLog
typedef void (*PFNGLGETPROGRAMINFOLOGPROC_HPP)(GLuint,GLsizei,GLsizei *,GLchar *);
static inline void GetProgramInfoLog(GLuint program1,GLsizei bufSize1,GLsizei * length1,GLchar * infoLog1)
{
	static PFNGLGETPROGRAMINFOLOGPROC_HPP fn=reinterpret_cast<PFNGLGETPROGRAMINFOLOGPROC_HPP>(_impl::_get_proc_address("glGetProgramInfoLog",3,0));
	 fn(program1,bufSize1,length1,infoLog1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetProgramiv
#define GL_HPP_FUNDEF_GetProgramiv
typedef void (*PFNGLGETPROGRAMIVPROC_HPP)(GLuint,GLenum,GLint *);
static inline void GetProgramiv(GLuint program1,GLenum pname1,GLint * params1)
{
	static PFNGLGETPROGRAMIVPROC_HPP fn=reinterpret_cast<PFNGLGETPROGRAMIVPROC_HPP>(_impl::_get_proc_address("glGetProgramiv",3,0));
	 fn(program1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetQueryObjectuiv
#define GL_HPP_FUNDEF_GetQueryObjectuiv
typedef void (*PFNGLGETQUERYOBJECTUIVPROC_HPP)(GLuint,GLenum,GLuint *);
static inline void GetQueryObjectuiv(GLuint id1,GLenum pname1,GLuint * params1)
{
	static PFNGLGETQUERYOBJECTUIVPROC_HPP fn=reinterpret_cast<PFNGLGETQUERYOBJECTUIVPROC_HPP>(_impl::_get_proc_address("glGetQueryObjectuiv",3,0));
	 fn(id1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetQueryiv
#define GL_HPP_FUNDEF_GetQueryiv
typedef void (*PFNGLGETQUERYIVPROC_HPP)(GLenum,GLenum,GLint *);
static inline void GetQueryiv(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETQUERYIVPROC_HPP fn=reinterpret_cast<PFNGLGETQUERYIVPROC_HPP>(_impl::_get_proc_address("glGetQueryiv",3,0));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetRenderbufferParameteriv
#define GL_HPP_FUNDEF_GetRenderbufferParameteriv
typedef void (*PFNGLGETRENDERBUFFERPARAMETERIVPROC_HPP)(GLenum,GLenum,GLint *);
static inline void GetRenderbufferParameteriv(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETRENDERBUFFERPARAMETERIVPROC_HPP fn=reinterpret_cast<PFNGLGETRENDERBUFFERPARAMETERIVPROC_HPP>(_impl::_get_proc_address("glGetRenderbufferParameteriv",3,0));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetSamplerParameterfv
#define GL_HPP_FUNDEF_GetSamplerParameterfv
typedef void (*PFNGLGETSAMPLERPARAMETERFVPROC_HPP)(GLuint,GLenum,GLfloat *);
static inline void GetSamplerParameterfv(GLuint sampler1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETSAMPLERPARAMETERFVPROC_HPP fn=reinterpret_cast<PFNGLGETSAMPLERPARAMETERFVPROC_HPP>(_impl::_get_proc_address("glGetSamplerParameterfv",3,0));
	 fn(sampler1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetSamplerParameteriv
#define GL_HPP_FUNDEF_GetSamplerParameteriv
typedef void (*PFNGLGETSAMPLERPARAMETERIVPROC_HPP)(GLuint,GLenum,GLint *);
static inline void GetSamplerParameteriv(GLuint sampler1,GLenum pname1,GLint * params1)
{
	static PFNGLGETSAMPLERPARAMETERIVPROC_HPP fn=reinterpret_cast<PFNGLGETSAMPLERPARAMETERIVPROC_HPP>(_impl::_get_proc_address("glGetSamplerParameteriv",3,0));
	 fn(sampler1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetShaderInfoLog
#define GL_HPP_FUNDEF_GetShaderInfoLog
typedef void (*PFNGLGETSHADERINFOLOGPROC_HPP)(GLuint,GLsizei,GLsizei *,GLchar *);
static inline void GetShaderInfoLog(GLuint shader1,GLsizei bufSize1,GLsizei * length1,GLchar * infoLog1)
{
	static PFNGLGETSHADERINFOLOGPROC_HPP fn=reinterpret_cast<PFNGLGETSHADERINFOLOGPROC_HPP>(_impl::_get_proc_address("glGetShaderInfoLog",3,0));
	 fn(shader1,bufSize1,length1,infoLog1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetShaderPrecisionFormat
#define GL_HPP_FUNDEF_GetShaderPrecisionFormat
typedef void (*PFNGLGETSHADERPRECISIONFORMATPROC_HPP)(GLenum,GLenum,GLint *,GLint *);
static inline void GetShaderPrecisionFormat(GLenum shadertype1,GLenum precisiontype1,GLint * range1,GLint * precision1)
{
	static PFNGLGETSHADERPRECISIONFORMATPROC_HPP fn=reinterpret_cast<PFNGLGETSHADERPRECISIONFORMATPROC_HPP>(_impl::_get_proc_address("glGetShaderPrecisionFormat",3,0));
	 fn(shadertype1,precisiontype1,range1,precision1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetShaderSource
#define GL_HPP_FUNDEF_GetShaderSource
typedef void (*PFNGLGETSHADERSOURCEPROC_HPP)(GLuint,GLsizei,GLsizei *,GLchar *);
static inline void GetShaderSource(GLuint shader1,GLsizei bufSize1,GLsizei * length1,GLchar * source1)
{
	static PFNGLGETSHADERSOURCEPROC_HPP fn=reinterpret_cast<PFNGLGETSHADERSOURCEPROC_HPP>(_impl::_get_proc_address("glGetShaderSource",3,0));
	 fn(shader1,bufSize1,length1,source1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetShaderiv
#define GL_HPP_FUNDEF_GetShaderiv
typedef void (*PFNGLGETSHADERIVPROC_HPP)(GLuint,GLenum,GLint *);
static inline void GetShaderiv(GLuint shader1,GLenum pname1,GLint * params1)
{
	static PFNGLGETSHADERIVPROC_HPP fn=reinterpret_cast<PFNGLGETSHADERIVPROC_HPP>(_impl::_get_proc_address("glGetShaderiv",3,0));
	 fn(shader1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetString
#define GL_HPP_FUNDEF_GetString
typedef const GLubyte * (*PFNGLGETSTRINGPROC_HPP)(GLenum);
static inline const GLubyte * GetString(GLenum name1)
{
	static PFNGLGETSTRINGPROC_HPP fn=reinterpret_cast<PFNGLGETSTRINGPROC_HPP>(_impl::_get_proc_address("glGetString",3,0));
	return fn(name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetStringi
#define GL_HPP_FUNDEF_GetStringi
typedef const GLubyte * (*PFNGLGETSTRINGIPROC_HPP)(GLenum,GLuint);
static inline const GLubyte * GetStringi(GLenum name1,GLuint index1)
{
	static PFNGLGETSTRINGIPROC_HPP fn=reinterpret_cast<PFNGLGETSTRINGIPROC_HPP>(_impl::_get_proc_address("glGetStringi",3,0));
	return fn(name1,index1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetSynciv
#define GL_HPP_FUNDEF_GetSynciv
typedef void (*PFNGLGETSYNCIVPROC_HPP)(GLsync,GLenum,GLsizei,GLsizei *,GLint *);
static inline void GetSynciv(GLsync sync1,GLenum pname1,GLsizei bufSize1,GLsizei * length1,GLint * values1)
{
	static PFNGLGETSYNCIVPROC_HPP fn=reinterpret_cast<PFNGLGETSYNCIVPROC_HPP>(_impl::_get_proc_address("glGetSynciv",3,0));
	 fn(sync1,pname1,bufSize1,length1,values1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetTexParameterfv
#define GL_HPP_FUNDEF_GetTexParameterfv
typedef void (*PFNGLGETTEXPARAMETERFVPROC_HPP)(GLenum,GLenum,GLfloat *);
static inline void GetTexParameterfv(GLenum target1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETTEXPARAMETERFVPROC_HPP fn=reinterpret_cast<PFNGLGETTEXPARAMETERFVPROC_HPP>(_impl::_get_proc_address("glGetTexParameterfv",3,0));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetTexParameteriv
#define GL_HPP_FUNDEF_GetTexParameteriv
typedef void (*PFNGLGETTEXPARAMETERIVPROC_HPP)(GLenum,GLenum,GLint *);
static inline void GetTexParameteriv(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETTEXPARAMETERIVPROC_HPP fn=reinterpret_cast<PFNGLGETTEXPARAMETERIVPROC_HPP>(_impl::_get_proc_address("glGetTexParameteriv",3,0));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetTransformFeedbackVarying
#define GL_HPP_FUNDEF_GetTransformFeedbackVarying
typedef void (*PFNGLGETTRANSFORMFEEDBACKVARYINGPROC_HPP)(GLuint,GLuint,GLsizei,GLsizei *,GLsizei *,GLenum *,GLchar *);
static inline void GetTransformFeedbackVarying(GLuint program1,GLuint index1,GLsizei bufSize1,GLsizei * length1,GLsizei * size1,GLenum * type1,GLchar * name1)
{
	static PFNGLGETTRANSFORMFEEDBACKVARYINGPROC_HPP fn=reinterpret_cast<PFNGLGETTRANSFORMFEEDBACKVARYINGPROC_HPP>(_impl::_get_proc_address("glGetTransformFeedbackVarying",3,0));
	 fn(program1,index1,bufSize1,length1,size1,type1,name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetUniformBlockIndex
#define GL_HPP_FUNDEF_GetUniformBlockIndex
typedef GLuint (*PFNGLGETUNIFORMBLOCKINDEXPROC_HPP)(GLuint,const GLchar *);
static inline GLuint GetUniformBlockIndex(GLuint program1,const GLchar * uniformBlockName1)
{
	static PFNGLGETUNIFORMBLOCKINDEXPROC_HPP fn=reinterpret_cast<PFNGLGETUNIFORMBLOCKINDEXPROC_HPP>(_impl::_get_proc_address("glGetUniformBlockIndex",3,0));
	return fn(program1,uniformBlockName1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetUniformIndices
#define GL_HPP_FUNDEF_GetUniformIndices
typedef void (*PFNGLGETUNIFORMINDICESPROC_HPP)(GLuint,GLsizei,const GLchar *const*,GLuint *);
static inline void GetUniformIndices(GLuint program1,GLsizei uniformCount1,const GLchar *const* uniformNames1,GLuint * uniformIndices1)
{
	static PFNGLGETUNIFORMINDICESPROC_HPP fn=reinterpret_cast<PFNGLGETUNIFORMINDICESPROC_HPP>(_impl::_get_proc_address("glGetUniformIndices",3,0));
	 fn(program1,uniformCount1,uniformNames1,uniformIndices1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetUniformLocation
#define GL_HPP_FUNDEF_GetUniformLocation
typedef GLint (*PFNGLGETUNIFORMLOCATIONPROC_HPP)(GLuint,const GLchar *);
static inline GLint GetUniformLocation(GLuint program1,const GLchar * name1)
{
	static PFNGLGETUNIFORMLOCATIONPROC_HPP fn=reinterpret_cast<PFNGLGETUNIFORMLOCATIONPROC_HPP>(_impl::_get_proc_address("glGetUniformLocation",3,0));
	return fn(program1,name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetUniformfv
#define GL_HPP_FUNDEF_GetUniformfv
typedef void (*PFNGLGETUNIFORMFVPROC_HPP)(GLuint,GLint,GLfloat *);
static inline void GetUniformfv(GLuint program1,GLint location1,GLfloat * params1)
{
	static PFNGLGETUNIFORMFVPROC_HPP fn=reinterpret_cast<PFNGLGETUNIFORMFVPROC_HPP>(_impl::_get_proc_address("glGetUniformfv",3,0));
	 fn(program1,location1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetUniformiv
#define GL_HPP_FUNDEF_GetUniformiv
typedef void (*PFNGLGETUNIFORMIVPROC_HPP)(GLuint,GLint,GLint *);
static inline void GetUniformiv(GLuint program1,GLint location1,GLint * params1)
{
	static PFNGLGETUNIFORMIVPROC_HPP fn=reinterpret_cast<PFNGLGETUNIFORMIVPROC_HPP>(_impl::_get_proc_address("glGetUniformiv",3,0));
	 fn(program1,location1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetUniformuiv
#define GL_HPP_FUNDEF_GetUniformuiv
typedef void (*PFNGLGETUNIFORMUIVPROC_HPP)(GLuint,GLint,GLuint *);
static inline void GetUniformuiv(GLuint program1,GLint location1,GLuint * params1)
{
	static PFNGLGETUNIFORMUIVPROC_HPP fn=reinterpret_cast<PFNGLGETUNIFORMUIVPROC_HPP>(_impl::_get_proc_address("glGetUniformuiv",3,0));
	 fn(program1,location1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetVertexAttribIiv
#define GL_HPP_FUNDEF_GetVertexAttribIiv
typedef void (*PFNGLGETVERTEXATTRIBIIVPROC_HPP)(GLuint,GLenum,GLint *);
static inline void GetVertexAttribIiv(GLuint index1,GLenum pname1,GLint * params1)
{
	static PFNGLGETVERTEXATTRIBIIVPROC_HPP fn=reinterpret_cast<PFNGLGETVERTEXATTRIBIIVPROC_HPP>(_impl::_get_proc_address("glGetVertexAttribIiv",3,0));
	 fn(index1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetVertexAttribIuiv
#define GL_HPP_FUNDEF_GetVertexAttribIuiv
typedef void (*PFNGLGETVERTEXATTRIBIUIVPROC_HPP)(GLuint,GLenum,GLuint *);
static inline void GetVertexAttribIuiv(GLuint index1,GLenum pname1,GLuint * params1)
{
	static PFNGLGETVERTEXATTRIBIUIVPROC_HPP fn=reinterpret_cast<PFNGLGETVERTEXATTRIBIUIVPROC_HPP>(_impl::_get_proc_address("glGetVertexAttribIuiv",3,0));
	 fn(index1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetVertexAttribPointerv
#define GL_HPP_FUNDEF_GetVertexAttribPointerv
typedef void (*PFNGLGETVERTEXATTRIBPOINTERVPROC_HPP)(GLuint,GLenum,void **);
static inline void GetVertexAttribPointerv(GLuint index1,GLenum pname1,void ** pointer1)
{
	static PFNGLGETVERTEXATTRIBPOINTERVPROC_HPP fn=reinterpret_cast<PFNGLGETVERTEXATTRIBPOINTERVPROC_HPP>(_impl::_get_proc_address("glGetVertexAttribPointerv",3,0));
	 fn(index1,pname1,pointer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetVertexAttribfv
#define GL_HPP_FUNDEF_GetVertexAttribfv
typedef void (*PFNGLGETVERTEXATTRIBFVPROC_HPP)(GLuint,GLenum,GLfloat *);
static inline void GetVertexAttribfv(GLuint index1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETVERTEXATTRIBFVPROC_HPP fn=reinterpret_cast<PFNGLGETVERTEXATTRIBFVPROC_HPP>(_impl::_get_proc_address("glGetVertexAttribfv",3,0));
	 fn(index1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetVertexAttribiv
#define GL_HPP_FUNDEF_GetVertexAttribiv
typedef void (*PFNGLGETVERTEXATTRIBIVPROC_HPP)(GLuint,GLenum,GLint *);
static inline void GetVertexAttribiv(GLuint index1,GLenum pname1,GLint * params1)
{
	static PFNGLGETVERTEXATTRIBIVPROC_HPP fn=reinterpret_cast<PFNGLGETVERTEXATTRIBIVPROC_HPP>(_impl::_get_proc_address("glGetVertexAttribiv",3,0));
	 fn(index1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Hint
#define GL_HPP_FUNDEF_Hint
typedef void (*PFNGLHINTPROC_HPP)(GLenum,GLenum);
static inline void Hint(GLenum target1,GLenum mode1)
{
	static PFNGLHINTPROC_HPP fn=reinterpret_cast<PFNGLHINTPROC_HPP>(_impl::_get_proc_address("glHint",3,0));
	 fn(target1,mode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_InvalidateFramebuffer
#define GL_HPP_FUNDEF_InvalidateFramebuffer
typedef void (*PFNGLINVALIDATEFRAMEBUFFERPROC_HPP)(GLenum,GLsizei,const GLenum *);
static inline void InvalidateFramebuffer(GLenum target1,GLsizei numAttachments1,const GLenum * attachments1)
{
	static PFNGLINVALIDATEFRAMEBUFFERPROC_HPP fn=reinterpret_cast<PFNGLINVALIDATEFRAMEBUFFERPROC_HPP>(_impl::_get_proc_address("glInvalidateFramebuffer",3,0));
	 fn(target1,numAttachments1,attachments1);
}
#endif

#ifndef	GL_HPP_FUNDEF_InvalidateSubFramebuffer
#define GL_HPP_FUNDEF_InvalidateSubFramebuffer
typedef void (*PFNGLINVALIDATESUBFRAMEBUFFERPROC_HPP)(GLenum,GLsizei,const GLenum *,GLint,GLint,GLsizei,GLsizei);
static inline void InvalidateSubFramebuffer(GLenum target1,GLsizei numAttachments1,const GLenum * attachments1,GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
	static PFNGLINVALIDATESUBFRAMEBUFFERPROC_HPP fn=reinterpret_cast<PFNGLINVALIDATESUBFRAMEBUFFERPROC_HPP>(_impl::_get_proc_address("glInvalidateSubFramebuffer",3,0));
	 fn(target1,numAttachments1,attachments1,x1,y1,width1,height1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsBuffer
#define GL_HPP_FUNDEF_IsBuffer
typedef GLboolean (*PFNGLISBUFFERPROC_HPP)(GLuint);
static inline GLboolean IsBuffer(GLuint buffer1)
{
	static PFNGLISBUFFERPROC_HPP fn=reinterpret_cast<PFNGLISBUFFERPROC_HPP>(_impl::_get_proc_address("glIsBuffer",3,0));
	return fn(buffer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsEnabled
#define GL_HPP_FUNDEF_IsEnabled
typedef GLboolean (*PFNGLISENABLEDPROC_HPP)(GLenum);
static inline GLboolean IsEnabled(GLenum cap1)
{
	static PFNGLISENABLEDPROC_HPP fn=reinterpret_cast<PFNGLISENABLEDPROC_HPP>(_impl::_get_proc_address("glIsEnabled",3,0));
	return fn(cap1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsFramebuffer
#define GL_HPP_FUNDEF_IsFramebuffer
typedef GLboolean (*PFNGLISFRAMEBUFFERPROC_HPP)(GLuint);
static inline GLboolean IsFramebuffer(GLuint framebuffer1)
{
	static PFNGLISFRAMEBUFFERPROC_HPP fn=reinterpret_cast<PFNGLISFRAMEBUFFERPROC_HPP>(_impl::_get_proc_address("glIsFramebuffer",3,0));
	return fn(framebuffer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsProgram
#define GL_HPP_FUNDEF_IsProgram
typedef GLboolean (*PFNGLISPROGRAMPROC_HPP)(GLuint);
static inline GLboolean IsProgram(GLuint program1)
{
	static PFNGLISPROGRAMPROC_HPP fn=reinterpret_cast<PFNGLISPROGRAMPROC_HPP>(_impl::_get_proc_address("glIsProgram",3,0));
	return fn(program1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsQuery
#define GL_HPP_FUNDEF_IsQuery
typedef GLboolean (*PFNGLISQUERYPROC_HPP)(GLuint);
static inline GLboolean IsQuery(GLuint id1)
{
	static PFNGLISQUERYPROC_HPP fn=reinterpret_cast<PFNGLISQUERYPROC_HPP>(_impl::_get_proc_address("glIsQuery",3,0));
	return fn(id1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsRenderbuffer
#define GL_HPP_FUNDEF_IsRenderbuffer
typedef GLboolean (*PFNGLISRENDERBUFFERPROC_HPP)(GLuint);
static inline GLboolean IsRenderbuffer(GLuint renderbuffer1)
{
	static PFNGLISRENDERBUFFERPROC_HPP fn=reinterpret_cast<PFNGLISRENDERBUFFERPROC_HPP>(_impl::_get_proc_address("glIsRenderbuffer",3,0));
	return fn(renderbuffer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsSampler
#define GL_HPP_FUNDEF_IsSampler
typedef GLboolean (*PFNGLISSAMPLERPROC_HPP)(GLuint);
static inline GLboolean IsSampler(GLuint sampler1)
{
	static PFNGLISSAMPLERPROC_HPP fn=reinterpret_cast<PFNGLISSAMPLERPROC_HPP>(_impl::_get_proc_address("glIsSampler",3,0));
	return fn(sampler1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsShader
#define GL_HPP_FUNDEF_IsShader
typedef GLboolean (*PFNGLISSHADERPROC_HPP)(GLuint);
static inline GLboolean IsShader(GLuint shader1)
{
	static PFNGLISSHADERPROC_HPP fn=reinterpret_cast<PFNGLISSHADERPROC_HPP>(_impl::_get_proc_address("glIsShader",3,0));
	return fn(shader1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsSync
#define GL_HPP_FUNDEF_IsSync
typedef GLboolean (*PFNGLISSYNCPROC_HPP)(GLsync);
static inline GLboolean IsSync(GLsync sync1)
{
	static PFNGLISSYNCPROC_HPP fn=reinterpret_cast<PFNGLISSYNCPROC_HPP>(_impl::_get_proc_address("glIsSync",3,0));
	return fn(sync1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsTexture
#define GL_HPP_FUNDEF_IsTexture
typedef GLboolean (*PFNGLISTEXTUREPROC_HPP)(GLuint);
static inline GLboolean IsTexture(GLuint texture1)
{
	static PFNGLISTEXTUREPROC_HPP fn=reinterpret_cast<PFNGLISTEXTUREPROC_HPP>(_impl::_get_proc_address("glIsTexture",3,0));
	return fn(texture1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsTransformFeedback
#define GL_HPP_FUNDEF_IsTransformFeedback
typedef GLboolean (*PFNGLISTRANSFORMFEEDBACKPROC_HPP)(GLuint);
static inline GLboolean IsTransformFeedback(GLuint id1)
{
	static PFNGLISTRANSFORMFEEDBACKPROC_HPP fn=reinterpret_cast<PFNGLISTRANSFORMFEEDBACKPROC_HPP>(_impl::_get_proc_address("glIsTransformFeedback",3,0));
	return fn(id1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsVertexArray
#define GL_HPP_FUNDEF_IsVertexArray
typedef GLboolean (*PFNGLISVERTEXARRAYPROC_HPP)(GLuint);
static inline GLboolean IsVertexArray(GLuint array1)
{
	static PFNGLISVERTEXARRAYPROC_HPP fn=reinterpret_cast<PFNGLISVERTEXARRAYPROC_HPP>(_impl::_get_proc_address("glIsVertexArray",3,0));
	return fn(array1);
}
#endif

#ifndef	GL_HPP_FUNDEF_LineWidth
#define GL_HPP_FUNDEF_LineWidth
typedef void (*PFNGLLINEWIDTHPROC_HPP)(GLfloat);
static inline void LineWidth(GLfloat width1)
{
	static PFNGLLINEWIDTHPROC_HPP fn=reinterpret_cast<PFNGLLINEWIDTHPROC_HPP>(_impl::_get_proc_address("glLineWidth",3,0));
	 fn(width1);
}
#endif

#ifndef	GL_HPP_FUNDEF_LinkProgram
#define GL_HPP_FUNDEF_LinkProgram
typedef void (*PFNGLLINKPROGRAMPROC_HPP)(GLuint);
static inline void LinkProgram(GLuint program1)
{
	static PFNGLLINKPROGRAMPROC_HPP fn=reinterpret_cast<PFNGLLINKPROGRAMPROC_HPP>(_impl::_get_proc_address("glLinkProgram",3,0));
	 fn(program1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MapBufferRange
#define GL_HPP_FUNDEF_MapBufferRange
typedef void * (*PFNGLMAPBUFFERRANGEPROC_HPP)(GLenum,GLintptr,GLsizeiptr,GLbitfield);
static inline void * MapBufferRange(GLenum target1,GLintptr offset1,GLsizeiptr length1,GLbitfield access1)
{
	static PFNGLMAPBUFFERRANGEPROC_HPP fn=reinterpret_cast<PFNGLMAPBUFFERRANGEPROC_HPP>(_impl::_get_proc_address("glMapBufferRange",3,0));
	return fn(target1,offset1,length1,access1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PauseTransformFeedback
#define GL_HPP_FUNDEF_PauseTransformFeedback
typedef void (*PFNGLPAUSETRANSFORMFEEDBACKPROC_HPP)();
static inline void PauseTransformFeedback()
{
	static PFNGLPAUSETRANSFORMFEEDBACKPROC_HPP fn=reinterpret_cast<PFNGLPAUSETRANSFORMFEEDBACKPROC_HPP>(_impl::_get_proc_address("glPauseTransformFeedback",3,0));
	 fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_PixelStorei
#define GL_HPP_FUNDEF_PixelStorei
typedef void (*PFNGLPIXELSTOREIPROC_HPP)(GLenum,GLint);
static inline void PixelStorei(GLenum pname1,GLint param1)
{
	static PFNGLPIXELSTOREIPROC_HPP fn=reinterpret_cast<PFNGLPIXELSTOREIPROC_HPP>(_impl::_get_proc_address("glPixelStorei",3,0));
	 fn(pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PolygonOffset
#define GL_HPP_FUNDEF_PolygonOffset
typedef void (*PFNGLPOLYGONOFFSETPROC_HPP)(GLfloat,GLfloat);
static inline void PolygonOffset(GLfloat factor1,GLfloat units1)
{
	static PFNGLPOLYGONOFFSETPROC_HPP fn=reinterpret_cast<PFNGLPOLYGONOFFSETPROC_HPP>(_impl::_get_proc_address("glPolygonOffset",3,0));
	 fn(factor1,units1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramBinary
#define GL_HPP_FUNDEF_ProgramBinary
typedef void (*PFNGLPROGRAMBINARYPROC_HPP)(GLuint,GLenum,const void *,GLsizei);
static inline void ProgramBinary(GLuint program1,GLenum binaryFormat1,const void * binary1,GLsizei length1)
{
	static PFNGLPROGRAMBINARYPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMBINARYPROC_HPP>(_impl::_get_proc_address("glProgramBinary",3,0));
	 fn(program1,binaryFormat1,binary1,length1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramParameteri
#define GL_HPP_FUNDEF_ProgramParameteri
typedef void (*PFNGLPROGRAMPARAMETERIPROC_HPP)(GLuint,GLenum,GLint);
static inline void ProgramParameteri(GLuint program1,GLenum pname1,GLint value1)
{
	static PFNGLPROGRAMPARAMETERIPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMPARAMETERIPROC_HPP>(_impl::_get_proc_address("glProgramParameteri",3,0));
	 fn(program1,pname1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ReadBuffer
#define GL_HPP_FUNDEF_ReadBuffer
typedef void (*PFNGLREADBUFFERPROC_HPP)(GLenum);
static inline void ReadBuffer(GLenum src1)
{
	static PFNGLREADBUFFERPROC_HPP fn=reinterpret_cast<PFNGLREADBUFFERPROC_HPP>(_impl::_get_proc_address("glReadBuffer",3,0));
	 fn(src1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ReadPixels
#define GL_HPP_FUNDEF_ReadPixels
typedef void (*PFNGLREADPIXELSPROC_HPP)(GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,void *);
static inline void ReadPixels(GLint x1,GLint y1,GLsizei width1,GLsizei height1,GLenum format1,GLenum type1,void * pixels1)
{
	static PFNGLREADPIXELSPROC_HPP fn=reinterpret_cast<PFNGLREADPIXELSPROC_HPP>(_impl::_get_proc_address("glReadPixels",3,0));
	 fn(x1,y1,width1,height1,format1,type1,pixels1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ReleaseShaderCompiler
#define GL_HPP_FUNDEF_ReleaseShaderCompiler
typedef void (*PFNGLRELEASESHADERCOMPILERPROC_HPP)();
static inline void ReleaseShaderCompiler()
{
	static PFNGLRELEASESHADERCOMPILERPROC_HPP fn=reinterpret_cast<PFNGLRELEASESHADERCOMPILERPROC_HPP>(_impl::_get_proc_address("glReleaseShaderCompiler",3,0));
	 fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_RenderbufferStorage
#define GL_HPP_FUNDEF_RenderbufferStorage
typedef void (*PFNGLRENDERBUFFERSTORAGEPROC_HPP)(GLenum,GLenum,GLsizei,GLsizei);
static inline void RenderbufferStorage(GLenum target1,GLenum internalformat1,GLsizei width1,GLsizei height1)
{
	static PFNGLRENDERBUFFERSTORAGEPROC_HPP fn=reinterpret_cast<PFNGLRENDERBUFFERSTORAGEPROC_HPP>(_impl::_get_proc_address("glRenderbufferStorage",3,0));
	 fn(target1,internalformat1,width1,height1);
}
#endif

#ifndef	GL_HPP_FUNDEF_RenderbufferStorageMultisample
#define GL_HPP_FUNDEF_RenderbufferStorageMultisample
typedef void (*PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC_HPP)(GLenum,GLsizei,GLenum,GLsizei,GLsizei);
static inline void RenderbufferStorageMultisample(GLenum target1,GLsizei samples1,GLenum internalformat1,GLsizei width1,GLsizei height1)
{
	static PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC_HPP fn=reinterpret_cast<PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC_HPP>(_impl::_get_proc_address("glRenderbufferStorageMultisample",3,0));
	 fn(target1,samples1,internalformat1,width1,height1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ResumeTransformFeedback
#define GL_HPP_FUNDEF_ResumeTransformFeedback
typedef void (*PFNGLRESUMETRANSFORMFEEDBACKPROC_HPP)();
static inline void ResumeTransformFeedback()
{
	static PFNGLRESUMETRANSFORMFEEDBACKPROC_HPP fn=reinterpret_cast<PFNGLRESUMETRANSFORMFEEDBACKPROC_HPP>(_impl::_get_proc_address("glResumeTransformFeedback",3,0));
	 fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_SampleCoverage
#define GL_HPP_FUNDEF_SampleCoverage
typedef void (*PFNGLSAMPLECOVERAGEPROC_HPP)(GLfloat,GLboolean);
static inline void SampleCoverage(GLfloat value1,GLboolean invert1)
{
	static PFNGLSAMPLECOVERAGEPROC_HPP fn=reinterpret_cast<PFNGLSAMPLECOVERAGEPROC_HPP>(_impl::_get_proc_address("glSampleCoverage",3,0));
	 fn(value1,invert1);
}
#endif

#ifndef	GL_HPP_FUNDEF_SamplerParameterf
#define GL_HPP_FUNDEF_SamplerParameterf
typedef void (*PFNGLSAMPLERPARAMETERFPROC_HPP)(GLuint,GLenum,GLfloat);
static inline void SamplerParameterf(GLuint sampler1,GLenum pname1,GLfloat param1)
{
	static PFNGLSAMPLERPARAMETERFPROC_HPP fn=reinterpret_cast<PFNGLSAMPLERPARAMETERFPROC_HPP>(_impl::_get_proc_address("glSamplerParameterf",3,0));
	 fn(sampler1,pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_SamplerParameterfv
#define GL_HPP_FUNDEF_SamplerParameterfv
typedef void (*PFNGLSAMPLERPARAMETERFVPROC_HPP)(GLuint,GLenum,const GLfloat *);
static inline void SamplerParameterfv(GLuint sampler1,GLenum pname1,const GLfloat * param1)
{
	static PFNGLSAMPLERPARAMETERFVPROC_HPP fn=reinterpret_cast<PFNGLSAMPLERPARAMETERFVPROC_HPP>(_impl::_get_proc_address("glSamplerParameterfv",3,0));
	 fn(sampler1,pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_SamplerParameteri
#define GL_HPP_FUNDEF_SamplerParameteri
typedef void (*PFNGLSAMPLERPARAMETERIPROC_HPP)(GLuint,GLenum,GLint);
static inline void SamplerParameteri(GLuint sampler1,GLenum pname1,GLint param1)
{
	static PFNGLSAMPLERPARAMETERIPROC_HPP fn=reinterpret_cast<PFNGLSAMPLERPARAMETERIPROC_HPP>(_impl::_get_proc_address("glSamplerParameteri",3,0));
	 fn(sampler1,pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_SamplerParameteriv
#define GL_HPP_FUNDEF_SamplerParameteriv
typedef void (*PFNGLSAMPLERPARAMETERIVPROC_HPP)(GLuint,GLenum,const GLint *);
static inline void SamplerParameteriv(GLuint sampler1,GLenum pname1,const GLint * param1)
{
	static PFNGLSAMPLERPARAMETERIVPROC_HPP fn=reinterpret_cast<PFNGLSAMPLERPARAMETERIVPROC_HPP>(_impl::_get_proc_address("glSamplerParameteriv",3,0));
	 fn(sampler1,pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Scissor
#define GL_HPP_FUNDEF_Scissor
typedef void (*PFNGLSCISSORPROC_HPP)(GLint,GLint,GLsizei,GLsizei);
static inline void Scissor(GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
	static PFNGLSCISSORPROC_HPP fn=reinterpret_cast<PFNGLSCISSORPROC_HPP>(_impl::_get_proc_address("glScissor",3,0));
	 fn(x1,y1,width1,height1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ShaderBinary
#define GL_HPP_FUNDEF_ShaderBinary
typedef void (*PFNGLSHADERBINARYPROC_HPP)(GLsizei,const GLuint *,GLenum,const void *,GLsizei);
static inline void ShaderBinary(GLsizei count1,const GLuint * shaders1,GLenum binaryformat1,const void * binary1,GLsizei length1)
{
	static PFNGLSHADERBINARYPROC_HPP fn=reinterpret_cast<PFNGLSHADERBINARYPROC_HPP>(_impl::_get_proc_address("glShaderBinary",3,0));
	 fn(count1,shaders1,binaryformat1,binary1,length1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ShaderSource
#define GL_HPP_FUNDEF_ShaderSource
typedef void (*PFNGLSHADERSOURCEPROC_HPP)(GLuint,GLsizei,const GLchar *const*,const GLint *);
static inline void ShaderSource(GLuint shader1,GLsizei count1,const GLchar *const* string1,const GLint * length1)
{
	static PFNGLSHADERSOURCEPROC_HPP fn=reinterpret_cast<PFNGLSHADERSOURCEPROC_HPP>(_impl::_get_proc_address("glShaderSource",3,0));
	 fn(shader1,count1,string1,length1);
}
#endif

#ifndef	GL_HPP_FUNDEF_StencilFunc
#define GL_HPP_FUNDEF_StencilFunc
typedef void (*PFNGLSTENCILFUNCPROC_HPP)(GLenum,GLint,GLuint);
static inline void StencilFunc(GLenum func1,GLint ref1,GLuint mask1)
{
	static PFNGLSTENCILFUNCPROC_HPP fn=reinterpret_cast<PFNGLSTENCILFUNCPROC_HPP>(_impl::_get_proc_address("glStencilFunc",3,0));
	 fn(func1,ref1,mask1);
}
#endif

#ifndef	GL_HPP_FUNDEF_StencilFuncSeparate
#define GL_HPP_FUNDEF_StencilFuncSeparate
typedef void (*PFNGLSTENCILFUNCSEPARATEPROC_HPP)(GLenum,GLenum,GLint,GLuint);
static inline void StencilFuncSeparate(GLenum face1,GLenum func1,GLint ref1,GLuint mask1)
{
	static PFNGLSTENCILFUNCSEPARATEPROC_HPP fn=reinterpret_cast<PFNGLSTENCILFUNCSEPARATEPROC_HPP>(_impl::_get_proc_address("glStencilFuncSeparate",3,0));
	 fn(face1,func1,ref1,mask1);
}
#endif

#ifndef	GL_HPP_FUNDEF_StencilMask
#define GL_HPP_FUNDEF_StencilMask
typedef void (*PFNGLSTENCILMASKPROC_HPP)(GLuint);
static inline void StencilMask(GLuint mask1)
{
	static PFNGLSTENCILMASKPROC_HPP fn=reinterpret_cast<PFNGLSTENCILMASKPROC_HPP>(_impl::_get_proc_address("glStencilMask",3,0));
	 fn(mask1);
}
#endif

#ifndef	GL_HPP_FUNDEF_StencilMaskSeparate
#define GL_HPP_FUNDEF_StencilMaskSeparate
typedef void (*PFNGLSTENCILMASKSEPARATEPROC_HPP)(GLenum,GLuint);
static inline void StencilMaskSeparate(GLenum face1,GLuint mask1)
{
	static PFNGLSTENCILMASKSEPARATEPROC_HPP fn=reinterpret_cast<PFNGLSTENCILMASKSEPARATEPROC_HPP>(_impl::_get_proc_address("glStencilMaskSeparate",3,0));
	 fn(face1,mask1);
}
#endif

#ifndef	GL_HPP_FUNDEF_StencilOp
#define GL_HPP_FUNDEF_StencilOp
typedef void (*PFNGLSTENCILOPPROC_HPP)(GLenum,GLenum,GLenum);
static inline void StencilOp(GLenum fail1,GLenum zfail1,GLenum zpass1)
{
	static PFNGLSTENCILOPPROC_HPP fn=reinterpret_cast<PFNGLSTENCILOPPROC_HPP>(_impl::_get_proc_address("glStencilOp",3,0));
	 fn(fail1,zfail1,zpass1);
}
#endif

#ifndef	GL_HPP_FUNDEF_StencilOpSeparate
#define GL_HPP_FUNDEF_StencilOpSeparate
typedef void (*PFNGLSTENCILOPSEPARATEPROC_HPP)(GLenum,GLenum,GLenum,GLenum);
static inline void StencilOpSeparate(GLenum face1,GLenum sfail1,GLenum dpfail1,GLenum dppass1)
{
	static PFNGLSTENCILOPSEPARATEPROC_HPP fn=reinterpret_cast<PFNGLSTENCILOPSEPARATEPROC_HPP>(_impl::_get_proc_address("glStencilOpSeparate",3,0));
	 fn(face1,sfail1,dpfail1,dppass1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexImage2D
#define GL_HPP_FUNDEF_TexImage2D
typedef void (*PFNGLTEXIMAGE2DPROC_HPP)(GLenum,GLint,GLint,GLsizei,GLsizei,GLint,GLenum,GLenum,const void *);
static inline void TexImage2D(GLenum target1,GLint level1,GLint internalformat1,GLsizei width1,GLsizei height1,GLint border1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXIMAGE2DPROC_HPP fn=reinterpret_cast<PFNGLTEXIMAGE2DPROC_HPP>(_impl::_get_proc_address("glTexImage2D",3,0));
	 fn(target1,level1,internalformat1,width1,height1,border1,format1,type1,pixels1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexImage3D
#define GL_HPP_FUNDEF_TexImage3D
typedef void (*PFNGLTEXIMAGE3DPROC_HPP)(GLenum,GLint,GLint,GLsizei,GLsizei,GLsizei,GLint,GLenum,GLenum,const void *);
static inline void TexImage3D(GLenum target1,GLint level1,GLint internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLint border1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXIMAGE3DPROC_HPP fn=reinterpret_cast<PFNGLTEXIMAGE3DPROC_HPP>(_impl::_get_proc_address("glTexImage3D",3,0));
	 fn(target1,level1,internalformat1,width1,height1,depth1,border1,format1,type1,pixels1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexParameterf
#define GL_HPP_FUNDEF_TexParameterf
typedef void (*PFNGLTEXPARAMETERFPROC_HPP)(GLenum,GLenum,GLfloat);
static inline void TexParameterf(GLenum target1,GLenum pname1,GLfloat param1)
{
	static PFNGLTEXPARAMETERFPROC_HPP fn=reinterpret_cast<PFNGLTEXPARAMETERFPROC_HPP>(_impl::_get_proc_address("glTexParameterf",3,0));
	 fn(target1,pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexParameterfv
#define GL_HPP_FUNDEF_TexParameterfv
typedef void (*PFNGLTEXPARAMETERFVPROC_HPP)(GLenum,GLenum,const GLfloat *);
static inline void TexParameterfv(GLenum target1,GLenum pname1,const GLfloat * params1)
{
	static PFNGLTEXPARAMETERFVPROC_HPP fn=reinterpret_cast<PFNGLTEXPARAMETERFVPROC_HPP>(_impl::_get_proc_address("glTexParameterfv",3,0));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexParameteri
#define GL_HPP_FUNDEF_TexParameteri
typedef void (*PFNGLTEXPARAMETERIPROC_HPP)(GLenum,GLenum,GLint);
static inline void TexParameteri(GLenum target1,GLenum pname1,GLint param1)
{
	static PFNGLTEXPARAMETERIPROC_HPP fn=reinterpret_cast<PFNGLTEXPARAMETERIPROC_HPP>(_impl::_get_proc_address("glTexParameteri",3,0));
	 fn(target1,pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexParameteriv
#define GL_HPP_FUNDEF_TexParameteriv
typedef void (*PFNGLTEXPARAMETERIVPROC_HPP)(GLenum,GLenum,const GLint *);
static inline void TexParameteriv(GLenum target1,GLenum pname1,const GLint * params1)
{
	static PFNGLTEXPARAMETERIVPROC_HPP fn=reinterpret_cast<PFNGLTEXPARAMETERIVPROC_HPP>(_impl::_get_proc_address("glTexParameteriv",3,0));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexStorage2D
#define GL_HPP_FUNDEF_TexStorage2D
typedef void (*PFNGLTEXSTORAGE2DPROC_HPP)(GLenum,GLsizei,GLenum,GLsizei,GLsizei);
static inline void TexStorage2D(GLenum target1,GLsizei levels1,GLenum internalformat1,GLsizei width1,GLsizei height1)
{
	static PFNGLTEXSTORAGE2DPROC_HPP fn=reinterpret_cast<PFNGLTEXSTORAGE2DPROC_HPP>(_impl::_get_proc_address("glTexStorage2D",3,0));
	 fn(target1,levels1,internalformat1,width1,height1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexStorage3D
#define GL_HPP_FUNDEF_TexStorage3D
typedef void (*PFNGLTEXSTORAGE3DPROC_HPP)(GLenum,GLsizei,GLenum,GLsizei,GLsizei,GLsizei);
static inline void TexStorage3D(GLenum target1,GLsizei levels1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1)
{
	static PFNGLTEXSTORAGE3DPROC_HPP fn=reinterpret_cast<PFNGLTEXSTORAGE3DPROC_HPP>(_impl::_get_proc_address("glTexStorage3D",3,0));
	 fn(target1,levels1,internalformat1,width1,height1,depth1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexSubImage2D
#define GL_HPP_FUNDEF_TexSubImage2D
typedef void (*PFNGLTEXSUBIMAGE2DPROC_HPP)(GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,const void *);
static inline void TexSubImage2D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLsizei width1,GLsizei height1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXSUBIMAGE2DPROC_HPP fn=reinterpret_cast<PFNGLTEXSUBIMAGE2DPROC_HPP>(_impl::_get_proc_address("glTexSubImage2D",3,0));
	 fn(target1,level1,xoffset1,yoffset1,width1,height1,format1,type1,pixels1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexSubImage3D
#define GL_HPP_FUNDEF_TexSubImage3D
typedef void (*PFNGLTEXSUBIMAGE3DPROC_HPP)(GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,const void *);
static inline void TexSubImage3D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLsizei width1,GLsizei height1,GLsizei depth1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXSUBIMAGE3DPROC_HPP fn=reinterpret_cast<PFNGLTEXSUBIMAGE3DPROC_HPP>(_impl::_get_proc_address("glTexSubImage3D",3,0));
	 fn(target1,level1,xoffset1,yoffset1,zoffset1,width1,height1,depth1,format1,type1,pixels1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TransformFeedbackVaryings
#define GL_HPP_FUNDEF_TransformFeedbackVaryings
typedef void (*PFNGLTRANSFORMFEEDBACKVARYINGSPROC_HPP)(GLuint,GLsizei,const GLchar *const*,GLenum);
static inline void TransformFeedbackVaryings(GLuint program1,GLsizei count1,const GLchar *const* varyings1,GLenum bufferMode1)
{
	static PFNGLTRANSFORMFEEDBACKVARYINGSPROC_HPP fn=reinterpret_cast<PFNGLTRANSFORMFEEDBACKVARYINGSPROC_HPP>(_impl::_get_proc_address("glTransformFeedbackVaryings",3,0));
	 fn(program1,count1,varyings1,bufferMode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform1f
#define GL_HPP_FUNDEF_Uniform1f
typedef void (*PFNGLUNIFORM1FPROC_HPP)(GLint,GLfloat);
static inline void Uniform1f(GLint location1,GLfloat v01)
{
	static PFNGLUNIFORM1FPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM1FPROC_HPP>(_impl::_get_proc_address("glUniform1f",3,0));
	 fn(location1,v01);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform1fv
#define GL_HPP_FUNDEF_Uniform1fv
typedef void (*PFNGLUNIFORM1FVPROC_HPP)(GLint,GLsizei,const GLfloat *);
static inline void Uniform1fv(GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLUNIFORM1FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM1FVPROC_HPP>(_impl::_get_proc_address("glUniform1fv",3,0));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform1i
#define GL_HPP_FUNDEF_Uniform1i
typedef void (*PFNGLUNIFORM1IPROC_HPP)(GLint,GLint);
static inline void Uniform1i(GLint location1,GLint v01)
{
	static PFNGLUNIFORM1IPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM1IPROC_HPP>(_impl::_get_proc_address("glUniform1i",3,0));
	 fn(location1,v01);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform1iv
#define GL_HPP_FUNDEF_Uniform1iv
typedef void (*PFNGLUNIFORM1IVPROC_HPP)(GLint,GLsizei,const GLint *);
static inline void Uniform1iv(GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLUNIFORM1IVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM1IVPROC_HPP>(_impl::_get_proc_address("glUniform1iv",3,0));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform1ui
#define GL_HPP_FUNDEF_Uniform1ui
typedef void (*PFNGLUNIFORM1UIPROC_HPP)(GLint,GLuint);
static inline void Uniform1ui(GLint location1,GLuint v01)
{
	static PFNGLUNIFORM1UIPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM1UIPROC_HPP>(_impl::_get_proc_address("glUniform1ui",3,0));
	 fn(location1,v01);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform1uiv
#define GL_HPP_FUNDEF_Uniform1uiv
typedef void (*PFNGLUNIFORM1UIVPROC_HPP)(GLint,GLsizei,const GLuint *);
static inline void Uniform1uiv(GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLUNIFORM1UIVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM1UIVPROC_HPP>(_impl::_get_proc_address("glUniform1uiv",3,0));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform2f
#define GL_HPP_FUNDEF_Uniform2f
typedef void (*PFNGLUNIFORM2FPROC_HPP)(GLint,GLfloat,GLfloat);
static inline void Uniform2f(GLint location1,GLfloat v01,GLfloat v11)
{
	static PFNGLUNIFORM2FPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM2FPROC_HPP>(_impl::_get_proc_address("glUniform2f",3,0));
	 fn(location1,v01,v11);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform2fv
#define GL_HPP_FUNDEF_Uniform2fv
typedef void (*PFNGLUNIFORM2FVPROC_HPP)(GLint,GLsizei,const GLfloat *);
static inline void Uniform2fv(GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLUNIFORM2FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM2FVPROC_HPP>(_impl::_get_proc_address("glUniform2fv",3,0));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform2i
#define GL_HPP_FUNDEF_Uniform2i
typedef void (*PFNGLUNIFORM2IPROC_HPP)(GLint,GLint,GLint);
static inline void Uniform2i(GLint location1,GLint v01,GLint v11)
{
	static PFNGLUNIFORM2IPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM2IPROC_HPP>(_impl::_get_proc_address("glUniform2i",3,0));
	 fn(location1,v01,v11);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform2iv
#define GL_HPP_FUNDEF_Uniform2iv
typedef void (*PFNGLUNIFORM2IVPROC_HPP)(GLint,GLsizei,const GLint *);
static inline void Uniform2iv(GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLUNIFORM2IVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM2IVPROC_HPP>(_impl::_get_proc_address("glUniform2iv",3,0));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform2ui
#define GL_HPP_FUNDEF_Uniform2ui
typedef void (*PFNGLUNIFORM2UIPROC_HPP)(GLint,GLuint,GLuint);
static inline void Uniform2ui(GLint location1,GLuint v01,GLuint v11)
{
	static PFNGLUNIFORM2UIPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM2UIPROC_HPP>(_impl::_get_proc_address("glUniform2ui",3,0));
	 fn(location1,v01,v11);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform2uiv
#define GL_HPP_FUNDEF_Uniform2uiv
typedef void (*PFNGLUNIFORM2UIVPROC_HPP)(GLint,GLsizei,const GLuint *);
static inline void Uniform2uiv(GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLUNIFORM2UIVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM2UIVPROC_HPP>(_impl::_get_proc_address("glUniform2uiv",3,0));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform3f
#define GL_HPP_FUNDEF_Uniform3f
typedef void (*PFNGLUNIFORM3FPROC_HPP)(GLint,GLfloat,GLfloat,GLfloat);
static inline void Uniform3f(GLint location1,GLfloat v01,GLfloat v11,GLfloat v21)
{
	static PFNGLUNIFORM3FPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM3FPROC_HPP>(_impl::_get_proc_address("glUniform3f",3,0));
	 fn(location1,v01,v11,v21);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform3fv
#define GL_HPP_FUNDEF_Uniform3fv
typedef void (*PFNGLUNIFORM3FVPROC_HPP)(GLint,GLsizei,const GLfloat *);
static inline void Uniform3fv(GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLUNIFORM3FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM3FVPROC_HPP>(_impl::_get_proc_address("glUniform3fv",3,0));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform3i
#define GL_HPP_FUNDEF_Uniform3i
typedef void (*PFNGLUNIFORM3IPROC_HPP)(GLint,GLint,GLint,GLint);
static inline void Uniform3i(GLint location1,GLint v01,GLint v11,GLint v21)
{
	static PFNGLUNIFORM3IPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM3IPROC_HPP>(_impl::_get_proc_address("glUniform3i",3,0));
	 fn(location1,v01,v11,v21);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform3iv
#define GL_HPP_FUNDEF_Uniform3iv
typedef void (*PFNGLUNIFORM3IVPROC_HPP)(GLint,GLsizei,const GLint *);
static inline void Uniform3iv(GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLUNIFORM3IVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM3IVPROC_HPP>(_impl::_get_proc_address("glUniform3iv",3,0));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform3ui
#define GL_HPP_FUNDEF_Uniform3ui
typedef void (*PFNGLUNIFORM3UIPROC_HPP)(GLint,GLuint,GLuint,GLuint);
static inline void Uniform3ui(GLint location1,GLuint v01,GLuint v11,GLuint v21)
{
	static PFNGLUNIFORM3UIPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM3UIPROC_HPP>(_impl::_get_proc_address("glUniform3ui",3,0));
	 fn(location1,v01,v11,v21);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform3uiv
#define GL_HPP_FUNDEF_Uniform3uiv
typedef void (*PFNGLUNIFORM3UIVPROC_HPP)(GLint,GLsizei,const GLuint *);
static inline void Uniform3uiv(GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLUNIFORM3UIVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM3UIVPROC_HPP>(_impl::_get_proc_address("glUniform3uiv",3,0));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform4f
#define GL_HPP_FUNDEF_Uniform4f
typedef void (*PFNGLUNIFORM4FPROC_HPP)(GLint,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void Uniform4f(GLint location1,GLfloat v01,GLfloat v11,GLfloat v21,GLfloat v31)
{
	static PFNGLUNIFORM4FPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM4FPROC_HPP>(_impl::_get_proc_address("glUniform4f",3,0));
	 fn(location1,v01,v11,v21,v31);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform4fv
#define GL_HPP_FUNDEF_Uniform4fv
typedef void (*PFNGLUNIFORM4FVPROC_HPP)(GLint,GLsizei,const GLfloat *);
static inline void Uniform4fv(GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLUNIFORM4FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM4FVPROC_HPP>(_impl::_get_proc_address("glUniform4fv",3,0));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform4i
#define GL_HPP_FUNDEF_Uniform4i
typedef void (*PFNGLUNIFORM4IPROC_HPP)(GLint,GLint,GLint,GLint,GLint);
static inline void Uniform4i(GLint location1,GLint v01,GLint v11,GLint v21,GLint v31)
{
	static PFNGLUNIFORM4IPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM4IPROC_HPP>(_impl::_get_proc_address("glUniform4i",3,0));
	 fn(location1,v01,v11,v21,v31);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform4iv
#define GL_HPP_FUNDEF_Uniform4iv
typedef void (*PFNGLUNIFORM4IVPROC_HPP)(GLint,GLsizei,const GLint *);
static inline void Uniform4iv(GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLUNIFORM4IVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM4IVPROC_HPP>(_impl::_get_proc_address("glUniform4iv",3,0));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform4ui
#define GL_HPP_FUNDEF_Uniform4ui
typedef void (*PFNGLUNIFORM4UIPROC_HPP)(GLint,GLuint,GLuint,GLuint,GLuint);
static inline void Uniform4ui(GLint location1,GLuint v01,GLuint v11,GLuint v21,GLuint v31)
{
	static PFNGLUNIFORM4UIPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM4UIPROC_HPP>(_impl::_get_proc_address("glUniform4ui",3,0));
	 fn(location1,v01,v11,v21,v31);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform4uiv
#define GL_HPP_FUNDEF_Uniform4uiv
typedef void (*PFNGLUNIFORM4UIVPROC_HPP)(GLint,GLsizei,const GLuint *);
static inline void Uniform4uiv(GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLUNIFORM4UIVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM4UIVPROC_HPP>(_impl::_get_proc_address("glUniform4uiv",3,0));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformBlockBinding
#define GL_HPP_FUNDEF_UniformBlockBinding
typedef void (*PFNGLUNIFORMBLOCKBINDINGPROC_HPP)(GLuint,GLuint,GLuint);
static inline void UniformBlockBinding(GLuint program1,GLuint uniformBlockIndex1,GLuint uniformBlockBinding1)
{
	static PFNGLUNIFORMBLOCKBINDINGPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMBLOCKBINDINGPROC_HPP>(_impl::_get_proc_address("glUniformBlockBinding",3,0));
	 fn(program1,uniformBlockIndex1,uniformBlockBinding1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix2fv
#define GL_HPP_FUNDEF_UniformMatrix2fv
typedef void (*PFNGLUNIFORMMATRIX2FVPROC_HPP)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void UniformMatrix2fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX2FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX2FVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix2fv",3,0));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix2x3fv
#define GL_HPP_FUNDEF_UniformMatrix2x3fv
typedef void (*PFNGLUNIFORMMATRIX2X3FVPROC_HPP)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void UniformMatrix2x3fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX2X3FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX2X3FVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix2x3fv",3,0));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix2x4fv
#define GL_HPP_FUNDEF_UniformMatrix2x4fv
typedef void (*PFNGLUNIFORMMATRIX2X4FVPROC_HPP)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void UniformMatrix2x4fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX2X4FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX2X4FVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix2x4fv",3,0));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix3fv
#define GL_HPP_FUNDEF_UniformMatrix3fv
typedef void (*PFNGLUNIFORMMATRIX3FVPROC_HPP)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void UniformMatrix3fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX3FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX3FVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix3fv",3,0));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix3x2fv
#define GL_HPP_FUNDEF_UniformMatrix3x2fv
typedef void (*PFNGLUNIFORMMATRIX3X2FVPROC_HPP)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void UniformMatrix3x2fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX3X2FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX3X2FVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix3x2fv",3,0));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix3x4fv
#define GL_HPP_FUNDEF_UniformMatrix3x4fv
typedef void (*PFNGLUNIFORMMATRIX3X4FVPROC_HPP)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void UniformMatrix3x4fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX3X4FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX3X4FVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix3x4fv",3,0));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix4fv
#define GL_HPP_FUNDEF_UniformMatrix4fv
typedef void (*PFNGLUNIFORMMATRIX4FVPROC_HPP)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void UniformMatrix4fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX4FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX4FVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix4fv",3,0));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix4x2fv
#define GL_HPP_FUNDEF_UniformMatrix4x2fv
typedef void (*PFNGLUNIFORMMATRIX4X2FVPROC_HPP)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void UniformMatrix4x2fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX4X2FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX4X2FVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix4x2fv",3,0));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix4x3fv
#define GL_HPP_FUNDEF_UniformMatrix4x3fv
typedef void (*PFNGLUNIFORMMATRIX4X3FVPROC_HPP)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void UniformMatrix4x3fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX4X3FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX4X3FVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix4x3fv",3,0));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UnmapBuffer
#define GL_HPP_FUNDEF_UnmapBuffer
typedef GLboolean (*PFNGLUNMAPBUFFERPROC_HPP)(GLenum);
static inline GLboolean UnmapBuffer(GLenum target1)
{
	static PFNGLUNMAPBUFFERPROC_HPP fn=reinterpret_cast<PFNGLUNMAPBUFFERPROC_HPP>(_impl::_get_proc_address("glUnmapBuffer",3,0));
	return fn(target1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UseProgram
#define GL_HPP_FUNDEF_UseProgram
typedef void (*PFNGLUSEPROGRAMPROC_HPP)(GLuint);
static inline void UseProgram(GLuint program1)
{
	static PFNGLUSEPROGRAMPROC_HPP fn=reinterpret_cast<PFNGLUSEPROGRAMPROC_HPP>(_impl::_get_proc_address("glUseProgram",3,0));
	 fn(program1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ValidateProgram
#define GL_HPP_FUNDEF_ValidateProgram
typedef void (*PFNGLVALIDATEPROGRAMPROC_HPP)(GLuint);
static inline void ValidateProgram(GLuint program1)
{
	static PFNGLVALIDATEPROGRAMPROC_HPP fn=reinterpret_cast<PFNGLVALIDATEPROGRAMPROC_HPP>(_impl::_get_proc_address("glValidateProgram",3,0));
	 fn(program1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib1f
#define GL_HPP_FUNDEF_VertexAttrib1f
typedef void (*PFNGLVERTEXATTRIB1FPROC_HPP)(GLuint,GLfloat);
static inline void VertexAttrib1f(GLuint index1,GLfloat x1)
{
	static PFNGLVERTEXATTRIB1FPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB1FPROC_HPP>(_impl::_get_proc_address("glVertexAttrib1f",3,0));
	 fn(index1,x1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib1fv
#define GL_HPP_FUNDEF_VertexAttrib1fv
typedef void (*PFNGLVERTEXATTRIB1FVPROC_HPP)(GLuint,const GLfloat *);
static inline void VertexAttrib1fv(GLuint index1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIB1FVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB1FVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib1fv",3,0));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib2f
#define GL_HPP_FUNDEF_VertexAttrib2f
typedef void (*PFNGLVERTEXATTRIB2FPROC_HPP)(GLuint,GLfloat,GLfloat);
static inline void VertexAttrib2f(GLuint index1,GLfloat x1,GLfloat y1)
{
	static PFNGLVERTEXATTRIB2FPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB2FPROC_HPP>(_impl::_get_proc_address("glVertexAttrib2f",3,0));
	 fn(index1,x1,y1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib2fv
#define GL_HPP_FUNDEF_VertexAttrib2fv
typedef void (*PFNGLVERTEXATTRIB2FVPROC_HPP)(GLuint,const GLfloat *);
static inline void VertexAttrib2fv(GLuint index1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIB2FVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB2FVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib2fv",3,0));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib3f
#define GL_HPP_FUNDEF_VertexAttrib3f
typedef void (*PFNGLVERTEXATTRIB3FPROC_HPP)(GLuint,GLfloat,GLfloat,GLfloat);
static inline void VertexAttrib3f(GLuint index1,GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLVERTEXATTRIB3FPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB3FPROC_HPP>(_impl::_get_proc_address("glVertexAttrib3f",3,0));
	 fn(index1,x1,y1,z1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib3fv
#define GL_HPP_FUNDEF_VertexAttrib3fv
typedef void (*PFNGLVERTEXATTRIB3FVPROC_HPP)(GLuint,const GLfloat *);
static inline void VertexAttrib3fv(GLuint index1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIB3FVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB3FVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib3fv",3,0));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4f
#define GL_HPP_FUNDEF_VertexAttrib4f
typedef void (*PFNGLVERTEXATTRIB4FPROC_HPP)(GLuint,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void VertexAttrib4f(GLuint index1,GLfloat x1,GLfloat y1,GLfloat z1,GLfloat w1)
{
	static PFNGLVERTEXATTRIB4FPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4FPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4f",3,0));
	 fn(index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4fv
#define GL_HPP_FUNDEF_VertexAttrib4fv
typedef void (*PFNGLVERTEXATTRIB4FVPROC_HPP)(GLuint,const GLfloat *);
static inline void VertexAttrib4fv(GLuint index1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIB4FVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4FVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4fv",3,0));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribDivisor
#define GL_HPP_FUNDEF_VertexAttribDivisor
typedef void (*PFNGLVERTEXATTRIBDIVISORPROC_HPP)(GLuint,GLuint);
static inline void VertexAttribDivisor(GLuint index1,GLuint divisor1)
{
	static PFNGLVERTEXATTRIBDIVISORPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBDIVISORPROC_HPP>(_impl::_get_proc_address("glVertexAttribDivisor",3,0));
	 fn(index1,divisor1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI4i
#define GL_HPP_FUNDEF_VertexAttribI4i
typedef void (*PFNGLVERTEXATTRIBI4IPROC_HPP)(GLuint,GLint,GLint,GLint,GLint);
static inline void VertexAttribI4i(GLuint index1,GLint x1,GLint y1,GLint z1,GLint w1)
{
	static PFNGLVERTEXATTRIBI4IPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI4IPROC_HPP>(_impl::_get_proc_address("glVertexAttribI4i",3,0));
	 fn(index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI4iv
#define GL_HPP_FUNDEF_VertexAttribI4iv
typedef void (*PFNGLVERTEXATTRIBI4IVPROC_HPP)(GLuint,const GLint *);
static inline void VertexAttribI4iv(GLuint index1,const GLint * v1)
{
	static PFNGLVERTEXATTRIBI4IVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI4IVPROC_HPP>(_impl::_get_proc_address("glVertexAttribI4iv",3,0));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI4ui
#define GL_HPP_FUNDEF_VertexAttribI4ui
typedef void (*PFNGLVERTEXATTRIBI4UIPROC_HPP)(GLuint,GLuint,GLuint,GLuint,GLuint);
static inline void VertexAttribI4ui(GLuint index1,GLuint x1,GLuint y1,GLuint z1,GLuint w1)
{
	static PFNGLVERTEXATTRIBI4UIPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI4UIPROC_HPP>(_impl::_get_proc_address("glVertexAttribI4ui",3,0));
	 fn(index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI4uiv
#define GL_HPP_FUNDEF_VertexAttribI4uiv
typedef void (*PFNGLVERTEXATTRIBI4UIVPROC_HPP)(GLuint,const GLuint *);
static inline void VertexAttribI4uiv(GLuint index1,const GLuint * v1)
{
	static PFNGLVERTEXATTRIBI4UIVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI4UIVPROC_HPP>(_impl::_get_proc_address("glVertexAttribI4uiv",3,0));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribIPointer
#define GL_HPP_FUNDEF_VertexAttribIPointer
typedef void (*PFNGLVERTEXATTRIBIPOINTERPROC_HPP)(GLuint,GLint,GLenum,GLsizei,const void *);
static inline void VertexAttribIPointer(GLuint index1,GLint size1,GLenum type1,GLsizei stride1,const void * pointer1)
{
	static PFNGLVERTEXATTRIBIPOINTERPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBIPOINTERPROC_HPP>(_impl::_get_proc_address("glVertexAttribIPointer",3,0));
	 fn(index1,size1,type1,stride1,pointer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribPointer
#define GL_HPP_FUNDEF_VertexAttribPointer
typedef void (*PFNGLVERTEXATTRIBPOINTERPROC_HPP)(GLuint,GLint,GLenum,GLboolean,GLsizei,const void *);
static inline void VertexAttribPointer(GLuint index1,GLint size1,GLenum type1,GLboolean normalized1,GLsizei stride1,const void * pointer1)
{
	static PFNGLVERTEXATTRIBPOINTERPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBPOINTERPROC_HPP>(_impl::_get_proc_address("glVertexAttribPointer",3,0));
	 fn(index1,size1,type1,normalized1,stride1,pointer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Viewport
#define GL_HPP_FUNDEF_Viewport
typedef void (*PFNGLVIEWPORTPROC_HPP)(GLint,GLint,GLsizei,GLsizei);
static inline void Viewport(GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
	static PFNGLVIEWPORTPROC_HPP fn=reinterpret_cast<PFNGLVIEWPORTPROC_HPP>(_impl::_get_proc_address("glViewport",3,0));
	 fn(x1,y1,width1,height1);
}
#endif

#ifndef	GL_HPP_FUNDEF_WaitSync
#define GL_HPP_FUNDEF_WaitSync
typedef void (*PFNGLWAITSYNCPROC_HPP)(GLsync,GLbitfield,GLuint64);
static inline void WaitSync(GLsync sync1,GLbitfield flags1,GLuint64 timeout1)
{
	static PFNGLWAITSYNCPROC_HPP fn=reinterpret_cast<PFNGLWAITSYNCPROC_HPP>(_impl::_get_proc_address("glWaitSync",3,0));
	 fn(sync1,flags1,timeout1);
}
#endif
}
#endif
