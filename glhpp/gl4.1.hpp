#ifndef GL_HPP_GL_VERSION_4_1_HPP
#define GL_HPP_GL_VERSION_4_1_HPP
#include "common.hpp"


#ifndef GL_HPP_API_NAME
#define GL_HPP_API_NAME GL_HPP_GL_API
#endif
#ifndef GL_HPP_API_VERSION
#define GL_HPP_API_VERSION 409
#endif
#ifndef GL_NO_ERROR
#define GL_NO_ERROR 0
#endif //GL_NO_ERROR
#ifndef GL_ZERO
#define GL_ZERO 0
#endif //GL_ZERO
#ifndef GL_NONE
#define GL_NONE 0
#endif //GL_NONE
#ifndef GL_FALSE
#define GL_FALSE 0
#endif //GL_FALSE
#ifndef GL_POINTS
#define GL_POINTS 0x0000
#endif //GL_POINTS
#ifndef GL_CONTEXT_CORE_PROFILE_BIT
#define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001
#endif //GL_CONTEXT_CORE_PROFILE_BIT
#ifndef GL_VERTEX_SHADER_BIT
#define GL_VERTEX_SHADER_BIT 0x00000001
#endif //GL_VERTEX_SHADER_BIT
#ifndef GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#endif //GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
#ifndef GL_SYNC_FLUSH_COMMANDS_BIT
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#endif //GL_SYNC_FLUSH_COMMANDS_BIT
#ifndef GL_FRAGMENT_SHADER_BIT
#define GL_FRAGMENT_SHADER_BIT 0x00000002
#endif //GL_FRAGMENT_SHADER_BIT
#ifndef GL_CONTEXT_COMPATIBILITY_PROFILE_BIT
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
#endif //GL_CONTEXT_COMPATIBILITY_PROFILE_BIT
#ifndef GL_GEOMETRY_SHADER_BIT
#define GL_GEOMETRY_SHADER_BIT 0x00000004
#endif //GL_GEOMETRY_SHADER_BIT
#ifndef GL_TESS_CONTROL_SHADER_BIT
#define GL_TESS_CONTROL_SHADER_BIT 0x00000008
#endif //GL_TESS_CONTROL_SHADER_BIT
#ifndef GL_TESS_EVALUATION_SHADER_BIT
#define GL_TESS_EVALUATION_SHADER_BIT 0x00000010
#endif //GL_TESS_EVALUATION_SHADER_BIT
#ifndef GL_DEPTH_BUFFER_BIT
#define GL_DEPTH_BUFFER_BIT 0x00000100
#endif //GL_DEPTH_BUFFER_BIT
#ifndef GL_STENCIL_BUFFER_BIT
#define GL_STENCIL_BUFFER_BIT 0x00000400
#endif //GL_STENCIL_BUFFER_BIT
#ifndef GL_COLOR_BUFFER_BIT
#define GL_COLOR_BUFFER_BIT 0x00004000
#endif //GL_COLOR_BUFFER_BIT
#ifndef GL_LINES
#define GL_LINES 0x0001
#endif //GL_LINES
#ifndef GL_MAP_READ_BIT
#define GL_MAP_READ_BIT 0x0001
#endif //GL_MAP_READ_BIT
#ifndef GL_LINE_LOOP
#define GL_LINE_LOOP 0x0002
#endif //GL_LINE_LOOP
#ifndef GL_MAP_WRITE_BIT
#define GL_MAP_WRITE_BIT 0x0002
#endif //GL_MAP_WRITE_BIT
#ifndef GL_LINE_STRIP
#define GL_LINE_STRIP 0x0003
#endif //GL_LINE_STRIP
#ifndef GL_MAP_INVALIDATE_RANGE_BIT
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#endif //GL_MAP_INVALIDATE_RANGE_BIT
#ifndef GL_TRIANGLES
#define GL_TRIANGLES 0x0004
#endif //GL_TRIANGLES
#ifndef GL_TRIANGLE_STRIP
#define GL_TRIANGLE_STRIP 0x0005
#endif //GL_TRIANGLE_STRIP
#ifndef GL_TRIANGLE_FAN
#define GL_TRIANGLE_FAN 0x0006
#endif //GL_TRIANGLE_FAN
#ifndef GL_MAP_INVALIDATE_BUFFER_BIT
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#endif //GL_MAP_INVALIDATE_BUFFER_BIT
#ifndef GL_LINES_ADJACENCY
#define GL_LINES_ADJACENCY 0x000A
#endif //GL_LINES_ADJACENCY
#ifndef GL_LINE_STRIP_ADJACENCY
#define GL_LINE_STRIP_ADJACENCY 0x000B
#endif //GL_LINE_STRIP_ADJACENCY
#ifndef GL_TRIANGLES_ADJACENCY
#define GL_TRIANGLES_ADJACENCY 0x000C
#endif //GL_TRIANGLES_ADJACENCY
#ifndef GL_TRIANGLE_STRIP_ADJACENCY
#define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
#endif //GL_TRIANGLE_STRIP_ADJACENCY
#ifndef GL_PATCHES
#define GL_PATCHES 0x000E
#endif //GL_PATCHES
#ifndef GL_MAP_FLUSH_EXPLICIT_BIT
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#endif //GL_MAP_FLUSH_EXPLICIT_BIT
#ifndef GL_MAP_UNSYNCHRONIZED_BIT
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#endif //GL_MAP_UNSYNCHRONIZED_BIT
#ifndef GL_NEVER
#define GL_NEVER 0x0200
#endif //GL_NEVER
#ifndef GL_LESS
#define GL_LESS 0x0201
#endif //GL_LESS
#ifndef GL_EQUAL
#define GL_EQUAL 0x0202
#endif //GL_EQUAL
#ifndef GL_LEQUAL
#define GL_LEQUAL 0x0203
#endif //GL_LEQUAL
#ifndef GL_GREATER
#define GL_GREATER 0x0204
#endif //GL_GREATER
#ifndef GL_NOTEQUAL
#define GL_NOTEQUAL 0x0205
#endif //GL_NOTEQUAL
#ifndef GL_GEQUAL
#define GL_GEQUAL 0x0206
#endif //GL_GEQUAL
#ifndef GL_ALWAYS
#define GL_ALWAYS 0x0207
#endif //GL_ALWAYS
#ifndef GL_SRC_COLOR
#define GL_SRC_COLOR 0x0300
#endif //GL_SRC_COLOR
#ifndef GL_ONE_MINUS_SRC_COLOR
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#endif //GL_ONE_MINUS_SRC_COLOR
#ifndef GL_SRC_ALPHA
#define GL_SRC_ALPHA 0x0302
#endif //GL_SRC_ALPHA
#ifndef GL_ONE_MINUS_SRC_ALPHA
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#endif //GL_ONE_MINUS_SRC_ALPHA
#ifndef GL_DST_ALPHA
#define GL_DST_ALPHA 0x0304
#endif //GL_DST_ALPHA
#ifndef GL_ONE_MINUS_DST_ALPHA
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#endif //GL_ONE_MINUS_DST_ALPHA
#ifndef GL_DST_COLOR
#define GL_DST_COLOR 0x0306
#endif //GL_DST_COLOR
#ifndef GL_ONE_MINUS_DST_COLOR
#define GL_ONE_MINUS_DST_COLOR 0x0307
#endif //GL_ONE_MINUS_DST_COLOR
#ifndef GL_SRC_ALPHA_SATURATE
#define GL_SRC_ALPHA_SATURATE 0x0308
#endif //GL_SRC_ALPHA_SATURATE
#ifndef GL_FRONT_LEFT
#define GL_FRONT_LEFT 0x0400
#endif //GL_FRONT_LEFT
#ifndef GL_FRONT_RIGHT
#define GL_FRONT_RIGHT 0x0401
#endif //GL_FRONT_RIGHT
#ifndef GL_BACK_LEFT
#define GL_BACK_LEFT 0x0402
#endif //GL_BACK_LEFT
#ifndef GL_BACK_RIGHT
#define GL_BACK_RIGHT 0x0403
#endif //GL_BACK_RIGHT
#ifndef GL_FRONT
#define GL_FRONT 0x0404
#endif //GL_FRONT
#ifndef GL_BACK
#define GL_BACK 0x0405
#endif //GL_BACK
#ifndef GL_LEFT
#define GL_LEFT 0x0406
#endif //GL_LEFT
#ifndef GL_RIGHT
#define GL_RIGHT 0x0407
#endif //GL_RIGHT
#ifndef GL_FRONT_AND_BACK
#define GL_FRONT_AND_BACK 0x0408
#endif //GL_FRONT_AND_BACK
#ifndef GL_INVALID_ENUM
#define GL_INVALID_ENUM 0x0500
#endif //GL_INVALID_ENUM
#ifndef GL_INVALID_VALUE
#define GL_INVALID_VALUE 0x0501
#endif //GL_INVALID_VALUE
#ifndef GL_INVALID_OPERATION
#define GL_INVALID_OPERATION 0x0502
#endif //GL_INVALID_OPERATION
#ifndef GL_OUT_OF_MEMORY
#define GL_OUT_OF_MEMORY 0x0505
#endif //GL_OUT_OF_MEMORY
#ifndef GL_INVALID_FRAMEBUFFER_OPERATION
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#endif //GL_INVALID_FRAMEBUFFER_OPERATION
#ifndef GL_CW
#define GL_CW 0x0900
#endif //GL_CW
#ifndef GL_CCW
#define GL_CCW 0x0901
#endif //GL_CCW
#ifndef GL_POINT_SIZE
#define GL_POINT_SIZE 0x0B11
#endif //GL_POINT_SIZE
#ifndef GL_SMOOTH_POINT_SIZE_RANGE
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#endif //GL_SMOOTH_POINT_SIZE_RANGE
#ifndef GL_POINT_SIZE_RANGE
#define GL_POINT_SIZE_RANGE 0x0B12
#endif //GL_POINT_SIZE_RANGE
#ifndef GL_POINT_SIZE_GRANULARITY
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#endif //GL_POINT_SIZE_GRANULARITY
#ifndef GL_SMOOTH_POINT_SIZE_GRANULARITY
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#endif //GL_SMOOTH_POINT_SIZE_GRANULARITY
#ifndef GL_LINE_SMOOTH
#define GL_LINE_SMOOTH 0x0B20
#endif //GL_LINE_SMOOTH
#ifndef GL_LINE_WIDTH
#define GL_LINE_WIDTH 0x0B21
#endif //GL_LINE_WIDTH
#ifndef GL_SMOOTH_LINE_WIDTH_RANGE
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#endif //GL_SMOOTH_LINE_WIDTH_RANGE
#ifndef GL_LINE_WIDTH_RANGE
#define GL_LINE_WIDTH_RANGE 0x0B22
#endif //GL_LINE_WIDTH_RANGE
#ifndef GL_SMOOTH_LINE_WIDTH_GRANULARITY
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#endif //GL_SMOOTH_LINE_WIDTH_GRANULARITY
#ifndef GL_LINE_WIDTH_GRANULARITY
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#endif //GL_LINE_WIDTH_GRANULARITY
#ifndef GL_POLYGON_MODE
#define GL_POLYGON_MODE 0x0B40
#endif //GL_POLYGON_MODE
#ifndef GL_POLYGON_SMOOTH
#define GL_POLYGON_SMOOTH 0x0B41
#endif //GL_POLYGON_SMOOTH
#ifndef GL_CULL_FACE
#define GL_CULL_FACE 0x0B44
#endif //GL_CULL_FACE
#ifndef GL_CULL_FACE_MODE
#define GL_CULL_FACE_MODE 0x0B45
#endif //GL_CULL_FACE_MODE
#ifndef GL_FRONT_FACE
#define GL_FRONT_FACE 0x0B46
#endif //GL_FRONT_FACE
#ifndef GL_DEPTH_RANGE
#define GL_DEPTH_RANGE 0x0B70
#endif //GL_DEPTH_RANGE
#ifndef GL_DEPTH_TEST
#define GL_DEPTH_TEST 0x0B71
#endif //GL_DEPTH_TEST
#ifndef GL_DEPTH_WRITEMASK
#define GL_DEPTH_WRITEMASK 0x0B72
#endif //GL_DEPTH_WRITEMASK
#ifndef GL_DEPTH_CLEAR_VALUE
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#endif //GL_DEPTH_CLEAR_VALUE
#ifndef GL_DEPTH_FUNC
#define GL_DEPTH_FUNC 0x0B74
#endif //GL_DEPTH_FUNC
#ifndef GL_STENCIL_TEST
#define GL_STENCIL_TEST 0x0B90
#endif //GL_STENCIL_TEST
#ifndef GL_STENCIL_CLEAR_VALUE
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#endif //GL_STENCIL_CLEAR_VALUE
#ifndef GL_STENCIL_FUNC
#define GL_STENCIL_FUNC 0x0B92
#endif //GL_STENCIL_FUNC
#ifndef GL_STENCIL_VALUE_MASK
#define GL_STENCIL_VALUE_MASK 0x0B93
#endif //GL_STENCIL_VALUE_MASK
#ifndef GL_STENCIL_FAIL
#define GL_STENCIL_FAIL 0x0B94
#endif //GL_STENCIL_FAIL
#ifndef GL_STENCIL_PASS_DEPTH_FAIL
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#endif //GL_STENCIL_PASS_DEPTH_FAIL
#ifndef GL_STENCIL_PASS_DEPTH_PASS
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#endif //GL_STENCIL_PASS_DEPTH_PASS
#ifndef GL_STENCIL_REF
#define GL_STENCIL_REF 0x0B97
#endif //GL_STENCIL_REF
#ifndef GL_STENCIL_WRITEMASK
#define GL_STENCIL_WRITEMASK 0x0B98
#endif //GL_STENCIL_WRITEMASK
#ifndef GL_VIEWPORT
#define GL_VIEWPORT 0x0BA2
#endif //GL_VIEWPORT
#ifndef GL_DITHER
#define GL_DITHER 0x0BD0
#endif //GL_DITHER
#ifndef GL_BLEND_DST
#define GL_BLEND_DST 0x0BE0
#endif //GL_BLEND_DST
#ifndef GL_BLEND_SRC
#define GL_BLEND_SRC 0x0BE1
#endif //GL_BLEND_SRC
#ifndef GL_BLEND
#define GL_BLEND 0x0BE2
#endif //GL_BLEND
#ifndef GL_LOGIC_OP_MODE
#define GL_LOGIC_OP_MODE 0x0BF0
#endif //GL_LOGIC_OP_MODE
#ifndef GL_COLOR_LOGIC_OP
#define GL_COLOR_LOGIC_OP 0x0BF2
#endif //GL_COLOR_LOGIC_OP
#ifndef GL_DRAW_BUFFER
#define GL_DRAW_BUFFER 0x0C01
#endif //GL_DRAW_BUFFER
#ifndef GL_READ_BUFFER
#define GL_READ_BUFFER 0x0C02
#endif //GL_READ_BUFFER
#ifndef GL_SCISSOR_BOX
#define GL_SCISSOR_BOX 0x0C10
#endif //GL_SCISSOR_BOX
#ifndef GL_SCISSOR_TEST
#define GL_SCISSOR_TEST 0x0C11
#endif //GL_SCISSOR_TEST
#ifndef GL_COLOR_CLEAR_VALUE
#define GL_COLOR_CLEAR_VALUE 0x0C22
#endif //GL_COLOR_CLEAR_VALUE
#ifndef GL_COLOR_WRITEMASK
#define GL_COLOR_WRITEMASK 0x0C23
#endif //GL_COLOR_WRITEMASK
#ifndef GL_DOUBLEBUFFER
#define GL_DOUBLEBUFFER 0x0C32
#endif //GL_DOUBLEBUFFER
#ifndef GL_STEREO
#define GL_STEREO 0x0C33
#endif //GL_STEREO
#ifndef GL_LINE_SMOOTH_HINT
#define GL_LINE_SMOOTH_HINT 0x0C52
#endif //GL_LINE_SMOOTH_HINT
#ifndef GL_POLYGON_SMOOTH_HINT
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#endif //GL_POLYGON_SMOOTH_HINT
#ifndef GL_UNPACK_SWAP_BYTES
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#endif //GL_UNPACK_SWAP_BYTES
#ifndef GL_UNPACK_LSB_FIRST
#define GL_UNPACK_LSB_FIRST 0x0CF1
#endif //GL_UNPACK_LSB_FIRST
#ifndef GL_UNPACK_ROW_LENGTH
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#endif //GL_UNPACK_ROW_LENGTH
#ifndef GL_UNPACK_SKIP_ROWS
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#endif //GL_UNPACK_SKIP_ROWS
#ifndef GL_UNPACK_SKIP_PIXELS
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#endif //GL_UNPACK_SKIP_PIXELS
#ifndef GL_UNPACK_ALIGNMENT
#define GL_UNPACK_ALIGNMENT 0x0CF5
#endif //GL_UNPACK_ALIGNMENT
#ifndef GL_PACK_SWAP_BYTES
#define GL_PACK_SWAP_BYTES 0x0D00
#endif //GL_PACK_SWAP_BYTES
#ifndef GL_PACK_LSB_FIRST
#define GL_PACK_LSB_FIRST 0x0D01
#endif //GL_PACK_LSB_FIRST
#ifndef GL_PACK_ROW_LENGTH
#define GL_PACK_ROW_LENGTH 0x0D02
#endif //GL_PACK_ROW_LENGTH
#ifndef GL_PACK_SKIP_ROWS
#define GL_PACK_SKIP_ROWS 0x0D03
#endif //GL_PACK_SKIP_ROWS
#ifndef GL_PACK_SKIP_PIXELS
#define GL_PACK_SKIP_PIXELS 0x0D04
#endif //GL_PACK_SKIP_PIXELS
#ifndef GL_PACK_ALIGNMENT
#define GL_PACK_ALIGNMENT 0x0D05
#endif //GL_PACK_ALIGNMENT
#ifndef GL_MAX_CLIP_DISTANCES
#define GL_MAX_CLIP_DISTANCES 0x0D32
#endif //GL_MAX_CLIP_DISTANCES
#ifndef GL_MAX_TEXTURE_SIZE
#define GL_MAX_TEXTURE_SIZE 0x0D33
#endif //GL_MAX_TEXTURE_SIZE
#ifndef GL_MAX_VIEWPORT_DIMS
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#endif //GL_MAX_VIEWPORT_DIMS
#ifndef GL_SUBPIXEL_BITS
#define GL_SUBPIXEL_BITS 0x0D50
#endif //GL_SUBPIXEL_BITS
#ifndef GL_TEXTURE_1D
#define GL_TEXTURE_1D 0x0DE0
#endif //GL_TEXTURE_1D
#ifndef GL_TEXTURE_2D
#define GL_TEXTURE_2D 0x0DE1
#endif //GL_TEXTURE_2D
#ifndef GL_TEXTURE_WIDTH
#define GL_TEXTURE_WIDTH 0x1000
#endif //GL_TEXTURE_WIDTH
#ifndef GL_TEXTURE_HEIGHT
#define GL_TEXTURE_HEIGHT 0x1001
#endif //GL_TEXTURE_HEIGHT
#ifndef GL_TEXTURE_INTERNAL_FORMAT
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#endif //GL_TEXTURE_INTERNAL_FORMAT
#ifndef GL_TEXTURE_BORDER_COLOR
#define GL_TEXTURE_BORDER_COLOR 0x1004
#endif //GL_TEXTURE_BORDER_COLOR
#ifndef GL_DONT_CARE
#define GL_DONT_CARE 0x1100
#endif //GL_DONT_CARE
#ifndef GL_FASTEST
#define GL_FASTEST 0x1101
#endif //GL_FASTEST
#ifndef GL_NICEST
#define GL_NICEST 0x1102
#endif //GL_NICEST
#ifndef GL_BYTE
#define GL_BYTE 0x1400
#endif //GL_BYTE
#ifndef GL_UNSIGNED_BYTE
#define GL_UNSIGNED_BYTE 0x1401
#endif //GL_UNSIGNED_BYTE
#ifndef GL_SHORT
#define GL_SHORT 0x1402
#endif //GL_SHORT
#ifndef GL_UNSIGNED_SHORT
#define GL_UNSIGNED_SHORT 0x1403
#endif //GL_UNSIGNED_SHORT
#ifndef GL_INT
#define GL_INT 0x1404
#endif //GL_INT
#ifndef GL_UNSIGNED_INT
#define GL_UNSIGNED_INT 0x1405
#endif //GL_UNSIGNED_INT
#ifndef GL_FLOAT
#define GL_FLOAT 0x1406
#endif //GL_FLOAT
#ifndef GL_DOUBLE
#define GL_DOUBLE 0x140A
#endif //GL_DOUBLE
#ifndef GL_HALF_FLOAT
#define GL_HALF_FLOAT 0x140B
#endif //GL_HALF_FLOAT
#ifndef GL_FIXED
#define GL_FIXED 0x140C
#endif //GL_FIXED
#ifndef GL_CLEAR
#define GL_CLEAR 0x1500
#endif //GL_CLEAR
#ifndef GL_AND
#define GL_AND 0x1501
#endif //GL_AND
#ifndef GL_AND_REVERSE
#define GL_AND_REVERSE 0x1502
#endif //GL_AND_REVERSE
#ifndef GL_COPY
#define GL_COPY 0x1503
#endif //GL_COPY
#ifndef GL_AND_INVERTED
#define GL_AND_INVERTED 0x1504
#endif //GL_AND_INVERTED
#ifndef GL_NOOP
#define GL_NOOP 0x1505
#endif //GL_NOOP
#ifndef GL_XOR
#define GL_XOR 0x1506
#endif //GL_XOR
#ifndef GL_OR
#define GL_OR 0x1507
#endif //GL_OR
#ifndef GL_NOR
#define GL_NOR 0x1508
#endif //GL_NOR
#ifndef GL_EQUIV
#define GL_EQUIV 0x1509
#endif //GL_EQUIV
#ifndef GL_INVERT
#define GL_INVERT 0x150A
#endif //GL_INVERT
#ifndef GL_OR_REVERSE
#define GL_OR_REVERSE 0x150B
#endif //GL_OR_REVERSE
#ifndef GL_COPY_INVERTED
#define GL_COPY_INVERTED 0x150C
#endif //GL_COPY_INVERTED
#ifndef GL_OR_INVERTED
#define GL_OR_INVERTED 0x150D
#endif //GL_OR_INVERTED
#ifndef GL_NAND
#define GL_NAND 0x150E
#endif //GL_NAND
#ifndef GL_SET
#define GL_SET 0x150F
#endif //GL_SET
#ifndef GL_TEXTURE
#define GL_TEXTURE 0x1702
#endif //GL_TEXTURE
#ifndef GL_COLOR
#define GL_COLOR 0x1800
#endif //GL_COLOR
#ifndef GL_DEPTH
#define GL_DEPTH 0x1801
#endif //GL_DEPTH
#ifndef GL_STENCIL
#define GL_STENCIL 0x1802
#endif //GL_STENCIL
#ifndef GL_STENCIL_INDEX
#define GL_STENCIL_INDEX 0x1901
#endif //GL_STENCIL_INDEX
#ifndef GL_DEPTH_COMPONENT
#define GL_DEPTH_COMPONENT 0x1902
#endif //GL_DEPTH_COMPONENT
#ifndef GL_RED
#define GL_RED 0x1903
#endif //GL_RED
#ifndef GL_GREEN
#define GL_GREEN 0x1904
#endif //GL_GREEN
#ifndef GL_BLUE
#define GL_BLUE 0x1905
#endif //GL_BLUE
#ifndef GL_ALPHA
#define GL_ALPHA 0x1906
#endif //GL_ALPHA
#ifndef GL_RGB
#define GL_RGB 0x1907
#endif //GL_RGB
#ifndef GL_RGBA
#define GL_RGBA 0x1908
#endif //GL_RGBA
#ifndef GL_POINT
#define GL_POINT 0x1B00
#endif //GL_POINT
#ifndef GL_LINE
#define GL_LINE 0x1B01
#endif //GL_LINE
#ifndef GL_FILL
#define GL_FILL 0x1B02
#endif //GL_FILL
#ifndef GL_KEEP
#define GL_KEEP 0x1E00
#endif //GL_KEEP
#ifndef GL_REPLACE
#define GL_REPLACE 0x1E01
#endif //GL_REPLACE
#ifndef GL_INCR
#define GL_INCR 0x1E02
#endif //GL_INCR
#ifndef GL_DECR
#define GL_DECR 0x1E03
#endif //GL_DECR
#ifndef GL_VENDOR
#define GL_VENDOR 0x1F00
#endif //GL_VENDOR
#ifndef GL_RENDERER
#define GL_RENDERER 0x1F01
#endif //GL_RENDERER
#ifndef GL_VERSION
#define GL_VERSION 0x1F02
#endif //GL_VERSION
#ifndef GL_EXTENSIONS
#define GL_EXTENSIONS 0x1F03
#endif //GL_EXTENSIONS
#ifndef GL_NEAREST
#define GL_NEAREST 0x2600
#endif //GL_NEAREST
#ifndef GL_LINEAR
#define GL_LINEAR 0x2601
#endif //GL_LINEAR
#ifndef GL_NEAREST_MIPMAP_NEAREST
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#endif //GL_NEAREST_MIPMAP_NEAREST
#ifndef GL_LINEAR_MIPMAP_NEAREST
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#endif //GL_LINEAR_MIPMAP_NEAREST
#ifndef GL_NEAREST_MIPMAP_LINEAR
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#endif //GL_NEAREST_MIPMAP_LINEAR
#ifndef GL_LINEAR_MIPMAP_LINEAR
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#endif //GL_LINEAR_MIPMAP_LINEAR
#ifndef GL_TEXTURE_MAG_FILTER
#define GL_TEXTURE_MAG_FILTER 0x2800
#endif //GL_TEXTURE_MAG_FILTER
#ifndef GL_TEXTURE_MIN_FILTER
#define GL_TEXTURE_MIN_FILTER 0x2801
#endif //GL_TEXTURE_MIN_FILTER
#ifndef GL_TEXTURE_WRAP_S
#define GL_TEXTURE_WRAP_S 0x2802
#endif //GL_TEXTURE_WRAP_S
#ifndef GL_TEXTURE_WRAP_T
#define GL_TEXTURE_WRAP_T 0x2803
#endif //GL_TEXTURE_WRAP_T
#ifndef GL_REPEAT
#define GL_REPEAT 0x2901
#endif //GL_REPEAT
#ifndef GL_POLYGON_OFFSET_UNITS
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#endif //GL_POLYGON_OFFSET_UNITS
#ifndef GL_POLYGON_OFFSET_POINT
#define GL_POLYGON_OFFSET_POINT 0x2A01
#endif //GL_POLYGON_OFFSET_POINT
#ifndef GL_POLYGON_OFFSET_LINE
#define GL_POLYGON_OFFSET_LINE 0x2A02
#endif //GL_POLYGON_OFFSET_LINE
#ifndef GL_R3_G3_B2
#define GL_R3_G3_B2 0x2A10
#endif //GL_R3_G3_B2
#ifndef GL_CLIP_DISTANCE0
#define GL_CLIP_DISTANCE0 0x3000
#endif //GL_CLIP_DISTANCE0
#ifndef GL_CLIP_DISTANCE1
#define GL_CLIP_DISTANCE1 0x3001
#endif //GL_CLIP_DISTANCE1
#ifndef GL_CLIP_DISTANCE2
#define GL_CLIP_DISTANCE2 0x3002
#endif //GL_CLIP_DISTANCE2
#ifndef GL_CLIP_DISTANCE3
#define GL_CLIP_DISTANCE3 0x3003
#endif //GL_CLIP_DISTANCE3
#ifndef GL_CLIP_DISTANCE4
#define GL_CLIP_DISTANCE4 0x3004
#endif //GL_CLIP_DISTANCE4
#ifndef GL_CLIP_DISTANCE5
#define GL_CLIP_DISTANCE5 0x3005
#endif //GL_CLIP_DISTANCE5
#ifndef GL_CLIP_DISTANCE6
#define GL_CLIP_DISTANCE6 0x3006
#endif //GL_CLIP_DISTANCE6
#ifndef GL_CLIP_DISTANCE7
#define GL_CLIP_DISTANCE7 0x3007
#endif //GL_CLIP_DISTANCE7
#ifndef GL_CONSTANT_COLOR
#define GL_CONSTANT_COLOR 0x8001
#endif //GL_CONSTANT_COLOR
#ifndef GL_ONE_MINUS_CONSTANT_COLOR
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#endif //GL_ONE_MINUS_CONSTANT_COLOR
#ifndef GL_CONSTANT_ALPHA
#define GL_CONSTANT_ALPHA 0x8003
#endif //GL_CONSTANT_ALPHA
#ifndef GL_ONE_MINUS_CONSTANT_ALPHA
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#endif //GL_ONE_MINUS_CONSTANT_ALPHA
#ifndef GL_FUNC_ADD
#define GL_FUNC_ADD 0x8006
#endif //GL_FUNC_ADD
#ifndef GL_MIN
#define GL_MIN 0x8007
#endif //GL_MIN
#ifndef GL_MAX
#define GL_MAX 0x8008
#endif //GL_MAX
#ifndef GL_BLEND_EQUATION_RGB
#define GL_BLEND_EQUATION_RGB 0x8009
#endif //GL_BLEND_EQUATION_RGB
#ifndef GL_FUNC_SUBTRACT
#define GL_FUNC_SUBTRACT 0x800A
#endif //GL_FUNC_SUBTRACT
#ifndef GL_FUNC_REVERSE_SUBTRACT
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#endif //GL_FUNC_REVERSE_SUBTRACT
#ifndef GL_UNSIGNED_BYTE_3_3_2
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#endif //GL_UNSIGNED_BYTE_3_3_2
#ifndef GL_UNSIGNED_SHORT_4_4_4_4
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#endif //GL_UNSIGNED_SHORT_4_4_4_4
#ifndef GL_UNSIGNED_SHORT_5_5_5_1
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#endif //GL_UNSIGNED_SHORT_5_5_5_1
#ifndef GL_UNSIGNED_INT_8_8_8_8
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#endif //GL_UNSIGNED_INT_8_8_8_8
#ifndef GL_UNSIGNED_INT_10_10_10_2
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#endif //GL_UNSIGNED_INT_10_10_10_2
#ifndef GL_POLYGON_OFFSET_FILL
#define GL_POLYGON_OFFSET_FILL 0x8037
#endif //GL_POLYGON_OFFSET_FILL
#ifndef GL_POLYGON_OFFSET_FACTOR
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#endif //GL_POLYGON_OFFSET_FACTOR
#ifndef GL_RGB4
#define GL_RGB4 0x804F
#endif //GL_RGB4
#ifndef GL_RGB5
#define GL_RGB5 0x8050
#endif //GL_RGB5
#ifndef GL_RGB8
#define GL_RGB8 0x8051
#endif //GL_RGB8
#ifndef GL_RGB10
#define GL_RGB10 0x8052
#endif //GL_RGB10
#ifndef GL_RGB12
#define GL_RGB12 0x8053
#endif //GL_RGB12
#ifndef GL_RGB16
#define GL_RGB16 0x8054
#endif //GL_RGB16
#ifndef GL_RGBA2
#define GL_RGBA2 0x8055
#endif //GL_RGBA2
#ifndef GL_RGBA4
#define GL_RGBA4 0x8056
#endif //GL_RGBA4
#ifndef GL_RGB5_A1
#define GL_RGB5_A1 0x8057
#endif //GL_RGB5_A1
#ifndef GL_RGBA8
#define GL_RGBA8 0x8058
#endif //GL_RGBA8
#ifndef GL_RGB10_A2
#define GL_RGB10_A2 0x8059
#endif //GL_RGB10_A2
#ifndef GL_RGBA12
#define GL_RGBA12 0x805A
#endif //GL_RGBA12
#ifndef GL_RGBA16
#define GL_RGBA16 0x805B
#endif //GL_RGBA16
#ifndef GL_TEXTURE_RED_SIZE
#define GL_TEXTURE_RED_SIZE 0x805C
#endif //GL_TEXTURE_RED_SIZE
#ifndef GL_TEXTURE_GREEN_SIZE
#define GL_TEXTURE_GREEN_SIZE 0x805D
#endif //GL_TEXTURE_GREEN_SIZE
#ifndef GL_TEXTURE_BLUE_SIZE
#define GL_TEXTURE_BLUE_SIZE 0x805E
#endif //GL_TEXTURE_BLUE_SIZE
#ifndef GL_TEXTURE_ALPHA_SIZE
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#endif //GL_TEXTURE_ALPHA_SIZE
#ifndef GL_PROXY_TEXTURE_1D
#define GL_PROXY_TEXTURE_1D 0x8063
#endif //GL_PROXY_TEXTURE_1D
#ifndef GL_PROXY_TEXTURE_2D
#define GL_PROXY_TEXTURE_2D 0x8064
#endif //GL_PROXY_TEXTURE_2D
#ifndef GL_TEXTURE_BINDING_1D
#define GL_TEXTURE_BINDING_1D 0x8068
#endif //GL_TEXTURE_BINDING_1D
#ifndef GL_TEXTURE_BINDING_2D
#define GL_TEXTURE_BINDING_2D 0x8069
#endif //GL_TEXTURE_BINDING_2D
#ifndef GL_TEXTURE_BINDING_3D
#define GL_TEXTURE_BINDING_3D 0x806A
#endif //GL_TEXTURE_BINDING_3D
#ifndef GL_PACK_SKIP_IMAGES
#define GL_PACK_SKIP_IMAGES 0x806B
#endif //GL_PACK_SKIP_IMAGES
#ifndef GL_PACK_IMAGE_HEIGHT
#define GL_PACK_IMAGE_HEIGHT 0x806C
#endif //GL_PACK_IMAGE_HEIGHT
#ifndef GL_UNPACK_SKIP_IMAGES
#define GL_UNPACK_SKIP_IMAGES 0x806D
#endif //GL_UNPACK_SKIP_IMAGES
#ifndef GL_UNPACK_IMAGE_HEIGHT
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#endif //GL_UNPACK_IMAGE_HEIGHT
#ifndef GL_TEXTURE_3D
#define GL_TEXTURE_3D 0x806F
#endif //GL_TEXTURE_3D
#ifndef GL_PROXY_TEXTURE_3D
#define GL_PROXY_TEXTURE_3D 0x8070
#endif //GL_PROXY_TEXTURE_3D
#ifndef GL_TEXTURE_DEPTH
#define GL_TEXTURE_DEPTH 0x8071
#endif //GL_TEXTURE_DEPTH
#ifndef GL_TEXTURE_WRAP_R
#define GL_TEXTURE_WRAP_R 0x8072
#endif //GL_TEXTURE_WRAP_R
#ifndef GL_MAX_3D_TEXTURE_SIZE
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#endif //GL_MAX_3D_TEXTURE_SIZE
#ifndef GL_MULTISAMPLE
#define GL_MULTISAMPLE 0x809D
#endif //GL_MULTISAMPLE
#ifndef GL_SAMPLE_ALPHA_TO_COVERAGE
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#endif //GL_SAMPLE_ALPHA_TO_COVERAGE
#ifndef GL_SAMPLE_ALPHA_TO_ONE
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#endif //GL_SAMPLE_ALPHA_TO_ONE
#ifndef GL_SAMPLE_COVERAGE
#define GL_SAMPLE_COVERAGE 0x80A0
#endif //GL_SAMPLE_COVERAGE
#ifndef GL_SAMPLE_BUFFERS
#define GL_SAMPLE_BUFFERS 0x80A8
#endif //GL_SAMPLE_BUFFERS
#ifndef GL_SAMPLES
#define GL_SAMPLES 0x80A9
#endif //GL_SAMPLES
#ifndef GL_SAMPLE_COVERAGE_VALUE
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#endif //GL_SAMPLE_COVERAGE_VALUE
#ifndef GL_SAMPLE_COVERAGE_INVERT
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#endif //GL_SAMPLE_COVERAGE_INVERT
#ifndef GL_BLEND_DST_RGB
#define GL_BLEND_DST_RGB 0x80C8
#endif //GL_BLEND_DST_RGB
#ifndef GL_BLEND_SRC_RGB
#define GL_BLEND_SRC_RGB 0x80C9
#endif //GL_BLEND_SRC_RGB
#ifndef GL_BLEND_DST_ALPHA
#define GL_BLEND_DST_ALPHA 0x80CA
#endif //GL_BLEND_DST_ALPHA
#ifndef GL_BLEND_SRC_ALPHA
#define GL_BLEND_SRC_ALPHA 0x80CB
#endif //GL_BLEND_SRC_ALPHA
#ifndef GL_BGR
#define GL_BGR 0x80E0
#endif //GL_BGR
#ifndef GL_BGRA
#define GL_BGRA 0x80E1
#endif //GL_BGRA
#ifndef GL_MAX_ELEMENTS_VERTICES
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#endif //GL_MAX_ELEMENTS_VERTICES
#ifndef GL_MAX_ELEMENTS_INDICES
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#endif //GL_MAX_ELEMENTS_INDICES
#ifndef GL_POINT_FADE_THRESHOLD_SIZE
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#endif //GL_POINT_FADE_THRESHOLD_SIZE
#ifndef GL_CLAMP_TO_BORDER
#define GL_CLAMP_TO_BORDER 0x812D
#endif //GL_CLAMP_TO_BORDER
#ifndef GL_CLAMP_TO_EDGE
#define GL_CLAMP_TO_EDGE 0x812F
#endif //GL_CLAMP_TO_EDGE
#ifndef GL_TEXTURE_MIN_LOD
#define GL_TEXTURE_MIN_LOD 0x813A
#endif //GL_TEXTURE_MIN_LOD
#ifndef GL_TEXTURE_MAX_LOD
#define GL_TEXTURE_MAX_LOD 0x813B
#endif //GL_TEXTURE_MAX_LOD
#ifndef GL_TEXTURE_BASE_LEVEL
#define GL_TEXTURE_BASE_LEVEL 0x813C
#endif //GL_TEXTURE_BASE_LEVEL
#ifndef GL_TEXTURE_MAX_LEVEL
#define GL_TEXTURE_MAX_LEVEL 0x813D
#endif //GL_TEXTURE_MAX_LEVEL
#ifndef GL_DEPTH_COMPONENT16
#define GL_DEPTH_COMPONENT16 0x81A5
#endif //GL_DEPTH_COMPONENT16
#ifndef GL_DEPTH_COMPONENT24
#define GL_DEPTH_COMPONENT24 0x81A6
#endif //GL_DEPTH_COMPONENT24
#ifndef GL_DEPTH_COMPONENT32
#define GL_DEPTH_COMPONENT32 0x81A7
#endif //GL_DEPTH_COMPONENT32
#ifndef GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#endif //GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
#ifndef GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#endif //GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#endif //GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#endif //GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#endif //GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#endif //GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#endif //GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#endif //GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
#ifndef GL_FRAMEBUFFER_DEFAULT
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#endif //GL_FRAMEBUFFER_DEFAULT
#ifndef GL_FRAMEBUFFER_UNDEFINED
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#endif //GL_FRAMEBUFFER_UNDEFINED
#ifndef GL_DEPTH_STENCIL_ATTACHMENT
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#endif //GL_DEPTH_STENCIL_ATTACHMENT
#ifndef GL_MAJOR_VERSION
#define GL_MAJOR_VERSION 0x821B
#endif //GL_MAJOR_VERSION
#ifndef GL_MINOR_VERSION
#define GL_MINOR_VERSION 0x821C
#endif //GL_MINOR_VERSION
#ifndef GL_NUM_EXTENSIONS
#define GL_NUM_EXTENSIONS 0x821D
#endif //GL_NUM_EXTENSIONS
#ifndef GL_CONTEXT_FLAGS
#define GL_CONTEXT_FLAGS 0x821E
#endif //GL_CONTEXT_FLAGS
#ifndef GL_COMPRESSED_RED
#define GL_COMPRESSED_RED 0x8225
#endif //GL_COMPRESSED_RED
#ifndef GL_COMPRESSED_RG
#define GL_COMPRESSED_RG 0x8226
#endif //GL_COMPRESSED_RG
#ifndef GL_RG
#define GL_RG 0x8227
#endif //GL_RG
#ifndef GL_RG_INTEGER
#define GL_RG_INTEGER 0x8228
#endif //GL_RG_INTEGER
#ifndef GL_R8
#define GL_R8 0x8229
#endif //GL_R8
#ifndef GL_R16
#define GL_R16 0x822A
#endif //GL_R16
#ifndef GL_RG8
#define GL_RG8 0x822B
#endif //GL_RG8
#ifndef GL_RG16
#define GL_RG16 0x822C
#endif //GL_RG16
#ifndef GL_R16F
#define GL_R16F 0x822D
#endif //GL_R16F
#ifndef GL_R32F
#define GL_R32F 0x822E
#endif //GL_R32F
#ifndef GL_RG16F
#define GL_RG16F 0x822F
#endif //GL_RG16F
#ifndef GL_RG32F
#define GL_RG32F 0x8230
#endif //GL_RG32F
#ifndef GL_R8I
#define GL_R8I 0x8231
#endif //GL_R8I
#ifndef GL_R8UI
#define GL_R8UI 0x8232
#endif //GL_R8UI
#ifndef GL_R16I
#define GL_R16I 0x8233
#endif //GL_R16I
#ifndef GL_R16UI
#define GL_R16UI 0x8234
#endif //GL_R16UI
#ifndef GL_R32I
#define GL_R32I 0x8235
#endif //GL_R32I
#ifndef GL_R32UI
#define GL_R32UI 0x8236
#endif //GL_R32UI
#ifndef GL_RG8I
#define GL_RG8I 0x8237
#endif //GL_RG8I
#ifndef GL_RG8UI
#define GL_RG8UI 0x8238
#endif //GL_RG8UI
#ifndef GL_RG16I
#define GL_RG16I 0x8239
#endif //GL_RG16I
#ifndef GL_RG16UI
#define GL_RG16UI 0x823A
#endif //GL_RG16UI
#ifndef GL_RG32I
#define GL_RG32I 0x823B
#endif //GL_RG32I
#ifndef GL_RG32UI
#define GL_RG32UI 0x823C
#endif //GL_RG32UI
#ifndef GL_PROGRAM_BINARY_RETRIEVABLE_HINT
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#endif //GL_PROGRAM_BINARY_RETRIEVABLE_HINT
#ifndef GL_PROGRAM_SEPARABLE
#define GL_PROGRAM_SEPARABLE 0x8258
#endif //GL_PROGRAM_SEPARABLE
#ifndef GL_ACTIVE_PROGRAM
#define GL_ACTIVE_PROGRAM 0x8259
#endif //GL_ACTIVE_PROGRAM
#ifndef GL_PROGRAM_PIPELINE_BINDING
#define GL_PROGRAM_PIPELINE_BINDING 0x825A
#endif //GL_PROGRAM_PIPELINE_BINDING
#ifndef GL_MAX_VIEWPORTS
#define GL_MAX_VIEWPORTS 0x825B
#endif //GL_MAX_VIEWPORTS
#ifndef GL_VIEWPORT_SUBPIXEL_BITS
#define GL_VIEWPORT_SUBPIXEL_BITS 0x825C
#endif //GL_VIEWPORT_SUBPIXEL_BITS
#ifndef GL_VIEWPORT_BOUNDS_RANGE
#define GL_VIEWPORT_BOUNDS_RANGE 0x825D
#endif //GL_VIEWPORT_BOUNDS_RANGE
#ifndef GL_LAYER_PROVOKING_VERTEX
#define GL_LAYER_PROVOKING_VERTEX 0x825E
#endif //GL_LAYER_PROVOKING_VERTEX
#ifndef GL_VIEWPORT_INDEX_PROVOKING_VERTEX
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
#endif //GL_VIEWPORT_INDEX_PROVOKING_VERTEX
#ifndef GL_UNDEFINED_VERTEX
#define GL_UNDEFINED_VERTEX 0x8260
#endif //GL_UNDEFINED_VERTEX
#ifndef GL_UNSIGNED_BYTE_2_3_3_REV
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#endif //GL_UNSIGNED_BYTE_2_3_3_REV
#ifndef GL_UNSIGNED_SHORT_5_6_5
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#endif //GL_UNSIGNED_SHORT_5_6_5
#ifndef GL_UNSIGNED_SHORT_5_6_5_REV
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#endif //GL_UNSIGNED_SHORT_5_6_5_REV
#ifndef GL_UNSIGNED_SHORT_4_4_4_4_REV
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#endif //GL_UNSIGNED_SHORT_4_4_4_4_REV
#ifndef GL_UNSIGNED_SHORT_1_5_5_5_REV
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#endif //GL_UNSIGNED_SHORT_1_5_5_5_REV
#ifndef GL_UNSIGNED_INT_8_8_8_8_REV
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#endif //GL_UNSIGNED_INT_8_8_8_8_REV
#ifndef GL_UNSIGNED_INT_2_10_10_10_REV
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#endif //GL_UNSIGNED_INT_2_10_10_10_REV
#ifndef GL_MIRRORED_REPEAT
#define GL_MIRRORED_REPEAT 0x8370
#endif //GL_MIRRORED_REPEAT
#ifndef GL_ALIASED_LINE_WIDTH_RANGE
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#endif //GL_ALIASED_LINE_WIDTH_RANGE
#ifndef GL_TEXTURE0
#define GL_TEXTURE0 0x84C0
#endif //GL_TEXTURE0
#ifndef GL_TEXTURE1
#define GL_TEXTURE1 0x84C1
#endif //GL_TEXTURE1
#ifndef GL_TEXTURE2
#define GL_TEXTURE2 0x84C2
#endif //GL_TEXTURE2
#ifndef GL_TEXTURE3
#define GL_TEXTURE3 0x84C3
#endif //GL_TEXTURE3
#ifndef GL_TEXTURE4
#define GL_TEXTURE4 0x84C4
#endif //GL_TEXTURE4
#ifndef GL_TEXTURE5
#define GL_TEXTURE5 0x84C5
#endif //GL_TEXTURE5
#ifndef GL_TEXTURE6
#define GL_TEXTURE6 0x84C6
#endif //GL_TEXTURE6
#ifndef GL_TEXTURE7
#define GL_TEXTURE7 0x84C7
#endif //GL_TEXTURE7
#ifndef GL_TEXTURE8
#define GL_TEXTURE8 0x84C8
#endif //GL_TEXTURE8
#ifndef GL_TEXTURE9
#define GL_TEXTURE9 0x84C9
#endif //GL_TEXTURE9
#ifndef GL_TEXTURE10
#define GL_TEXTURE10 0x84CA
#endif //GL_TEXTURE10
#ifndef GL_TEXTURE11
#define GL_TEXTURE11 0x84CB
#endif //GL_TEXTURE11
#ifndef GL_TEXTURE12
#define GL_TEXTURE12 0x84CC
#endif //GL_TEXTURE12
#ifndef GL_TEXTURE13
#define GL_TEXTURE13 0x84CD
#endif //GL_TEXTURE13
#ifndef GL_TEXTURE14
#define GL_TEXTURE14 0x84CE
#endif //GL_TEXTURE14
#ifndef GL_TEXTURE15
#define GL_TEXTURE15 0x84CF
#endif //GL_TEXTURE15
#ifndef GL_TEXTURE16
#define GL_TEXTURE16 0x84D0
#endif //GL_TEXTURE16
#ifndef GL_TEXTURE17
#define GL_TEXTURE17 0x84D1
#endif //GL_TEXTURE17
#ifndef GL_TEXTURE18
#define GL_TEXTURE18 0x84D2
#endif //GL_TEXTURE18
#ifndef GL_TEXTURE19
#define GL_TEXTURE19 0x84D3
#endif //GL_TEXTURE19
#ifndef GL_TEXTURE20
#define GL_TEXTURE20 0x84D4
#endif //GL_TEXTURE20
#ifndef GL_TEXTURE21
#define GL_TEXTURE21 0x84D5
#endif //GL_TEXTURE21
#ifndef GL_TEXTURE22
#define GL_TEXTURE22 0x84D6
#endif //GL_TEXTURE22
#ifndef GL_TEXTURE23
#define GL_TEXTURE23 0x84D7
#endif //GL_TEXTURE23
#ifndef GL_TEXTURE24
#define GL_TEXTURE24 0x84D8
#endif //GL_TEXTURE24
#ifndef GL_TEXTURE25
#define GL_TEXTURE25 0x84D9
#endif //GL_TEXTURE25
#ifndef GL_TEXTURE26
#define GL_TEXTURE26 0x84DA
#endif //GL_TEXTURE26
#ifndef GL_TEXTURE27
#define GL_TEXTURE27 0x84DB
#endif //GL_TEXTURE27
#ifndef GL_TEXTURE28
#define GL_TEXTURE28 0x84DC
#endif //GL_TEXTURE28
#ifndef GL_TEXTURE29
#define GL_TEXTURE29 0x84DD
#endif //GL_TEXTURE29
#ifndef GL_TEXTURE30
#define GL_TEXTURE30 0x84DE
#endif //GL_TEXTURE30
#ifndef GL_TEXTURE31
#define GL_TEXTURE31 0x84DF
#endif //GL_TEXTURE31
#ifndef GL_ACTIVE_TEXTURE
#define GL_ACTIVE_TEXTURE 0x84E0
#endif //GL_ACTIVE_TEXTURE
#ifndef GL_MAX_RENDERBUFFER_SIZE
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#endif //GL_MAX_RENDERBUFFER_SIZE
#ifndef GL_COMPRESSED_RGB
#define GL_COMPRESSED_RGB 0x84ED
#endif //GL_COMPRESSED_RGB
#ifndef GL_COMPRESSED_RGBA
#define GL_COMPRESSED_RGBA 0x84EE
#endif //GL_COMPRESSED_RGBA
#ifndef GL_TEXTURE_COMPRESSION_HINT
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#endif //GL_TEXTURE_COMPRESSION_HINT
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
#endif //GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
#endif //GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER
#ifndef GL_TEXTURE_RECTANGLE
#define GL_TEXTURE_RECTANGLE 0x84F5
#endif //GL_TEXTURE_RECTANGLE
#ifndef GL_TEXTURE_BINDING_RECTANGLE
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#endif //GL_TEXTURE_BINDING_RECTANGLE
#ifndef GL_PROXY_TEXTURE_RECTANGLE
#define GL_PROXY_TEXTURE_RECTANGLE 0x84F7
#endif //GL_PROXY_TEXTURE_RECTANGLE
#ifndef GL_MAX_RECTANGLE_TEXTURE_SIZE
#define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8
#endif //GL_MAX_RECTANGLE_TEXTURE_SIZE
#ifndef GL_DEPTH_STENCIL
#define GL_DEPTH_STENCIL 0x84F9
#endif //GL_DEPTH_STENCIL
#ifndef GL_UNSIGNED_INT_24_8
#define GL_UNSIGNED_INT_24_8 0x84FA
#endif //GL_UNSIGNED_INT_24_8
#ifndef GL_MAX_TEXTURE_LOD_BIAS
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#endif //GL_MAX_TEXTURE_LOD_BIAS
#ifndef GL_TEXTURE_LOD_BIAS
#define GL_TEXTURE_LOD_BIAS 0x8501
#endif //GL_TEXTURE_LOD_BIAS
#ifndef GL_INCR_WRAP
#define GL_INCR_WRAP 0x8507
#endif //GL_INCR_WRAP
#ifndef GL_DECR_WRAP
#define GL_DECR_WRAP 0x8508
#endif //GL_DECR_WRAP
#ifndef GL_TEXTURE_CUBE_MAP
#define GL_TEXTURE_CUBE_MAP 0x8513
#endif //GL_TEXTURE_CUBE_MAP
#ifndef GL_TEXTURE_BINDING_CUBE_MAP
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#endif //GL_TEXTURE_BINDING_CUBE_MAP
#ifndef GL_TEXTURE_CUBE_MAP_POSITIVE_X
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#endif //GL_TEXTURE_CUBE_MAP_POSITIVE_X
#ifndef GL_TEXTURE_CUBE_MAP_NEGATIVE_X
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#endif //GL_TEXTURE_CUBE_MAP_NEGATIVE_X
#ifndef GL_TEXTURE_CUBE_MAP_POSITIVE_Y
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#endif //GL_TEXTURE_CUBE_MAP_POSITIVE_Y
#ifndef GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#endif //GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
#ifndef GL_TEXTURE_CUBE_MAP_POSITIVE_Z
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#endif //GL_TEXTURE_CUBE_MAP_POSITIVE_Z
#ifndef GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#endif //GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
#ifndef GL_PROXY_TEXTURE_CUBE_MAP
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#endif //GL_PROXY_TEXTURE_CUBE_MAP
#ifndef GL_MAX_CUBE_MAP_TEXTURE_SIZE
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#endif //GL_MAX_CUBE_MAP_TEXTURE_SIZE
#ifndef GL_SRC1_ALPHA
#define GL_SRC1_ALPHA 0x8589
#endif //GL_SRC1_ALPHA
#ifndef GL_VERTEX_ARRAY_BINDING
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#endif //GL_VERTEX_ARRAY_BINDING
#ifndef GL_VERTEX_ATTRIB_ARRAY_ENABLED
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#endif //GL_VERTEX_ATTRIB_ARRAY_ENABLED
#ifndef GL_VERTEX_ATTRIB_ARRAY_SIZE
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#endif //GL_VERTEX_ATTRIB_ARRAY_SIZE
#ifndef GL_VERTEX_ATTRIB_ARRAY_STRIDE
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#endif //GL_VERTEX_ATTRIB_ARRAY_STRIDE
#ifndef GL_VERTEX_ATTRIB_ARRAY_TYPE
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#endif //GL_VERTEX_ATTRIB_ARRAY_TYPE
#ifndef GL_CURRENT_VERTEX_ATTRIB
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#endif //GL_CURRENT_VERTEX_ATTRIB
#ifndef GL_PROGRAM_POINT_SIZE
#define GL_PROGRAM_POINT_SIZE 0x8642
#endif //GL_PROGRAM_POINT_SIZE
#ifndef GL_VERTEX_PROGRAM_POINT_SIZE
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#endif //GL_VERTEX_PROGRAM_POINT_SIZE
#ifndef GL_VERTEX_ATTRIB_ARRAY_POINTER
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#endif //GL_VERTEX_ATTRIB_ARRAY_POINTER
#ifndef GL_DEPTH_CLAMP
#define GL_DEPTH_CLAMP 0x864F
#endif //GL_DEPTH_CLAMP
#ifndef GL_TEXTURE_COMPRESSED_IMAGE_SIZE
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#endif //GL_TEXTURE_COMPRESSED_IMAGE_SIZE
#ifndef GL_TEXTURE_COMPRESSED
#define GL_TEXTURE_COMPRESSED 0x86A1
#endif //GL_TEXTURE_COMPRESSED
#ifndef GL_NUM_COMPRESSED_TEXTURE_FORMATS
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#endif //GL_NUM_COMPRESSED_TEXTURE_FORMATS
#ifndef GL_COMPRESSED_TEXTURE_FORMATS
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#endif //GL_COMPRESSED_TEXTURE_FORMATS
#ifndef GL_PROGRAM_BINARY_LENGTH
#define GL_PROGRAM_BINARY_LENGTH 0x8741
#endif //GL_PROGRAM_BINARY_LENGTH
#ifndef GL_BUFFER_SIZE
#define GL_BUFFER_SIZE 0x8764
#endif //GL_BUFFER_SIZE
#ifndef GL_BUFFER_USAGE
#define GL_BUFFER_USAGE 0x8765
#endif //GL_BUFFER_USAGE
#ifndef GL_NUM_PROGRAM_BINARY_FORMATS
#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE
#endif //GL_NUM_PROGRAM_BINARY_FORMATS
#ifndef GL_PROGRAM_BINARY_FORMATS
#define GL_PROGRAM_BINARY_FORMATS 0x87FF
#endif //GL_PROGRAM_BINARY_FORMATS
#ifndef GL_STENCIL_BACK_FUNC
#define GL_STENCIL_BACK_FUNC 0x8800
#endif //GL_STENCIL_BACK_FUNC
#ifndef GL_STENCIL_BACK_FAIL
#define GL_STENCIL_BACK_FAIL 0x8801
#endif //GL_STENCIL_BACK_FAIL
#ifndef GL_STENCIL_BACK_PASS_DEPTH_FAIL
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#endif //GL_STENCIL_BACK_PASS_DEPTH_FAIL
#ifndef GL_STENCIL_BACK_PASS_DEPTH_PASS
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#endif //GL_STENCIL_BACK_PASS_DEPTH_PASS
#ifndef GL_RGBA32F
#define GL_RGBA32F 0x8814
#endif //GL_RGBA32F
#ifndef GL_RGB32F
#define GL_RGB32F 0x8815
#endif //GL_RGB32F
#ifndef GL_RGBA16F
#define GL_RGBA16F 0x881A
#endif //GL_RGBA16F
#ifndef GL_RGB16F
#define GL_RGB16F 0x881B
#endif //GL_RGB16F
#ifndef GL_MAX_DRAW_BUFFERS
#define GL_MAX_DRAW_BUFFERS 0x8824
#endif //GL_MAX_DRAW_BUFFERS
#ifndef GL_DRAW_BUFFER0
#define GL_DRAW_BUFFER0 0x8825
#endif //GL_DRAW_BUFFER0
#ifndef GL_DRAW_BUFFER1
#define GL_DRAW_BUFFER1 0x8826
#endif //GL_DRAW_BUFFER1
#ifndef GL_DRAW_BUFFER2
#define GL_DRAW_BUFFER2 0x8827
#endif //GL_DRAW_BUFFER2
#ifndef GL_DRAW_BUFFER3
#define GL_DRAW_BUFFER3 0x8828
#endif //GL_DRAW_BUFFER3
#ifndef GL_DRAW_BUFFER4
#define GL_DRAW_BUFFER4 0x8829
#endif //GL_DRAW_BUFFER4
#ifndef GL_DRAW_BUFFER5
#define GL_DRAW_BUFFER5 0x882A
#endif //GL_DRAW_BUFFER5
#ifndef GL_DRAW_BUFFER6
#define GL_DRAW_BUFFER6 0x882B
#endif //GL_DRAW_BUFFER6
#ifndef GL_DRAW_BUFFER7
#define GL_DRAW_BUFFER7 0x882C
#endif //GL_DRAW_BUFFER7
#ifndef GL_DRAW_BUFFER8
#define GL_DRAW_BUFFER8 0x882D
#endif //GL_DRAW_BUFFER8
#ifndef GL_DRAW_BUFFER9
#define GL_DRAW_BUFFER9 0x882E
#endif //GL_DRAW_BUFFER9
#ifndef GL_DRAW_BUFFER10
#define GL_DRAW_BUFFER10 0x882F
#endif //GL_DRAW_BUFFER10
#ifndef GL_DRAW_BUFFER11
#define GL_DRAW_BUFFER11 0x8830
#endif //GL_DRAW_BUFFER11
#ifndef GL_DRAW_BUFFER12
#define GL_DRAW_BUFFER12 0x8831
#endif //GL_DRAW_BUFFER12
#ifndef GL_DRAW_BUFFER13
#define GL_DRAW_BUFFER13 0x8832
#endif //GL_DRAW_BUFFER13
#ifndef GL_DRAW_BUFFER14
#define GL_DRAW_BUFFER14 0x8833
#endif //GL_DRAW_BUFFER14
#ifndef GL_DRAW_BUFFER15
#define GL_DRAW_BUFFER15 0x8834
#endif //GL_DRAW_BUFFER15
#ifndef GL_BLEND_EQUATION_ALPHA
#define GL_BLEND_EQUATION_ALPHA 0x883D
#endif //GL_BLEND_EQUATION_ALPHA
#ifndef GL_TEXTURE_DEPTH_SIZE
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#endif //GL_TEXTURE_DEPTH_SIZE
#ifndef GL_TEXTURE_COMPARE_MODE
#define GL_TEXTURE_COMPARE_MODE 0x884C
#endif //GL_TEXTURE_COMPARE_MODE
#ifndef GL_TEXTURE_COMPARE_FUNC
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#endif //GL_TEXTURE_COMPARE_FUNC
#ifndef GL_COMPARE_REF_TO_TEXTURE
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#endif //GL_COMPARE_REF_TO_TEXTURE
#ifndef GL_TEXTURE_CUBE_MAP_SEAMLESS
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#endif //GL_TEXTURE_CUBE_MAP_SEAMLESS
#ifndef GL_QUERY_COUNTER_BITS
#define GL_QUERY_COUNTER_BITS 0x8864
#endif //GL_QUERY_COUNTER_BITS
#ifndef GL_CURRENT_QUERY
#define GL_CURRENT_QUERY 0x8865
#endif //GL_CURRENT_QUERY
#ifndef GL_QUERY_RESULT
#define GL_QUERY_RESULT 0x8866
#endif //GL_QUERY_RESULT
#ifndef GL_QUERY_RESULT_AVAILABLE
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#endif //GL_QUERY_RESULT_AVAILABLE
#ifndef GL_MAX_VERTEX_ATTRIBS
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#endif //GL_MAX_VERTEX_ATTRIBS
#ifndef GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#endif //GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
#ifndef GL_MAX_TESS_CONTROL_INPUT_COMPONENTS
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#endif //GL_MAX_TESS_CONTROL_INPUT_COMPONENTS
#ifndef GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#endif //GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS
#ifndef GL_MAX_TEXTURE_IMAGE_UNITS
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#endif //GL_MAX_TEXTURE_IMAGE_UNITS
#ifndef GL_GEOMETRY_SHADER_INVOCATIONS
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#endif //GL_GEOMETRY_SHADER_INVOCATIONS
#ifndef GL_ARRAY_BUFFER
#define GL_ARRAY_BUFFER 0x8892
#endif //GL_ARRAY_BUFFER
#ifndef GL_ELEMENT_ARRAY_BUFFER
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#endif //GL_ELEMENT_ARRAY_BUFFER
#ifndef GL_ARRAY_BUFFER_BINDING
#define GL_ARRAY_BUFFER_BINDING 0x8894
#endif //GL_ARRAY_BUFFER_BINDING
#ifndef GL_ELEMENT_ARRAY_BUFFER_BINDING
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#endif //GL_ELEMENT_ARRAY_BUFFER_BINDING
#ifndef GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#endif //GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
#ifndef GL_READ_ONLY
#define GL_READ_ONLY 0x88B8
#endif //GL_READ_ONLY
#ifndef GL_WRITE_ONLY
#define GL_WRITE_ONLY 0x88B9
#endif //GL_WRITE_ONLY
#ifndef GL_READ_WRITE
#define GL_READ_WRITE 0x88BA
#endif //GL_READ_WRITE
#ifndef GL_BUFFER_ACCESS
#define GL_BUFFER_ACCESS 0x88BB
#endif //GL_BUFFER_ACCESS
#ifndef GL_BUFFER_MAPPED
#define GL_BUFFER_MAPPED 0x88BC
#endif //GL_BUFFER_MAPPED
#ifndef GL_BUFFER_MAP_POINTER
#define GL_BUFFER_MAP_POINTER 0x88BD
#endif //GL_BUFFER_MAP_POINTER
#ifndef GL_TIME_ELAPSED
#define GL_TIME_ELAPSED 0x88BF
#endif //GL_TIME_ELAPSED
#ifndef GL_STREAM_DRAW
#define GL_STREAM_DRAW 0x88E0
#endif //GL_STREAM_DRAW
#ifndef GL_STREAM_READ
#define GL_STREAM_READ 0x88E1
#endif //GL_STREAM_READ
#ifndef GL_STREAM_COPY
#define GL_STREAM_COPY 0x88E2
#endif //GL_STREAM_COPY
#ifndef GL_STATIC_DRAW
#define GL_STATIC_DRAW 0x88E4
#endif //GL_STATIC_DRAW
#ifndef GL_STATIC_READ
#define GL_STATIC_READ 0x88E5
#endif //GL_STATIC_READ
#ifndef GL_STATIC_COPY
#define GL_STATIC_COPY 0x88E6
#endif //GL_STATIC_COPY
#ifndef GL_DYNAMIC_DRAW
#define GL_DYNAMIC_DRAW 0x88E8
#endif //GL_DYNAMIC_DRAW
#ifndef GL_DYNAMIC_READ
#define GL_DYNAMIC_READ 0x88E9
#endif //GL_DYNAMIC_READ
#ifndef GL_DYNAMIC_COPY
#define GL_DYNAMIC_COPY 0x88EA
#endif //GL_DYNAMIC_COPY
#ifndef GL_PIXEL_PACK_BUFFER
#define GL_PIXEL_PACK_BUFFER 0x88EB
#endif //GL_PIXEL_PACK_BUFFER
#ifndef GL_PIXEL_UNPACK_BUFFER
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#endif //GL_PIXEL_UNPACK_BUFFER
#ifndef GL_PIXEL_PACK_BUFFER_BINDING
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#endif //GL_PIXEL_PACK_BUFFER_BINDING
#ifndef GL_PIXEL_UNPACK_BUFFER_BINDING
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#endif //GL_PIXEL_UNPACK_BUFFER_BINDING
#ifndef GL_DEPTH24_STENCIL8
#define GL_DEPTH24_STENCIL8 0x88F0
#endif //GL_DEPTH24_STENCIL8
#ifndef GL_TEXTURE_STENCIL_SIZE
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#endif //GL_TEXTURE_STENCIL_SIZE
#ifndef GL_SRC1_COLOR
#define GL_SRC1_COLOR 0x88F9
#endif //GL_SRC1_COLOR
#ifndef GL_ONE_MINUS_SRC1_COLOR
#define GL_ONE_MINUS_SRC1_COLOR 0x88FA
#endif //GL_ONE_MINUS_SRC1_COLOR
#ifndef GL_ONE_MINUS_SRC1_ALPHA
#define GL_ONE_MINUS_SRC1_ALPHA 0x88FB
#endif //GL_ONE_MINUS_SRC1_ALPHA
#ifndef GL_MAX_DUAL_SOURCE_DRAW_BUFFERS
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC
#endif //GL_MAX_DUAL_SOURCE_DRAW_BUFFERS
#ifndef GL_VERTEX_ATTRIB_ARRAY_INTEGER
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#endif //GL_VERTEX_ATTRIB_ARRAY_INTEGER
#ifndef GL_VERTEX_ATTRIB_ARRAY_DIVISOR
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE
#endif //GL_VERTEX_ATTRIB_ARRAY_DIVISOR
#ifndef GL_MAX_ARRAY_TEXTURE_LAYERS
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#endif //GL_MAX_ARRAY_TEXTURE_LAYERS
#ifndef GL_MIN_PROGRAM_TEXEL_OFFSET
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#endif //GL_MIN_PROGRAM_TEXEL_OFFSET
#ifndef GL_MAX_PROGRAM_TEXEL_OFFSET
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#endif //GL_MAX_PROGRAM_TEXEL_OFFSET
#ifndef GL_SAMPLES_PASSED
#define GL_SAMPLES_PASSED 0x8914
#endif //GL_SAMPLES_PASSED
#ifndef GL_GEOMETRY_VERTICES_OUT
#define GL_GEOMETRY_VERTICES_OUT 0x8916
#endif //GL_GEOMETRY_VERTICES_OUT
#ifndef GL_GEOMETRY_INPUT_TYPE
#define GL_GEOMETRY_INPUT_TYPE 0x8917
#endif //GL_GEOMETRY_INPUT_TYPE
#ifndef GL_GEOMETRY_OUTPUT_TYPE
#define GL_GEOMETRY_OUTPUT_TYPE 0x8918
#endif //GL_GEOMETRY_OUTPUT_TYPE
#ifndef GL_SAMPLER_BINDING
#define GL_SAMPLER_BINDING 0x8919
#endif //GL_SAMPLER_BINDING
#ifndef GL_CLAMP_READ_COLOR
#define GL_CLAMP_READ_COLOR 0x891C
#endif //GL_CLAMP_READ_COLOR
#ifndef GL_FIXED_ONLY
#define GL_FIXED_ONLY 0x891D
#endif //GL_FIXED_ONLY
#ifndef GL_UNIFORM_BUFFER
#define GL_UNIFORM_BUFFER 0x8A11
#endif //GL_UNIFORM_BUFFER
#ifndef GL_UNIFORM_BUFFER_BINDING
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#endif //GL_UNIFORM_BUFFER_BINDING
#ifndef GL_UNIFORM_BUFFER_START
#define GL_UNIFORM_BUFFER_START 0x8A29
#endif //GL_UNIFORM_BUFFER_START
#ifndef GL_UNIFORM_BUFFER_SIZE
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#endif //GL_UNIFORM_BUFFER_SIZE
#ifndef GL_MAX_VERTEX_UNIFORM_BLOCKS
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#endif //GL_MAX_VERTEX_UNIFORM_BLOCKS
#ifndef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#endif //GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#ifndef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#endif //GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#ifndef GL_MAX_COMBINED_UNIFORM_BLOCKS
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#endif //GL_MAX_COMBINED_UNIFORM_BLOCKS
#ifndef GL_MAX_UNIFORM_BUFFER_BINDINGS
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#endif //GL_MAX_UNIFORM_BUFFER_BINDINGS
#ifndef GL_MAX_UNIFORM_BLOCK_SIZE
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#endif //GL_MAX_UNIFORM_BLOCK_SIZE
#ifndef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#endif //GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#ifndef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#endif //GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#ifndef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#endif //GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#ifndef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#endif //GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#ifndef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#endif //GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#ifndef GL_ACTIVE_UNIFORM_BLOCKS
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#endif //GL_ACTIVE_UNIFORM_BLOCKS
#ifndef GL_UNIFORM_TYPE
#define GL_UNIFORM_TYPE 0x8A37
#endif //GL_UNIFORM_TYPE
#ifndef GL_UNIFORM_SIZE
#define GL_UNIFORM_SIZE 0x8A38
#endif //GL_UNIFORM_SIZE
#ifndef GL_UNIFORM_NAME_LENGTH
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif //GL_UNIFORM_NAME_LENGTH
#ifndef GL_UNIFORM_BLOCK_INDEX
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#endif //GL_UNIFORM_BLOCK_INDEX
#ifndef GL_UNIFORM_OFFSET
#define GL_UNIFORM_OFFSET 0x8A3B
#endif //GL_UNIFORM_OFFSET
#ifndef GL_UNIFORM_ARRAY_STRIDE
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#endif //GL_UNIFORM_ARRAY_STRIDE
#ifndef GL_UNIFORM_MATRIX_STRIDE
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#endif //GL_UNIFORM_MATRIX_STRIDE
#ifndef GL_UNIFORM_IS_ROW_MAJOR
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#endif //GL_UNIFORM_IS_ROW_MAJOR
#ifndef GL_UNIFORM_BLOCK_BINDING
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#endif //GL_UNIFORM_BLOCK_BINDING
#ifndef GL_UNIFORM_BLOCK_DATA_SIZE
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#endif //GL_UNIFORM_BLOCK_DATA_SIZE
#ifndef GL_UNIFORM_BLOCK_NAME_LENGTH
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#endif //GL_UNIFORM_BLOCK_NAME_LENGTH
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#endif //GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#endif //GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#endif //GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#endif //GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#endif //GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#ifndef GL_FRAGMENT_SHADER
#define GL_FRAGMENT_SHADER 0x8B30
#endif //GL_FRAGMENT_SHADER
#ifndef GL_VERTEX_SHADER
#define GL_VERTEX_SHADER 0x8B31
#endif //GL_VERTEX_SHADER
#ifndef GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#endif //GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
#ifndef GL_MAX_VERTEX_UNIFORM_COMPONENTS
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#endif //GL_MAX_VERTEX_UNIFORM_COMPONENTS
#ifndef GL_MAX_VARYING_FLOATS
#define GL_MAX_VARYING_FLOATS 0x8B4B
#endif //GL_MAX_VARYING_FLOATS
#ifndef GL_MAX_VARYING_COMPONENTS
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#endif //GL_MAX_VARYING_COMPONENTS
#ifndef GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#endif //GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
#ifndef GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#endif //GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
#ifndef GL_SHADER_TYPE
#define GL_SHADER_TYPE 0x8B4F
#endif //GL_SHADER_TYPE
#ifndef GL_FLOAT_VEC2
#define GL_FLOAT_VEC2 0x8B50
#endif //GL_FLOAT_VEC2
#ifndef GL_FLOAT_VEC3
#define GL_FLOAT_VEC3 0x8B51
#endif //GL_FLOAT_VEC3
#ifndef GL_FLOAT_VEC4
#define GL_FLOAT_VEC4 0x8B52
#endif //GL_FLOAT_VEC4
#ifndef GL_INT_VEC2
#define GL_INT_VEC2 0x8B53
#endif //GL_INT_VEC2
#ifndef GL_INT_VEC3
#define GL_INT_VEC3 0x8B54
#endif //GL_INT_VEC3
#ifndef GL_INT_VEC4
#define GL_INT_VEC4 0x8B55
#endif //GL_INT_VEC4
#ifndef GL_BOOL
#define GL_BOOL 0x8B56
#endif //GL_BOOL
#ifndef GL_BOOL_VEC2
#define GL_BOOL_VEC2 0x8B57
#endif //GL_BOOL_VEC2
#ifndef GL_BOOL_VEC3
#define GL_BOOL_VEC3 0x8B58
#endif //GL_BOOL_VEC3
#ifndef GL_BOOL_VEC4
#define GL_BOOL_VEC4 0x8B59
#endif //GL_BOOL_VEC4
#ifndef GL_FLOAT_MAT2
#define GL_FLOAT_MAT2 0x8B5A
#endif //GL_FLOAT_MAT2
#ifndef GL_FLOAT_MAT3
#define GL_FLOAT_MAT3 0x8B5B
#endif //GL_FLOAT_MAT3
#ifndef GL_FLOAT_MAT4
#define GL_FLOAT_MAT4 0x8B5C
#endif //GL_FLOAT_MAT4
#ifndef GL_SAMPLER_1D
#define GL_SAMPLER_1D 0x8B5D
#endif //GL_SAMPLER_1D
#ifndef GL_SAMPLER_2D
#define GL_SAMPLER_2D 0x8B5E
#endif //GL_SAMPLER_2D
#ifndef GL_SAMPLER_3D
#define GL_SAMPLER_3D 0x8B5F
#endif //GL_SAMPLER_3D
#ifndef GL_SAMPLER_CUBE
#define GL_SAMPLER_CUBE 0x8B60
#endif //GL_SAMPLER_CUBE
#ifndef GL_SAMPLER_1D_SHADOW
#define GL_SAMPLER_1D_SHADOW 0x8B61
#endif //GL_SAMPLER_1D_SHADOW
#ifndef GL_SAMPLER_2D_SHADOW
#define GL_SAMPLER_2D_SHADOW 0x8B62
#endif //GL_SAMPLER_2D_SHADOW
#ifndef GL_SAMPLER_2D_RECT
#define GL_SAMPLER_2D_RECT 0x8B63
#endif //GL_SAMPLER_2D_RECT
#ifndef GL_SAMPLER_2D_RECT_SHADOW
#define GL_SAMPLER_2D_RECT_SHADOW 0x8B64
#endif //GL_SAMPLER_2D_RECT_SHADOW
#ifndef GL_FLOAT_MAT2x3
#define GL_FLOAT_MAT2x3 0x8B65
#endif //GL_FLOAT_MAT2x3
#ifndef GL_FLOAT_MAT2x4
#define GL_FLOAT_MAT2x4 0x8B66
#endif //GL_FLOAT_MAT2x4
#ifndef GL_FLOAT_MAT3x2
#define GL_FLOAT_MAT3x2 0x8B67
#endif //GL_FLOAT_MAT3x2
#ifndef GL_FLOAT_MAT3x4
#define GL_FLOAT_MAT3x4 0x8B68
#endif //GL_FLOAT_MAT3x4
#ifndef GL_FLOAT_MAT4x2
#define GL_FLOAT_MAT4x2 0x8B69
#endif //GL_FLOAT_MAT4x2
#ifndef GL_FLOAT_MAT4x3
#define GL_FLOAT_MAT4x3 0x8B6A
#endif //GL_FLOAT_MAT4x3
#ifndef GL_DELETE_STATUS
#define GL_DELETE_STATUS 0x8B80
#endif //GL_DELETE_STATUS
#ifndef GL_COMPILE_STATUS
#define GL_COMPILE_STATUS 0x8B81
#endif //GL_COMPILE_STATUS
#ifndef GL_LINK_STATUS
#define GL_LINK_STATUS 0x8B82
#endif //GL_LINK_STATUS
#ifndef GL_VALIDATE_STATUS
#define GL_VALIDATE_STATUS 0x8B83
#endif //GL_VALIDATE_STATUS
#ifndef GL_INFO_LOG_LENGTH
#define GL_INFO_LOG_LENGTH 0x8B84
#endif //GL_INFO_LOG_LENGTH
#ifndef GL_ATTACHED_SHADERS
#define GL_ATTACHED_SHADERS 0x8B85
#endif //GL_ATTACHED_SHADERS
#ifndef GL_ACTIVE_UNIFORMS
#define GL_ACTIVE_UNIFORMS 0x8B86
#endif //GL_ACTIVE_UNIFORMS
#ifndef GL_ACTIVE_UNIFORM_MAX_LENGTH
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#endif //GL_ACTIVE_UNIFORM_MAX_LENGTH
#ifndef GL_SHADER_SOURCE_LENGTH
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#endif //GL_SHADER_SOURCE_LENGTH
#ifndef GL_ACTIVE_ATTRIBUTES
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#endif //GL_ACTIVE_ATTRIBUTES
#ifndef GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#endif //GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
#ifndef GL_FRAGMENT_SHADER_DERIVATIVE_HINT
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#endif //GL_FRAGMENT_SHADER_DERIVATIVE_HINT
#ifndef GL_SHADING_LANGUAGE_VERSION
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#endif //GL_SHADING_LANGUAGE_VERSION
#ifndef GL_CURRENT_PROGRAM
#define GL_CURRENT_PROGRAM 0x8B8D
#endif //GL_CURRENT_PROGRAM
#ifndef GL_IMPLEMENTATION_COLOR_READ_TYPE
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#endif //GL_IMPLEMENTATION_COLOR_READ_TYPE
#ifndef GL_IMPLEMENTATION_COLOR_READ_FORMAT
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#endif //GL_IMPLEMENTATION_COLOR_READ_FORMAT
#ifndef GL_TEXTURE_RED_TYPE
#define GL_TEXTURE_RED_TYPE 0x8C10
#endif //GL_TEXTURE_RED_TYPE
#ifndef GL_TEXTURE_GREEN_TYPE
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#endif //GL_TEXTURE_GREEN_TYPE
#ifndef GL_TEXTURE_BLUE_TYPE
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#endif //GL_TEXTURE_BLUE_TYPE
#ifndef GL_TEXTURE_ALPHA_TYPE
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#endif //GL_TEXTURE_ALPHA_TYPE
#ifndef GL_TEXTURE_DEPTH_TYPE
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#endif //GL_TEXTURE_DEPTH_TYPE
#ifndef GL_UNSIGNED_NORMALIZED
#define GL_UNSIGNED_NORMALIZED 0x8C17
#endif //GL_UNSIGNED_NORMALIZED
#ifndef GL_TEXTURE_1D_ARRAY
#define GL_TEXTURE_1D_ARRAY 0x8C18
#endif //GL_TEXTURE_1D_ARRAY
#ifndef GL_PROXY_TEXTURE_1D_ARRAY
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#endif //GL_PROXY_TEXTURE_1D_ARRAY
#ifndef GL_TEXTURE_2D_ARRAY
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#endif //GL_TEXTURE_2D_ARRAY
#ifndef GL_PROXY_TEXTURE_2D_ARRAY
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#endif //GL_PROXY_TEXTURE_2D_ARRAY
#ifndef GL_TEXTURE_BINDING_1D_ARRAY
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#endif //GL_TEXTURE_BINDING_1D_ARRAY
#ifndef GL_TEXTURE_BINDING_2D_ARRAY
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#endif //GL_TEXTURE_BINDING_2D_ARRAY
#ifndef GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#endif //GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
#ifndef GL_TEXTURE_BUFFER
#define GL_TEXTURE_BUFFER 0x8C2A
#endif //GL_TEXTURE_BUFFER
#ifndef GL_MAX_TEXTURE_BUFFER_SIZE
#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
#endif //GL_MAX_TEXTURE_BUFFER_SIZE
#ifndef GL_TEXTURE_BINDING_BUFFER
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#endif //GL_TEXTURE_BINDING_BUFFER
#ifndef GL_TEXTURE_BUFFER_DATA_STORE_BINDING
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#endif //GL_TEXTURE_BUFFER_DATA_STORE_BINDING
#ifndef GL_ANY_SAMPLES_PASSED
#define GL_ANY_SAMPLES_PASSED 0x8C2F
#endif //GL_ANY_SAMPLES_PASSED
#ifndef GL_SAMPLE_SHADING
#define GL_SAMPLE_SHADING 0x8C36
#endif //GL_SAMPLE_SHADING
#ifndef GL_MIN_SAMPLE_SHADING_VALUE
#define GL_MIN_SAMPLE_SHADING_VALUE 0x8C37
#endif //GL_MIN_SAMPLE_SHADING_VALUE
#ifndef GL_R11F_G11F_B10F
#define GL_R11F_G11F_B10F 0x8C3A
#endif //GL_R11F_G11F_B10F
#ifndef GL_UNSIGNED_INT_10F_11F_11F_REV
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#endif //GL_UNSIGNED_INT_10F_11F_11F_REV
#ifndef GL_RGB9_E5
#define GL_RGB9_E5 0x8C3D
#endif //GL_RGB9_E5
#ifndef GL_UNSIGNED_INT_5_9_9_9_REV
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#endif //GL_UNSIGNED_INT_5_9_9_9_REV
#ifndef GL_TEXTURE_SHARED_SIZE
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#endif //GL_TEXTURE_SHARED_SIZE
#ifndef GL_SRGB
#define GL_SRGB 0x8C40
#endif //GL_SRGB
#ifndef GL_SRGB8
#define GL_SRGB8 0x8C41
#endif //GL_SRGB8
#ifndef GL_SRGB_ALPHA
#define GL_SRGB_ALPHA 0x8C42
#endif //GL_SRGB_ALPHA
#ifndef GL_SRGB8_ALPHA8
#define GL_SRGB8_ALPHA8 0x8C43
#endif //GL_SRGB8_ALPHA8
#ifndef GL_COMPRESSED_SRGB
#define GL_COMPRESSED_SRGB 0x8C48
#endif //GL_COMPRESSED_SRGB
#ifndef GL_COMPRESSED_SRGB_ALPHA
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
#endif //GL_COMPRESSED_SRGB_ALPHA
#ifndef GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#endif //GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_MODE
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_MODE
#ifndef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#endif //GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
#ifndef GL_TRANSFORM_FEEDBACK_VARYINGS
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#endif //GL_TRANSFORM_FEEDBACK_VARYINGS
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_START
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_START
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
#ifndef GL_PRIMITIVES_GENERATED
#define GL_PRIMITIVES_GENERATED 0x8C87
#endif //GL_PRIMITIVES_GENERATED
#ifndef GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#endif //GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
#ifndef GL_RASTERIZER_DISCARD
#define GL_RASTERIZER_DISCARD 0x8C89
#endif //GL_RASTERIZER_DISCARD
#ifndef GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#endif //GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
#ifndef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#endif //GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
#ifndef GL_INTERLEAVED_ATTRIBS
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#endif //GL_INTERLEAVED_ATTRIBS
#ifndef GL_SEPARATE_ATTRIBS
#define GL_SEPARATE_ATTRIBS 0x8C8D
#endif //GL_SEPARATE_ATTRIBS
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#endif //GL_TRANSFORM_FEEDBACK_BUFFER
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
#ifndef GL_POINT_SPRITE_COORD_ORIGIN
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#endif //GL_POINT_SPRITE_COORD_ORIGIN
#ifndef GL_LOWER_LEFT
#define GL_LOWER_LEFT 0x8CA1
#endif //GL_LOWER_LEFT
#ifndef GL_UPPER_LEFT
#define GL_UPPER_LEFT 0x8CA2
#endif //GL_UPPER_LEFT
#ifndef GL_STENCIL_BACK_REF
#define GL_STENCIL_BACK_REF 0x8CA3
#endif //GL_STENCIL_BACK_REF
#ifndef GL_STENCIL_BACK_VALUE_MASK
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#endif //GL_STENCIL_BACK_VALUE_MASK
#ifndef GL_STENCIL_BACK_WRITEMASK
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#endif //GL_STENCIL_BACK_WRITEMASK
#ifndef GL_FRAMEBUFFER_BINDING
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#endif //GL_FRAMEBUFFER_BINDING
#ifndef GL_DRAW_FRAMEBUFFER_BINDING
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#endif //GL_DRAW_FRAMEBUFFER_BINDING
#ifndef GL_RENDERBUFFER_BINDING
#define GL_RENDERBUFFER_BINDING 0x8CA7
#endif //GL_RENDERBUFFER_BINDING
#ifndef GL_READ_FRAMEBUFFER
#define GL_READ_FRAMEBUFFER 0x8CA8
#endif //GL_READ_FRAMEBUFFER
#ifndef GL_DRAW_FRAMEBUFFER
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#endif //GL_DRAW_FRAMEBUFFER
#ifndef GL_READ_FRAMEBUFFER_BINDING
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#endif //GL_READ_FRAMEBUFFER_BINDING
#ifndef GL_RENDERBUFFER_SAMPLES
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#endif //GL_RENDERBUFFER_SAMPLES
#ifndef GL_DEPTH_COMPONENT32F
#define GL_DEPTH_COMPONENT32F 0x8CAC
#endif //GL_DEPTH_COMPONENT32F
#ifndef GL_DEPTH32F_STENCIL8
#define GL_DEPTH32F_STENCIL8 0x8CAD
#endif //GL_DEPTH32F_STENCIL8
#ifndef GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#endif //GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#endif //GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
#ifndef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#endif //GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
#ifndef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#endif //GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#endif //GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
#ifndef GL_FRAMEBUFFER_COMPLETE
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#endif //GL_FRAMEBUFFER_COMPLETE
#ifndef GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#endif //GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
#ifndef GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#endif //GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
#ifndef GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#endif //GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
#ifndef GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#endif //GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
#ifndef GL_FRAMEBUFFER_UNSUPPORTED
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#endif //GL_FRAMEBUFFER_UNSUPPORTED
#ifndef GL_MAX_COLOR_ATTACHMENTS
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#endif //GL_MAX_COLOR_ATTACHMENTS
#ifndef GL_COLOR_ATTACHMENT0
#define GL_COLOR_ATTACHMENT0 0x8CE0
#endif //GL_COLOR_ATTACHMENT0
#ifndef GL_COLOR_ATTACHMENT1
#define GL_COLOR_ATTACHMENT1 0x8CE1
#endif //GL_COLOR_ATTACHMENT1
#ifndef GL_COLOR_ATTACHMENT2
#define GL_COLOR_ATTACHMENT2 0x8CE2
#endif //GL_COLOR_ATTACHMENT2
#ifndef GL_COLOR_ATTACHMENT3
#define GL_COLOR_ATTACHMENT3 0x8CE3
#endif //GL_COLOR_ATTACHMENT3
#ifndef GL_COLOR_ATTACHMENT4
#define GL_COLOR_ATTACHMENT4 0x8CE4
#endif //GL_COLOR_ATTACHMENT4
#ifndef GL_COLOR_ATTACHMENT5
#define GL_COLOR_ATTACHMENT5 0x8CE5
#endif //GL_COLOR_ATTACHMENT5
#ifndef GL_COLOR_ATTACHMENT6
#define GL_COLOR_ATTACHMENT6 0x8CE6
#endif //GL_COLOR_ATTACHMENT6
#ifndef GL_COLOR_ATTACHMENT7
#define GL_COLOR_ATTACHMENT7 0x8CE7
#endif //GL_COLOR_ATTACHMENT7
#ifndef GL_COLOR_ATTACHMENT8
#define GL_COLOR_ATTACHMENT8 0x8CE8
#endif //GL_COLOR_ATTACHMENT8
#ifndef GL_COLOR_ATTACHMENT9
#define GL_COLOR_ATTACHMENT9 0x8CE9
#endif //GL_COLOR_ATTACHMENT9
#ifndef GL_COLOR_ATTACHMENT10
#define GL_COLOR_ATTACHMENT10 0x8CEA
#endif //GL_COLOR_ATTACHMENT10
#ifndef GL_COLOR_ATTACHMENT11
#define GL_COLOR_ATTACHMENT11 0x8CEB
#endif //GL_COLOR_ATTACHMENT11
#ifndef GL_COLOR_ATTACHMENT12
#define GL_COLOR_ATTACHMENT12 0x8CEC
#endif //GL_COLOR_ATTACHMENT12
#ifndef GL_COLOR_ATTACHMENT13
#define GL_COLOR_ATTACHMENT13 0x8CED
#endif //GL_COLOR_ATTACHMENT13
#ifndef GL_COLOR_ATTACHMENT14
#define GL_COLOR_ATTACHMENT14 0x8CEE
#endif //GL_COLOR_ATTACHMENT14
#ifndef GL_COLOR_ATTACHMENT15
#define GL_COLOR_ATTACHMENT15 0x8CEF
#endif //GL_COLOR_ATTACHMENT15
#ifndef GL_DEPTH_ATTACHMENT
#define GL_DEPTH_ATTACHMENT 0x8D00
#endif //GL_DEPTH_ATTACHMENT
#ifndef GL_STENCIL_ATTACHMENT
#define GL_STENCIL_ATTACHMENT 0x8D20
#endif //GL_STENCIL_ATTACHMENT
#ifndef GL_FRAMEBUFFER
#define GL_FRAMEBUFFER 0x8D40
#endif //GL_FRAMEBUFFER
#ifndef GL_RENDERBUFFER
#define GL_RENDERBUFFER 0x8D41
#endif //GL_RENDERBUFFER
#ifndef GL_RENDERBUFFER_WIDTH
#define GL_RENDERBUFFER_WIDTH 0x8D42
#endif //GL_RENDERBUFFER_WIDTH
#ifndef GL_RENDERBUFFER_HEIGHT
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#endif //GL_RENDERBUFFER_HEIGHT
#ifndef GL_RENDERBUFFER_INTERNAL_FORMAT
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#endif //GL_RENDERBUFFER_INTERNAL_FORMAT
#ifndef GL_STENCIL_INDEX1
#define GL_STENCIL_INDEX1 0x8D46
#endif //GL_STENCIL_INDEX1
#ifndef GL_STENCIL_INDEX4
#define GL_STENCIL_INDEX4 0x8D47
#endif //GL_STENCIL_INDEX4
#ifndef GL_STENCIL_INDEX8
#define GL_STENCIL_INDEX8 0x8D48
#endif //GL_STENCIL_INDEX8
#ifndef GL_STENCIL_INDEX16
#define GL_STENCIL_INDEX16 0x8D49
#endif //GL_STENCIL_INDEX16
#ifndef GL_RENDERBUFFER_RED_SIZE
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#endif //GL_RENDERBUFFER_RED_SIZE
#ifndef GL_RENDERBUFFER_GREEN_SIZE
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#endif //GL_RENDERBUFFER_GREEN_SIZE
#ifndef GL_RENDERBUFFER_BLUE_SIZE
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#endif //GL_RENDERBUFFER_BLUE_SIZE
#ifndef GL_RENDERBUFFER_ALPHA_SIZE
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#endif //GL_RENDERBUFFER_ALPHA_SIZE
#ifndef GL_RENDERBUFFER_DEPTH_SIZE
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#endif //GL_RENDERBUFFER_DEPTH_SIZE
#ifndef GL_RENDERBUFFER_STENCIL_SIZE
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#endif //GL_RENDERBUFFER_STENCIL_SIZE
#ifndef GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#endif //GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
#ifndef GL_MAX_SAMPLES
#define GL_MAX_SAMPLES 0x8D57
#endif //GL_MAX_SAMPLES
#ifndef GL_RGB565
#define GL_RGB565 0x8D62
#endif //GL_RGB565
#ifndef GL_RGBA32UI
#define GL_RGBA32UI 0x8D70
#endif //GL_RGBA32UI
#ifndef GL_RGB32UI
#define GL_RGB32UI 0x8D71
#endif //GL_RGB32UI
#ifndef GL_RGBA16UI
#define GL_RGBA16UI 0x8D76
#endif //GL_RGBA16UI
#ifndef GL_RGB16UI
#define GL_RGB16UI 0x8D77
#endif //GL_RGB16UI
#ifndef GL_RGBA8UI
#define GL_RGBA8UI 0x8D7C
#endif //GL_RGBA8UI
#ifndef GL_RGB8UI
#define GL_RGB8UI 0x8D7D
#endif //GL_RGB8UI
#ifndef GL_RGBA32I
#define GL_RGBA32I 0x8D82
#endif //GL_RGBA32I
#ifndef GL_RGB32I
#define GL_RGB32I 0x8D83
#endif //GL_RGB32I
#ifndef GL_RGBA16I
#define GL_RGBA16I 0x8D88
#endif //GL_RGBA16I
#ifndef GL_RGB16I
#define GL_RGB16I 0x8D89
#endif //GL_RGB16I
#ifndef GL_RGBA8I
#define GL_RGBA8I 0x8D8E
#endif //GL_RGBA8I
#ifndef GL_RGB8I
#define GL_RGB8I 0x8D8F
#endif //GL_RGB8I
#ifndef GL_RED_INTEGER
#define GL_RED_INTEGER 0x8D94
#endif //GL_RED_INTEGER
#ifndef GL_GREEN_INTEGER
#define GL_GREEN_INTEGER 0x8D95
#endif //GL_GREEN_INTEGER
#ifndef GL_BLUE_INTEGER
#define GL_BLUE_INTEGER 0x8D96
#endif //GL_BLUE_INTEGER
#ifndef GL_RGB_INTEGER
#define GL_RGB_INTEGER 0x8D98
#endif //GL_RGB_INTEGER
#ifndef GL_RGBA_INTEGER
#define GL_RGBA_INTEGER 0x8D99
#endif //GL_RGBA_INTEGER
#ifndef GL_BGR_INTEGER
#define GL_BGR_INTEGER 0x8D9A
#endif //GL_BGR_INTEGER
#ifndef GL_BGRA_INTEGER
#define GL_BGRA_INTEGER 0x8D9B
#endif //GL_BGRA_INTEGER
#ifndef GL_INT_2_10_10_10_REV
#define GL_INT_2_10_10_10_REV 0x8D9F
#endif //GL_INT_2_10_10_10_REV
#ifndef GL_FRAMEBUFFER_ATTACHMENT_LAYERED
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#endif //GL_FRAMEBUFFER_ATTACHMENT_LAYERED
#ifndef GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#endif //GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
#ifndef GL_FLOAT_32_UNSIGNED_INT_24_8_REV
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#endif //GL_FLOAT_32_UNSIGNED_INT_24_8_REV
#ifndef GL_FRAMEBUFFER_SRGB
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#endif //GL_FRAMEBUFFER_SRGB
#ifndef GL_COMPRESSED_RED_RGTC1
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#endif //GL_COMPRESSED_RED_RGTC1
#ifndef GL_COMPRESSED_SIGNED_RED_RGTC1
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#endif //GL_COMPRESSED_SIGNED_RED_RGTC1
#ifndef GL_COMPRESSED_RG_RGTC2
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#endif //GL_COMPRESSED_RG_RGTC2
#ifndef GL_COMPRESSED_SIGNED_RG_RGTC2
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#endif //GL_COMPRESSED_SIGNED_RG_RGTC2
#ifndef GL_SAMPLER_1D_ARRAY
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#endif //GL_SAMPLER_1D_ARRAY
#ifndef GL_SAMPLER_2D_ARRAY
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#endif //GL_SAMPLER_2D_ARRAY
#ifndef GL_SAMPLER_BUFFER
#define GL_SAMPLER_BUFFER 0x8DC2
#endif //GL_SAMPLER_BUFFER
#ifndef GL_SAMPLER_1D_ARRAY_SHADOW
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#endif //GL_SAMPLER_1D_ARRAY_SHADOW
#ifndef GL_SAMPLER_2D_ARRAY_SHADOW
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#endif //GL_SAMPLER_2D_ARRAY_SHADOW
#ifndef GL_SAMPLER_CUBE_SHADOW
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#endif //GL_SAMPLER_CUBE_SHADOW
#ifndef GL_UNSIGNED_INT_VEC2
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#endif //GL_UNSIGNED_INT_VEC2
#ifndef GL_UNSIGNED_INT_VEC3
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#endif //GL_UNSIGNED_INT_VEC3
#ifndef GL_UNSIGNED_INT_VEC4
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#endif //GL_UNSIGNED_INT_VEC4
#ifndef GL_INT_SAMPLER_1D
#define GL_INT_SAMPLER_1D 0x8DC9
#endif //GL_INT_SAMPLER_1D
#ifndef GL_INT_SAMPLER_2D
#define GL_INT_SAMPLER_2D 0x8DCA
#endif //GL_INT_SAMPLER_2D
#ifndef GL_INT_SAMPLER_3D
#define GL_INT_SAMPLER_3D 0x8DCB
#endif //GL_INT_SAMPLER_3D
#ifndef GL_INT_SAMPLER_CUBE
#define GL_INT_SAMPLER_CUBE 0x8DCC
#endif //GL_INT_SAMPLER_CUBE
#ifndef GL_INT_SAMPLER_2D_RECT
#define GL_INT_SAMPLER_2D_RECT 0x8DCD
#endif //GL_INT_SAMPLER_2D_RECT
#ifndef GL_INT_SAMPLER_1D_ARRAY
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#endif //GL_INT_SAMPLER_1D_ARRAY
#ifndef GL_INT_SAMPLER_2D_ARRAY
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#endif //GL_INT_SAMPLER_2D_ARRAY
#ifndef GL_INT_SAMPLER_BUFFER
#define GL_INT_SAMPLER_BUFFER 0x8DD0
#endif //GL_INT_SAMPLER_BUFFER
#ifndef GL_UNSIGNED_INT_SAMPLER_1D
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#endif //GL_UNSIGNED_INT_SAMPLER_1D
#ifndef GL_UNSIGNED_INT_SAMPLER_2D
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#endif //GL_UNSIGNED_INT_SAMPLER_2D
#ifndef GL_UNSIGNED_INT_SAMPLER_3D
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#endif //GL_UNSIGNED_INT_SAMPLER_3D
#ifndef GL_UNSIGNED_INT_SAMPLER_CUBE
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#endif //GL_UNSIGNED_INT_SAMPLER_CUBE
#ifndef GL_UNSIGNED_INT_SAMPLER_2D_RECT
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5
#endif //GL_UNSIGNED_INT_SAMPLER_2D_RECT
#ifndef GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#endif //GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
#ifndef GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#endif //GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
#ifndef GL_UNSIGNED_INT_SAMPLER_BUFFER
#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
#endif //GL_UNSIGNED_INT_SAMPLER_BUFFER
#ifndef GL_GEOMETRY_SHADER
#define GL_GEOMETRY_SHADER 0x8DD9
#endif //GL_GEOMETRY_SHADER
#ifndef GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#endif //GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
#ifndef GL_MAX_GEOMETRY_OUTPUT_VERTICES
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
#endif //GL_MAX_GEOMETRY_OUTPUT_VERTICES
#ifndef GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#endif //GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
#ifndef GL_ACTIVE_SUBROUTINES
#define GL_ACTIVE_SUBROUTINES 0x8DE5
#endif //GL_ACTIVE_SUBROUTINES
#ifndef GL_ACTIVE_SUBROUTINE_UNIFORMS
#define GL_ACTIVE_SUBROUTINE_UNIFORMS 0x8DE6
#endif //GL_ACTIVE_SUBROUTINE_UNIFORMS
#ifndef GL_MAX_SUBROUTINES
#define GL_MAX_SUBROUTINES 0x8DE7
#endif //GL_MAX_SUBROUTINES
#ifndef GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
#endif //GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS
#ifndef GL_LOW_FLOAT
#define GL_LOW_FLOAT 0x8DF0
#endif //GL_LOW_FLOAT
#ifndef GL_MEDIUM_FLOAT
#define GL_MEDIUM_FLOAT 0x8DF1
#endif //GL_MEDIUM_FLOAT
#ifndef GL_HIGH_FLOAT
#define GL_HIGH_FLOAT 0x8DF2
#endif //GL_HIGH_FLOAT
#ifndef GL_LOW_INT
#define GL_LOW_INT 0x8DF3
#endif //GL_LOW_INT
#ifndef GL_MEDIUM_INT
#define GL_MEDIUM_INT 0x8DF4
#endif //GL_MEDIUM_INT
#ifndef GL_HIGH_INT
#define GL_HIGH_INT 0x8DF5
#endif //GL_HIGH_INT
#ifndef GL_SHADER_BINARY_FORMATS
#define GL_SHADER_BINARY_FORMATS 0x8DF8
#endif //GL_SHADER_BINARY_FORMATS
#ifndef GL_NUM_SHADER_BINARY_FORMATS
#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
#endif //GL_NUM_SHADER_BINARY_FORMATS
#ifndef GL_SHADER_COMPILER
#define GL_SHADER_COMPILER 0x8DFA
#endif //GL_SHADER_COMPILER
#ifndef GL_MAX_VERTEX_UNIFORM_VECTORS
#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
#endif //GL_MAX_VERTEX_UNIFORM_VECTORS
#ifndef GL_MAX_VARYING_VECTORS
#define GL_MAX_VARYING_VECTORS 0x8DFC
#endif //GL_MAX_VARYING_VECTORS
#ifndef GL_MAX_FRAGMENT_UNIFORM_VECTORS
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
#endif //GL_MAX_FRAGMENT_UNIFORM_VECTORS
#ifndef GL_QUERY_WAIT
#define GL_QUERY_WAIT 0x8E13
#endif //GL_QUERY_WAIT
#ifndef GL_QUERY_NO_WAIT
#define GL_QUERY_NO_WAIT 0x8E14
#endif //GL_QUERY_NO_WAIT
#ifndef GL_QUERY_BY_REGION_WAIT
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#endif //GL_QUERY_BY_REGION_WAIT
#ifndef GL_QUERY_BY_REGION_NO_WAIT
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#endif //GL_QUERY_BY_REGION_NO_WAIT
#ifndef GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#endif //GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS
#ifndef GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#endif //GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS
#ifndef GL_TRANSFORM_FEEDBACK
#define GL_TRANSFORM_FEEDBACK 0x8E22
#endif //GL_TRANSFORM_FEEDBACK
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE
#ifndef GL_TRANSFORM_FEEDBACK_BINDING
#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
#endif //GL_TRANSFORM_FEEDBACK_BINDING
#ifndef GL_TIMESTAMP
#define GL_TIMESTAMP 0x8E28
#endif //GL_TIMESTAMP
#ifndef GL_TEXTURE_SWIZZLE_R
#define GL_TEXTURE_SWIZZLE_R 0x8E42
#endif //GL_TEXTURE_SWIZZLE_R
#ifndef GL_TEXTURE_SWIZZLE_G
#define GL_TEXTURE_SWIZZLE_G 0x8E43
#endif //GL_TEXTURE_SWIZZLE_G
#ifndef GL_TEXTURE_SWIZZLE_B
#define GL_TEXTURE_SWIZZLE_B 0x8E44
#endif //GL_TEXTURE_SWIZZLE_B
#ifndef GL_TEXTURE_SWIZZLE_A
#define GL_TEXTURE_SWIZZLE_A 0x8E45
#endif //GL_TEXTURE_SWIZZLE_A
#ifndef GL_TEXTURE_SWIZZLE_RGBA
#define GL_TEXTURE_SWIZZLE_RGBA 0x8E46
#endif //GL_TEXTURE_SWIZZLE_RGBA
#ifndef GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
#endif //GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS
#ifndef GL_ACTIVE_SUBROUTINE_MAX_LENGTH
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0x8E48
#endif //GL_ACTIVE_SUBROUTINE_MAX_LENGTH
#ifndef GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
#endif //GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH
#ifndef GL_NUM_COMPATIBLE_SUBROUTINES
#define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A
#endif //GL_NUM_COMPATIBLE_SUBROUTINES
#ifndef GL_COMPATIBLE_SUBROUTINES
#define GL_COMPATIBLE_SUBROUTINES 0x8E4B
#endif //GL_COMPATIBLE_SUBROUTINES
#ifndef GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#endif //GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
#ifndef GL_FIRST_VERTEX_CONVENTION
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#endif //GL_FIRST_VERTEX_CONVENTION
#ifndef GL_LAST_VERTEX_CONVENTION
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#endif //GL_LAST_VERTEX_CONVENTION
#ifndef GL_PROVOKING_VERTEX
#define GL_PROVOKING_VERTEX 0x8E4F
#endif //GL_PROVOKING_VERTEX
#ifndef GL_SAMPLE_POSITION
#define GL_SAMPLE_POSITION 0x8E50
#endif //GL_SAMPLE_POSITION
#ifndef GL_SAMPLE_MASK
#define GL_SAMPLE_MASK 0x8E51
#endif //GL_SAMPLE_MASK
#ifndef GL_SAMPLE_MASK_VALUE
#define GL_SAMPLE_MASK_VALUE 0x8E52
#endif //GL_SAMPLE_MASK_VALUE
#ifndef GL_MAX_SAMPLE_MASK_WORDS
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#endif //GL_MAX_SAMPLE_MASK_WORDS
#ifndef GL_MAX_GEOMETRY_SHADER_INVOCATIONS
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#endif //GL_MAX_GEOMETRY_SHADER_INVOCATIONS
#ifndef GL_MIN_FRAGMENT_INTERPOLATION_OFFSET
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#endif //GL_MIN_FRAGMENT_INTERPOLATION_OFFSET
#ifndef GL_MAX_FRAGMENT_INTERPOLATION_OFFSET
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#endif //GL_MAX_FRAGMENT_INTERPOLATION_OFFSET
#ifndef GL_FRAGMENT_INTERPOLATION_OFFSET_BITS
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#endif //GL_FRAGMENT_INTERPOLATION_OFFSET_BITS
#ifndef GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
#endif //GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET
#ifndef GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
#endif //GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET
#ifndef GL_MAX_TRANSFORM_FEEDBACK_BUFFERS
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
#endif //GL_MAX_TRANSFORM_FEEDBACK_BUFFERS
#ifndef GL_MAX_VERTEX_STREAMS
#define GL_MAX_VERTEX_STREAMS 0x8E71
#endif //GL_MAX_VERTEX_STREAMS
#ifndef GL_PATCH_VERTICES
#define GL_PATCH_VERTICES 0x8E72
#endif //GL_PATCH_VERTICES
#ifndef GL_PATCH_DEFAULT_INNER_LEVEL
#define GL_PATCH_DEFAULT_INNER_LEVEL 0x8E73
#endif //GL_PATCH_DEFAULT_INNER_LEVEL
#ifndef GL_PATCH_DEFAULT_OUTER_LEVEL
#define GL_PATCH_DEFAULT_OUTER_LEVEL 0x8E74
#endif //GL_PATCH_DEFAULT_OUTER_LEVEL
#ifndef GL_TESS_CONTROL_OUTPUT_VERTICES
#define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75
#endif //GL_TESS_CONTROL_OUTPUT_VERTICES
#ifndef GL_TESS_GEN_MODE
#define GL_TESS_GEN_MODE 0x8E76
#endif //GL_TESS_GEN_MODE
#ifndef GL_TESS_GEN_SPACING
#define GL_TESS_GEN_SPACING 0x8E77
#endif //GL_TESS_GEN_SPACING
#ifndef GL_TESS_GEN_VERTEX_ORDER
#define GL_TESS_GEN_VERTEX_ORDER 0x8E78
#endif //GL_TESS_GEN_VERTEX_ORDER
#ifndef GL_TESS_GEN_POINT_MODE
#define GL_TESS_GEN_POINT_MODE 0x8E79
#endif //GL_TESS_GEN_POINT_MODE
#ifndef GL_ISOLINES
#define GL_ISOLINES 0x8E7A
#endif //GL_ISOLINES
#ifndef GL_FRACTIONAL_ODD
#define GL_FRACTIONAL_ODD 0x8E7B
#endif //GL_FRACTIONAL_ODD
#ifndef GL_FRACTIONAL_EVEN
#define GL_FRACTIONAL_EVEN 0x8E7C
#endif //GL_FRACTIONAL_EVEN
#ifndef GL_MAX_PATCH_VERTICES
#define GL_MAX_PATCH_VERTICES 0x8E7D
#endif //GL_MAX_PATCH_VERTICES
#ifndef GL_MAX_TESS_GEN_LEVEL
#define GL_MAX_TESS_GEN_LEVEL 0x8E7E
#endif //GL_MAX_TESS_GEN_LEVEL
#ifndef GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#endif //GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS
#ifndef GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#endif //GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS
#ifndef GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#endif //GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS
#ifndef GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#endif //GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS
#ifndef GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#endif //GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS
#ifndef GL_MAX_TESS_PATCH_COMPONENTS
#define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84
#endif //GL_MAX_TESS_PATCH_COMPONENTS
#ifndef GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#endif //GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS
#ifndef GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#endif //GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS
#ifndef GL_TESS_EVALUATION_SHADER
#define GL_TESS_EVALUATION_SHADER 0x8E87
#endif //GL_TESS_EVALUATION_SHADER
#ifndef GL_TESS_CONTROL_SHADER
#define GL_TESS_CONTROL_SHADER 0x8E88
#endif //GL_TESS_CONTROL_SHADER
#ifndef GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#endif //GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS
#ifndef GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#endif //GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS
#ifndef GL_COPY_READ_BUFFER
#define GL_COPY_READ_BUFFER 0x8F36
#endif //GL_COPY_READ_BUFFER
#ifndef GL_COPY_WRITE_BUFFER
#define GL_COPY_WRITE_BUFFER 0x8F37
#endif //GL_COPY_WRITE_BUFFER
#ifndef GL_DRAW_INDIRECT_BUFFER
#define GL_DRAW_INDIRECT_BUFFER 0x8F3F
#endif //GL_DRAW_INDIRECT_BUFFER
#ifndef GL_DRAW_INDIRECT_BUFFER_BINDING
#define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43
#endif //GL_DRAW_INDIRECT_BUFFER_BINDING
#ifndef GL_DOUBLE_MAT2
#define GL_DOUBLE_MAT2 0x8F46
#endif //GL_DOUBLE_MAT2
#ifndef GL_DOUBLE_MAT3
#define GL_DOUBLE_MAT3 0x8F47
#endif //GL_DOUBLE_MAT3
#ifndef GL_DOUBLE_MAT4
#define GL_DOUBLE_MAT4 0x8F48
#endif //GL_DOUBLE_MAT4
#ifndef GL_DOUBLE_MAT2x3
#define GL_DOUBLE_MAT2x3 0x8F49
#endif //GL_DOUBLE_MAT2x3
#ifndef GL_DOUBLE_MAT2x4
#define GL_DOUBLE_MAT2x4 0x8F4A
#endif //GL_DOUBLE_MAT2x4
#ifndef GL_DOUBLE_MAT3x2
#define GL_DOUBLE_MAT3x2 0x8F4B
#endif //GL_DOUBLE_MAT3x2
#ifndef GL_DOUBLE_MAT3x4
#define GL_DOUBLE_MAT3x4 0x8F4C
#endif //GL_DOUBLE_MAT3x4
#ifndef GL_DOUBLE_MAT4x2
#define GL_DOUBLE_MAT4x2 0x8F4D
#endif //GL_DOUBLE_MAT4x2
#ifndef GL_DOUBLE_MAT4x3
#define GL_DOUBLE_MAT4x3 0x8F4E
#endif //GL_DOUBLE_MAT4x3
#ifndef GL_R8_SNORM
#define GL_R8_SNORM 0x8F94
#endif //GL_R8_SNORM
#ifndef GL_RG8_SNORM
#define GL_RG8_SNORM 0x8F95
#endif //GL_RG8_SNORM
#ifndef GL_RGB8_SNORM
#define GL_RGB8_SNORM 0x8F96
#endif //GL_RGB8_SNORM
#ifndef GL_RGBA8_SNORM
#define GL_RGBA8_SNORM 0x8F97
#endif //GL_RGBA8_SNORM
#ifndef GL_R16_SNORM
#define GL_R16_SNORM 0x8F98
#endif //GL_R16_SNORM
#ifndef GL_RG16_SNORM
#define GL_RG16_SNORM 0x8F99
#endif //GL_RG16_SNORM
#ifndef GL_RGB16_SNORM
#define GL_RGB16_SNORM 0x8F9A
#endif //GL_RGB16_SNORM
#ifndef GL_RGBA16_SNORM
#define GL_RGBA16_SNORM 0x8F9B
#endif //GL_RGBA16_SNORM
#ifndef GL_SIGNED_NORMALIZED
#define GL_SIGNED_NORMALIZED 0x8F9C
#endif //GL_SIGNED_NORMALIZED
#ifndef GL_PRIMITIVE_RESTART
#define GL_PRIMITIVE_RESTART 0x8F9D
#endif //GL_PRIMITIVE_RESTART
#ifndef GL_PRIMITIVE_RESTART_INDEX
#define GL_PRIMITIVE_RESTART_INDEX 0x8F9E
#endif //GL_PRIMITIVE_RESTART_INDEX
#ifndef GL_DOUBLE_VEC2
#define GL_DOUBLE_VEC2 0x8FFC
#endif //GL_DOUBLE_VEC2
#ifndef GL_DOUBLE_VEC3
#define GL_DOUBLE_VEC3 0x8FFD
#endif //GL_DOUBLE_VEC3
#ifndef GL_DOUBLE_VEC4
#define GL_DOUBLE_VEC4 0x8FFE
#endif //GL_DOUBLE_VEC4
#ifndef GL_TEXTURE_CUBE_MAP_ARRAY
#define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009
#endif //GL_TEXTURE_CUBE_MAP_ARRAY
#ifndef GL_TEXTURE_BINDING_CUBE_MAP_ARRAY
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#endif //GL_TEXTURE_BINDING_CUBE_MAP_ARRAY
#ifndef GL_PROXY_TEXTURE_CUBE_MAP_ARRAY
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY 0x900B
#endif //GL_PROXY_TEXTURE_CUBE_MAP_ARRAY
#ifndef GL_SAMPLER_CUBE_MAP_ARRAY
#define GL_SAMPLER_CUBE_MAP_ARRAY 0x900C
#endif //GL_SAMPLER_CUBE_MAP_ARRAY
#ifndef GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0x900D
#endif //GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW
#ifndef GL_INT_SAMPLER_CUBE_MAP_ARRAY
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0x900E
#endif //GL_INT_SAMPLER_CUBE_MAP_ARRAY
#ifndef GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
#endif //GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY
#ifndef GL_RGB10_A2UI
#define GL_RGB10_A2UI 0x906F
#endif //GL_RGB10_A2UI
#ifndef GL_TEXTURE_2D_MULTISAMPLE
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#endif //GL_TEXTURE_2D_MULTISAMPLE
#ifndef GL_PROXY_TEXTURE_2D_MULTISAMPLE
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
#endif //GL_PROXY_TEXTURE_2D_MULTISAMPLE
#ifndef GL_TEXTURE_2D_MULTISAMPLE_ARRAY
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#endif //GL_TEXTURE_2D_MULTISAMPLE_ARRAY
#ifndef GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#endif //GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
#ifndef GL_TEXTURE_BINDING_2D_MULTISAMPLE
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#endif //GL_TEXTURE_BINDING_2D_MULTISAMPLE
#ifndef GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#endif //GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
#ifndef GL_TEXTURE_SAMPLES
#define GL_TEXTURE_SAMPLES 0x9106
#endif //GL_TEXTURE_SAMPLES
#ifndef GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#endif //GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
#ifndef GL_SAMPLER_2D_MULTISAMPLE
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#endif //GL_SAMPLER_2D_MULTISAMPLE
#ifndef GL_INT_SAMPLER_2D_MULTISAMPLE
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#endif //GL_INT_SAMPLER_2D_MULTISAMPLE
#ifndef GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#endif //GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
#ifndef GL_SAMPLER_2D_MULTISAMPLE_ARRAY
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#endif //GL_SAMPLER_2D_MULTISAMPLE_ARRAY
#ifndef GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#endif //GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
#ifndef GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#endif //GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
#ifndef GL_MAX_COLOR_TEXTURE_SAMPLES
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#endif //GL_MAX_COLOR_TEXTURE_SAMPLES
#ifndef GL_MAX_DEPTH_TEXTURE_SAMPLES
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#endif //GL_MAX_DEPTH_TEXTURE_SAMPLES
#ifndef GL_MAX_INTEGER_SAMPLES
#define GL_MAX_INTEGER_SAMPLES 0x9110
#endif //GL_MAX_INTEGER_SAMPLES
#ifndef GL_MAX_SERVER_WAIT_TIMEOUT
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#endif //GL_MAX_SERVER_WAIT_TIMEOUT
#ifndef GL_OBJECT_TYPE
#define GL_OBJECT_TYPE 0x9112
#endif //GL_OBJECT_TYPE
#ifndef GL_SYNC_CONDITION
#define GL_SYNC_CONDITION 0x9113
#endif //GL_SYNC_CONDITION
#ifndef GL_SYNC_STATUS
#define GL_SYNC_STATUS 0x9114
#endif //GL_SYNC_STATUS
#ifndef GL_SYNC_FLAGS
#define GL_SYNC_FLAGS 0x9115
#endif //GL_SYNC_FLAGS
#ifndef GL_SYNC_FENCE
#define GL_SYNC_FENCE 0x9116
#endif //GL_SYNC_FENCE
#ifndef GL_SYNC_GPU_COMMANDS_COMPLETE
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#endif //GL_SYNC_GPU_COMMANDS_COMPLETE
#ifndef GL_UNSIGNALED
#define GL_UNSIGNALED 0x9118
#endif //GL_UNSIGNALED
#ifndef GL_SIGNALED
#define GL_SIGNALED 0x9119
#endif //GL_SIGNALED
#ifndef GL_ALREADY_SIGNALED
#define GL_ALREADY_SIGNALED 0x911A
#endif //GL_ALREADY_SIGNALED
#ifndef GL_TIMEOUT_EXPIRED
#define GL_TIMEOUT_EXPIRED 0x911B
#endif //GL_TIMEOUT_EXPIRED
#ifndef GL_CONDITION_SATISFIED
#define GL_CONDITION_SATISFIED 0x911C
#endif //GL_CONDITION_SATISFIED
#ifndef GL_WAIT_FAILED
#define GL_WAIT_FAILED 0x911D
#endif //GL_WAIT_FAILED
#ifndef GL_BUFFER_ACCESS_FLAGS
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#endif //GL_BUFFER_ACCESS_FLAGS
#ifndef GL_BUFFER_MAP_LENGTH
#define GL_BUFFER_MAP_LENGTH 0x9120
#endif //GL_BUFFER_MAP_LENGTH
#ifndef GL_BUFFER_MAP_OFFSET
#define GL_BUFFER_MAP_OFFSET 0x9121
#endif //GL_BUFFER_MAP_OFFSET
#ifndef GL_MAX_VERTEX_OUTPUT_COMPONENTS
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
#endif //GL_MAX_VERTEX_OUTPUT_COMPONENTS
#ifndef GL_MAX_GEOMETRY_INPUT_COMPONENTS
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
#endif //GL_MAX_GEOMETRY_INPUT_COMPONENTS
#ifndef GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#endif //GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
#ifndef GL_MAX_FRAGMENT_INPUT_COMPONENTS
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
#endif //GL_MAX_FRAGMENT_INPUT_COMPONENTS
#ifndef GL_CONTEXT_PROFILE_MASK
#define GL_CONTEXT_PROFILE_MASK 0x9126
#endif //GL_CONTEXT_PROFILE_MASK
#ifndef GL_ALL_SHADER_BITS
#define GL_ALL_SHADER_BITS 0xFFFFFFFF
#endif //GL_ALL_SHADER_BITS
#ifndef GL_INVALID_INDEX
#define GL_INVALID_INDEX 0xFFFFFFFF
#endif //GL_INVALID_INDEX
#ifndef GL_TIMEOUT_IGNORED
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFF
#endif //GL_TIMEOUT_IGNORED
#ifndef GL_TRUE
#define GL_TRUE 1
#endif //GL_TRUE
#ifndef GL_ONE
#define GL_ONE 1
#endif //GL_ONE
extern "C" {
extern void glBindTexture(GLenum,GLuint);
extern void glBlendFunc(GLenum,GLenum);
extern void glClear(GLbitfield);
extern void glClearColor(GLfloat,GLfloat,GLfloat,GLfloat);
extern void glClearDepth(GLdouble);
extern void glClearStencil(GLint);
extern void glColorMask(GLboolean,GLboolean,GLboolean,GLboolean);
extern void glCopyTexImage1D(GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLint);
extern void glCopyTexImage2D(GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLsizei,GLint);
extern void glCopyTexSubImage1D(GLenum,GLint,GLint,GLint,GLint,GLsizei);
extern void glCopyTexSubImage2D(GLenum,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
extern void glCullFace(GLenum);
extern void glDeleteTextures(GLsizei,const GLuint *);
extern void glDepthFunc(GLenum);
extern void glDepthMask(GLboolean);
extern void glDepthRange(GLdouble,GLdouble);
extern void glDisable(GLenum);
extern void glDrawArrays(GLenum,GLint,GLsizei);
extern void glDrawBuffer(GLenum);
extern void glDrawElements(GLenum,GLsizei,GLenum,const void *);
extern void glEnable(GLenum);
extern void glFinish();
extern void glFlush();
extern void glFrontFace(GLenum);
extern void glGenTextures(GLsizei,GLuint *);
extern void glGetBooleanv(GLenum,GLboolean *);
extern void glGetDoublev(GLenum,GLdouble *);
extern GLenum glGetError();
extern void glGetFloatv(GLenum,GLfloat *);
extern void glGetIntegerv(GLenum,GLint *);
extern const GLubyte * glGetString(GLenum);
extern void glGetTexImage(GLenum,GLint,GLenum,GLenum,void *);
extern void glGetTexLevelParameterfv(GLenum,GLint,GLenum,GLfloat *);
extern void glGetTexLevelParameteriv(GLenum,GLint,GLenum,GLint *);
extern void glGetTexParameterfv(GLenum,GLenum,GLfloat *);
extern void glGetTexParameteriv(GLenum,GLenum,GLint *);
extern void glHint(GLenum,GLenum);
extern GLboolean glIsEnabled(GLenum);
extern GLboolean glIsTexture(GLuint);
extern void glLineWidth(GLfloat);
extern void glLogicOp(GLenum);
extern void glPixelStoref(GLenum,GLfloat);
extern void glPixelStorei(GLenum,GLint);
extern void glPointSize(GLfloat);
extern void glPolygonMode(GLenum,GLenum);
extern void glPolygonOffset(GLfloat,GLfloat);
extern void glReadBuffer(GLenum);
extern void glReadPixels(GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,void *);
extern void glScissor(GLint,GLint,GLsizei,GLsizei);
extern void glStencilFunc(GLenum,GLint,GLuint);
extern void glStencilMask(GLuint);
extern void glStencilOp(GLenum,GLenum,GLenum);
extern void glTexImage1D(GLenum,GLint,GLint,GLsizei,GLint,GLenum,GLenum,const void *);
extern void glTexImage2D(GLenum,GLint,GLint,GLsizei,GLsizei,GLint,GLenum,GLenum,const void *);
extern void glTexParameterf(GLenum,GLenum,GLfloat);
extern void glTexParameterfv(GLenum,GLenum,const GLfloat *);
extern void glTexParameteri(GLenum,GLenum,GLint);
extern void glTexParameteriv(GLenum,GLenum,const GLint *);
extern void glTexSubImage1D(GLenum,GLint,GLint,GLsizei,GLenum,GLenum,const void *);
extern void glTexSubImage2D(GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,const void *);
extern void glViewport(GLint,GLint,GLsizei,GLsizei);
}
namespace gl{

#ifndef	GL_HPP_FUNDEF_ActiveShaderProgram
#define GL_HPP_FUNDEF_ActiveShaderProgram
typedef void (*PFNGLACTIVESHADERPROGRAMPROC_HPP)(GLuint,GLuint);
static inline void ActiveShaderProgram(GLuint pipeline1,GLuint program1)
{
	static PFNGLACTIVESHADERPROGRAMPROC_HPP fn=reinterpret_cast<PFNGLACTIVESHADERPROGRAMPROC_HPP>(_impl::_get_proc_address("glActiveShaderProgram",4,1));
	 fn(pipeline1,program1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ActiveTexture
#define GL_HPP_FUNDEF_ActiveTexture
typedef void (*PFNGLACTIVETEXTUREPROC_HPP)(GLenum);
static inline void ActiveTexture(GLenum texture1)
{
	static PFNGLACTIVETEXTUREPROC_HPP fn=reinterpret_cast<PFNGLACTIVETEXTUREPROC_HPP>(_impl::_get_proc_address("glActiveTexture",4,1));
	 fn(texture1);
}
#endif

#ifndef	GL_HPP_FUNDEF_AttachShader
#define GL_HPP_FUNDEF_AttachShader
typedef void (*PFNGLATTACHSHADERPROC_HPP)(GLuint,GLuint);
static inline void AttachShader(GLuint program1,GLuint shader1)
{
	static PFNGLATTACHSHADERPROC_HPP fn=reinterpret_cast<PFNGLATTACHSHADERPROC_HPP>(_impl::_get_proc_address("glAttachShader",4,1));
	 fn(program1,shader1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BeginConditionalRender
#define GL_HPP_FUNDEF_BeginConditionalRender
typedef void (*PFNGLBEGINCONDITIONALRENDERPROC_HPP)(GLuint,GLenum);
static inline void BeginConditionalRender(GLuint id1,GLenum mode1)
{
	static PFNGLBEGINCONDITIONALRENDERPROC_HPP fn=reinterpret_cast<PFNGLBEGINCONDITIONALRENDERPROC_HPP>(_impl::_get_proc_address("glBeginConditionalRender",4,1));
	 fn(id1,mode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BeginQuery
#define GL_HPP_FUNDEF_BeginQuery
typedef void (*PFNGLBEGINQUERYPROC_HPP)(GLenum,GLuint);
static inline void BeginQuery(GLenum target1,GLuint id1)
{
	static PFNGLBEGINQUERYPROC_HPP fn=reinterpret_cast<PFNGLBEGINQUERYPROC_HPP>(_impl::_get_proc_address("glBeginQuery",4,1));
	 fn(target1,id1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BeginQueryIndexed
#define GL_HPP_FUNDEF_BeginQueryIndexed
typedef void (*PFNGLBEGINQUERYINDEXEDPROC_HPP)(GLenum,GLuint,GLuint);
static inline void BeginQueryIndexed(GLenum target1,GLuint index1,GLuint id1)
{
	static PFNGLBEGINQUERYINDEXEDPROC_HPP fn=reinterpret_cast<PFNGLBEGINQUERYINDEXEDPROC_HPP>(_impl::_get_proc_address("glBeginQueryIndexed",4,1));
	 fn(target1,index1,id1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BeginTransformFeedback
#define GL_HPP_FUNDEF_BeginTransformFeedback
typedef void (*PFNGLBEGINTRANSFORMFEEDBACKPROC_HPP)(GLenum);
static inline void BeginTransformFeedback(GLenum primitiveMode1)
{
	static PFNGLBEGINTRANSFORMFEEDBACKPROC_HPP fn=reinterpret_cast<PFNGLBEGINTRANSFORMFEEDBACKPROC_HPP>(_impl::_get_proc_address("glBeginTransformFeedback",4,1));
	 fn(primitiveMode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindAttribLocation
#define GL_HPP_FUNDEF_BindAttribLocation
typedef void (*PFNGLBINDATTRIBLOCATIONPROC_HPP)(GLuint,GLuint,const GLchar *);
static inline void BindAttribLocation(GLuint program1,GLuint index1,const GLchar * name1)
{
	static PFNGLBINDATTRIBLOCATIONPROC_HPP fn=reinterpret_cast<PFNGLBINDATTRIBLOCATIONPROC_HPP>(_impl::_get_proc_address("glBindAttribLocation",4,1));
	 fn(program1,index1,name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindBuffer
#define GL_HPP_FUNDEF_BindBuffer
typedef void (*PFNGLBINDBUFFERPROC_HPP)(GLenum,GLuint);
static inline void BindBuffer(GLenum target1,GLuint buffer1)
{
	static PFNGLBINDBUFFERPROC_HPP fn=reinterpret_cast<PFNGLBINDBUFFERPROC_HPP>(_impl::_get_proc_address("glBindBuffer",4,1));
	 fn(target1,buffer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindBufferBase
#define GL_HPP_FUNDEF_BindBufferBase
typedef void (*PFNGLBINDBUFFERBASEPROC_HPP)(GLenum,GLuint,GLuint);
static inline void BindBufferBase(GLenum target1,GLuint index1,GLuint buffer1)
{
	static PFNGLBINDBUFFERBASEPROC_HPP fn=reinterpret_cast<PFNGLBINDBUFFERBASEPROC_HPP>(_impl::_get_proc_address("glBindBufferBase",4,1));
	 fn(target1,index1,buffer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindBufferRange
#define GL_HPP_FUNDEF_BindBufferRange
typedef void (*PFNGLBINDBUFFERRANGEPROC_HPP)(GLenum,GLuint,GLuint,GLintptr,GLsizeiptr);
static inline void BindBufferRange(GLenum target1,GLuint index1,GLuint buffer1,GLintptr offset1,GLsizeiptr size1)
{
	static PFNGLBINDBUFFERRANGEPROC_HPP fn=reinterpret_cast<PFNGLBINDBUFFERRANGEPROC_HPP>(_impl::_get_proc_address("glBindBufferRange",4,1));
	 fn(target1,index1,buffer1,offset1,size1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindFragDataLocation
#define GL_HPP_FUNDEF_BindFragDataLocation
typedef void (*PFNGLBINDFRAGDATALOCATIONPROC_HPP)(GLuint,GLuint,const GLchar *);
static inline void BindFragDataLocation(GLuint program1,GLuint color1,const GLchar * name1)
{
	static PFNGLBINDFRAGDATALOCATIONPROC_HPP fn=reinterpret_cast<PFNGLBINDFRAGDATALOCATIONPROC_HPP>(_impl::_get_proc_address("glBindFragDataLocation",4,1));
	 fn(program1,color1,name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindFragDataLocationIndexed
#define GL_HPP_FUNDEF_BindFragDataLocationIndexed
typedef void (*PFNGLBINDFRAGDATALOCATIONINDEXEDPROC_HPP)(GLuint,GLuint,GLuint,const GLchar *);
static inline void BindFragDataLocationIndexed(GLuint program1,GLuint colorNumber1,GLuint index1,const GLchar * name1)
{
	static PFNGLBINDFRAGDATALOCATIONINDEXEDPROC_HPP fn=reinterpret_cast<PFNGLBINDFRAGDATALOCATIONINDEXEDPROC_HPP>(_impl::_get_proc_address("glBindFragDataLocationIndexed",4,1));
	 fn(program1,colorNumber1,index1,name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindFramebuffer
#define GL_HPP_FUNDEF_BindFramebuffer
typedef void (*PFNGLBINDFRAMEBUFFERPROC_HPP)(GLenum,GLuint);
static inline void BindFramebuffer(GLenum target1,GLuint framebuffer1)
{
	static PFNGLBINDFRAMEBUFFERPROC_HPP fn=reinterpret_cast<PFNGLBINDFRAMEBUFFERPROC_HPP>(_impl::_get_proc_address("glBindFramebuffer",4,1));
	 fn(target1,framebuffer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindProgramPipeline
#define GL_HPP_FUNDEF_BindProgramPipeline
typedef void (*PFNGLBINDPROGRAMPIPELINEPROC_HPP)(GLuint);
static inline void BindProgramPipeline(GLuint pipeline1)
{
	static PFNGLBINDPROGRAMPIPELINEPROC_HPP fn=reinterpret_cast<PFNGLBINDPROGRAMPIPELINEPROC_HPP>(_impl::_get_proc_address("glBindProgramPipeline",4,1));
	 fn(pipeline1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindRenderbuffer
#define GL_HPP_FUNDEF_BindRenderbuffer
typedef void (*PFNGLBINDRENDERBUFFERPROC_HPP)(GLenum,GLuint);
static inline void BindRenderbuffer(GLenum target1,GLuint renderbuffer1)
{
	static PFNGLBINDRENDERBUFFERPROC_HPP fn=reinterpret_cast<PFNGLBINDRENDERBUFFERPROC_HPP>(_impl::_get_proc_address("glBindRenderbuffer",4,1));
	 fn(target1,renderbuffer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindSampler
#define GL_HPP_FUNDEF_BindSampler
typedef void (*PFNGLBINDSAMPLERPROC_HPP)(GLuint,GLuint);
static inline void BindSampler(GLuint unit1,GLuint sampler1)
{
	static PFNGLBINDSAMPLERPROC_HPP fn=reinterpret_cast<PFNGLBINDSAMPLERPROC_HPP>(_impl::_get_proc_address("glBindSampler",4,1));
	 fn(unit1,sampler1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindTexture
#define GL_HPP_FUNDEF_BindTexture
typedef void (*PFNGLBINDTEXTUREPROC_HPP)(GLenum,GLuint);
static inline void BindTexture(GLenum target1,GLuint texture1)
{
	static PFNGLBINDTEXTUREPROC_HPP fn=reinterpret_cast<PFNGLBINDTEXTUREPROC_HPP>(_impl::_get_proc_address("glBindTexture",4,1));
	 fn(target1,texture1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindTransformFeedback
#define GL_HPP_FUNDEF_BindTransformFeedback
typedef void (*PFNGLBINDTRANSFORMFEEDBACKPROC_HPP)(GLenum,GLuint);
static inline void BindTransformFeedback(GLenum target1,GLuint id1)
{
	static PFNGLBINDTRANSFORMFEEDBACKPROC_HPP fn=reinterpret_cast<PFNGLBINDTRANSFORMFEEDBACKPROC_HPP>(_impl::_get_proc_address("glBindTransformFeedback",4,1));
	 fn(target1,id1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindVertexArray
#define GL_HPP_FUNDEF_BindVertexArray
typedef void (*PFNGLBINDVERTEXARRAYPROC_HPP)(GLuint);
static inline void BindVertexArray(GLuint array1)
{
	static PFNGLBINDVERTEXARRAYPROC_HPP fn=reinterpret_cast<PFNGLBINDVERTEXARRAYPROC_HPP>(_impl::_get_proc_address("glBindVertexArray",4,1));
	 fn(array1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BlendColor
#define GL_HPP_FUNDEF_BlendColor
typedef void (*PFNGLBLENDCOLORPROC_HPP)(GLfloat,GLfloat,GLfloat,GLfloat);
static inline void BlendColor(GLfloat red1,GLfloat green1,GLfloat blue1,GLfloat alpha1)
{
	static PFNGLBLENDCOLORPROC_HPP fn=reinterpret_cast<PFNGLBLENDCOLORPROC_HPP>(_impl::_get_proc_address("glBlendColor",4,1));
	 fn(red1,green1,blue1,alpha1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BlendEquation
#define GL_HPP_FUNDEF_BlendEquation
typedef void (*PFNGLBLENDEQUATIONPROC_HPP)(GLenum);
static inline void BlendEquation(GLenum mode1)
{
	static PFNGLBLENDEQUATIONPROC_HPP fn=reinterpret_cast<PFNGLBLENDEQUATIONPROC_HPP>(_impl::_get_proc_address("glBlendEquation",4,1));
	 fn(mode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BlendEquationSeparate
#define GL_HPP_FUNDEF_BlendEquationSeparate
typedef void (*PFNGLBLENDEQUATIONSEPARATEPROC_HPP)(GLenum,GLenum);
static inline void BlendEquationSeparate(GLenum modeRGB1,GLenum modeAlpha1)
{
	static PFNGLBLENDEQUATIONSEPARATEPROC_HPP fn=reinterpret_cast<PFNGLBLENDEQUATIONSEPARATEPROC_HPP>(_impl::_get_proc_address("glBlendEquationSeparate",4,1));
	 fn(modeRGB1,modeAlpha1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BlendEquationSeparatei
#define GL_HPP_FUNDEF_BlendEquationSeparatei
typedef void (*PFNGLBLENDEQUATIONSEPARATEIPROC_HPP)(GLuint,GLenum,GLenum);
static inline void BlendEquationSeparatei(GLuint buf1,GLenum modeRGB1,GLenum modeAlpha1)
{
	static PFNGLBLENDEQUATIONSEPARATEIPROC_HPP fn=reinterpret_cast<PFNGLBLENDEQUATIONSEPARATEIPROC_HPP>(_impl::_get_proc_address("glBlendEquationSeparatei",4,1));
	 fn(buf1,modeRGB1,modeAlpha1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BlendEquationi
#define GL_HPP_FUNDEF_BlendEquationi
typedef void (*PFNGLBLENDEQUATIONIPROC_HPP)(GLuint,GLenum);
static inline void BlendEquationi(GLuint buf1,GLenum mode1)
{
	static PFNGLBLENDEQUATIONIPROC_HPP fn=reinterpret_cast<PFNGLBLENDEQUATIONIPROC_HPP>(_impl::_get_proc_address("glBlendEquationi",4,1));
	 fn(buf1,mode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BlendFunc
#define GL_HPP_FUNDEF_BlendFunc
typedef void (*PFNGLBLENDFUNCPROC_HPP)(GLenum,GLenum);
static inline void BlendFunc(GLenum sfactor1,GLenum dfactor1)
{
	static PFNGLBLENDFUNCPROC_HPP fn=reinterpret_cast<PFNGLBLENDFUNCPROC_HPP>(_impl::_get_proc_address("glBlendFunc",4,1));
	 fn(sfactor1,dfactor1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BlendFuncSeparate
#define GL_HPP_FUNDEF_BlendFuncSeparate
typedef void (*PFNGLBLENDFUNCSEPARATEPROC_HPP)(GLenum,GLenum,GLenum,GLenum);
static inline void BlendFuncSeparate(GLenum sfactorRGB1,GLenum dfactorRGB1,GLenum sfactorAlpha1,GLenum dfactorAlpha1)
{
	static PFNGLBLENDFUNCSEPARATEPROC_HPP fn=reinterpret_cast<PFNGLBLENDFUNCSEPARATEPROC_HPP>(_impl::_get_proc_address("glBlendFuncSeparate",4,1));
	 fn(sfactorRGB1,dfactorRGB1,sfactorAlpha1,dfactorAlpha1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BlendFuncSeparatei
#define GL_HPP_FUNDEF_BlendFuncSeparatei
typedef void (*PFNGLBLENDFUNCSEPARATEIPROC_HPP)(GLuint,GLenum,GLenum,GLenum,GLenum);
static inline void BlendFuncSeparatei(GLuint buf1,GLenum srcRGB1,GLenum dstRGB1,GLenum srcAlpha1,GLenum dstAlpha1)
{
	static PFNGLBLENDFUNCSEPARATEIPROC_HPP fn=reinterpret_cast<PFNGLBLENDFUNCSEPARATEIPROC_HPP>(_impl::_get_proc_address("glBlendFuncSeparatei",4,1));
	 fn(buf1,srcRGB1,dstRGB1,srcAlpha1,dstAlpha1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BlendFunci
#define GL_HPP_FUNDEF_BlendFunci
typedef void (*PFNGLBLENDFUNCIPROC_HPP)(GLuint,GLenum,GLenum);
static inline void BlendFunci(GLuint buf1,GLenum src1,GLenum dst1)
{
	static PFNGLBLENDFUNCIPROC_HPP fn=reinterpret_cast<PFNGLBLENDFUNCIPROC_HPP>(_impl::_get_proc_address("glBlendFunci",4,1));
	 fn(buf1,src1,dst1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BlitFramebuffer
#define GL_HPP_FUNDEF_BlitFramebuffer
typedef void (*PFNGLBLITFRAMEBUFFERPROC_HPP)(GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLbitfield,GLenum);
static inline void BlitFramebuffer(GLint srcX01,GLint srcY01,GLint srcX11,GLint srcY11,GLint dstX01,GLint dstY01,GLint dstX11,GLint dstY11,GLbitfield mask1,GLenum filter1)
{
	static PFNGLBLITFRAMEBUFFERPROC_HPP fn=reinterpret_cast<PFNGLBLITFRAMEBUFFERPROC_HPP>(_impl::_get_proc_address("glBlitFramebuffer",4,1));
	 fn(srcX01,srcY01,srcX11,srcY11,dstX01,dstY01,dstX11,dstY11,mask1,filter1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BufferData
#define GL_HPP_FUNDEF_BufferData
typedef void (*PFNGLBUFFERDATAPROC_HPP)(GLenum,GLsizeiptr,const void *,GLenum);
static inline void BufferData(GLenum target1,GLsizeiptr size1,const void * data1,GLenum usage1)
{
	static PFNGLBUFFERDATAPROC_HPP fn=reinterpret_cast<PFNGLBUFFERDATAPROC_HPP>(_impl::_get_proc_address("glBufferData",4,1));
	 fn(target1,size1,data1,usage1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BufferSubData
#define GL_HPP_FUNDEF_BufferSubData
typedef void (*PFNGLBUFFERSUBDATAPROC_HPP)(GLenum,GLintptr,GLsizeiptr,const void *);
static inline void BufferSubData(GLenum target1,GLintptr offset1,GLsizeiptr size1,const void * data1)
{
	static PFNGLBUFFERSUBDATAPROC_HPP fn=reinterpret_cast<PFNGLBUFFERSUBDATAPROC_HPP>(_impl::_get_proc_address("glBufferSubData",4,1));
	 fn(target1,offset1,size1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CheckFramebufferStatus
#define GL_HPP_FUNDEF_CheckFramebufferStatus
typedef GLenum (*PFNGLCHECKFRAMEBUFFERSTATUSPROC_HPP)(GLenum);
static inline GLenum CheckFramebufferStatus(GLenum target1)
{
	static PFNGLCHECKFRAMEBUFFERSTATUSPROC_HPP fn=reinterpret_cast<PFNGLCHECKFRAMEBUFFERSTATUSPROC_HPP>(_impl::_get_proc_address("glCheckFramebufferStatus",4,1));
	return fn(target1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ClampColor
#define GL_HPP_FUNDEF_ClampColor
typedef void (*PFNGLCLAMPCOLORPROC_HPP)(GLenum,GLenum);
static inline void ClampColor(GLenum target1,GLenum clamp1)
{
	static PFNGLCLAMPCOLORPROC_HPP fn=reinterpret_cast<PFNGLCLAMPCOLORPROC_HPP>(_impl::_get_proc_address("glClampColor",4,1));
	 fn(target1,clamp1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Clear
#define GL_HPP_FUNDEF_Clear
typedef void (*PFNGLCLEARPROC_HPP)(GLbitfield);
static inline void Clear(GLbitfield mask1)
{
	static PFNGLCLEARPROC_HPP fn=reinterpret_cast<PFNGLCLEARPROC_HPP>(_impl::_get_proc_address("glClear",4,1));
	 fn(mask1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ClearBufferfi
#define GL_HPP_FUNDEF_ClearBufferfi
typedef void (*PFNGLCLEARBUFFERFIPROC_HPP)(GLenum,GLint,GLfloat,GLint);
static inline void ClearBufferfi(GLenum buffer1,GLint drawbuffer1,GLfloat depth1,GLint stencil1)
{
	static PFNGLCLEARBUFFERFIPROC_HPP fn=reinterpret_cast<PFNGLCLEARBUFFERFIPROC_HPP>(_impl::_get_proc_address("glClearBufferfi",4,1));
	 fn(buffer1,drawbuffer1,depth1,stencil1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ClearBufferfv
#define GL_HPP_FUNDEF_ClearBufferfv
typedef void (*PFNGLCLEARBUFFERFVPROC_HPP)(GLenum,GLint,const GLfloat *);
static inline void ClearBufferfv(GLenum buffer1,GLint drawbuffer1,const GLfloat * value1)
{
	static PFNGLCLEARBUFFERFVPROC_HPP fn=reinterpret_cast<PFNGLCLEARBUFFERFVPROC_HPP>(_impl::_get_proc_address("glClearBufferfv",4,1));
	 fn(buffer1,drawbuffer1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ClearBufferiv
#define GL_HPP_FUNDEF_ClearBufferiv
typedef void (*PFNGLCLEARBUFFERIVPROC_HPP)(GLenum,GLint,const GLint *);
static inline void ClearBufferiv(GLenum buffer1,GLint drawbuffer1,const GLint * value1)
{
	static PFNGLCLEARBUFFERIVPROC_HPP fn=reinterpret_cast<PFNGLCLEARBUFFERIVPROC_HPP>(_impl::_get_proc_address("glClearBufferiv",4,1));
	 fn(buffer1,drawbuffer1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ClearBufferuiv
#define GL_HPP_FUNDEF_ClearBufferuiv
typedef void (*PFNGLCLEARBUFFERUIVPROC_HPP)(GLenum,GLint,const GLuint *);
static inline void ClearBufferuiv(GLenum buffer1,GLint drawbuffer1,const GLuint * value1)
{
	static PFNGLCLEARBUFFERUIVPROC_HPP fn=reinterpret_cast<PFNGLCLEARBUFFERUIVPROC_HPP>(_impl::_get_proc_address("glClearBufferuiv",4,1));
	 fn(buffer1,drawbuffer1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ClearColor
#define GL_HPP_FUNDEF_ClearColor
typedef void (*PFNGLCLEARCOLORPROC_HPP)(GLfloat,GLfloat,GLfloat,GLfloat);
static inline void ClearColor(GLfloat red1,GLfloat green1,GLfloat blue1,GLfloat alpha1)
{
	static PFNGLCLEARCOLORPROC_HPP fn=reinterpret_cast<PFNGLCLEARCOLORPROC_HPP>(_impl::_get_proc_address("glClearColor",4,1));
	 fn(red1,green1,blue1,alpha1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ClearDepth
#define GL_HPP_FUNDEF_ClearDepth
typedef void (*PFNGLCLEARDEPTHPROC_HPP)(GLdouble);
static inline void ClearDepth(GLdouble depth1)
{
	static PFNGLCLEARDEPTHPROC_HPP fn=reinterpret_cast<PFNGLCLEARDEPTHPROC_HPP>(_impl::_get_proc_address("glClearDepth",4,1));
	 fn(depth1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ClearDepthf
#define GL_HPP_FUNDEF_ClearDepthf
typedef void (*PFNGLCLEARDEPTHFPROC_HPP)(GLfloat);
static inline void ClearDepthf(GLfloat d1)
{
	static PFNGLCLEARDEPTHFPROC_HPP fn=reinterpret_cast<PFNGLCLEARDEPTHFPROC_HPP>(_impl::_get_proc_address("glClearDepthf",4,1));
	 fn(d1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ClearStencil
#define GL_HPP_FUNDEF_ClearStencil
typedef void (*PFNGLCLEARSTENCILPROC_HPP)(GLint);
static inline void ClearStencil(GLint s1)
{
	static PFNGLCLEARSTENCILPROC_HPP fn=reinterpret_cast<PFNGLCLEARSTENCILPROC_HPP>(_impl::_get_proc_address("glClearStencil",4,1));
	 fn(s1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ClientWaitSync
#define GL_HPP_FUNDEF_ClientWaitSync
typedef GLenum (*PFNGLCLIENTWAITSYNCPROC_HPP)(GLsync,GLbitfield,GLuint64);
static inline GLenum ClientWaitSync(GLsync sync1,GLbitfield flags1,GLuint64 timeout1)
{
	static PFNGLCLIENTWAITSYNCPROC_HPP fn=reinterpret_cast<PFNGLCLIENTWAITSYNCPROC_HPP>(_impl::_get_proc_address("glClientWaitSync",4,1));
	return fn(sync1,flags1,timeout1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ColorMask
#define GL_HPP_FUNDEF_ColorMask
typedef void (*PFNGLCOLORMASKPROC_HPP)(GLboolean,GLboolean,GLboolean,GLboolean);
static inline void ColorMask(GLboolean red1,GLboolean green1,GLboolean blue1,GLboolean alpha1)
{
	static PFNGLCOLORMASKPROC_HPP fn=reinterpret_cast<PFNGLCOLORMASKPROC_HPP>(_impl::_get_proc_address("glColorMask",4,1));
	 fn(red1,green1,blue1,alpha1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ColorMaski
#define GL_HPP_FUNDEF_ColorMaski
typedef void (*PFNGLCOLORMASKIPROC_HPP)(GLuint,GLboolean,GLboolean,GLboolean,GLboolean);
static inline void ColorMaski(GLuint index1,GLboolean r1,GLboolean g1,GLboolean b1,GLboolean a1)
{
	static PFNGLCOLORMASKIPROC_HPP fn=reinterpret_cast<PFNGLCOLORMASKIPROC_HPP>(_impl::_get_proc_address("glColorMaski",4,1));
	 fn(index1,r1,g1,b1,a1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CompileShader
#define GL_HPP_FUNDEF_CompileShader
typedef void (*PFNGLCOMPILESHADERPROC_HPP)(GLuint);
static inline void CompileShader(GLuint shader1)
{
	static PFNGLCOMPILESHADERPROC_HPP fn=reinterpret_cast<PFNGLCOMPILESHADERPROC_HPP>(_impl::_get_proc_address("glCompileShader",4,1));
	 fn(shader1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CompressedTexImage1D
#define GL_HPP_FUNDEF_CompressedTexImage1D
typedef void (*PFNGLCOMPRESSEDTEXIMAGE1DPROC_HPP)(GLenum,GLint,GLenum,GLsizei,GLint,GLsizei,const void *);
static inline void CompressedTexImage1D(GLenum target1,GLint level1,GLenum internalformat1,GLsizei width1,GLint border1,GLsizei imageSize1,const void * data1)
{
	static PFNGLCOMPRESSEDTEXIMAGE1DPROC_HPP fn=reinterpret_cast<PFNGLCOMPRESSEDTEXIMAGE1DPROC_HPP>(_impl::_get_proc_address("glCompressedTexImage1D",4,1));
	 fn(target1,level1,internalformat1,width1,border1,imageSize1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CompressedTexImage2D
#define GL_HPP_FUNDEF_CompressedTexImage2D
typedef void (*PFNGLCOMPRESSEDTEXIMAGE2DPROC_HPP)(GLenum,GLint,GLenum,GLsizei,GLsizei,GLint,GLsizei,const void *);
static inline void CompressedTexImage2D(GLenum target1,GLint level1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLint border1,GLsizei imageSize1,const void * data1)
{
	static PFNGLCOMPRESSEDTEXIMAGE2DPROC_HPP fn=reinterpret_cast<PFNGLCOMPRESSEDTEXIMAGE2DPROC_HPP>(_impl::_get_proc_address("glCompressedTexImage2D",4,1));
	 fn(target1,level1,internalformat1,width1,height1,border1,imageSize1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CompressedTexImage3D
#define GL_HPP_FUNDEF_CompressedTexImage3D
typedef void (*PFNGLCOMPRESSEDTEXIMAGE3DPROC_HPP)(GLenum,GLint,GLenum,GLsizei,GLsizei,GLsizei,GLint,GLsizei,const void *);
static inline void CompressedTexImage3D(GLenum target1,GLint level1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLint border1,GLsizei imageSize1,const void * data1)
{
	static PFNGLCOMPRESSEDTEXIMAGE3DPROC_HPP fn=reinterpret_cast<PFNGLCOMPRESSEDTEXIMAGE3DPROC_HPP>(_impl::_get_proc_address("glCompressedTexImage3D",4,1));
	 fn(target1,level1,internalformat1,width1,height1,depth1,border1,imageSize1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CompressedTexSubImage1D
#define GL_HPP_FUNDEF_CompressedTexSubImage1D
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC_HPP)(GLenum,GLint,GLint,GLsizei,GLenum,GLsizei,const void *);
static inline void CompressedTexSubImage1D(GLenum target1,GLint level1,GLint xoffset1,GLsizei width1,GLenum format1,GLsizei imageSize1,const void * data1)
{
	static PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC_HPP fn=reinterpret_cast<PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC_HPP>(_impl::_get_proc_address("glCompressedTexSubImage1D",4,1));
	 fn(target1,level1,xoffset1,width1,format1,imageSize1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CompressedTexSubImage2D
#define GL_HPP_FUNDEF_CompressedTexSubImage2D
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC_HPP)(GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLsizei,const void *);
static inline void CompressedTexSubImage2D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLsizei width1,GLsizei height1,GLenum format1,GLsizei imageSize1,const void * data1)
{
	static PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC_HPP fn=reinterpret_cast<PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC_HPP>(_impl::_get_proc_address("glCompressedTexSubImage2D",4,1));
	 fn(target1,level1,xoffset1,yoffset1,width1,height1,format1,imageSize1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CompressedTexSubImage3D
#define GL_HPP_FUNDEF_CompressedTexSubImage3D
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC_HPP)(GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLsizei,const void *);
static inline void CompressedTexSubImage3D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLsizei width1,GLsizei height1,GLsizei depth1,GLenum format1,GLsizei imageSize1,const void * data1)
{
	static PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC_HPP fn=reinterpret_cast<PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC_HPP>(_impl::_get_proc_address("glCompressedTexSubImage3D",4,1));
	 fn(target1,level1,xoffset1,yoffset1,zoffset1,width1,height1,depth1,format1,imageSize1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CopyBufferSubData
#define GL_HPP_FUNDEF_CopyBufferSubData
typedef void (*PFNGLCOPYBUFFERSUBDATAPROC_HPP)(GLenum,GLenum,GLintptr,GLintptr,GLsizeiptr);
static inline void CopyBufferSubData(GLenum readTarget1,GLenum writeTarget1,GLintptr readOffset1,GLintptr writeOffset1,GLsizeiptr size1)
{
	static PFNGLCOPYBUFFERSUBDATAPROC_HPP fn=reinterpret_cast<PFNGLCOPYBUFFERSUBDATAPROC_HPP>(_impl::_get_proc_address("glCopyBufferSubData",4,1));
	 fn(readTarget1,writeTarget1,readOffset1,writeOffset1,size1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CopyTexImage1D
#define GL_HPP_FUNDEF_CopyTexImage1D
typedef void (*PFNGLCOPYTEXIMAGE1DPROC_HPP)(GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLint);
static inline void CopyTexImage1D(GLenum target1,GLint level1,GLenum internalformat1,GLint x1,GLint y1,GLsizei width1,GLint border1)
{
	static PFNGLCOPYTEXIMAGE1DPROC_HPP fn=reinterpret_cast<PFNGLCOPYTEXIMAGE1DPROC_HPP>(_impl::_get_proc_address("glCopyTexImage1D",4,1));
	 fn(target1,level1,internalformat1,x1,y1,width1,border1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CopyTexImage2D
#define GL_HPP_FUNDEF_CopyTexImage2D
typedef void (*PFNGLCOPYTEXIMAGE2DPROC_HPP)(GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLsizei,GLint);
static inline void CopyTexImage2D(GLenum target1,GLint level1,GLenum internalformat1,GLint x1,GLint y1,GLsizei width1,GLsizei height1,GLint border1)
{
	static PFNGLCOPYTEXIMAGE2DPROC_HPP fn=reinterpret_cast<PFNGLCOPYTEXIMAGE2DPROC_HPP>(_impl::_get_proc_address("glCopyTexImage2D",4,1));
	 fn(target1,level1,internalformat1,x1,y1,width1,height1,border1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CopyTexSubImage1D
#define GL_HPP_FUNDEF_CopyTexSubImage1D
typedef void (*PFNGLCOPYTEXSUBIMAGE1DPROC_HPP)(GLenum,GLint,GLint,GLint,GLint,GLsizei);
static inline void CopyTexSubImage1D(GLenum target1,GLint level1,GLint xoffset1,GLint x1,GLint y1,GLsizei width1)
{
	static PFNGLCOPYTEXSUBIMAGE1DPROC_HPP fn=reinterpret_cast<PFNGLCOPYTEXSUBIMAGE1DPROC_HPP>(_impl::_get_proc_address("glCopyTexSubImage1D",4,1));
	 fn(target1,level1,xoffset1,x1,y1,width1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CopyTexSubImage2D
#define GL_HPP_FUNDEF_CopyTexSubImage2D
typedef void (*PFNGLCOPYTEXSUBIMAGE2DPROC_HPP)(GLenum,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
static inline void CopyTexSubImage2D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
	static PFNGLCOPYTEXSUBIMAGE2DPROC_HPP fn=reinterpret_cast<PFNGLCOPYTEXSUBIMAGE2DPROC_HPP>(_impl::_get_proc_address("glCopyTexSubImage2D",4,1));
	 fn(target1,level1,xoffset1,yoffset1,x1,y1,width1,height1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CopyTexSubImage3D
#define GL_HPP_FUNDEF_CopyTexSubImage3D
typedef void (*PFNGLCOPYTEXSUBIMAGE3DPROC_HPP)(GLenum,GLint,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
static inline void CopyTexSubImage3D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
	static PFNGLCOPYTEXSUBIMAGE3DPROC_HPP fn=reinterpret_cast<PFNGLCOPYTEXSUBIMAGE3DPROC_HPP>(_impl::_get_proc_address("glCopyTexSubImage3D",4,1));
	 fn(target1,level1,xoffset1,yoffset1,zoffset1,x1,y1,width1,height1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CreateProgram
#define GL_HPP_FUNDEF_CreateProgram
typedef GLuint (*PFNGLCREATEPROGRAMPROC_HPP)();
static inline GLuint CreateProgram()
{
	static PFNGLCREATEPROGRAMPROC_HPP fn=reinterpret_cast<PFNGLCREATEPROGRAMPROC_HPP>(_impl::_get_proc_address("glCreateProgram",4,1));
	return fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_CreateShader
#define GL_HPP_FUNDEF_CreateShader
typedef GLuint (*PFNGLCREATESHADERPROC_HPP)(GLenum);
static inline GLuint CreateShader(GLenum type1)
{
	static PFNGLCREATESHADERPROC_HPP fn=reinterpret_cast<PFNGLCREATESHADERPROC_HPP>(_impl::_get_proc_address("glCreateShader",4,1));
	return fn(type1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CreateShaderProgramv
#define GL_HPP_FUNDEF_CreateShaderProgramv
typedef GLuint (*PFNGLCREATESHADERPROGRAMVPROC_HPP)(GLenum,GLsizei,const GLchar *const*);
static inline GLuint CreateShaderProgramv(GLenum type1,GLsizei count1,const GLchar *const* strings1)
{
	static PFNGLCREATESHADERPROGRAMVPROC_HPP fn=reinterpret_cast<PFNGLCREATESHADERPROGRAMVPROC_HPP>(_impl::_get_proc_address("glCreateShaderProgramv",4,1));
	return fn(type1,count1,strings1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CullFace
#define GL_HPP_FUNDEF_CullFace
typedef void (*PFNGLCULLFACEPROC_HPP)(GLenum);
static inline void CullFace(GLenum mode1)
{
	static PFNGLCULLFACEPROC_HPP fn=reinterpret_cast<PFNGLCULLFACEPROC_HPP>(_impl::_get_proc_address("glCullFace",4,1));
	 fn(mode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteBuffers
#define GL_HPP_FUNDEF_DeleteBuffers
typedef void (*PFNGLDELETEBUFFERSPROC_HPP)(GLsizei,const GLuint *);
static inline void DeleteBuffers(GLsizei n1,const GLuint * buffers1)
{
	static PFNGLDELETEBUFFERSPROC_HPP fn=reinterpret_cast<PFNGLDELETEBUFFERSPROC_HPP>(_impl::_get_proc_address("glDeleteBuffers",4,1));
	 fn(n1,buffers1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteFramebuffers
#define GL_HPP_FUNDEF_DeleteFramebuffers
typedef void (*PFNGLDELETEFRAMEBUFFERSPROC_HPP)(GLsizei,const GLuint *);
static inline void DeleteFramebuffers(GLsizei n1,const GLuint * framebuffers1)
{
	static PFNGLDELETEFRAMEBUFFERSPROC_HPP fn=reinterpret_cast<PFNGLDELETEFRAMEBUFFERSPROC_HPP>(_impl::_get_proc_address("glDeleteFramebuffers",4,1));
	 fn(n1,framebuffers1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteProgram
#define GL_HPP_FUNDEF_DeleteProgram
typedef void (*PFNGLDELETEPROGRAMPROC_HPP)(GLuint);
static inline void DeleteProgram(GLuint program1)
{
	static PFNGLDELETEPROGRAMPROC_HPP fn=reinterpret_cast<PFNGLDELETEPROGRAMPROC_HPP>(_impl::_get_proc_address("glDeleteProgram",4,1));
	 fn(program1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteProgramPipelines
#define GL_HPP_FUNDEF_DeleteProgramPipelines
typedef void (*PFNGLDELETEPROGRAMPIPELINESPROC_HPP)(GLsizei,const GLuint *);
static inline void DeleteProgramPipelines(GLsizei n1,const GLuint * pipelines1)
{
	static PFNGLDELETEPROGRAMPIPELINESPROC_HPP fn=reinterpret_cast<PFNGLDELETEPROGRAMPIPELINESPROC_HPP>(_impl::_get_proc_address("glDeleteProgramPipelines",4,1));
	 fn(n1,pipelines1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteQueries
#define GL_HPP_FUNDEF_DeleteQueries
typedef void (*PFNGLDELETEQUERIESPROC_HPP)(GLsizei,const GLuint *);
static inline void DeleteQueries(GLsizei n1,const GLuint * ids1)
{
	static PFNGLDELETEQUERIESPROC_HPP fn=reinterpret_cast<PFNGLDELETEQUERIESPROC_HPP>(_impl::_get_proc_address("glDeleteQueries",4,1));
	 fn(n1,ids1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteRenderbuffers
#define GL_HPP_FUNDEF_DeleteRenderbuffers
typedef void (*PFNGLDELETERENDERBUFFERSPROC_HPP)(GLsizei,const GLuint *);
static inline void DeleteRenderbuffers(GLsizei n1,const GLuint * renderbuffers1)
{
	static PFNGLDELETERENDERBUFFERSPROC_HPP fn=reinterpret_cast<PFNGLDELETERENDERBUFFERSPROC_HPP>(_impl::_get_proc_address("glDeleteRenderbuffers",4,1));
	 fn(n1,renderbuffers1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteSamplers
#define GL_HPP_FUNDEF_DeleteSamplers
typedef void (*PFNGLDELETESAMPLERSPROC_HPP)(GLsizei,const GLuint *);
static inline void DeleteSamplers(GLsizei count1,const GLuint * samplers1)
{
	static PFNGLDELETESAMPLERSPROC_HPP fn=reinterpret_cast<PFNGLDELETESAMPLERSPROC_HPP>(_impl::_get_proc_address("glDeleteSamplers",4,1));
	 fn(count1,samplers1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteShader
#define GL_HPP_FUNDEF_DeleteShader
typedef void (*PFNGLDELETESHADERPROC_HPP)(GLuint);
static inline void DeleteShader(GLuint shader1)
{
	static PFNGLDELETESHADERPROC_HPP fn=reinterpret_cast<PFNGLDELETESHADERPROC_HPP>(_impl::_get_proc_address("glDeleteShader",4,1));
	 fn(shader1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteSync
#define GL_HPP_FUNDEF_DeleteSync
typedef void (*PFNGLDELETESYNCPROC_HPP)(GLsync);
static inline void DeleteSync(GLsync sync1)
{
	static PFNGLDELETESYNCPROC_HPP fn=reinterpret_cast<PFNGLDELETESYNCPROC_HPP>(_impl::_get_proc_address("glDeleteSync",4,1));
	 fn(sync1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteTextures
#define GL_HPP_FUNDEF_DeleteTextures
typedef void (*PFNGLDELETETEXTURESPROC_HPP)(GLsizei,const GLuint *);
static inline void DeleteTextures(GLsizei n1,const GLuint * textures1)
{
	static PFNGLDELETETEXTURESPROC_HPP fn=reinterpret_cast<PFNGLDELETETEXTURESPROC_HPP>(_impl::_get_proc_address("glDeleteTextures",4,1));
	 fn(n1,textures1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteTransformFeedbacks
#define GL_HPP_FUNDEF_DeleteTransformFeedbacks
typedef void (*PFNGLDELETETRANSFORMFEEDBACKSPROC_HPP)(GLsizei,const GLuint *);
static inline void DeleteTransformFeedbacks(GLsizei n1,const GLuint * ids1)
{
	static PFNGLDELETETRANSFORMFEEDBACKSPROC_HPP fn=reinterpret_cast<PFNGLDELETETRANSFORMFEEDBACKSPROC_HPP>(_impl::_get_proc_address("glDeleteTransformFeedbacks",4,1));
	 fn(n1,ids1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteVertexArrays
#define GL_HPP_FUNDEF_DeleteVertexArrays
typedef void (*PFNGLDELETEVERTEXARRAYSPROC_HPP)(GLsizei,const GLuint *);
static inline void DeleteVertexArrays(GLsizei n1,const GLuint * arrays1)
{
	static PFNGLDELETEVERTEXARRAYSPROC_HPP fn=reinterpret_cast<PFNGLDELETEVERTEXARRAYSPROC_HPP>(_impl::_get_proc_address("glDeleteVertexArrays",4,1));
	 fn(n1,arrays1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DepthFunc
#define GL_HPP_FUNDEF_DepthFunc
typedef void (*PFNGLDEPTHFUNCPROC_HPP)(GLenum);
static inline void DepthFunc(GLenum func1)
{
	static PFNGLDEPTHFUNCPROC_HPP fn=reinterpret_cast<PFNGLDEPTHFUNCPROC_HPP>(_impl::_get_proc_address("glDepthFunc",4,1));
	 fn(func1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DepthMask
#define GL_HPP_FUNDEF_DepthMask
typedef void (*PFNGLDEPTHMASKPROC_HPP)(GLboolean);
static inline void DepthMask(GLboolean flag1)
{
	static PFNGLDEPTHMASKPROC_HPP fn=reinterpret_cast<PFNGLDEPTHMASKPROC_HPP>(_impl::_get_proc_address("glDepthMask",4,1));
	 fn(flag1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DepthRange
#define GL_HPP_FUNDEF_DepthRange
typedef void (*PFNGLDEPTHRANGEPROC_HPP)(GLdouble,GLdouble);
static inline void DepthRange(GLdouble near1,GLdouble far1)
{
	static PFNGLDEPTHRANGEPROC_HPP fn=reinterpret_cast<PFNGLDEPTHRANGEPROC_HPP>(_impl::_get_proc_address("glDepthRange",4,1));
	 fn(near1,far1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DepthRangeArrayv
#define GL_HPP_FUNDEF_DepthRangeArrayv
typedef void (*PFNGLDEPTHRANGEARRAYVPROC_HPP)(GLuint,GLsizei,const GLdouble *);
static inline void DepthRangeArrayv(GLuint first1,GLsizei count1,const GLdouble * v1)
{
	static PFNGLDEPTHRANGEARRAYVPROC_HPP fn=reinterpret_cast<PFNGLDEPTHRANGEARRAYVPROC_HPP>(_impl::_get_proc_address("glDepthRangeArrayv",4,1));
	 fn(first1,count1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DepthRangeIndexed
#define GL_HPP_FUNDEF_DepthRangeIndexed
typedef void (*PFNGLDEPTHRANGEINDEXEDPROC_HPP)(GLuint,GLdouble,GLdouble);
static inline void DepthRangeIndexed(GLuint index1,GLdouble n1,GLdouble f1)
{
	static PFNGLDEPTHRANGEINDEXEDPROC_HPP fn=reinterpret_cast<PFNGLDEPTHRANGEINDEXEDPROC_HPP>(_impl::_get_proc_address("glDepthRangeIndexed",4,1));
	 fn(index1,n1,f1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DepthRangef
#define GL_HPP_FUNDEF_DepthRangef
typedef void (*PFNGLDEPTHRANGEFPROC_HPP)(GLfloat,GLfloat);
static inline void DepthRangef(GLfloat n1,GLfloat f1)
{
	static PFNGLDEPTHRANGEFPROC_HPP fn=reinterpret_cast<PFNGLDEPTHRANGEFPROC_HPP>(_impl::_get_proc_address("glDepthRangef",4,1));
	 fn(n1,f1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DetachShader
#define GL_HPP_FUNDEF_DetachShader
typedef void (*PFNGLDETACHSHADERPROC_HPP)(GLuint,GLuint);
static inline void DetachShader(GLuint program1,GLuint shader1)
{
	static PFNGLDETACHSHADERPROC_HPP fn=reinterpret_cast<PFNGLDETACHSHADERPROC_HPP>(_impl::_get_proc_address("glDetachShader",4,1));
	 fn(program1,shader1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Disable
#define GL_HPP_FUNDEF_Disable
typedef void (*PFNGLDISABLEPROC_HPP)(GLenum);
static inline void Disable(GLenum cap1)
{
	static PFNGLDISABLEPROC_HPP fn=reinterpret_cast<PFNGLDISABLEPROC_HPP>(_impl::_get_proc_address("glDisable",4,1));
	 fn(cap1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DisableVertexAttribArray
#define GL_HPP_FUNDEF_DisableVertexAttribArray
typedef void (*PFNGLDISABLEVERTEXATTRIBARRAYPROC_HPP)(GLuint);
static inline void DisableVertexAttribArray(GLuint index1)
{
	static PFNGLDISABLEVERTEXATTRIBARRAYPROC_HPP fn=reinterpret_cast<PFNGLDISABLEVERTEXATTRIBARRAYPROC_HPP>(_impl::_get_proc_address("glDisableVertexAttribArray",4,1));
	 fn(index1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Disablei
#define GL_HPP_FUNDEF_Disablei
typedef void (*PFNGLDISABLEIPROC_HPP)(GLenum,GLuint);
static inline void Disablei(GLenum target1,GLuint index1)
{
	static PFNGLDISABLEIPROC_HPP fn=reinterpret_cast<PFNGLDISABLEIPROC_HPP>(_impl::_get_proc_address("glDisablei",4,1));
	 fn(target1,index1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DrawArrays
#define GL_HPP_FUNDEF_DrawArrays
typedef void (*PFNGLDRAWARRAYSPROC_HPP)(GLenum,GLint,GLsizei);
static inline void DrawArrays(GLenum mode1,GLint first1,GLsizei count1)
{
	static PFNGLDRAWARRAYSPROC_HPP fn=reinterpret_cast<PFNGLDRAWARRAYSPROC_HPP>(_impl::_get_proc_address("glDrawArrays",4,1));
	 fn(mode1,first1,count1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DrawArraysIndirect
#define GL_HPP_FUNDEF_DrawArraysIndirect
typedef void (*PFNGLDRAWARRAYSINDIRECTPROC_HPP)(GLenum,const void *);
static inline void DrawArraysIndirect(GLenum mode1,const void * indirect1)
{
	static PFNGLDRAWARRAYSINDIRECTPROC_HPP fn=reinterpret_cast<PFNGLDRAWARRAYSINDIRECTPROC_HPP>(_impl::_get_proc_address("glDrawArraysIndirect",4,1));
	 fn(mode1,indirect1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DrawArraysInstanced
#define GL_HPP_FUNDEF_DrawArraysInstanced
typedef void (*PFNGLDRAWARRAYSINSTANCEDPROC_HPP)(GLenum,GLint,GLsizei,GLsizei);
static inline void DrawArraysInstanced(GLenum mode1,GLint first1,GLsizei count1,GLsizei instancecount1)
{
	static PFNGLDRAWARRAYSINSTANCEDPROC_HPP fn=reinterpret_cast<PFNGLDRAWARRAYSINSTANCEDPROC_HPP>(_impl::_get_proc_address("glDrawArraysInstanced",4,1));
	 fn(mode1,first1,count1,instancecount1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DrawBuffer
#define GL_HPP_FUNDEF_DrawBuffer
typedef void (*PFNGLDRAWBUFFERPROC_HPP)(GLenum);
static inline void DrawBuffer(GLenum buf1)
{
	static PFNGLDRAWBUFFERPROC_HPP fn=reinterpret_cast<PFNGLDRAWBUFFERPROC_HPP>(_impl::_get_proc_address("glDrawBuffer",4,1));
	 fn(buf1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DrawBuffers
#define GL_HPP_FUNDEF_DrawBuffers
typedef void (*PFNGLDRAWBUFFERSPROC_HPP)(GLsizei,const GLenum *);
static inline void DrawBuffers(GLsizei n1,const GLenum * bufs1)
{
	static PFNGLDRAWBUFFERSPROC_HPP fn=reinterpret_cast<PFNGLDRAWBUFFERSPROC_HPP>(_impl::_get_proc_address("glDrawBuffers",4,1));
	 fn(n1,bufs1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DrawElements
#define GL_HPP_FUNDEF_DrawElements
typedef void (*PFNGLDRAWELEMENTSPROC_HPP)(GLenum,GLsizei,GLenum,const void *);
static inline void DrawElements(GLenum mode1,GLsizei count1,GLenum type1,const void * indices1)
{
	static PFNGLDRAWELEMENTSPROC_HPP fn=reinterpret_cast<PFNGLDRAWELEMENTSPROC_HPP>(_impl::_get_proc_address("glDrawElements",4,1));
	 fn(mode1,count1,type1,indices1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DrawElementsBaseVertex
#define GL_HPP_FUNDEF_DrawElementsBaseVertex
typedef void (*PFNGLDRAWELEMENTSBASEVERTEXPROC_HPP)(GLenum,GLsizei,GLenum,const void *,GLint);
static inline void DrawElementsBaseVertex(GLenum mode1,GLsizei count1,GLenum type1,const void * indices1,GLint basevertex1)
{
	static PFNGLDRAWELEMENTSBASEVERTEXPROC_HPP fn=reinterpret_cast<PFNGLDRAWELEMENTSBASEVERTEXPROC_HPP>(_impl::_get_proc_address("glDrawElementsBaseVertex",4,1));
	 fn(mode1,count1,type1,indices1,basevertex1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DrawElementsIndirect
#define GL_HPP_FUNDEF_DrawElementsIndirect
typedef void (*PFNGLDRAWELEMENTSINDIRECTPROC_HPP)(GLenum,GLenum,const void *);
static inline void DrawElementsIndirect(GLenum mode1,GLenum type1,const void * indirect1)
{
	static PFNGLDRAWELEMENTSINDIRECTPROC_HPP fn=reinterpret_cast<PFNGLDRAWELEMENTSINDIRECTPROC_HPP>(_impl::_get_proc_address("glDrawElementsIndirect",4,1));
	 fn(mode1,type1,indirect1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DrawElementsInstanced
#define GL_HPP_FUNDEF_DrawElementsInstanced
typedef void (*PFNGLDRAWELEMENTSINSTANCEDPROC_HPP)(GLenum,GLsizei,GLenum,const void *,GLsizei);
static inline void DrawElementsInstanced(GLenum mode1,GLsizei count1,GLenum type1,const void * indices1,GLsizei instancecount1)
{
	static PFNGLDRAWELEMENTSINSTANCEDPROC_HPP fn=reinterpret_cast<PFNGLDRAWELEMENTSINSTANCEDPROC_HPP>(_impl::_get_proc_address("glDrawElementsInstanced",4,1));
	 fn(mode1,count1,type1,indices1,instancecount1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DrawElementsInstancedBaseVertex
#define GL_HPP_FUNDEF_DrawElementsInstancedBaseVertex
typedef void (*PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC_HPP)(GLenum,GLsizei,GLenum,const void *,GLsizei,GLint);
static inline void DrawElementsInstancedBaseVertex(GLenum mode1,GLsizei count1,GLenum type1,const void * indices1,GLsizei instancecount1,GLint basevertex1)
{
	static PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC_HPP fn=reinterpret_cast<PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC_HPP>(_impl::_get_proc_address("glDrawElementsInstancedBaseVertex",4,1));
	 fn(mode1,count1,type1,indices1,instancecount1,basevertex1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DrawRangeElements
#define GL_HPP_FUNDEF_DrawRangeElements
typedef void (*PFNGLDRAWRANGEELEMENTSPROC_HPP)(GLenum,GLuint,GLuint,GLsizei,GLenum,const void *);
static inline void DrawRangeElements(GLenum mode1,GLuint start1,GLuint end1,GLsizei count1,GLenum type1,const void * indices1)
{
	static PFNGLDRAWRANGEELEMENTSPROC_HPP fn=reinterpret_cast<PFNGLDRAWRANGEELEMENTSPROC_HPP>(_impl::_get_proc_address("glDrawRangeElements",4,1));
	 fn(mode1,start1,end1,count1,type1,indices1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DrawRangeElementsBaseVertex
#define GL_HPP_FUNDEF_DrawRangeElementsBaseVertex
typedef void (*PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC_HPP)(GLenum,GLuint,GLuint,GLsizei,GLenum,const void *,GLint);
static inline void DrawRangeElementsBaseVertex(GLenum mode1,GLuint start1,GLuint end1,GLsizei count1,GLenum type1,const void * indices1,GLint basevertex1)
{
	static PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC_HPP fn=reinterpret_cast<PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC_HPP>(_impl::_get_proc_address("glDrawRangeElementsBaseVertex",4,1));
	 fn(mode1,start1,end1,count1,type1,indices1,basevertex1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DrawTransformFeedback
#define GL_HPP_FUNDEF_DrawTransformFeedback
typedef void (*PFNGLDRAWTRANSFORMFEEDBACKPROC_HPP)(GLenum,GLuint);
static inline void DrawTransformFeedback(GLenum mode1,GLuint id1)
{
	static PFNGLDRAWTRANSFORMFEEDBACKPROC_HPP fn=reinterpret_cast<PFNGLDRAWTRANSFORMFEEDBACKPROC_HPP>(_impl::_get_proc_address("glDrawTransformFeedback",4,1));
	 fn(mode1,id1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DrawTransformFeedbackStream
#define GL_HPP_FUNDEF_DrawTransformFeedbackStream
typedef void (*PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC_HPP)(GLenum,GLuint,GLuint);
static inline void DrawTransformFeedbackStream(GLenum mode1,GLuint id1,GLuint stream1)
{
	static PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC_HPP fn=reinterpret_cast<PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC_HPP>(_impl::_get_proc_address("glDrawTransformFeedbackStream",4,1));
	 fn(mode1,id1,stream1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Enable
#define GL_HPP_FUNDEF_Enable
typedef void (*PFNGLENABLEPROC_HPP)(GLenum);
static inline void Enable(GLenum cap1)
{
	static PFNGLENABLEPROC_HPP fn=reinterpret_cast<PFNGLENABLEPROC_HPP>(_impl::_get_proc_address("glEnable",4,1));
	 fn(cap1);
}
#endif

#ifndef	GL_HPP_FUNDEF_EnableVertexAttribArray
#define GL_HPP_FUNDEF_EnableVertexAttribArray
typedef void (*PFNGLENABLEVERTEXATTRIBARRAYPROC_HPP)(GLuint);
static inline void EnableVertexAttribArray(GLuint index1)
{
	static PFNGLENABLEVERTEXATTRIBARRAYPROC_HPP fn=reinterpret_cast<PFNGLENABLEVERTEXATTRIBARRAYPROC_HPP>(_impl::_get_proc_address("glEnableVertexAttribArray",4,1));
	 fn(index1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Enablei
#define GL_HPP_FUNDEF_Enablei
typedef void (*PFNGLENABLEIPROC_HPP)(GLenum,GLuint);
static inline void Enablei(GLenum target1,GLuint index1)
{
	static PFNGLENABLEIPROC_HPP fn=reinterpret_cast<PFNGLENABLEIPROC_HPP>(_impl::_get_proc_address("glEnablei",4,1));
	 fn(target1,index1);
}
#endif

#ifndef	GL_HPP_FUNDEF_EndConditionalRender
#define GL_HPP_FUNDEF_EndConditionalRender
typedef void (*PFNGLENDCONDITIONALRENDERPROC_HPP)();
static inline void EndConditionalRender()
{
	static PFNGLENDCONDITIONALRENDERPROC_HPP fn=reinterpret_cast<PFNGLENDCONDITIONALRENDERPROC_HPP>(_impl::_get_proc_address("glEndConditionalRender",4,1));
	 fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_EndQuery
#define GL_HPP_FUNDEF_EndQuery
typedef void (*PFNGLENDQUERYPROC_HPP)(GLenum);
static inline void EndQuery(GLenum target1)
{
	static PFNGLENDQUERYPROC_HPP fn=reinterpret_cast<PFNGLENDQUERYPROC_HPP>(_impl::_get_proc_address("glEndQuery",4,1));
	 fn(target1);
}
#endif

#ifndef	GL_HPP_FUNDEF_EndQueryIndexed
#define GL_HPP_FUNDEF_EndQueryIndexed
typedef void (*PFNGLENDQUERYINDEXEDPROC_HPP)(GLenum,GLuint);
static inline void EndQueryIndexed(GLenum target1,GLuint index1)
{
	static PFNGLENDQUERYINDEXEDPROC_HPP fn=reinterpret_cast<PFNGLENDQUERYINDEXEDPROC_HPP>(_impl::_get_proc_address("glEndQueryIndexed",4,1));
	 fn(target1,index1);
}
#endif

#ifndef	GL_HPP_FUNDEF_EndTransformFeedback
#define GL_HPP_FUNDEF_EndTransformFeedback
typedef void (*PFNGLENDTRANSFORMFEEDBACKPROC_HPP)();
static inline void EndTransformFeedback()
{
	static PFNGLENDTRANSFORMFEEDBACKPROC_HPP fn=reinterpret_cast<PFNGLENDTRANSFORMFEEDBACKPROC_HPP>(_impl::_get_proc_address("glEndTransformFeedback",4,1));
	 fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_FenceSync
#define GL_HPP_FUNDEF_FenceSync
typedef GLsync (*PFNGLFENCESYNCPROC_HPP)(GLenum,GLbitfield);
static inline GLsync FenceSync(GLenum condition1,GLbitfield flags1)
{
	static PFNGLFENCESYNCPROC_HPP fn=reinterpret_cast<PFNGLFENCESYNCPROC_HPP>(_impl::_get_proc_address("glFenceSync",4,1));
	return fn(condition1,flags1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Finish
#define GL_HPP_FUNDEF_Finish
typedef void (*PFNGLFINISHPROC_HPP)();
static inline void Finish()
{
	static PFNGLFINISHPROC_HPP fn=reinterpret_cast<PFNGLFINISHPROC_HPP>(_impl::_get_proc_address("glFinish",4,1));
	 fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_Flush
#define GL_HPP_FUNDEF_Flush
typedef void (*PFNGLFLUSHPROC_HPP)();
static inline void Flush()
{
	static PFNGLFLUSHPROC_HPP fn=reinterpret_cast<PFNGLFLUSHPROC_HPP>(_impl::_get_proc_address("glFlush",4,1));
	 fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_FlushMappedBufferRange
#define GL_HPP_FUNDEF_FlushMappedBufferRange
typedef void (*PFNGLFLUSHMAPPEDBUFFERRANGEPROC_HPP)(GLenum,GLintptr,GLsizeiptr);
static inline void FlushMappedBufferRange(GLenum target1,GLintptr offset1,GLsizeiptr length1)
{
	static PFNGLFLUSHMAPPEDBUFFERRANGEPROC_HPP fn=reinterpret_cast<PFNGLFLUSHMAPPEDBUFFERRANGEPROC_HPP>(_impl::_get_proc_address("glFlushMappedBufferRange",4,1));
	 fn(target1,offset1,length1);
}
#endif

#ifndef	GL_HPP_FUNDEF_FramebufferRenderbuffer
#define GL_HPP_FUNDEF_FramebufferRenderbuffer
typedef void (*PFNGLFRAMEBUFFERRENDERBUFFERPROC_HPP)(GLenum,GLenum,GLenum,GLuint);
static inline void FramebufferRenderbuffer(GLenum target1,GLenum attachment1,GLenum renderbuffertarget1,GLuint renderbuffer1)
{
	static PFNGLFRAMEBUFFERRENDERBUFFERPROC_HPP fn=reinterpret_cast<PFNGLFRAMEBUFFERRENDERBUFFERPROC_HPP>(_impl::_get_proc_address("glFramebufferRenderbuffer",4,1));
	 fn(target1,attachment1,renderbuffertarget1,renderbuffer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_FramebufferTexture
#define GL_HPP_FUNDEF_FramebufferTexture
typedef void (*PFNGLFRAMEBUFFERTEXTUREPROC_HPP)(GLenum,GLenum,GLuint,GLint);
static inline void FramebufferTexture(GLenum target1,GLenum attachment1,GLuint texture1,GLint level1)
{
	static PFNGLFRAMEBUFFERTEXTUREPROC_HPP fn=reinterpret_cast<PFNGLFRAMEBUFFERTEXTUREPROC_HPP>(_impl::_get_proc_address("glFramebufferTexture",4,1));
	 fn(target1,attachment1,texture1,level1);
}
#endif

#ifndef	GL_HPP_FUNDEF_FramebufferTexture1D
#define GL_HPP_FUNDEF_FramebufferTexture1D
typedef void (*PFNGLFRAMEBUFFERTEXTURE1DPROC_HPP)(GLenum,GLenum,GLenum,GLuint,GLint);
static inline void FramebufferTexture1D(GLenum target1,GLenum attachment1,GLenum textarget1,GLuint texture1,GLint level1)
{
	static PFNGLFRAMEBUFFERTEXTURE1DPROC_HPP fn=reinterpret_cast<PFNGLFRAMEBUFFERTEXTURE1DPROC_HPP>(_impl::_get_proc_address("glFramebufferTexture1D",4,1));
	 fn(target1,attachment1,textarget1,texture1,level1);
}
#endif

#ifndef	GL_HPP_FUNDEF_FramebufferTexture2D
#define GL_HPP_FUNDEF_FramebufferTexture2D
typedef void (*PFNGLFRAMEBUFFERTEXTURE2DPROC_HPP)(GLenum,GLenum,GLenum,GLuint,GLint);
static inline void FramebufferTexture2D(GLenum target1,GLenum attachment1,GLenum textarget1,GLuint texture1,GLint level1)
{
	static PFNGLFRAMEBUFFERTEXTURE2DPROC_HPP fn=reinterpret_cast<PFNGLFRAMEBUFFERTEXTURE2DPROC_HPP>(_impl::_get_proc_address("glFramebufferTexture2D",4,1));
	 fn(target1,attachment1,textarget1,texture1,level1);
}
#endif

#ifndef	GL_HPP_FUNDEF_FramebufferTexture3D
#define GL_HPP_FUNDEF_FramebufferTexture3D
typedef void (*PFNGLFRAMEBUFFERTEXTURE3DPROC_HPP)(GLenum,GLenum,GLenum,GLuint,GLint,GLint);
static inline void FramebufferTexture3D(GLenum target1,GLenum attachment1,GLenum textarget1,GLuint texture1,GLint level1,GLint zoffset1)
{
	static PFNGLFRAMEBUFFERTEXTURE3DPROC_HPP fn=reinterpret_cast<PFNGLFRAMEBUFFERTEXTURE3DPROC_HPP>(_impl::_get_proc_address("glFramebufferTexture3D",4,1));
	 fn(target1,attachment1,textarget1,texture1,level1,zoffset1);
}
#endif

#ifndef	GL_HPP_FUNDEF_FramebufferTextureLayer
#define GL_HPP_FUNDEF_FramebufferTextureLayer
typedef void (*PFNGLFRAMEBUFFERTEXTURELAYERPROC_HPP)(GLenum,GLenum,GLuint,GLint,GLint);
static inline void FramebufferTextureLayer(GLenum target1,GLenum attachment1,GLuint texture1,GLint level1,GLint layer1)
{
	static PFNGLFRAMEBUFFERTEXTURELAYERPROC_HPP fn=reinterpret_cast<PFNGLFRAMEBUFFERTEXTURELAYERPROC_HPP>(_impl::_get_proc_address("glFramebufferTextureLayer",4,1));
	 fn(target1,attachment1,texture1,level1,layer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_FrontFace
#define GL_HPP_FUNDEF_FrontFace
typedef void (*PFNGLFRONTFACEPROC_HPP)(GLenum);
static inline void FrontFace(GLenum mode1)
{
	static PFNGLFRONTFACEPROC_HPP fn=reinterpret_cast<PFNGLFRONTFACEPROC_HPP>(_impl::_get_proc_address("glFrontFace",4,1));
	 fn(mode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GenBuffers
#define GL_HPP_FUNDEF_GenBuffers
typedef void (*PFNGLGENBUFFERSPROC_HPP)(GLsizei,GLuint *);
static inline void GenBuffers(GLsizei n1,GLuint * buffers1)
{
	static PFNGLGENBUFFERSPROC_HPP fn=reinterpret_cast<PFNGLGENBUFFERSPROC_HPP>(_impl::_get_proc_address("glGenBuffers",4,1));
	 fn(n1,buffers1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GenFramebuffers
#define GL_HPP_FUNDEF_GenFramebuffers
typedef void (*PFNGLGENFRAMEBUFFERSPROC_HPP)(GLsizei,GLuint *);
static inline void GenFramebuffers(GLsizei n1,GLuint * framebuffers1)
{
	static PFNGLGENFRAMEBUFFERSPROC_HPP fn=reinterpret_cast<PFNGLGENFRAMEBUFFERSPROC_HPP>(_impl::_get_proc_address("glGenFramebuffers",4,1));
	 fn(n1,framebuffers1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GenProgramPipelines
#define GL_HPP_FUNDEF_GenProgramPipelines
typedef void (*PFNGLGENPROGRAMPIPELINESPROC_HPP)(GLsizei,GLuint *);
static inline void GenProgramPipelines(GLsizei n1,GLuint * pipelines1)
{
	static PFNGLGENPROGRAMPIPELINESPROC_HPP fn=reinterpret_cast<PFNGLGENPROGRAMPIPELINESPROC_HPP>(_impl::_get_proc_address("glGenProgramPipelines",4,1));
	 fn(n1,pipelines1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GenQueries
#define GL_HPP_FUNDEF_GenQueries
typedef void (*PFNGLGENQUERIESPROC_HPP)(GLsizei,GLuint *);
static inline void GenQueries(GLsizei n1,GLuint * ids1)
{
	static PFNGLGENQUERIESPROC_HPP fn=reinterpret_cast<PFNGLGENQUERIESPROC_HPP>(_impl::_get_proc_address("glGenQueries",4,1));
	 fn(n1,ids1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GenRenderbuffers
#define GL_HPP_FUNDEF_GenRenderbuffers
typedef void (*PFNGLGENRENDERBUFFERSPROC_HPP)(GLsizei,GLuint *);
static inline void GenRenderbuffers(GLsizei n1,GLuint * renderbuffers1)
{
	static PFNGLGENRENDERBUFFERSPROC_HPP fn=reinterpret_cast<PFNGLGENRENDERBUFFERSPROC_HPP>(_impl::_get_proc_address("glGenRenderbuffers",4,1));
	 fn(n1,renderbuffers1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GenSamplers
#define GL_HPP_FUNDEF_GenSamplers
typedef void (*PFNGLGENSAMPLERSPROC_HPP)(GLsizei,GLuint *);
static inline void GenSamplers(GLsizei count1,GLuint * samplers1)
{
	static PFNGLGENSAMPLERSPROC_HPP fn=reinterpret_cast<PFNGLGENSAMPLERSPROC_HPP>(_impl::_get_proc_address("glGenSamplers",4,1));
	 fn(count1,samplers1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GenTextures
#define GL_HPP_FUNDEF_GenTextures
typedef void (*PFNGLGENTEXTURESPROC_HPP)(GLsizei,GLuint *);
static inline void GenTextures(GLsizei n1,GLuint * textures1)
{
	static PFNGLGENTEXTURESPROC_HPP fn=reinterpret_cast<PFNGLGENTEXTURESPROC_HPP>(_impl::_get_proc_address("glGenTextures",4,1));
	 fn(n1,textures1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GenTransformFeedbacks
#define GL_HPP_FUNDEF_GenTransformFeedbacks
typedef void (*PFNGLGENTRANSFORMFEEDBACKSPROC_HPP)(GLsizei,GLuint *);
static inline void GenTransformFeedbacks(GLsizei n1,GLuint * ids1)
{
	static PFNGLGENTRANSFORMFEEDBACKSPROC_HPP fn=reinterpret_cast<PFNGLGENTRANSFORMFEEDBACKSPROC_HPP>(_impl::_get_proc_address("glGenTransformFeedbacks",4,1));
	 fn(n1,ids1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GenVertexArrays
#define GL_HPP_FUNDEF_GenVertexArrays
typedef void (*PFNGLGENVERTEXARRAYSPROC_HPP)(GLsizei,GLuint *);
static inline void GenVertexArrays(GLsizei n1,GLuint * arrays1)
{
	static PFNGLGENVERTEXARRAYSPROC_HPP fn=reinterpret_cast<PFNGLGENVERTEXARRAYSPROC_HPP>(_impl::_get_proc_address("glGenVertexArrays",4,1));
	 fn(n1,arrays1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GenerateMipmap
#define GL_HPP_FUNDEF_GenerateMipmap
typedef void (*PFNGLGENERATEMIPMAPPROC_HPP)(GLenum);
static inline void GenerateMipmap(GLenum target1)
{
	static PFNGLGENERATEMIPMAPPROC_HPP fn=reinterpret_cast<PFNGLGENERATEMIPMAPPROC_HPP>(_impl::_get_proc_address("glGenerateMipmap",4,1));
	 fn(target1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetActiveAttrib
#define GL_HPP_FUNDEF_GetActiveAttrib
typedef void (*PFNGLGETACTIVEATTRIBPROC_HPP)(GLuint,GLuint,GLsizei,GLsizei *,GLint *,GLenum *,GLchar *);
static inline void GetActiveAttrib(GLuint program1,GLuint index1,GLsizei bufSize1,GLsizei * length1,GLint * size1,GLenum * type1,GLchar * name1)
{
	static PFNGLGETACTIVEATTRIBPROC_HPP fn=reinterpret_cast<PFNGLGETACTIVEATTRIBPROC_HPP>(_impl::_get_proc_address("glGetActiveAttrib",4,1));
	 fn(program1,index1,bufSize1,length1,size1,type1,name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetActiveSubroutineName
#define GL_HPP_FUNDEF_GetActiveSubroutineName
typedef void (*PFNGLGETACTIVESUBROUTINENAMEPROC_HPP)(GLuint,GLenum,GLuint,GLsizei,GLsizei *,GLchar *);
static inline void GetActiveSubroutineName(GLuint program1,GLenum shadertype1,GLuint index1,GLsizei bufsize1,GLsizei * length1,GLchar * name1)
{
	static PFNGLGETACTIVESUBROUTINENAMEPROC_HPP fn=reinterpret_cast<PFNGLGETACTIVESUBROUTINENAMEPROC_HPP>(_impl::_get_proc_address("glGetActiveSubroutineName",4,1));
	 fn(program1,shadertype1,index1,bufsize1,length1,name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetActiveSubroutineUniformName
#define GL_HPP_FUNDEF_GetActiveSubroutineUniformName
typedef void (*PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC_HPP)(GLuint,GLenum,GLuint,GLsizei,GLsizei *,GLchar *);
static inline void GetActiveSubroutineUniformName(GLuint program1,GLenum shadertype1,GLuint index1,GLsizei bufsize1,GLsizei * length1,GLchar * name1)
{
	static PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC_HPP fn=reinterpret_cast<PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC_HPP>(_impl::_get_proc_address("glGetActiveSubroutineUniformName",4,1));
	 fn(program1,shadertype1,index1,bufsize1,length1,name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetActiveSubroutineUniformiv
#define GL_HPP_FUNDEF_GetActiveSubroutineUniformiv
typedef void (*PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC_HPP)(GLuint,GLenum,GLuint,GLenum,GLint *);
static inline void GetActiveSubroutineUniformiv(GLuint program1,GLenum shadertype1,GLuint index1,GLenum pname1,GLint * values1)
{
	static PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC_HPP fn=reinterpret_cast<PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC_HPP>(_impl::_get_proc_address("glGetActiveSubroutineUniformiv",4,1));
	 fn(program1,shadertype1,index1,pname1,values1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetActiveUniform
#define GL_HPP_FUNDEF_GetActiveUniform
typedef void (*PFNGLGETACTIVEUNIFORMPROC_HPP)(GLuint,GLuint,GLsizei,GLsizei *,GLint *,GLenum *,GLchar *);
static inline void GetActiveUniform(GLuint program1,GLuint index1,GLsizei bufSize1,GLsizei * length1,GLint * size1,GLenum * type1,GLchar * name1)
{
	static PFNGLGETACTIVEUNIFORMPROC_HPP fn=reinterpret_cast<PFNGLGETACTIVEUNIFORMPROC_HPP>(_impl::_get_proc_address("glGetActiveUniform",4,1));
	 fn(program1,index1,bufSize1,length1,size1,type1,name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetActiveUniformBlockName
#define GL_HPP_FUNDEF_GetActiveUniformBlockName
typedef void (*PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC_HPP)(GLuint,GLuint,GLsizei,GLsizei *,GLchar *);
static inline void GetActiveUniformBlockName(GLuint program1,GLuint uniformBlockIndex1,GLsizei bufSize1,GLsizei * length1,GLchar * uniformBlockName1)
{
	static PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC_HPP fn=reinterpret_cast<PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC_HPP>(_impl::_get_proc_address("glGetActiveUniformBlockName",4,1));
	 fn(program1,uniformBlockIndex1,bufSize1,length1,uniformBlockName1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetActiveUniformBlockiv
#define GL_HPP_FUNDEF_GetActiveUniformBlockiv
typedef void (*PFNGLGETACTIVEUNIFORMBLOCKIVPROC_HPP)(GLuint,GLuint,GLenum,GLint *);
static inline void GetActiveUniformBlockiv(GLuint program1,GLuint uniformBlockIndex1,GLenum pname1,GLint * params1)
{
	static PFNGLGETACTIVEUNIFORMBLOCKIVPROC_HPP fn=reinterpret_cast<PFNGLGETACTIVEUNIFORMBLOCKIVPROC_HPP>(_impl::_get_proc_address("glGetActiveUniformBlockiv",4,1));
	 fn(program1,uniformBlockIndex1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetActiveUniformName
#define GL_HPP_FUNDEF_GetActiveUniformName
typedef void (*PFNGLGETACTIVEUNIFORMNAMEPROC_HPP)(GLuint,GLuint,GLsizei,GLsizei *,GLchar *);
static inline void GetActiveUniformName(GLuint program1,GLuint uniformIndex1,GLsizei bufSize1,GLsizei * length1,GLchar * uniformName1)
{
	static PFNGLGETACTIVEUNIFORMNAMEPROC_HPP fn=reinterpret_cast<PFNGLGETACTIVEUNIFORMNAMEPROC_HPP>(_impl::_get_proc_address("glGetActiveUniformName",4,1));
	 fn(program1,uniformIndex1,bufSize1,length1,uniformName1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetActiveUniformsiv
#define GL_HPP_FUNDEF_GetActiveUniformsiv
typedef void (*PFNGLGETACTIVEUNIFORMSIVPROC_HPP)(GLuint,GLsizei,const GLuint *,GLenum,GLint *);
static inline void GetActiveUniformsiv(GLuint program1,GLsizei uniformCount1,const GLuint * uniformIndices1,GLenum pname1,GLint * params1)
{
	static PFNGLGETACTIVEUNIFORMSIVPROC_HPP fn=reinterpret_cast<PFNGLGETACTIVEUNIFORMSIVPROC_HPP>(_impl::_get_proc_address("glGetActiveUniformsiv",4,1));
	 fn(program1,uniformCount1,uniformIndices1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetAttachedShaders
#define GL_HPP_FUNDEF_GetAttachedShaders
typedef void (*PFNGLGETATTACHEDSHADERSPROC_HPP)(GLuint,GLsizei,GLsizei *,GLuint *);
static inline void GetAttachedShaders(GLuint program1,GLsizei maxCount1,GLsizei * count1,GLuint * shaders1)
{
	static PFNGLGETATTACHEDSHADERSPROC_HPP fn=reinterpret_cast<PFNGLGETATTACHEDSHADERSPROC_HPP>(_impl::_get_proc_address("glGetAttachedShaders",4,1));
	 fn(program1,maxCount1,count1,shaders1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetAttribLocation
#define GL_HPP_FUNDEF_GetAttribLocation
typedef GLint (*PFNGLGETATTRIBLOCATIONPROC_HPP)(GLuint,const GLchar *);
static inline GLint GetAttribLocation(GLuint program1,const GLchar * name1)
{
	static PFNGLGETATTRIBLOCATIONPROC_HPP fn=reinterpret_cast<PFNGLGETATTRIBLOCATIONPROC_HPP>(_impl::_get_proc_address("glGetAttribLocation",4,1));
	return fn(program1,name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetBooleani_v
#define GL_HPP_FUNDEF_GetBooleani_v
typedef void (*PFNGLGETBOOLEANI_VPROC_HPP)(GLenum,GLuint,GLboolean *);
static inline void GetBooleani_v(GLenum target1,GLuint index1,GLboolean * data1)
{
	static PFNGLGETBOOLEANI_VPROC_HPP fn=reinterpret_cast<PFNGLGETBOOLEANI_VPROC_HPP>(_impl::_get_proc_address("glGetBooleani_v",4,1));
	 fn(target1,index1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetBooleanv
#define GL_HPP_FUNDEF_GetBooleanv
typedef void (*PFNGLGETBOOLEANVPROC_HPP)(GLenum,GLboolean *);
static inline void GetBooleanv(GLenum pname1,GLboolean * data1)
{
	static PFNGLGETBOOLEANVPROC_HPP fn=reinterpret_cast<PFNGLGETBOOLEANVPROC_HPP>(_impl::_get_proc_address("glGetBooleanv",4,1));
	 fn(pname1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetBufferParameteri64v
#define GL_HPP_FUNDEF_GetBufferParameteri64v
typedef void (*PFNGLGETBUFFERPARAMETERI64VPROC_HPP)(GLenum,GLenum,GLint64 *);
static inline void GetBufferParameteri64v(GLenum target1,GLenum pname1,GLint64 * params1)
{
	static PFNGLGETBUFFERPARAMETERI64VPROC_HPP fn=reinterpret_cast<PFNGLGETBUFFERPARAMETERI64VPROC_HPP>(_impl::_get_proc_address("glGetBufferParameteri64v",4,1));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetBufferParameteriv
#define GL_HPP_FUNDEF_GetBufferParameteriv
typedef void (*PFNGLGETBUFFERPARAMETERIVPROC_HPP)(GLenum,GLenum,GLint *);
static inline void GetBufferParameteriv(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETBUFFERPARAMETERIVPROC_HPP fn=reinterpret_cast<PFNGLGETBUFFERPARAMETERIVPROC_HPP>(_impl::_get_proc_address("glGetBufferParameteriv",4,1));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetBufferPointerv
#define GL_HPP_FUNDEF_GetBufferPointerv
typedef void (*PFNGLGETBUFFERPOINTERVPROC_HPP)(GLenum,GLenum,void **);
static inline void GetBufferPointerv(GLenum target1,GLenum pname1,void ** params1)
{
	static PFNGLGETBUFFERPOINTERVPROC_HPP fn=reinterpret_cast<PFNGLGETBUFFERPOINTERVPROC_HPP>(_impl::_get_proc_address("glGetBufferPointerv",4,1));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetBufferSubData
#define GL_HPP_FUNDEF_GetBufferSubData
typedef void (*PFNGLGETBUFFERSUBDATAPROC_HPP)(GLenum,GLintptr,GLsizeiptr,void *);
static inline void GetBufferSubData(GLenum target1,GLintptr offset1,GLsizeiptr size1,void * data1)
{
	static PFNGLGETBUFFERSUBDATAPROC_HPP fn=reinterpret_cast<PFNGLGETBUFFERSUBDATAPROC_HPP>(_impl::_get_proc_address("glGetBufferSubData",4,1));
	 fn(target1,offset1,size1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetCompressedTexImage
#define GL_HPP_FUNDEF_GetCompressedTexImage
typedef void (*PFNGLGETCOMPRESSEDTEXIMAGEPROC_HPP)(GLenum,GLint,void *);
static inline void GetCompressedTexImage(GLenum target1,GLint level1,void * img1)
{
	static PFNGLGETCOMPRESSEDTEXIMAGEPROC_HPP fn=reinterpret_cast<PFNGLGETCOMPRESSEDTEXIMAGEPROC_HPP>(_impl::_get_proc_address("glGetCompressedTexImage",4,1));
	 fn(target1,level1,img1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetDoublei_v
#define GL_HPP_FUNDEF_GetDoublei_v
typedef void (*PFNGLGETDOUBLEI_VPROC_HPP)(GLenum,GLuint,GLdouble *);
static inline void GetDoublei_v(GLenum target1,GLuint index1,GLdouble * data1)
{
	static PFNGLGETDOUBLEI_VPROC_HPP fn=reinterpret_cast<PFNGLGETDOUBLEI_VPROC_HPP>(_impl::_get_proc_address("glGetDoublei_v",4,1));
	 fn(target1,index1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetDoublev
#define GL_HPP_FUNDEF_GetDoublev
typedef void (*PFNGLGETDOUBLEVPROC_HPP)(GLenum,GLdouble *);
static inline void GetDoublev(GLenum pname1,GLdouble * data1)
{
	static PFNGLGETDOUBLEVPROC_HPP fn=reinterpret_cast<PFNGLGETDOUBLEVPROC_HPP>(_impl::_get_proc_address("glGetDoublev",4,1));
	 fn(pname1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetError
#define GL_HPP_FUNDEF_GetError
typedef GLenum (*PFNGLGETERRORPROC_HPP)();
static inline GLenum GetError()
{
	static PFNGLGETERRORPROC_HPP fn=reinterpret_cast<PFNGLGETERRORPROC_HPP>(_impl::_get_proc_address("glGetError",4,1));
	return fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_GetFloati_v
#define GL_HPP_FUNDEF_GetFloati_v
typedef void (*PFNGLGETFLOATI_VPROC_HPP)(GLenum,GLuint,GLfloat *);
static inline void GetFloati_v(GLenum target1,GLuint index1,GLfloat * data1)
{
	static PFNGLGETFLOATI_VPROC_HPP fn=reinterpret_cast<PFNGLGETFLOATI_VPROC_HPP>(_impl::_get_proc_address("glGetFloati_v",4,1));
	 fn(target1,index1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetFloatv
#define GL_HPP_FUNDEF_GetFloatv
typedef void (*PFNGLGETFLOATVPROC_HPP)(GLenum,GLfloat *);
static inline void GetFloatv(GLenum pname1,GLfloat * data1)
{
	static PFNGLGETFLOATVPROC_HPP fn=reinterpret_cast<PFNGLGETFLOATVPROC_HPP>(_impl::_get_proc_address("glGetFloatv",4,1));
	 fn(pname1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetFragDataIndex
#define GL_HPP_FUNDEF_GetFragDataIndex
typedef GLint (*PFNGLGETFRAGDATAINDEXPROC_HPP)(GLuint,const GLchar *);
static inline GLint GetFragDataIndex(GLuint program1,const GLchar * name1)
{
	static PFNGLGETFRAGDATAINDEXPROC_HPP fn=reinterpret_cast<PFNGLGETFRAGDATAINDEXPROC_HPP>(_impl::_get_proc_address("glGetFragDataIndex",4,1));
	return fn(program1,name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetFragDataLocation
#define GL_HPP_FUNDEF_GetFragDataLocation
typedef GLint (*PFNGLGETFRAGDATALOCATIONPROC_HPP)(GLuint,const GLchar *);
static inline GLint GetFragDataLocation(GLuint program1,const GLchar * name1)
{
	static PFNGLGETFRAGDATALOCATIONPROC_HPP fn=reinterpret_cast<PFNGLGETFRAGDATALOCATIONPROC_HPP>(_impl::_get_proc_address("glGetFragDataLocation",4,1));
	return fn(program1,name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetFramebufferAttachmentParameteriv
#define GL_HPP_FUNDEF_GetFramebufferAttachmentParameteriv
typedef void (*PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC_HPP)(GLenum,GLenum,GLenum,GLint *);
static inline void GetFramebufferAttachmentParameteriv(GLenum target1,GLenum attachment1,GLenum pname1,GLint * params1)
{
	static PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC_HPP fn=reinterpret_cast<PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC_HPP>(_impl::_get_proc_address("glGetFramebufferAttachmentParameteriv",4,1));
	 fn(target1,attachment1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetInteger64i_v
#define GL_HPP_FUNDEF_GetInteger64i_v
typedef void (*PFNGLGETINTEGER64I_VPROC_HPP)(GLenum,GLuint,GLint64 *);
static inline void GetInteger64i_v(GLenum target1,GLuint index1,GLint64 * data1)
{
	static PFNGLGETINTEGER64I_VPROC_HPP fn=reinterpret_cast<PFNGLGETINTEGER64I_VPROC_HPP>(_impl::_get_proc_address("glGetInteger64i_v",4,1));
	 fn(target1,index1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetInteger64v
#define GL_HPP_FUNDEF_GetInteger64v
typedef void (*PFNGLGETINTEGER64VPROC_HPP)(GLenum,GLint64 *);
static inline void GetInteger64v(GLenum pname1,GLint64 * data1)
{
	static PFNGLGETINTEGER64VPROC_HPP fn=reinterpret_cast<PFNGLGETINTEGER64VPROC_HPP>(_impl::_get_proc_address("glGetInteger64v",4,1));
	 fn(pname1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetIntegeri_v
#define GL_HPP_FUNDEF_GetIntegeri_v
typedef void (*PFNGLGETINTEGERI_VPROC_HPP)(GLenum,GLuint,GLint *);
static inline void GetIntegeri_v(GLenum target1,GLuint index1,GLint * data1)
{
	static PFNGLGETINTEGERI_VPROC_HPP fn=reinterpret_cast<PFNGLGETINTEGERI_VPROC_HPP>(_impl::_get_proc_address("glGetIntegeri_v",4,1));
	 fn(target1,index1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetIntegerv
#define GL_HPP_FUNDEF_GetIntegerv
typedef void (*PFNGLGETINTEGERVPROC_HPP)(GLenum,GLint *);
static inline void GetIntegerv(GLenum pname1,GLint * data1)
{
	static PFNGLGETINTEGERVPROC_HPP fn=reinterpret_cast<PFNGLGETINTEGERVPROC_HPP>(_impl::_get_proc_address("glGetIntegerv",4,1));
	 fn(pname1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetMultisamplefv
#define GL_HPP_FUNDEF_GetMultisamplefv
typedef void (*PFNGLGETMULTISAMPLEFVPROC_HPP)(GLenum,GLuint,GLfloat *);
static inline void GetMultisamplefv(GLenum pname1,GLuint index1,GLfloat * val1)
{
	static PFNGLGETMULTISAMPLEFVPROC_HPP fn=reinterpret_cast<PFNGLGETMULTISAMPLEFVPROC_HPP>(_impl::_get_proc_address("glGetMultisamplefv",4,1));
	 fn(pname1,index1,val1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetProgramBinary
#define GL_HPP_FUNDEF_GetProgramBinary
typedef void (*PFNGLGETPROGRAMBINARYPROC_HPP)(GLuint,GLsizei,GLsizei *,GLenum *,void *);
static inline void GetProgramBinary(GLuint program1,GLsizei bufSize1,GLsizei * length1,GLenum * binaryFormat1,void * binary1)
{
	static PFNGLGETPROGRAMBINARYPROC_HPP fn=reinterpret_cast<PFNGLGETPROGRAMBINARYPROC_HPP>(_impl::_get_proc_address("glGetProgramBinary",4,1));
	 fn(program1,bufSize1,length1,binaryFormat1,binary1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetProgramInfoLog
#define GL_HPP_FUNDEF_GetProgramInfoLog
typedef void (*PFNGLGETPROGRAMINFOLOGPROC_HPP)(GLuint,GLsizei,GLsizei *,GLchar *);
static inline void GetProgramInfoLog(GLuint program1,GLsizei bufSize1,GLsizei * length1,GLchar * infoLog1)
{
	static PFNGLGETPROGRAMINFOLOGPROC_HPP fn=reinterpret_cast<PFNGLGETPROGRAMINFOLOGPROC_HPP>(_impl::_get_proc_address("glGetProgramInfoLog",4,1));
	 fn(program1,bufSize1,length1,infoLog1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetProgramPipelineInfoLog
#define GL_HPP_FUNDEF_GetProgramPipelineInfoLog
typedef void (*PFNGLGETPROGRAMPIPELINEINFOLOGPROC_HPP)(GLuint,GLsizei,GLsizei *,GLchar *);
static inline void GetProgramPipelineInfoLog(GLuint pipeline1,GLsizei bufSize1,GLsizei * length1,GLchar * infoLog1)
{
	static PFNGLGETPROGRAMPIPELINEINFOLOGPROC_HPP fn=reinterpret_cast<PFNGLGETPROGRAMPIPELINEINFOLOGPROC_HPP>(_impl::_get_proc_address("glGetProgramPipelineInfoLog",4,1));
	 fn(pipeline1,bufSize1,length1,infoLog1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetProgramPipelineiv
#define GL_HPP_FUNDEF_GetProgramPipelineiv
typedef void (*PFNGLGETPROGRAMPIPELINEIVPROC_HPP)(GLuint,GLenum,GLint *);
static inline void GetProgramPipelineiv(GLuint pipeline1,GLenum pname1,GLint * params1)
{
	static PFNGLGETPROGRAMPIPELINEIVPROC_HPP fn=reinterpret_cast<PFNGLGETPROGRAMPIPELINEIVPROC_HPP>(_impl::_get_proc_address("glGetProgramPipelineiv",4,1));
	 fn(pipeline1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetProgramStageiv
#define GL_HPP_FUNDEF_GetProgramStageiv
typedef void (*PFNGLGETPROGRAMSTAGEIVPROC_HPP)(GLuint,GLenum,GLenum,GLint *);
static inline void GetProgramStageiv(GLuint program1,GLenum shadertype1,GLenum pname1,GLint * values1)
{
	static PFNGLGETPROGRAMSTAGEIVPROC_HPP fn=reinterpret_cast<PFNGLGETPROGRAMSTAGEIVPROC_HPP>(_impl::_get_proc_address("glGetProgramStageiv",4,1));
	 fn(program1,shadertype1,pname1,values1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetProgramiv
#define GL_HPP_FUNDEF_GetProgramiv
typedef void (*PFNGLGETPROGRAMIVPROC_HPP)(GLuint,GLenum,GLint *);
static inline void GetProgramiv(GLuint program1,GLenum pname1,GLint * params1)
{
	static PFNGLGETPROGRAMIVPROC_HPP fn=reinterpret_cast<PFNGLGETPROGRAMIVPROC_HPP>(_impl::_get_proc_address("glGetProgramiv",4,1));
	 fn(program1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetQueryIndexediv
#define GL_HPP_FUNDEF_GetQueryIndexediv
typedef void (*PFNGLGETQUERYINDEXEDIVPROC_HPP)(GLenum,GLuint,GLenum,GLint *);
static inline void GetQueryIndexediv(GLenum target1,GLuint index1,GLenum pname1,GLint * params1)
{
	static PFNGLGETQUERYINDEXEDIVPROC_HPP fn=reinterpret_cast<PFNGLGETQUERYINDEXEDIVPROC_HPP>(_impl::_get_proc_address("glGetQueryIndexediv",4,1));
	 fn(target1,index1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetQueryObjecti64v
#define GL_HPP_FUNDEF_GetQueryObjecti64v
typedef void (*PFNGLGETQUERYOBJECTI64VPROC_HPP)(GLuint,GLenum,GLint64 *);
static inline void GetQueryObjecti64v(GLuint id1,GLenum pname1,GLint64 * params1)
{
	static PFNGLGETQUERYOBJECTI64VPROC_HPP fn=reinterpret_cast<PFNGLGETQUERYOBJECTI64VPROC_HPP>(_impl::_get_proc_address("glGetQueryObjecti64v",4,1));
	 fn(id1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetQueryObjectiv
#define GL_HPP_FUNDEF_GetQueryObjectiv
typedef void (*PFNGLGETQUERYOBJECTIVPROC_HPP)(GLuint,GLenum,GLint *);
static inline void GetQueryObjectiv(GLuint id1,GLenum pname1,GLint * params1)
{
	static PFNGLGETQUERYOBJECTIVPROC_HPP fn=reinterpret_cast<PFNGLGETQUERYOBJECTIVPROC_HPP>(_impl::_get_proc_address("glGetQueryObjectiv",4,1));
	 fn(id1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetQueryObjectui64v
#define GL_HPP_FUNDEF_GetQueryObjectui64v
typedef void (*PFNGLGETQUERYOBJECTUI64VPROC_HPP)(GLuint,GLenum,GLuint64 *);
static inline void GetQueryObjectui64v(GLuint id1,GLenum pname1,GLuint64 * params1)
{
	static PFNGLGETQUERYOBJECTUI64VPROC_HPP fn=reinterpret_cast<PFNGLGETQUERYOBJECTUI64VPROC_HPP>(_impl::_get_proc_address("glGetQueryObjectui64v",4,1));
	 fn(id1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetQueryObjectuiv
#define GL_HPP_FUNDEF_GetQueryObjectuiv
typedef void (*PFNGLGETQUERYOBJECTUIVPROC_HPP)(GLuint,GLenum,GLuint *);
static inline void GetQueryObjectuiv(GLuint id1,GLenum pname1,GLuint * params1)
{
	static PFNGLGETQUERYOBJECTUIVPROC_HPP fn=reinterpret_cast<PFNGLGETQUERYOBJECTUIVPROC_HPP>(_impl::_get_proc_address("glGetQueryObjectuiv",4,1));
	 fn(id1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetQueryiv
#define GL_HPP_FUNDEF_GetQueryiv
typedef void (*PFNGLGETQUERYIVPROC_HPP)(GLenum,GLenum,GLint *);
static inline void GetQueryiv(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETQUERYIVPROC_HPP fn=reinterpret_cast<PFNGLGETQUERYIVPROC_HPP>(_impl::_get_proc_address("glGetQueryiv",4,1));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetRenderbufferParameteriv
#define GL_HPP_FUNDEF_GetRenderbufferParameteriv
typedef void (*PFNGLGETRENDERBUFFERPARAMETERIVPROC_HPP)(GLenum,GLenum,GLint *);
static inline void GetRenderbufferParameteriv(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETRENDERBUFFERPARAMETERIVPROC_HPP fn=reinterpret_cast<PFNGLGETRENDERBUFFERPARAMETERIVPROC_HPP>(_impl::_get_proc_address("glGetRenderbufferParameteriv",4,1));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetSamplerParameterIiv
#define GL_HPP_FUNDEF_GetSamplerParameterIiv
typedef void (*PFNGLGETSAMPLERPARAMETERIIVPROC_HPP)(GLuint,GLenum,GLint *);
static inline void GetSamplerParameterIiv(GLuint sampler1,GLenum pname1,GLint * params1)
{
	static PFNGLGETSAMPLERPARAMETERIIVPROC_HPP fn=reinterpret_cast<PFNGLGETSAMPLERPARAMETERIIVPROC_HPP>(_impl::_get_proc_address("glGetSamplerParameterIiv",4,1));
	 fn(sampler1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetSamplerParameterIuiv
#define GL_HPP_FUNDEF_GetSamplerParameterIuiv
typedef void (*PFNGLGETSAMPLERPARAMETERIUIVPROC_HPP)(GLuint,GLenum,GLuint *);
static inline void GetSamplerParameterIuiv(GLuint sampler1,GLenum pname1,GLuint * params1)
{
	static PFNGLGETSAMPLERPARAMETERIUIVPROC_HPP fn=reinterpret_cast<PFNGLGETSAMPLERPARAMETERIUIVPROC_HPP>(_impl::_get_proc_address("glGetSamplerParameterIuiv",4,1));
	 fn(sampler1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetSamplerParameterfv
#define GL_HPP_FUNDEF_GetSamplerParameterfv
typedef void (*PFNGLGETSAMPLERPARAMETERFVPROC_HPP)(GLuint,GLenum,GLfloat *);
static inline void GetSamplerParameterfv(GLuint sampler1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETSAMPLERPARAMETERFVPROC_HPP fn=reinterpret_cast<PFNGLGETSAMPLERPARAMETERFVPROC_HPP>(_impl::_get_proc_address("glGetSamplerParameterfv",4,1));
	 fn(sampler1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetSamplerParameteriv
#define GL_HPP_FUNDEF_GetSamplerParameteriv
typedef void (*PFNGLGETSAMPLERPARAMETERIVPROC_HPP)(GLuint,GLenum,GLint *);
static inline void GetSamplerParameteriv(GLuint sampler1,GLenum pname1,GLint * params1)
{
	static PFNGLGETSAMPLERPARAMETERIVPROC_HPP fn=reinterpret_cast<PFNGLGETSAMPLERPARAMETERIVPROC_HPP>(_impl::_get_proc_address("glGetSamplerParameteriv",4,1));
	 fn(sampler1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetShaderInfoLog
#define GL_HPP_FUNDEF_GetShaderInfoLog
typedef void (*PFNGLGETSHADERINFOLOGPROC_HPP)(GLuint,GLsizei,GLsizei *,GLchar *);
static inline void GetShaderInfoLog(GLuint shader1,GLsizei bufSize1,GLsizei * length1,GLchar * infoLog1)
{
	static PFNGLGETSHADERINFOLOGPROC_HPP fn=reinterpret_cast<PFNGLGETSHADERINFOLOGPROC_HPP>(_impl::_get_proc_address("glGetShaderInfoLog",4,1));
	 fn(shader1,bufSize1,length1,infoLog1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetShaderPrecisionFormat
#define GL_HPP_FUNDEF_GetShaderPrecisionFormat
typedef void (*PFNGLGETSHADERPRECISIONFORMATPROC_HPP)(GLenum,GLenum,GLint *,GLint *);
static inline void GetShaderPrecisionFormat(GLenum shadertype1,GLenum precisiontype1,GLint * range1,GLint * precision1)
{
	static PFNGLGETSHADERPRECISIONFORMATPROC_HPP fn=reinterpret_cast<PFNGLGETSHADERPRECISIONFORMATPROC_HPP>(_impl::_get_proc_address("glGetShaderPrecisionFormat",4,1));
	 fn(shadertype1,precisiontype1,range1,precision1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetShaderSource
#define GL_HPP_FUNDEF_GetShaderSource
typedef void (*PFNGLGETSHADERSOURCEPROC_HPP)(GLuint,GLsizei,GLsizei *,GLchar *);
static inline void GetShaderSource(GLuint shader1,GLsizei bufSize1,GLsizei * length1,GLchar * source1)
{
	static PFNGLGETSHADERSOURCEPROC_HPP fn=reinterpret_cast<PFNGLGETSHADERSOURCEPROC_HPP>(_impl::_get_proc_address("glGetShaderSource",4,1));
	 fn(shader1,bufSize1,length1,source1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetShaderiv
#define GL_HPP_FUNDEF_GetShaderiv
typedef void (*PFNGLGETSHADERIVPROC_HPP)(GLuint,GLenum,GLint *);
static inline void GetShaderiv(GLuint shader1,GLenum pname1,GLint * params1)
{
	static PFNGLGETSHADERIVPROC_HPP fn=reinterpret_cast<PFNGLGETSHADERIVPROC_HPP>(_impl::_get_proc_address("glGetShaderiv",4,1));
	 fn(shader1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetString
#define GL_HPP_FUNDEF_GetString
typedef const GLubyte * (*PFNGLGETSTRINGPROC_HPP)(GLenum);
static inline const GLubyte * GetString(GLenum name1)
{
	static PFNGLGETSTRINGPROC_HPP fn=reinterpret_cast<PFNGLGETSTRINGPROC_HPP>(_impl::_get_proc_address("glGetString",4,1));
	return fn(name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetStringi
#define GL_HPP_FUNDEF_GetStringi
typedef const GLubyte * (*PFNGLGETSTRINGIPROC_HPP)(GLenum,GLuint);
static inline const GLubyte * GetStringi(GLenum name1,GLuint index1)
{
	static PFNGLGETSTRINGIPROC_HPP fn=reinterpret_cast<PFNGLGETSTRINGIPROC_HPP>(_impl::_get_proc_address("glGetStringi",4,1));
	return fn(name1,index1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetSubroutineIndex
#define GL_HPP_FUNDEF_GetSubroutineIndex
typedef GLuint (*PFNGLGETSUBROUTINEINDEXPROC_HPP)(GLuint,GLenum,const GLchar *);
static inline GLuint GetSubroutineIndex(GLuint program1,GLenum shadertype1,const GLchar * name1)
{
	static PFNGLGETSUBROUTINEINDEXPROC_HPP fn=reinterpret_cast<PFNGLGETSUBROUTINEINDEXPROC_HPP>(_impl::_get_proc_address("glGetSubroutineIndex",4,1));
	return fn(program1,shadertype1,name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetSubroutineUniformLocation
#define GL_HPP_FUNDEF_GetSubroutineUniformLocation
typedef GLint (*PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC_HPP)(GLuint,GLenum,const GLchar *);
static inline GLint GetSubroutineUniformLocation(GLuint program1,GLenum shadertype1,const GLchar * name1)
{
	static PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC_HPP fn=reinterpret_cast<PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC_HPP>(_impl::_get_proc_address("glGetSubroutineUniformLocation",4,1));
	return fn(program1,shadertype1,name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetSynciv
#define GL_HPP_FUNDEF_GetSynciv
typedef void (*PFNGLGETSYNCIVPROC_HPP)(GLsync,GLenum,GLsizei,GLsizei *,GLint *);
static inline void GetSynciv(GLsync sync1,GLenum pname1,GLsizei bufSize1,GLsizei * length1,GLint * values1)
{
	static PFNGLGETSYNCIVPROC_HPP fn=reinterpret_cast<PFNGLGETSYNCIVPROC_HPP>(_impl::_get_proc_address("glGetSynciv",4,1));
	 fn(sync1,pname1,bufSize1,length1,values1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetTexImage
#define GL_HPP_FUNDEF_GetTexImage
typedef void (*PFNGLGETTEXIMAGEPROC_HPP)(GLenum,GLint,GLenum,GLenum,void *);
static inline void GetTexImage(GLenum target1,GLint level1,GLenum format1,GLenum type1,void * pixels1)
{
	static PFNGLGETTEXIMAGEPROC_HPP fn=reinterpret_cast<PFNGLGETTEXIMAGEPROC_HPP>(_impl::_get_proc_address("glGetTexImage",4,1));
	 fn(target1,level1,format1,type1,pixels1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetTexLevelParameterfv
#define GL_HPP_FUNDEF_GetTexLevelParameterfv
typedef void (*PFNGLGETTEXLEVELPARAMETERFVPROC_HPP)(GLenum,GLint,GLenum,GLfloat *);
static inline void GetTexLevelParameterfv(GLenum target1,GLint level1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETTEXLEVELPARAMETERFVPROC_HPP fn=reinterpret_cast<PFNGLGETTEXLEVELPARAMETERFVPROC_HPP>(_impl::_get_proc_address("glGetTexLevelParameterfv",4,1));
	 fn(target1,level1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetTexLevelParameteriv
#define GL_HPP_FUNDEF_GetTexLevelParameteriv
typedef void (*PFNGLGETTEXLEVELPARAMETERIVPROC_HPP)(GLenum,GLint,GLenum,GLint *);
static inline void GetTexLevelParameteriv(GLenum target1,GLint level1,GLenum pname1,GLint * params1)
{
	static PFNGLGETTEXLEVELPARAMETERIVPROC_HPP fn=reinterpret_cast<PFNGLGETTEXLEVELPARAMETERIVPROC_HPP>(_impl::_get_proc_address("glGetTexLevelParameteriv",4,1));
	 fn(target1,level1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetTexParameterIiv
#define GL_HPP_FUNDEF_GetTexParameterIiv
typedef void (*PFNGLGETTEXPARAMETERIIVPROC_HPP)(GLenum,GLenum,GLint *);
static inline void GetTexParameterIiv(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETTEXPARAMETERIIVPROC_HPP fn=reinterpret_cast<PFNGLGETTEXPARAMETERIIVPROC_HPP>(_impl::_get_proc_address("glGetTexParameterIiv",4,1));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetTexParameterIuiv
#define GL_HPP_FUNDEF_GetTexParameterIuiv
typedef void (*PFNGLGETTEXPARAMETERIUIVPROC_HPP)(GLenum,GLenum,GLuint *);
static inline void GetTexParameterIuiv(GLenum target1,GLenum pname1,GLuint * params1)
{
	static PFNGLGETTEXPARAMETERIUIVPROC_HPP fn=reinterpret_cast<PFNGLGETTEXPARAMETERIUIVPROC_HPP>(_impl::_get_proc_address("glGetTexParameterIuiv",4,1));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetTexParameterfv
#define GL_HPP_FUNDEF_GetTexParameterfv
typedef void (*PFNGLGETTEXPARAMETERFVPROC_HPP)(GLenum,GLenum,GLfloat *);
static inline void GetTexParameterfv(GLenum target1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETTEXPARAMETERFVPROC_HPP fn=reinterpret_cast<PFNGLGETTEXPARAMETERFVPROC_HPP>(_impl::_get_proc_address("glGetTexParameterfv",4,1));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetTexParameteriv
#define GL_HPP_FUNDEF_GetTexParameteriv
typedef void (*PFNGLGETTEXPARAMETERIVPROC_HPP)(GLenum,GLenum,GLint *);
static inline void GetTexParameteriv(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETTEXPARAMETERIVPROC_HPP fn=reinterpret_cast<PFNGLGETTEXPARAMETERIVPROC_HPP>(_impl::_get_proc_address("glGetTexParameteriv",4,1));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetTransformFeedbackVarying
#define GL_HPP_FUNDEF_GetTransformFeedbackVarying
typedef void (*PFNGLGETTRANSFORMFEEDBACKVARYINGPROC_HPP)(GLuint,GLuint,GLsizei,GLsizei *,GLsizei *,GLenum *,GLchar *);
static inline void GetTransformFeedbackVarying(GLuint program1,GLuint index1,GLsizei bufSize1,GLsizei * length1,GLsizei * size1,GLenum * type1,GLchar * name1)
{
	static PFNGLGETTRANSFORMFEEDBACKVARYINGPROC_HPP fn=reinterpret_cast<PFNGLGETTRANSFORMFEEDBACKVARYINGPROC_HPP>(_impl::_get_proc_address("glGetTransformFeedbackVarying",4,1));
	 fn(program1,index1,bufSize1,length1,size1,type1,name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetUniformBlockIndex
#define GL_HPP_FUNDEF_GetUniformBlockIndex
typedef GLuint (*PFNGLGETUNIFORMBLOCKINDEXPROC_HPP)(GLuint,const GLchar *);
static inline GLuint GetUniformBlockIndex(GLuint program1,const GLchar * uniformBlockName1)
{
	static PFNGLGETUNIFORMBLOCKINDEXPROC_HPP fn=reinterpret_cast<PFNGLGETUNIFORMBLOCKINDEXPROC_HPP>(_impl::_get_proc_address("glGetUniformBlockIndex",4,1));
	return fn(program1,uniformBlockName1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetUniformIndices
#define GL_HPP_FUNDEF_GetUniformIndices
typedef void (*PFNGLGETUNIFORMINDICESPROC_HPP)(GLuint,GLsizei,const GLchar *const*,GLuint *);
static inline void GetUniformIndices(GLuint program1,GLsizei uniformCount1,const GLchar *const* uniformNames1,GLuint * uniformIndices1)
{
	static PFNGLGETUNIFORMINDICESPROC_HPP fn=reinterpret_cast<PFNGLGETUNIFORMINDICESPROC_HPP>(_impl::_get_proc_address("glGetUniformIndices",4,1));
	 fn(program1,uniformCount1,uniformNames1,uniformIndices1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetUniformLocation
#define GL_HPP_FUNDEF_GetUniformLocation
typedef GLint (*PFNGLGETUNIFORMLOCATIONPROC_HPP)(GLuint,const GLchar *);
static inline GLint GetUniformLocation(GLuint program1,const GLchar * name1)
{
	static PFNGLGETUNIFORMLOCATIONPROC_HPP fn=reinterpret_cast<PFNGLGETUNIFORMLOCATIONPROC_HPP>(_impl::_get_proc_address("glGetUniformLocation",4,1));
	return fn(program1,name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetUniformSubroutineuiv
#define GL_HPP_FUNDEF_GetUniformSubroutineuiv
typedef void (*PFNGLGETUNIFORMSUBROUTINEUIVPROC_HPP)(GLenum,GLint,GLuint *);
static inline void GetUniformSubroutineuiv(GLenum shadertype1,GLint location1,GLuint * params1)
{
	static PFNGLGETUNIFORMSUBROUTINEUIVPROC_HPP fn=reinterpret_cast<PFNGLGETUNIFORMSUBROUTINEUIVPROC_HPP>(_impl::_get_proc_address("glGetUniformSubroutineuiv",4,1));
	 fn(shadertype1,location1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetUniformdv
#define GL_HPP_FUNDEF_GetUniformdv
typedef void (*PFNGLGETUNIFORMDVPROC_HPP)(GLuint,GLint,GLdouble *);
static inline void GetUniformdv(GLuint program1,GLint location1,GLdouble * params1)
{
	static PFNGLGETUNIFORMDVPROC_HPP fn=reinterpret_cast<PFNGLGETUNIFORMDVPROC_HPP>(_impl::_get_proc_address("glGetUniformdv",4,1));
	 fn(program1,location1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetUniformfv
#define GL_HPP_FUNDEF_GetUniformfv
typedef void (*PFNGLGETUNIFORMFVPROC_HPP)(GLuint,GLint,GLfloat *);
static inline void GetUniformfv(GLuint program1,GLint location1,GLfloat * params1)
{
	static PFNGLGETUNIFORMFVPROC_HPP fn=reinterpret_cast<PFNGLGETUNIFORMFVPROC_HPP>(_impl::_get_proc_address("glGetUniformfv",4,1));
	 fn(program1,location1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetUniformiv
#define GL_HPP_FUNDEF_GetUniformiv
typedef void (*PFNGLGETUNIFORMIVPROC_HPP)(GLuint,GLint,GLint *);
static inline void GetUniformiv(GLuint program1,GLint location1,GLint * params1)
{
	static PFNGLGETUNIFORMIVPROC_HPP fn=reinterpret_cast<PFNGLGETUNIFORMIVPROC_HPP>(_impl::_get_proc_address("glGetUniformiv",4,1));
	 fn(program1,location1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetUniformuiv
#define GL_HPP_FUNDEF_GetUniformuiv
typedef void (*PFNGLGETUNIFORMUIVPROC_HPP)(GLuint,GLint,GLuint *);
static inline void GetUniformuiv(GLuint program1,GLint location1,GLuint * params1)
{
	static PFNGLGETUNIFORMUIVPROC_HPP fn=reinterpret_cast<PFNGLGETUNIFORMUIVPROC_HPP>(_impl::_get_proc_address("glGetUniformuiv",4,1));
	 fn(program1,location1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetVertexAttribIiv
#define GL_HPP_FUNDEF_GetVertexAttribIiv
typedef void (*PFNGLGETVERTEXATTRIBIIVPROC_HPP)(GLuint,GLenum,GLint *);
static inline void GetVertexAttribIiv(GLuint index1,GLenum pname1,GLint * params1)
{
	static PFNGLGETVERTEXATTRIBIIVPROC_HPP fn=reinterpret_cast<PFNGLGETVERTEXATTRIBIIVPROC_HPP>(_impl::_get_proc_address("glGetVertexAttribIiv",4,1));
	 fn(index1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetVertexAttribIuiv
#define GL_HPP_FUNDEF_GetVertexAttribIuiv
typedef void (*PFNGLGETVERTEXATTRIBIUIVPROC_HPP)(GLuint,GLenum,GLuint *);
static inline void GetVertexAttribIuiv(GLuint index1,GLenum pname1,GLuint * params1)
{
	static PFNGLGETVERTEXATTRIBIUIVPROC_HPP fn=reinterpret_cast<PFNGLGETVERTEXATTRIBIUIVPROC_HPP>(_impl::_get_proc_address("glGetVertexAttribIuiv",4,1));
	 fn(index1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetVertexAttribLdv
#define GL_HPP_FUNDEF_GetVertexAttribLdv
typedef void (*PFNGLGETVERTEXATTRIBLDVPROC_HPP)(GLuint,GLenum,GLdouble *);
static inline void GetVertexAttribLdv(GLuint index1,GLenum pname1,GLdouble * params1)
{
	static PFNGLGETVERTEXATTRIBLDVPROC_HPP fn=reinterpret_cast<PFNGLGETVERTEXATTRIBLDVPROC_HPP>(_impl::_get_proc_address("glGetVertexAttribLdv",4,1));
	 fn(index1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetVertexAttribPointerv
#define GL_HPP_FUNDEF_GetVertexAttribPointerv
typedef void (*PFNGLGETVERTEXATTRIBPOINTERVPROC_HPP)(GLuint,GLenum,void **);
static inline void GetVertexAttribPointerv(GLuint index1,GLenum pname1,void ** pointer1)
{
	static PFNGLGETVERTEXATTRIBPOINTERVPROC_HPP fn=reinterpret_cast<PFNGLGETVERTEXATTRIBPOINTERVPROC_HPP>(_impl::_get_proc_address("glGetVertexAttribPointerv",4,1));
	 fn(index1,pname1,pointer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetVertexAttribdv
#define GL_HPP_FUNDEF_GetVertexAttribdv
typedef void (*PFNGLGETVERTEXATTRIBDVPROC_HPP)(GLuint,GLenum,GLdouble *);
static inline void GetVertexAttribdv(GLuint index1,GLenum pname1,GLdouble * params1)
{
	static PFNGLGETVERTEXATTRIBDVPROC_HPP fn=reinterpret_cast<PFNGLGETVERTEXATTRIBDVPROC_HPP>(_impl::_get_proc_address("glGetVertexAttribdv",4,1));
	 fn(index1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetVertexAttribfv
#define GL_HPP_FUNDEF_GetVertexAttribfv
typedef void (*PFNGLGETVERTEXATTRIBFVPROC_HPP)(GLuint,GLenum,GLfloat *);
static inline void GetVertexAttribfv(GLuint index1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETVERTEXATTRIBFVPROC_HPP fn=reinterpret_cast<PFNGLGETVERTEXATTRIBFVPROC_HPP>(_impl::_get_proc_address("glGetVertexAttribfv",4,1));
	 fn(index1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetVertexAttribiv
#define GL_HPP_FUNDEF_GetVertexAttribiv
typedef void (*PFNGLGETVERTEXATTRIBIVPROC_HPP)(GLuint,GLenum,GLint *);
static inline void GetVertexAttribiv(GLuint index1,GLenum pname1,GLint * params1)
{
	static PFNGLGETVERTEXATTRIBIVPROC_HPP fn=reinterpret_cast<PFNGLGETVERTEXATTRIBIVPROC_HPP>(_impl::_get_proc_address("glGetVertexAttribiv",4,1));
	 fn(index1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Hint
#define GL_HPP_FUNDEF_Hint
typedef void (*PFNGLHINTPROC_HPP)(GLenum,GLenum);
static inline void Hint(GLenum target1,GLenum mode1)
{
	static PFNGLHINTPROC_HPP fn=reinterpret_cast<PFNGLHINTPROC_HPP>(_impl::_get_proc_address("glHint",4,1));
	 fn(target1,mode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsBuffer
#define GL_HPP_FUNDEF_IsBuffer
typedef GLboolean (*PFNGLISBUFFERPROC_HPP)(GLuint);
static inline GLboolean IsBuffer(GLuint buffer1)
{
	static PFNGLISBUFFERPROC_HPP fn=reinterpret_cast<PFNGLISBUFFERPROC_HPP>(_impl::_get_proc_address("glIsBuffer",4,1));
	return fn(buffer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsEnabled
#define GL_HPP_FUNDEF_IsEnabled
typedef GLboolean (*PFNGLISENABLEDPROC_HPP)(GLenum);
static inline GLboolean IsEnabled(GLenum cap1)
{
	static PFNGLISENABLEDPROC_HPP fn=reinterpret_cast<PFNGLISENABLEDPROC_HPP>(_impl::_get_proc_address("glIsEnabled",4,1));
	return fn(cap1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsEnabledi
#define GL_HPP_FUNDEF_IsEnabledi
typedef GLboolean (*PFNGLISENABLEDIPROC_HPP)(GLenum,GLuint);
static inline GLboolean IsEnabledi(GLenum target1,GLuint index1)
{
	static PFNGLISENABLEDIPROC_HPP fn=reinterpret_cast<PFNGLISENABLEDIPROC_HPP>(_impl::_get_proc_address("glIsEnabledi",4,1));
	return fn(target1,index1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsFramebuffer
#define GL_HPP_FUNDEF_IsFramebuffer
typedef GLboolean (*PFNGLISFRAMEBUFFERPROC_HPP)(GLuint);
static inline GLboolean IsFramebuffer(GLuint framebuffer1)
{
	static PFNGLISFRAMEBUFFERPROC_HPP fn=reinterpret_cast<PFNGLISFRAMEBUFFERPROC_HPP>(_impl::_get_proc_address("glIsFramebuffer",4,1));
	return fn(framebuffer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsProgram
#define GL_HPP_FUNDEF_IsProgram
typedef GLboolean (*PFNGLISPROGRAMPROC_HPP)(GLuint);
static inline GLboolean IsProgram(GLuint program1)
{
	static PFNGLISPROGRAMPROC_HPP fn=reinterpret_cast<PFNGLISPROGRAMPROC_HPP>(_impl::_get_proc_address("glIsProgram",4,1));
	return fn(program1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsProgramPipeline
#define GL_HPP_FUNDEF_IsProgramPipeline
typedef GLboolean (*PFNGLISPROGRAMPIPELINEPROC_HPP)(GLuint);
static inline GLboolean IsProgramPipeline(GLuint pipeline1)
{
	static PFNGLISPROGRAMPIPELINEPROC_HPP fn=reinterpret_cast<PFNGLISPROGRAMPIPELINEPROC_HPP>(_impl::_get_proc_address("glIsProgramPipeline",4,1));
	return fn(pipeline1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsQuery
#define GL_HPP_FUNDEF_IsQuery
typedef GLboolean (*PFNGLISQUERYPROC_HPP)(GLuint);
static inline GLboolean IsQuery(GLuint id1)
{
	static PFNGLISQUERYPROC_HPP fn=reinterpret_cast<PFNGLISQUERYPROC_HPP>(_impl::_get_proc_address("glIsQuery",4,1));
	return fn(id1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsRenderbuffer
#define GL_HPP_FUNDEF_IsRenderbuffer
typedef GLboolean (*PFNGLISRENDERBUFFERPROC_HPP)(GLuint);
static inline GLboolean IsRenderbuffer(GLuint renderbuffer1)
{
	static PFNGLISRENDERBUFFERPROC_HPP fn=reinterpret_cast<PFNGLISRENDERBUFFERPROC_HPP>(_impl::_get_proc_address("glIsRenderbuffer",4,1));
	return fn(renderbuffer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsSampler
#define GL_HPP_FUNDEF_IsSampler
typedef GLboolean (*PFNGLISSAMPLERPROC_HPP)(GLuint);
static inline GLboolean IsSampler(GLuint sampler1)
{
	static PFNGLISSAMPLERPROC_HPP fn=reinterpret_cast<PFNGLISSAMPLERPROC_HPP>(_impl::_get_proc_address("glIsSampler",4,1));
	return fn(sampler1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsShader
#define GL_HPP_FUNDEF_IsShader
typedef GLboolean (*PFNGLISSHADERPROC_HPP)(GLuint);
static inline GLboolean IsShader(GLuint shader1)
{
	static PFNGLISSHADERPROC_HPP fn=reinterpret_cast<PFNGLISSHADERPROC_HPP>(_impl::_get_proc_address("glIsShader",4,1));
	return fn(shader1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsSync
#define GL_HPP_FUNDEF_IsSync
typedef GLboolean (*PFNGLISSYNCPROC_HPP)(GLsync);
static inline GLboolean IsSync(GLsync sync1)
{
	static PFNGLISSYNCPROC_HPP fn=reinterpret_cast<PFNGLISSYNCPROC_HPP>(_impl::_get_proc_address("glIsSync",4,1));
	return fn(sync1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsTexture
#define GL_HPP_FUNDEF_IsTexture
typedef GLboolean (*PFNGLISTEXTUREPROC_HPP)(GLuint);
static inline GLboolean IsTexture(GLuint texture1)
{
	static PFNGLISTEXTUREPROC_HPP fn=reinterpret_cast<PFNGLISTEXTUREPROC_HPP>(_impl::_get_proc_address("glIsTexture",4,1));
	return fn(texture1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsTransformFeedback
#define GL_HPP_FUNDEF_IsTransformFeedback
typedef GLboolean (*PFNGLISTRANSFORMFEEDBACKPROC_HPP)(GLuint);
static inline GLboolean IsTransformFeedback(GLuint id1)
{
	static PFNGLISTRANSFORMFEEDBACKPROC_HPP fn=reinterpret_cast<PFNGLISTRANSFORMFEEDBACKPROC_HPP>(_impl::_get_proc_address("glIsTransformFeedback",4,1));
	return fn(id1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsVertexArray
#define GL_HPP_FUNDEF_IsVertexArray
typedef GLboolean (*PFNGLISVERTEXARRAYPROC_HPP)(GLuint);
static inline GLboolean IsVertexArray(GLuint array1)
{
	static PFNGLISVERTEXARRAYPROC_HPP fn=reinterpret_cast<PFNGLISVERTEXARRAYPROC_HPP>(_impl::_get_proc_address("glIsVertexArray",4,1));
	return fn(array1);
}
#endif

#ifndef	GL_HPP_FUNDEF_LineWidth
#define GL_HPP_FUNDEF_LineWidth
typedef void (*PFNGLLINEWIDTHPROC_HPP)(GLfloat);
static inline void LineWidth(GLfloat width1)
{
	static PFNGLLINEWIDTHPROC_HPP fn=reinterpret_cast<PFNGLLINEWIDTHPROC_HPP>(_impl::_get_proc_address("glLineWidth",4,1));
	 fn(width1);
}
#endif

#ifndef	GL_HPP_FUNDEF_LinkProgram
#define GL_HPP_FUNDEF_LinkProgram
typedef void (*PFNGLLINKPROGRAMPROC_HPP)(GLuint);
static inline void LinkProgram(GLuint program1)
{
	static PFNGLLINKPROGRAMPROC_HPP fn=reinterpret_cast<PFNGLLINKPROGRAMPROC_HPP>(_impl::_get_proc_address("glLinkProgram",4,1));
	 fn(program1);
}
#endif

#ifndef	GL_HPP_FUNDEF_LogicOp
#define GL_HPP_FUNDEF_LogicOp
typedef void (*PFNGLLOGICOPPROC_HPP)(GLenum);
static inline void LogicOp(GLenum opcode1)
{
	static PFNGLLOGICOPPROC_HPP fn=reinterpret_cast<PFNGLLOGICOPPROC_HPP>(_impl::_get_proc_address("glLogicOp",4,1));
	 fn(opcode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MapBuffer
#define GL_HPP_FUNDEF_MapBuffer
typedef void * (*PFNGLMAPBUFFERPROC_HPP)(GLenum,GLenum);
static inline void * MapBuffer(GLenum target1,GLenum access1)
{
	static PFNGLMAPBUFFERPROC_HPP fn=reinterpret_cast<PFNGLMAPBUFFERPROC_HPP>(_impl::_get_proc_address("glMapBuffer",4,1));
	return fn(target1,access1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MapBufferRange
#define GL_HPP_FUNDEF_MapBufferRange
typedef void * (*PFNGLMAPBUFFERRANGEPROC_HPP)(GLenum,GLintptr,GLsizeiptr,GLbitfield);
static inline void * MapBufferRange(GLenum target1,GLintptr offset1,GLsizeiptr length1,GLbitfield access1)
{
	static PFNGLMAPBUFFERRANGEPROC_HPP fn=reinterpret_cast<PFNGLMAPBUFFERRANGEPROC_HPP>(_impl::_get_proc_address("glMapBufferRange",4,1));
	return fn(target1,offset1,length1,access1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MinSampleShading
#define GL_HPP_FUNDEF_MinSampleShading
typedef void (*PFNGLMINSAMPLESHADINGPROC_HPP)(GLfloat);
static inline void MinSampleShading(GLfloat value1)
{
	static PFNGLMINSAMPLESHADINGPROC_HPP fn=reinterpret_cast<PFNGLMINSAMPLESHADINGPROC_HPP>(_impl::_get_proc_address("glMinSampleShading",4,1));
	 fn(value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiDrawArrays
#define GL_HPP_FUNDEF_MultiDrawArrays
typedef void (*PFNGLMULTIDRAWARRAYSPROC_HPP)(GLenum,const GLint *,const GLsizei *,GLsizei);
static inline void MultiDrawArrays(GLenum mode1,const GLint * first1,const GLsizei * count1,GLsizei drawcount1)
{
	static PFNGLMULTIDRAWARRAYSPROC_HPP fn=reinterpret_cast<PFNGLMULTIDRAWARRAYSPROC_HPP>(_impl::_get_proc_address("glMultiDrawArrays",4,1));
	 fn(mode1,first1,count1,drawcount1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiDrawElements
#define GL_HPP_FUNDEF_MultiDrawElements
typedef void (*PFNGLMULTIDRAWELEMENTSPROC_HPP)(GLenum,const GLsizei *,GLenum,const void *const*,GLsizei);
static inline void MultiDrawElements(GLenum mode1,const GLsizei * count1,GLenum type1,const void *const* indices1,GLsizei drawcount1)
{
	static PFNGLMULTIDRAWELEMENTSPROC_HPP fn=reinterpret_cast<PFNGLMULTIDRAWELEMENTSPROC_HPP>(_impl::_get_proc_address("glMultiDrawElements",4,1));
	 fn(mode1,count1,type1,indices1,drawcount1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiDrawElementsBaseVertex
#define GL_HPP_FUNDEF_MultiDrawElementsBaseVertex
typedef void (*PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC_HPP)(GLenum,const GLsizei *,GLenum,const void *const*,GLsizei,const GLint *);
static inline void MultiDrawElementsBaseVertex(GLenum mode1,const GLsizei * count1,GLenum type1,const void *const* indices1,GLsizei drawcount1,const GLint * basevertex1)
{
	static PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC_HPP fn=reinterpret_cast<PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC_HPP>(_impl::_get_proc_address("glMultiDrawElementsBaseVertex",4,1));
	 fn(mode1,count1,type1,indices1,drawcount1,basevertex1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PatchParameterfv
#define GL_HPP_FUNDEF_PatchParameterfv
typedef void (*PFNGLPATCHPARAMETERFVPROC_HPP)(GLenum,const GLfloat *);
static inline void PatchParameterfv(GLenum pname1,const GLfloat * values1)
{
	static PFNGLPATCHPARAMETERFVPROC_HPP fn=reinterpret_cast<PFNGLPATCHPARAMETERFVPROC_HPP>(_impl::_get_proc_address("glPatchParameterfv",4,1));
	 fn(pname1,values1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PatchParameteri
#define GL_HPP_FUNDEF_PatchParameteri
typedef void (*PFNGLPATCHPARAMETERIPROC_HPP)(GLenum,GLint);
static inline void PatchParameteri(GLenum pname1,GLint value1)
{
	static PFNGLPATCHPARAMETERIPROC_HPP fn=reinterpret_cast<PFNGLPATCHPARAMETERIPROC_HPP>(_impl::_get_proc_address("glPatchParameteri",4,1));
	 fn(pname1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PauseTransformFeedback
#define GL_HPP_FUNDEF_PauseTransformFeedback
typedef void (*PFNGLPAUSETRANSFORMFEEDBACKPROC_HPP)();
static inline void PauseTransformFeedback()
{
	static PFNGLPAUSETRANSFORMFEEDBACKPROC_HPP fn=reinterpret_cast<PFNGLPAUSETRANSFORMFEEDBACKPROC_HPP>(_impl::_get_proc_address("glPauseTransformFeedback",4,1));
	 fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_PixelStoref
#define GL_HPP_FUNDEF_PixelStoref
typedef void (*PFNGLPIXELSTOREFPROC_HPP)(GLenum,GLfloat);
static inline void PixelStoref(GLenum pname1,GLfloat param1)
{
	static PFNGLPIXELSTOREFPROC_HPP fn=reinterpret_cast<PFNGLPIXELSTOREFPROC_HPP>(_impl::_get_proc_address("glPixelStoref",4,1));
	 fn(pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PixelStorei
#define GL_HPP_FUNDEF_PixelStorei
typedef void (*PFNGLPIXELSTOREIPROC_HPP)(GLenum,GLint);
static inline void PixelStorei(GLenum pname1,GLint param1)
{
	static PFNGLPIXELSTOREIPROC_HPP fn=reinterpret_cast<PFNGLPIXELSTOREIPROC_HPP>(_impl::_get_proc_address("glPixelStorei",4,1));
	 fn(pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PointParameterf
#define GL_HPP_FUNDEF_PointParameterf
typedef void (*PFNGLPOINTPARAMETERFPROC_HPP)(GLenum,GLfloat);
static inline void PointParameterf(GLenum pname1,GLfloat param1)
{
	static PFNGLPOINTPARAMETERFPROC_HPP fn=reinterpret_cast<PFNGLPOINTPARAMETERFPROC_HPP>(_impl::_get_proc_address("glPointParameterf",4,1));
	 fn(pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PointParameterfv
#define GL_HPP_FUNDEF_PointParameterfv
typedef void (*PFNGLPOINTPARAMETERFVPROC_HPP)(GLenum,const GLfloat *);
static inline void PointParameterfv(GLenum pname1,const GLfloat * params1)
{
	static PFNGLPOINTPARAMETERFVPROC_HPP fn=reinterpret_cast<PFNGLPOINTPARAMETERFVPROC_HPP>(_impl::_get_proc_address("glPointParameterfv",4,1));
	 fn(pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PointParameteri
#define GL_HPP_FUNDEF_PointParameteri
typedef void (*PFNGLPOINTPARAMETERIPROC_HPP)(GLenum,GLint);
static inline void PointParameteri(GLenum pname1,GLint param1)
{
	static PFNGLPOINTPARAMETERIPROC_HPP fn=reinterpret_cast<PFNGLPOINTPARAMETERIPROC_HPP>(_impl::_get_proc_address("glPointParameteri",4,1));
	 fn(pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PointParameteriv
#define GL_HPP_FUNDEF_PointParameteriv
typedef void (*PFNGLPOINTPARAMETERIVPROC_HPP)(GLenum,const GLint *);
static inline void PointParameteriv(GLenum pname1,const GLint * params1)
{
	static PFNGLPOINTPARAMETERIVPROC_HPP fn=reinterpret_cast<PFNGLPOINTPARAMETERIVPROC_HPP>(_impl::_get_proc_address("glPointParameteriv",4,1));
	 fn(pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PointSize
#define GL_HPP_FUNDEF_PointSize
typedef void (*PFNGLPOINTSIZEPROC_HPP)(GLfloat);
static inline void PointSize(GLfloat size1)
{
	static PFNGLPOINTSIZEPROC_HPP fn=reinterpret_cast<PFNGLPOINTSIZEPROC_HPP>(_impl::_get_proc_address("glPointSize",4,1));
	 fn(size1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PolygonMode
#define GL_HPP_FUNDEF_PolygonMode
typedef void (*PFNGLPOLYGONMODEPROC_HPP)(GLenum,GLenum);
static inline void PolygonMode(GLenum face1,GLenum mode1)
{
	static PFNGLPOLYGONMODEPROC_HPP fn=reinterpret_cast<PFNGLPOLYGONMODEPROC_HPP>(_impl::_get_proc_address("glPolygonMode",4,1));
	 fn(face1,mode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PolygonOffset
#define GL_HPP_FUNDEF_PolygonOffset
typedef void (*PFNGLPOLYGONOFFSETPROC_HPP)(GLfloat,GLfloat);
static inline void PolygonOffset(GLfloat factor1,GLfloat units1)
{
	static PFNGLPOLYGONOFFSETPROC_HPP fn=reinterpret_cast<PFNGLPOLYGONOFFSETPROC_HPP>(_impl::_get_proc_address("glPolygonOffset",4,1));
	 fn(factor1,units1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PrimitiveRestartIndex
#define GL_HPP_FUNDEF_PrimitiveRestartIndex
typedef void (*PFNGLPRIMITIVERESTARTINDEXPROC_HPP)(GLuint);
static inline void PrimitiveRestartIndex(GLuint index1)
{
	static PFNGLPRIMITIVERESTARTINDEXPROC_HPP fn=reinterpret_cast<PFNGLPRIMITIVERESTARTINDEXPROC_HPP>(_impl::_get_proc_address("glPrimitiveRestartIndex",4,1));
	 fn(index1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramBinary
#define GL_HPP_FUNDEF_ProgramBinary
typedef void (*PFNGLPROGRAMBINARYPROC_HPP)(GLuint,GLenum,const void *,GLsizei);
static inline void ProgramBinary(GLuint program1,GLenum binaryFormat1,const void * binary1,GLsizei length1)
{
	static PFNGLPROGRAMBINARYPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMBINARYPROC_HPP>(_impl::_get_proc_address("glProgramBinary",4,1));
	 fn(program1,binaryFormat1,binary1,length1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramParameteri
#define GL_HPP_FUNDEF_ProgramParameteri
typedef void (*PFNGLPROGRAMPARAMETERIPROC_HPP)(GLuint,GLenum,GLint);
static inline void ProgramParameteri(GLuint program1,GLenum pname1,GLint value1)
{
	static PFNGLPROGRAMPARAMETERIPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMPARAMETERIPROC_HPP>(_impl::_get_proc_address("glProgramParameteri",4,1));
	 fn(program1,pname1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform1d
#define GL_HPP_FUNDEF_ProgramUniform1d
typedef void (*PFNGLPROGRAMUNIFORM1DPROC_HPP)(GLuint,GLint,GLdouble);
static inline void ProgramUniform1d(GLuint program1,GLint location1,GLdouble v01)
{
	static PFNGLPROGRAMUNIFORM1DPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM1DPROC_HPP>(_impl::_get_proc_address("glProgramUniform1d",4,1));
	 fn(program1,location1,v01);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform1dv
#define GL_HPP_FUNDEF_ProgramUniform1dv
typedef void (*PFNGLPROGRAMUNIFORM1DVPROC_HPP)(GLuint,GLint,GLsizei,const GLdouble *);
static inline void ProgramUniform1dv(GLuint program1,GLint location1,GLsizei count1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORM1DVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM1DVPROC_HPP>(_impl::_get_proc_address("glProgramUniform1dv",4,1));
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform1f
#define GL_HPP_FUNDEF_ProgramUniform1f
typedef void (*PFNGLPROGRAMUNIFORM1FPROC_HPP)(GLuint,GLint,GLfloat);
static inline void ProgramUniform1f(GLuint program1,GLint location1,GLfloat v01)
{
	static PFNGLPROGRAMUNIFORM1FPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM1FPROC_HPP>(_impl::_get_proc_address("glProgramUniform1f",4,1));
	 fn(program1,location1,v01);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform1fv
#define GL_HPP_FUNDEF_ProgramUniform1fv
typedef void (*PFNGLPROGRAMUNIFORM1FVPROC_HPP)(GLuint,GLint,GLsizei,const GLfloat *);
static inline void ProgramUniform1fv(GLuint program1,GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORM1FVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM1FVPROC_HPP>(_impl::_get_proc_address("glProgramUniform1fv",4,1));
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform1i
#define GL_HPP_FUNDEF_ProgramUniform1i
typedef void (*PFNGLPROGRAMUNIFORM1IPROC_HPP)(GLuint,GLint,GLint);
static inline void ProgramUniform1i(GLuint program1,GLint location1,GLint v01)
{
	static PFNGLPROGRAMUNIFORM1IPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM1IPROC_HPP>(_impl::_get_proc_address("glProgramUniform1i",4,1));
	 fn(program1,location1,v01);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform1iv
#define GL_HPP_FUNDEF_ProgramUniform1iv
typedef void (*PFNGLPROGRAMUNIFORM1IVPROC_HPP)(GLuint,GLint,GLsizei,const GLint *);
static inline void ProgramUniform1iv(GLuint program1,GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLPROGRAMUNIFORM1IVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM1IVPROC_HPP>(_impl::_get_proc_address("glProgramUniform1iv",4,1));
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform1ui
#define GL_HPP_FUNDEF_ProgramUniform1ui
typedef void (*PFNGLPROGRAMUNIFORM1UIPROC_HPP)(GLuint,GLint,GLuint);
static inline void ProgramUniform1ui(GLuint program1,GLint location1,GLuint v01)
{
	static PFNGLPROGRAMUNIFORM1UIPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM1UIPROC_HPP>(_impl::_get_proc_address("glProgramUniform1ui",4,1));
	 fn(program1,location1,v01);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform1uiv
#define GL_HPP_FUNDEF_ProgramUniform1uiv
typedef void (*PFNGLPROGRAMUNIFORM1UIVPROC_HPP)(GLuint,GLint,GLsizei,const GLuint *);
static inline void ProgramUniform1uiv(GLuint program1,GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLPROGRAMUNIFORM1UIVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM1UIVPROC_HPP>(_impl::_get_proc_address("glProgramUniform1uiv",4,1));
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform2d
#define GL_HPP_FUNDEF_ProgramUniform2d
typedef void (*PFNGLPROGRAMUNIFORM2DPROC_HPP)(GLuint,GLint,GLdouble,GLdouble);
static inline void ProgramUniform2d(GLuint program1,GLint location1,GLdouble v01,GLdouble v11)
{
	static PFNGLPROGRAMUNIFORM2DPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM2DPROC_HPP>(_impl::_get_proc_address("glProgramUniform2d",4,1));
	 fn(program1,location1,v01,v11);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform2dv
#define GL_HPP_FUNDEF_ProgramUniform2dv
typedef void (*PFNGLPROGRAMUNIFORM2DVPROC_HPP)(GLuint,GLint,GLsizei,const GLdouble *);
static inline void ProgramUniform2dv(GLuint program1,GLint location1,GLsizei count1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORM2DVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM2DVPROC_HPP>(_impl::_get_proc_address("glProgramUniform2dv",4,1));
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform2f
#define GL_HPP_FUNDEF_ProgramUniform2f
typedef void (*PFNGLPROGRAMUNIFORM2FPROC_HPP)(GLuint,GLint,GLfloat,GLfloat);
static inline void ProgramUniform2f(GLuint program1,GLint location1,GLfloat v01,GLfloat v11)
{
	static PFNGLPROGRAMUNIFORM2FPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM2FPROC_HPP>(_impl::_get_proc_address("glProgramUniform2f",4,1));
	 fn(program1,location1,v01,v11);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform2fv
#define GL_HPP_FUNDEF_ProgramUniform2fv
typedef void (*PFNGLPROGRAMUNIFORM2FVPROC_HPP)(GLuint,GLint,GLsizei,const GLfloat *);
static inline void ProgramUniform2fv(GLuint program1,GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORM2FVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM2FVPROC_HPP>(_impl::_get_proc_address("glProgramUniform2fv",4,1));
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform2i
#define GL_HPP_FUNDEF_ProgramUniform2i
typedef void (*PFNGLPROGRAMUNIFORM2IPROC_HPP)(GLuint,GLint,GLint,GLint);
static inline void ProgramUniform2i(GLuint program1,GLint location1,GLint v01,GLint v11)
{
	static PFNGLPROGRAMUNIFORM2IPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM2IPROC_HPP>(_impl::_get_proc_address("glProgramUniform2i",4,1));
	 fn(program1,location1,v01,v11);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform2iv
#define GL_HPP_FUNDEF_ProgramUniform2iv
typedef void (*PFNGLPROGRAMUNIFORM2IVPROC_HPP)(GLuint,GLint,GLsizei,const GLint *);
static inline void ProgramUniform2iv(GLuint program1,GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLPROGRAMUNIFORM2IVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM2IVPROC_HPP>(_impl::_get_proc_address("glProgramUniform2iv",4,1));
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform2ui
#define GL_HPP_FUNDEF_ProgramUniform2ui
typedef void (*PFNGLPROGRAMUNIFORM2UIPROC_HPP)(GLuint,GLint,GLuint,GLuint);
static inline void ProgramUniform2ui(GLuint program1,GLint location1,GLuint v01,GLuint v11)
{
	static PFNGLPROGRAMUNIFORM2UIPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM2UIPROC_HPP>(_impl::_get_proc_address("glProgramUniform2ui",4,1));
	 fn(program1,location1,v01,v11);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform2uiv
#define GL_HPP_FUNDEF_ProgramUniform2uiv
typedef void (*PFNGLPROGRAMUNIFORM2UIVPROC_HPP)(GLuint,GLint,GLsizei,const GLuint *);
static inline void ProgramUniform2uiv(GLuint program1,GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLPROGRAMUNIFORM2UIVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM2UIVPROC_HPP>(_impl::_get_proc_address("glProgramUniform2uiv",4,1));
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform3d
#define GL_HPP_FUNDEF_ProgramUniform3d
typedef void (*PFNGLPROGRAMUNIFORM3DPROC_HPP)(GLuint,GLint,GLdouble,GLdouble,GLdouble);
static inline void ProgramUniform3d(GLuint program1,GLint location1,GLdouble v01,GLdouble v11,GLdouble v21)
{
	static PFNGLPROGRAMUNIFORM3DPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM3DPROC_HPP>(_impl::_get_proc_address("glProgramUniform3d",4,1));
	 fn(program1,location1,v01,v11,v21);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform3dv
#define GL_HPP_FUNDEF_ProgramUniform3dv
typedef void (*PFNGLPROGRAMUNIFORM3DVPROC_HPP)(GLuint,GLint,GLsizei,const GLdouble *);
static inline void ProgramUniform3dv(GLuint program1,GLint location1,GLsizei count1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORM3DVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM3DVPROC_HPP>(_impl::_get_proc_address("glProgramUniform3dv",4,1));
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform3f
#define GL_HPP_FUNDEF_ProgramUniform3f
typedef void (*PFNGLPROGRAMUNIFORM3FPROC_HPP)(GLuint,GLint,GLfloat,GLfloat,GLfloat);
static inline void ProgramUniform3f(GLuint program1,GLint location1,GLfloat v01,GLfloat v11,GLfloat v21)
{
	static PFNGLPROGRAMUNIFORM3FPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM3FPROC_HPP>(_impl::_get_proc_address("glProgramUniform3f",4,1));
	 fn(program1,location1,v01,v11,v21);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform3fv
#define GL_HPP_FUNDEF_ProgramUniform3fv
typedef void (*PFNGLPROGRAMUNIFORM3FVPROC_HPP)(GLuint,GLint,GLsizei,const GLfloat *);
static inline void ProgramUniform3fv(GLuint program1,GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORM3FVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM3FVPROC_HPP>(_impl::_get_proc_address("glProgramUniform3fv",4,1));
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform3i
#define GL_HPP_FUNDEF_ProgramUniform3i
typedef void (*PFNGLPROGRAMUNIFORM3IPROC_HPP)(GLuint,GLint,GLint,GLint,GLint);
static inline void ProgramUniform3i(GLuint program1,GLint location1,GLint v01,GLint v11,GLint v21)
{
	static PFNGLPROGRAMUNIFORM3IPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM3IPROC_HPP>(_impl::_get_proc_address("glProgramUniform3i",4,1));
	 fn(program1,location1,v01,v11,v21);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform3iv
#define GL_HPP_FUNDEF_ProgramUniform3iv
typedef void (*PFNGLPROGRAMUNIFORM3IVPROC_HPP)(GLuint,GLint,GLsizei,const GLint *);
static inline void ProgramUniform3iv(GLuint program1,GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLPROGRAMUNIFORM3IVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM3IVPROC_HPP>(_impl::_get_proc_address("glProgramUniform3iv",4,1));
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform3ui
#define GL_HPP_FUNDEF_ProgramUniform3ui
typedef void (*PFNGLPROGRAMUNIFORM3UIPROC_HPP)(GLuint,GLint,GLuint,GLuint,GLuint);
static inline void ProgramUniform3ui(GLuint program1,GLint location1,GLuint v01,GLuint v11,GLuint v21)
{
	static PFNGLPROGRAMUNIFORM3UIPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM3UIPROC_HPP>(_impl::_get_proc_address("glProgramUniform3ui",4,1));
	 fn(program1,location1,v01,v11,v21);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform3uiv
#define GL_HPP_FUNDEF_ProgramUniform3uiv
typedef void (*PFNGLPROGRAMUNIFORM3UIVPROC_HPP)(GLuint,GLint,GLsizei,const GLuint *);
static inline void ProgramUniform3uiv(GLuint program1,GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLPROGRAMUNIFORM3UIVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM3UIVPROC_HPP>(_impl::_get_proc_address("glProgramUniform3uiv",4,1));
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform4d
#define GL_HPP_FUNDEF_ProgramUniform4d
typedef void (*PFNGLPROGRAMUNIFORM4DPROC_HPP)(GLuint,GLint,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void ProgramUniform4d(GLuint program1,GLint location1,GLdouble v01,GLdouble v11,GLdouble v21,GLdouble v31)
{
	static PFNGLPROGRAMUNIFORM4DPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM4DPROC_HPP>(_impl::_get_proc_address("glProgramUniform4d",4,1));
	 fn(program1,location1,v01,v11,v21,v31);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform4dv
#define GL_HPP_FUNDEF_ProgramUniform4dv
typedef void (*PFNGLPROGRAMUNIFORM4DVPROC_HPP)(GLuint,GLint,GLsizei,const GLdouble *);
static inline void ProgramUniform4dv(GLuint program1,GLint location1,GLsizei count1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORM4DVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM4DVPROC_HPP>(_impl::_get_proc_address("glProgramUniform4dv",4,1));
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform4f
#define GL_HPP_FUNDEF_ProgramUniform4f
typedef void (*PFNGLPROGRAMUNIFORM4FPROC_HPP)(GLuint,GLint,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void ProgramUniform4f(GLuint program1,GLint location1,GLfloat v01,GLfloat v11,GLfloat v21,GLfloat v31)
{
	static PFNGLPROGRAMUNIFORM4FPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM4FPROC_HPP>(_impl::_get_proc_address("glProgramUniform4f",4,1));
	 fn(program1,location1,v01,v11,v21,v31);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform4fv
#define GL_HPP_FUNDEF_ProgramUniform4fv
typedef void (*PFNGLPROGRAMUNIFORM4FVPROC_HPP)(GLuint,GLint,GLsizei,const GLfloat *);
static inline void ProgramUniform4fv(GLuint program1,GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORM4FVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM4FVPROC_HPP>(_impl::_get_proc_address("glProgramUniform4fv",4,1));
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform4i
#define GL_HPP_FUNDEF_ProgramUniform4i
typedef void (*PFNGLPROGRAMUNIFORM4IPROC_HPP)(GLuint,GLint,GLint,GLint,GLint,GLint);
static inline void ProgramUniform4i(GLuint program1,GLint location1,GLint v01,GLint v11,GLint v21,GLint v31)
{
	static PFNGLPROGRAMUNIFORM4IPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM4IPROC_HPP>(_impl::_get_proc_address("glProgramUniform4i",4,1));
	 fn(program1,location1,v01,v11,v21,v31);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform4iv
#define GL_HPP_FUNDEF_ProgramUniform4iv
typedef void (*PFNGLPROGRAMUNIFORM4IVPROC_HPP)(GLuint,GLint,GLsizei,const GLint *);
static inline void ProgramUniform4iv(GLuint program1,GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLPROGRAMUNIFORM4IVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM4IVPROC_HPP>(_impl::_get_proc_address("glProgramUniform4iv",4,1));
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform4ui
#define GL_HPP_FUNDEF_ProgramUniform4ui
typedef void (*PFNGLPROGRAMUNIFORM4UIPROC_HPP)(GLuint,GLint,GLuint,GLuint,GLuint,GLuint);
static inline void ProgramUniform4ui(GLuint program1,GLint location1,GLuint v01,GLuint v11,GLuint v21,GLuint v31)
{
	static PFNGLPROGRAMUNIFORM4UIPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM4UIPROC_HPP>(_impl::_get_proc_address("glProgramUniform4ui",4,1));
	 fn(program1,location1,v01,v11,v21,v31);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniform4uiv
#define GL_HPP_FUNDEF_ProgramUniform4uiv
typedef void (*PFNGLPROGRAMUNIFORM4UIVPROC_HPP)(GLuint,GLint,GLsizei,const GLuint *);
static inline void ProgramUniform4uiv(GLuint program1,GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLPROGRAMUNIFORM4UIVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORM4UIVPROC_HPP>(_impl::_get_proc_address("glProgramUniform4uiv",4,1));
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniformMatrix2dv
#define GL_HPP_FUNDEF_ProgramUniformMatrix2dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2DVPROC_HPP)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void ProgramUniformMatrix2dv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX2DVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX2DVPROC_HPP>(_impl::_get_proc_address("glProgramUniformMatrix2dv",4,1));
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniformMatrix2fv
#define GL_HPP_FUNDEF_ProgramUniformMatrix2fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2FVPROC_HPP)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void ProgramUniformMatrix2fv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX2FVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX2FVPROC_HPP>(_impl::_get_proc_address("glProgramUniformMatrix2fv",4,1));
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniformMatrix2x3dv
#define GL_HPP_FUNDEF_ProgramUniformMatrix2x3dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC_HPP)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void ProgramUniformMatrix2x3dv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC_HPP>(_impl::_get_proc_address("glProgramUniformMatrix2x3dv",4,1));
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniformMatrix2x3fv
#define GL_HPP_FUNDEF_ProgramUniformMatrix2x3fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC_HPP)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void ProgramUniformMatrix2x3fv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC_HPP>(_impl::_get_proc_address("glProgramUniformMatrix2x3fv",4,1));
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniformMatrix2x4dv
#define GL_HPP_FUNDEF_ProgramUniformMatrix2x4dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC_HPP)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void ProgramUniformMatrix2x4dv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC_HPP>(_impl::_get_proc_address("glProgramUniformMatrix2x4dv",4,1));
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniformMatrix2x4fv
#define GL_HPP_FUNDEF_ProgramUniformMatrix2x4fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC_HPP)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void ProgramUniformMatrix2x4fv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC_HPP>(_impl::_get_proc_address("glProgramUniformMatrix2x4fv",4,1));
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniformMatrix3dv
#define GL_HPP_FUNDEF_ProgramUniformMatrix3dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3DVPROC_HPP)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void ProgramUniformMatrix3dv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX3DVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX3DVPROC_HPP>(_impl::_get_proc_address("glProgramUniformMatrix3dv",4,1));
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniformMatrix3fv
#define GL_HPP_FUNDEF_ProgramUniformMatrix3fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3FVPROC_HPP)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void ProgramUniformMatrix3fv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX3FVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX3FVPROC_HPP>(_impl::_get_proc_address("glProgramUniformMatrix3fv",4,1));
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniformMatrix3x2dv
#define GL_HPP_FUNDEF_ProgramUniformMatrix3x2dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC_HPP)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void ProgramUniformMatrix3x2dv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC_HPP>(_impl::_get_proc_address("glProgramUniformMatrix3x2dv",4,1));
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniformMatrix3x2fv
#define GL_HPP_FUNDEF_ProgramUniformMatrix3x2fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC_HPP)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void ProgramUniformMatrix3x2fv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC_HPP>(_impl::_get_proc_address("glProgramUniformMatrix3x2fv",4,1));
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniformMatrix3x4dv
#define GL_HPP_FUNDEF_ProgramUniformMatrix3x4dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC_HPP)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void ProgramUniformMatrix3x4dv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC_HPP>(_impl::_get_proc_address("glProgramUniformMatrix3x4dv",4,1));
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniformMatrix3x4fv
#define GL_HPP_FUNDEF_ProgramUniformMatrix3x4fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC_HPP)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void ProgramUniformMatrix3x4fv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC_HPP>(_impl::_get_proc_address("glProgramUniformMatrix3x4fv",4,1));
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniformMatrix4dv
#define GL_HPP_FUNDEF_ProgramUniformMatrix4dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4DVPROC_HPP)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void ProgramUniformMatrix4dv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX4DVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX4DVPROC_HPP>(_impl::_get_proc_address("glProgramUniformMatrix4dv",4,1));
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniformMatrix4fv
#define GL_HPP_FUNDEF_ProgramUniformMatrix4fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4FVPROC_HPP)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void ProgramUniformMatrix4fv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX4FVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX4FVPROC_HPP>(_impl::_get_proc_address("glProgramUniformMatrix4fv",4,1));
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniformMatrix4x2dv
#define GL_HPP_FUNDEF_ProgramUniformMatrix4x2dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC_HPP)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void ProgramUniformMatrix4x2dv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC_HPP>(_impl::_get_proc_address("glProgramUniformMatrix4x2dv",4,1));
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniformMatrix4x2fv
#define GL_HPP_FUNDEF_ProgramUniformMatrix4x2fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC_HPP)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void ProgramUniformMatrix4x2fv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC_HPP>(_impl::_get_proc_address("glProgramUniformMatrix4x2fv",4,1));
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniformMatrix4x3dv
#define GL_HPP_FUNDEF_ProgramUniformMatrix4x3dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC_HPP)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void ProgramUniformMatrix4x3dv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC_HPP>(_impl::_get_proc_address("glProgramUniformMatrix4x3dv",4,1));
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProgramUniformMatrix4x3fv
#define GL_HPP_FUNDEF_ProgramUniformMatrix4x3fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC_HPP)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void ProgramUniformMatrix4x3fv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC_HPP fn=reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC_HPP>(_impl::_get_proc_address("glProgramUniformMatrix4x3fv",4,1));
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ProvokingVertex
#define GL_HPP_FUNDEF_ProvokingVertex
typedef void (*PFNGLPROVOKINGVERTEXPROC_HPP)(GLenum);
static inline void ProvokingVertex(GLenum mode1)
{
	static PFNGLPROVOKINGVERTEXPROC_HPP fn=reinterpret_cast<PFNGLPROVOKINGVERTEXPROC_HPP>(_impl::_get_proc_address("glProvokingVertex",4,1));
	 fn(mode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_QueryCounter
#define GL_HPP_FUNDEF_QueryCounter
typedef void (*PFNGLQUERYCOUNTERPROC_HPP)(GLuint,GLenum);
static inline void QueryCounter(GLuint id1,GLenum target1)
{
	static PFNGLQUERYCOUNTERPROC_HPP fn=reinterpret_cast<PFNGLQUERYCOUNTERPROC_HPP>(_impl::_get_proc_address("glQueryCounter",4,1));
	 fn(id1,target1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ReadBuffer
#define GL_HPP_FUNDEF_ReadBuffer
typedef void (*PFNGLREADBUFFERPROC_HPP)(GLenum);
static inline void ReadBuffer(GLenum src1)
{
	static PFNGLREADBUFFERPROC_HPP fn=reinterpret_cast<PFNGLREADBUFFERPROC_HPP>(_impl::_get_proc_address("glReadBuffer",4,1));
	 fn(src1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ReadPixels
#define GL_HPP_FUNDEF_ReadPixels
typedef void (*PFNGLREADPIXELSPROC_HPP)(GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,void *);
static inline void ReadPixels(GLint x1,GLint y1,GLsizei width1,GLsizei height1,GLenum format1,GLenum type1,void * pixels1)
{
	static PFNGLREADPIXELSPROC_HPP fn=reinterpret_cast<PFNGLREADPIXELSPROC_HPP>(_impl::_get_proc_address("glReadPixels",4,1));
	 fn(x1,y1,width1,height1,format1,type1,pixels1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ReleaseShaderCompiler
#define GL_HPP_FUNDEF_ReleaseShaderCompiler
typedef void (*PFNGLRELEASESHADERCOMPILERPROC_HPP)();
static inline void ReleaseShaderCompiler()
{
	static PFNGLRELEASESHADERCOMPILERPROC_HPP fn=reinterpret_cast<PFNGLRELEASESHADERCOMPILERPROC_HPP>(_impl::_get_proc_address("glReleaseShaderCompiler",4,1));
	 fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_RenderbufferStorage
#define GL_HPP_FUNDEF_RenderbufferStorage
typedef void (*PFNGLRENDERBUFFERSTORAGEPROC_HPP)(GLenum,GLenum,GLsizei,GLsizei);
static inline void RenderbufferStorage(GLenum target1,GLenum internalformat1,GLsizei width1,GLsizei height1)
{
	static PFNGLRENDERBUFFERSTORAGEPROC_HPP fn=reinterpret_cast<PFNGLRENDERBUFFERSTORAGEPROC_HPP>(_impl::_get_proc_address("glRenderbufferStorage",4,1));
	 fn(target1,internalformat1,width1,height1);
}
#endif

#ifndef	GL_HPP_FUNDEF_RenderbufferStorageMultisample
#define GL_HPP_FUNDEF_RenderbufferStorageMultisample
typedef void (*PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC_HPP)(GLenum,GLsizei,GLenum,GLsizei,GLsizei);
static inline void RenderbufferStorageMultisample(GLenum target1,GLsizei samples1,GLenum internalformat1,GLsizei width1,GLsizei height1)
{
	static PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC_HPP fn=reinterpret_cast<PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC_HPP>(_impl::_get_proc_address("glRenderbufferStorageMultisample",4,1));
	 fn(target1,samples1,internalformat1,width1,height1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ResumeTransformFeedback
#define GL_HPP_FUNDEF_ResumeTransformFeedback
typedef void (*PFNGLRESUMETRANSFORMFEEDBACKPROC_HPP)();
static inline void ResumeTransformFeedback()
{
	static PFNGLRESUMETRANSFORMFEEDBACKPROC_HPP fn=reinterpret_cast<PFNGLRESUMETRANSFORMFEEDBACKPROC_HPP>(_impl::_get_proc_address("glResumeTransformFeedback",4,1));
	 fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_SampleCoverage
#define GL_HPP_FUNDEF_SampleCoverage
typedef void (*PFNGLSAMPLECOVERAGEPROC_HPP)(GLfloat,GLboolean);
static inline void SampleCoverage(GLfloat value1,GLboolean invert1)
{
	static PFNGLSAMPLECOVERAGEPROC_HPP fn=reinterpret_cast<PFNGLSAMPLECOVERAGEPROC_HPP>(_impl::_get_proc_address("glSampleCoverage",4,1));
	 fn(value1,invert1);
}
#endif

#ifndef	GL_HPP_FUNDEF_SampleMaski
#define GL_HPP_FUNDEF_SampleMaski
typedef void (*PFNGLSAMPLEMASKIPROC_HPP)(GLuint,GLbitfield);
static inline void SampleMaski(GLuint maskNumber1,GLbitfield mask1)
{
	static PFNGLSAMPLEMASKIPROC_HPP fn=reinterpret_cast<PFNGLSAMPLEMASKIPROC_HPP>(_impl::_get_proc_address("glSampleMaski",4,1));
	 fn(maskNumber1,mask1);
}
#endif

#ifndef	GL_HPP_FUNDEF_SamplerParameterIiv
#define GL_HPP_FUNDEF_SamplerParameterIiv
typedef void (*PFNGLSAMPLERPARAMETERIIVPROC_HPP)(GLuint,GLenum,const GLint *);
static inline void SamplerParameterIiv(GLuint sampler1,GLenum pname1,const GLint * param1)
{
	static PFNGLSAMPLERPARAMETERIIVPROC_HPP fn=reinterpret_cast<PFNGLSAMPLERPARAMETERIIVPROC_HPP>(_impl::_get_proc_address("glSamplerParameterIiv",4,1));
	 fn(sampler1,pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_SamplerParameterIuiv
#define GL_HPP_FUNDEF_SamplerParameterIuiv
typedef void (*PFNGLSAMPLERPARAMETERIUIVPROC_HPP)(GLuint,GLenum,const GLuint *);
static inline void SamplerParameterIuiv(GLuint sampler1,GLenum pname1,const GLuint * param1)
{
	static PFNGLSAMPLERPARAMETERIUIVPROC_HPP fn=reinterpret_cast<PFNGLSAMPLERPARAMETERIUIVPROC_HPP>(_impl::_get_proc_address("glSamplerParameterIuiv",4,1));
	 fn(sampler1,pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_SamplerParameterf
#define GL_HPP_FUNDEF_SamplerParameterf
typedef void (*PFNGLSAMPLERPARAMETERFPROC_HPP)(GLuint,GLenum,GLfloat);
static inline void SamplerParameterf(GLuint sampler1,GLenum pname1,GLfloat param1)
{
	static PFNGLSAMPLERPARAMETERFPROC_HPP fn=reinterpret_cast<PFNGLSAMPLERPARAMETERFPROC_HPP>(_impl::_get_proc_address("glSamplerParameterf",4,1));
	 fn(sampler1,pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_SamplerParameterfv
#define GL_HPP_FUNDEF_SamplerParameterfv
typedef void (*PFNGLSAMPLERPARAMETERFVPROC_HPP)(GLuint,GLenum,const GLfloat *);
static inline void SamplerParameterfv(GLuint sampler1,GLenum pname1,const GLfloat * param1)
{
	static PFNGLSAMPLERPARAMETERFVPROC_HPP fn=reinterpret_cast<PFNGLSAMPLERPARAMETERFVPROC_HPP>(_impl::_get_proc_address("glSamplerParameterfv",4,1));
	 fn(sampler1,pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_SamplerParameteri
#define GL_HPP_FUNDEF_SamplerParameteri
typedef void (*PFNGLSAMPLERPARAMETERIPROC_HPP)(GLuint,GLenum,GLint);
static inline void SamplerParameteri(GLuint sampler1,GLenum pname1,GLint param1)
{
	static PFNGLSAMPLERPARAMETERIPROC_HPP fn=reinterpret_cast<PFNGLSAMPLERPARAMETERIPROC_HPP>(_impl::_get_proc_address("glSamplerParameteri",4,1));
	 fn(sampler1,pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_SamplerParameteriv
#define GL_HPP_FUNDEF_SamplerParameteriv
typedef void (*PFNGLSAMPLERPARAMETERIVPROC_HPP)(GLuint,GLenum,const GLint *);
static inline void SamplerParameteriv(GLuint sampler1,GLenum pname1,const GLint * param1)
{
	static PFNGLSAMPLERPARAMETERIVPROC_HPP fn=reinterpret_cast<PFNGLSAMPLERPARAMETERIVPROC_HPP>(_impl::_get_proc_address("glSamplerParameteriv",4,1));
	 fn(sampler1,pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Scissor
#define GL_HPP_FUNDEF_Scissor
typedef void (*PFNGLSCISSORPROC_HPP)(GLint,GLint,GLsizei,GLsizei);
static inline void Scissor(GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
	static PFNGLSCISSORPROC_HPP fn=reinterpret_cast<PFNGLSCISSORPROC_HPP>(_impl::_get_proc_address("glScissor",4,1));
	 fn(x1,y1,width1,height1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ScissorArrayv
#define GL_HPP_FUNDEF_ScissorArrayv
typedef void (*PFNGLSCISSORARRAYVPROC_HPP)(GLuint,GLsizei,const GLint *);
static inline void ScissorArrayv(GLuint first1,GLsizei count1,const GLint * v1)
{
	static PFNGLSCISSORARRAYVPROC_HPP fn=reinterpret_cast<PFNGLSCISSORARRAYVPROC_HPP>(_impl::_get_proc_address("glScissorArrayv",4,1));
	 fn(first1,count1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ScissorIndexed
#define GL_HPP_FUNDEF_ScissorIndexed
typedef void (*PFNGLSCISSORINDEXEDPROC_HPP)(GLuint,GLint,GLint,GLsizei,GLsizei);
static inline void ScissorIndexed(GLuint index1,GLint left1,GLint bottom1,GLsizei width1,GLsizei height1)
{
	static PFNGLSCISSORINDEXEDPROC_HPP fn=reinterpret_cast<PFNGLSCISSORINDEXEDPROC_HPP>(_impl::_get_proc_address("glScissorIndexed",4,1));
	 fn(index1,left1,bottom1,width1,height1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ScissorIndexedv
#define GL_HPP_FUNDEF_ScissorIndexedv
typedef void (*PFNGLSCISSORINDEXEDVPROC_HPP)(GLuint,const GLint *);
static inline void ScissorIndexedv(GLuint index1,const GLint * v1)
{
	static PFNGLSCISSORINDEXEDVPROC_HPP fn=reinterpret_cast<PFNGLSCISSORINDEXEDVPROC_HPP>(_impl::_get_proc_address("glScissorIndexedv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ShaderBinary
#define GL_HPP_FUNDEF_ShaderBinary
typedef void (*PFNGLSHADERBINARYPROC_HPP)(GLsizei,const GLuint *,GLenum,const void *,GLsizei);
static inline void ShaderBinary(GLsizei count1,const GLuint * shaders1,GLenum binaryformat1,const void * binary1,GLsizei length1)
{
	static PFNGLSHADERBINARYPROC_HPP fn=reinterpret_cast<PFNGLSHADERBINARYPROC_HPP>(_impl::_get_proc_address("glShaderBinary",4,1));
	 fn(count1,shaders1,binaryformat1,binary1,length1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ShaderSource
#define GL_HPP_FUNDEF_ShaderSource
typedef void (*PFNGLSHADERSOURCEPROC_HPP)(GLuint,GLsizei,const GLchar *const*,const GLint *);
static inline void ShaderSource(GLuint shader1,GLsizei count1,const GLchar *const* string1,const GLint * length1)
{
	static PFNGLSHADERSOURCEPROC_HPP fn=reinterpret_cast<PFNGLSHADERSOURCEPROC_HPP>(_impl::_get_proc_address("glShaderSource",4,1));
	 fn(shader1,count1,string1,length1);
}
#endif

#ifndef	GL_HPP_FUNDEF_StencilFunc
#define GL_HPP_FUNDEF_StencilFunc
typedef void (*PFNGLSTENCILFUNCPROC_HPP)(GLenum,GLint,GLuint);
static inline void StencilFunc(GLenum func1,GLint ref1,GLuint mask1)
{
	static PFNGLSTENCILFUNCPROC_HPP fn=reinterpret_cast<PFNGLSTENCILFUNCPROC_HPP>(_impl::_get_proc_address("glStencilFunc",4,1));
	 fn(func1,ref1,mask1);
}
#endif

#ifndef	GL_HPP_FUNDEF_StencilFuncSeparate
#define GL_HPP_FUNDEF_StencilFuncSeparate
typedef void (*PFNGLSTENCILFUNCSEPARATEPROC_HPP)(GLenum,GLenum,GLint,GLuint);
static inline void StencilFuncSeparate(GLenum face1,GLenum func1,GLint ref1,GLuint mask1)
{
	static PFNGLSTENCILFUNCSEPARATEPROC_HPP fn=reinterpret_cast<PFNGLSTENCILFUNCSEPARATEPROC_HPP>(_impl::_get_proc_address("glStencilFuncSeparate",4,1));
	 fn(face1,func1,ref1,mask1);
}
#endif

#ifndef	GL_HPP_FUNDEF_StencilMask
#define GL_HPP_FUNDEF_StencilMask
typedef void (*PFNGLSTENCILMASKPROC_HPP)(GLuint);
static inline void StencilMask(GLuint mask1)
{
	static PFNGLSTENCILMASKPROC_HPP fn=reinterpret_cast<PFNGLSTENCILMASKPROC_HPP>(_impl::_get_proc_address("glStencilMask",4,1));
	 fn(mask1);
}
#endif

#ifndef	GL_HPP_FUNDEF_StencilMaskSeparate
#define GL_HPP_FUNDEF_StencilMaskSeparate
typedef void (*PFNGLSTENCILMASKSEPARATEPROC_HPP)(GLenum,GLuint);
static inline void StencilMaskSeparate(GLenum face1,GLuint mask1)
{
	static PFNGLSTENCILMASKSEPARATEPROC_HPP fn=reinterpret_cast<PFNGLSTENCILMASKSEPARATEPROC_HPP>(_impl::_get_proc_address("glStencilMaskSeparate",4,1));
	 fn(face1,mask1);
}
#endif

#ifndef	GL_HPP_FUNDEF_StencilOp
#define GL_HPP_FUNDEF_StencilOp
typedef void (*PFNGLSTENCILOPPROC_HPP)(GLenum,GLenum,GLenum);
static inline void StencilOp(GLenum fail1,GLenum zfail1,GLenum zpass1)
{
	static PFNGLSTENCILOPPROC_HPP fn=reinterpret_cast<PFNGLSTENCILOPPROC_HPP>(_impl::_get_proc_address("glStencilOp",4,1));
	 fn(fail1,zfail1,zpass1);
}
#endif

#ifndef	GL_HPP_FUNDEF_StencilOpSeparate
#define GL_HPP_FUNDEF_StencilOpSeparate
typedef void (*PFNGLSTENCILOPSEPARATEPROC_HPP)(GLenum,GLenum,GLenum,GLenum);
static inline void StencilOpSeparate(GLenum face1,GLenum sfail1,GLenum dpfail1,GLenum dppass1)
{
	static PFNGLSTENCILOPSEPARATEPROC_HPP fn=reinterpret_cast<PFNGLSTENCILOPSEPARATEPROC_HPP>(_impl::_get_proc_address("glStencilOpSeparate",4,1));
	 fn(face1,sfail1,dpfail1,dppass1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexBuffer
#define GL_HPP_FUNDEF_TexBuffer
typedef void (*PFNGLTEXBUFFERPROC_HPP)(GLenum,GLenum,GLuint);
static inline void TexBuffer(GLenum target1,GLenum internalformat1,GLuint buffer1)
{
	static PFNGLTEXBUFFERPROC_HPP fn=reinterpret_cast<PFNGLTEXBUFFERPROC_HPP>(_impl::_get_proc_address("glTexBuffer",4,1));
	 fn(target1,internalformat1,buffer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexImage1D
#define GL_HPP_FUNDEF_TexImage1D
typedef void (*PFNGLTEXIMAGE1DPROC_HPP)(GLenum,GLint,GLint,GLsizei,GLint,GLenum,GLenum,const void *);
static inline void TexImage1D(GLenum target1,GLint level1,GLint internalformat1,GLsizei width1,GLint border1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXIMAGE1DPROC_HPP fn=reinterpret_cast<PFNGLTEXIMAGE1DPROC_HPP>(_impl::_get_proc_address("glTexImage1D",4,1));
	 fn(target1,level1,internalformat1,width1,border1,format1,type1,pixels1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexImage2D
#define GL_HPP_FUNDEF_TexImage2D
typedef void (*PFNGLTEXIMAGE2DPROC_HPP)(GLenum,GLint,GLint,GLsizei,GLsizei,GLint,GLenum,GLenum,const void *);
static inline void TexImage2D(GLenum target1,GLint level1,GLint internalformat1,GLsizei width1,GLsizei height1,GLint border1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXIMAGE2DPROC_HPP fn=reinterpret_cast<PFNGLTEXIMAGE2DPROC_HPP>(_impl::_get_proc_address("glTexImage2D",4,1));
	 fn(target1,level1,internalformat1,width1,height1,border1,format1,type1,pixels1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexImage2DMultisample
#define GL_HPP_FUNDEF_TexImage2DMultisample
typedef void (*PFNGLTEXIMAGE2DMULTISAMPLEPROC_HPP)(GLenum,GLsizei,GLenum,GLsizei,GLsizei,GLboolean);
static inline void TexImage2DMultisample(GLenum target1,GLsizei samples1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLboolean fixedsamplelocations1)
{
	static PFNGLTEXIMAGE2DMULTISAMPLEPROC_HPP fn=reinterpret_cast<PFNGLTEXIMAGE2DMULTISAMPLEPROC_HPP>(_impl::_get_proc_address("glTexImage2DMultisample",4,1));
	 fn(target1,samples1,internalformat1,width1,height1,fixedsamplelocations1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexImage3D
#define GL_HPP_FUNDEF_TexImage3D
typedef void (*PFNGLTEXIMAGE3DPROC_HPP)(GLenum,GLint,GLint,GLsizei,GLsizei,GLsizei,GLint,GLenum,GLenum,const void *);
static inline void TexImage3D(GLenum target1,GLint level1,GLint internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLint border1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXIMAGE3DPROC_HPP fn=reinterpret_cast<PFNGLTEXIMAGE3DPROC_HPP>(_impl::_get_proc_address("glTexImage3D",4,1));
	 fn(target1,level1,internalformat1,width1,height1,depth1,border1,format1,type1,pixels1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexImage3DMultisample
#define GL_HPP_FUNDEF_TexImage3DMultisample
typedef void (*PFNGLTEXIMAGE3DMULTISAMPLEPROC_HPP)(GLenum,GLsizei,GLenum,GLsizei,GLsizei,GLsizei,GLboolean);
static inline void TexImage3DMultisample(GLenum target1,GLsizei samples1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLboolean fixedsamplelocations1)
{
	static PFNGLTEXIMAGE3DMULTISAMPLEPROC_HPP fn=reinterpret_cast<PFNGLTEXIMAGE3DMULTISAMPLEPROC_HPP>(_impl::_get_proc_address("glTexImage3DMultisample",4,1));
	 fn(target1,samples1,internalformat1,width1,height1,depth1,fixedsamplelocations1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexParameterIiv
#define GL_HPP_FUNDEF_TexParameterIiv
typedef void (*PFNGLTEXPARAMETERIIVPROC_HPP)(GLenum,GLenum,const GLint *);
static inline void TexParameterIiv(GLenum target1,GLenum pname1,const GLint * params1)
{
	static PFNGLTEXPARAMETERIIVPROC_HPP fn=reinterpret_cast<PFNGLTEXPARAMETERIIVPROC_HPP>(_impl::_get_proc_address("glTexParameterIiv",4,1));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexParameterIuiv
#define GL_HPP_FUNDEF_TexParameterIuiv
typedef void (*PFNGLTEXPARAMETERIUIVPROC_HPP)(GLenum,GLenum,const GLuint *);
static inline void TexParameterIuiv(GLenum target1,GLenum pname1,const GLuint * params1)
{
	static PFNGLTEXPARAMETERIUIVPROC_HPP fn=reinterpret_cast<PFNGLTEXPARAMETERIUIVPROC_HPP>(_impl::_get_proc_address("glTexParameterIuiv",4,1));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexParameterf
#define GL_HPP_FUNDEF_TexParameterf
typedef void (*PFNGLTEXPARAMETERFPROC_HPP)(GLenum,GLenum,GLfloat);
static inline void TexParameterf(GLenum target1,GLenum pname1,GLfloat param1)
{
	static PFNGLTEXPARAMETERFPROC_HPP fn=reinterpret_cast<PFNGLTEXPARAMETERFPROC_HPP>(_impl::_get_proc_address("glTexParameterf",4,1));
	 fn(target1,pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexParameterfv
#define GL_HPP_FUNDEF_TexParameterfv
typedef void (*PFNGLTEXPARAMETERFVPROC_HPP)(GLenum,GLenum,const GLfloat *);
static inline void TexParameterfv(GLenum target1,GLenum pname1,const GLfloat * params1)
{
	static PFNGLTEXPARAMETERFVPROC_HPP fn=reinterpret_cast<PFNGLTEXPARAMETERFVPROC_HPP>(_impl::_get_proc_address("glTexParameterfv",4,1));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexParameteri
#define GL_HPP_FUNDEF_TexParameteri
typedef void (*PFNGLTEXPARAMETERIPROC_HPP)(GLenum,GLenum,GLint);
static inline void TexParameteri(GLenum target1,GLenum pname1,GLint param1)
{
	static PFNGLTEXPARAMETERIPROC_HPP fn=reinterpret_cast<PFNGLTEXPARAMETERIPROC_HPP>(_impl::_get_proc_address("glTexParameteri",4,1));
	 fn(target1,pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexParameteriv
#define GL_HPP_FUNDEF_TexParameteriv
typedef void (*PFNGLTEXPARAMETERIVPROC_HPP)(GLenum,GLenum,const GLint *);
static inline void TexParameteriv(GLenum target1,GLenum pname1,const GLint * params1)
{
	static PFNGLTEXPARAMETERIVPROC_HPP fn=reinterpret_cast<PFNGLTEXPARAMETERIVPROC_HPP>(_impl::_get_proc_address("glTexParameteriv",4,1));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexSubImage1D
#define GL_HPP_FUNDEF_TexSubImage1D
typedef void (*PFNGLTEXSUBIMAGE1DPROC_HPP)(GLenum,GLint,GLint,GLsizei,GLenum,GLenum,const void *);
static inline void TexSubImage1D(GLenum target1,GLint level1,GLint xoffset1,GLsizei width1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXSUBIMAGE1DPROC_HPP fn=reinterpret_cast<PFNGLTEXSUBIMAGE1DPROC_HPP>(_impl::_get_proc_address("glTexSubImage1D",4,1));
	 fn(target1,level1,xoffset1,width1,format1,type1,pixels1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexSubImage2D
#define GL_HPP_FUNDEF_TexSubImage2D
typedef void (*PFNGLTEXSUBIMAGE2DPROC_HPP)(GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,const void *);
static inline void TexSubImage2D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLsizei width1,GLsizei height1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXSUBIMAGE2DPROC_HPP fn=reinterpret_cast<PFNGLTEXSUBIMAGE2DPROC_HPP>(_impl::_get_proc_address("glTexSubImage2D",4,1));
	 fn(target1,level1,xoffset1,yoffset1,width1,height1,format1,type1,pixels1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexSubImage3D
#define GL_HPP_FUNDEF_TexSubImage3D
typedef void (*PFNGLTEXSUBIMAGE3DPROC_HPP)(GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,const void *);
static inline void TexSubImage3D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLsizei width1,GLsizei height1,GLsizei depth1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXSUBIMAGE3DPROC_HPP fn=reinterpret_cast<PFNGLTEXSUBIMAGE3DPROC_HPP>(_impl::_get_proc_address("glTexSubImage3D",4,1));
	 fn(target1,level1,xoffset1,yoffset1,zoffset1,width1,height1,depth1,format1,type1,pixels1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TransformFeedbackVaryings
#define GL_HPP_FUNDEF_TransformFeedbackVaryings
typedef void (*PFNGLTRANSFORMFEEDBACKVARYINGSPROC_HPP)(GLuint,GLsizei,const GLchar *const*,GLenum);
static inline void TransformFeedbackVaryings(GLuint program1,GLsizei count1,const GLchar *const* varyings1,GLenum bufferMode1)
{
	static PFNGLTRANSFORMFEEDBACKVARYINGSPROC_HPP fn=reinterpret_cast<PFNGLTRANSFORMFEEDBACKVARYINGSPROC_HPP>(_impl::_get_proc_address("glTransformFeedbackVaryings",4,1));
	 fn(program1,count1,varyings1,bufferMode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform1d
#define GL_HPP_FUNDEF_Uniform1d
typedef void (*PFNGLUNIFORM1DPROC_HPP)(GLint,GLdouble);
static inline void Uniform1d(GLint location1,GLdouble x1)
{
	static PFNGLUNIFORM1DPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM1DPROC_HPP>(_impl::_get_proc_address("glUniform1d",4,1));
	 fn(location1,x1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform1dv
#define GL_HPP_FUNDEF_Uniform1dv
typedef void (*PFNGLUNIFORM1DVPROC_HPP)(GLint,GLsizei,const GLdouble *);
static inline void Uniform1dv(GLint location1,GLsizei count1,const GLdouble * value1)
{
	static PFNGLUNIFORM1DVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM1DVPROC_HPP>(_impl::_get_proc_address("glUniform1dv",4,1));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform1f
#define GL_HPP_FUNDEF_Uniform1f
typedef void (*PFNGLUNIFORM1FPROC_HPP)(GLint,GLfloat);
static inline void Uniform1f(GLint location1,GLfloat v01)
{
	static PFNGLUNIFORM1FPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM1FPROC_HPP>(_impl::_get_proc_address("glUniform1f",4,1));
	 fn(location1,v01);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform1fv
#define GL_HPP_FUNDEF_Uniform1fv
typedef void (*PFNGLUNIFORM1FVPROC_HPP)(GLint,GLsizei,const GLfloat *);
static inline void Uniform1fv(GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLUNIFORM1FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM1FVPROC_HPP>(_impl::_get_proc_address("glUniform1fv",4,1));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform1i
#define GL_HPP_FUNDEF_Uniform1i
typedef void (*PFNGLUNIFORM1IPROC_HPP)(GLint,GLint);
static inline void Uniform1i(GLint location1,GLint v01)
{
	static PFNGLUNIFORM1IPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM1IPROC_HPP>(_impl::_get_proc_address("glUniform1i",4,1));
	 fn(location1,v01);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform1iv
#define GL_HPP_FUNDEF_Uniform1iv
typedef void (*PFNGLUNIFORM1IVPROC_HPP)(GLint,GLsizei,const GLint *);
static inline void Uniform1iv(GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLUNIFORM1IVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM1IVPROC_HPP>(_impl::_get_proc_address("glUniform1iv",4,1));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform1ui
#define GL_HPP_FUNDEF_Uniform1ui
typedef void (*PFNGLUNIFORM1UIPROC_HPP)(GLint,GLuint);
static inline void Uniform1ui(GLint location1,GLuint v01)
{
	static PFNGLUNIFORM1UIPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM1UIPROC_HPP>(_impl::_get_proc_address("glUniform1ui",4,1));
	 fn(location1,v01);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform1uiv
#define GL_HPP_FUNDEF_Uniform1uiv
typedef void (*PFNGLUNIFORM1UIVPROC_HPP)(GLint,GLsizei,const GLuint *);
static inline void Uniform1uiv(GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLUNIFORM1UIVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM1UIVPROC_HPP>(_impl::_get_proc_address("glUniform1uiv",4,1));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform2d
#define GL_HPP_FUNDEF_Uniform2d
typedef void (*PFNGLUNIFORM2DPROC_HPP)(GLint,GLdouble,GLdouble);
static inline void Uniform2d(GLint location1,GLdouble x1,GLdouble y1)
{
	static PFNGLUNIFORM2DPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM2DPROC_HPP>(_impl::_get_proc_address("glUniform2d",4,1));
	 fn(location1,x1,y1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform2dv
#define GL_HPP_FUNDEF_Uniform2dv
typedef void (*PFNGLUNIFORM2DVPROC_HPP)(GLint,GLsizei,const GLdouble *);
static inline void Uniform2dv(GLint location1,GLsizei count1,const GLdouble * value1)
{
	static PFNGLUNIFORM2DVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM2DVPROC_HPP>(_impl::_get_proc_address("glUniform2dv",4,1));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform2f
#define GL_HPP_FUNDEF_Uniform2f
typedef void (*PFNGLUNIFORM2FPROC_HPP)(GLint,GLfloat,GLfloat);
static inline void Uniform2f(GLint location1,GLfloat v01,GLfloat v11)
{
	static PFNGLUNIFORM2FPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM2FPROC_HPP>(_impl::_get_proc_address("glUniform2f",4,1));
	 fn(location1,v01,v11);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform2fv
#define GL_HPP_FUNDEF_Uniform2fv
typedef void (*PFNGLUNIFORM2FVPROC_HPP)(GLint,GLsizei,const GLfloat *);
static inline void Uniform2fv(GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLUNIFORM2FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM2FVPROC_HPP>(_impl::_get_proc_address("glUniform2fv",4,1));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform2i
#define GL_HPP_FUNDEF_Uniform2i
typedef void (*PFNGLUNIFORM2IPROC_HPP)(GLint,GLint,GLint);
static inline void Uniform2i(GLint location1,GLint v01,GLint v11)
{
	static PFNGLUNIFORM2IPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM2IPROC_HPP>(_impl::_get_proc_address("glUniform2i",4,1));
	 fn(location1,v01,v11);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform2iv
#define GL_HPP_FUNDEF_Uniform2iv
typedef void (*PFNGLUNIFORM2IVPROC_HPP)(GLint,GLsizei,const GLint *);
static inline void Uniform2iv(GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLUNIFORM2IVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM2IVPROC_HPP>(_impl::_get_proc_address("glUniform2iv",4,1));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform2ui
#define GL_HPP_FUNDEF_Uniform2ui
typedef void (*PFNGLUNIFORM2UIPROC_HPP)(GLint,GLuint,GLuint);
static inline void Uniform2ui(GLint location1,GLuint v01,GLuint v11)
{
	static PFNGLUNIFORM2UIPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM2UIPROC_HPP>(_impl::_get_proc_address("glUniform2ui",4,1));
	 fn(location1,v01,v11);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform2uiv
#define GL_HPP_FUNDEF_Uniform2uiv
typedef void (*PFNGLUNIFORM2UIVPROC_HPP)(GLint,GLsizei,const GLuint *);
static inline void Uniform2uiv(GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLUNIFORM2UIVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM2UIVPROC_HPP>(_impl::_get_proc_address("glUniform2uiv",4,1));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform3d
#define GL_HPP_FUNDEF_Uniform3d
typedef void (*PFNGLUNIFORM3DPROC_HPP)(GLint,GLdouble,GLdouble,GLdouble);
static inline void Uniform3d(GLint location1,GLdouble x1,GLdouble y1,GLdouble z1)
{
	static PFNGLUNIFORM3DPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM3DPROC_HPP>(_impl::_get_proc_address("glUniform3d",4,1));
	 fn(location1,x1,y1,z1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform3dv
#define GL_HPP_FUNDEF_Uniform3dv
typedef void (*PFNGLUNIFORM3DVPROC_HPP)(GLint,GLsizei,const GLdouble *);
static inline void Uniform3dv(GLint location1,GLsizei count1,const GLdouble * value1)
{
	static PFNGLUNIFORM3DVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM3DVPROC_HPP>(_impl::_get_proc_address("glUniform3dv",4,1));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform3f
#define GL_HPP_FUNDEF_Uniform3f
typedef void (*PFNGLUNIFORM3FPROC_HPP)(GLint,GLfloat,GLfloat,GLfloat);
static inline void Uniform3f(GLint location1,GLfloat v01,GLfloat v11,GLfloat v21)
{
	static PFNGLUNIFORM3FPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM3FPROC_HPP>(_impl::_get_proc_address("glUniform3f",4,1));
	 fn(location1,v01,v11,v21);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform3fv
#define GL_HPP_FUNDEF_Uniform3fv
typedef void (*PFNGLUNIFORM3FVPROC_HPP)(GLint,GLsizei,const GLfloat *);
static inline void Uniform3fv(GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLUNIFORM3FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM3FVPROC_HPP>(_impl::_get_proc_address("glUniform3fv",4,1));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform3i
#define GL_HPP_FUNDEF_Uniform3i
typedef void (*PFNGLUNIFORM3IPROC_HPP)(GLint,GLint,GLint,GLint);
static inline void Uniform3i(GLint location1,GLint v01,GLint v11,GLint v21)
{
	static PFNGLUNIFORM3IPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM3IPROC_HPP>(_impl::_get_proc_address("glUniform3i",4,1));
	 fn(location1,v01,v11,v21);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform3iv
#define GL_HPP_FUNDEF_Uniform3iv
typedef void (*PFNGLUNIFORM3IVPROC_HPP)(GLint,GLsizei,const GLint *);
static inline void Uniform3iv(GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLUNIFORM3IVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM3IVPROC_HPP>(_impl::_get_proc_address("glUniform3iv",4,1));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform3ui
#define GL_HPP_FUNDEF_Uniform3ui
typedef void (*PFNGLUNIFORM3UIPROC_HPP)(GLint,GLuint,GLuint,GLuint);
static inline void Uniform3ui(GLint location1,GLuint v01,GLuint v11,GLuint v21)
{
	static PFNGLUNIFORM3UIPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM3UIPROC_HPP>(_impl::_get_proc_address("glUniform3ui",4,1));
	 fn(location1,v01,v11,v21);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform3uiv
#define GL_HPP_FUNDEF_Uniform3uiv
typedef void (*PFNGLUNIFORM3UIVPROC_HPP)(GLint,GLsizei,const GLuint *);
static inline void Uniform3uiv(GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLUNIFORM3UIVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM3UIVPROC_HPP>(_impl::_get_proc_address("glUniform3uiv",4,1));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform4d
#define GL_HPP_FUNDEF_Uniform4d
typedef void (*PFNGLUNIFORM4DPROC_HPP)(GLint,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void Uniform4d(GLint location1,GLdouble x1,GLdouble y1,GLdouble z1,GLdouble w1)
{
	static PFNGLUNIFORM4DPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM4DPROC_HPP>(_impl::_get_proc_address("glUniform4d",4,1));
	 fn(location1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform4dv
#define GL_HPP_FUNDEF_Uniform4dv
typedef void (*PFNGLUNIFORM4DVPROC_HPP)(GLint,GLsizei,const GLdouble *);
static inline void Uniform4dv(GLint location1,GLsizei count1,const GLdouble * value1)
{
	static PFNGLUNIFORM4DVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM4DVPROC_HPP>(_impl::_get_proc_address("glUniform4dv",4,1));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform4f
#define GL_HPP_FUNDEF_Uniform4f
typedef void (*PFNGLUNIFORM4FPROC_HPP)(GLint,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void Uniform4f(GLint location1,GLfloat v01,GLfloat v11,GLfloat v21,GLfloat v31)
{
	static PFNGLUNIFORM4FPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM4FPROC_HPP>(_impl::_get_proc_address("glUniform4f",4,1));
	 fn(location1,v01,v11,v21,v31);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform4fv
#define GL_HPP_FUNDEF_Uniform4fv
typedef void (*PFNGLUNIFORM4FVPROC_HPP)(GLint,GLsizei,const GLfloat *);
static inline void Uniform4fv(GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLUNIFORM4FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM4FVPROC_HPP>(_impl::_get_proc_address("glUniform4fv",4,1));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform4i
#define GL_HPP_FUNDEF_Uniform4i
typedef void (*PFNGLUNIFORM4IPROC_HPP)(GLint,GLint,GLint,GLint,GLint);
static inline void Uniform4i(GLint location1,GLint v01,GLint v11,GLint v21,GLint v31)
{
	static PFNGLUNIFORM4IPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM4IPROC_HPP>(_impl::_get_proc_address("glUniform4i",4,1));
	 fn(location1,v01,v11,v21,v31);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform4iv
#define GL_HPP_FUNDEF_Uniform4iv
typedef void (*PFNGLUNIFORM4IVPROC_HPP)(GLint,GLsizei,const GLint *);
static inline void Uniform4iv(GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLUNIFORM4IVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM4IVPROC_HPP>(_impl::_get_proc_address("glUniform4iv",4,1));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform4ui
#define GL_HPP_FUNDEF_Uniform4ui
typedef void (*PFNGLUNIFORM4UIPROC_HPP)(GLint,GLuint,GLuint,GLuint,GLuint);
static inline void Uniform4ui(GLint location1,GLuint v01,GLuint v11,GLuint v21,GLuint v31)
{
	static PFNGLUNIFORM4UIPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM4UIPROC_HPP>(_impl::_get_proc_address("glUniform4ui",4,1));
	 fn(location1,v01,v11,v21,v31);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform4uiv
#define GL_HPP_FUNDEF_Uniform4uiv
typedef void (*PFNGLUNIFORM4UIVPROC_HPP)(GLint,GLsizei,const GLuint *);
static inline void Uniform4uiv(GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLUNIFORM4UIVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM4UIVPROC_HPP>(_impl::_get_proc_address("glUniform4uiv",4,1));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformBlockBinding
#define GL_HPP_FUNDEF_UniformBlockBinding
typedef void (*PFNGLUNIFORMBLOCKBINDINGPROC_HPP)(GLuint,GLuint,GLuint);
static inline void UniformBlockBinding(GLuint program1,GLuint uniformBlockIndex1,GLuint uniformBlockBinding1)
{
	static PFNGLUNIFORMBLOCKBINDINGPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMBLOCKBINDINGPROC_HPP>(_impl::_get_proc_address("glUniformBlockBinding",4,1));
	 fn(program1,uniformBlockIndex1,uniformBlockBinding1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix2dv
#define GL_HPP_FUNDEF_UniformMatrix2dv
typedef void (*PFNGLUNIFORMMATRIX2DVPROC_HPP)(GLint,GLsizei,GLboolean,const GLdouble *);
static inline void UniformMatrix2dv(GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLUNIFORMMATRIX2DVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX2DVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix2dv",4,1));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix2fv
#define GL_HPP_FUNDEF_UniformMatrix2fv
typedef void (*PFNGLUNIFORMMATRIX2FVPROC_HPP)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void UniformMatrix2fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX2FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX2FVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix2fv",4,1));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix2x3dv
#define GL_HPP_FUNDEF_UniformMatrix2x3dv
typedef void (*PFNGLUNIFORMMATRIX2X3DVPROC_HPP)(GLint,GLsizei,GLboolean,const GLdouble *);
static inline void UniformMatrix2x3dv(GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLUNIFORMMATRIX2X3DVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX2X3DVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix2x3dv",4,1));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix2x3fv
#define GL_HPP_FUNDEF_UniformMatrix2x3fv
typedef void (*PFNGLUNIFORMMATRIX2X3FVPROC_HPP)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void UniformMatrix2x3fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX2X3FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX2X3FVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix2x3fv",4,1));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix2x4dv
#define GL_HPP_FUNDEF_UniformMatrix2x4dv
typedef void (*PFNGLUNIFORMMATRIX2X4DVPROC_HPP)(GLint,GLsizei,GLboolean,const GLdouble *);
static inline void UniformMatrix2x4dv(GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLUNIFORMMATRIX2X4DVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX2X4DVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix2x4dv",4,1));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix2x4fv
#define GL_HPP_FUNDEF_UniformMatrix2x4fv
typedef void (*PFNGLUNIFORMMATRIX2X4FVPROC_HPP)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void UniformMatrix2x4fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX2X4FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX2X4FVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix2x4fv",4,1));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix3dv
#define GL_HPP_FUNDEF_UniformMatrix3dv
typedef void (*PFNGLUNIFORMMATRIX3DVPROC_HPP)(GLint,GLsizei,GLboolean,const GLdouble *);
static inline void UniformMatrix3dv(GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLUNIFORMMATRIX3DVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX3DVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix3dv",4,1));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix3fv
#define GL_HPP_FUNDEF_UniformMatrix3fv
typedef void (*PFNGLUNIFORMMATRIX3FVPROC_HPP)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void UniformMatrix3fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX3FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX3FVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix3fv",4,1));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix3x2dv
#define GL_HPP_FUNDEF_UniformMatrix3x2dv
typedef void (*PFNGLUNIFORMMATRIX3X2DVPROC_HPP)(GLint,GLsizei,GLboolean,const GLdouble *);
static inline void UniformMatrix3x2dv(GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLUNIFORMMATRIX3X2DVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX3X2DVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix3x2dv",4,1));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix3x2fv
#define GL_HPP_FUNDEF_UniformMatrix3x2fv
typedef void (*PFNGLUNIFORMMATRIX3X2FVPROC_HPP)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void UniformMatrix3x2fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX3X2FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX3X2FVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix3x2fv",4,1));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix3x4dv
#define GL_HPP_FUNDEF_UniformMatrix3x4dv
typedef void (*PFNGLUNIFORMMATRIX3X4DVPROC_HPP)(GLint,GLsizei,GLboolean,const GLdouble *);
static inline void UniformMatrix3x4dv(GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLUNIFORMMATRIX3X4DVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX3X4DVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix3x4dv",4,1));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix3x4fv
#define GL_HPP_FUNDEF_UniformMatrix3x4fv
typedef void (*PFNGLUNIFORMMATRIX3X4FVPROC_HPP)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void UniformMatrix3x4fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX3X4FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX3X4FVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix3x4fv",4,1));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix4dv
#define GL_HPP_FUNDEF_UniformMatrix4dv
typedef void (*PFNGLUNIFORMMATRIX4DVPROC_HPP)(GLint,GLsizei,GLboolean,const GLdouble *);
static inline void UniformMatrix4dv(GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLUNIFORMMATRIX4DVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX4DVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix4dv",4,1));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix4fv
#define GL_HPP_FUNDEF_UniformMatrix4fv
typedef void (*PFNGLUNIFORMMATRIX4FVPROC_HPP)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void UniformMatrix4fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX4FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX4FVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix4fv",4,1));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix4x2dv
#define GL_HPP_FUNDEF_UniformMatrix4x2dv
typedef void (*PFNGLUNIFORMMATRIX4X2DVPROC_HPP)(GLint,GLsizei,GLboolean,const GLdouble *);
static inline void UniformMatrix4x2dv(GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLUNIFORMMATRIX4X2DVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX4X2DVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix4x2dv",4,1));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix4x2fv
#define GL_HPP_FUNDEF_UniformMatrix4x2fv
typedef void (*PFNGLUNIFORMMATRIX4X2FVPROC_HPP)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void UniformMatrix4x2fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX4X2FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX4X2FVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix4x2fv",4,1));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix4x3dv
#define GL_HPP_FUNDEF_UniformMatrix4x3dv
typedef void (*PFNGLUNIFORMMATRIX4X3DVPROC_HPP)(GLint,GLsizei,GLboolean,const GLdouble *);
static inline void UniformMatrix4x3dv(GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLUNIFORMMATRIX4X3DVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX4X3DVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix4x3dv",4,1));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix4x3fv
#define GL_HPP_FUNDEF_UniformMatrix4x3fv
typedef void (*PFNGLUNIFORMMATRIX4X3FVPROC_HPP)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void UniformMatrix4x3fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX4X3FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX4X3FVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix4x3fv",4,1));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformSubroutinesuiv
#define GL_HPP_FUNDEF_UniformSubroutinesuiv
typedef void (*PFNGLUNIFORMSUBROUTINESUIVPROC_HPP)(GLenum,GLsizei,const GLuint *);
static inline void UniformSubroutinesuiv(GLenum shadertype1,GLsizei count1,const GLuint * indices1)
{
	static PFNGLUNIFORMSUBROUTINESUIVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMSUBROUTINESUIVPROC_HPP>(_impl::_get_proc_address("glUniformSubroutinesuiv",4,1));
	 fn(shadertype1,count1,indices1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UnmapBuffer
#define GL_HPP_FUNDEF_UnmapBuffer
typedef GLboolean (*PFNGLUNMAPBUFFERPROC_HPP)(GLenum);
static inline GLboolean UnmapBuffer(GLenum target1)
{
	static PFNGLUNMAPBUFFERPROC_HPP fn=reinterpret_cast<PFNGLUNMAPBUFFERPROC_HPP>(_impl::_get_proc_address("glUnmapBuffer",4,1));
	return fn(target1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UseProgram
#define GL_HPP_FUNDEF_UseProgram
typedef void (*PFNGLUSEPROGRAMPROC_HPP)(GLuint);
static inline void UseProgram(GLuint program1)
{
	static PFNGLUSEPROGRAMPROC_HPP fn=reinterpret_cast<PFNGLUSEPROGRAMPROC_HPP>(_impl::_get_proc_address("glUseProgram",4,1));
	 fn(program1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UseProgramStages
#define GL_HPP_FUNDEF_UseProgramStages
typedef void (*PFNGLUSEPROGRAMSTAGESPROC_HPP)(GLuint,GLbitfield,GLuint);
static inline void UseProgramStages(GLuint pipeline1,GLbitfield stages1,GLuint program1)
{
	static PFNGLUSEPROGRAMSTAGESPROC_HPP fn=reinterpret_cast<PFNGLUSEPROGRAMSTAGESPROC_HPP>(_impl::_get_proc_address("glUseProgramStages",4,1));
	 fn(pipeline1,stages1,program1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ValidateProgram
#define GL_HPP_FUNDEF_ValidateProgram
typedef void (*PFNGLVALIDATEPROGRAMPROC_HPP)(GLuint);
static inline void ValidateProgram(GLuint program1)
{
	static PFNGLVALIDATEPROGRAMPROC_HPP fn=reinterpret_cast<PFNGLVALIDATEPROGRAMPROC_HPP>(_impl::_get_proc_address("glValidateProgram",4,1));
	 fn(program1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ValidateProgramPipeline
#define GL_HPP_FUNDEF_ValidateProgramPipeline
typedef void (*PFNGLVALIDATEPROGRAMPIPELINEPROC_HPP)(GLuint);
static inline void ValidateProgramPipeline(GLuint pipeline1)
{
	static PFNGLVALIDATEPROGRAMPIPELINEPROC_HPP fn=reinterpret_cast<PFNGLVALIDATEPROGRAMPIPELINEPROC_HPP>(_impl::_get_proc_address("glValidateProgramPipeline",4,1));
	 fn(pipeline1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib1d
#define GL_HPP_FUNDEF_VertexAttrib1d
typedef void (*PFNGLVERTEXATTRIB1DPROC_HPP)(GLuint,GLdouble);
static inline void VertexAttrib1d(GLuint index1,GLdouble x1)
{
	static PFNGLVERTEXATTRIB1DPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB1DPROC_HPP>(_impl::_get_proc_address("glVertexAttrib1d",4,1));
	 fn(index1,x1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib1dv
#define GL_HPP_FUNDEF_VertexAttrib1dv
typedef void (*PFNGLVERTEXATTRIB1DVPROC_HPP)(GLuint,const GLdouble *);
static inline void VertexAttrib1dv(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIB1DVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB1DVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib1dv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib1f
#define GL_HPP_FUNDEF_VertexAttrib1f
typedef void (*PFNGLVERTEXATTRIB1FPROC_HPP)(GLuint,GLfloat);
static inline void VertexAttrib1f(GLuint index1,GLfloat x1)
{
	static PFNGLVERTEXATTRIB1FPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB1FPROC_HPP>(_impl::_get_proc_address("glVertexAttrib1f",4,1));
	 fn(index1,x1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib1fv
#define GL_HPP_FUNDEF_VertexAttrib1fv
typedef void (*PFNGLVERTEXATTRIB1FVPROC_HPP)(GLuint,const GLfloat *);
static inline void VertexAttrib1fv(GLuint index1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIB1FVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB1FVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib1fv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib1s
#define GL_HPP_FUNDEF_VertexAttrib1s
typedef void (*PFNGLVERTEXATTRIB1SPROC_HPP)(GLuint,GLshort);
static inline void VertexAttrib1s(GLuint index1,GLshort x1)
{
	static PFNGLVERTEXATTRIB1SPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB1SPROC_HPP>(_impl::_get_proc_address("glVertexAttrib1s",4,1));
	 fn(index1,x1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib1sv
#define GL_HPP_FUNDEF_VertexAttrib1sv
typedef void (*PFNGLVERTEXATTRIB1SVPROC_HPP)(GLuint,const GLshort *);
static inline void VertexAttrib1sv(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIB1SVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB1SVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib1sv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib2d
#define GL_HPP_FUNDEF_VertexAttrib2d
typedef void (*PFNGLVERTEXATTRIB2DPROC_HPP)(GLuint,GLdouble,GLdouble);
static inline void VertexAttrib2d(GLuint index1,GLdouble x1,GLdouble y1)
{
	static PFNGLVERTEXATTRIB2DPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB2DPROC_HPP>(_impl::_get_proc_address("glVertexAttrib2d",4,1));
	 fn(index1,x1,y1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib2dv
#define GL_HPP_FUNDEF_VertexAttrib2dv
typedef void (*PFNGLVERTEXATTRIB2DVPROC_HPP)(GLuint,const GLdouble *);
static inline void VertexAttrib2dv(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIB2DVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB2DVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib2dv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib2f
#define GL_HPP_FUNDEF_VertexAttrib2f
typedef void (*PFNGLVERTEXATTRIB2FPROC_HPP)(GLuint,GLfloat,GLfloat);
static inline void VertexAttrib2f(GLuint index1,GLfloat x1,GLfloat y1)
{
	static PFNGLVERTEXATTRIB2FPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB2FPROC_HPP>(_impl::_get_proc_address("glVertexAttrib2f",4,1));
	 fn(index1,x1,y1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib2fv
#define GL_HPP_FUNDEF_VertexAttrib2fv
typedef void (*PFNGLVERTEXATTRIB2FVPROC_HPP)(GLuint,const GLfloat *);
static inline void VertexAttrib2fv(GLuint index1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIB2FVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB2FVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib2fv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib2s
#define GL_HPP_FUNDEF_VertexAttrib2s
typedef void (*PFNGLVERTEXATTRIB2SPROC_HPP)(GLuint,GLshort,GLshort);
static inline void VertexAttrib2s(GLuint index1,GLshort x1,GLshort y1)
{
	static PFNGLVERTEXATTRIB2SPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB2SPROC_HPP>(_impl::_get_proc_address("glVertexAttrib2s",4,1));
	 fn(index1,x1,y1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib2sv
#define GL_HPP_FUNDEF_VertexAttrib2sv
typedef void (*PFNGLVERTEXATTRIB2SVPROC_HPP)(GLuint,const GLshort *);
static inline void VertexAttrib2sv(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIB2SVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB2SVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib2sv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib3d
#define GL_HPP_FUNDEF_VertexAttrib3d
typedef void (*PFNGLVERTEXATTRIB3DPROC_HPP)(GLuint,GLdouble,GLdouble,GLdouble);
static inline void VertexAttrib3d(GLuint index1,GLdouble x1,GLdouble y1,GLdouble z1)
{
	static PFNGLVERTEXATTRIB3DPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB3DPROC_HPP>(_impl::_get_proc_address("glVertexAttrib3d",4,1));
	 fn(index1,x1,y1,z1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib3dv
#define GL_HPP_FUNDEF_VertexAttrib3dv
typedef void (*PFNGLVERTEXATTRIB3DVPROC_HPP)(GLuint,const GLdouble *);
static inline void VertexAttrib3dv(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIB3DVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB3DVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib3dv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib3f
#define GL_HPP_FUNDEF_VertexAttrib3f
typedef void (*PFNGLVERTEXATTRIB3FPROC_HPP)(GLuint,GLfloat,GLfloat,GLfloat);
static inline void VertexAttrib3f(GLuint index1,GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLVERTEXATTRIB3FPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB3FPROC_HPP>(_impl::_get_proc_address("glVertexAttrib3f",4,1));
	 fn(index1,x1,y1,z1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib3fv
#define GL_HPP_FUNDEF_VertexAttrib3fv
typedef void (*PFNGLVERTEXATTRIB3FVPROC_HPP)(GLuint,const GLfloat *);
static inline void VertexAttrib3fv(GLuint index1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIB3FVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB3FVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib3fv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib3s
#define GL_HPP_FUNDEF_VertexAttrib3s
typedef void (*PFNGLVERTEXATTRIB3SPROC_HPP)(GLuint,GLshort,GLshort,GLshort);
static inline void VertexAttrib3s(GLuint index1,GLshort x1,GLshort y1,GLshort z1)
{
	static PFNGLVERTEXATTRIB3SPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB3SPROC_HPP>(_impl::_get_proc_address("glVertexAttrib3s",4,1));
	 fn(index1,x1,y1,z1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib3sv
#define GL_HPP_FUNDEF_VertexAttrib3sv
typedef void (*PFNGLVERTEXATTRIB3SVPROC_HPP)(GLuint,const GLshort *);
static inline void VertexAttrib3sv(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIB3SVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB3SVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib3sv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4Nbv
#define GL_HPP_FUNDEF_VertexAttrib4Nbv
typedef void (*PFNGLVERTEXATTRIB4NBVPROC_HPP)(GLuint,const GLbyte *);
static inline void VertexAttrib4Nbv(GLuint index1,const GLbyte * v1)
{
	static PFNGLVERTEXATTRIB4NBVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4NBVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4Nbv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4Niv
#define GL_HPP_FUNDEF_VertexAttrib4Niv
typedef void (*PFNGLVERTEXATTRIB4NIVPROC_HPP)(GLuint,const GLint *);
static inline void VertexAttrib4Niv(GLuint index1,const GLint * v1)
{
	static PFNGLVERTEXATTRIB4NIVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4NIVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4Niv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4Nsv
#define GL_HPP_FUNDEF_VertexAttrib4Nsv
typedef void (*PFNGLVERTEXATTRIB4NSVPROC_HPP)(GLuint,const GLshort *);
static inline void VertexAttrib4Nsv(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIB4NSVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4NSVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4Nsv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4Nub
#define GL_HPP_FUNDEF_VertexAttrib4Nub
typedef void (*PFNGLVERTEXATTRIB4NUBPROC_HPP)(GLuint,GLubyte,GLubyte,GLubyte,GLubyte);
static inline void VertexAttrib4Nub(GLuint index1,GLubyte x1,GLubyte y1,GLubyte z1,GLubyte w1)
{
	static PFNGLVERTEXATTRIB4NUBPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4NUBPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4Nub",4,1));
	 fn(index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4Nubv
#define GL_HPP_FUNDEF_VertexAttrib4Nubv
typedef void (*PFNGLVERTEXATTRIB4NUBVPROC_HPP)(GLuint,const GLubyte *);
static inline void VertexAttrib4Nubv(GLuint index1,const GLubyte * v1)
{
	static PFNGLVERTEXATTRIB4NUBVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4NUBVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4Nubv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4Nuiv
#define GL_HPP_FUNDEF_VertexAttrib4Nuiv
typedef void (*PFNGLVERTEXATTRIB4NUIVPROC_HPP)(GLuint,const GLuint *);
static inline void VertexAttrib4Nuiv(GLuint index1,const GLuint * v1)
{
	static PFNGLVERTEXATTRIB4NUIVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4NUIVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4Nuiv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4Nusv
#define GL_HPP_FUNDEF_VertexAttrib4Nusv
typedef void (*PFNGLVERTEXATTRIB4NUSVPROC_HPP)(GLuint,const GLushort *);
static inline void VertexAttrib4Nusv(GLuint index1,const GLushort * v1)
{
	static PFNGLVERTEXATTRIB4NUSVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4NUSVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4Nusv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4bv
#define GL_HPP_FUNDEF_VertexAttrib4bv
typedef void (*PFNGLVERTEXATTRIB4BVPROC_HPP)(GLuint,const GLbyte *);
static inline void VertexAttrib4bv(GLuint index1,const GLbyte * v1)
{
	static PFNGLVERTEXATTRIB4BVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4BVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4bv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4d
#define GL_HPP_FUNDEF_VertexAttrib4d
typedef void (*PFNGLVERTEXATTRIB4DPROC_HPP)(GLuint,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void VertexAttrib4d(GLuint index1,GLdouble x1,GLdouble y1,GLdouble z1,GLdouble w1)
{
	static PFNGLVERTEXATTRIB4DPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4DPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4d",4,1));
	 fn(index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4dv
#define GL_HPP_FUNDEF_VertexAttrib4dv
typedef void (*PFNGLVERTEXATTRIB4DVPROC_HPP)(GLuint,const GLdouble *);
static inline void VertexAttrib4dv(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIB4DVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4DVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4dv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4f
#define GL_HPP_FUNDEF_VertexAttrib4f
typedef void (*PFNGLVERTEXATTRIB4FPROC_HPP)(GLuint,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void VertexAttrib4f(GLuint index1,GLfloat x1,GLfloat y1,GLfloat z1,GLfloat w1)
{
	static PFNGLVERTEXATTRIB4FPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4FPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4f",4,1));
	 fn(index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4fv
#define GL_HPP_FUNDEF_VertexAttrib4fv
typedef void (*PFNGLVERTEXATTRIB4FVPROC_HPP)(GLuint,const GLfloat *);
static inline void VertexAttrib4fv(GLuint index1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIB4FVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4FVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4fv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4iv
#define GL_HPP_FUNDEF_VertexAttrib4iv
typedef void (*PFNGLVERTEXATTRIB4IVPROC_HPP)(GLuint,const GLint *);
static inline void VertexAttrib4iv(GLuint index1,const GLint * v1)
{
	static PFNGLVERTEXATTRIB4IVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4IVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4iv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4s
#define GL_HPP_FUNDEF_VertexAttrib4s
typedef void (*PFNGLVERTEXATTRIB4SPROC_HPP)(GLuint,GLshort,GLshort,GLshort,GLshort);
static inline void VertexAttrib4s(GLuint index1,GLshort x1,GLshort y1,GLshort z1,GLshort w1)
{
	static PFNGLVERTEXATTRIB4SPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4SPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4s",4,1));
	 fn(index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4sv
#define GL_HPP_FUNDEF_VertexAttrib4sv
typedef void (*PFNGLVERTEXATTRIB4SVPROC_HPP)(GLuint,const GLshort *);
static inline void VertexAttrib4sv(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIB4SVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4SVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4sv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4ubv
#define GL_HPP_FUNDEF_VertexAttrib4ubv
typedef void (*PFNGLVERTEXATTRIB4UBVPROC_HPP)(GLuint,const GLubyte *);
static inline void VertexAttrib4ubv(GLuint index1,const GLubyte * v1)
{
	static PFNGLVERTEXATTRIB4UBVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4UBVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4ubv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4uiv
#define GL_HPP_FUNDEF_VertexAttrib4uiv
typedef void (*PFNGLVERTEXATTRIB4UIVPROC_HPP)(GLuint,const GLuint *);
static inline void VertexAttrib4uiv(GLuint index1,const GLuint * v1)
{
	static PFNGLVERTEXATTRIB4UIVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4UIVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4uiv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4usv
#define GL_HPP_FUNDEF_VertexAttrib4usv
typedef void (*PFNGLVERTEXATTRIB4USVPROC_HPP)(GLuint,const GLushort *);
static inline void VertexAttrib4usv(GLuint index1,const GLushort * v1)
{
	static PFNGLVERTEXATTRIB4USVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4USVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4usv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribDivisor
#define GL_HPP_FUNDEF_VertexAttribDivisor
typedef void (*PFNGLVERTEXATTRIBDIVISORPROC_HPP)(GLuint,GLuint);
static inline void VertexAttribDivisor(GLuint index1,GLuint divisor1)
{
	static PFNGLVERTEXATTRIBDIVISORPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBDIVISORPROC_HPP>(_impl::_get_proc_address("glVertexAttribDivisor",4,1));
	 fn(index1,divisor1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI1i
#define GL_HPP_FUNDEF_VertexAttribI1i
typedef void (*PFNGLVERTEXATTRIBI1IPROC_HPP)(GLuint,GLint);
static inline void VertexAttribI1i(GLuint index1,GLint x1)
{
	static PFNGLVERTEXATTRIBI1IPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI1IPROC_HPP>(_impl::_get_proc_address("glVertexAttribI1i",4,1));
	 fn(index1,x1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI1iv
#define GL_HPP_FUNDEF_VertexAttribI1iv
typedef void (*PFNGLVERTEXATTRIBI1IVPROC_HPP)(GLuint,const GLint *);
static inline void VertexAttribI1iv(GLuint index1,const GLint * v1)
{
	static PFNGLVERTEXATTRIBI1IVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI1IVPROC_HPP>(_impl::_get_proc_address("glVertexAttribI1iv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI1ui
#define GL_HPP_FUNDEF_VertexAttribI1ui
typedef void (*PFNGLVERTEXATTRIBI1UIPROC_HPP)(GLuint,GLuint);
static inline void VertexAttribI1ui(GLuint index1,GLuint x1)
{
	static PFNGLVERTEXATTRIBI1UIPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI1UIPROC_HPP>(_impl::_get_proc_address("glVertexAttribI1ui",4,1));
	 fn(index1,x1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI1uiv
#define GL_HPP_FUNDEF_VertexAttribI1uiv
typedef void (*PFNGLVERTEXATTRIBI1UIVPROC_HPP)(GLuint,const GLuint *);
static inline void VertexAttribI1uiv(GLuint index1,const GLuint * v1)
{
	static PFNGLVERTEXATTRIBI1UIVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI1UIVPROC_HPP>(_impl::_get_proc_address("glVertexAttribI1uiv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI2i
#define GL_HPP_FUNDEF_VertexAttribI2i
typedef void (*PFNGLVERTEXATTRIBI2IPROC_HPP)(GLuint,GLint,GLint);
static inline void VertexAttribI2i(GLuint index1,GLint x1,GLint y1)
{
	static PFNGLVERTEXATTRIBI2IPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI2IPROC_HPP>(_impl::_get_proc_address("glVertexAttribI2i",4,1));
	 fn(index1,x1,y1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI2iv
#define GL_HPP_FUNDEF_VertexAttribI2iv
typedef void (*PFNGLVERTEXATTRIBI2IVPROC_HPP)(GLuint,const GLint *);
static inline void VertexAttribI2iv(GLuint index1,const GLint * v1)
{
	static PFNGLVERTEXATTRIBI2IVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI2IVPROC_HPP>(_impl::_get_proc_address("glVertexAttribI2iv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI2ui
#define GL_HPP_FUNDEF_VertexAttribI2ui
typedef void (*PFNGLVERTEXATTRIBI2UIPROC_HPP)(GLuint,GLuint,GLuint);
static inline void VertexAttribI2ui(GLuint index1,GLuint x1,GLuint y1)
{
	static PFNGLVERTEXATTRIBI2UIPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI2UIPROC_HPP>(_impl::_get_proc_address("glVertexAttribI2ui",4,1));
	 fn(index1,x1,y1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI2uiv
#define GL_HPP_FUNDEF_VertexAttribI2uiv
typedef void (*PFNGLVERTEXATTRIBI2UIVPROC_HPP)(GLuint,const GLuint *);
static inline void VertexAttribI2uiv(GLuint index1,const GLuint * v1)
{
	static PFNGLVERTEXATTRIBI2UIVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI2UIVPROC_HPP>(_impl::_get_proc_address("glVertexAttribI2uiv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI3i
#define GL_HPP_FUNDEF_VertexAttribI3i
typedef void (*PFNGLVERTEXATTRIBI3IPROC_HPP)(GLuint,GLint,GLint,GLint);
static inline void VertexAttribI3i(GLuint index1,GLint x1,GLint y1,GLint z1)
{
	static PFNGLVERTEXATTRIBI3IPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI3IPROC_HPP>(_impl::_get_proc_address("glVertexAttribI3i",4,1));
	 fn(index1,x1,y1,z1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI3iv
#define GL_HPP_FUNDEF_VertexAttribI3iv
typedef void (*PFNGLVERTEXATTRIBI3IVPROC_HPP)(GLuint,const GLint *);
static inline void VertexAttribI3iv(GLuint index1,const GLint * v1)
{
	static PFNGLVERTEXATTRIBI3IVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI3IVPROC_HPP>(_impl::_get_proc_address("glVertexAttribI3iv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI3ui
#define GL_HPP_FUNDEF_VertexAttribI3ui
typedef void (*PFNGLVERTEXATTRIBI3UIPROC_HPP)(GLuint,GLuint,GLuint,GLuint);
static inline void VertexAttribI3ui(GLuint index1,GLuint x1,GLuint y1,GLuint z1)
{
	static PFNGLVERTEXATTRIBI3UIPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI3UIPROC_HPP>(_impl::_get_proc_address("glVertexAttribI3ui",4,1));
	 fn(index1,x1,y1,z1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI3uiv
#define GL_HPP_FUNDEF_VertexAttribI3uiv
typedef void (*PFNGLVERTEXATTRIBI3UIVPROC_HPP)(GLuint,const GLuint *);
static inline void VertexAttribI3uiv(GLuint index1,const GLuint * v1)
{
	static PFNGLVERTEXATTRIBI3UIVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI3UIVPROC_HPP>(_impl::_get_proc_address("glVertexAttribI3uiv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI4bv
#define GL_HPP_FUNDEF_VertexAttribI4bv
typedef void (*PFNGLVERTEXATTRIBI4BVPROC_HPP)(GLuint,const GLbyte *);
static inline void VertexAttribI4bv(GLuint index1,const GLbyte * v1)
{
	static PFNGLVERTEXATTRIBI4BVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI4BVPROC_HPP>(_impl::_get_proc_address("glVertexAttribI4bv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI4i
#define GL_HPP_FUNDEF_VertexAttribI4i
typedef void (*PFNGLVERTEXATTRIBI4IPROC_HPP)(GLuint,GLint,GLint,GLint,GLint);
static inline void VertexAttribI4i(GLuint index1,GLint x1,GLint y1,GLint z1,GLint w1)
{
	static PFNGLVERTEXATTRIBI4IPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI4IPROC_HPP>(_impl::_get_proc_address("glVertexAttribI4i",4,1));
	 fn(index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI4iv
#define GL_HPP_FUNDEF_VertexAttribI4iv
typedef void (*PFNGLVERTEXATTRIBI4IVPROC_HPP)(GLuint,const GLint *);
static inline void VertexAttribI4iv(GLuint index1,const GLint * v1)
{
	static PFNGLVERTEXATTRIBI4IVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI4IVPROC_HPP>(_impl::_get_proc_address("glVertexAttribI4iv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI4sv
#define GL_HPP_FUNDEF_VertexAttribI4sv
typedef void (*PFNGLVERTEXATTRIBI4SVPROC_HPP)(GLuint,const GLshort *);
static inline void VertexAttribI4sv(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIBI4SVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI4SVPROC_HPP>(_impl::_get_proc_address("glVertexAttribI4sv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI4ubv
#define GL_HPP_FUNDEF_VertexAttribI4ubv
typedef void (*PFNGLVERTEXATTRIBI4UBVPROC_HPP)(GLuint,const GLubyte *);
static inline void VertexAttribI4ubv(GLuint index1,const GLubyte * v1)
{
	static PFNGLVERTEXATTRIBI4UBVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI4UBVPROC_HPP>(_impl::_get_proc_address("glVertexAttribI4ubv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI4ui
#define GL_HPP_FUNDEF_VertexAttribI4ui
typedef void (*PFNGLVERTEXATTRIBI4UIPROC_HPP)(GLuint,GLuint,GLuint,GLuint,GLuint);
static inline void VertexAttribI4ui(GLuint index1,GLuint x1,GLuint y1,GLuint z1,GLuint w1)
{
	static PFNGLVERTEXATTRIBI4UIPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI4UIPROC_HPP>(_impl::_get_proc_address("glVertexAttribI4ui",4,1));
	 fn(index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI4uiv
#define GL_HPP_FUNDEF_VertexAttribI4uiv
typedef void (*PFNGLVERTEXATTRIBI4UIVPROC_HPP)(GLuint,const GLuint *);
static inline void VertexAttribI4uiv(GLuint index1,const GLuint * v1)
{
	static PFNGLVERTEXATTRIBI4UIVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI4UIVPROC_HPP>(_impl::_get_proc_address("glVertexAttribI4uiv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI4usv
#define GL_HPP_FUNDEF_VertexAttribI4usv
typedef void (*PFNGLVERTEXATTRIBI4USVPROC_HPP)(GLuint,const GLushort *);
static inline void VertexAttribI4usv(GLuint index1,const GLushort * v1)
{
	static PFNGLVERTEXATTRIBI4USVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI4USVPROC_HPP>(_impl::_get_proc_address("glVertexAttribI4usv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribIPointer
#define GL_HPP_FUNDEF_VertexAttribIPointer
typedef void (*PFNGLVERTEXATTRIBIPOINTERPROC_HPP)(GLuint,GLint,GLenum,GLsizei,const void *);
static inline void VertexAttribIPointer(GLuint index1,GLint size1,GLenum type1,GLsizei stride1,const void * pointer1)
{
	static PFNGLVERTEXATTRIBIPOINTERPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBIPOINTERPROC_HPP>(_impl::_get_proc_address("glVertexAttribIPointer",4,1));
	 fn(index1,size1,type1,stride1,pointer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribL1d
#define GL_HPP_FUNDEF_VertexAttribL1d
typedef void (*PFNGLVERTEXATTRIBL1DPROC_HPP)(GLuint,GLdouble);
static inline void VertexAttribL1d(GLuint index1,GLdouble x1)
{
	static PFNGLVERTEXATTRIBL1DPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBL1DPROC_HPP>(_impl::_get_proc_address("glVertexAttribL1d",4,1));
	 fn(index1,x1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribL1dv
#define GL_HPP_FUNDEF_VertexAttribL1dv
typedef void (*PFNGLVERTEXATTRIBL1DVPROC_HPP)(GLuint,const GLdouble *);
static inline void VertexAttribL1dv(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIBL1DVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBL1DVPROC_HPP>(_impl::_get_proc_address("glVertexAttribL1dv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribL2d
#define GL_HPP_FUNDEF_VertexAttribL2d
typedef void (*PFNGLVERTEXATTRIBL2DPROC_HPP)(GLuint,GLdouble,GLdouble);
static inline void VertexAttribL2d(GLuint index1,GLdouble x1,GLdouble y1)
{
	static PFNGLVERTEXATTRIBL2DPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBL2DPROC_HPP>(_impl::_get_proc_address("glVertexAttribL2d",4,1));
	 fn(index1,x1,y1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribL2dv
#define GL_HPP_FUNDEF_VertexAttribL2dv
typedef void (*PFNGLVERTEXATTRIBL2DVPROC_HPP)(GLuint,const GLdouble *);
static inline void VertexAttribL2dv(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIBL2DVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBL2DVPROC_HPP>(_impl::_get_proc_address("glVertexAttribL2dv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribL3d
#define GL_HPP_FUNDEF_VertexAttribL3d
typedef void (*PFNGLVERTEXATTRIBL3DPROC_HPP)(GLuint,GLdouble,GLdouble,GLdouble);
static inline void VertexAttribL3d(GLuint index1,GLdouble x1,GLdouble y1,GLdouble z1)
{
	static PFNGLVERTEXATTRIBL3DPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBL3DPROC_HPP>(_impl::_get_proc_address("glVertexAttribL3d",4,1));
	 fn(index1,x1,y1,z1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribL3dv
#define GL_HPP_FUNDEF_VertexAttribL3dv
typedef void (*PFNGLVERTEXATTRIBL3DVPROC_HPP)(GLuint,const GLdouble *);
static inline void VertexAttribL3dv(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIBL3DVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBL3DVPROC_HPP>(_impl::_get_proc_address("glVertexAttribL3dv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribL4d
#define GL_HPP_FUNDEF_VertexAttribL4d
typedef void (*PFNGLVERTEXATTRIBL4DPROC_HPP)(GLuint,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void VertexAttribL4d(GLuint index1,GLdouble x1,GLdouble y1,GLdouble z1,GLdouble w1)
{
	static PFNGLVERTEXATTRIBL4DPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBL4DPROC_HPP>(_impl::_get_proc_address("glVertexAttribL4d",4,1));
	 fn(index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribL4dv
#define GL_HPP_FUNDEF_VertexAttribL4dv
typedef void (*PFNGLVERTEXATTRIBL4DVPROC_HPP)(GLuint,const GLdouble *);
static inline void VertexAttribL4dv(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIBL4DVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBL4DVPROC_HPP>(_impl::_get_proc_address("glVertexAttribL4dv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribLPointer
#define GL_HPP_FUNDEF_VertexAttribLPointer
typedef void (*PFNGLVERTEXATTRIBLPOINTERPROC_HPP)(GLuint,GLint,GLenum,GLsizei,const void *);
static inline void VertexAttribLPointer(GLuint index1,GLint size1,GLenum type1,GLsizei stride1,const void * pointer1)
{
	static PFNGLVERTEXATTRIBLPOINTERPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBLPOINTERPROC_HPP>(_impl::_get_proc_address("glVertexAttribLPointer",4,1));
	 fn(index1,size1,type1,stride1,pointer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribP1ui
#define GL_HPP_FUNDEF_VertexAttribP1ui
typedef void (*PFNGLVERTEXATTRIBP1UIPROC_HPP)(GLuint,GLenum,GLboolean,GLuint);
static inline void VertexAttribP1ui(GLuint index1,GLenum type1,GLboolean normalized1,GLuint value1)
{
	static PFNGLVERTEXATTRIBP1UIPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBP1UIPROC_HPP>(_impl::_get_proc_address("glVertexAttribP1ui",4,1));
	 fn(index1,type1,normalized1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribP1uiv
#define GL_HPP_FUNDEF_VertexAttribP1uiv
typedef void (*PFNGLVERTEXATTRIBP1UIVPROC_HPP)(GLuint,GLenum,GLboolean,const GLuint *);
static inline void VertexAttribP1uiv(GLuint index1,GLenum type1,GLboolean normalized1,const GLuint * value1)
{
	static PFNGLVERTEXATTRIBP1UIVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBP1UIVPROC_HPP>(_impl::_get_proc_address("glVertexAttribP1uiv",4,1));
	 fn(index1,type1,normalized1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribP2ui
#define GL_HPP_FUNDEF_VertexAttribP2ui
typedef void (*PFNGLVERTEXATTRIBP2UIPROC_HPP)(GLuint,GLenum,GLboolean,GLuint);
static inline void VertexAttribP2ui(GLuint index1,GLenum type1,GLboolean normalized1,GLuint value1)
{
	static PFNGLVERTEXATTRIBP2UIPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBP2UIPROC_HPP>(_impl::_get_proc_address("glVertexAttribP2ui",4,1));
	 fn(index1,type1,normalized1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribP2uiv
#define GL_HPP_FUNDEF_VertexAttribP2uiv
typedef void (*PFNGLVERTEXATTRIBP2UIVPROC_HPP)(GLuint,GLenum,GLboolean,const GLuint *);
static inline void VertexAttribP2uiv(GLuint index1,GLenum type1,GLboolean normalized1,const GLuint * value1)
{
	static PFNGLVERTEXATTRIBP2UIVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBP2UIVPROC_HPP>(_impl::_get_proc_address("glVertexAttribP2uiv",4,1));
	 fn(index1,type1,normalized1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribP3ui
#define GL_HPP_FUNDEF_VertexAttribP3ui
typedef void (*PFNGLVERTEXATTRIBP3UIPROC_HPP)(GLuint,GLenum,GLboolean,GLuint);
static inline void VertexAttribP3ui(GLuint index1,GLenum type1,GLboolean normalized1,GLuint value1)
{
	static PFNGLVERTEXATTRIBP3UIPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBP3UIPROC_HPP>(_impl::_get_proc_address("glVertexAttribP3ui",4,1));
	 fn(index1,type1,normalized1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribP3uiv
#define GL_HPP_FUNDEF_VertexAttribP3uiv
typedef void (*PFNGLVERTEXATTRIBP3UIVPROC_HPP)(GLuint,GLenum,GLboolean,const GLuint *);
static inline void VertexAttribP3uiv(GLuint index1,GLenum type1,GLboolean normalized1,const GLuint * value1)
{
	static PFNGLVERTEXATTRIBP3UIVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBP3UIVPROC_HPP>(_impl::_get_proc_address("glVertexAttribP3uiv",4,1));
	 fn(index1,type1,normalized1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribP4ui
#define GL_HPP_FUNDEF_VertexAttribP4ui
typedef void (*PFNGLVERTEXATTRIBP4UIPROC_HPP)(GLuint,GLenum,GLboolean,GLuint);
static inline void VertexAttribP4ui(GLuint index1,GLenum type1,GLboolean normalized1,GLuint value1)
{
	static PFNGLVERTEXATTRIBP4UIPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBP4UIPROC_HPP>(_impl::_get_proc_address("glVertexAttribP4ui",4,1));
	 fn(index1,type1,normalized1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribP4uiv
#define GL_HPP_FUNDEF_VertexAttribP4uiv
typedef void (*PFNGLVERTEXATTRIBP4UIVPROC_HPP)(GLuint,GLenum,GLboolean,const GLuint *);
static inline void VertexAttribP4uiv(GLuint index1,GLenum type1,GLboolean normalized1,const GLuint * value1)
{
	static PFNGLVERTEXATTRIBP4UIVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBP4UIVPROC_HPP>(_impl::_get_proc_address("glVertexAttribP4uiv",4,1));
	 fn(index1,type1,normalized1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribPointer
#define GL_HPP_FUNDEF_VertexAttribPointer
typedef void (*PFNGLVERTEXATTRIBPOINTERPROC_HPP)(GLuint,GLint,GLenum,GLboolean,GLsizei,const void *);
static inline void VertexAttribPointer(GLuint index1,GLint size1,GLenum type1,GLboolean normalized1,GLsizei stride1,const void * pointer1)
{
	static PFNGLVERTEXATTRIBPOINTERPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBPOINTERPROC_HPP>(_impl::_get_proc_address("glVertexAttribPointer",4,1));
	 fn(index1,size1,type1,normalized1,stride1,pointer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Viewport
#define GL_HPP_FUNDEF_Viewport
typedef void (*PFNGLVIEWPORTPROC_HPP)(GLint,GLint,GLsizei,GLsizei);
static inline void Viewport(GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
	static PFNGLVIEWPORTPROC_HPP fn=reinterpret_cast<PFNGLVIEWPORTPROC_HPP>(_impl::_get_proc_address("glViewport",4,1));
	 fn(x1,y1,width1,height1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ViewportArrayv
#define GL_HPP_FUNDEF_ViewportArrayv
typedef void (*PFNGLVIEWPORTARRAYVPROC_HPP)(GLuint,GLsizei,const GLfloat *);
static inline void ViewportArrayv(GLuint first1,GLsizei count1,const GLfloat * v1)
{
	static PFNGLVIEWPORTARRAYVPROC_HPP fn=reinterpret_cast<PFNGLVIEWPORTARRAYVPROC_HPP>(_impl::_get_proc_address("glViewportArrayv",4,1));
	 fn(first1,count1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ViewportIndexedf
#define GL_HPP_FUNDEF_ViewportIndexedf
typedef void (*PFNGLVIEWPORTINDEXEDFPROC_HPP)(GLuint,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void ViewportIndexedf(GLuint index1,GLfloat x1,GLfloat y1,GLfloat w1,GLfloat h1)
{
	static PFNGLVIEWPORTINDEXEDFPROC_HPP fn=reinterpret_cast<PFNGLVIEWPORTINDEXEDFPROC_HPP>(_impl::_get_proc_address("glViewportIndexedf",4,1));
	 fn(index1,x1,y1,w1,h1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ViewportIndexedfv
#define GL_HPP_FUNDEF_ViewportIndexedfv
typedef void (*PFNGLVIEWPORTINDEXEDFVPROC_HPP)(GLuint,const GLfloat *);
static inline void ViewportIndexedfv(GLuint index1,const GLfloat * v1)
{
	static PFNGLVIEWPORTINDEXEDFVPROC_HPP fn=reinterpret_cast<PFNGLVIEWPORTINDEXEDFVPROC_HPP>(_impl::_get_proc_address("glViewportIndexedfv",4,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_WaitSync
#define GL_HPP_FUNDEF_WaitSync
typedef void (*PFNGLWAITSYNCPROC_HPP)(GLsync,GLbitfield,GLuint64);
static inline void WaitSync(GLsync sync1,GLbitfield flags1,GLuint64 timeout1)
{
	static PFNGLWAITSYNCPROC_HPP fn=reinterpret_cast<PFNGLWAITSYNCPROC_HPP>(_impl::_get_proc_address("glWaitSync",4,1));
	 fn(sync1,flags1,timeout1);
}
#endif
}
#endif
