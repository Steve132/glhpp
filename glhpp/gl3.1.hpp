#ifndef GL_HPP_GL_VERSION_3_1_HPP
#define GL_HPP_GL_VERSION_3_1_HPP
#include "common.hpp"


#ifndef GL_HPP_API_NAME
#define GL_HPP_API_NAME GL_HPP_GL_API
#endif
#ifndef GL_HPP_API_VERSION
#define GL_HPP_API_VERSION 310
#endif
#ifndef GL_NONE
#define GL_NONE 0
#endif //GL_NONE
#ifndef GL_FALSE
#define GL_FALSE 0
#endif //GL_FALSE
#ifndef GL_NO_ERROR
#define GL_NO_ERROR 0
#endif //GL_NO_ERROR
#ifndef GL_ZERO
#define GL_ZERO 0
#endif //GL_ZERO
#ifndef GL_POINTS
#define GL_POINTS 0x0000
#endif //GL_POINTS
#ifndef GL_CURRENT_BIT
#define GL_CURRENT_BIT 0x00000001
#endif //GL_CURRENT_BIT
#ifndef GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#endif //GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
#ifndef GL_CLIENT_PIXEL_STORE_BIT
#define GL_CLIENT_PIXEL_STORE_BIT 0x00000001
#endif //GL_CLIENT_PIXEL_STORE_BIT
#ifndef GL_POINT_BIT
#define GL_POINT_BIT 0x00000002
#endif //GL_POINT_BIT
#ifndef GL_CLIENT_VERTEX_ARRAY_BIT
#define GL_CLIENT_VERTEX_ARRAY_BIT 0x00000002
#endif //GL_CLIENT_VERTEX_ARRAY_BIT
#ifndef GL_LINE_BIT
#define GL_LINE_BIT 0x00000004
#endif //GL_LINE_BIT
#ifndef GL_POLYGON_BIT
#define GL_POLYGON_BIT 0x00000008
#endif //GL_POLYGON_BIT
#ifndef GL_POLYGON_STIPPLE_BIT
#define GL_POLYGON_STIPPLE_BIT 0x00000010
#endif //GL_POLYGON_STIPPLE_BIT
#ifndef GL_PIXEL_MODE_BIT
#define GL_PIXEL_MODE_BIT 0x00000020
#endif //GL_PIXEL_MODE_BIT
#ifndef GL_LIGHTING_BIT
#define GL_LIGHTING_BIT 0x00000040
#endif //GL_LIGHTING_BIT
#ifndef GL_FOG_BIT
#define GL_FOG_BIT 0x00000080
#endif //GL_FOG_BIT
#ifndef GL_DEPTH_BUFFER_BIT
#define GL_DEPTH_BUFFER_BIT 0x00000100
#endif //GL_DEPTH_BUFFER_BIT
#ifndef GL_ACCUM_BUFFER_BIT
#define GL_ACCUM_BUFFER_BIT 0x00000200
#endif //GL_ACCUM_BUFFER_BIT
#ifndef GL_STENCIL_BUFFER_BIT
#define GL_STENCIL_BUFFER_BIT 0x00000400
#endif //GL_STENCIL_BUFFER_BIT
#ifndef GL_VIEWPORT_BIT
#define GL_VIEWPORT_BIT 0x00000800
#endif //GL_VIEWPORT_BIT
#ifndef GL_TRANSFORM_BIT
#define GL_TRANSFORM_BIT 0x00001000
#endif //GL_TRANSFORM_BIT
#ifndef GL_ENABLE_BIT
#define GL_ENABLE_BIT 0x00002000
#endif //GL_ENABLE_BIT
#ifndef GL_COLOR_BUFFER_BIT
#define GL_COLOR_BUFFER_BIT 0x00004000
#endif //GL_COLOR_BUFFER_BIT
#ifndef GL_HINT_BIT
#define GL_HINT_BIT 0x00008000
#endif //GL_HINT_BIT
#ifndef GL_LINES
#define GL_LINES 0x0001
#endif //GL_LINES
#ifndef GL_MAP_READ_BIT
#define GL_MAP_READ_BIT 0x0001
#endif //GL_MAP_READ_BIT
#ifndef GL_EVAL_BIT
#define GL_EVAL_BIT 0x00010000
#endif //GL_EVAL_BIT
#ifndef GL_LINE_LOOP
#define GL_LINE_LOOP 0x0002
#endif //GL_LINE_LOOP
#ifndef GL_MAP_WRITE_BIT
#define GL_MAP_WRITE_BIT 0x0002
#endif //GL_MAP_WRITE_BIT
#ifndef GL_LIST_BIT
#define GL_LIST_BIT 0x00020000
#endif //GL_LIST_BIT
#ifndef GL_LINE_STRIP
#define GL_LINE_STRIP 0x0003
#endif //GL_LINE_STRIP
#ifndef GL_MAP_INVALIDATE_RANGE_BIT
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#endif //GL_MAP_INVALIDATE_RANGE_BIT
#ifndef GL_TRIANGLES
#define GL_TRIANGLES 0x0004
#endif //GL_TRIANGLES
#ifndef GL_TEXTURE_BIT
#define GL_TEXTURE_BIT 0x00040000
#endif //GL_TEXTURE_BIT
#ifndef GL_TRIANGLE_STRIP
#define GL_TRIANGLE_STRIP 0x0005
#endif //GL_TRIANGLE_STRIP
#ifndef GL_TRIANGLE_FAN
#define GL_TRIANGLE_FAN 0x0006
#endif //GL_TRIANGLE_FAN
#ifndef GL_QUADS
#define GL_QUADS 0x0007
#endif //GL_QUADS
#ifndef GL_MAP_INVALIDATE_BUFFER_BIT
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#endif //GL_MAP_INVALIDATE_BUFFER_BIT
#ifndef GL_QUAD_STRIP
#define GL_QUAD_STRIP 0x0008
#endif //GL_QUAD_STRIP
#ifndef GL_SCISSOR_BIT
#define GL_SCISSOR_BIT 0x00080000
#endif //GL_SCISSOR_BIT
#ifndef GL_POLYGON
#define GL_POLYGON 0x0009
#endif //GL_POLYGON
#ifndef GL_MAP_FLUSH_EXPLICIT_BIT
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#endif //GL_MAP_FLUSH_EXPLICIT_BIT
#ifndef GL_MAP_UNSYNCHRONIZED_BIT
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#endif //GL_MAP_UNSYNCHRONIZED_BIT
#ifndef GL_ACCUM
#define GL_ACCUM 0x0100
#endif //GL_ACCUM
#ifndef GL_LOAD
#define GL_LOAD 0x0101
#endif //GL_LOAD
#ifndef GL_RETURN
#define GL_RETURN 0x0102
#endif //GL_RETURN
#ifndef GL_MULT
#define GL_MULT 0x0103
#endif //GL_MULT
#ifndef GL_ADD
#define GL_ADD 0x0104
#endif //GL_ADD
#ifndef GL_NEVER
#define GL_NEVER 0x0200
#endif //GL_NEVER
#ifndef GL_LESS
#define GL_LESS 0x0201
#endif //GL_LESS
#ifndef GL_EQUAL
#define GL_EQUAL 0x0202
#endif //GL_EQUAL
#ifndef GL_LEQUAL
#define GL_LEQUAL 0x0203
#endif //GL_LEQUAL
#ifndef GL_GREATER
#define GL_GREATER 0x0204
#endif //GL_GREATER
#ifndef GL_NOTEQUAL
#define GL_NOTEQUAL 0x0205
#endif //GL_NOTEQUAL
#ifndef GL_GEQUAL
#define GL_GEQUAL 0x0206
#endif //GL_GEQUAL
#ifndef GL_ALWAYS
#define GL_ALWAYS 0x0207
#endif //GL_ALWAYS
#ifndef GL_SRC_COLOR
#define GL_SRC_COLOR 0x0300
#endif //GL_SRC_COLOR
#ifndef GL_ONE_MINUS_SRC_COLOR
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#endif //GL_ONE_MINUS_SRC_COLOR
#ifndef GL_SRC_ALPHA
#define GL_SRC_ALPHA 0x0302
#endif //GL_SRC_ALPHA
#ifndef GL_ONE_MINUS_SRC_ALPHA
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#endif //GL_ONE_MINUS_SRC_ALPHA
#ifndef GL_DST_ALPHA
#define GL_DST_ALPHA 0x0304
#endif //GL_DST_ALPHA
#ifndef GL_ONE_MINUS_DST_ALPHA
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#endif //GL_ONE_MINUS_DST_ALPHA
#ifndef GL_DST_COLOR
#define GL_DST_COLOR 0x0306
#endif //GL_DST_COLOR
#ifndef GL_ONE_MINUS_DST_COLOR
#define GL_ONE_MINUS_DST_COLOR 0x0307
#endif //GL_ONE_MINUS_DST_COLOR
#ifndef GL_SRC_ALPHA_SATURATE
#define GL_SRC_ALPHA_SATURATE 0x0308
#endif //GL_SRC_ALPHA_SATURATE
#ifndef GL_FRONT_LEFT
#define GL_FRONT_LEFT 0x0400
#endif //GL_FRONT_LEFT
#ifndef GL_FRONT_RIGHT
#define GL_FRONT_RIGHT 0x0401
#endif //GL_FRONT_RIGHT
#ifndef GL_BACK_LEFT
#define GL_BACK_LEFT 0x0402
#endif //GL_BACK_LEFT
#ifndef GL_BACK_RIGHT
#define GL_BACK_RIGHT 0x0403
#endif //GL_BACK_RIGHT
#ifndef GL_FRONT
#define GL_FRONT 0x0404
#endif //GL_FRONT
#ifndef GL_BACK
#define GL_BACK 0x0405
#endif //GL_BACK
#ifndef GL_LEFT
#define GL_LEFT 0x0406
#endif //GL_LEFT
#ifndef GL_RIGHT
#define GL_RIGHT 0x0407
#endif //GL_RIGHT
#ifndef GL_FRONT_AND_BACK
#define GL_FRONT_AND_BACK 0x0408
#endif //GL_FRONT_AND_BACK
#ifndef GL_AUX0
#define GL_AUX0 0x0409
#endif //GL_AUX0
#ifndef GL_AUX1
#define GL_AUX1 0x040A
#endif //GL_AUX1
#ifndef GL_AUX2
#define GL_AUX2 0x040B
#endif //GL_AUX2
#ifndef GL_AUX3
#define GL_AUX3 0x040C
#endif //GL_AUX3
#ifndef GL_INVALID_ENUM
#define GL_INVALID_ENUM 0x0500
#endif //GL_INVALID_ENUM
#ifndef GL_INVALID_VALUE
#define GL_INVALID_VALUE 0x0501
#endif //GL_INVALID_VALUE
#ifndef GL_INVALID_OPERATION
#define GL_INVALID_OPERATION 0x0502
#endif //GL_INVALID_OPERATION
#ifndef GL_STACK_OVERFLOW
#define GL_STACK_OVERFLOW 0x0503
#endif //GL_STACK_OVERFLOW
#ifndef GL_STACK_UNDERFLOW
#define GL_STACK_UNDERFLOW 0x0504
#endif //GL_STACK_UNDERFLOW
#ifndef GL_OUT_OF_MEMORY
#define GL_OUT_OF_MEMORY 0x0505
#endif //GL_OUT_OF_MEMORY
#ifndef GL_INVALID_FRAMEBUFFER_OPERATION
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#endif //GL_INVALID_FRAMEBUFFER_OPERATION
#ifndef GL_2D
#define GL_2D 0x0600
#endif //GL_2D
#ifndef GL_3D
#define GL_3D 0x0601
#endif //GL_3D
#ifndef GL_3D_COLOR
#define GL_3D_COLOR 0x0602
#endif //GL_3D_COLOR
#ifndef GL_3D_COLOR_TEXTURE
#define GL_3D_COLOR_TEXTURE 0x0603
#endif //GL_3D_COLOR_TEXTURE
#ifndef GL_4D_COLOR_TEXTURE
#define GL_4D_COLOR_TEXTURE 0x0604
#endif //GL_4D_COLOR_TEXTURE
#ifndef GL_PASS_THROUGH_TOKEN
#define GL_PASS_THROUGH_TOKEN 0x0700
#endif //GL_PASS_THROUGH_TOKEN
#ifndef GL_POINT_TOKEN
#define GL_POINT_TOKEN 0x0701
#endif //GL_POINT_TOKEN
#ifndef GL_LINE_TOKEN
#define GL_LINE_TOKEN 0x0702
#endif //GL_LINE_TOKEN
#ifndef GL_POLYGON_TOKEN
#define GL_POLYGON_TOKEN 0x0703
#endif //GL_POLYGON_TOKEN
#ifndef GL_BITMAP_TOKEN
#define GL_BITMAP_TOKEN 0x0704
#endif //GL_BITMAP_TOKEN
#ifndef GL_DRAW_PIXEL_TOKEN
#define GL_DRAW_PIXEL_TOKEN 0x0705
#endif //GL_DRAW_PIXEL_TOKEN
#ifndef GL_COPY_PIXEL_TOKEN
#define GL_COPY_PIXEL_TOKEN 0x0706
#endif //GL_COPY_PIXEL_TOKEN
#ifndef GL_LINE_RESET_TOKEN
#define GL_LINE_RESET_TOKEN 0x0707
#endif //GL_LINE_RESET_TOKEN
#ifndef GL_EXP
#define GL_EXP 0x0800
#endif //GL_EXP
#ifndef GL_EXP2
#define GL_EXP2 0x0801
#endif //GL_EXP2
#ifndef GL_CW
#define GL_CW 0x0900
#endif //GL_CW
#ifndef GL_CCW
#define GL_CCW 0x0901
#endif //GL_CCW
#ifndef GL_COEFF
#define GL_COEFF 0x0A00
#endif //GL_COEFF
#ifndef GL_ORDER
#define GL_ORDER 0x0A01
#endif //GL_ORDER
#ifndef GL_DOMAIN
#define GL_DOMAIN 0x0A02
#endif //GL_DOMAIN
#ifndef GL_CURRENT_COLOR
#define GL_CURRENT_COLOR 0x0B00
#endif //GL_CURRENT_COLOR
#ifndef GL_CURRENT_INDEX
#define GL_CURRENT_INDEX 0x0B01
#endif //GL_CURRENT_INDEX
#ifndef GL_CURRENT_NORMAL
#define GL_CURRENT_NORMAL 0x0B02
#endif //GL_CURRENT_NORMAL
#ifndef GL_CURRENT_TEXTURE_COORDS
#define GL_CURRENT_TEXTURE_COORDS 0x0B03
#endif //GL_CURRENT_TEXTURE_COORDS
#ifndef GL_CURRENT_RASTER_COLOR
#define GL_CURRENT_RASTER_COLOR 0x0B04
#endif //GL_CURRENT_RASTER_COLOR
#ifndef GL_CURRENT_RASTER_INDEX
#define GL_CURRENT_RASTER_INDEX 0x0B05
#endif //GL_CURRENT_RASTER_INDEX
#ifndef GL_CURRENT_RASTER_TEXTURE_COORDS
#define GL_CURRENT_RASTER_TEXTURE_COORDS 0x0B06
#endif //GL_CURRENT_RASTER_TEXTURE_COORDS
#ifndef GL_CURRENT_RASTER_POSITION
#define GL_CURRENT_RASTER_POSITION 0x0B07
#endif //GL_CURRENT_RASTER_POSITION
#ifndef GL_CURRENT_RASTER_POSITION_VALID
#define GL_CURRENT_RASTER_POSITION_VALID 0x0B08
#endif //GL_CURRENT_RASTER_POSITION_VALID
#ifndef GL_CURRENT_RASTER_DISTANCE
#define GL_CURRENT_RASTER_DISTANCE 0x0B09
#endif //GL_CURRENT_RASTER_DISTANCE
#ifndef GL_POINT_SMOOTH
#define GL_POINT_SMOOTH 0x0B10
#endif //GL_POINT_SMOOTH
#ifndef GL_POINT_SIZE
#define GL_POINT_SIZE 0x0B11
#endif //GL_POINT_SIZE
#ifndef GL_SMOOTH_POINT_SIZE_RANGE
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#endif //GL_SMOOTH_POINT_SIZE_RANGE
#ifndef GL_POINT_SIZE_RANGE
#define GL_POINT_SIZE_RANGE 0x0B12
#endif //GL_POINT_SIZE_RANGE
#ifndef GL_SMOOTH_POINT_SIZE_GRANULARITY
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#endif //GL_SMOOTH_POINT_SIZE_GRANULARITY
#ifndef GL_POINT_SIZE_GRANULARITY
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#endif //GL_POINT_SIZE_GRANULARITY
#ifndef GL_LINE_SMOOTH
#define GL_LINE_SMOOTH 0x0B20
#endif //GL_LINE_SMOOTH
#ifndef GL_LINE_WIDTH
#define GL_LINE_WIDTH 0x0B21
#endif //GL_LINE_WIDTH
#ifndef GL_SMOOTH_LINE_WIDTH_RANGE
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#endif //GL_SMOOTH_LINE_WIDTH_RANGE
#ifndef GL_LINE_WIDTH_RANGE
#define GL_LINE_WIDTH_RANGE 0x0B22
#endif //GL_LINE_WIDTH_RANGE
#ifndef GL_SMOOTH_LINE_WIDTH_GRANULARITY
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#endif //GL_SMOOTH_LINE_WIDTH_GRANULARITY
#ifndef GL_LINE_WIDTH_GRANULARITY
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#endif //GL_LINE_WIDTH_GRANULARITY
#ifndef GL_LINE_STIPPLE
#define GL_LINE_STIPPLE 0x0B24
#endif //GL_LINE_STIPPLE
#ifndef GL_LINE_STIPPLE_PATTERN
#define GL_LINE_STIPPLE_PATTERN 0x0B25
#endif //GL_LINE_STIPPLE_PATTERN
#ifndef GL_LINE_STIPPLE_REPEAT
#define GL_LINE_STIPPLE_REPEAT 0x0B26
#endif //GL_LINE_STIPPLE_REPEAT
#ifndef GL_LIST_MODE
#define GL_LIST_MODE 0x0B30
#endif //GL_LIST_MODE
#ifndef GL_MAX_LIST_NESTING
#define GL_MAX_LIST_NESTING 0x0B31
#endif //GL_MAX_LIST_NESTING
#ifndef GL_LIST_BASE
#define GL_LIST_BASE 0x0B32
#endif //GL_LIST_BASE
#ifndef GL_LIST_INDEX
#define GL_LIST_INDEX 0x0B33
#endif //GL_LIST_INDEX
#ifndef GL_POLYGON_MODE
#define GL_POLYGON_MODE 0x0B40
#endif //GL_POLYGON_MODE
#ifndef GL_POLYGON_SMOOTH
#define GL_POLYGON_SMOOTH 0x0B41
#endif //GL_POLYGON_SMOOTH
#ifndef GL_POLYGON_STIPPLE
#define GL_POLYGON_STIPPLE 0x0B42
#endif //GL_POLYGON_STIPPLE
#ifndef GL_EDGE_FLAG
#define GL_EDGE_FLAG 0x0B43
#endif //GL_EDGE_FLAG
#ifndef GL_CULL_FACE
#define GL_CULL_FACE 0x0B44
#endif //GL_CULL_FACE
#ifndef GL_CULL_FACE_MODE
#define GL_CULL_FACE_MODE 0x0B45
#endif //GL_CULL_FACE_MODE
#ifndef GL_FRONT_FACE
#define GL_FRONT_FACE 0x0B46
#endif //GL_FRONT_FACE
#ifndef GL_LIGHTING
#define GL_LIGHTING 0x0B50
#endif //GL_LIGHTING
#ifndef GL_LIGHT_MODEL_LOCAL_VIEWER
#define GL_LIGHT_MODEL_LOCAL_VIEWER 0x0B51
#endif //GL_LIGHT_MODEL_LOCAL_VIEWER
#ifndef GL_LIGHT_MODEL_TWO_SIDE
#define GL_LIGHT_MODEL_TWO_SIDE 0x0B52
#endif //GL_LIGHT_MODEL_TWO_SIDE
#ifndef GL_LIGHT_MODEL_AMBIENT
#define GL_LIGHT_MODEL_AMBIENT 0x0B53
#endif //GL_LIGHT_MODEL_AMBIENT
#ifndef GL_SHADE_MODEL
#define GL_SHADE_MODEL 0x0B54
#endif //GL_SHADE_MODEL
#ifndef GL_COLOR_MATERIAL_FACE
#define GL_COLOR_MATERIAL_FACE 0x0B55
#endif //GL_COLOR_MATERIAL_FACE
#ifndef GL_COLOR_MATERIAL_PARAMETER
#define GL_COLOR_MATERIAL_PARAMETER 0x0B56
#endif //GL_COLOR_MATERIAL_PARAMETER
#ifndef GL_COLOR_MATERIAL
#define GL_COLOR_MATERIAL 0x0B57
#endif //GL_COLOR_MATERIAL
#ifndef GL_FOG
#define GL_FOG 0x0B60
#endif //GL_FOG
#ifndef GL_FOG_INDEX
#define GL_FOG_INDEX 0x0B61
#endif //GL_FOG_INDEX
#ifndef GL_FOG_DENSITY
#define GL_FOG_DENSITY 0x0B62
#endif //GL_FOG_DENSITY
#ifndef GL_FOG_START
#define GL_FOG_START 0x0B63
#endif //GL_FOG_START
#ifndef GL_FOG_END
#define GL_FOG_END 0x0B64
#endif //GL_FOG_END
#ifndef GL_FOG_MODE
#define GL_FOG_MODE 0x0B65
#endif //GL_FOG_MODE
#ifndef GL_FOG_COLOR
#define GL_FOG_COLOR 0x0B66
#endif //GL_FOG_COLOR
#ifndef GL_DEPTH_RANGE
#define GL_DEPTH_RANGE 0x0B70
#endif //GL_DEPTH_RANGE
#ifndef GL_DEPTH_TEST
#define GL_DEPTH_TEST 0x0B71
#endif //GL_DEPTH_TEST
#ifndef GL_DEPTH_WRITEMASK
#define GL_DEPTH_WRITEMASK 0x0B72
#endif //GL_DEPTH_WRITEMASK
#ifndef GL_DEPTH_CLEAR_VALUE
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#endif //GL_DEPTH_CLEAR_VALUE
#ifndef GL_DEPTH_FUNC
#define GL_DEPTH_FUNC 0x0B74
#endif //GL_DEPTH_FUNC
#ifndef GL_ACCUM_CLEAR_VALUE
#define GL_ACCUM_CLEAR_VALUE 0x0B80
#endif //GL_ACCUM_CLEAR_VALUE
#ifndef GL_STENCIL_TEST
#define GL_STENCIL_TEST 0x0B90
#endif //GL_STENCIL_TEST
#ifndef GL_STENCIL_CLEAR_VALUE
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#endif //GL_STENCIL_CLEAR_VALUE
#ifndef GL_STENCIL_FUNC
#define GL_STENCIL_FUNC 0x0B92
#endif //GL_STENCIL_FUNC
#ifndef GL_STENCIL_VALUE_MASK
#define GL_STENCIL_VALUE_MASK 0x0B93
#endif //GL_STENCIL_VALUE_MASK
#ifndef GL_STENCIL_FAIL
#define GL_STENCIL_FAIL 0x0B94
#endif //GL_STENCIL_FAIL
#ifndef GL_STENCIL_PASS_DEPTH_FAIL
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#endif //GL_STENCIL_PASS_DEPTH_FAIL
#ifndef GL_STENCIL_PASS_DEPTH_PASS
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#endif //GL_STENCIL_PASS_DEPTH_PASS
#ifndef GL_STENCIL_REF
#define GL_STENCIL_REF 0x0B97
#endif //GL_STENCIL_REF
#ifndef GL_STENCIL_WRITEMASK
#define GL_STENCIL_WRITEMASK 0x0B98
#endif //GL_STENCIL_WRITEMASK
#ifndef GL_MATRIX_MODE
#define GL_MATRIX_MODE 0x0BA0
#endif //GL_MATRIX_MODE
#ifndef GL_NORMALIZE
#define GL_NORMALIZE 0x0BA1
#endif //GL_NORMALIZE
#ifndef GL_VIEWPORT
#define GL_VIEWPORT 0x0BA2
#endif //GL_VIEWPORT
#ifndef GL_MODELVIEW_STACK_DEPTH
#define GL_MODELVIEW_STACK_DEPTH 0x0BA3
#endif //GL_MODELVIEW_STACK_DEPTH
#ifndef GL_PROJECTION_STACK_DEPTH
#define GL_PROJECTION_STACK_DEPTH 0x0BA4
#endif //GL_PROJECTION_STACK_DEPTH
#ifndef GL_TEXTURE_STACK_DEPTH
#define GL_TEXTURE_STACK_DEPTH 0x0BA5
#endif //GL_TEXTURE_STACK_DEPTH
#ifndef GL_MODELVIEW_MATRIX
#define GL_MODELVIEW_MATRIX 0x0BA6
#endif //GL_MODELVIEW_MATRIX
#ifndef GL_PROJECTION_MATRIX
#define GL_PROJECTION_MATRIX 0x0BA7
#endif //GL_PROJECTION_MATRIX
#ifndef GL_TEXTURE_MATRIX
#define GL_TEXTURE_MATRIX 0x0BA8
#endif //GL_TEXTURE_MATRIX
#ifndef GL_ATTRIB_STACK_DEPTH
#define GL_ATTRIB_STACK_DEPTH 0x0BB0
#endif //GL_ATTRIB_STACK_DEPTH
#ifndef GL_CLIENT_ATTRIB_STACK_DEPTH
#define GL_CLIENT_ATTRIB_STACK_DEPTH 0x0BB1
#endif //GL_CLIENT_ATTRIB_STACK_DEPTH
#ifndef GL_ALPHA_TEST
#define GL_ALPHA_TEST 0x0BC0
#endif //GL_ALPHA_TEST
#ifndef GL_ALPHA_TEST_FUNC
#define GL_ALPHA_TEST_FUNC 0x0BC1
#endif //GL_ALPHA_TEST_FUNC
#ifndef GL_ALPHA_TEST_REF
#define GL_ALPHA_TEST_REF 0x0BC2
#endif //GL_ALPHA_TEST_REF
#ifndef GL_DITHER
#define GL_DITHER 0x0BD0
#endif //GL_DITHER
#ifndef GL_BLEND_DST
#define GL_BLEND_DST 0x0BE0
#endif //GL_BLEND_DST
#ifndef GL_BLEND_SRC
#define GL_BLEND_SRC 0x0BE1
#endif //GL_BLEND_SRC
#ifndef GL_BLEND
#define GL_BLEND 0x0BE2
#endif //GL_BLEND
#ifndef GL_LOGIC_OP_MODE
#define GL_LOGIC_OP_MODE 0x0BF0
#endif //GL_LOGIC_OP_MODE
#ifndef GL_LOGIC_OP
#define GL_LOGIC_OP 0x0BF1
#endif //GL_LOGIC_OP
#ifndef GL_INDEX_LOGIC_OP
#define GL_INDEX_LOGIC_OP 0x0BF1
#endif //GL_INDEX_LOGIC_OP
#ifndef GL_COLOR_LOGIC_OP
#define GL_COLOR_LOGIC_OP 0x0BF2
#endif //GL_COLOR_LOGIC_OP
#ifndef GL_AUX_BUFFERS
#define GL_AUX_BUFFERS 0x0C00
#endif //GL_AUX_BUFFERS
#ifndef GL_DRAW_BUFFER
#define GL_DRAW_BUFFER 0x0C01
#endif //GL_DRAW_BUFFER
#ifndef GL_READ_BUFFER
#define GL_READ_BUFFER 0x0C02
#endif //GL_READ_BUFFER
#ifndef GL_SCISSOR_BOX
#define GL_SCISSOR_BOX 0x0C10
#endif //GL_SCISSOR_BOX
#ifndef GL_SCISSOR_TEST
#define GL_SCISSOR_TEST 0x0C11
#endif //GL_SCISSOR_TEST
#ifndef GL_INDEX_CLEAR_VALUE
#define GL_INDEX_CLEAR_VALUE 0x0C20
#endif //GL_INDEX_CLEAR_VALUE
#ifndef GL_INDEX_WRITEMASK
#define GL_INDEX_WRITEMASK 0x0C21
#endif //GL_INDEX_WRITEMASK
#ifndef GL_COLOR_CLEAR_VALUE
#define GL_COLOR_CLEAR_VALUE 0x0C22
#endif //GL_COLOR_CLEAR_VALUE
#ifndef GL_COLOR_WRITEMASK
#define GL_COLOR_WRITEMASK 0x0C23
#endif //GL_COLOR_WRITEMASK
#ifndef GL_INDEX_MODE
#define GL_INDEX_MODE 0x0C30
#endif //GL_INDEX_MODE
#ifndef GL_RGBA_MODE
#define GL_RGBA_MODE 0x0C31
#endif //GL_RGBA_MODE
#ifndef GL_DOUBLEBUFFER
#define GL_DOUBLEBUFFER 0x0C32
#endif //GL_DOUBLEBUFFER
#ifndef GL_STEREO
#define GL_STEREO 0x0C33
#endif //GL_STEREO
#ifndef GL_RENDER_MODE
#define GL_RENDER_MODE 0x0C40
#endif //GL_RENDER_MODE
#ifndef GL_PERSPECTIVE_CORRECTION_HINT
#define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50
#endif //GL_PERSPECTIVE_CORRECTION_HINT
#ifndef GL_POINT_SMOOTH_HINT
#define GL_POINT_SMOOTH_HINT 0x0C51
#endif //GL_POINT_SMOOTH_HINT
#ifndef GL_LINE_SMOOTH_HINT
#define GL_LINE_SMOOTH_HINT 0x0C52
#endif //GL_LINE_SMOOTH_HINT
#ifndef GL_POLYGON_SMOOTH_HINT
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#endif //GL_POLYGON_SMOOTH_HINT
#ifndef GL_FOG_HINT
#define GL_FOG_HINT 0x0C54
#endif //GL_FOG_HINT
#ifndef GL_TEXTURE_GEN_S
#define GL_TEXTURE_GEN_S 0x0C60
#endif //GL_TEXTURE_GEN_S
#ifndef GL_TEXTURE_GEN_T
#define GL_TEXTURE_GEN_T 0x0C61
#endif //GL_TEXTURE_GEN_T
#ifndef GL_TEXTURE_GEN_R
#define GL_TEXTURE_GEN_R 0x0C62
#endif //GL_TEXTURE_GEN_R
#ifndef GL_TEXTURE_GEN_Q
#define GL_TEXTURE_GEN_Q 0x0C63
#endif //GL_TEXTURE_GEN_Q
#ifndef GL_PIXEL_MAP_I_TO_I
#define GL_PIXEL_MAP_I_TO_I 0x0C70
#endif //GL_PIXEL_MAP_I_TO_I
#ifndef GL_PIXEL_MAP_S_TO_S
#define GL_PIXEL_MAP_S_TO_S 0x0C71
#endif //GL_PIXEL_MAP_S_TO_S
#ifndef GL_PIXEL_MAP_I_TO_R
#define GL_PIXEL_MAP_I_TO_R 0x0C72
#endif //GL_PIXEL_MAP_I_TO_R
#ifndef GL_PIXEL_MAP_I_TO_G
#define GL_PIXEL_MAP_I_TO_G 0x0C73
#endif //GL_PIXEL_MAP_I_TO_G
#ifndef GL_PIXEL_MAP_I_TO_B
#define GL_PIXEL_MAP_I_TO_B 0x0C74
#endif //GL_PIXEL_MAP_I_TO_B
#ifndef GL_PIXEL_MAP_I_TO_A
#define GL_PIXEL_MAP_I_TO_A 0x0C75
#endif //GL_PIXEL_MAP_I_TO_A
#ifndef GL_PIXEL_MAP_R_TO_R
#define GL_PIXEL_MAP_R_TO_R 0x0C76
#endif //GL_PIXEL_MAP_R_TO_R
#ifndef GL_PIXEL_MAP_G_TO_G
#define GL_PIXEL_MAP_G_TO_G 0x0C77
#endif //GL_PIXEL_MAP_G_TO_G
#ifndef GL_PIXEL_MAP_B_TO_B
#define GL_PIXEL_MAP_B_TO_B 0x0C78
#endif //GL_PIXEL_MAP_B_TO_B
#ifndef GL_PIXEL_MAP_A_TO_A
#define GL_PIXEL_MAP_A_TO_A 0x0C79
#endif //GL_PIXEL_MAP_A_TO_A
#ifndef GL_PIXEL_MAP_I_TO_I_SIZE
#define GL_PIXEL_MAP_I_TO_I_SIZE 0x0CB0
#endif //GL_PIXEL_MAP_I_TO_I_SIZE
#ifndef GL_PIXEL_MAP_S_TO_S_SIZE
#define GL_PIXEL_MAP_S_TO_S_SIZE 0x0CB1
#endif //GL_PIXEL_MAP_S_TO_S_SIZE
#ifndef GL_PIXEL_MAP_I_TO_R_SIZE
#define GL_PIXEL_MAP_I_TO_R_SIZE 0x0CB2
#endif //GL_PIXEL_MAP_I_TO_R_SIZE
#ifndef GL_PIXEL_MAP_I_TO_G_SIZE
#define GL_PIXEL_MAP_I_TO_G_SIZE 0x0CB3
#endif //GL_PIXEL_MAP_I_TO_G_SIZE
#ifndef GL_PIXEL_MAP_I_TO_B_SIZE
#define GL_PIXEL_MAP_I_TO_B_SIZE 0x0CB4
#endif //GL_PIXEL_MAP_I_TO_B_SIZE
#ifndef GL_PIXEL_MAP_I_TO_A_SIZE
#define GL_PIXEL_MAP_I_TO_A_SIZE 0x0CB5
#endif //GL_PIXEL_MAP_I_TO_A_SIZE
#ifndef GL_PIXEL_MAP_R_TO_R_SIZE
#define GL_PIXEL_MAP_R_TO_R_SIZE 0x0CB6
#endif //GL_PIXEL_MAP_R_TO_R_SIZE
#ifndef GL_PIXEL_MAP_G_TO_G_SIZE
#define GL_PIXEL_MAP_G_TO_G_SIZE 0x0CB7
#endif //GL_PIXEL_MAP_G_TO_G_SIZE
#ifndef GL_PIXEL_MAP_B_TO_B_SIZE
#define GL_PIXEL_MAP_B_TO_B_SIZE 0x0CB8
#endif //GL_PIXEL_MAP_B_TO_B_SIZE
#ifndef GL_PIXEL_MAP_A_TO_A_SIZE
#define GL_PIXEL_MAP_A_TO_A_SIZE 0x0CB9
#endif //GL_PIXEL_MAP_A_TO_A_SIZE
#ifndef GL_UNPACK_SWAP_BYTES
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#endif //GL_UNPACK_SWAP_BYTES
#ifndef GL_UNPACK_LSB_FIRST
#define GL_UNPACK_LSB_FIRST 0x0CF1
#endif //GL_UNPACK_LSB_FIRST
#ifndef GL_UNPACK_ROW_LENGTH
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#endif //GL_UNPACK_ROW_LENGTH
#ifndef GL_UNPACK_SKIP_ROWS
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#endif //GL_UNPACK_SKIP_ROWS
#ifndef GL_UNPACK_SKIP_PIXELS
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#endif //GL_UNPACK_SKIP_PIXELS
#ifndef GL_UNPACK_ALIGNMENT
#define GL_UNPACK_ALIGNMENT 0x0CF5
#endif //GL_UNPACK_ALIGNMENT
#ifndef GL_PACK_SWAP_BYTES
#define GL_PACK_SWAP_BYTES 0x0D00
#endif //GL_PACK_SWAP_BYTES
#ifndef GL_PACK_LSB_FIRST
#define GL_PACK_LSB_FIRST 0x0D01
#endif //GL_PACK_LSB_FIRST
#ifndef GL_PACK_ROW_LENGTH
#define GL_PACK_ROW_LENGTH 0x0D02
#endif //GL_PACK_ROW_LENGTH
#ifndef GL_PACK_SKIP_ROWS
#define GL_PACK_SKIP_ROWS 0x0D03
#endif //GL_PACK_SKIP_ROWS
#ifndef GL_PACK_SKIP_PIXELS
#define GL_PACK_SKIP_PIXELS 0x0D04
#endif //GL_PACK_SKIP_PIXELS
#ifndef GL_PACK_ALIGNMENT
#define GL_PACK_ALIGNMENT 0x0D05
#endif //GL_PACK_ALIGNMENT
#ifndef GL_MAP_COLOR
#define GL_MAP_COLOR 0x0D10
#endif //GL_MAP_COLOR
#ifndef GL_MAP_STENCIL
#define GL_MAP_STENCIL 0x0D11
#endif //GL_MAP_STENCIL
#ifndef GL_INDEX_SHIFT
#define GL_INDEX_SHIFT 0x0D12
#endif //GL_INDEX_SHIFT
#ifndef GL_INDEX_OFFSET
#define GL_INDEX_OFFSET 0x0D13
#endif //GL_INDEX_OFFSET
#ifndef GL_RED_SCALE
#define GL_RED_SCALE 0x0D14
#endif //GL_RED_SCALE
#ifndef GL_RED_BIAS
#define GL_RED_BIAS 0x0D15
#endif //GL_RED_BIAS
#ifndef GL_ZOOM_X
#define GL_ZOOM_X 0x0D16
#endif //GL_ZOOM_X
#ifndef GL_ZOOM_Y
#define GL_ZOOM_Y 0x0D17
#endif //GL_ZOOM_Y
#ifndef GL_GREEN_SCALE
#define GL_GREEN_SCALE 0x0D18
#endif //GL_GREEN_SCALE
#ifndef GL_GREEN_BIAS
#define GL_GREEN_BIAS 0x0D19
#endif //GL_GREEN_BIAS
#ifndef GL_BLUE_SCALE
#define GL_BLUE_SCALE 0x0D1A
#endif //GL_BLUE_SCALE
#ifndef GL_BLUE_BIAS
#define GL_BLUE_BIAS 0x0D1B
#endif //GL_BLUE_BIAS
#ifndef GL_ALPHA_SCALE
#define GL_ALPHA_SCALE 0x0D1C
#endif //GL_ALPHA_SCALE
#ifndef GL_ALPHA_BIAS
#define GL_ALPHA_BIAS 0x0D1D
#endif //GL_ALPHA_BIAS
#ifndef GL_DEPTH_SCALE
#define GL_DEPTH_SCALE 0x0D1E
#endif //GL_DEPTH_SCALE
#ifndef GL_DEPTH_BIAS
#define GL_DEPTH_BIAS 0x0D1F
#endif //GL_DEPTH_BIAS
#ifndef GL_MAX_EVAL_ORDER
#define GL_MAX_EVAL_ORDER 0x0D30
#endif //GL_MAX_EVAL_ORDER
#ifndef GL_MAX_LIGHTS
#define GL_MAX_LIGHTS 0x0D31
#endif //GL_MAX_LIGHTS
#ifndef GL_MAX_CLIP_PLANES
#define GL_MAX_CLIP_PLANES 0x0D32
#endif //GL_MAX_CLIP_PLANES
#ifndef GL_MAX_CLIP_DISTANCES
#define GL_MAX_CLIP_DISTANCES 0x0D32
#endif //GL_MAX_CLIP_DISTANCES
#ifndef GL_MAX_TEXTURE_SIZE
#define GL_MAX_TEXTURE_SIZE 0x0D33
#endif //GL_MAX_TEXTURE_SIZE
#ifndef GL_MAX_PIXEL_MAP_TABLE
#define GL_MAX_PIXEL_MAP_TABLE 0x0D34
#endif //GL_MAX_PIXEL_MAP_TABLE
#ifndef GL_MAX_ATTRIB_STACK_DEPTH
#define GL_MAX_ATTRIB_STACK_DEPTH 0x0D35
#endif //GL_MAX_ATTRIB_STACK_DEPTH
#ifndef GL_MAX_MODELVIEW_STACK_DEPTH
#define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36
#endif //GL_MAX_MODELVIEW_STACK_DEPTH
#ifndef GL_MAX_NAME_STACK_DEPTH
#define GL_MAX_NAME_STACK_DEPTH 0x0D37
#endif //GL_MAX_NAME_STACK_DEPTH
#ifndef GL_MAX_PROJECTION_STACK_DEPTH
#define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38
#endif //GL_MAX_PROJECTION_STACK_DEPTH
#ifndef GL_MAX_TEXTURE_STACK_DEPTH
#define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39
#endif //GL_MAX_TEXTURE_STACK_DEPTH
#ifndef GL_MAX_VIEWPORT_DIMS
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#endif //GL_MAX_VIEWPORT_DIMS
#ifndef GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0x0D3B
#endif //GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
#ifndef GL_SUBPIXEL_BITS
#define GL_SUBPIXEL_BITS 0x0D50
#endif //GL_SUBPIXEL_BITS
#ifndef GL_INDEX_BITS
#define GL_INDEX_BITS 0x0D51
#endif //GL_INDEX_BITS
#ifndef GL_RED_BITS
#define GL_RED_BITS 0x0D52
#endif //GL_RED_BITS
#ifndef GL_GREEN_BITS
#define GL_GREEN_BITS 0x0D53
#endif //GL_GREEN_BITS
#ifndef GL_BLUE_BITS
#define GL_BLUE_BITS 0x0D54
#endif //GL_BLUE_BITS
#ifndef GL_ALPHA_BITS
#define GL_ALPHA_BITS 0x0D55
#endif //GL_ALPHA_BITS
#ifndef GL_DEPTH_BITS
#define GL_DEPTH_BITS 0x0D56
#endif //GL_DEPTH_BITS
#ifndef GL_STENCIL_BITS
#define GL_STENCIL_BITS 0x0D57
#endif //GL_STENCIL_BITS
#ifndef GL_ACCUM_RED_BITS
#define GL_ACCUM_RED_BITS 0x0D58
#endif //GL_ACCUM_RED_BITS
#ifndef GL_ACCUM_GREEN_BITS
#define GL_ACCUM_GREEN_BITS 0x0D59
#endif //GL_ACCUM_GREEN_BITS
#ifndef GL_ACCUM_BLUE_BITS
#define GL_ACCUM_BLUE_BITS 0x0D5A
#endif //GL_ACCUM_BLUE_BITS
#ifndef GL_ACCUM_ALPHA_BITS
#define GL_ACCUM_ALPHA_BITS 0x0D5B
#endif //GL_ACCUM_ALPHA_BITS
#ifndef GL_NAME_STACK_DEPTH
#define GL_NAME_STACK_DEPTH 0x0D70
#endif //GL_NAME_STACK_DEPTH
#ifndef GL_AUTO_NORMAL
#define GL_AUTO_NORMAL 0x0D80
#endif //GL_AUTO_NORMAL
#ifndef GL_MAP1_COLOR_4
#define GL_MAP1_COLOR_4 0x0D90
#endif //GL_MAP1_COLOR_4
#ifndef GL_MAP1_INDEX
#define GL_MAP1_INDEX 0x0D91
#endif //GL_MAP1_INDEX
#ifndef GL_MAP1_NORMAL
#define GL_MAP1_NORMAL 0x0D92
#endif //GL_MAP1_NORMAL
#ifndef GL_MAP1_TEXTURE_COORD_1
#define GL_MAP1_TEXTURE_COORD_1 0x0D93
#endif //GL_MAP1_TEXTURE_COORD_1
#ifndef GL_MAP1_TEXTURE_COORD_2
#define GL_MAP1_TEXTURE_COORD_2 0x0D94
#endif //GL_MAP1_TEXTURE_COORD_2
#ifndef GL_MAP1_TEXTURE_COORD_3
#define GL_MAP1_TEXTURE_COORD_3 0x0D95
#endif //GL_MAP1_TEXTURE_COORD_3
#ifndef GL_MAP1_TEXTURE_COORD_4
#define GL_MAP1_TEXTURE_COORD_4 0x0D96
#endif //GL_MAP1_TEXTURE_COORD_4
#ifndef GL_MAP1_VERTEX_3
#define GL_MAP1_VERTEX_3 0x0D97
#endif //GL_MAP1_VERTEX_3
#ifndef GL_MAP1_VERTEX_4
#define GL_MAP1_VERTEX_4 0x0D98
#endif //GL_MAP1_VERTEX_4
#ifndef GL_MAP2_COLOR_4
#define GL_MAP2_COLOR_4 0x0DB0
#endif //GL_MAP2_COLOR_4
#ifndef GL_MAP2_INDEX
#define GL_MAP2_INDEX 0x0DB1
#endif //GL_MAP2_INDEX
#ifndef GL_MAP2_NORMAL
#define GL_MAP2_NORMAL 0x0DB2
#endif //GL_MAP2_NORMAL
#ifndef GL_MAP2_TEXTURE_COORD_1
#define GL_MAP2_TEXTURE_COORD_1 0x0DB3
#endif //GL_MAP2_TEXTURE_COORD_1
#ifndef GL_MAP2_TEXTURE_COORD_2
#define GL_MAP2_TEXTURE_COORD_2 0x0DB4
#endif //GL_MAP2_TEXTURE_COORD_2
#ifndef GL_MAP2_TEXTURE_COORD_3
#define GL_MAP2_TEXTURE_COORD_3 0x0DB5
#endif //GL_MAP2_TEXTURE_COORD_3
#ifndef GL_MAP2_TEXTURE_COORD_4
#define GL_MAP2_TEXTURE_COORD_4 0x0DB6
#endif //GL_MAP2_TEXTURE_COORD_4
#ifndef GL_MAP2_VERTEX_3
#define GL_MAP2_VERTEX_3 0x0DB7
#endif //GL_MAP2_VERTEX_3
#ifndef GL_MAP2_VERTEX_4
#define GL_MAP2_VERTEX_4 0x0DB8
#endif //GL_MAP2_VERTEX_4
#ifndef GL_MAP1_GRID_DOMAIN
#define GL_MAP1_GRID_DOMAIN 0x0DD0
#endif //GL_MAP1_GRID_DOMAIN
#ifndef GL_MAP1_GRID_SEGMENTS
#define GL_MAP1_GRID_SEGMENTS 0x0DD1
#endif //GL_MAP1_GRID_SEGMENTS
#ifndef GL_MAP2_GRID_DOMAIN
#define GL_MAP2_GRID_DOMAIN 0x0DD2
#endif //GL_MAP2_GRID_DOMAIN
#ifndef GL_MAP2_GRID_SEGMENTS
#define GL_MAP2_GRID_SEGMENTS 0x0DD3
#endif //GL_MAP2_GRID_SEGMENTS
#ifndef GL_TEXTURE_1D
#define GL_TEXTURE_1D 0x0DE0
#endif //GL_TEXTURE_1D
#ifndef GL_TEXTURE_2D
#define GL_TEXTURE_2D 0x0DE1
#endif //GL_TEXTURE_2D
#ifndef GL_FEEDBACK_BUFFER_POINTER
#define GL_FEEDBACK_BUFFER_POINTER 0x0DF0
#endif //GL_FEEDBACK_BUFFER_POINTER
#ifndef GL_FEEDBACK_BUFFER_SIZE
#define GL_FEEDBACK_BUFFER_SIZE 0x0DF1
#endif //GL_FEEDBACK_BUFFER_SIZE
#ifndef GL_FEEDBACK_BUFFER_TYPE
#define GL_FEEDBACK_BUFFER_TYPE 0x0DF2
#endif //GL_FEEDBACK_BUFFER_TYPE
#ifndef GL_SELECTION_BUFFER_POINTER
#define GL_SELECTION_BUFFER_POINTER 0x0DF3
#endif //GL_SELECTION_BUFFER_POINTER
#ifndef GL_SELECTION_BUFFER_SIZE
#define GL_SELECTION_BUFFER_SIZE 0x0DF4
#endif //GL_SELECTION_BUFFER_SIZE
#ifndef GL_TEXTURE_WIDTH
#define GL_TEXTURE_WIDTH 0x1000
#endif //GL_TEXTURE_WIDTH
#ifndef GL_TEXTURE_HEIGHT
#define GL_TEXTURE_HEIGHT 0x1001
#endif //GL_TEXTURE_HEIGHT
#ifndef GL_TEXTURE_COMPONENTS
#define GL_TEXTURE_COMPONENTS 0x1003
#endif //GL_TEXTURE_COMPONENTS
#ifndef GL_TEXTURE_INTERNAL_FORMAT
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#endif //GL_TEXTURE_INTERNAL_FORMAT
#ifndef GL_TEXTURE_BORDER_COLOR
#define GL_TEXTURE_BORDER_COLOR 0x1004
#endif //GL_TEXTURE_BORDER_COLOR
#ifndef GL_TEXTURE_BORDER
#define GL_TEXTURE_BORDER 0x1005
#endif //GL_TEXTURE_BORDER
#ifndef GL_DONT_CARE
#define GL_DONT_CARE 0x1100
#endif //GL_DONT_CARE
#ifndef GL_FASTEST
#define GL_FASTEST 0x1101
#endif //GL_FASTEST
#ifndef GL_NICEST
#define GL_NICEST 0x1102
#endif //GL_NICEST
#ifndef GL_AMBIENT
#define GL_AMBIENT 0x1200
#endif //GL_AMBIENT
#ifndef GL_DIFFUSE
#define GL_DIFFUSE 0x1201
#endif //GL_DIFFUSE
#ifndef GL_SPECULAR
#define GL_SPECULAR 0x1202
#endif //GL_SPECULAR
#ifndef GL_POSITION
#define GL_POSITION 0x1203
#endif //GL_POSITION
#ifndef GL_SPOT_DIRECTION
#define GL_SPOT_DIRECTION 0x1204
#endif //GL_SPOT_DIRECTION
#ifndef GL_SPOT_EXPONENT
#define GL_SPOT_EXPONENT 0x1205
#endif //GL_SPOT_EXPONENT
#ifndef GL_SPOT_CUTOFF
#define GL_SPOT_CUTOFF 0x1206
#endif //GL_SPOT_CUTOFF
#ifndef GL_CONSTANT_ATTENUATION
#define GL_CONSTANT_ATTENUATION 0x1207
#endif //GL_CONSTANT_ATTENUATION
#ifndef GL_LINEAR_ATTENUATION
#define GL_LINEAR_ATTENUATION 0x1208
#endif //GL_LINEAR_ATTENUATION
#ifndef GL_QUADRATIC_ATTENUATION
#define GL_QUADRATIC_ATTENUATION 0x1209
#endif //GL_QUADRATIC_ATTENUATION
#ifndef GL_COMPILE
#define GL_COMPILE 0x1300
#endif //GL_COMPILE
#ifndef GL_COMPILE_AND_EXECUTE
#define GL_COMPILE_AND_EXECUTE 0x1301
#endif //GL_COMPILE_AND_EXECUTE
#ifndef GL_BYTE
#define GL_BYTE 0x1400
#endif //GL_BYTE
#ifndef GL_UNSIGNED_BYTE
#define GL_UNSIGNED_BYTE 0x1401
#endif //GL_UNSIGNED_BYTE
#ifndef GL_SHORT
#define GL_SHORT 0x1402
#endif //GL_SHORT
#ifndef GL_UNSIGNED_SHORT
#define GL_UNSIGNED_SHORT 0x1403
#endif //GL_UNSIGNED_SHORT
#ifndef GL_INT
#define GL_INT 0x1404
#endif //GL_INT
#ifndef GL_UNSIGNED_INT
#define GL_UNSIGNED_INT 0x1405
#endif //GL_UNSIGNED_INT
#ifndef GL_FLOAT
#define GL_FLOAT 0x1406
#endif //GL_FLOAT
#ifndef GL_2_BYTES
#define GL_2_BYTES 0x1407
#endif //GL_2_BYTES
#ifndef GL_3_BYTES
#define GL_3_BYTES 0x1408
#endif //GL_3_BYTES
#ifndef GL_4_BYTES
#define GL_4_BYTES 0x1409
#endif //GL_4_BYTES
#ifndef GL_DOUBLE
#define GL_DOUBLE 0x140A
#endif //GL_DOUBLE
#ifndef GL_HALF_FLOAT
#define GL_HALF_FLOAT 0x140B
#endif //GL_HALF_FLOAT
#ifndef GL_CLEAR
#define GL_CLEAR 0x1500
#endif //GL_CLEAR
#ifndef GL_AND
#define GL_AND 0x1501
#endif //GL_AND
#ifndef GL_AND_REVERSE
#define GL_AND_REVERSE 0x1502
#endif //GL_AND_REVERSE
#ifndef GL_COPY
#define GL_COPY 0x1503
#endif //GL_COPY
#ifndef GL_AND_INVERTED
#define GL_AND_INVERTED 0x1504
#endif //GL_AND_INVERTED
#ifndef GL_NOOP
#define GL_NOOP 0x1505
#endif //GL_NOOP
#ifndef GL_XOR
#define GL_XOR 0x1506
#endif //GL_XOR
#ifndef GL_OR
#define GL_OR 0x1507
#endif //GL_OR
#ifndef GL_NOR
#define GL_NOR 0x1508
#endif //GL_NOR
#ifndef GL_EQUIV
#define GL_EQUIV 0x1509
#endif //GL_EQUIV
#ifndef GL_INVERT
#define GL_INVERT 0x150A
#endif //GL_INVERT
#ifndef GL_OR_REVERSE
#define GL_OR_REVERSE 0x150B
#endif //GL_OR_REVERSE
#ifndef GL_COPY_INVERTED
#define GL_COPY_INVERTED 0x150C
#endif //GL_COPY_INVERTED
#ifndef GL_OR_INVERTED
#define GL_OR_INVERTED 0x150D
#endif //GL_OR_INVERTED
#ifndef GL_NAND
#define GL_NAND 0x150E
#endif //GL_NAND
#ifndef GL_SET
#define GL_SET 0x150F
#endif //GL_SET
#ifndef GL_EMISSION
#define GL_EMISSION 0x1600
#endif //GL_EMISSION
#ifndef GL_SHININESS
#define GL_SHININESS 0x1601
#endif //GL_SHININESS
#ifndef GL_AMBIENT_AND_DIFFUSE
#define GL_AMBIENT_AND_DIFFUSE 0x1602
#endif //GL_AMBIENT_AND_DIFFUSE
#ifndef GL_COLOR_INDEXES
#define GL_COLOR_INDEXES 0x1603
#endif //GL_COLOR_INDEXES
#ifndef GL_MODELVIEW
#define GL_MODELVIEW 0x1700
#endif //GL_MODELVIEW
#ifndef GL_PROJECTION
#define GL_PROJECTION 0x1701
#endif //GL_PROJECTION
#ifndef GL_TEXTURE
#define GL_TEXTURE 0x1702
#endif //GL_TEXTURE
#ifndef GL_COLOR
#define GL_COLOR 0x1800
#endif //GL_COLOR
#ifndef GL_DEPTH
#define GL_DEPTH 0x1801
#endif //GL_DEPTH
#ifndef GL_STENCIL
#define GL_STENCIL 0x1802
#endif //GL_STENCIL
#ifndef GL_COLOR_INDEX
#define GL_COLOR_INDEX 0x1900
#endif //GL_COLOR_INDEX
#ifndef GL_STENCIL_INDEX
#define GL_STENCIL_INDEX 0x1901
#endif //GL_STENCIL_INDEX
#ifndef GL_DEPTH_COMPONENT
#define GL_DEPTH_COMPONENT 0x1902
#endif //GL_DEPTH_COMPONENT
#ifndef GL_RED
#define GL_RED 0x1903
#endif //GL_RED
#ifndef GL_GREEN
#define GL_GREEN 0x1904
#endif //GL_GREEN
#ifndef GL_BLUE
#define GL_BLUE 0x1905
#endif //GL_BLUE
#ifndef GL_ALPHA
#define GL_ALPHA 0x1906
#endif //GL_ALPHA
#ifndef GL_RGB
#define GL_RGB 0x1907
#endif //GL_RGB
#ifndef GL_RGBA
#define GL_RGBA 0x1908
#endif //GL_RGBA
#ifndef GL_LUMINANCE
#define GL_LUMINANCE 0x1909
#endif //GL_LUMINANCE
#ifndef GL_LUMINANCE_ALPHA
#define GL_LUMINANCE_ALPHA 0x190A
#endif //GL_LUMINANCE_ALPHA
#ifndef GL_BITMAP
#define GL_BITMAP 0x1A00
#endif //GL_BITMAP
#ifndef GL_POINT
#define GL_POINT 0x1B00
#endif //GL_POINT
#ifndef GL_LINE
#define GL_LINE 0x1B01
#endif //GL_LINE
#ifndef GL_FILL
#define GL_FILL 0x1B02
#endif //GL_FILL
#ifndef GL_RENDER
#define GL_RENDER 0x1C00
#endif //GL_RENDER
#ifndef GL_FEEDBACK
#define GL_FEEDBACK 0x1C01
#endif //GL_FEEDBACK
#ifndef GL_SELECT
#define GL_SELECT 0x1C02
#endif //GL_SELECT
#ifndef GL_FLAT
#define GL_FLAT 0x1D00
#endif //GL_FLAT
#ifndef GL_SMOOTH
#define GL_SMOOTH 0x1D01
#endif //GL_SMOOTH
#ifndef GL_KEEP
#define GL_KEEP 0x1E00
#endif //GL_KEEP
#ifndef GL_REPLACE
#define GL_REPLACE 0x1E01
#endif //GL_REPLACE
#ifndef GL_INCR
#define GL_INCR 0x1E02
#endif //GL_INCR
#ifndef GL_DECR
#define GL_DECR 0x1E03
#endif //GL_DECR
#ifndef GL_VENDOR
#define GL_VENDOR 0x1F00
#endif //GL_VENDOR
#ifndef GL_RENDERER
#define GL_RENDERER 0x1F01
#endif //GL_RENDERER
#ifndef GL_VERSION
#define GL_VERSION 0x1F02
#endif //GL_VERSION
#ifndef GL_EXTENSIONS
#define GL_EXTENSIONS 0x1F03
#endif //GL_EXTENSIONS
#ifndef GL_S
#define GL_S 0x2000
#endif //GL_S
#ifndef GL_MULTISAMPLE_BIT
#define GL_MULTISAMPLE_BIT 0x20000000
#endif //GL_MULTISAMPLE_BIT
#ifndef GL_T
#define GL_T 0x2001
#endif //GL_T
#ifndef GL_R
#define GL_R 0x2002
#endif //GL_R
#ifndef GL_Q
#define GL_Q 0x2003
#endif //GL_Q
#ifndef GL_MODULATE
#define GL_MODULATE 0x2100
#endif //GL_MODULATE
#ifndef GL_DECAL
#define GL_DECAL 0x2101
#endif //GL_DECAL
#ifndef GL_TEXTURE_ENV_MODE
#define GL_TEXTURE_ENV_MODE 0x2200
#endif //GL_TEXTURE_ENV_MODE
#ifndef GL_TEXTURE_ENV_COLOR
#define GL_TEXTURE_ENV_COLOR 0x2201
#endif //GL_TEXTURE_ENV_COLOR
#ifndef GL_TEXTURE_ENV
#define GL_TEXTURE_ENV 0x2300
#endif //GL_TEXTURE_ENV
#ifndef GL_EYE_LINEAR
#define GL_EYE_LINEAR 0x2400
#endif //GL_EYE_LINEAR
#ifndef GL_OBJECT_LINEAR
#define GL_OBJECT_LINEAR 0x2401
#endif //GL_OBJECT_LINEAR
#ifndef GL_SPHERE_MAP
#define GL_SPHERE_MAP 0x2402
#endif //GL_SPHERE_MAP
#ifndef GL_TEXTURE_GEN_MODE
#define GL_TEXTURE_GEN_MODE 0x2500
#endif //GL_TEXTURE_GEN_MODE
#ifndef GL_OBJECT_PLANE
#define GL_OBJECT_PLANE 0x2501
#endif //GL_OBJECT_PLANE
#ifndef GL_EYE_PLANE
#define GL_EYE_PLANE 0x2502
#endif //GL_EYE_PLANE
#ifndef GL_NEAREST
#define GL_NEAREST 0x2600
#endif //GL_NEAREST
#ifndef GL_LINEAR
#define GL_LINEAR 0x2601
#endif //GL_LINEAR
#ifndef GL_NEAREST_MIPMAP_NEAREST
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#endif //GL_NEAREST_MIPMAP_NEAREST
#ifndef GL_LINEAR_MIPMAP_NEAREST
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#endif //GL_LINEAR_MIPMAP_NEAREST
#ifndef GL_NEAREST_MIPMAP_LINEAR
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#endif //GL_NEAREST_MIPMAP_LINEAR
#ifndef GL_LINEAR_MIPMAP_LINEAR
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#endif //GL_LINEAR_MIPMAP_LINEAR
#ifndef GL_TEXTURE_MAG_FILTER
#define GL_TEXTURE_MAG_FILTER 0x2800
#endif //GL_TEXTURE_MAG_FILTER
#ifndef GL_TEXTURE_MIN_FILTER
#define GL_TEXTURE_MIN_FILTER 0x2801
#endif //GL_TEXTURE_MIN_FILTER
#ifndef GL_TEXTURE_WRAP_S
#define GL_TEXTURE_WRAP_S 0x2802
#endif //GL_TEXTURE_WRAP_S
#ifndef GL_TEXTURE_WRAP_T
#define GL_TEXTURE_WRAP_T 0x2803
#endif //GL_TEXTURE_WRAP_T
#ifndef GL_CLAMP
#define GL_CLAMP 0x2900
#endif //GL_CLAMP
#ifndef GL_REPEAT
#define GL_REPEAT 0x2901
#endif //GL_REPEAT
#ifndef GL_POLYGON_OFFSET_UNITS
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#endif //GL_POLYGON_OFFSET_UNITS
#ifndef GL_POLYGON_OFFSET_POINT
#define GL_POLYGON_OFFSET_POINT 0x2A01
#endif //GL_POLYGON_OFFSET_POINT
#ifndef GL_POLYGON_OFFSET_LINE
#define GL_POLYGON_OFFSET_LINE 0x2A02
#endif //GL_POLYGON_OFFSET_LINE
#ifndef GL_R3_G3_B2
#define GL_R3_G3_B2 0x2A10
#endif //GL_R3_G3_B2
#ifndef GL_V2F
#define GL_V2F 0x2A20
#endif //GL_V2F
#ifndef GL_V3F
#define GL_V3F 0x2A21
#endif //GL_V3F
#ifndef GL_C4UB_V2F
#define GL_C4UB_V2F 0x2A22
#endif //GL_C4UB_V2F
#ifndef GL_C4UB_V3F
#define GL_C4UB_V3F 0x2A23
#endif //GL_C4UB_V3F
#ifndef GL_C3F_V3F
#define GL_C3F_V3F 0x2A24
#endif //GL_C3F_V3F
#ifndef GL_N3F_V3F
#define GL_N3F_V3F 0x2A25
#endif //GL_N3F_V3F
#ifndef GL_C4F_N3F_V3F
#define GL_C4F_N3F_V3F 0x2A26
#endif //GL_C4F_N3F_V3F
#ifndef GL_T2F_V3F
#define GL_T2F_V3F 0x2A27
#endif //GL_T2F_V3F
#ifndef GL_T4F_V4F
#define GL_T4F_V4F 0x2A28
#endif //GL_T4F_V4F
#ifndef GL_T2F_C4UB_V3F
#define GL_T2F_C4UB_V3F 0x2A29
#endif //GL_T2F_C4UB_V3F
#ifndef GL_T2F_C3F_V3F
#define GL_T2F_C3F_V3F 0x2A2A
#endif //GL_T2F_C3F_V3F
#ifndef GL_T2F_N3F_V3F
#define GL_T2F_N3F_V3F 0x2A2B
#endif //GL_T2F_N3F_V3F
#ifndef GL_T2F_C4F_N3F_V3F
#define GL_T2F_C4F_N3F_V3F 0x2A2C
#endif //GL_T2F_C4F_N3F_V3F
#ifndef GL_T4F_C4F_N3F_V4F
#define GL_T4F_C4F_N3F_V4F 0x2A2D
#endif //GL_T4F_C4F_N3F_V4F
#ifndef GL_CLIP_DISTANCE0
#define GL_CLIP_DISTANCE0 0x3000
#endif //GL_CLIP_DISTANCE0
#ifndef GL_CLIP_PLANE0
#define GL_CLIP_PLANE0 0x3000
#endif //GL_CLIP_PLANE0
#ifndef GL_CLIP_PLANE1
#define GL_CLIP_PLANE1 0x3001
#endif //GL_CLIP_PLANE1
#ifndef GL_CLIP_DISTANCE1
#define GL_CLIP_DISTANCE1 0x3001
#endif //GL_CLIP_DISTANCE1
#ifndef GL_CLIP_DISTANCE2
#define GL_CLIP_DISTANCE2 0x3002
#endif //GL_CLIP_DISTANCE2
#ifndef GL_CLIP_PLANE2
#define GL_CLIP_PLANE2 0x3002
#endif //GL_CLIP_PLANE2
#ifndef GL_CLIP_DISTANCE3
#define GL_CLIP_DISTANCE3 0x3003
#endif //GL_CLIP_DISTANCE3
#ifndef GL_CLIP_PLANE3
#define GL_CLIP_PLANE3 0x3003
#endif //GL_CLIP_PLANE3
#ifndef GL_CLIP_PLANE4
#define GL_CLIP_PLANE4 0x3004
#endif //GL_CLIP_PLANE4
#ifndef GL_CLIP_DISTANCE4
#define GL_CLIP_DISTANCE4 0x3004
#endif //GL_CLIP_DISTANCE4
#ifndef GL_CLIP_PLANE5
#define GL_CLIP_PLANE5 0x3005
#endif //GL_CLIP_PLANE5
#ifndef GL_CLIP_DISTANCE5
#define GL_CLIP_DISTANCE5 0x3005
#endif //GL_CLIP_DISTANCE5
#ifndef GL_CLIP_DISTANCE6
#define GL_CLIP_DISTANCE6 0x3006
#endif //GL_CLIP_DISTANCE6
#ifndef GL_CLIP_DISTANCE7
#define GL_CLIP_DISTANCE7 0x3007
#endif //GL_CLIP_DISTANCE7
#ifndef GL_LIGHT0
#define GL_LIGHT0 0x4000
#endif //GL_LIGHT0
#ifndef GL_LIGHT1
#define GL_LIGHT1 0x4001
#endif //GL_LIGHT1
#ifndef GL_LIGHT2
#define GL_LIGHT2 0x4002
#endif //GL_LIGHT2
#ifndef GL_LIGHT3
#define GL_LIGHT3 0x4003
#endif //GL_LIGHT3
#ifndef GL_LIGHT4
#define GL_LIGHT4 0x4004
#endif //GL_LIGHT4
#ifndef GL_LIGHT5
#define GL_LIGHT5 0x4005
#endif //GL_LIGHT5
#ifndef GL_LIGHT6
#define GL_LIGHT6 0x4006
#endif //GL_LIGHT6
#ifndef GL_LIGHT7
#define GL_LIGHT7 0x4007
#endif //GL_LIGHT7
#ifndef GL_CONSTANT_COLOR
#define GL_CONSTANT_COLOR 0x8001
#endif //GL_CONSTANT_COLOR
#ifndef GL_ONE_MINUS_CONSTANT_COLOR
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#endif //GL_ONE_MINUS_CONSTANT_COLOR
#ifndef GL_CONSTANT_ALPHA
#define GL_CONSTANT_ALPHA 0x8003
#endif //GL_CONSTANT_ALPHA
#ifndef GL_ONE_MINUS_CONSTANT_ALPHA
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#endif //GL_ONE_MINUS_CONSTANT_ALPHA
#ifndef GL_FUNC_ADD
#define GL_FUNC_ADD 0x8006
#endif //GL_FUNC_ADD
#ifndef GL_MIN
#define GL_MIN 0x8007
#endif //GL_MIN
#ifndef GL_MAX
#define GL_MAX 0x8008
#endif //GL_MAX
#ifndef GL_BLEND_EQUATION_RGB
#define GL_BLEND_EQUATION_RGB 0x8009
#endif //GL_BLEND_EQUATION_RGB
#ifndef GL_FUNC_SUBTRACT
#define GL_FUNC_SUBTRACT 0x800A
#endif //GL_FUNC_SUBTRACT
#ifndef GL_FUNC_REVERSE_SUBTRACT
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#endif //GL_FUNC_REVERSE_SUBTRACT
#ifndef GL_UNSIGNED_BYTE_3_3_2
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#endif //GL_UNSIGNED_BYTE_3_3_2
#ifndef GL_UNSIGNED_SHORT_4_4_4_4
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#endif //GL_UNSIGNED_SHORT_4_4_4_4
#ifndef GL_UNSIGNED_SHORT_5_5_5_1
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#endif //GL_UNSIGNED_SHORT_5_5_5_1
#ifndef GL_UNSIGNED_INT_8_8_8_8
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#endif //GL_UNSIGNED_INT_8_8_8_8
#ifndef GL_UNSIGNED_INT_10_10_10_2
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#endif //GL_UNSIGNED_INT_10_10_10_2
#ifndef GL_POLYGON_OFFSET_FILL
#define GL_POLYGON_OFFSET_FILL 0x8037
#endif //GL_POLYGON_OFFSET_FILL
#ifndef GL_POLYGON_OFFSET_FACTOR
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#endif //GL_POLYGON_OFFSET_FACTOR
#ifndef GL_RESCALE_NORMAL
#define GL_RESCALE_NORMAL 0x803A
#endif //GL_RESCALE_NORMAL
#ifndef GL_ALPHA4
#define GL_ALPHA4 0x803B
#endif //GL_ALPHA4
#ifndef GL_ALPHA8
#define GL_ALPHA8 0x803C
#endif //GL_ALPHA8
#ifndef GL_ALPHA12
#define GL_ALPHA12 0x803D
#endif //GL_ALPHA12
#ifndef GL_ALPHA16
#define GL_ALPHA16 0x803E
#endif //GL_ALPHA16
#ifndef GL_LUMINANCE4
#define GL_LUMINANCE4 0x803F
#endif //GL_LUMINANCE4
#ifndef GL_LUMINANCE8
#define GL_LUMINANCE8 0x8040
#endif //GL_LUMINANCE8
#ifndef GL_LUMINANCE12
#define GL_LUMINANCE12 0x8041
#endif //GL_LUMINANCE12
#ifndef GL_LUMINANCE16
#define GL_LUMINANCE16 0x8042
#endif //GL_LUMINANCE16
#ifndef GL_LUMINANCE4_ALPHA4
#define GL_LUMINANCE4_ALPHA4 0x8043
#endif //GL_LUMINANCE4_ALPHA4
#ifndef GL_LUMINANCE6_ALPHA2
#define GL_LUMINANCE6_ALPHA2 0x8044
#endif //GL_LUMINANCE6_ALPHA2
#ifndef GL_LUMINANCE8_ALPHA8
#define GL_LUMINANCE8_ALPHA8 0x8045
#endif //GL_LUMINANCE8_ALPHA8
#ifndef GL_LUMINANCE12_ALPHA4
#define GL_LUMINANCE12_ALPHA4 0x8046
#endif //GL_LUMINANCE12_ALPHA4
#ifndef GL_LUMINANCE12_ALPHA12
#define GL_LUMINANCE12_ALPHA12 0x8047
#endif //GL_LUMINANCE12_ALPHA12
#ifndef GL_LUMINANCE16_ALPHA16
#define GL_LUMINANCE16_ALPHA16 0x8048
#endif //GL_LUMINANCE16_ALPHA16
#ifndef GL_INTENSITY
#define GL_INTENSITY 0x8049
#endif //GL_INTENSITY
#ifndef GL_INTENSITY4
#define GL_INTENSITY4 0x804A
#endif //GL_INTENSITY4
#ifndef GL_INTENSITY8
#define GL_INTENSITY8 0x804B
#endif //GL_INTENSITY8
#ifndef GL_INTENSITY12
#define GL_INTENSITY12 0x804C
#endif //GL_INTENSITY12
#ifndef GL_INTENSITY16
#define GL_INTENSITY16 0x804D
#endif //GL_INTENSITY16
#ifndef GL_RGB4
#define GL_RGB4 0x804F
#endif //GL_RGB4
#ifndef GL_RGB5
#define GL_RGB5 0x8050
#endif //GL_RGB5
#ifndef GL_RGB8
#define GL_RGB8 0x8051
#endif //GL_RGB8
#ifndef GL_RGB10
#define GL_RGB10 0x8052
#endif //GL_RGB10
#ifndef GL_RGB12
#define GL_RGB12 0x8053
#endif //GL_RGB12
#ifndef GL_RGB16
#define GL_RGB16 0x8054
#endif //GL_RGB16
#ifndef GL_RGBA2
#define GL_RGBA2 0x8055
#endif //GL_RGBA2
#ifndef GL_RGBA4
#define GL_RGBA4 0x8056
#endif //GL_RGBA4
#ifndef GL_RGB5_A1
#define GL_RGB5_A1 0x8057
#endif //GL_RGB5_A1
#ifndef GL_RGBA8
#define GL_RGBA8 0x8058
#endif //GL_RGBA8
#ifndef GL_RGB10_A2
#define GL_RGB10_A2 0x8059
#endif //GL_RGB10_A2
#ifndef GL_RGBA12
#define GL_RGBA12 0x805A
#endif //GL_RGBA12
#ifndef GL_RGBA16
#define GL_RGBA16 0x805B
#endif //GL_RGBA16
#ifndef GL_TEXTURE_RED_SIZE
#define GL_TEXTURE_RED_SIZE 0x805C
#endif //GL_TEXTURE_RED_SIZE
#ifndef GL_TEXTURE_GREEN_SIZE
#define GL_TEXTURE_GREEN_SIZE 0x805D
#endif //GL_TEXTURE_GREEN_SIZE
#ifndef GL_TEXTURE_BLUE_SIZE
#define GL_TEXTURE_BLUE_SIZE 0x805E
#endif //GL_TEXTURE_BLUE_SIZE
#ifndef GL_TEXTURE_ALPHA_SIZE
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#endif //GL_TEXTURE_ALPHA_SIZE
#ifndef GL_TEXTURE_LUMINANCE_SIZE
#define GL_TEXTURE_LUMINANCE_SIZE 0x8060
#endif //GL_TEXTURE_LUMINANCE_SIZE
#ifndef GL_TEXTURE_INTENSITY_SIZE
#define GL_TEXTURE_INTENSITY_SIZE 0x8061
#endif //GL_TEXTURE_INTENSITY_SIZE
#ifndef GL_PROXY_TEXTURE_1D
#define GL_PROXY_TEXTURE_1D 0x8063
#endif //GL_PROXY_TEXTURE_1D
#ifndef GL_PROXY_TEXTURE_2D
#define GL_PROXY_TEXTURE_2D 0x8064
#endif //GL_PROXY_TEXTURE_2D
#ifndef GL_TEXTURE_PRIORITY
#define GL_TEXTURE_PRIORITY 0x8066
#endif //GL_TEXTURE_PRIORITY
#ifndef GL_TEXTURE_RESIDENT
#define GL_TEXTURE_RESIDENT 0x8067
#endif //GL_TEXTURE_RESIDENT
#ifndef GL_TEXTURE_BINDING_1D
#define GL_TEXTURE_BINDING_1D 0x8068
#endif //GL_TEXTURE_BINDING_1D
#ifndef GL_TEXTURE_BINDING_2D
#define GL_TEXTURE_BINDING_2D 0x8069
#endif //GL_TEXTURE_BINDING_2D
#ifndef GL_TEXTURE_BINDING_3D
#define GL_TEXTURE_BINDING_3D 0x806A
#endif //GL_TEXTURE_BINDING_3D
#ifndef GL_PACK_SKIP_IMAGES
#define GL_PACK_SKIP_IMAGES 0x806B
#endif //GL_PACK_SKIP_IMAGES
#ifndef GL_PACK_IMAGE_HEIGHT
#define GL_PACK_IMAGE_HEIGHT 0x806C
#endif //GL_PACK_IMAGE_HEIGHT
#ifndef GL_UNPACK_SKIP_IMAGES
#define GL_UNPACK_SKIP_IMAGES 0x806D
#endif //GL_UNPACK_SKIP_IMAGES
#ifndef GL_UNPACK_IMAGE_HEIGHT
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#endif //GL_UNPACK_IMAGE_HEIGHT
#ifndef GL_TEXTURE_3D
#define GL_TEXTURE_3D 0x806F
#endif //GL_TEXTURE_3D
#ifndef GL_PROXY_TEXTURE_3D
#define GL_PROXY_TEXTURE_3D 0x8070
#endif //GL_PROXY_TEXTURE_3D
#ifndef GL_TEXTURE_DEPTH
#define GL_TEXTURE_DEPTH 0x8071
#endif //GL_TEXTURE_DEPTH
#ifndef GL_TEXTURE_WRAP_R
#define GL_TEXTURE_WRAP_R 0x8072
#endif //GL_TEXTURE_WRAP_R
#ifndef GL_MAX_3D_TEXTURE_SIZE
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#endif //GL_MAX_3D_TEXTURE_SIZE
#ifndef GL_VERTEX_ARRAY
#define GL_VERTEX_ARRAY 0x8074
#endif //GL_VERTEX_ARRAY
#ifndef GL_NORMAL_ARRAY
#define GL_NORMAL_ARRAY 0x8075
#endif //GL_NORMAL_ARRAY
#ifndef GL_COLOR_ARRAY
#define GL_COLOR_ARRAY 0x8076
#endif //GL_COLOR_ARRAY
#ifndef GL_INDEX_ARRAY
#define GL_INDEX_ARRAY 0x8077
#endif //GL_INDEX_ARRAY
#ifndef GL_TEXTURE_COORD_ARRAY
#define GL_TEXTURE_COORD_ARRAY 0x8078
#endif //GL_TEXTURE_COORD_ARRAY
#ifndef GL_EDGE_FLAG_ARRAY
#define GL_EDGE_FLAG_ARRAY 0x8079
#endif //GL_EDGE_FLAG_ARRAY
#ifndef GL_VERTEX_ARRAY_SIZE
#define GL_VERTEX_ARRAY_SIZE 0x807A
#endif //GL_VERTEX_ARRAY_SIZE
#ifndef GL_VERTEX_ARRAY_TYPE
#define GL_VERTEX_ARRAY_TYPE 0x807B
#endif //GL_VERTEX_ARRAY_TYPE
#ifndef GL_VERTEX_ARRAY_STRIDE
#define GL_VERTEX_ARRAY_STRIDE 0x807C
#endif //GL_VERTEX_ARRAY_STRIDE
#ifndef GL_NORMAL_ARRAY_TYPE
#define GL_NORMAL_ARRAY_TYPE 0x807E
#endif //GL_NORMAL_ARRAY_TYPE
#ifndef GL_NORMAL_ARRAY_STRIDE
#define GL_NORMAL_ARRAY_STRIDE 0x807F
#endif //GL_NORMAL_ARRAY_STRIDE
#ifndef GL_COLOR_ARRAY_SIZE
#define GL_COLOR_ARRAY_SIZE 0x8081
#endif //GL_COLOR_ARRAY_SIZE
#ifndef GL_COLOR_ARRAY_TYPE
#define GL_COLOR_ARRAY_TYPE 0x8082
#endif //GL_COLOR_ARRAY_TYPE
#ifndef GL_COLOR_ARRAY_STRIDE
#define GL_COLOR_ARRAY_STRIDE 0x8083
#endif //GL_COLOR_ARRAY_STRIDE
#ifndef GL_INDEX_ARRAY_TYPE
#define GL_INDEX_ARRAY_TYPE 0x8085
#endif //GL_INDEX_ARRAY_TYPE
#ifndef GL_INDEX_ARRAY_STRIDE
#define GL_INDEX_ARRAY_STRIDE 0x8086
#endif //GL_INDEX_ARRAY_STRIDE
#ifndef GL_TEXTURE_COORD_ARRAY_SIZE
#define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088
#endif //GL_TEXTURE_COORD_ARRAY_SIZE
#ifndef GL_TEXTURE_COORD_ARRAY_TYPE
#define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089
#endif //GL_TEXTURE_COORD_ARRAY_TYPE
#ifndef GL_TEXTURE_COORD_ARRAY_STRIDE
#define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A
#endif //GL_TEXTURE_COORD_ARRAY_STRIDE
#ifndef GL_EDGE_FLAG_ARRAY_STRIDE
#define GL_EDGE_FLAG_ARRAY_STRIDE 0x808C
#endif //GL_EDGE_FLAG_ARRAY_STRIDE
#ifndef GL_VERTEX_ARRAY_POINTER
#define GL_VERTEX_ARRAY_POINTER 0x808E
#endif //GL_VERTEX_ARRAY_POINTER
#ifndef GL_NORMAL_ARRAY_POINTER
#define GL_NORMAL_ARRAY_POINTER 0x808F
#endif //GL_NORMAL_ARRAY_POINTER
#ifndef GL_COLOR_ARRAY_POINTER
#define GL_COLOR_ARRAY_POINTER 0x8090
#endif //GL_COLOR_ARRAY_POINTER
#ifndef GL_INDEX_ARRAY_POINTER
#define GL_INDEX_ARRAY_POINTER 0x8091
#endif //GL_INDEX_ARRAY_POINTER
#ifndef GL_TEXTURE_COORD_ARRAY_POINTER
#define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092
#endif //GL_TEXTURE_COORD_ARRAY_POINTER
#ifndef GL_EDGE_FLAG_ARRAY_POINTER
#define GL_EDGE_FLAG_ARRAY_POINTER 0x8093
#endif //GL_EDGE_FLAG_ARRAY_POINTER
#ifndef GL_MULTISAMPLE
#define GL_MULTISAMPLE 0x809D
#endif //GL_MULTISAMPLE
#ifndef GL_SAMPLE_ALPHA_TO_COVERAGE
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#endif //GL_SAMPLE_ALPHA_TO_COVERAGE
#ifndef GL_SAMPLE_ALPHA_TO_ONE
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#endif //GL_SAMPLE_ALPHA_TO_ONE
#ifndef GL_SAMPLE_COVERAGE
#define GL_SAMPLE_COVERAGE 0x80A0
#endif //GL_SAMPLE_COVERAGE
#ifndef GL_SAMPLE_BUFFERS
#define GL_SAMPLE_BUFFERS 0x80A8
#endif //GL_SAMPLE_BUFFERS
#ifndef GL_SAMPLES
#define GL_SAMPLES 0x80A9
#endif //GL_SAMPLES
#ifndef GL_SAMPLE_COVERAGE_VALUE
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#endif //GL_SAMPLE_COVERAGE_VALUE
#ifndef GL_SAMPLE_COVERAGE_INVERT
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#endif //GL_SAMPLE_COVERAGE_INVERT
#ifndef GL_BLEND_DST_RGB
#define GL_BLEND_DST_RGB 0x80C8
#endif //GL_BLEND_DST_RGB
#ifndef GL_BLEND_SRC_RGB
#define GL_BLEND_SRC_RGB 0x80C9
#endif //GL_BLEND_SRC_RGB
#ifndef GL_BLEND_DST_ALPHA
#define GL_BLEND_DST_ALPHA 0x80CA
#endif //GL_BLEND_DST_ALPHA
#ifndef GL_BLEND_SRC_ALPHA
#define GL_BLEND_SRC_ALPHA 0x80CB
#endif //GL_BLEND_SRC_ALPHA
#ifndef GL_BGR
#define GL_BGR 0x80E0
#endif //GL_BGR
#ifndef GL_BGRA
#define GL_BGRA 0x80E1
#endif //GL_BGRA
#ifndef GL_MAX_ELEMENTS_VERTICES
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#endif //GL_MAX_ELEMENTS_VERTICES
#ifndef GL_MAX_ELEMENTS_INDICES
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#endif //GL_MAX_ELEMENTS_INDICES
#ifndef GL_POINT_SIZE_MIN
#define GL_POINT_SIZE_MIN 0x8126
#endif //GL_POINT_SIZE_MIN
#ifndef GL_POINT_SIZE_MAX
#define GL_POINT_SIZE_MAX 0x8127
#endif //GL_POINT_SIZE_MAX
#ifndef GL_POINT_FADE_THRESHOLD_SIZE
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#endif //GL_POINT_FADE_THRESHOLD_SIZE
#ifndef GL_POINT_DISTANCE_ATTENUATION
#define GL_POINT_DISTANCE_ATTENUATION 0x8129
#endif //GL_POINT_DISTANCE_ATTENUATION
#ifndef GL_CLAMP_TO_BORDER
#define GL_CLAMP_TO_BORDER 0x812D
#endif //GL_CLAMP_TO_BORDER
#ifndef GL_CLAMP_TO_EDGE
#define GL_CLAMP_TO_EDGE 0x812F
#endif //GL_CLAMP_TO_EDGE
#ifndef GL_TEXTURE_MIN_LOD
#define GL_TEXTURE_MIN_LOD 0x813A
#endif //GL_TEXTURE_MIN_LOD
#ifndef GL_TEXTURE_MAX_LOD
#define GL_TEXTURE_MAX_LOD 0x813B
#endif //GL_TEXTURE_MAX_LOD
#ifndef GL_TEXTURE_BASE_LEVEL
#define GL_TEXTURE_BASE_LEVEL 0x813C
#endif //GL_TEXTURE_BASE_LEVEL
#ifndef GL_TEXTURE_MAX_LEVEL
#define GL_TEXTURE_MAX_LEVEL 0x813D
#endif //GL_TEXTURE_MAX_LEVEL
#ifndef GL_GENERATE_MIPMAP
#define GL_GENERATE_MIPMAP 0x8191
#endif //GL_GENERATE_MIPMAP
#ifndef GL_GENERATE_MIPMAP_HINT
#define GL_GENERATE_MIPMAP_HINT 0x8192
#endif //GL_GENERATE_MIPMAP_HINT
#ifndef GL_DEPTH_COMPONENT16
#define GL_DEPTH_COMPONENT16 0x81A5
#endif //GL_DEPTH_COMPONENT16
#ifndef GL_DEPTH_COMPONENT24
#define GL_DEPTH_COMPONENT24 0x81A6
#endif //GL_DEPTH_COMPONENT24
#ifndef GL_DEPTH_COMPONENT32
#define GL_DEPTH_COMPONENT32 0x81A7
#endif //GL_DEPTH_COMPONENT32
#ifndef GL_LIGHT_MODEL_COLOR_CONTROL
#define GL_LIGHT_MODEL_COLOR_CONTROL 0x81F8
#endif //GL_LIGHT_MODEL_COLOR_CONTROL
#ifndef GL_SINGLE_COLOR
#define GL_SINGLE_COLOR 0x81F9
#endif //GL_SINGLE_COLOR
#ifndef GL_SEPARATE_SPECULAR_COLOR
#define GL_SEPARATE_SPECULAR_COLOR 0x81FA
#endif //GL_SEPARATE_SPECULAR_COLOR
#ifndef GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#endif //GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
#ifndef GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#endif //GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#endif //GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#endif //GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#endif //GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#endif //GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#endif //GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#endif //GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
#ifndef GL_FRAMEBUFFER_DEFAULT
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#endif //GL_FRAMEBUFFER_DEFAULT
#ifndef GL_FRAMEBUFFER_UNDEFINED
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#endif //GL_FRAMEBUFFER_UNDEFINED
#ifndef GL_DEPTH_STENCIL_ATTACHMENT
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#endif //GL_DEPTH_STENCIL_ATTACHMENT
#ifndef GL_MAJOR_VERSION
#define GL_MAJOR_VERSION 0x821B
#endif //GL_MAJOR_VERSION
#ifndef GL_MINOR_VERSION
#define GL_MINOR_VERSION 0x821C
#endif //GL_MINOR_VERSION
#ifndef GL_NUM_EXTENSIONS
#define GL_NUM_EXTENSIONS 0x821D
#endif //GL_NUM_EXTENSIONS
#ifndef GL_CONTEXT_FLAGS
#define GL_CONTEXT_FLAGS 0x821E
#endif //GL_CONTEXT_FLAGS
#ifndef GL_COMPRESSED_RED
#define GL_COMPRESSED_RED 0x8225
#endif //GL_COMPRESSED_RED
#ifndef GL_COMPRESSED_RG
#define GL_COMPRESSED_RG 0x8226
#endif //GL_COMPRESSED_RG
#ifndef GL_RG
#define GL_RG 0x8227
#endif //GL_RG
#ifndef GL_RG_INTEGER
#define GL_RG_INTEGER 0x8228
#endif //GL_RG_INTEGER
#ifndef GL_R8
#define GL_R8 0x8229
#endif //GL_R8
#ifndef GL_R16
#define GL_R16 0x822A
#endif //GL_R16
#ifndef GL_RG8
#define GL_RG8 0x822B
#endif //GL_RG8
#ifndef GL_RG16
#define GL_RG16 0x822C
#endif //GL_RG16
#ifndef GL_R16F
#define GL_R16F 0x822D
#endif //GL_R16F
#ifndef GL_R32F
#define GL_R32F 0x822E
#endif //GL_R32F
#ifndef GL_RG16F
#define GL_RG16F 0x822F
#endif //GL_RG16F
#ifndef GL_RG32F
#define GL_RG32F 0x8230
#endif //GL_RG32F
#ifndef GL_R8I
#define GL_R8I 0x8231
#endif //GL_R8I
#ifndef GL_R8UI
#define GL_R8UI 0x8232
#endif //GL_R8UI
#ifndef GL_R16I
#define GL_R16I 0x8233
#endif //GL_R16I
#ifndef GL_R16UI
#define GL_R16UI 0x8234
#endif //GL_R16UI
#ifndef GL_R32I
#define GL_R32I 0x8235
#endif //GL_R32I
#ifndef GL_R32UI
#define GL_R32UI 0x8236
#endif //GL_R32UI
#ifndef GL_RG8I
#define GL_RG8I 0x8237
#endif //GL_RG8I
#ifndef GL_RG8UI
#define GL_RG8UI 0x8238
#endif //GL_RG8UI
#ifndef GL_RG16I
#define GL_RG16I 0x8239
#endif //GL_RG16I
#ifndef GL_RG16UI
#define GL_RG16UI 0x823A
#endif //GL_RG16UI
#ifndef GL_RG32I
#define GL_RG32I 0x823B
#endif //GL_RG32I
#ifndef GL_RG32UI
#define GL_RG32UI 0x823C
#endif //GL_RG32UI
#ifndef GL_UNSIGNED_BYTE_2_3_3_REV
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#endif //GL_UNSIGNED_BYTE_2_3_3_REV
#ifndef GL_UNSIGNED_SHORT_5_6_5
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#endif //GL_UNSIGNED_SHORT_5_6_5
#ifndef GL_UNSIGNED_SHORT_5_6_5_REV
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#endif //GL_UNSIGNED_SHORT_5_6_5_REV
#ifndef GL_UNSIGNED_SHORT_4_4_4_4_REV
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#endif //GL_UNSIGNED_SHORT_4_4_4_4_REV
#ifndef GL_UNSIGNED_SHORT_1_5_5_5_REV
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#endif //GL_UNSIGNED_SHORT_1_5_5_5_REV
#ifndef GL_UNSIGNED_INT_8_8_8_8_REV
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#endif //GL_UNSIGNED_INT_8_8_8_8_REV
#ifndef GL_UNSIGNED_INT_2_10_10_10_REV
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#endif //GL_UNSIGNED_INT_2_10_10_10_REV
#ifndef GL_MIRRORED_REPEAT
#define GL_MIRRORED_REPEAT 0x8370
#endif //GL_MIRRORED_REPEAT
#ifndef GL_FOG_COORD_SRC
#define GL_FOG_COORD_SRC 0x8450
#endif //GL_FOG_COORD_SRC
#ifndef GL_FOG_COORDINATE_SOURCE
#define GL_FOG_COORDINATE_SOURCE 0x8450
#endif //GL_FOG_COORDINATE_SOURCE
#ifndef GL_FOG_COORDINATE
#define GL_FOG_COORDINATE 0x8451
#endif //GL_FOG_COORDINATE
#ifndef GL_FOG_COORD
#define GL_FOG_COORD 0x8451
#endif //GL_FOG_COORD
#ifndef GL_FRAGMENT_DEPTH
#define GL_FRAGMENT_DEPTH 0x8452
#endif //GL_FRAGMENT_DEPTH
#ifndef GL_CURRENT_FOG_COORD
#define GL_CURRENT_FOG_COORD 0x8453
#endif //GL_CURRENT_FOG_COORD
#ifndef GL_CURRENT_FOG_COORDINATE
#define GL_CURRENT_FOG_COORDINATE 0x8453
#endif //GL_CURRENT_FOG_COORDINATE
#ifndef GL_FOG_COORDINATE_ARRAY_TYPE
#define GL_FOG_COORDINATE_ARRAY_TYPE 0x8454
#endif //GL_FOG_COORDINATE_ARRAY_TYPE
#ifndef GL_FOG_COORD_ARRAY_TYPE
#define GL_FOG_COORD_ARRAY_TYPE 0x8454
#endif //GL_FOG_COORD_ARRAY_TYPE
#ifndef GL_FOG_COORD_ARRAY_STRIDE
#define GL_FOG_COORD_ARRAY_STRIDE 0x8455
#endif //GL_FOG_COORD_ARRAY_STRIDE
#ifndef GL_FOG_COORDINATE_ARRAY_STRIDE
#define GL_FOG_COORDINATE_ARRAY_STRIDE 0x8455
#endif //GL_FOG_COORDINATE_ARRAY_STRIDE
#ifndef GL_FOG_COORD_ARRAY_POINTER
#define GL_FOG_COORD_ARRAY_POINTER 0x8456
#endif //GL_FOG_COORD_ARRAY_POINTER
#ifndef GL_FOG_COORDINATE_ARRAY_POINTER
#define GL_FOG_COORDINATE_ARRAY_POINTER 0x8456
#endif //GL_FOG_COORDINATE_ARRAY_POINTER
#ifndef GL_FOG_COORD_ARRAY
#define GL_FOG_COORD_ARRAY 0x8457
#endif //GL_FOG_COORD_ARRAY
#ifndef GL_FOG_COORDINATE_ARRAY
#define GL_FOG_COORDINATE_ARRAY 0x8457
#endif //GL_FOG_COORDINATE_ARRAY
#ifndef GL_COLOR_SUM
#define GL_COLOR_SUM 0x8458
#endif //GL_COLOR_SUM
#ifndef GL_CURRENT_SECONDARY_COLOR
#define GL_CURRENT_SECONDARY_COLOR 0x8459
#endif //GL_CURRENT_SECONDARY_COLOR
#ifndef GL_SECONDARY_COLOR_ARRAY_SIZE
#define GL_SECONDARY_COLOR_ARRAY_SIZE 0x845A
#endif //GL_SECONDARY_COLOR_ARRAY_SIZE
#ifndef GL_SECONDARY_COLOR_ARRAY_TYPE
#define GL_SECONDARY_COLOR_ARRAY_TYPE 0x845B
#endif //GL_SECONDARY_COLOR_ARRAY_TYPE
#ifndef GL_SECONDARY_COLOR_ARRAY_STRIDE
#define GL_SECONDARY_COLOR_ARRAY_STRIDE 0x845C
#endif //GL_SECONDARY_COLOR_ARRAY_STRIDE
#ifndef GL_SECONDARY_COLOR_ARRAY_POINTER
#define GL_SECONDARY_COLOR_ARRAY_POINTER 0x845D
#endif //GL_SECONDARY_COLOR_ARRAY_POINTER
#ifndef GL_SECONDARY_COLOR_ARRAY
#define GL_SECONDARY_COLOR_ARRAY 0x845E
#endif //GL_SECONDARY_COLOR_ARRAY
#ifndef GL_CURRENT_RASTER_SECONDARY_COLOR
#define GL_CURRENT_RASTER_SECONDARY_COLOR 0x845F
#endif //GL_CURRENT_RASTER_SECONDARY_COLOR
#ifndef GL_ALIASED_POINT_SIZE_RANGE
#define GL_ALIASED_POINT_SIZE_RANGE 0x846D
#endif //GL_ALIASED_POINT_SIZE_RANGE
#ifndef GL_ALIASED_LINE_WIDTH_RANGE
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#endif //GL_ALIASED_LINE_WIDTH_RANGE
#ifndef GL_TEXTURE0
#define GL_TEXTURE0 0x84C0
#endif //GL_TEXTURE0
#ifndef GL_TEXTURE1
#define GL_TEXTURE1 0x84C1
#endif //GL_TEXTURE1
#ifndef GL_TEXTURE2
#define GL_TEXTURE2 0x84C2
#endif //GL_TEXTURE2
#ifndef GL_TEXTURE3
#define GL_TEXTURE3 0x84C3
#endif //GL_TEXTURE3
#ifndef GL_TEXTURE4
#define GL_TEXTURE4 0x84C4
#endif //GL_TEXTURE4
#ifndef GL_TEXTURE5
#define GL_TEXTURE5 0x84C5
#endif //GL_TEXTURE5
#ifndef GL_TEXTURE6
#define GL_TEXTURE6 0x84C6
#endif //GL_TEXTURE6
#ifndef GL_TEXTURE7
#define GL_TEXTURE7 0x84C7
#endif //GL_TEXTURE7
#ifndef GL_TEXTURE8
#define GL_TEXTURE8 0x84C8
#endif //GL_TEXTURE8
#ifndef GL_TEXTURE9
#define GL_TEXTURE9 0x84C9
#endif //GL_TEXTURE9
#ifndef GL_TEXTURE10
#define GL_TEXTURE10 0x84CA
#endif //GL_TEXTURE10
#ifndef GL_TEXTURE11
#define GL_TEXTURE11 0x84CB
#endif //GL_TEXTURE11
#ifndef GL_TEXTURE12
#define GL_TEXTURE12 0x84CC
#endif //GL_TEXTURE12
#ifndef GL_TEXTURE13
#define GL_TEXTURE13 0x84CD
#endif //GL_TEXTURE13
#ifndef GL_TEXTURE14
#define GL_TEXTURE14 0x84CE
#endif //GL_TEXTURE14
#ifndef GL_TEXTURE15
#define GL_TEXTURE15 0x84CF
#endif //GL_TEXTURE15
#ifndef GL_TEXTURE16
#define GL_TEXTURE16 0x84D0
#endif //GL_TEXTURE16
#ifndef GL_TEXTURE17
#define GL_TEXTURE17 0x84D1
#endif //GL_TEXTURE17
#ifndef GL_TEXTURE18
#define GL_TEXTURE18 0x84D2
#endif //GL_TEXTURE18
#ifndef GL_TEXTURE19
#define GL_TEXTURE19 0x84D3
#endif //GL_TEXTURE19
#ifndef GL_TEXTURE20
#define GL_TEXTURE20 0x84D4
#endif //GL_TEXTURE20
#ifndef GL_TEXTURE21
#define GL_TEXTURE21 0x84D5
#endif //GL_TEXTURE21
#ifndef GL_TEXTURE22
#define GL_TEXTURE22 0x84D6
#endif //GL_TEXTURE22
#ifndef GL_TEXTURE23
#define GL_TEXTURE23 0x84D7
#endif //GL_TEXTURE23
#ifndef GL_TEXTURE24
#define GL_TEXTURE24 0x84D8
#endif //GL_TEXTURE24
#ifndef GL_TEXTURE25
#define GL_TEXTURE25 0x84D9
#endif //GL_TEXTURE25
#ifndef GL_TEXTURE26
#define GL_TEXTURE26 0x84DA
#endif //GL_TEXTURE26
#ifndef GL_TEXTURE27
#define GL_TEXTURE27 0x84DB
#endif //GL_TEXTURE27
#ifndef GL_TEXTURE28
#define GL_TEXTURE28 0x84DC
#endif //GL_TEXTURE28
#ifndef GL_TEXTURE29
#define GL_TEXTURE29 0x84DD
#endif //GL_TEXTURE29
#ifndef GL_TEXTURE30
#define GL_TEXTURE30 0x84DE
#endif //GL_TEXTURE30
#ifndef GL_TEXTURE31
#define GL_TEXTURE31 0x84DF
#endif //GL_TEXTURE31
#ifndef GL_ACTIVE_TEXTURE
#define GL_ACTIVE_TEXTURE 0x84E0
#endif //GL_ACTIVE_TEXTURE
#ifndef GL_CLIENT_ACTIVE_TEXTURE
#define GL_CLIENT_ACTIVE_TEXTURE 0x84E1
#endif //GL_CLIENT_ACTIVE_TEXTURE
#ifndef GL_MAX_TEXTURE_UNITS
#define GL_MAX_TEXTURE_UNITS 0x84E2
#endif //GL_MAX_TEXTURE_UNITS
#ifndef GL_TRANSPOSE_MODELVIEW_MATRIX
#define GL_TRANSPOSE_MODELVIEW_MATRIX 0x84E3
#endif //GL_TRANSPOSE_MODELVIEW_MATRIX
#ifndef GL_TRANSPOSE_PROJECTION_MATRIX
#define GL_TRANSPOSE_PROJECTION_MATRIX 0x84E4
#endif //GL_TRANSPOSE_PROJECTION_MATRIX
#ifndef GL_TRANSPOSE_TEXTURE_MATRIX
#define GL_TRANSPOSE_TEXTURE_MATRIX 0x84E5
#endif //GL_TRANSPOSE_TEXTURE_MATRIX
#ifndef GL_TRANSPOSE_COLOR_MATRIX
#define GL_TRANSPOSE_COLOR_MATRIX 0x84E6
#endif //GL_TRANSPOSE_COLOR_MATRIX
#ifndef GL_SUBTRACT
#define GL_SUBTRACT 0x84E7
#endif //GL_SUBTRACT
#ifndef GL_MAX_RENDERBUFFER_SIZE
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#endif //GL_MAX_RENDERBUFFER_SIZE
#ifndef GL_COMPRESSED_ALPHA
#define GL_COMPRESSED_ALPHA 0x84E9
#endif //GL_COMPRESSED_ALPHA
#ifndef GL_COMPRESSED_LUMINANCE
#define GL_COMPRESSED_LUMINANCE 0x84EA
#endif //GL_COMPRESSED_LUMINANCE
#ifndef GL_COMPRESSED_LUMINANCE_ALPHA
#define GL_COMPRESSED_LUMINANCE_ALPHA 0x84EB
#endif //GL_COMPRESSED_LUMINANCE_ALPHA
#ifndef GL_COMPRESSED_INTENSITY
#define GL_COMPRESSED_INTENSITY 0x84EC
#endif //GL_COMPRESSED_INTENSITY
#ifndef GL_COMPRESSED_RGB
#define GL_COMPRESSED_RGB 0x84ED
#endif //GL_COMPRESSED_RGB
#ifndef GL_COMPRESSED_RGBA
#define GL_COMPRESSED_RGBA 0x84EE
#endif //GL_COMPRESSED_RGBA
#ifndef GL_TEXTURE_COMPRESSION_HINT
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#endif //GL_TEXTURE_COMPRESSION_HINT
#ifndef GL_TEXTURE_RECTANGLE
#define GL_TEXTURE_RECTANGLE 0x84F5
#endif //GL_TEXTURE_RECTANGLE
#ifndef GL_TEXTURE_BINDING_RECTANGLE
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#endif //GL_TEXTURE_BINDING_RECTANGLE
#ifndef GL_PROXY_TEXTURE_RECTANGLE
#define GL_PROXY_TEXTURE_RECTANGLE 0x84F7
#endif //GL_PROXY_TEXTURE_RECTANGLE
#ifndef GL_MAX_RECTANGLE_TEXTURE_SIZE
#define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8
#endif //GL_MAX_RECTANGLE_TEXTURE_SIZE
#ifndef GL_DEPTH_STENCIL
#define GL_DEPTH_STENCIL 0x84F9
#endif //GL_DEPTH_STENCIL
#ifndef GL_UNSIGNED_INT_24_8
#define GL_UNSIGNED_INT_24_8 0x84FA
#endif //GL_UNSIGNED_INT_24_8
#ifndef GL_MAX_TEXTURE_LOD_BIAS
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#endif //GL_MAX_TEXTURE_LOD_BIAS
#ifndef GL_TEXTURE_FILTER_CONTROL
#define GL_TEXTURE_FILTER_CONTROL 0x8500
#endif //GL_TEXTURE_FILTER_CONTROL
#ifndef GL_TEXTURE_LOD_BIAS
#define GL_TEXTURE_LOD_BIAS 0x8501
#endif //GL_TEXTURE_LOD_BIAS
#ifndef GL_INCR_WRAP
#define GL_INCR_WRAP 0x8507
#endif //GL_INCR_WRAP
#ifndef GL_DECR_WRAP
#define GL_DECR_WRAP 0x8508
#endif //GL_DECR_WRAP
#ifndef GL_NORMAL_MAP
#define GL_NORMAL_MAP 0x8511
#endif //GL_NORMAL_MAP
#ifndef GL_REFLECTION_MAP
#define GL_REFLECTION_MAP 0x8512
#endif //GL_REFLECTION_MAP
#ifndef GL_TEXTURE_CUBE_MAP
#define GL_TEXTURE_CUBE_MAP 0x8513
#endif //GL_TEXTURE_CUBE_MAP
#ifndef GL_TEXTURE_BINDING_CUBE_MAP
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#endif //GL_TEXTURE_BINDING_CUBE_MAP
#ifndef GL_TEXTURE_CUBE_MAP_POSITIVE_X
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#endif //GL_TEXTURE_CUBE_MAP_POSITIVE_X
#ifndef GL_TEXTURE_CUBE_MAP_NEGATIVE_X
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#endif //GL_TEXTURE_CUBE_MAP_NEGATIVE_X
#ifndef GL_TEXTURE_CUBE_MAP_POSITIVE_Y
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#endif //GL_TEXTURE_CUBE_MAP_POSITIVE_Y
#ifndef GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#endif //GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
#ifndef GL_TEXTURE_CUBE_MAP_POSITIVE_Z
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#endif //GL_TEXTURE_CUBE_MAP_POSITIVE_Z
#ifndef GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#endif //GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
#ifndef GL_PROXY_TEXTURE_CUBE_MAP
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#endif //GL_PROXY_TEXTURE_CUBE_MAP
#ifndef GL_MAX_CUBE_MAP_TEXTURE_SIZE
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#endif //GL_MAX_CUBE_MAP_TEXTURE_SIZE
#ifndef GL_COMBINE
#define GL_COMBINE 0x8570
#endif //GL_COMBINE
#ifndef GL_COMBINE_RGB
#define GL_COMBINE_RGB 0x8571
#endif //GL_COMBINE_RGB
#ifndef GL_COMBINE_ALPHA
#define GL_COMBINE_ALPHA 0x8572
#endif //GL_COMBINE_ALPHA
#ifndef GL_RGB_SCALE
#define GL_RGB_SCALE 0x8573
#endif //GL_RGB_SCALE
#ifndef GL_ADD_SIGNED
#define GL_ADD_SIGNED 0x8574
#endif //GL_ADD_SIGNED
#ifndef GL_INTERPOLATE
#define GL_INTERPOLATE 0x8575
#endif //GL_INTERPOLATE
#ifndef GL_CONSTANT
#define GL_CONSTANT 0x8576
#endif //GL_CONSTANT
#ifndef GL_PRIMARY_COLOR
#define GL_PRIMARY_COLOR 0x8577
#endif //GL_PRIMARY_COLOR
#ifndef GL_PREVIOUS
#define GL_PREVIOUS 0x8578
#endif //GL_PREVIOUS
#ifndef GL_SOURCE0_RGB
#define GL_SOURCE0_RGB 0x8580
#endif //GL_SOURCE0_RGB
#ifndef GL_SRC0_RGB
#define GL_SRC0_RGB 0x8580
#endif //GL_SRC0_RGB
#ifndef GL_SOURCE1_RGB
#define GL_SOURCE1_RGB 0x8581
#endif //GL_SOURCE1_RGB
#ifndef GL_SRC1_RGB
#define GL_SRC1_RGB 0x8581
#endif //GL_SRC1_RGB
#ifndef GL_SOURCE2_RGB
#define GL_SOURCE2_RGB 0x8582
#endif //GL_SOURCE2_RGB
#ifndef GL_SRC2_RGB
#define GL_SRC2_RGB 0x8582
#endif //GL_SRC2_RGB
#ifndef GL_SRC0_ALPHA
#define GL_SRC0_ALPHA 0x8588
#endif //GL_SRC0_ALPHA
#ifndef GL_SOURCE0_ALPHA
#define GL_SOURCE0_ALPHA 0x8588
#endif //GL_SOURCE0_ALPHA
#ifndef GL_SOURCE1_ALPHA
#define GL_SOURCE1_ALPHA 0x8589
#endif //GL_SOURCE1_ALPHA
#ifndef GL_SRC1_ALPHA
#define GL_SRC1_ALPHA 0x8589
#endif //GL_SRC1_ALPHA
#ifndef GL_SOURCE2_ALPHA
#define GL_SOURCE2_ALPHA 0x858A
#endif //GL_SOURCE2_ALPHA
#ifndef GL_SRC2_ALPHA
#define GL_SRC2_ALPHA 0x858A
#endif //GL_SRC2_ALPHA
#ifndef GL_OPERAND0_RGB
#define GL_OPERAND0_RGB 0x8590
#endif //GL_OPERAND0_RGB
#ifndef GL_OPERAND1_RGB
#define GL_OPERAND1_RGB 0x8591
#endif //GL_OPERAND1_RGB
#ifndef GL_OPERAND2_RGB
#define GL_OPERAND2_RGB 0x8592
#endif //GL_OPERAND2_RGB
#ifndef GL_OPERAND0_ALPHA
#define GL_OPERAND0_ALPHA 0x8598
#endif //GL_OPERAND0_ALPHA
#ifndef GL_OPERAND1_ALPHA
#define GL_OPERAND1_ALPHA 0x8599
#endif //GL_OPERAND1_ALPHA
#ifndef GL_OPERAND2_ALPHA
#define GL_OPERAND2_ALPHA 0x859A
#endif //GL_OPERAND2_ALPHA
#ifndef GL_VERTEX_ARRAY_BINDING
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#endif //GL_VERTEX_ARRAY_BINDING
#ifndef GL_VERTEX_ATTRIB_ARRAY_ENABLED
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#endif //GL_VERTEX_ATTRIB_ARRAY_ENABLED
#ifndef GL_VERTEX_ATTRIB_ARRAY_SIZE
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#endif //GL_VERTEX_ATTRIB_ARRAY_SIZE
#ifndef GL_VERTEX_ATTRIB_ARRAY_STRIDE
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#endif //GL_VERTEX_ATTRIB_ARRAY_STRIDE
#ifndef GL_VERTEX_ATTRIB_ARRAY_TYPE
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#endif //GL_VERTEX_ATTRIB_ARRAY_TYPE
#ifndef GL_CURRENT_VERTEX_ATTRIB
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#endif //GL_CURRENT_VERTEX_ATTRIB
#ifndef GL_VERTEX_PROGRAM_POINT_SIZE
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#endif //GL_VERTEX_PROGRAM_POINT_SIZE
#ifndef GL_VERTEX_PROGRAM_TWO_SIDE
#define GL_VERTEX_PROGRAM_TWO_SIDE 0x8643
#endif //GL_VERTEX_PROGRAM_TWO_SIDE
#ifndef GL_VERTEX_ATTRIB_ARRAY_POINTER
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#endif //GL_VERTEX_ATTRIB_ARRAY_POINTER
#ifndef GL_TEXTURE_COMPRESSED_IMAGE_SIZE
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#endif //GL_TEXTURE_COMPRESSED_IMAGE_SIZE
#ifndef GL_TEXTURE_COMPRESSED
#define GL_TEXTURE_COMPRESSED 0x86A1
#endif //GL_TEXTURE_COMPRESSED
#ifndef GL_NUM_COMPRESSED_TEXTURE_FORMATS
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#endif //GL_NUM_COMPRESSED_TEXTURE_FORMATS
#ifndef GL_COMPRESSED_TEXTURE_FORMATS
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#endif //GL_COMPRESSED_TEXTURE_FORMATS
#ifndef GL_DOT3_RGB
#define GL_DOT3_RGB 0x86AE
#endif //GL_DOT3_RGB
#ifndef GL_DOT3_RGBA
#define GL_DOT3_RGBA 0x86AF
#endif //GL_DOT3_RGBA
#ifndef GL_BUFFER_SIZE
#define GL_BUFFER_SIZE 0x8764
#endif //GL_BUFFER_SIZE
#ifndef GL_BUFFER_USAGE
#define GL_BUFFER_USAGE 0x8765
#endif //GL_BUFFER_USAGE
#ifndef GL_STENCIL_BACK_FUNC
#define GL_STENCIL_BACK_FUNC 0x8800
#endif //GL_STENCIL_BACK_FUNC
#ifndef GL_STENCIL_BACK_FAIL
#define GL_STENCIL_BACK_FAIL 0x8801
#endif //GL_STENCIL_BACK_FAIL
#ifndef GL_STENCIL_BACK_PASS_DEPTH_FAIL
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#endif //GL_STENCIL_BACK_PASS_DEPTH_FAIL
#ifndef GL_STENCIL_BACK_PASS_DEPTH_PASS
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#endif //GL_STENCIL_BACK_PASS_DEPTH_PASS
#ifndef GL_RGBA32F
#define GL_RGBA32F 0x8814
#endif //GL_RGBA32F
#ifndef GL_RGB32F
#define GL_RGB32F 0x8815
#endif //GL_RGB32F
#ifndef GL_RGBA16F
#define GL_RGBA16F 0x881A
#endif //GL_RGBA16F
#ifndef GL_RGB16F
#define GL_RGB16F 0x881B
#endif //GL_RGB16F
#ifndef GL_MAX_DRAW_BUFFERS
#define GL_MAX_DRAW_BUFFERS 0x8824
#endif //GL_MAX_DRAW_BUFFERS
#ifndef GL_DRAW_BUFFER0
#define GL_DRAW_BUFFER0 0x8825
#endif //GL_DRAW_BUFFER0
#ifndef GL_DRAW_BUFFER1
#define GL_DRAW_BUFFER1 0x8826
#endif //GL_DRAW_BUFFER1
#ifndef GL_DRAW_BUFFER2
#define GL_DRAW_BUFFER2 0x8827
#endif //GL_DRAW_BUFFER2
#ifndef GL_DRAW_BUFFER3
#define GL_DRAW_BUFFER3 0x8828
#endif //GL_DRAW_BUFFER3
#ifndef GL_DRAW_BUFFER4
#define GL_DRAW_BUFFER4 0x8829
#endif //GL_DRAW_BUFFER4
#ifndef GL_DRAW_BUFFER5
#define GL_DRAW_BUFFER5 0x882A
#endif //GL_DRAW_BUFFER5
#ifndef GL_DRAW_BUFFER6
#define GL_DRAW_BUFFER6 0x882B
#endif //GL_DRAW_BUFFER6
#ifndef GL_DRAW_BUFFER7
#define GL_DRAW_BUFFER7 0x882C
#endif //GL_DRAW_BUFFER7
#ifndef GL_DRAW_BUFFER8
#define GL_DRAW_BUFFER8 0x882D
#endif //GL_DRAW_BUFFER8
#ifndef GL_DRAW_BUFFER9
#define GL_DRAW_BUFFER9 0x882E
#endif //GL_DRAW_BUFFER9
#ifndef GL_DRAW_BUFFER10
#define GL_DRAW_BUFFER10 0x882F
#endif //GL_DRAW_BUFFER10
#ifndef GL_DRAW_BUFFER11
#define GL_DRAW_BUFFER11 0x8830
#endif //GL_DRAW_BUFFER11
#ifndef GL_DRAW_BUFFER12
#define GL_DRAW_BUFFER12 0x8831
#endif //GL_DRAW_BUFFER12
#ifndef GL_DRAW_BUFFER13
#define GL_DRAW_BUFFER13 0x8832
#endif //GL_DRAW_BUFFER13
#ifndef GL_DRAW_BUFFER14
#define GL_DRAW_BUFFER14 0x8833
#endif //GL_DRAW_BUFFER14
#ifndef GL_DRAW_BUFFER15
#define GL_DRAW_BUFFER15 0x8834
#endif //GL_DRAW_BUFFER15
#ifndef GL_BLEND_EQUATION_ALPHA
#define GL_BLEND_EQUATION_ALPHA 0x883D
#endif //GL_BLEND_EQUATION_ALPHA
#ifndef GL_TEXTURE_DEPTH_SIZE
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#endif //GL_TEXTURE_DEPTH_SIZE
#ifndef GL_DEPTH_TEXTURE_MODE
#define GL_DEPTH_TEXTURE_MODE 0x884B
#endif //GL_DEPTH_TEXTURE_MODE
#ifndef GL_TEXTURE_COMPARE_MODE
#define GL_TEXTURE_COMPARE_MODE 0x884C
#endif //GL_TEXTURE_COMPARE_MODE
#ifndef GL_TEXTURE_COMPARE_FUNC
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#endif //GL_TEXTURE_COMPARE_FUNC
#ifndef GL_COMPARE_R_TO_TEXTURE
#define GL_COMPARE_R_TO_TEXTURE 0x884E
#endif //GL_COMPARE_R_TO_TEXTURE
#ifndef GL_COMPARE_REF_TO_TEXTURE
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#endif //GL_COMPARE_REF_TO_TEXTURE
#ifndef GL_POINT_SPRITE
#define GL_POINT_SPRITE 0x8861
#endif //GL_POINT_SPRITE
#ifndef GL_COORD_REPLACE
#define GL_COORD_REPLACE 0x8862
#endif //GL_COORD_REPLACE
#ifndef GL_QUERY_COUNTER_BITS
#define GL_QUERY_COUNTER_BITS 0x8864
#endif //GL_QUERY_COUNTER_BITS
#ifndef GL_CURRENT_QUERY
#define GL_CURRENT_QUERY 0x8865
#endif //GL_CURRENT_QUERY
#ifndef GL_QUERY_RESULT
#define GL_QUERY_RESULT 0x8866
#endif //GL_QUERY_RESULT
#ifndef GL_QUERY_RESULT_AVAILABLE
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#endif //GL_QUERY_RESULT_AVAILABLE
#ifndef GL_MAX_VERTEX_ATTRIBS
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#endif //GL_MAX_VERTEX_ATTRIBS
#ifndef GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#endif //GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
#ifndef GL_MAX_TEXTURE_COORDS
#define GL_MAX_TEXTURE_COORDS 0x8871
#endif //GL_MAX_TEXTURE_COORDS
#ifndef GL_MAX_TEXTURE_IMAGE_UNITS
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#endif //GL_MAX_TEXTURE_IMAGE_UNITS
#ifndef GL_ARRAY_BUFFER
#define GL_ARRAY_BUFFER 0x8892
#endif //GL_ARRAY_BUFFER
#ifndef GL_ELEMENT_ARRAY_BUFFER
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#endif //GL_ELEMENT_ARRAY_BUFFER
#ifndef GL_ARRAY_BUFFER_BINDING
#define GL_ARRAY_BUFFER_BINDING 0x8894
#endif //GL_ARRAY_BUFFER_BINDING
#ifndef GL_ELEMENT_ARRAY_BUFFER_BINDING
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#endif //GL_ELEMENT_ARRAY_BUFFER_BINDING
#ifndef GL_VERTEX_ARRAY_BUFFER_BINDING
#define GL_VERTEX_ARRAY_BUFFER_BINDING 0x8896
#endif //GL_VERTEX_ARRAY_BUFFER_BINDING
#ifndef GL_NORMAL_ARRAY_BUFFER_BINDING
#define GL_NORMAL_ARRAY_BUFFER_BINDING 0x8897
#endif //GL_NORMAL_ARRAY_BUFFER_BINDING
#ifndef GL_COLOR_ARRAY_BUFFER_BINDING
#define GL_COLOR_ARRAY_BUFFER_BINDING 0x8898
#endif //GL_COLOR_ARRAY_BUFFER_BINDING
#ifndef GL_INDEX_ARRAY_BUFFER_BINDING
#define GL_INDEX_ARRAY_BUFFER_BINDING 0x8899
#endif //GL_INDEX_ARRAY_BUFFER_BINDING
#ifndef GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
#endif //GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
#ifndef GL_EDGE_FLAG_ARRAY_BUFFER_BINDING
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B
#endif //GL_EDGE_FLAG_ARRAY_BUFFER_BINDING
#ifndef GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C
#endif //GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING
#ifndef GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D
#endif //GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
#ifndef GL_FOG_COORD_ARRAY_BUFFER_BINDING
#define GL_FOG_COORD_ARRAY_BUFFER_BINDING 0x889D
#endif //GL_FOG_COORD_ARRAY_BUFFER_BINDING
#ifndef GL_WEIGHT_ARRAY_BUFFER_BINDING
#define GL_WEIGHT_ARRAY_BUFFER_BINDING 0x889E
#endif //GL_WEIGHT_ARRAY_BUFFER_BINDING
#ifndef GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#endif //GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
#ifndef GL_READ_ONLY
#define GL_READ_ONLY 0x88B8
#endif //GL_READ_ONLY
#ifndef GL_WRITE_ONLY
#define GL_WRITE_ONLY 0x88B9
#endif //GL_WRITE_ONLY
#ifndef GL_READ_WRITE
#define GL_READ_WRITE 0x88BA
#endif //GL_READ_WRITE
#ifndef GL_BUFFER_ACCESS
#define GL_BUFFER_ACCESS 0x88BB
#endif //GL_BUFFER_ACCESS
#ifndef GL_BUFFER_MAPPED
#define GL_BUFFER_MAPPED 0x88BC
#endif //GL_BUFFER_MAPPED
#ifndef GL_BUFFER_MAP_POINTER
#define GL_BUFFER_MAP_POINTER 0x88BD
#endif //GL_BUFFER_MAP_POINTER
#ifndef GL_STREAM_DRAW
#define GL_STREAM_DRAW 0x88E0
#endif //GL_STREAM_DRAW
#ifndef GL_STREAM_READ
#define GL_STREAM_READ 0x88E1
#endif //GL_STREAM_READ
#ifndef GL_STREAM_COPY
#define GL_STREAM_COPY 0x88E2
#endif //GL_STREAM_COPY
#ifndef GL_STATIC_DRAW
#define GL_STATIC_DRAW 0x88E4
#endif //GL_STATIC_DRAW
#ifndef GL_STATIC_READ
#define GL_STATIC_READ 0x88E5
#endif //GL_STATIC_READ
#ifndef GL_STATIC_COPY
#define GL_STATIC_COPY 0x88E6
#endif //GL_STATIC_COPY
#ifndef GL_DYNAMIC_DRAW
#define GL_DYNAMIC_DRAW 0x88E8
#endif //GL_DYNAMIC_DRAW
#ifndef GL_DYNAMIC_READ
#define GL_DYNAMIC_READ 0x88E9
#endif //GL_DYNAMIC_READ
#ifndef GL_DYNAMIC_COPY
#define GL_DYNAMIC_COPY 0x88EA
#endif //GL_DYNAMIC_COPY
#ifndef GL_PIXEL_PACK_BUFFER
#define GL_PIXEL_PACK_BUFFER 0x88EB
#endif //GL_PIXEL_PACK_BUFFER
#ifndef GL_PIXEL_UNPACK_BUFFER
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#endif //GL_PIXEL_UNPACK_BUFFER
#ifndef GL_PIXEL_PACK_BUFFER_BINDING
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#endif //GL_PIXEL_PACK_BUFFER_BINDING
#ifndef GL_PIXEL_UNPACK_BUFFER_BINDING
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#endif //GL_PIXEL_UNPACK_BUFFER_BINDING
#ifndef GL_DEPTH24_STENCIL8
#define GL_DEPTH24_STENCIL8 0x88F0
#endif //GL_DEPTH24_STENCIL8
#ifndef GL_TEXTURE_STENCIL_SIZE
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#endif //GL_TEXTURE_STENCIL_SIZE
#ifndef GL_VERTEX_ATTRIB_ARRAY_INTEGER
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#endif //GL_VERTEX_ATTRIB_ARRAY_INTEGER
#ifndef GL_MAX_ARRAY_TEXTURE_LAYERS
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#endif //GL_MAX_ARRAY_TEXTURE_LAYERS
#ifndef GL_MIN_PROGRAM_TEXEL_OFFSET
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#endif //GL_MIN_PROGRAM_TEXEL_OFFSET
#ifndef GL_MAX_PROGRAM_TEXEL_OFFSET
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#endif //GL_MAX_PROGRAM_TEXEL_OFFSET
#ifndef GL_SAMPLES_PASSED
#define GL_SAMPLES_PASSED 0x8914
#endif //GL_SAMPLES_PASSED
#ifndef GL_CLAMP_VERTEX_COLOR
#define GL_CLAMP_VERTEX_COLOR 0x891A
#endif //GL_CLAMP_VERTEX_COLOR
#ifndef GL_CLAMP_FRAGMENT_COLOR
#define GL_CLAMP_FRAGMENT_COLOR 0x891B
#endif //GL_CLAMP_FRAGMENT_COLOR
#ifndef GL_CLAMP_READ_COLOR
#define GL_CLAMP_READ_COLOR 0x891C
#endif //GL_CLAMP_READ_COLOR
#ifndef GL_FIXED_ONLY
#define GL_FIXED_ONLY 0x891D
#endif //GL_FIXED_ONLY
#ifndef GL_UNIFORM_BUFFER
#define GL_UNIFORM_BUFFER 0x8A11
#endif //GL_UNIFORM_BUFFER
#ifndef GL_UNIFORM_BUFFER_BINDING
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#endif //GL_UNIFORM_BUFFER_BINDING
#ifndef GL_UNIFORM_BUFFER_START
#define GL_UNIFORM_BUFFER_START 0x8A29
#endif //GL_UNIFORM_BUFFER_START
#ifndef GL_UNIFORM_BUFFER_SIZE
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#endif //GL_UNIFORM_BUFFER_SIZE
#ifndef GL_MAX_VERTEX_UNIFORM_BLOCKS
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#endif //GL_MAX_VERTEX_UNIFORM_BLOCKS
#ifndef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#endif //GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#ifndef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#endif //GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#ifndef GL_MAX_COMBINED_UNIFORM_BLOCKS
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#endif //GL_MAX_COMBINED_UNIFORM_BLOCKS
#ifndef GL_MAX_UNIFORM_BUFFER_BINDINGS
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#endif //GL_MAX_UNIFORM_BUFFER_BINDINGS
#ifndef GL_MAX_UNIFORM_BLOCK_SIZE
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#endif //GL_MAX_UNIFORM_BLOCK_SIZE
#ifndef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#endif //GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#ifndef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#endif //GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#ifndef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#endif //GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#ifndef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#endif //GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#ifndef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#endif //GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#ifndef GL_ACTIVE_UNIFORM_BLOCKS
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#endif //GL_ACTIVE_UNIFORM_BLOCKS
#ifndef GL_UNIFORM_TYPE
#define GL_UNIFORM_TYPE 0x8A37
#endif //GL_UNIFORM_TYPE
#ifndef GL_UNIFORM_SIZE
#define GL_UNIFORM_SIZE 0x8A38
#endif //GL_UNIFORM_SIZE
#ifndef GL_UNIFORM_NAME_LENGTH
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif //GL_UNIFORM_NAME_LENGTH
#ifndef GL_UNIFORM_BLOCK_INDEX
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#endif //GL_UNIFORM_BLOCK_INDEX
#ifndef GL_UNIFORM_OFFSET
#define GL_UNIFORM_OFFSET 0x8A3B
#endif //GL_UNIFORM_OFFSET
#ifndef GL_UNIFORM_ARRAY_STRIDE
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#endif //GL_UNIFORM_ARRAY_STRIDE
#ifndef GL_UNIFORM_MATRIX_STRIDE
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#endif //GL_UNIFORM_MATRIX_STRIDE
#ifndef GL_UNIFORM_IS_ROW_MAJOR
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#endif //GL_UNIFORM_IS_ROW_MAJOR
#ifndef GL_UNIFORM_BLOCK_BINDING
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#endif //GL_UNIFORM_BLOCK_BINDING
#ifndef GL_UNIFORM_BLOCK_DATA_SIZE
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#endif //GL_UNIFORM_BLOCK_DATA_SIZE
#ifndef GL_UNIFORM_BLOCK_NAME_LENGTH
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#endif //GL_UNIFORM_BLOCK_NAME_LENGTH
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#endif //GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#endif //GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#endif //GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#endif //GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#endif //GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#ifndef GL_FRAGMENT_SHADER
#define GL_FRAGMENT_SHADER 0x8B30
#endif //GL_FRAGMENT_SHADER
#ifndef GL_VERTEX_SHADER
#define GL_VERTEX_SHADER 0x8B31
#endif //GL_VERTEX_SHADER
#ifndef GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#endif //GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
#ifndef GL_MAX_VERTEX_UNIFORM_COMPONENTS
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#endif //GL_MAX_VERTEX_UNIFORM_COMPONENTS
#ifndef GL_MAX_VARYING_FLOATS
#define GL_MAX_VARYING_FLOATS 0x8B4B
#endif //GL_MAX_VARYING_FLOATS
#ifndef GL_MAX_VARYING_COMPONENTS
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#endif //GL_MAX_VARYING_COMPONENTS
#ifndef GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#endif //GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
#ifndef GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#endif //GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
#ifndef GL_SHADER_TYPE
#define GL_SHADER_TYPE 0x8B4F
#endif //GL_SHADER_TYPE
#ifndef GL_FLOAT_VEC2
#define GL_FLOAT_VEC2 0x8B50
#endif //GL_FLOAT_VEC2
#ifndef GL_FLOAT_VEC3
#define GL_FLOAT_VEC3 0x8B51
#endif //GL_FLOAT_VEC3
#ifndef GL_FLOAT_VEC4
#define GL_FLOAT_VEC4 0x8B52
#endif //GL_FLOAT_VEC4
#ifndef GL_INT_VEC2
#define GL_INT_VEC2 0x8B53
#endif //GL_INT_VEC2
#ifndef GL_INT_VEC3
#define GL_INT_VEC3 0x8B54
#endif //GL_INT_VEC3
#ifndef GL_INT_VEC4
#define GL_INT_VEC4 0x8B55
#endif //GL_INT_VEC4
#ifndef GL_BOOL
#define GL_BOOL 0x8B56
#endif //GL_BOOL
#ifndef GL_BOOL_VEC2
#define GL_BOOL_VEC2 0x8B57
#endif //GL_BOOL_VEC2
#ifndef GL_BOOL_VEC3
#define GL_BOOL_VEC3 0x8B58
#endif //GL_BOOL_VEC3
#ifndef GL_BOOL_VEC4
#define GL_BOOL_VEC4 0x8B59
#endif //GL_BOOL_VEC4
#ifndef GL_FLOAT_MAT2
#define GL_FLOAT_MAT2 0x8B5A
#endif //GL_FLOAT_MAT2
#ifndef GL_FLOAT_MAT3
#define GL_FLOAT_MAT3 0x8B5B
#endif //GL_FLOAT_MAT3
#ifndef GL_FLOAT_MAT4
#define GL_FLOAT_MAT4 0x8B5C
#endif //GL_FLOAT_MAT4
#ifndef GL_SAMPLER_1D
#define GL_SAMPLER_1D 0x8B5D
#endif //GL_SAMPLER_1D
#ifndef GL_SAMPLER_2D
#define GL_SAMPLER_2D 0x8B5E
#endif //GL_SAMPLER_2D
#ifndef GL_SAMPLER_3D
#define GL_SAMPLER_3D 0x8B5F
#endif //GL_SAMPLER_3D
#ifndef GL_SAMPLER_CUBE
#define GL_SAMPLER_CUBE 0x8B60
#endif //GL_SAMPLER_CUBE
#ifndef GL_SAMPLER_1D_SHADOW
#define GL_SAMPLER_1D_SHADOW 0x8B61
#endif //GL_SAMPLER_1D_SHADOW
#ifndef GL_SAMPLER_2D_SHADOW
#define GL_SAMPLER_2D_SHADOW 0x8B62
#endif //GL_SAMPLER_2D_SHADOW
#ifndef GL_SAMPLER_2D_RECT
#define GL_SAMPLER_2D_RECT 0x8B63
#endif //GL_SAMPLER_2D_RECT
#ifndef GL_SAMPLER_2D_RECT_SHADOW
#define GL_SAMPLER_2D_RECT_SHADOW 0x8B64
#endif //GL_SAMPLER_2D_RECT_SHADOW
#ifndef GL_FLOAT_MAT2x3
#define GL_FLOAT_MAT2x3 0x8B65
#endif //GL_FLOAT_MAT2x3
#ifndef GL_FLOAT_MAT2x4
#define GL_FLOAT_MAT2x4 0x8B66
#endif //GL_FLOAT_MAT2x4
#ifndef GL_FLOAT_MAT3x2
#define GL_FLOAT_MAT3x2 0x8B67
#endif //GL_FLOAT_MAT3x2
#ifndef GL_FLOAT_MAT3x4
#define GL_FLOAT_MAT3x4 0x8B68
#endif //GL_FLOAT_MAT3x4
#ifndef GL_FLOAT_MAT4x2
#define GL_FLOAT_MAT4x2 0x8B69
#endif //GL_FLOAT_MAT4x2
#ifndef GL_FLOAT_MAT4x3
#define GL_FLOAT_MAT4x3 0x8B6A
#endif //GL_FLOAT_MAT4x3
#ifndef GL_DELETE_STATUS
#define GL_DELETE_STATUS 0x8B80
#endif //GL_DELETE_STATUS
#ifndef GL_COMPILE_STATUS
#define GL_COMPILE_STATUS 0x8B81
#endif //GL_COMPILE_STATUS
#ifndef GL_LINK_STATUS
#define GL_LINK_STATUS 0x8B82
#endif //GL_LINK_STATUS
#ifndef GL_VALIDATE_STATUS
#define GL_VALIDATE_STATUS 0x8B83
#endif //GL_VALIDATE_STATUS
#ifndef GL_INFO_LOG_LENGTH
#define GL_INFO_LOG_LENGTH 0x8B84
#endif //GL_INFO_LOG_LENGTH
#ifndef GL_ATTACHED_SHADERS
#define GL_ATTACHED_SHADERS 0x8B85
#endif //GL_ATTACHED_SHADERS
#ifndef GL_ACTIVE_UNIFORMS
#define GL_ACTIVE_UNIFORMS 0x8B86
#endif //GL_ACTIVE_UNIFORMS
#ifndef GL_ACTIVE_UNIFORM_MAX_LENGTH
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#endif //GL_ACTIVE_UNIFORM_MAX_LENGTH
#ifndef GL_SHADER_SOURCE_LENGTH
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#endif //GL_SHADER_SOURCE_LENGTH
#ifndef GL_ACTIVE_ATTRIBUTES
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#endif //GL_ACTIVE_ATTRIBUTES
#ifndef GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#endif //GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
#ifndef GL_FRAGMENT_SHADER_DERIVATIVE_HINT
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#endif //GL_FRAGMENT_SHADER_DERIVATIVE_HINT
#ifndef GL_SHADING_LANGUAGE_VERSION
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#endif //GL_SHADING_LANGUAGE_VERSION
#ifndef GL_CURRENT_PROGRAM
#define GL_CURRENT_PROGRAM 0x8B8D
#endif //GL_CURRENT_PROGRAM
#ifndef GL_TEXTURE_RED_TYPE
#define GL_TEXTURE_RED_TYPE 0x8C10
#endif //GL_TEXTURE_RED_TYPE
#ifndef GL_TEXTURE_GREEN_TYPE
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#endif //GL_TEXTURE_GREEN_TYPE
#ifndef GL_TEXTURE_BLUE_TYPE
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#endif //GL_TEXTURE_BLUE_TYPE
#ifndef GL_TEXTURE_ALPHA_TYPE
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#endif //GL_TEXTURE_ALPHA_TYPE
#ifndef GL_TEXTURE_DEPTH_TYPE
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#endif //GL_TEXTURE_DEPTH_TYPE
#ifndef GL_UNSIGNED_NORMALIZED
#define GL_UNSIGNED_NORMALIZED 0x8C17
#endif //GL_UNSIGNED_NORMALIZED
#ifndef GL_TEXTURE_1D_ARRAY
#define GL_TEXTURE_1D_ARRAY 0x8C18
#endif //GL_TEXTURE_1D_ARRAY
#ifndef GL_PROXY_TEXTURE_1D_ARRAY
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#endif //GL_PROXY_TEXTURE_1D_ARRAY
#ifndef GL_TEXTURE_2D_ARRAY
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#endif //GL_TEXTURE_2D_ARRAY
#ifndef GL_PROXY_TEXTURE_2D_ARRAY
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#endif //GL_PROXY_TEXTURE_2D_ARRAY
#ifndef GL_TEXTURE_BINDING_1D_ARRAY
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#endif //GL_TEXTURE_BINDING_1D_ARRAY
#ifndef GL_TEXTURE_BINDING_2D_ARRAY
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#endif //GL_TEXTURE_BINDING_2D_ARRAY
#ifndef GL_TEXTURE_BUFFER
#define GL_TEXTURE_BUFFER 0x8C2A
#endif //GL_TEXTURE_BUFFER
#ifndef GL_MAX_TEXTURE_BUFFER_SIZE
#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
#endif //GL_MAX_TEXTURE_BUFFER_SIZE
#ifndef GL_TEXTURE_BINDING_BUFFER
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#endif //GL_TEXTURE_BINDING_BUFFER
#ifndef GL_TEXTURE_BUFFER_DATA_STORE_BINDING
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#endif //GL_TEXTURE_BUFFER_DATA_STORE_BINDING
#ifndef GL_R11F_G11F_B10F
#define GL_R11F_G11F_B10F 0x8C3A
#endif //GL_R11F_G11F_B10F
#ifndef GL_UNSIGNED_INT_10F_11F_11F_REV
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#endif //GL_UNSIGNED_INT_10F_11F_11F_REV
#ifndef GL_RGB9_E5
#define GL_RGB9_E5 0x8C3D
#endif //GL_RGB9_E5
#ifndef GL_UNSIGNED_INT_5_9_9_9_REV
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#endif //GL_UNSIGNED_INT_5_9_9_9_REV
#ifndef GL_TEXTURE_SHARED_SIZE
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#endif //GL_TEXTURE_SHARED_SIZE
#ifndef GL_SRGB
#define GL_SRGB 0x8C40
#endif //GL_SRGB
#ifndef GL_SRGB8
#define GL_SRGB8 0x8C41
#endif //GL_SRGB8
#ifndef GL_SRGB_ALPHA
#define GL_SRGB_ALPHA 0x8C42
#endif //GL_SRGB_ALPHA
#ifndef GL_SRGB8_ALPHA8
#define GL_SRGB8_ALPHA8 0x8C43
#endif //GL_SRGB8_ALPHA8
#ifndef GL_SLUMINANCE_ALPHA
#define GL_SLUMINANCE_ALPHA 0x8C44
#endif //GL_SLUMINANCE_ALPHA
#ifndef GL_SLUMINANCE8_ALPHA8
#define GL_SLUMINANCE8_ALPHA8 0x8C45
#endif //GL_SLUMINANCE8_ALPHA8
#ifndef GL_SLUMINANCE
#define GL_SLUMINANCE 0x8C46
#endif //GL_SLUMINANCE
#ifndef GL_SLUMINANCE8
#define GL_SLUMINANCE8 0x8C47
#endif //GL_SLUMINANCE8
#ifndef GL_COMPRESSED_SRGB
#define GL_COMPRESSED_SRGB 0x8C48
#endif //GL_COMPRESSED_SRGB
#ifndef GL_COMPRESSED_SRGB_ALPHA
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
#endif //GL_COMPRESSED_SRGB_ALPHA
#ifndef GL_COMPRESSED_SLUMINANCE
#define GL_COMPRESSED_SLUMINANCE 0x8C4A
#endif //GL_COMPRESSED_SLUMINANCE
#ifndef GL_COMPRESSED_SLUMINANCE_ALPHA
#define GL_COMPRESSED_SLUMINANCE_ALPHA 0x8C4B
#endif //GL_COMPRESSED_SLUMINANCE_ALPHA
#ifndef GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#endif //GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_MODE
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_MODE
#ifndef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#endif //GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
#ifndef GL_TRANSFORM_FEEDBACK_VARYINGS
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#endif //GL_TRANSFORM_FEEDBACK_VARYINGS
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_START
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_START
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
#ifndef GL_PRIMITIVES_GENERATED
#define GL_PRIMITIVES_GENERATED 0x8C87
#endif //GL_PRIMITIVES_GENERATED
#ifndef GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#endif //GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
#ifndef GL_RASTERIZER_DISCARD
#define GL_RASTERIZER_DISCARD 0x8C89
#endif //GL_RASTERIZER_DISCARD
#ifndef GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#endif //GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
#ifndef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#endif //GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
#ifndef GL_INTERLEAVED_ATTRIBS
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#endif //GL_INTERLEAVED_ATTRIBS
#ifndef GL_SEPARATE_ATTRIBS
#define GL_SEPARATE_ATTRIBS 0x8C8D
#endif //GL_SEPARATE_ATTRIBS
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#endif //GL_TRANSFORM_FEEDBACK_BUFFER
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
#ifndef GL_POINT_SPRITE_COORD_ORIGIN
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#endif //GL_POINT_SPRITE_COORD_ORIGIN
#ifndef GL_LOWER_LEFT
#define GL_LOWER_LEFT 0x8CA1
#endif //GL_LOWER_LEFT
#ifndef GL_UPPER_LEFT
#define GL_UPPER_LEFT 0x8CA2
#endif //GL_UPPER_LEFT
#ifndef GL_STENCIL_BACK_REF
#define GL_STENCIL_BACK_REF 0x8CA3
#endif //GL_STENCIL_BACK_REF
#ifndef GL_STENCIL_BACK_VALUE_MASK
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#endif //GL_STENCIL_BACK_VALUE_MASK
#ifndef GL_STENCIL_BACK_WRITEMASK
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#endif //GL_STENCIL_BACK_WRITEMASK
#ifndef GL_DRAW_FRAMEBUFFER_BINDING
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#endif //GL_DRAW_FRAMEBUFFER_BINDING
#ifndef GL_FRAMEBUFFER_BINDING
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#endif //GL_FRAMEBUFFER_BINDING
#ifndef GL_RENDERBUFFER_BINDING
#define GL_RENDERBUFFER_BINDING 0x8CA7
#endif //GL_RENDERBUFFER_BINDING
#ifndef GL_READ_FRAMEBUFFER
#define GL_READ_FRAMEBUFFER 0x8CA8
#endif //GL_READ_FRAMEBUFFER
#ifndef GL_DRAW_FRAMEBUFFER
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#endif //GL_DRAW_FRAMEBUFFER
#ifndef GL_READ_FRAMEBUFFER_BINDING
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#endif //GL_READ_FRAMEBUFFER_BINDING
#ifndef GL_RENDERBUFFER_SAMPLES
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#endif //GL_RENDERBUFFER_SAMPLES
#ifndef GL_DEPTH_COMPONENT32F
#define GL_DEPTH_COMPONENT32F 0x8CAC
#endif //GL_DEPTH_COMPONENT32F
#ifndef GL_DEPTH32F_STENCIL8
#define GL_DEPTH32F_STENCIL8 0x8CAD
#endif //GL_DEPTH32F_STENCIL8
#ifndef GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#endif //GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#endif //GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
#ifndef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#endif //GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
#ifndef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#endif //GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#endif //GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
#ifndef GL_FRAMEBUFFER_COMPLETE
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#endif //GL_FRAMEBUFFER_COMPLETE
#ifndef GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#endif //GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
#ifndef GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#endif //GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
#ifndef GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#endif //GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
#ifndef GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#endif //GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
#ifndef GL_FRAMEBUFFER_UNSUPPORTED
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#endif //GL_FRAMEBUFFER_UNSUPPORTED
#ifndef GL_MAX_COLOR_ATTACHMENTS
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#endif //GL_MAX_COLOR_ATTACHMENTS
#ifndef GL_COLOR_ATTACHMENT0
#define GL_COLOR_ATTACHMENT0 0x8CE0
#endif //GL_COLOR_ATTACHMENT0
#ifndef GL_COLOR_ATTACHMENT1
#define GL_COLOR_ATTACHMENT1 0x8CE1
#endif //GL_COLOR_ATTACHMENT1
#ifndef GL_COLOR_ATTACHMENT2
#define GL_COLOR_ATTACHMENT2 0x8CE2
#endif //GL_COLOR_ATTACHMENT2
#ifndef GL_COLOR_ATTACHMENT3
#define GL_COLOR_ATTACHMENT3 0x8CE3
#endif //GL_COLOR_ATTACHMENT3
#ifndef GL_COLOR_ATTACHMENT4
#define GL_COLOR_ATTACHMENT4 0x8CE4
#endif //GL_COLOR_ATTACHMENT4
#ifndef GL_COLOR_ATTACHMENT5
#define GL_COLOR_ATTACHMENT5 0x8CE5
#endif //GL_COLOR_ATTACHMENT5
#ifndef GL_COLOR_ATTACHMENT6
#define GL_COLOR_ATTACHMENT6 0x8CE6
#endif //GL_COLOR_ATTACHMENT6
#ifndef GL_COLOR_ATTACHMENT7
#define GL_COLOR_ATTACHMENT7 0x8CE7
#endif //GL_COLOR_ATTACHMENT7
#ifndef GL_COLOR_ATTACHMENT8
#define GL_COLOR_ATTACHMENT8 0x8CE8
#endif //GL_COLOR_ATTACHMENT8
#ifndef GL_COLOR_ATTACHMENT9
#define GL_COLOR_ATTACHMENT9 0x8CE9
#endif //GL_COLOR_ATTACHMENT9
#ifndef GL_COLOR_ATTACHMENT10
#define GL_COLOR_ATTACHMENT10 0x8CEA
#endif //GL_COLOR_ATTACHMENT10
#ifndef GL_COLOR_ATTACHMENT11
#define GL_COLOR_ATTACHMENT11 0x8CEB
#endif //GL_COLOR_ATTACHMENT11
#ifndef GL_COLOR_ATTACHMENT12
#define GL_COLOR_ATTACHMENT12 0x8CEC
#endif //GL_COLOR_ATTACHMENT12
#ifndef GL_COLOR_ATTACHMENT13
#define GL_COLOR_ATTACHMENT13 0x8CED
#endif //GL_COLOR_ATTACHMENT13
#ifndef GL_COLOR_ATTACHMENT14
#define GL_COLOR_ATTACHMENT14 0x8CEE
#endif //GL_COLOR_ATTACHMENT14
#ifndef GL_COLOR_ATTACHMENT15
#define GL_COLOR_ATTACHMENT15 0x8CEF
#endif //GL_COLOR_ATTACHMENT15
#ifndef GL_DEPTH_ATTACHMENT
#define GL_DEPTH_ATTACHMENT 0x8D00
#endif //GL_DEPTH_ATTACHMENT
#ifndef GL_STENCIL_ATTACHMENT
#define GL_STENCIL_ATTACHMENT 0x8D20
#endif //GL_STENCIL_ATTACHMENT
#ifndef GL_FRAMEBUFFER
#define GL_FRAMEBUFFER 0x8D40
#endif //GL_FRAMEBUFFER
#ifndef GL_RENDERBUFFER
#define GL_RENDERBUFFER 0x8D41
#endif //GL_RENDERBUFFER
#ifndef GL_RENDERBUFFER_WIDTH
#define GL_RENDERBUFFER_WIDTH 0x8D42
#endif //GL_RENDERBUFFER_WIDTH
#ifndef GL_RENDERBUFFER_HEIGHT
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#endif //GL_RENDERBUFFER_HEIGHT
#ifndef GL_RENDERBUFFER_INTERNAL_FORMAT
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#endif //GL_RENDERBUFFER_INTERNAL_FORMAT
#ifndef GL_STENCIL_INDEX1
#define GL_STENCIL_INDEX1 0x8D46
#endif //GL_STENCIL_INDEX1
#ifndef GL_STENCIL_INDEX4
#define GL_STENCIL_INDEX4 0x8D47
#endif //GL_STENCIL_INDEX4
#ifndef GL_STENCIL_INDEX8
#define GL_STENCIL_INDEX8 0x8D48
#endif //GL_STENCIL_INDEX8
#ifndef GL_STENCIL_INDEX16
#define GL_STENCIL_INDEX16 0x8D49
#endif //GL_STENCIL_INDEX16
#ifndef GL_RENDERBUFFER_RED_SIZE
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#endif //GL_RENDERBUFFER_RED_SIZE
#ifndef GL_RENDERBUFFER_GREEN_SIZE
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#endif //GL_RENDERBUFFER_GREEN_SIZE
#ifndef GL_RENDERBUFFER_BLUE_SIZE
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#endif //GL_RENDERBUFFER_BLUE_SIZE
#ifndef GL_RENDERBUFFER_ALPHA_SIZE
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#endif //GL_RENDERBUFFER_ALPHA_SIZE
#ifndef GL_RENDERBUFFER_DEPTH_SIZE
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#endif //GL_RENDERBUFFER_DEPTH_SIZE
#ifndef GL_RENDERBUFFER_STENCIL_SIZE
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#endif //GL_RENDERBUFFER_STENCIL_SIZE
#ifndef GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#endif //GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
#ifndef GL_MAX_SAMPLES
#define GL_MAX_SAMPLES 0x8D57
#endif //GL_MAX_SAMPLES
#ifndef GL_RGBA32UI
#define GL_RGBA32UI 0x8D70
#endif //GL_RGBA32UI
#ifndef GL_RGB32UI
#define GL_RGB32UI 0x8D71
#endif //GL_RGB32UI
#ifndef GL_RGBA16UI
#define GL_RGBA16UI 0x8D76
#endif //GL_RGBA16UI
#ifndef GL_RGB16UI
#define GL_RGB16UI 0x8D77
#endif //GL_RGB16UI
#ifndef GL_RGBA8UI
#define GL_RGBA8UI 0x8D7C
#endif //GL_RGBA8UI
#ifndef GL_RGB8UI
#define GL_RGB8UI 0x8D7D
#endif //GL_RGB8UI
#ifndef GL_RGBA32I
#define GL_RGBA32I 0x8D82
#endif //GL_RGBA32I
#ifndef GL_RGB32I
#define GL_RGB32I 0x8D83
#endif //GL_RGB32I
#ifndef GL_RGBA16I
#define GL_RGBA16I 0x8D88
#endif //GL_RGBA16I
#ifndef GL_RGB16I
#define GL_RGB16I 0x8D89
#endif //GL_RGB16I
#ifndef GL_RGBA8I
#define GL_RGBA8I 0x8D8E
#endif //GL_RGBA8I
#ifndef GL_RGB8I
#define GL_RGB8I 0x8D8F
#endif //GL_RGB8I
#ifndef GL_RED_INTEGER
#define GL_RED_INTEGER 0x8D94
#endif //GL_RED_INTEGER
#ifndef GL_GREEN_INTEGER
#define GL_GREEN_INTEGER 0x8D95
#endif //GL_GREEN_INTEGER
#ifndef GL_BLUE_INTEGER
#define GL_BLUE_INTEGER 0x8D96
#endif //GL_BLUE_INTEGER
#ifndef GL_ALPHA_INTEGER
#define GL_ALPHA_INTEGER 0x8D97
#endif //GL_ALPHA_INTEGER
#ifndef GL_RGB_INTEGER
#define GL_RGB_INTEGER 0x8D98
#endif //GL_RGB_INTEGER
#ifndef GL_RGBA_INTEGER
#define GL_RGBA_INTEGER 0x8D99
#endif //GL_RGBA_INTEGER
#ifndef GL_BGR_INTEGER
#define GL_BGR_INTEGER 0x8D9A
#endif //GL_BGR_INTEGER
#ifndef GL_BGRA_INTEGER
#define GL_BGRA_INTEGER 0x8D9B
#endif //GL_BGRA_INTEGER
#ifndef GL_FLOAT_32_UNSIGNED_INT_24_8_REV
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#endif //GL_FLOAT_32_UNSIGNED_INT_24_8_REV
#ifndef GL_FRAMEBUFFER_SRGB
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#endif //GL_FRAMEBUFFER_SRGB
#ifndef GL_COMPRESSED_RED_RGTC1
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#endif //GL_COMPRESSED_RED_RGTC1
#ifndef GL_COMPRESSED_SIGNED_RED_RGTC1
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#endif //GL_COMPRESSED_SIGNED_RED_RGTC1
#ifndef GL_COMPRESSED_RG_RGTC2
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#endif //GL_COMPRESSED_RG_RGTC2
#ifndef GL_COMPRESSED_SIGNED_RG_RGTC2
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#endif //GL_COMPRESSED_SIGNED_RG_RGTC2
#ifndef GL_SAMPLER_1D_ARRAY
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#endif //GL_SAMPLER_1D_ARRAY
#ifndef GL_SAMPLER_2D_ARRAY
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#endif //GL_SAMPLER_2D_ARRAY
#ifndef GL_SAMPLER_BUFFER
#define GL_SAMPLER_BUFFER 0x8DC2
#endif //GL_SAMPLER_BUFFER
#ifndef GL_SAMPLER_1D_ARRAY_SHADOW
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#endif //GL_SAMPLER_1D_ARRAY_SHADOW
#ifndef GL_SAMPLER_2D_ARRAY_SHADOW
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#endif //GL_SAMPLER_2D_ARRAY_SHADOW
#ifndef GL_SAMPLER_CUBE_SHADOW
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#endif //GL_SAMPLER_CUBE_SHADOW
#ifndef GL_UNSIGNED_INT_VEC2
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#endif //GL_UNSIGNED_INT_VEC2
#ifndef GL_UNSIGNED_INT_VEC3
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#endif //GL_UNSIGNED_INT_VEC3
#ifndef GL_UNSIGNED_INT_VEC4
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#endif //GL_UNSIGNED_INT_VEC4
#ifndef GL_INT_SAMPLER_1D
#define GL_INT_SAMPLER_1D 0x8DC9
#endif //GL_INT_SAMPLER_1D
#ifndef GL_INT_SAMPLER_2D
#define GL_INT_SAMPLER_2D 0x8DCA
#endif //GL_INT_SAMPLER_2D
#ifndef GL_INT_SAMPLER_3D
#define GL_INT_SAMPLER_3D 0x8DCB
#endif //GL_INT_SAMPLER_3D
#ifndef GL_INT_SAMPLER_CUBE
#define GL_INT_SAMPLER_CUBE 0x8DCC
#endif //GL_INT_SAMPLER_CUBE
#ifndef GL_INT_SAMPLER_2D_RECT
#define GL_INT_SAMPLER_2D_RECT 0x8DCD
#endif //GL_INT_SAMPLER_2D_RECT
#ifndef GL_INT_SAMPLER_1D_ARRAY
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#endif //GL_INT_SAMPLER_1D_ARRAY
#ifndef GL_INT_SAMPLER_2D_ARRAY
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#endif //GL_INT_SAMPLER_2D_ARRAY
#ifndef GL_INT_SAMPLER_BUFFER
#define GL_INT_SAMPLER_BUFFER 0x8DD0
#endif //GL_INT_SAMPLER_BUFFER
#ifndef GL_UNSIGNED_INT_SAMPLER_1D
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#endif //GL_UNSIGNED_INT_SAMPLER_1D
#ifndef GL_UNSIGNED_INT_SAMPLER_2D
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#endif //GL_UNSIGNED_INT_SAMPLER_2D
#ifndef GL_UNSIGNED_INT_SAMPLER_3D
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#endif //GL_UNSIGNED_INT_SAMPLER_3D
#ifndef GL_UNSIGNED_INT_SAMPLER_CUBE
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#endif //GL_UNSIGNED_INT_SAMPLER_CUBE
#ifndef GL_UNSIGNED_INT_SAMPLER_2D_RECT
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5
#endif //GL_UNSIGNED_INT_SAMPLER_2D_RECT
#ifndef GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#endif //GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
#ifndef GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#endif //GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
#ifndef GL_UNSIGNED_INT_SAMPLER_BUFFER
#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
#endif //GL_UNSIGNED_INT_SAMPLER_BUFFER
#ifndef GL_QUERY_WAIT
#define GL_QUERY_WAIT 0x8E13
#endif //GL_QUERY_WAIT
#ifndef GL_QUERY_NO_WAIT
#define GL_QUERY_NO_WAIT 0x8E14
#endif //GL_QUERY_NO_WAIT
#ifndef GL_QUERY_BY_REGION_WAIT
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#endif //GL_QUERY_BY_REGION_WAIT
#ifndef GL_QUERY_BY_REGION_NO_WAIT
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#endif //GL_QUERY_BY_REGION_NO_WAIT
#ifndef GL_COPY_READ_BUFFER
#define GL_COPY_READ_BUFFER 0x8F36
#endif //GL_COPY_READ_BUFFER
#ifndef GL_COPY_WRITE_BUFFER
#define GL_COPY_WRITE_BUFFER 0x8F37
#endif //GL_COPY_WRITE_BUFFER
#ifndef GL_R8_SNORM
#define GL_R8_SNORM 0x8F94
#endif //GL_R8_SNORM
#ifndef GL_RG8_SNORM
#define GL_RG8_SNORM 0x8F95
#endif //GL_RG8_SNORM
#ifndef GL_RGB8_SNORM
#define GL_RGB8_SNORM 0x8F96
#endif //GL_RGB8_SNORM
#ifndef GL_RGBA8_SNORM
#define GL_RGBA8_SNORM 0x8F97
#endif //GL_RGBA8_SNORM
#ifndef GL_R16_SNORM
#define GL_R16_SNORM 0x8F98
#endif //GL_R16_SNORM
#ifndef GL_RG16_SNORM
#define GL_RG16_SNORM 0x8F99
#endif //GL_RG16_SNORM
#ifndef GL_RGB16_SNORM
#define GL_RGB16_SNORM 0x8F9A
#endif //GL_RGB16_SNORM
#ifndef GL_RGBA16_SNORM
#define GL_RGBA16_SNORM 0x8F9B
#endif //GL_RGBA16_SNORM
#ifndef GL_SIGNED_NORMALIZED
#define GL_SIGNED_NORMALIZED 0x8F9C
#endif //GL_SIGNED_NORMALIZED
#ifndef GL_PRIMITIVE_RESTART
#define GL_PRIMITIVE_RESTART 0x8F9D
#endif //GL_PRIMITIVE_RESTART
#ifndef GL_PRIMITIVE_RESTART_INDEX
#define GL_PRIMITIVE_RESTART_INDEX 0x8F9E
#endif //GL_PRIMITIVE_RESTART_INDEX
#ifndef GL_BUFFER_ACCESS_FLAGS
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#endif //GL_BUFFER_ACCESS_FLAGS
#ifndef GL_BUFFER_MAP_LENGTH
#define GL_BUFFER_MAP_LENGTH 0x9120
#endif //GL_BUFFER_MAP_LENGTH
#ifndef GL_BUFFER_MAP_OFFSET
#define GL_BUFFER_MAP_OFFSET 0x9121
#endif //GL_BUFFER_MAP_OFFSET
#ifndef GL_ALL_ATTRIB_BITS
#define GL_ALL_ATTRIB_BITS 0xFFFFFFFF
#endif //GL_ALL_ATTRIB_BITS
#ifndef GL_INVALID_INDEX
#define GL_INVALID_INDEX 0xFFFFFFFF
#endif //GL_INVALID_INDEX
#ifndef GL_CLIENT_ALL_ATTRIB_BITS
#define GL_CLIENT_ALL_ATTRIB_BITS 0xFFFFFFFF
#endif //GL_CLIENT_ALL_ATTRIB_BITS
#ifndef GL_TRUE
#define GL_TRUE 1
#endif //GL_TRUE
#ifndef GL_ONE
#define GL_ONE 1
#endif //GL_ONE
extern "C" {
extern void glAccum(GLenum,GLfloat);
extern void glAlphaFunc(GLenum,GLfloat);
extern GLboolean glAreTexturesResident(GLsizei,const GLuint *,GLboolean *);
extern void glArrayElement(GLint);
extern void glBegin(GLenum);
extern void glBindTexture(GLenum,GLuint);
extern void glBitmap(GLsizei,GLsizei,GLfloat,GLfloat,GLfloat,GLfloat,const GLubyte *);
extern void glBlendFunc(GLenum,GLenum);
extern void glCallList(GLuint);
extern void glCallLists(GLsizei,GLenum,const void *);
extern void glClear(GLbitfield);
extern void glClearAccum(GLfloat,GLfloat,GLfloat,GLfloat);
extern void glClearColor(GLfloat,GLfloat,GLfloat,GLfloat);
extern void glClearDepth(GLdouble);
extern void glClearIndex(GLfloat);
extern void glClearStencil(GLint);
extern void glClipPlane(GLenum,const GLdouble *);
extern void glColor3b(GLbyte,GLbyte,GLbyte);
extern void glColor3bv(const GLbyte *);
extern void glColor3d(GLdouble,GLdouble,GLdouble);
extern void glColor3dv(const GLdouble *);
extern void glColor3f(GLfloat,GLfloat,GLfloat);
extern void glColor3fv(const GLfloat *);
extern void glColor3i(GLint,GLint,GLint);
extern void glColor3iv(const GLint *);
extern void glColor3s(GLshort,GLshort,GLshort);
extern void glColor3sv(const GLshort *);
extern void glColor3ub(GLubyte,GLubyte,GLubyte);
extern void glColor3ubv(const GLubyte *);
extern void glColor3ui(GLuint,GLuint,GLuint);
extern void glColor3uiv(const GLuint *);
extern void glColor3us(GLushort,GLushort,GLushort);
extern void glColor3usv(const GLushort *);
extern void glColor4b(GLbyte,GLbyte,GLbyte,GLbyte);
extern void glColor4bv(const GLbyte *);
extern void glColor4d(GLdouble,GLdouble,GLdouble,GLdouble);
extern void glColor4dv(const GLdouble *);
extern void glColor4f(GLfloat,GLfloat,GLfloat,GLfloat);
extern void glColor4fv(const GLfloat *);
extern void glColor4i(GLint,GLint,GLint,GLint);
extern void glColor4iv(const GLint *);
extern void glColor4s(GLshort,GLshort,GLshort,GLshort);
extern void glColor4sv(const GLshort *);
extern void glColor4ub(GLubyte,GLubyte,GLubyte,GLubyte);
extern void glColor4ubv(const GLubyte *);
extern void glColor4ui(GLuint,GLuint,GLuint,GLuint);
extern void glColor4uiv(const GLuint *);
extern void glColor4us(GLushort,GLushort,GLushort,GLushort);
extern void glColor4usv(const GLushort *);
extern void glColorMask(GLboolean,GLboolean,GLboolean,GLboolean);
extern void glColorMaterial(GLenum,GLenum);
extern void glColorPointer(GLint,GLenum,GLsizei,const void *);
extern void glCopyPixels(GLint,GLint,GLsizei,GLsizei,GLenum);
extern void glCopyTexImage1D(GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLint);
extern void glCopyTexImage2D(GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLsizei,GLint);
extern void glCopyTexSubImage1D(GLenum,GLint,GLint,GLint,GLint,GLsizei);
extern void glCopyTexSubImage2D(GLenum,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
extern void glCullFace(GLenum);
extern void glDeleteLists(GLuint,GLsizei);
extern void glDeleteTextures(GLsizei,const GLuint *);
extern void glDepthFunc(GLenum);
extern void glDepthMask(GLboolean);
extern void glDepthRange(GLdouble,GLdouble);
extern void glDisable(GLenum);
extern void glDisableClientState(GLenum);
extern void glDrawArrays(GLenum,GLint,GLsizei);
extern void glDrawBuffer(GLenum);
extern void glDrawElements(GLenum,GLsizei,GLenum,const void *);
extern void glDrawPixels(GLsizei,GLsizei,GLenum,GLenum,const void *);
extern void glEdgeFlag(GLboolean);
extern void glEdgeFlagPointer(GLsizei,const void *);
extern void glEdgeFlagv(const GLboolean *);
extern void glEnable(GLenum);
extern void glEnableClientState(GLenum);
extern void glEnd();
extern void glEndList();
extern void glEvalCoord1d(GLdouble);
extern void glEvalCoord1dv(const GLdouble *);
extern void glEvalCoord1f(GLfloat);
extern void glEvalCoord1fv(const GLfloat *);
extern void glEvalCoord2d(GLdouble,GLdouble);
extern void glEvalCoord2dv(const GLdouble *);
extern void glEvalCoord2f(GLfloat,GLfloat);
extern void glEvalCoord2fv(const GLfloat *);
extern void glEvalMesh1(GLenum,GLint,GLint);
extern void glEvalMesh2(GLenum,GLint,GLint,GLint,GLint);
extern void glEvalPoint1(GLint);
extern void glEvalPoint2(GLint,GLint);
extern void glFeedbackBuffer(GLsizei,GLenum,GLfloat *);
extern void glFinish();
extern void glFlush();
extern void glFogf(GLenum,GLfloat);
extern void glFogfv(GLenum,const GLfloat *);
extern void glFogi(GLenum,GLint);
extern void glFogiv(GLenum,const GLint *);
extern void glFrontFace(GLenum);
extern void glFrustum(GLdouble,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble);
extern GLuint glGenLists(GLsizei);
extern void glGenTextures(GLsizei,GLuint *);
extern void glGetBooleanv(GLenum,GLboolean *);
extern void glGetClipPlane(GLenum,GLdouble *);
extern void glGetDoublev(GLenum,GLdouble *);
extern GLenum glGetError();
extern void glGetFloatv(GLenum,GLfloat *);
extern void glGetIntegerv(GLenum,GLint *);
extern void glGetLightfv(GLenum,GLenum,GLfloat *);
extern void glGetLightiv(GLenum,GLenum,GLint *);
extern void glGetMapdv(GLenum,GLenum,GLdouble *);
extern void glGetMapfv(GLenum,GLenum,GLfloat *);
extern void glGetMapiv(GLenum,GLenum,GLint *);
extern void glGetMaterialfv(GLenum,GLenum,GLfloat *);
extern void glGetMaterialiv(GLenum,GLenum,GLint *);
extern void glGetPixelMapfv(GLenum,GLfloat *);
extern void glGetPixelMapuiv(GLenum,GLuint *);
extern void glGetPixelMapusv(GLenum,GLushort *);
extern void glGetPointerv(GLenum,void **);
extern void glGetPolygonStipple(GLubyte *);
extern const GLubyte * glGetString(GLenum);
extern void glGetTexEnvfv(GLenum,GLenum,GLfloat *);
extern void glGetTexEnviv(GLenum,GLenum,GLint *);
extern void glGetTexGendv(GLenum,GLenum,GLdouble *);
extern void glGetTexGenfv(GLenum,GLenum,GLfloat *);
extern void glGetTexGeniv(GLenum,GLenum,GLint *);
extern void glGetTexImage(GLenum,GLint,GLenum,GLenum,void *);
extern void glGetTexLevelParameterfv(GLenum,GLint,GLenum,GLfloat *);
extern void glGetTexLevelParameteriv(GLenum,GLint,GLenum,GLint *);
extern void glGetTexParameterfv(GLenum,GLenum,GLfloat *);
extern void glGetTexParameteriv(GLenum,GLenum,GLint *);
extern void glHint(GLenum,GLenum);
extern void glIndexMask(GLuint);
extern void glIndexPointer(GLenum,GLsizei,const void *);
extern void glIndexd(GLdouble);
extern void glIndexdv(const GLdouble *);
extern void glIndexf(GLfloat);
extern void glIndexfv(const GLfloat *);
extern void glIndexi(GLint);
extern void glIndexiv(const GLint *);
extern void glIndexs(GLshort);
extern void glIndexsv(const GLshort *);
extern void glIndexub(GLubyte);
extern void glIndexubv(const GLubyte *);
extern void glInitNames();
extern void glInterleavedArrays(GLenum,GLsizei,const void *);
extern GLboolean glIsEnabled(GLenum);
extern GLboolean glIsList(GLuint);
extern GLboolean glIsTexture(GLuint);
extern void glLightModelf(GLenum,GLfloat);
extern void glLightModelfv(GLenum,const GLfloat *);
extern void glLightModeli(GLenum,GLint);
extern void glLightModeliv(GLenum,const GLint *);
extern void glLightf(GLenum,GLenum,GLfloat);
extern void glLightfv(GLenum,GLenum,const GLfloat *);
extern void glLighti(GLenum,GLenum,GLint);
extern void glLightiv(GLenum,GLenum,const GLint *);
extern void glLineStipple(GLint,GLushort);
extern void glLineWidth(GLfloat);
extern void glListBase(GLuint);
extern void glLoadIdentity();
extern void glLoadMatrixd(const GLdouble *);
extern void glLoadMatrixf(const GLfloat *);
extern void glLoadName(GLuint);
extern void glLogicOp(GLenum);
extern void glMap1d(GLenum,GLdouble,GLdouble,GLint,GLint,const GLdouble *);
extern void glMap1f(GLenum,GLfloat,GLfloat,GLint,GLint,const GLfloat *);
extern void glMap2d(GLenum,GLdouble,GLdouble,GLint,GLint,GLdouble,GLdouble,GLint,GLint,const GLdouble *);
extern void glMap2f(GLenum,GLfloat,GLfloat,GLint,GLint,GLfloat,GLfloat,GLint,GLint,const GLfloat *);
extern void glMapGrid1d(GLint,GLdouble,GLdouble);
extern void glMapGrid1f(GLint,GLfloat,GLfloat);
extern void glMapGrid2d(GLint,GLdouble,GLdouble,GLint,GLdouble,GLdouble);
extern void glMapGrid2f(GLint,GLfloat,GLfloat,GLint,GLfloat,GLfloat);
extern void glMaterialf(GLenum,GLenum,GLfloat);
extern void glMaterialfv(GLenum,GLenum,const GLfloat *);
extern void glMateriali(GLenum,GLenum,GLint);
extern void glMaterialiv(GLenum,GLenum,const GLint *);
extern void glMatrixMode(GLenum);
extern void glMultMatrixd(const GLdouble *);
extern void glMultMatrixf(const GLfloat *);
extern void glNewList(GLuint,GLenum);
extern void glNormal3b(GLbyte,GLbyte,GLbyte);
extern void glNormal3bv(const GLbyte *);
extern void glNormal3d(GLdouble,GLdouble,GLdouble);
extern void glNormal3dv(const GLdouble *);
extern void glNormal3f(GLfloat,GLfloat,GLfloat);
extern void glNormal3fv(const GLfloat *);
extern void glNormal3i(GLint,GLint,GLint);
extern void glNormal3iv(const GLint *);
extern void glNormal3s(GLshort,GLshort,GLshort);
extern void glNormal3sv(const GLshort *);
extern void glNormalPointer(GLenum,GLsizei,const void *);
extern void glOrtho(GLdouble,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble);
extern void glPassThrough(GLfloat);
extern void glPixelMapfv(GLenum,GLsizei,const GLfloat *);
extern void glPixelMapuiv(GLenum,GLsizei,const GLuint *);
extern void glPixelMapusv(GLenum,GLsizei,const GLushort *);
extern void glPixelStoref(GLenum,GLfloat);
extern void glPixelStorei(GLenum,GLint);
extern void glPixelTransferf(GLenum,GLfloat);
extern void glPixelTransferi(GLenum,GLint);
extern void glPixelZoom(GLfloat,GLfloat);
extern void glPointSize(GLfloat);
extern void glPolygonMode(GLenum,GLenum);
extern void glPolygonOffset(GLfloat,GLfloat);
extern void glPolygonStipple(const GLubyte *);
extern void glPopAttrib();
extern void glPopClientAttrib();
extern void glPopMatrix();
extern void glPopName();
extern void glPrioritizeTextures(GLsizei,const GLuint *,const GLfloat *);
extern void glPushAttrib(GLbitfield);
extern void glPushClientAttrib(GLbitfield);
extern void glPushMatrix();
extern void glPushName(GLuint);
extern void glRasterPos2d(GLdouble,GLdouble);
extern void glRasterPos2dv(const GLdouble *);
extern void glRasterPos2f(GLfloat,GLfloat);
extern void glRasterPos2fv(const GLfloat *);
extern void glRasterPos2i(GLint,GLint);
extern void glRasterPos2iv(const GLint *);
extern void glRasterPos2s(GLshort,GLshort);
extern void glRasterPos2sv(const GLshort *);
extern void glRasterPos3d(GLdouble,GLdouble,GLdouble);
extern void glRasterPos3dv(const GLdouble *);
extern void glRasterPos3f(GLfloat,GLfloat,GLfloat);
extern void glRasterPos3fv(const GLfloat *);
extern void glRasterPos3i(GLint,GLint,GLint);
extern void glRasterPos3iv(const GLint *);
extern void glRasterPos3s(GLshort,GLshort,GLshort);
extern void glRasterPos3sv(const GLshort *);
extern void glRasterPos4d(GLdouble,GLdouble,GLdouble,GLdouble);
extern void glRasterPos4dv(const GLdouble *);
extern void glRasterPos4f(GLfloat,GLfloat,GLfloat,GLfloat);
extern void glRasterPos4fv(const GLfloat *);
extern void glRasterPos4i(GLint,GLint,GLint,GLint);
extern void glRasterPos4iv(const GLint *);
extern void glRasterPos4s(GLshort,GLshort,GLshort,GLshort);
extern void glRasterPos4sv(const GLshort *);
extern void glReadBuffer(GLenum);
extern void glReadPixels(GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,void *);
extern void glRectd(GLdouble,GLdouble,GLdouble,GLdouble);
extern void glRectdv(const GLdouble *,const GLdouble *);
extern void glRectf(GLfloat,GLfloat,GLfloat,GLfloat);
extern void glRectfv(const GLfloat *,const GLfloat *);
extern void glRecti(GLint,GLint,GLint,GLint);
extern void glRectiv(const GLint *,const GLint *);
extern void glRects(GLshort,GLshort,GLshort,GLshort);
extern void glRectsv(const GLshort *,const GLshort *);
extern GLint glRenderMode(GLenum);
extern void glRotated(GLdouble,GLdouble,GLdouble,GLdouble);
extern void glRotatef(GLfloat,GLfloat,GLfloat,GLfloat);
extern void glScaled(GLdouble,GLdouble,GLdouble);
extern void glScalef(GLfloat,GLfloat,GLfloat);
extern void glScissor(GLint,GLint,GLsizei,GLsizei);
extern void glSelectBuffer(GLsizei,GLuint *);
extern void glShadeModel(GLenum);
extern void glStencilFunc(GLenum,GLint,GLuint);
extern void glStencilMask(GLuint);
extern void glStencilOp(GLenum,GLenum,GLenum);
extern void glTexCoord1d(GLdouble);
extern void glTexCoord1dv(const GLdouble *);
extern void glTexCoord1f(GLfloat);
extern void glTexCoord1fv(const GLfloat *);
extern void glTexCoord1i(GLint);
extern void glTexCoord1iv(const GLint *);
extern void glTexCoord1s(GLshort);
extern void glTexCoord1sv(const GLshort *);
extern void glTexCoord2d(GLdouble,GLdouble);
extern void glTexCoord2dv(const GLdouble *);
extern void glTexCoord2f(GLfloat,GLfloat);
extern void glTexCoord2fv(const GLfloat *);
extern void glTexCoord2i(GLint,GLint);
extern void glTexCoord2iv(const GLint *);
extern void glTexCoord2s(GLshort,GLshort);
extern void glTexCoord2sv(const GLshort *);
extern void glTexCoord3d(GLdouble,GLdouble,GLdouble);
extern void glTexCoord3dv(const GLdouble *);
extern void glTexCoord3f(GLfloat,GLfloat,GLfloat);
extern void glTexCoord3fv(const GLfloat *);
extern void glTexCoord3i(GLint,GLint,GLint);
extern void glTexCoord3iv(const GLint *);
extern void glTexCoord3s(GLshort,GLshort,GLshort);
extern void glTexCoord3sv(const GLshort *);
extern void glTexCoord4d(GLdouble,GLdouble,GLdouble,GLdouble);
extern void glTexCoord4dv(const GLdouble *);
extern void glTexCoord4f(GLfloat,GLfloat,GLfloat,GLfloat);
extern void glTexCoord4fv(const GLfloat *);
extern void glTexCoord4i(GLint,GLint,GLint,GLint);
extern void glTexCoord4iv(const GLint *);
extern void glTexCoord4s(GLshort,GLshort,GLshort,GLshort);
extern void glTexCoord4sv(const GLshort *);
extern void glTexCoordPointer(GLint,GLenum,GLsizei,const void *);
extern void glTexEnvf(GLenum,GLenum,GLfloat);
extern void glTexEnvfv(GLenum,GLenum,const GLfloat *);
extern void glTexEnvi(GLenum,GLenum,GLint);
extern void glTexEnviv(GLenum,GLenum,const GLint *);
extern void glTexGend(GLenum,GLenum,GLdouble);
extern void glTexGendv(GLenum,GLenum,const GLdouble *);
extern void glTexGenf(GLenum,GLenum,GLfloat);
extern void glTexGenfv(GLenum,GLenum,const GLfloat *);
extern void glTexGeni(GLenum,GLenum,GLint);
extern void glTexGeniv(GLenum,GLenum,const GLint *);
extern void glTexImage1D(GLenum,GLint,GLint,GLsizei,GLint,GLenum,GLenum,const void *);
extern void glTexImage2D(GLenum,GLint,GLint,GLsizei,GLsizei,GLint,GLenum,GLenum,const void *);
extern void glTexParameterf(GLenum,GLenum,GLfloat);
extern void glTexParameterfv(GLenum,GLenum,const GLfloat *);
extern void glTexParameteri(GLenum,GLenum,GLint);
extern void glTexParameteriv(GLenum,GLenum,const GLint *);
extern void glTexSubImage1D(GLenum,GLint,GLint,GLsizei,GLenum,GLenum,const void *);
extern void glTexSubImage2D(GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,const void *);
extern void glTranslated(GLdouble,GLdouble,GLdouble);
extern void glTranslatef(GLfloat,GLfloat,GLfloat);
extern void glVertex2d(GLdouble,GLdouble);
extern void glVertex2dv(const GLdouble *);
extern void glVertex2f(GLfloat,GLfloat);
extern void glVertex2fv(const GLfloat *);
extern void glVertex2i(GLint,GLint);
extern void glVertex2iv(const GLint *);
extern void glVertex2s(GLshort,GLshort);
extern void glVertex2sv(const GLshort *);
extern void glVertex3d(GLdouble,GLdouble,GLdouble);
extern void glVertex3dv(const GLdouble *);
extern void glVertex3f(GLfloat,GLfloat,GLfloat);
extern void glVertex3fv(const GLfloat *);
extern void glVertex3i(GLint,GLint,GLint);
extern void glVertex3iv(const GLint *);
extern void glVertex3s(GLshort,GLshort,GLshort);
extern void glVertex3sv(const GLshort *);
extern void glVertex4d(GLdouble,GLdouble,GLdouble,GLdouble);
extern void glVertex4dv(const GLdouble *);
extern void glVertex4f(GLfloat,GLfloat,GLfloat,GLfloat);
extern void glVertex4fv(const GLfloat *);
extern void glVertex4i(GLint,GLint,GLint,GLint);
extern void glVertex4iv(const GLint *);
extern void glVertex4s(GLshort,GLshort,GLshort,GLshort);
extern void glVertex4sv(const GLshort *);
extern void glVertexPointer(GLint,GLenum,GLsizei,const void *);
extern void glViewport(GLint,GLint,GLsizei,GLsizei);
}
namespace gl{

#ifndef	GL_HPP_FUNDEF_Accum
#define GL_HPP_FUNDEF_Accum
typedef void (*PFNGLACCUMPROC_HPP)(GLenum,GLfloat);
static inline void Accum(GLenum op1,GLfloat value1)
{
	static PFNGLACCUMPROC_HPP fn=reinterpret_cast<PFNGLACCUMPROC_HPP>(_impl::_get_proc_address("glAccum",3,1));
	 fn(op1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ActiveTexture
#define GL_HPP_FUNDEF_ActiveTexture
typedef void (*PFNGLACTIVETEXTUREPROC_HPP)(GLenum);
static inline void ActiveTexture(GLenum texture1)
{
	static PFNGLACTIVETEXTUREPROC_HPP fn=reinterpret_cast<PFNGLACTIVETEXTUREPROC_HPP>(_impl::_get_proc_address("glActiveTexture",3,1));
	 fn(texture1);
}
#endif

#ifndef	GL_HPP_FUNDEF_AlphaFunc
#define GL_HPP_FUNDEF_AlphaFunc
typedef void (*PFNGLALPHAFUNCPROC_HPP)(GLenum,GLfloat);
static inline void AlphaFunc(GLenum func1,GLfloat ref1)
{
	static PFNGLALPHAFUNCPROC_HPP fn=reinterpret_cast<PFNGLALPHAFUNCPROC_HPP>(_impl::_get_proc_address("glAlphaFunc",3,1));
	 fn(func1,ref1);
}
#endif

#ifndef	GL_HPP_FUNDEF_AreTexturesResident
#define GL_HPP_FUNDEF_AreTexturesResident
typedef GLboolean (*PFNGLARETEXTURESRESIDENTPROC_HPP)(GLsizei,const GLuint *,GLboolean *);
static inline GLboolean AreTexturesResident(GLsizei n1,const GLuint * textures1,GLboolean * residences1)
{
	static PFNGLARETEXTURESRESIDENTPROC_HPP fn=reinterpret_cast<PFNGLARETEXTURESRESIDENTPROC_HPP>(_impl::_get_proc_address("glAreTexturesResident",3,1));
	return fn(n1,textures1,residences1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ArrayElement
#define GL_HPP_FUNDEF_ArrayElement
typedef void (*PFNGLARRAYELEMENTPROC_HPP)(GLint);
static inline void ArrayElement(GLint i1)
{
	static PFNGLARRAYELEMENTPROC_HPP fn=reinterpret_cast<PFNGLARRAYELEMENTPROC_HPP>(_impl::_get_proc_address("glArrayElement",3,1));
	 fn(i1);
}
#endif

#ifndef	GL_HPP_FUNDEF_AttachShader
#define GL_HPP_FUNDEF_AttachShader
typedef void (*PFNGLATTACHSHADERPROC_HPP)(GLuint,GLuint);
static inline void AttachShader(GLuint program1,GLuint shader1)
{
	static PFNGLATTACHSHADERPROC_HPP fn=reinterpret_cast<PFNGLATTACHSHADERPROC_HPP>(_impl::_get_proc_address("glAttachShader",3,1));
	 fn(program1,shader1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Begin
#define GL_HPP_FUNDEF_Begin
typedef void (*PFNGLBEGINPROC_HPP)(GLenum);
static inline void Begin(GLenum mode1)
{
	static PFNGLBEGINPROC_HPP fn=reinterpret_cast<PFNGLBEGINPROC_HPP>(_impl::_get_proc_address("glBegin",3,1));
	 fn(mode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BeginConditionalRender
#define GL_HPP_FUNDEF_BeginConditionalRender
typedef void (*PFNGLBEGINCONDITIONALRENDERPROC_HPP)(GLuint,GLenum);
static inline void BeginConditionalRender(GLuint id1,GLenum mode1)
{
	static PFNGLBEGINCONDITIONALRENDERPROC_HPP fn=reinterpret_cast<PFNGLBEGINCONDITIONALRENDERPROC_HPP>(_impl::_get_proc_address("glBeginConditionalRender",3,1));
	 fn(id1,mode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BeginQuery
#define GL_HPP_FUNDEF_BeginQuery
typedef void (*PFNGLBEGINQUERYPROC_HPP)(GLenum,GLuint);
static inline void BeginQuery(GLenum target1,GLuint id1)
{
	static PFNGLBEGINQUERYPROC_HPP fn=reinterpret_cast<PFNGLBEGINQUERYPROC_HPP>(_impl::_get_proc_address("glBeginQuery",3,1));
	 fn(target1,id1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BeginTransformFeedback
#define GL_HPP_FUNDEF_BeginTransformFeedback
typedef void (*PFNGLBEGINTRANSFORMFEEDBACKPROC_HPP)(GLenum);
static inline void BeginTransformFeedback(GLenum primitiveMode1)
{
	static PFNGLBEGINTRANSFORMFEEDBACKPROC_HPP fn=reinterpret_cast<PFNGLBEGINTRANSFORMFEEDBACKPROC_HPP>(_impl::_get_proc_address("glBeginTransformFeedback",3,1));
	 fn(primitiveMode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindAttribLocation
#define GL_HPP_FUNDEF_BindAttribLocation
typedef void (*PFNGLBINDATTRIBLOCATIONPROC_HPP)(GLuint,GLuint,const GLchar *);
static inline void BindAttribLocation(GLuint program1,GLuint index1,const GLchar * name1)
{
	static PFNGLBINDATTRIBLOCATIONPROC_HPP fn=reinterpret_cast<PFNGLBINDATTRIBLOCATIONPROC_HPP>(_impl::_get_proc_address("glBindAttribLocation",3,1));
	 fn(program1,index1,name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindBuffer
#define GL_HPP_FUNDEF_BindBuffer
typedef void (*PFNGLBINDBUFFERPROC_HPP)(GLenum,GLuint);
static inline void BindBuffer(GLenum target1,GLuint buffer1)
{
	static PFNGLBINDBUFFERPROC_HPP fn=reinterpret_cast<PFNGLBINDBUFFERPROC_HPP>(_impl::_get_proc_address("glBindBuffer",3,1));
	 fn(target1,buffer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindBufferBase
#define GL_HPP_FUNDEF_BindBufferBase
typedef void (*PFNGLBINDBUFFERBASEPROC_HPP)(GLenum,GLuint,GLuint);
static inline void BindBufferBase(GLenum target1,GLuint index1,GLuint buffer1)
{
	static PFNGLBINDBUFFERBASEPROC_HPP fn=reinterpret_cast<PFNGLBINDBUFFERBASEPROC_HPP>(_impl::_get_proc_address("glBindBufferBase",3,1));
	 fn(target1,index1,buffer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindBufferRange
#define GL_HPP_FUNDEF_BindBufferRange
typedef void (*PFNGLBINDBUFFERRANGEPROC_HPP)(GLenum,GLuint,GLuint,GLintptr,GLsizeiptr);
static inline void BindBufferRange(GLenum target1,GLuint index1,GLuint buffer1,GLintptr offset1,GLsizeiptr size1)
{
	static PFNGLBINDBUFFERRANGEPROC_HPP fn=reinterpret_cast<PFNGLBINDBUFFERRANGEPROC_HPP>(_impl::_get_proc_address("glBindBufferRange",3,1));
	 fn(target1,index1,buffer1,offset1,size1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindFragDataLocation
#define GL_HPP_FUNDEF_BindFragDataLocation
typedef void (*PFNGLBINDFRAGDATALOCATIONPROC_HPP)(GLuint,GLuint,const GLchar *);
static inline void BindFragDataLocation(GLuint program1,GLuint color1,const GLchar * name1)
{
	static PFNGLBINDFRAGDATALOCATIONPROC_HPP fn=reinterpret_cast<PFNGLBINDFRAGDATALOCATIONPROC_HPP>(_impl::_get_proc_address("glBindFragDataLocation",3,1));
	 fn(program1,color1,name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindFramebuffer
#define GL_HPP_FUNDEF_BindFramebuffer
typedef void (*PFNGLBINDFRAMEBUFFERPROC_HPP)(GLenum,GLuint);
static inline void BindFramebuffer(GLenum target1,GLuint framebuffer1)
{
	static PFNGLBINDFRAMEBUFFERPROC_HPP fn=reinterpret_cast<PFNGLBINDFRAMEBUFFERPROC_HPP>(_impl::_get_proc_address("glBindFramebuffer",3,1));
	 fn(target1,framebuffer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindRenderbuffer
#define GL_HPP_FUNDEF_BindRenderbuffer
typedef void (*PFNGLBINDRENDERBUFFERPROC_HPP)(GLenum,GLuint);
static inline void BindRenderbuffer(GLenum target1,GLuint renderbuffer1)
{
	static PFNGLBINDRENDERBUFFERPROC_HPP fn=reinterpret_cast<PFNGLBINDRENDERBUFFERPROC_HPP>(_impl::_get_proc_address("glBindRenderbuffer",3,1));
	 fn(target1,renderbuffer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindTexture
#define GL_HPP_FUNDEF_BindTexture
typedef void (*PFNGLBINDTEXTUREPROC_HPP)(GLenum,GLuint);
static inline void BindTexture(GLenum target1,GLuint texture1)
{
	static PFNGLBINDTEXTUREPROC_HPP fn=reinterpret_cast<PFNGLBINDTEXTUREPROC_HPP>(_impl::_get_proc_address("glBindTexture",3,1));
	 fn(target1,texture1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BindVertexArray
#define GL_HPP_FUNDEF_BindVertexArray
typedef void (*PFNGLBINDVERTEXARRAYPROC_HPP)(GLuint);
static inline void BindVertexArray(GLuint array1)
{
	static PFNGLBINDVERTEXARRAYPROC_HPP fn=reinterpret_cast<PFNGLBINDVERTEXARRAYPROC_HPP>(_impl::_get_proc_address("glBindVertexArray",3,1));
	 fn(array1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Bitmap
#define GL_HPP_FUNDEF_Bitmap
typedef void (*PFNGLBITMAPPROC_HPP)(GLsizei,GLsizei,GLfloat,GLfloat,GLfloat,GLfloat,const GLubyte *);
static inline void Bitmap(GLsizei width1,GLsizei height1,GLfloat xorig1,GLfloat yorig1,GLfloat xmove1,GLfloat ymove1,const GLubyte * bitmap1)
{
	static PFNGLBITMAPPROC_HPP fn=reinterpret_cast<PFNGLBITMAPPROC_HPP>(_impl::_get_proc_address("glBitmap",3,1));
	 fn(width1,height1,xorig1,yorig1,xmove1,ymove1,bitmap1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BlendColor
#define GL_HPP_FUNDEF_BlendColor
typedef void (*PFNGLBLENDCOLORPROC_HPP)(GLfloat,GLfloat,GLfloat,GLfloat);
static inline void BlendColor(GLfloat red1,GLfloat green1,GLfloat blue1,GLfloat alpha1)
{
	static PFNGLBLENDCOLORPROC_HPP fn=reinterpret_cast<PFNGLBLENDCOLORPROC_HPP>(_impl::_get_proc_address("glBlendColor",3,1));
	 fn(red1,green1,blue1,alpha1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BlendEquation
#define GL_HPP_FUNDEF_BlendEquation
typedef void (*PFNGLBLENDEQUATIONPROC_HPP)(GLenum);
static inline void BlendEquation(GLenum mode1)
{
	static PFNGLBLENDEQUATIONPROC_HPP fn=reinterpret_cast<PFNGLBLENDEQUATIONPROC_HPP>(_impl::_get_proc_address("glBlendEquation",3,1));
	 fn(mode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BlendEquationSeparate
#define GL_HPP_FUNDEF_BlendEquationSeparate
typedef void (*PFNGLBLENDEQUATIONSEPARATEPROC_HPP)(GLenum,GLenum);
static inline void BlendEquationSeparate(GLenum modeRGB1,GLenum modeAlpha1)
{
	static PFNGLBLENDEQUATIONSEPARATEPROC_HPP fn=reinterpret_cast<PFNGLBLENDEQUATIONSEPARATEPROC_HPP>(_impl::_get_proc_address("glBlendEquationSeparate",3,1));
	 fn(modeRGB1,modeAlpha1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BlendFunc
#define GL_HPP_FUNDEF_BlendFunc
typedef void (*PFNGLBLENDFUNCPROC_HPP)(GLenum,GLenum);
static inline void BlendFunc(GLenum sfactor1,GLenum dfactor1)
{
	static PFNGLBLENDFUNCPROC_HPP fn=reinterpret_cast<PFNGLBLENDFUNCPROC_HPP>(_impl::_get_proc_address("glBlendFunc",3,1));
	 fn(sfactor1,dfactor1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BlendFuncSeparate
#define GL_HPP_FUNDEF_BlendFuncSeparate
typedef void (*PFNGLBLENDFUNCSEPARATEPROC_HPP)(GLenum,GLenum,GLenum,GLenum);
static inline void BlendFuncSeparate(GLenum sfactorRGB1,GLenum dfactorRGB1,GLenum sfactorAlpha1,GLenum dfactorAlpha1)
{
	static PFNGLBLENDFUNCSEPARATEPROC_HPP fn=reinterpret_cast<PFNGLBLENDFUNCSEPARATEPROC_HPP>(_impl::_get_proc_address("glBlendFuncSeparate",3,1));
	 fn(sfactorRGB1,dfactorRGB1,sfactorAlpha1,dfactorAlpha1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BlitFramebuffer
#define GL_HPP_FUNDEF_BlitFramebuffer
typedef void (*PFNGLBLITFRAMEBUFFERPROC_HPP)(GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLbitfield,GLenum);
static inline void BlitFramebuffer(GLint srcX01,GLint srcY01,GLint srcX11,GLint srcY11,GLint dstX01,GLint dstY01,GLint dstX11,GLint dstY11,GLbitfield mask1,GLenum filter1)
{
	static PFNGLBLITFRAMEBUFFERPROC_HPP fn=reinterpret_cast<PFNGLBLITFRAMEBUFFERPROC_HPP>(_impl::_get_proc_address("glBlitFramebuffer",3,1));
	 fn(srcX01,srcY01,srcX11,srcY11,dstX01,dstY01,dstX11,dstY11,mask1,filter1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BufferData
#define GL_HPP_FUNDEF_BufferData
typedef void (*PFNGLBUFFERDATAPROC_HPP)(GLenum,GLsizeiptr,const void *,GLenum);
static inline void BufferData(GLenum target1,GLsizeiptr size1,const void * data1,GLenum usage1)
{
	static PFNGLBUFFERDATAPROC_HPP fn=reinterpret_cast<PFNGLBUFFERDATAPROC_HPP>(_impl::_get_proc_address("glBufferData",3,1));
	 fn(target1,size1,data1,usage1);
}
#endif

#ifndef	GL_HPP_FUNDEF_BufferSubData
#define GL_HPP_FUNDEF_BufferSubData
typedef void (*PFNGLBUFFERSUBDATAPROC_HPP)(GLenum,GLintptr,GLsizeiptr,const void *);
static inline void BufferSubData(GLenum target1,GLintptr offset1,GLsizeiptr size1,const void * data1)
{
	static PFNGLBUFFERSUBDATAPROC_HPP fn=reinterpret_cast<PFNGLBUFFERSUBDATAPROC_HPP>(_impl::_get_proc_address("glBufferSubData",3,1));
	 fn(target1,offset1,size1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CallList
#define GL_HPP_FUNDEF_CallList
typedef void (*PFNGLCALLLISTPROC_HPP)(GLuint);
static inline void CallList(GLuint list1)
{
	static PFNGLCALLLISTPROC_HPP fn=reinterpret_cast<PFNGLCALLLISTPROC_HPP>(_impl::_get_proc_address("glCallList",3,1));
	 fn(list1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CallLists
#define GL_HPP_FUNDEF_CallLists
typedef void (*PFNGLCALLLISTSPROC_HPP)(GLsizei,GLenum,const void *);
static inline void CallLists(GLsizei n1,GLenum type1,const void * lists1)
{
	static PFNGLCALLLISTSPROC_HPP fn=reinterpret_cast<PFNGLCALLLISTSPROC_HPP>(_impl::_get_proc_address("glCallLists",3,1));
	 fn(n1,type1,lists1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CheckFramebufferStatus
#define GL_HPP_FUNDEF_CheckFramebufferStatus
typedef GLenum (*PFNGLCHECKFRAMEBUFFERSTATUSPROC_HPP)(GLenum);
static inline GLenum CheckFramebufferStatus(GLenum target1)
{
	static PFNGLCHECKFRAMEBUFFERSTATUSPROC_HPP fn=reinterpret_cast<PFNGLCHECKFRAMEBUFFERSTATUSPROC_HPP>(_impl::_get_proc_address("glCheckFramebufferStatus",3,1));
	return fn(target1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ClampColor
#define GL_HPP_FUNDEF_ClampColor
typedef void (*PFNGLCLAMPCOLORPROC_HPP)(GLenum,GLenum);
static inline void ClampColor(GLenum target1,GLenum clamp1)
{
	static PFNGLCLAMPCOLORPROC_HPP fn=reinterpret_cast<PFNGLCLAMPCOLORPROC_HPP>(_impl::_get_proc_address("glClampColor",3,1));
	 fn(target1,clamp1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Clear
#define GL_HPP_FUNDEF_Clear
typedef void (*PFNGLCLEARPROC_HPP)(GLbitfield);
static inline void Clear(GLbitfield mask1)
{
	static PFNGLCLEARPROC_HPP fn=reinterpret_cast<PFNGLCLEARPROC_HPP>(_impl::_get_proc_address("glClear",3,1));
	 fn(mask1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ClearAccum
#define GL_HPP_FUNDEF_ClearAccum
typedef void (*PFNGLCLEARACCUMPROC_HPP)(GLfloat,GLfloat,GLfloat,GLfloat);
static inline void ClearAccum(GLfloat red1,GLfloat green1,GLfloat blue1,GLfloat alpha1)
{
	static PFNGLCLEARACCUMPROC_HPP fn=reinterpret_cast<PFNGLCLEARACCUMPROC_HPP>(_impl::_get_proc_address("glClearAccum",3,1));
	 fn(red1,green1,blue1,alpha1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ClearBufferfi
#define GL_HPP_FUNDEF_ClearBufferfi
typedef void (*PFNGLCLEARBUFFERFIPROC_HPP)(GLenum,GLint,GLfloat,GLint);
static inline void ClearBufferfi(GLenum buffer1,GLint drawbuffer1,GLfloat depth1,GLint stencil1)
{
	static PFNGLCLEARBUFFERFIPROC_HPP fn=reinterpret_cast<PFNGLCLEARBUFFERFIPROC_HPP>(_impl::_get_proc_address("glClearBufferfi",3,1));
	 fn(buffer1,drawbuffer1,depth1,stencil1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ClearBufferfv
#define GL_HPP_FUNDEF_ClearBufferfv
typedef void (*PFNGLCLEARBUFFERFVPROC_HPP)(GLenum,GLint,const GLfloat *);
static inline void ClearBufferfv(GLenum buffer1,GLint drawbuffer1,const GLfloat * value1)
{
	static PFNGLCLEARBUFFERFVPROC_HPP fn=reinterpret_cast<PFNGLCLEARBUFFERFVPROC_HPP>(_impl::_get_proc_address("glClearBufferfv",3,1));
	 fn(buffer1,drawbuffer1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ClearBufferiv
#define GL_HPP_FUNDEF_ClearBufferiv
typedef void (*PFNGLCLEARBUFFERIVPROC_HPP)(GLenum,GLint,const GLint *);
static inline void ClearBufferiv(GLenum buffer1,GLint drawbuffer1,const GLint * value1)
{
	static PFNGLCLEARBUFFERIVPROC_HPP fn=reinterpret_cast<PFNGLCLEARBUFFERIVPROC_HPP>(_impl::_get_proc_address("glClearBufferiv",3,1));
	 fn(buffer1,drawbuffer1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ClearBufferuiv
#define GL_HPP_FUNDEF_ClearBufferuiv
typedef void (*PFNGLCLEARBUFFERUIVPROC_HPP)(GLenum,GLint,const GLuint *);
static inline void ClearBufferuiv(GLenum buffer1,GLint drawbuffer1,const GLuint * value1)
{
	static PFNGLCLEARBUFFERUIVPROC_HPP fn=reinterpret_cast<PFNGLCLEARBUFFERUIVPROC_HPP>(_impl::_get_proc_address("glClearBufferuiv",3,1));
	 fn(buffer1,drawbuffer1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ClearColor
#define GL_HPP_FUNDEF_ClearColor
typedef void (*PFNGLCLEARCOLORPROC_HPP)(GLfloat,GLfloat,GLfloat,GLfloat);
static inline void ClearColor(GLfloat red1,GLfloat green1,GLfloat blue1,GLfloat alpha1)
{
	static PFNGLCLEARCOLORPROC_HPP fn=reinterpret_cast<PFNGLCLEARCOLORPROC_HPP>(_impl::_get_proc_address("glClearColor",3,1));
	 fn(red1,green1,blue1,alpha1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ClearDepth
#define GL_HPP_FUNDEF_ClearDepth
typedef void (*PFNGLCLEARDEPTHPROC_HPP)(GLdouble);
static inline void ClearDepth(GLdouble depth1)
{
	static PFNGLCLEARDEPTHPROC_HPP fn=reinterpret_cast<PFNGLCLEARDEPTHPROC_HPP>(_impl::_get_proc_address("glClearDepth",3,1));
	 fn(depth1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ClearIndex
#define GL_HPP_FUNDEF_ClearIndex
typedef void (*PFNGLCLEARINDEXPROC_HPP)(GLfloat);
static inline void ClearIndex(GLfloat c1)
{
	static PFNGLCLEARINDEXPROC_HPP fn=reinterpret_cast<PFNGLCLEARINDEXPROC_HPP>(_impl::_get_proc_address("glClearIndex",3,1));
	 fn(c1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ClearStencil
#define GL_HPP_FUNDEF_ClearStencil
typedef void (*PFNGLCLEARSTENCILPROC_HPP)(GLint);
static inline void ClearStencil(GLint s1)
{
	static PFNGLCLEARSTENCILPROC_HPP fn=reinterpret_cast<PFNGLCLEARSTENCILPROC_HPP>(_impl::_get_proc_address("glClearStencil",3,1));
	 fn(s1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ClientActiveTexture
#define GL_HPP_FUNDEF_ClientActiveTexture
typedef void (*PFNGLCLIENTACTIVETEXTUREPROC_HPP)(GLenum);
static inline void ClientActiveTexture(GLenum texture1)
{
	static PFNGLCLIENTACTIVETEXTUREPROC_HPP fn=reinterpret_cast<PFNGLCLIENTACTIVETEXTUREPROC_HPP>(_impl::_get_proc_address("glClientActiveTexture",3,1));
	 fn(texture1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ClipPlane
#define GL_HPP_FUNDEF_ClipPlane
typedef void (*PFNGLCLIPPLANEPROC_HPP)(GLenum,const GLdouble *);
static inline void ClipPlane(GLenum plane1,const GLdouble * equation1)
{
	static PFNGLCLIPPLANEPROC_HPP fn=reinterpret_cast<PFNGLCLIPPLANEPROC_HPP>(_impl::_get_proc_address("glClipPlane",3,1));
	 fn(plane1,equation1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color3b
#define GL_HPP_FUNDEF_Color3b
typedef void (*PFNGLCOLOR3BPROC_HPP)(GLbyte,GLbyte,GLbyte);
static inline void Color3b(GLbyte red1,GLbyte green1,GLbyte blue1)
{
	static PFNGLCOLOR3BPROC_HPP fn=reinterpret_cast<PFNGLCOLOR3BPROC_HPP>(_impl::_get_proc_address("glColor3b",3,1));
	 fn(red1,green1,blue1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color3bv
#define GL_HPP_FUNDEF_Color3bv
typedef void (*PFNGLCOLOR3BVPROC_HPP)(const GLbyte *);
static inline void Color3bv(const GLbyte * v1)
{
	static PFNGLCOLOR3BVPROC_HPP fn=reinterpret_cast<PFNGLCOLOR3BVPROC_HPP>(_impl::_get_proc_address("glColor3bv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color3d
#define GL_HPP_FUNDEF_Color3d
typedef void (*PFNGLCOLOR3DPROC_HPP)(GLdouble,GLdouble,GLdouble);
static inline void Color3d(GLdouble red1,GLdouble green1,GLdouble blue1)
{
	static PFNGLCOLOR3DPROC_HPP fn=reinterpret_cast<PFNGLCOLOR3DPROC_HPP>(_impl::_get_proc_address("glColor3d",3,1));
	 fn(red1,green1,blue1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color3dv
#define GL_HPP_FUNDEF_Color3dv
typedef void (*PFNGLCOLOR3DVPROC_HPP)(const GLdouble *);
static inline void Color3dv(const GLdouble * v1)
{
	static PFNGLCOLOR3DVPROC_HPP fn=reinterpret_cast<PFNGLCOLOR3DVPROC_HPP>(_impl::_get_proc_address("glColor3dv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color3f
#define GL_HPP_FUNDEF_Color3f
typedef void (*PFNGLCOLOR3FPROC_HPP)(GLfloat,GLfloat,GLfloat);
static inline void Color3f(GLfloat red1,GLfloat green1,GLfloat blue1)
{
	static PFNGLCOLOR3FPROC_HPP fn=reinterpret_cast<PFNGLCOLOR3FPROC_HPP>(_impl::_get_proc_address("glColor3f",3,1));
	 fn(red1,green1,blue1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color3fv
#define GL_HPP_FUNDEF_Color3fv
typedef void (*PFNGLCOLOR3FVPROC_HPP)(const GLfloat *);
static inline void Color3fv(const GLfloat * v1)
{
	static PFNGLCOLOR3FVPROC_HPP fn=reinterpret_cast<PFNGLCOLOR3FVPROC_HPP>(_impl::_get_proc_address("glColor3fv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color3i
#define GL_HPP_FUNDEF_Color3i
typedef void (*PFNGLCOLOR3IPROC_HPP)(GLint,GLint,GLint);
static inline void Color3i(GLint red1,GLint green1,GLint blue1)
{
	static PFNGLCOLOR3IPROC_HPP fn=reinterpret_cast<PFNGLCOLOR3IPROC_HPP>(_impl::_get_proc_address("glColor3i",3,1));
	 fn(red1,green1,blue1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color3iv
#define GL_HPP_FUNDEF_Color3iv
typedef void (*PFNGLCOLOR3IVPROC_HPP)(const GLint *);
static inline void Color3iv(const GLint * v1)
{
	static PFNGLCOLOR3IVPROC_HPP fn=reinterpret_cast<PFNGLCOLOR3IVPROC_HPP>(_impl::_get_proc_address("glColor3iv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color3s
#define GL_HPP_FUNDEF_Color3s
typedef void (*PFNGLCOLOR3SPROC_HPP)(GLshort,GLshort,GLshort);
static inline void Color3s(GLshort red1,GLshort green1,GLshort blue1)
{
	static PFNGLCOLOR3SPROC_HPP fn=reinterpret_cast<PFNGLCOLOR3SPROC_HPP>(_impl::_get_proc_address("glColor3s",3,1));
	 fn(red1,green1,blue1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color3sv
#define GL_HPP_FUNDEF_Color3sv
typedef void (*PFNGLCOLOR3SVPROC_HPP)(const GLshort *);
static inline void Color3sv(const GLshort * v1)
{
	static PFNGLCOLOR3SVPROC_HPP fn=reinterpret_cast<PFNGLCOLOR3SVPROC_HPP>(_impl::_get_proc_address("glColor3sv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color3ub
#define GL_HPP_FUNDEF_Color3ub
typedef void (*PFNGLCOLOR3UBPROC_HPP)(GLubyte,GLubyte,GLubyte);
static inline void Color3ub(GLubyte red1,GLubyte green1,GLubyte blue1)
{
	static PFNGLCOLOR3UBPROC_HPP fn=reinterpret_cast<PFNGLCOLOR3UBPROC_HPP>(_impl::_get_proc_address("glColor3ub",3,1));
	 fn(red1,green1,blue1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color3ubv
#define GL_HPP_FUNDEF_Color3ubv
typedef void (*PFNGLCOLOR3UBVPROC_HPP)(const GLubyte *);
static inline void Color3ubv(const GLubyte * v1)
{
	static PFNGLCOLOR3UBVPROC_HPP fn=reinterpret_cast<PFNGLCOLOR3UBVPROC_HPP>(_impl::_get_proc_address("glColor3ubv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color3ui
#define GL_HPP_FUNDEF_Color3ui
typedef void (*PFNGLCOLOR3UIPROC_HPP)(GLuint,GLuint,GLuint);
static inline void Color3ui(GLuint red1,GLuint green1,GLuint blue1)
{
	static PFNGLCOLOR3UIPROC_HPP fn=reinterpret_cast<PFNGLCOLOR3UIPROC_HPP>(_impl::_get_proc_address("glColor3ui",3,1));
	 fn(red1,green1,blue1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color3uiv
#define GL_HPP_FUNDEF_Color3uiv
typedef void (*PFNGLCOLOR3UIVPROC_HPP)(const GLuint *);
static inline void Color3uiv(const GLuint * v1)
{
	static PFNGLCOLOR3UIVPROC_HPP fn=reinterpret_cast<PFNGLCOLOR3UIVPROC_HPP>(_impl::_get_proc_address("glColor3uiv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color3us
#define GL_HPP_FUNDEF_Color3us
typedef void (*PFNGLCOLOR3USPROC_HPP)(GLushort,GLushort,GLushort);
static inline void Color3us(GLushort red1,GLushort green1,GLushort blue1)
{
	static PFNGLCOLOR3USPROC_HPP fn=reinterpret_cast<PFNGLCOLOR3USPROC_HPP>(_impl::_get_proc_address("glColor3us",3,1));
	 fn(red1,green1,blue1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color3usv
#define GL_HPP_FUNDEF_Color3usv
typedef void (*PFNGLCOLOR3USVPROC_HPP)(const GLushort *);
static inline void Color3usv(const GLushort * v1)
{
	static PFNGLCOLOR3USVPROC_HPP fn=reinterpret_cast<PFNGLCOLOR3USVPROC_HPP>(_impl::_get_proc_address("glColor3usv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color4b
#define GL_HPP_FUNDEF_Color4b
typedef void (*PFNGLCOLOR4BPROC_HPP)(GLbyte,GLbyte,GLbyte,GLbyte);
static inline void Color4b(GLbyte red1,GLbyte green1,GLbyte blue1,GLbyte alpha1)
{
	static PFNGLCOLOR4BPROC_HPP fn=reinterpret_cast<PFNGLCOLOR4BPROC_HPP>(_impl::_get_proc_address("glColor4b",3,1));
	 fn(red1,green1,blue1,alpha1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color4bv
#define GL_HPP_FUNDEF_Color4bv
typedef void (*PFNGLCOLOR4BVPROC_HPP)(const GLbyte *);
static inline void Color4bv(const GLbyte * v1)
{
	static PFNGLCOLOR4BVPROC_HPP fn=reinterpret_cast<PFNGLCOLOR4BVPROC_HPP>(_impl::_get_proc_address("glColor4bv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color4d
#define GL_HPP_FUNDEF_Color4d
typedef void (*PFNGLCOLOR4DPROC_HPP)(GLdouble,GLdouble,GLdouble,GLdouble);
static inline void Color4d(GLdouble red1,GLdouble green1,GLdouble blue1,GLdouble alpha1)
{
	static PFNGLCOLOR4DPROC_HPP fn=reinterpret_cast<PFNGLCOLOR4DPROC_HPP>(_impl::_get_proc_address("glColor4d",3,1));
	 fn(red1,green1,blue1,alpha1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color4dv
#define GL_HPP_FUNDEF_Color4dv
typedef void (*PFNGLCOLOR4DVPROC_HPP)(const GLdouble *);
static inline void Color4dv(const GLdouble * v1)
{
	static PFNGLCOLOR4DVPROC_HPP fn=reinterpret_cast<PFNGLCOLOR4DVPROC_HPP>(_impl::_get_proc_address("glColor4dv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color4f
#define GL_HPP_FUNDEF_Color4f
typedef void (*PFNGLCOLOR4FPROC_HPP)(GLfloat,GLfloat,GLfloat,GLfloat);
static inline void Color4f(GLfloat red1,GLfloat green1,GLfloat blue1,GLfloat alpha1)
{
	static PFNGLCOLOR4FPROC_HPP fn=reinterpret_cast<PFNGLCOLOR4FPROC_HPP>(_impl::_get_proc_address("glColor4f",3,1));
	 fn(red1,green1,blue1,alpha1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color4fv
#define GL_HPP_FUNDEF_Color4fv
typedef void (*PFNGLCOLOR4FVPROC_HPP)(const GLfloat *);
static inline void Color4fv(const GLfloat * v1)
{
	static PFNGLCOLOR4FVPROC_HPP fn=reinterpret_cast<PFNGLCOLOR4FVPROC_HPP>(_impl::_get_proc_address("glColor4fv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color4i
#define GL_HPP_FUNDEF_Color4i
typedef void (*PFNGLCOLOR4IPROC_HPP)(GLint,GLint,GLint,GLint);
static inline void Color4i(GLint red1,GLint green1,GLint blue1,GLint alpha1)
{
	static PFNGLCOLOR4IPROC_HPP fn=reinterpret_cast<PFNGLCOLOR4IPROC_HPP>(_impl::_get_proc_address("glColor4i",3,1));
	 fn(red1,green1,blue1,alpha1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color4iv
#define GL_HPP_FUNDEF_Color4iv
typedef void (*PFNGLCOLOR4IVPROC_HPP)(const GLint *);
static inline void Color4iv(const GLint * v1)
{
	static PFNGLCOLOR4IVPROC_HPP fn=reinterpret_cast<PFNGLCOLOR4IVPROC_HPP>(_impl::_get_proc_address("glColor4iv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color4s
#define GL_HPP_FUNDEF_Color4s
typedef void (*PFNGLCOLOR4SPROC_HPP)(GLshort,GLshort,GLshort,GLshort);
static inline void Color4s(GLshort red1,GLshort green1,GLshort blue1,GLshort alpha1)
{
	static PFNGLCOLOR4SPROC_HPP fn=reinterpret_cast<PFNGLCOLOR4SPROC_HPP>(_impl::_get_proc_address("glColor4s",3,1));
	 fn(red1,green1,blue1,alpha1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color4sv
#define GL_HPP_FUNDEF_Color4sv
typedef void (*PFNGLCOLOR4SVPROC_HPP)(const GLshort *);
static inline void Color4sv(const GLshort * v1)
{
	static PFNGLCOLOR4SVPROC_HPP fn=reinterpret_cast<PFNGLCOLOR4SVPROC_HPP>(_impl::_get_proc_address("glColor4sv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color4ub
#define GL_HPP_FUNDEF_Color4ub
typedef void (*PFNGLCOLOR4UBPROC_HPP)(GLubyte,GLubyte,GLubyte,GLubyte);
static inline void Color4ub(GLubyte red1,GLubyte green1,GLubyte blue1,GLubyte alpha1)
{
	static PFNGLCOLOR4UBPROC_HPP fn=reinterpret_cast<PFNGLCOLOR4UBPROC_HPP>(_impl::_get_proc_address("glColor4ub",3,1));
	 fn(red1,green1,blue1,alpha1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color4ubv
#define GL_HPP_FUNDEF_Color4ubv
typedef void (*PFNGLCOLOR4UBVPROC_HPP)(const GLubyte *);
static inline void Color4ubv(const GLubyte * v1)
{
	static PFNGLCOLOR4UBVPROC_HPP fn=reinterpret_cast<PFNGLCOLOR4UBVPROC_HPP>(_impl::_get_proc_address("glColor4ubv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color4ui
#define GL_HPP_FUNDEF_Color4ui
typedef void (*PFNGLCOLOR4UIPROC_HPP)(GLuint,GLuint,GLuint,GLuint);
static inline void Color4ui(GLuint red1,GLuint green1,GLuint blue1,GLuint alpha1)
{
	static PFNGLCOLOR4UIPROC_HPP fn=reinterpret_cast<PFNGLCOLOR4UIPROC_HPP>(_impl::_get_proc_address("glColor4ui",3,1));
	 fn(red1,green1,blue1,alpha1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color4uiv
#define GL_HPP_FUNDEF_Color4uiv
typedef void (*PFNGLCOLOR4UIVPROC_HPP)(const GLuint *);
static inline void Color4uiv(const GLuint * v1)
{
	static PFNGLCOLOR4UIVPROC_HPP fn=reinterpret_cast<PFNGLCOLOR4UIVPROC_HPP>(_impl::_get_proc_address("glColor4uiv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color4us
#define GL_HPP_FUNDEF_Color4us
typedef void (*PFNGLCOLOR4USPROC_HPP)(GLushort,GLushort,GLushort,GLushort);
static inline void Color4us(GLushort red1,GLushort green1,GLushort blue1,GLushort alpha1)
{
	static PFNGLCOLOR4USPROC_HPP fn=reinterpret_cast<PFNGLCOLOR4USPROC_HPP>(_impl::_get_proc_address("glColor4us",3,1));
	 fn(red1,green1,blue1,alpha1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Color4usv
#define GL_HPP_FUNDEF_Color4usv
typedef void (*PFNGLCOLOR4USVPROC_HPP)(const GLushort *);
static inline void Color4usv(const GLushort * v1)
{
	static PFNGLCOLOR4USVPROC_HPP fn=reinterpret_cast<PFNGLCOLOR4USVPROC_HPP>(_impl::_get_proc_address("glColor4usv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ColorMask
#define GL_HPP_FUNDEF_ColorMask
typedef void (*PFNGLCOLORMASKPROC_HPP)(GLboolean,GLboolean,GLboolean,GLboolean);
static inline void ColorMask(GLboolean red1,GLboolean green1,GLboolean blue1,GLboolean alpha1)
{
	static PFNGLCOLORMASKPROC_HPP fn=reinterpret_cast<PFNGLCOLORMASKPROC_HPP>(_impl::_get_proc_address("glColorMask",3,1));
	 fn(red1,green1,blue1,alpha1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ColorMaski
#define GL_HPP_FUNDEF_ColorMaski
typedef void (*PFNGLCOLORMASKIPROC_HPP)(GLuint,GLboolean,GLboolean,GLboolean,GLboolean);
static inline void ColorMaski(GLuint index1,GLboolean r1,GLboolean g1,GLboolean b1,GLboolean a1)
{
	static PFNGLCOLORMASKIPROC_HPP fn=reinterpret_cast<PFNGLCOLORMASKIPROC_HPP>(_impl::_get_proc_address("glColorMaski",3,1));
	 fn(index1,r1,g1,b1,a1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ColorMaterial
#define GL_HPP_FUNDEF_ColorMaterial
typedef void (*PFNGLCOLORMATERIALPROC_HPP)(GLenum,GLenum);
static inline void ColorMaterial(GLenum face1,GLenum mode1)
{
	static PFNGLCOLORMATERIALPROC_HPP fn=reinterpret_cast<PFNGLCOLORMATERIALPROC_HPP>(_impl::_get_proc_address("glColorMaterial",3,1));
	 fn(face1,mode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ColorPointer
#define GL_HPP_FUNDEF_ColorPointer
typedef void (*PFNGLCOLORPOINTERPROC_HPP)(GLint,GLenum,GLsizei,const void *);
static inline void ColorPointer(GLint size1,GLenum type1,GLsizei stride1,const void * pointer1)
{
	static PFNGLCOLORPOINTERPROC_HPP fn=reinterpret_cast<PFNGLCOLORPOINTERPROC_HPP>(_impl::_get_proc_address("glColorPointer",3,1));
	 fn(size1,type1,stride1,pointer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CompileShader
#define GL_HPP_FUNDEF_CompileShader
typedef void (*PFNGLCOMPILESHADERPROC_HPP)(GLuint);
static inline void CompileShader(GLuint shader1)
{
	static PFNGLCOMPILESHADERPROC_HPP fn=reinterpret_cast<PFNGLCOMPILESHADERPROC_HPP>(_impl::_get_proc_address("glCompileShader",3,1));
	 fn(shader1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CompressedTexImage1D
#define GL_HPP_FUNDEF_CompressedTexImage1D
typedef void (*PFNGLCOMPRESSEDTEXIMAGE1DPROC_HPP)(GLenum,GLint,GLenum,GLsizei,GLint,GLsizei,const void *);
static inline void CompressedTexImage1D(GLenum target1,GLint level1,GLenum internalformat1,GLsizei width1,GLint border1,GLsizei imageSize1,const void * data1)
{
	static PFNGLCOMPRESSEDTEXIMAGE1DPROC_HPP fn=reinterpret_cast<PFNGLCOMPRESSEDTEXIMAGE1DPROC_HPP>(_impl::_get_proc_address("glCompressedTexImage1D",3,1));
	 fn(target1,level1,internalformat1,width1,border1,imageSize1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CompressedTexImage2D
#define GL_HPP_FUNDEF_CompressedTexImage2D
typedef void (*PFNGLCOMPRESSEDTEXIMAGE2DPROC_HPP)(GLenum,GLint,GLenum,GLsizei,GLsizei,GLint,GLsizei,const void *);
static inline void CompressedTexImage2D(GLenum target1,GLint level1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLint border1,GLsizei imageSize1,const void * data1)
{
	static PFNGLCOMPRESSEDTEXIMAGE2DPROC_HPP fn=reinterpret_cast<PFNGLCOMPRESSEDTEXIMAGE2DPROC_HPP>(_impl::_get_proc_address("glCompressedTexImage2D",3,1));
	 fn(target1,level1,internalformat1,width1,height1,border1,imageSize1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CompressedTexImage3D
#define GL_HPP_FUNDEF_CompressedTexImage3D
typedef void (*PFNGLCOMPRESSEDTEXIMAGE3DPROC_HPP)(GLenum,GLint,GLenum,GLsizei,GLsizei,GLsizei,GLint,GLsizei,const void *);
static inline void CompressedTexImage3D(GLenum target1,GLint level1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLint border1,GLsizei imageSize1,const void * data1)
{
	static PFNGLCOMPRESSEDTEXIMAGE3DPROC_HPP fn=reinterpret_cast<PFNGLCOMPRESSEDTEXIMAGE3DPROC_HPP>(_impl::_get_proc_address("glCompressedTexImage3D",3,1));
	 fn(target1,level1,internalformat1,width1,height1,depth1,border1,imageSize1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CompressedTexSubImage1D
#define GL_HPP_FUNDEF_CompressedTexSubImage1D
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC_HPP)(GLenum,GLint,GLint,GLsizei,GLenum,GLsizei,const void *);
static inline void CompressedTexSubImage1D(GLenum target1,GLint level1,GLint xoffset1,GLsizei width1,GLenum format1,GLsizei imageSize1,const void * data1)
{
	static PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC_HPP fn=reinterpret_cast<PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC_HPP>(_impl::_get_proc_address("glCompressedTexSubImage1D",3,1));
	 fn(target1,level1,xoffset1,width1,format1,imageSize1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CompressedTexSubImage2D
#define GL_HPP_FUNDEF_CompressedTexSubImage2D
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC_HPP)(GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLsizei,const void *);
static inline void CompressedTexSubImage2D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLsizei width1,GLsizei height1,GLenum format1,GLsizei imageSize1,const void * data1)
{
	static PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC_HPP fn=reinterpret_cast<PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC_HPP>(_impl::_get_proc_address("glCompressedTexSubImage2D",3,1));
	 fn(target1,level1,xoffset1,yoffset1,width1,height1,format1,imageSize1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CompressedTexSubImage3D
#define GL_HPP_FUNDEF_CompressedTexSubImage3D
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC_HPP)(GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLsizei,const void *);
static inline void CompressedTexSubImage3D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLsizei width1,GLsizei height1,GLsizei depth1,GLenum format1,GLsizei imageSize1,const void * data1)
{
	static PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC_HPP fn=reinterpret_cast<PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC_HPP>(_impl::_get_proc_address("glCompressedTexSubImage3D",3,1));
	 fn(target1,level1,xoffset1,yoffset1,zoffset1,width1,height1,depth1,format1,imageSize1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CopyBufferSubData
#define GL_HPP_FUNDEF_CopyBufferSubData
typedef void (*PFNGLCOPYBUFFERSUBDATAPROC_HPP)(GLenum,GLenum,GLintptr,GLintptr,GLsizeiptr);
static inline void CopyBufferSubData(GLenum readTarget1,GLenum writeTarget1,GLintptr readOffset1,GLintptr writeOffset1,GLsizeiptr size1)
{
	static PFNGLCOPYBUFFERSUBDATAPROC_HPP fn=reinterpret_cast<PFNGLCOPYBUFFERSUBDATAPROC_HPP>(_impl::_get_proc_address("glCopyBufferSubData",3,1));
	 fn(readTarget1,writeTarget1,readOffset1,writeOffset1,size1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CopyPixels
#define GL_HPP_FUNDEF_CopyPixels
typedef void (*PFNGLCOPYPIXELSPROC_HPP)(GLint,GLint,GLsizei,GLsizei,GLenum);
static inline void CopyPixels(GLint x1,GLint y1,GLsizei width1,GLsizei height1,GLenum type1)
{
	static PFNGLCOPYPIXELSPROC_HPP fn=reinterpret_cast<PFNGLCOPYPIXELSPROC_HPP>(_impl::_get_proc_address("glCopyPixels",3,1));
	 fn(x1,y1,width1,height1,type1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CopyTexImage1D
#define GL_HPP_FUNDEF_CopyTexImage1D
typedef void (*PFNGLCOPYTEXIMAGE1DPROC_HPP)(GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLint);
static inline void CopyTexImage1D(GLenum target1,GLint level1,GLenum internalformat1,GLint x1,GLint y1,GLsizei width1,GLint border1)
{
	static PFNGLCOPYTEXIMAGE1DPROC_HPP fn=reinterpret_cast<PFNGLCOPYTEXIMAGE1DPROC_HPP>(_impl::_get_proc_address("glCopyTexImage1D",3,1));
	 fn(target1,level1,internalformat1,x1,y1,width1,border1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CopyTexImage2D
#define GL_HPP_FUNDEF_CopyTexImage2D
typedef void (*PFNGLCOPYTEXIMAGE2DPROC_HPP)(GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLsizei,GLint);
static inline void CopyTexImage2D(GLenum target1,GLint level1,GLenum internalformat1,GLint x1,GLint y1,GLsizei width1,GLsizei height1,GLint border1)
{
	static PFNGLCOPYTEXIMAGE2DPROC_HPP fn=reinterpret_cast<PFNGLCOPYTEXIMAGE2DPROC_HPP>(_impl::_get_proc_address("glCopyTexImage2D",3,1));
	 fn(target1,level1,internalformat1,x1,y1,width1,height1,border1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CopyTexSubImage1D
#define GL_HPP_FUNDEF_CopyTexSubImage1D
typedef void (*PFNGLCOPYTEXSUBIMAGE1DPROC_HPP)(GLenum,GLint,GLint,GLint,GLint,GLsizei);
static inline void CopyTexSubImage1D(GLenum target1,GLint level1,GLint xoffset1,GLint x1,GLint y1,GLsizei width1)
{
	static PFNGLCOPYTEXSUBIMAGE1DPROC_HPP fn=reinterpret_cast<PFNGLCOPYTEXSUBIMAGE1DPROC_HPP>(_impl::_get_proc_address("glCopyTexSubImage1D",3,1));
	 fn(target1,level1,xoffset1,x1,y1,width1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CopyTexSubImage2D
#define GL_HPP_FUNDEF_CopyTexSubImage2D
typedef void (*PFNGLCOPYTEXSUBIMAGE2DPROC_HPP)(GLenum,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
static inline void CopyTexSubImage2D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
	static PFNGLCOPYTEXSUBIMAGE2DPROC_HPP fn=reinterpret_cast<PFNGLCOPYTEXSUBIMAGE2DPROC_HPP>(_impl::_get_proc_address("glCopyTexSubImage2D",3,1));
	 fn(target1,level1,xoffset1,yoffset1,x1,y1,width1,height1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CopyTexSubImage3D
#define GL_HPP_FUNDEF_CopyTexSubImage3D
typedef void (*PFNGLCOPYTEXSUBIMAGE3DPROC_HPP)(GLenum,GLint,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
static inline void CopyTexSubImage3D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
	static PFNGLCOPYTEXSUBIMAGE3DPROC_HPP fn=reinterpret_cast<PFNGLCOPYTEXSUBIMAGE3DPROC_HPP>(_impl::_get_proc_address("glCopyTexSubImage3D",3,1));
	 fn(target1,level1,xoffset1,yoffset1,zoffset1,x1,y1,width1,height1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CreateProgram
#define GL_HPP_FUNDEF_CreateProgram
typedef GLuint (*PFNGLCREATEPROGRAMPROC_HPP)();
static inline GLuint CreateProgram()
{
	static PFNGLCREATEPROGRAMPROC_HPP fn=reinterpret_cast<PFNGLCREATEPROGRAMPROC_HPP>(_impl::_get_proc_address("glCreateProgram",3,1));
	return fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_CreateShader
#define GL_HPP_FUNDEF_CreateShader
typedef GLuint (*PFNGLCREATESHADERPROC_HPP)(GLenum);
static inline GLuint CreateShader(GLenum type1)
{
	static PFNGLCREATESHADERPROC_HPP fn=reinterpret_cast<PFNGLCREATESHADERPROC_HPP>(_impl::_get_proc_address("glCreateShader",3,1));
	return fn(type1);
}
#endif

#ifndef	GL_HPP_FUNDEF_CullFace
#define GL_HPP_FUNDEF_CullFace
typedef void (*PFNGLCULLFACEPROC_HPP)(GLenum);
static inline void CullFace(GLenum mode1)
{
	static PFNGLCULLFACEPROC_HPP fn=reinterpret_cast<PFNGLCULLFACEPROC_HPP>(_impl::_get_proc_address("glCullFace",3,1));
	 fn(mode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteBuffers
#define GL_HPP_FUNDEF_DeleteBuffers
typedef void (*PFNGLDELETEBUFFERSPROC_HPP)(GLsizei,const GLuint *);
static inline void DeleteBuffers(GLsizei n1,const GLuint * buffers1)
{
	static PFNGLDELETEBUFFERSPROC_HPP fn=reinterpret_cast<PFNGLDELETEBUFFERSPROC_HPP>(_impl::_get_proc_address("glDeleteBuffers",3,1));
	 fn(n1,buffers1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteFramebuffers
#define GL_HPP_FUNDEF_DeleteFramebuffers
typedef void (*PFNGLDELETEFRAMEBUFFERSPROC_HPP)(GLsizei,const GLuint *);
static inline void DeleteFramebuffers(GLsizei n1,const GLuint * framebuffers1)
{
	static PFNGLDELETEFRAMEBUFFERSPROC_HPP fn=reinterpret_cast<PFNGLDELETEFRAMEBUFFERSPROC_HPP>(_impl::_get_proc_address("glDeleteFramebuffers",3,1));
	 fn(n1,framebuffers1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteLists
#define GL_HPP_FUNDEF_DeleteLists
typedef void (*PFNGLDELETELISTSPROC_HPP)(GLuint,GLsizei);
static inline void DeleteLists(GLuint list1,GLsizei range1)
{
	static PFNGLDELETELISTSPROC_HPP fn=reinterpret_cast<PFNGLDELETELISTSPROC_HPP>(_impl::_get_proc_address("glDeleteLists",3,1));
	 fn(list1,range1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteProgram
#define GL_HPP_FUNDEF_DeleteProgram
typedef void (*PFNGLDELETEPROGRAMPROC_HPP)(GLuint);
static inline void DeleteProgram(GLuint program1)
{
	static PFNGLDELETEPROGRAMPROC_HPP fn=reinterpret_cast<PFNGLDELETEPROGRAMPROC_HPP>(_impl::_get_proc_address("glDeleteProgram",3,1));
	 fn(program1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteQueries
#define GL_HPP_FUNDEF_DeleteQueries
typedef void (*PFNGLDELETEQUERIESPROC_HPP)(GLsizei,const GLuint *);
static inline void DeleteQueries(GLsizei n1,const GLuint * ids1)
{
	static PFNGLDELETEQUERIESPROC_HPP fn=reinterpret_cast<PFNGLDELETEQUERIESPROC_HPP>(_impl::_get_proc_address("glDeleteQueries",3,1));
	 fn(n1,ids1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteRenderbuffers
#define GL_HPP_FUNDEF_DeleteRenderbuffers
typedef void (*PFNGLDELETERENDERBUFFERSPROC_HPP)(GLsizei,const GLuint *);
static inline void DeleteRenderbuffers(GLsizei n1,const GLuint * renderbuffers1)
{
	static PFNGLDELETERENDERBUFFERSPROC_HPP fn=reinterpret_cast<PFNGLDELETERENDERBUFFERSPROC_HPP>(_impl::_get_proc_address("glDeleteRenderbuffers",3,1));
	 fn(n1,renderbuffers1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteShader
#define GL_HPP_FUNDEF_DeleteShader
typedef void (*PFNGLDELETESHADERPROC_HPP)(GLuint);
static inline void DeleteShader(GLuint shader1)
{
	static PFNGLDELETESHADERPROC_HPP fn=reinterpret_cast<PFNGLDELETESHADERPROC_HPP>(_impl::_get_proc_address("glDeleteShader",3,1));
	 fn(shader1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteTextures
#define GL_HPP_FUNDEF_DeleteTextures
typedef void (*PFNGLDELETETEXTURESPROC_HPP)(GLsizei,const GLuint *);
static inline void DeleteTextures(GLsizei n1,const GLuint * textures1)
{
	static PFNGLDELETETEXTURESPROC_HPP fn=reinterpret_cast<PFNGLDELETETEXTURESPROC_HPP>(_impl::_get_proc_address("glDeleteTextures",3,1));
	 fn(n1,textures1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DeleteVertexArrays
#define GL_HPP_FUNDEF_DeleteVertexArrays
typedef void (*PFNGLDELETEVERTEXARRAYSPROC_HPP)(GLsizei,const GLuint *);
static inline void DeleteVertexArrays(GLsizei n1,const GLuint * arrays1)
{
	static PFNGLDELETEVERTEXARRAYSPROC_HPP fn=reinterpret_cast<PFNGLDELETEVERTEXARRAYSPROC_HPP>(_impl::_get_proc_address("glDeleteVertexArrays",3,1));
	 fn(n1,arrays1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DepthFunc
#define GL_HPP_FUNDEF_DepthFunc
typedef void (*PFNGLDEPTHFUNCPROC_HPP)(GLenum);
static inline void DepthFunc(GLenum func1)
{
	static PFNGLDEPTHFUNCPROC_HPP fn=reinterpret_cast<PFNGLDEPTHFUNCPROC_HPP>(_impl::_get_proc_address("glDepthFunc",3,1));
	 fn(func1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DepthMask
#define GL_HPP_FUNDEF_DepthMask
typedef void (*PFNGLDEPTHMASKPROC_HPP)(GLboolean);
static inline void DepthMask(GLboolean flag1)
{
	static PFNGLDEPTHMASKPROC_HPP fn=reinterpret_cast<PFNGLDEPTHMASKPROC_HPP>(_impl::_get_proc_address("glDepthMask",3,1));
	 fn(flag1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DepthRange
#define GL_HPP_FUNDEF_DepthRange
typedef void (*PFNGLDEPTHRANGEPROC_HPP)(GLdouble,GLdouble);
static inline void DepthRange(GLdouble near1,GLdouble far1)
{
	static PFNGLDEPTHRANGEPROC_HPP fn=reinterpret_cast<PFNGLDEPTHRANGEPROC_HPP>(_impl::_get_proc_address("glDepthRange",3,1));
	 fn(near1,far1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DetachShader
#define GL_HPP_FUNDEF_DetachShader
typedef void (*PFNGLDETACHSHADERPROC_HPP)(GLuint,GLuint);
static inline void DetachShader(GLuint program1,GLuint shader1)
{
	static PFNGLDETACHSHADERPROC_HPP fn=reinterpret_cast<PFNGLDETACHSHADERPROC_HPP>(_impl::_get_proc_address("glDetachShader",3,1));
	 fn(program1,shader1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Disable
#define GL_HPP_FUNDEF_Disable
typedef void (*PFNGLDISABLEPROC_HPP)(GLenum);
static inline void Disable(GLenum cap1)
{
	static PFNGLDISABLEPROC_HPP fn=reinterpret_cast<PFNGLDISABLEPROC_HPP>(_impl::_get_proc_address("glDisable",3,1));
	 fn(cap1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DisableClientState
#define GL_HPP_FUNDEF_DisableClientState
typedef void (*PFNGLDISABLECLIENTSTATEPROC_HPP)(GLenum);
static inline void DisableClientState(GLenum array1)
{
	static PFNGLDISABLECLIENTSTATEPROC_HPP fn=reinterpret_cast<PFNGLDISABLECLIENTSTATEPROC_HPP>(_impl::_get_proc_address("glDisableClientState",3,1));
	 fn(array1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DisableVertexAttribArray
#define GL_HPP_FUNDEF_DisableVertexAttribArray
typedef void (*PFNGLDISABLEVERTEXATTRIBARRAYPROC_HPP)(GLuint);
static inline void DisableVertexAttribArray(GLuint index1)
{
	static PFNGLDISABLEVERTEXATTRIBARRAYPROC_HPP fn=reinterpret_cast<PFNGLDISABLEVERTEXATTRIBARRAYPROC_HPP>(_impl::_get_proc_address("glDisableVertexAttribArray",3,1));
	 fn(index1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Disablei
#define GL_HPP_FUNDEF_Disablei
typedef void (*PFNGLDISABLEIPROC_HPP)(GLenum,GLuint);
static inline void Disablei(GLenum target1,GLuint index1)
{
	static PFNGLDISABLEIPROC_HPP fn=reinterpret_cast<PFNGLDISABLEIPROC_HPP>(_impl::_get_proc_address("glDisablei",3,1));
	 fn(target1,index1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DrawArrays
#define GL_HPP_FUNDEF_DrawArrays
typedef void (*PFNGLDRAWARRAYSPROC_HPP)(GLenum,GLint,GLsizei);
static inline void DrawArrays(GLenum mode1,GLint first1,GLsizei count1)
{
	static PFNGLDRAWARRAYSPROC_HPP fn=reinterpret_cast<PFNGLDRAWARRAYSPROC_HPP>(_impl::_get_proc_address("glDrawArrays",3,1));
	 fn(mode1,first1,count1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DrawArraysInstanced
#define GL_HPP_FUNDEF_DrawArraysInstanced
typedef void (*PFNGLDRAWARRAYSINSTANCEDPROC_HPP)(GLenum,GLint,GLsizei,GLsizei);
static inline void DrawArraysInstanced(GLenum mode1,GLint first1,GLsizei count1,GLsizei instancecount1)
{
	static PFNGLDRAWARRAYSINSTANCEDPROC_HPP fn=reinterpret_cast<PFNGLDRAWARRAYSINSTANCEDPROC_HPP>(_impl::_get_proc_address("glDrawArraysInstanced",3,1));
	 fn(mode1,first1,count1,instancecount1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DrawBuffer
#define GL_HPP_FUNDEF_DrawBuffer
typedef void (*PFNGLDRAWBUFFERPROC_HPP)(GLenum);
static inline void DrawBuffer(GLenum buf1)
{
	static PFNGLDRAWBUFFERPROC_HPP fn=reinterpret_cast<PFNGLDRAWBUFFERPROC_HPP>(_impl::_get_proc_address("glDrawBuffer",3,1));
	 fn(buf1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DrawBuffers
#define GL_HPP_FUNDEF_DrawBuffers
typedef void (*PFNGLDRAWBUFFERSPROC_HPP)(GLsizei,const GLenum *);
static inline void DrawBuffers(GLsizei n1,const GLenum * bufs1)
{
	static PFNGLDRAWBUFFERSPROC_HPP fn=reinterpret_cast<PFNGLDRAWBUFFERSPROC_HPP>(_impl::_get_proc_address("glDrawBuffers",3,1));
	 fn(n1,bufs1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DrawElements
#define GL_HPP_FUNDEF_DrawElements
typedef void (*PFNGLDRAWELEMENTSPROC_HPP)(GLenum,GLsizei,GLenum,const void *);
static inline void DrawElements(GLenum mode1,GLsizei count1,GLenum type1,const void * indices1)
{
	static PFNGLDRAWELEMENTSPROC_HPP fn=reinterpret_cast<PFNGLDRAWELEMENTSPROC_HPP>(_impl::_get_proc_address("glDrawElements",3,1));
	 fn(mode1,count1,type1,indices1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DrawElementsInstanced
#define GL_HPP_FUNDEF_DrawElementsInstanced
typedef void (*PFNGLDRAWELEMENTSINSTANCEDPROC_HPP)(GLenum,GLsizei,GLenum,const void *,GLsizei);
static inline void DrawElementsInstanced(GLenum mode1,GLsizei count1,GLenum type1,const void * indices1,GLsizei instancecount1)
{
	static PFNGLDRAWELEMENTSINSTANCEDPROC_HPP fn=reinterpret_cast<PFNGLDRAWELEMENTSINSTANCEDPROC_HPP>(_impl::_get_proc_address("glDrawElementsInstanced",3,1));
	 fn(mode1,count1,type1,indices1,instancecount1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DrawPixels
#define GL_HPP_FUNDEF_DrawPixels
typedef void (*PFNGLDRAWPIXELSPROC_HPP)(GLsizei,GLsizei,GLenum,GLenum,const void *);
static inline void DrawPixels(GLsizei width1,GLsizei height1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLDRAWPIXELSPROC_HPP fn=reinterpret_cast<PFNGLDRAWPIXELSPROC_HPP>(_impl::_get_proc_address("glDrawPixels",3,1));
	 fn(width1,height1,format1,type1,pixels1);
}
#endif

#ifndef	GL_HPP_FUNDEF_DrawRangeElements
#define GL_HPP_FUNDEF_DrawRangeElements
typedef void (*PFNGLDRAWRANGEELEMENTSPROC_HPP)(GLenum,GLuint,GLuint,GLsizei,GLenum,const void *);
static inline void DrawRangeElements(GLenum mode1,GLuint start1,GLuint end1,GLsizei count1,GLenum type1,const void * indices1)
{
	static PFNGLDRAWRANGEELEMENTSPROC_HPP fn=reinterpret_cast<PFNGLDRAWRANGEELEMENTSPROC_HPP>(_impl::_get_proc_address("glDrawRangeElements",3,1));
	 fn(mode1,start1,end1,count1,type1,indices1);
}
#endif

#ifndef	GL_HPP_FUNDEF_EdgeFlag
#define GL_HPP_FUNDEF_EdgeFlag
typedef void (*PFNGLEDGEFLAGPROC_HPP)(GLboolean);
static inline void EdgeFlag(GLboolean flag1)
{
	static PFNGLEDGEFLAGPROC_HPP fn=reinterpret_cast<PFNGLEDGEFLAGPROC_HPP>(_impl::_get_proc_address("glEdgeFlag",3,1));
	 fn(flag1);
}
#endif

#ifndef	GL_HPP_FUNDEF_EdgeFlagPointer
#define GL_HPP_FUNDEF_EdgeFlagPointer
typedef void (*PFNGLEDGEFLAGPOINTERPROC_HPP)(GLsizei,const void *);
static inline void EdgeFlagPointer(GLsizei stride1,const void * pointer1)
{
	static PFNGLEDGEFLAGPOINTERPROC_HPP fn=reinterpret_cast<PFNGLEDGEFLAGPOINTERPROC_HPP>(_impl::_get_proc_address("glEdgeFlagPointer",3,1));
	 fn(stride1,pointer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_EdgeFlagv
#define GL_HPP_FUNDEF_EdgeFlagv
typedef void (*PFNGLEDGEFLAGVPROC_HPP)(const GLboolean *);
static inline void EdgeFlagv(const GLboolean * flag1)
{
	static PFNGLEDGEFLAGVPROC_HPP fn=reinterpret_cast<PFNGLEDGEFLAGVPROC_HPP>(_impl::_get_proc_address("glEdgeFlagv",3,1));
	 fn(flag1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Enable
#define GL_HPP_FUNDEF_Enable
typedef void (*PFNGLENABLEPROC_HPP)(GLenum);
static inline void Enable(GLenum cap1)
{
	static PFNGLENABLEPROC_HPP fn=reinterpret_cast<PFNGLENABLEPROC_HPP>(_impl::_get_proc_address("glEnable",3,1));
	 fn(cap1);
}
#endif

#ifndef	GL_HPP_FUNDEF_EnableClientState
#define GL_HPP_FUNDEF_EnableClientState
typedef void (*PFNGLENABLECLIENTSTATEPROC_HPP)(GLenum);
static inline void EnableClientState(GLenum array1)
{
	static PFNGLENABLECLIENTSTATEPROC_HPP fn=reinterpret_cast<PFNGLENABLECLIENTSTATEPROC_HPP>(_impl::_get_proc_address("glEnableClientState",3,1));
	 fn(array1);
}
#endif

#ifndef	GL_HPP_FUNDEF_EnableVertexAttribArray
#define GL_HPP_FUNDEF_EnableVertexAttribArray
typedef void (*PFNGLENABLEVERTEXATTRIBARRAYPROC_HPP)(GLuint);
static inline void EnableVertexAttribArray(GLuint index1)
{
	static PFNGLENABLEVERTEXATTRIBARRAYPROC_HPP fn=reinterpret_cast<PFNGLENABLEVERTEXATTRIBARRAYPROC_HPP>(_impl::_get_proc_address("glEnableVertexAttribArray",3,1));
	 fn(index1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Enablei
#define GL_HPP_FUNDEF_Enablei
typedef void (*PFNGLENABLEIPROC_HPP)(GLenum,GLuint);
static inline void Enablei(GLenum target1,GLuint index1)
{
	static PFNGLENABLEIPROC_HPP fn=reinterpret_cast<PFNGLENABLEIPROC_HPP>(_impl::_get_proc_address("glEnablei",3,1));
	 fn(target1,index1);
}
#endif

#ifndef	GL_HPP_FUNDEF_End
#define GL_HPP_FUNDEF_End
typedef void (*PFNGLENDPROC_HPP)();
static inline void End()
{
	static PFNGLENDPROC_HPP fn=reinterpret_cast<PFNGLENDPROC_HPP>(_impl::_get_proc_address("glEnd",3,1));
	 fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_EndConditionalRender
#define GL_HPP_FUNDEF_EndConditionalRender
typedef void (*PFNGLENDCONDITIONALRENDERPROC_HPP)();
static inline void EndConditionalRender()
{
	static PFNGLENDCONDITIONALRENDERPROC_HPP fn=reinterpret_cast<PFNGLENDCONDITIONALRENDERPROC_HPP>(_impl::_get_proc_address("glEndConditionalRender",3,1));
	 fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_EndList
#define GL_HPP_FUNDEF_EndList
typedef void (*PFNGLENDLISTPROC_HPP)();
static inline void EndList()
{
	static PFNGLENDLISTPROC_HPP fn=reinterpret_cast<PFNGLENDLISTPROC_HPP>(_impl::_get_proc_address("glEndList",3,1));
	 fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_EndQuery
#define GL_HPP_FUNDEF_EndQuery
typedef void (*PFNGLENDQUERYPROC_HPP)(GLenum);
static inline void EndQuery(GLenum target1)
{
	static PFNGLENDQUERYPROC_HPP fn=reinterpret_cast<PFNGLENDQUERYPROC_HPP>(_impl::_get_proc_address("glEndQuery",3,1));
	 fn(target1);
}
#endif

#ifndef	GL_HPP_FUNDEF_EndTransformFeedback
#define GL_HPP_FUNDEF_EndTransformFeedback
typedef void (*PFNGLENDTRANSFORMFEEDBACKPROC_HPP)();
static inline void EndTransformFeedback()
{
	static PFNGLENDTRANSFORMFEEDBACKPROC_HPP fn=reinterpret_cast<PFNGLENDTRANSFORMFEEDBACKPROC_HPP>(_impl::_get_proc_address("glEndTransformFeedback",3,1));
	 fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_EvalCoord1d
#define GL_HPP_FUNDEF_EvalCoord1d
typedef void (*PFNGLEVALCOORD1DPROC_HPP)(GLdouble);
static inline void EvalCoord1d(GLdouble u1)
{
	static PFNGLEVALCOORD1DPROC_HPP fn=reinterpret_cast<PFNGLEVALCOORD1DPROC_HPP>(_impl::_get_proc_address("glEvalCoord1d",3,1));
	 fn(u1);
}
#endif

#ifndef	GL_HPP_FUNDEF_EvalCoord1dv
#define GL_HPP_FUNDEF_EvalCoord1dv
typedef void (*PFNGLEVALCOORD1DVPROC_HPP)(const GLdouble *);
static inline void EvalCoord1dv(const GLdouble * u1)
{
	static PFNGLEVALCOORD1DVPROC_HPP fn=reinterpret_cast<PFNGLEVALCOORD1DVPROC_HPP>(_impl::_get_proc_address("glEvalCoord1dv",3,1));
	 fn(u1);
}
#endif

#ifndef	GL_HPP_FUNDEF_EvalCoord1f
#define GL_HPP_FUNDEF_EvalCoord1f
typedef void (*PFNGLEVALCOORD1FPROC_HPP)(GLfloat);
static inline void EvalCoord1f(GLfloat u1)
{
	static PFNGLEVALCOORD1FPROC_HPP fn=reinterpret_cast<PFNGLEVALCOORD1FPROC_HPP>(_impl::_get_proc_address("glEvalCoord1f",3,1));
	 fn(u1);
}
#endif

#ifndef	GL_HPP_FUNDEF_EvalCoord1fv
#define GL_HPP_FUNDEF_EvalCoord1fv
typedef void (*PFNGLEVALCOORD1FVPROC_HPP)(const GLfloat *);
static inline void EvalCoord1fv(const GLfloat * u1)
{
	static PFNGLEVALCOORD1FVPROC_HPP fn=reinterpret_cast<PFNGLEVALCOORD1FVPROC_HPP>(_impl::_get_proc_address("glEvalCoord1fv",3,1));
	 fn(u1);
}
#endif

#ifndef	GL_HPP_FUNDEF_EvalCoord2d
#define GL_HPP_FUNDEF_EvalCoord2d
typedef void (*PFNGLEVALCOORD2DPROC_HPP)(GLdouble,GLdouble);
static inline void EvalCoord2d(GLdouble u1,GLdouble v1)
{
	static PFNGLEVALCOORD2DPROC_HPP fn=reinterpret_cast<PFNGLEVALCOORD2DPROC_HPP>(_impl::_get_proc_address("glEvalCoord2d",3,1));
	 fn(u1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_EvalCoord2dv
#define GL_HPP_FUNDEF_EvalCoord2dv
typedef void (*PFNGLEVALCOORD2DVPROC_HPP)(const GLdouble *);
static inline void EvalCoord2dv(const GLdouble * u1)
{
	static PFNGLEVALCOORD2DVPROC_HPP fn=reinterpret_cast<PFNGLEVALCOORD2DVPROC_HPP>(_impl::_get_proc_address("glEvalCoord2dv",3,1));
	 fn(u1);
}
#endif

#ifndef	GL_HPP_FUNDEF_EvalCoord2f
#define GL_HPP_FUNDEF_EvalCoord2f
typedef void (*PFNGLEVALCOORD2FPROC_HPP)(GLfloat,GLfloat);
static inline void EvalCoord2f(GLfloat u1,GLfloat v1)
{
	static PFNGLEVALCOORD2FPROC_HPP fn=reinterpret_cast<PFNGLEVALCOORD2FPROC_HPP>(_impl::_get_proc_address("glEvalCoord2f",3,1));
	 fn(u1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_EvalCoord2fv
#define GL_HPP_FUNDEF_EvalCoord2fv
typedef void (*PFNGLEVALCOORD2FVPROC_HPP)(const GLfloat *);
static inline void EvalCoord2fv(const GLfloat * u1)
{
	static PFNGLEVALCOORD2FVPROC_HPP fn=reinterpret_cast<PFNGLEVALCOORD2FVPROC_HPP>(_impl::_get_proc_address("glEvalCoord2fv",3,1));
	 fn(u1);
}
#endif

#ifndef	GL_HPP_FUNDEF_EvalMesh1
#define GL_HPP_FUNDEF_EvalMesh1
typedef void (*PFNGLEVALMESH1PROC_HPP)(GLenum,GLint,GLint);
static inline void EvalMesh1(GLenum mode1,GLint i11,GLint i21)
{
	static PFNGLEVALMESH1PROC_HPP fn=reinterpret_cast<PFNGLEVALMESH1PROC_HPP>(_impl::_get_proc_address("glEvalMesh1",3,1));
	 fn(mode1,i11,i21);
}
#endif

#ifndef	GL_HPP_FUNDEF_EvalMesh2
#define GL_HPP_FUNDEF_EvalMesh2
typedef void (*PFNGLEVALMESH2PROC_HPP)(GLenum,GLint,GLint,GLint,GLint);
static inline void EvalMesh2(GLenum mode1,GLint i11,GLint i21,GLint j11,GLint j21)
{
	static PFNGLEVALMESH2PROC_HPP fn=reinterpret_cast<PFNGLEVALMESH2PROC_HPP>(_impl::_get_proc_address("glEvalMesh2",3,1));
	 fn(mode1,i11,i21,j11,j21);
}
#endif

#ifndef	GL_HPP_FUNDEF_EvalPoint1
#define GL_HPP_FUNDEF_EvalPoint1
typedef void (*PFNGLEVALPOINT1PROC_HPP)(GLint);
static inline void EvalPoint1(GLint i1)
{
	static PFNGLEVALPOINT1PROC_HPP fn=reinterpret_cast<PFNGLEVALPOINT1PROC_HPP>(_impl::_get_proc_address("glEvalPoint1",3,1));
	 fn(i1);
}
#endif

#ifndef	GL_HPP_FUNDEF_EvalPoint2
#define GL_HPP_FUNDEF_EvalPoint2
typedef void (*PFNGLEVALPOINT2PROC_HPP)(GLint,GLint);
static inline void EvalPoint2(GLint i1,GLint j1)
{
	static PFNGLEVALPOINT2PROC_HPP fn=reinterpret_cast<PFNGLEVALPOINT2PROC_HPP>(_impl::_get_proc_address("glEvalPoint2",3,1));
	 fn(i1,j1);
}
#endif

#ifndef	GL_HPP_FUNDEF_FeedbackBuffer
#define GL_HPP_FUNDEF_FeedbackBuffer
typedef void (*PFNGLFEEDBACKBUFFERPROC_HPP)(GLsizei,GLenum,GLfloat *);
static inline void FeedbackBuffer(GLsizei size1,GLenum type1,GLfloat * buffer1)
{
	static PFNGLFEEDBACKBUFFERPROC_HPP fn=reinterpret_cast<PFNGLFEEDBACKBUFFERPROC_HPP>(_impl::_get_proc_address("glFeedbackBuffer",3,1));
	 fn(size1,type1,buffer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Finish
#define GL_HPP_FUNDEF_Finish
typedef void (*PFNGLFINISHPROC_HPP)();
static inline void Finish()
{
	static PFNGLFINISHPROC_HPP fn=reinterpret_cast<PFNGLFINISHPROC_HPP>(_impl::_get_proc_address("glFinish",3,1));
	 fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_Flush
#define GL_HPP_FUNDEF_Flush
typedef void (*PFNGLFLUSHPROC_HPP)();
static inline void Flush()
{
	static PFNGLFLUSHPROC_HPP fn=reinterpret_cast<PFNGLFLUSHPROC_HPP>(_impl::_get_proc_address("glFlush",3,1));
	 fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_FlushMappedBufferRange
#define GL_HPP_FUNDEF_FlushMappedBufferRange
typedef void (*PFNGLFLUSHMAPPEDBUFFERRANGEPROC_HPP)(GLenum,GLintptr,GLsizeiptr);
static inline void FlushMappedBufferRange(GLenum target1,GLintptr offset1,GLsizeiptr length1)
{
	static PFNGLFLUSHMAPPEDBUFFERRANGEPROC_HPP fn=reinterpret_cast<PFNGLFLUSHMAPPEDBUFFERRANGEPROC_HPP>(_impl::_get_proc_address("glFlushMappedBufferRange",3,1));
	 fn(target1,offset1,length1);
}
#endif

#ifndef	GL_HPP_FUNDEF_FogCoordPointer
#define GL_HPP_FUNDEF_FogCoordPointer
typedef void (*PFNGLFOGCOORDPOINTERPROC_HPP)(GLenum,GLsizei,const void *);
static inline void FogCoordPointer(GLenum type1,GLsizei stride1,const void * pointer1)
{
	static PFNGLFOGCOORDPOINTERPROC_HPP fn=reinterpret_cast<PFNGLFOGCOORDPOINTERPROC_HPP>(_impl::_get_proc_address("glFogCoordPointer",3,1));
	 fn(type1,stride1,pointer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_FogCoordd
#define GL_HPP_FUNDEF_FogCoordd
typedef void (*PFNGLFOGCOORDDPROC_HPP)(GLdouble);
static inline void FogCoordd(GLdouble coord1)
{
	static PFNGLFOGCOORDDPROC_HPP fn=reinterpret_cast<PFNGLFOGCOORDDPROC_HPP>(_impl::_get_proc_address("glFogCoordd",3,1));
	 fn(coord1);
}
#endif

#ifndef	GL_HPP_FUNDEF_FogCoorddv
#define GL_HPP_FUNDEF_FogCoorddv
typedef void (*PFNGLFOGCOORDDVPROC_HPP)(const GLdouble *);
static inline void FogCoorddv(const GLdouble * coord1)
{
	static PFNGLFOGCOORDDVPROC_HPP fn=reinterpret_cast<PFNGLFOGCOORDDVPROC_HPP>(_impl::_get_proc_address("glFogCoorddv",3,1));
	 fn(coord1);
}
#endif

#ifndef	GL_HPP_FUNDEF_FogCoordf
#define GL_HPP_FUNDEF_FogCoordf
typedef void (*PFNGLFOGCOORDFPROC_HPP)(GLfloat);
static inline void FogCoordf(GLfloat coord1)
{
	static PFNGLFOGCOORDFPROC_HPP fn=reinterpret_cast<PFNGLFOGCOORDFPROC_HPP>(_impl::_get_proc_address("glFogCoordf",3,1));
	 fn(coord1);
}
#endif

#ifndef	GL_HPP_FUNDEF_FogCoordfv
#define GL_HPP_FUNDEF_FogCoordfv
typedef void (*PFNGLFOGCOORDFVPROC_HPP)(const GLfloat *);
static inline void FogCoordfv(const GLfloat * coord1)
{
	static PFNGLFOGCOORDFVPROC_HPP fn=reinterpret_cast<PFNGLFOGCOORDFVPROC_HPP>(_impl::_get_proc_address("glFogCoordfv",3,1));
	 fn(coord1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Fogf
#define GL_HPP_FUNDEF_Fogf
typedef void (*PFNGLFOGFPROC_HPP)(GLenum,GLfloat);
static inline void Fogf(GLenum pname1,GLfloat param1)
{
	static PFNGLFOGFPROC_HPP fn=reinterpret_cast<PFNGLFOGFPROC_HPP>(_impl::_get_proc_address("glFogf",3,1));
	 fn(pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Fogfv
#define GL_HPP_FUNDEF_Fogfv
typedef void (*PFNGLFOGFVPROC_HPP)(GLenum,const GLfloat *);
static inline void Fogfv(GLenum pname1,const GLfloat * params1)
{
	static PFNGLFOGFVPROC_HPP fn=reinterpret_cast<PFNGLFOGFVPROC_HPP>(_impl::_get_proc_address("glFogfv",3,1));
	 fn(pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Fogi
#define GL_HPP_FUNDEF_Fogi
typedef void (*PFNGLFOGIPROC_HPP)(GLenum,GLint);
static inline void Fogi(GLenum pname1,GLint param1)
{
	static PFNGLFOGIPROC_HPP fn=reinterpret_cast<PFNGLFOGIPROC_HPP>(_impl::_get_proc_address("glFogi",3,1));
	 fn(pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Fogiv
#define GL_HPP_FUNDEF_Fogiv
typedef void (*PFNGLFOGIVPROC_HPP)(GLenum,const GLint *);
static inline void Fogiv(GLenum pname1,const GLint * params1)
{
	static PFNGLFOGIVPROC_HPP fn=reinterpret_cast<PFNGLFOGIVPROC_HPP>(_impl::_get_proc_address("glFogiv",3,1));
	 fn(pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_FramebufferRenderbuffer
#define GL_HPP_FUNDEF_FramebufferRenderbuffer
typedef void (*PFNGLFRAMEBUFFERRENDERBUFFERPROC_HPP)(GLenum,GLenum,GLenum,GLuint);
static inline void FramebufferRenderbuffer(GLenum target1,GLenum attachment1,GLenum renderbuffertarget1,GLuint renderbuffer1)
{
	static PFNGLFRAMEBUFFERRENDERBUFFERPROC_HPP fn=reinterpret_cast<PFNGLFRAMEBUFFERRENDERBUFFERPROC_HPP>(_impl::_get_proc_address("glFramebufferRenderbuffer",3,1));
	 fn(target1,attachment1,renderbuffertarget1,renderbuffer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_FramebufferTexture1D
#define GL_HPP_FUNDEF_FramebufferTexture1D
typedef void (*PFNGLFRAMEBUFFERTEXTURE1DPROC_HPP)(GLenum,GLenum,GLenum,GLuint,GLint);
static inline void FramebufferTexture1D(GLenum target1,GLenum attachment1,GLenum textarget1,GLuint texture1,GLint level1)
{
	static PFNGLFRAMEBUFFERTEXTURE1DPROC_HPP fn=reinterpret_cast<PFNGLFRAMEBUFFERTEXTURE1DPROC_HPP>(_impl::_get_proc_address("glFramebufferTexture1D",3,1));
	 fn(target1,attachment1,textarget1,texture1,level1);
}
#endif

#ifndef	GL_HPP_FUNDEF_FramebufferTexture2D
#define GL_HPP_FUNDEF_FramebufferTexture2D
typedef void (*PFNGLFRAMEBUFFERTEXTURE2DPROC_HPP)(GLenum,GLenum,GLenum,GLuint,GLint);
static inline void FramebufferTexture2D(GLenum target1,GLenum attachment1,GLenum textarget1,GLuint texture1,GLint level1)
{
	static PFNGLFRAMEBUFFERTEXTURE2DPROC_HPP fn=reinterpret_cast<PFNGLFRAMEBUFFERTEXTURE2DPROC_HPP>(_impl::_get_proc_address("glFramebufferTexture2D",3,1));
	 fn(target1,attachment1,textarget1,texture1,level1);
}
#endif

#ifndef	GL_HPP_FUNDEF_FramebufferTexture3D
#define GL_HPP_FUNDEF_FramebufferTexture3D
typedef void (*PFNGLFRAMEBUFFERTEXTURE3DPROC_HPP)(GLenum,GLenum,GLenum,GLuint,GLint,GLint);
static inline void FramebufferTexture3D(GLenum target1,GLenum attachment1,GLenum textarget1,GLuint texture1,GLint level1,GLint zoffset1)
{
	static PFNGLFRAMEBUFFERTEXTURE3DPROC_HPP fn=reinterpret_cast<PFNGLFRAMEBUFFERTEXTURE3DPROC_HPP>(_impl::_get_proc_address("glFramebufferTexture3D",3,1));
	 fn(target1,attachment1,textarget1,texture1,level1,zoffset1);
}
#endif

#ifndef	GL_HPP_FUNDEF_FramebufferTextureLayer
#define GL_HPP_FUNDEF_FramebufferTextureLayer
typedef void (*PFNGLFRAMEBUFFERTEXTURELAYERPROC_HPP)(GLenum,GLenum,GLuint,GLint,GLint);
static inline void FramebufferTextureLayer(GLenum target1,GLenum attachment1,GLuint texture1,GLint level1,GLint layer1)
{
	static PFNGLFRAMEBUFFERTEXTURELAYERPROC_HPP fn=reinterpret_cast<PFNGLFRAMEBUFFERTEXTURELAYERPROC_HPP>(_impl::_get_proc_address("glFramebufferTextureLayer",3,1));
	 fn(target1,attachment1,texture1,level1,layer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_FrontFace
#define GL_HPP_FUNDEF_FrontFace
typedef void (*PFNGLFRONTFACEPROC_HPP)(GLenum);
static inline void FrontFace(GLenum mode1)
{
	static PFNGLFRONTFACEPROC_HPP fn=reinterpret_cast<PFNGLFRONTFACEPROC_HPP>(_impl::_get_proc_address("glFrontFace",3,1));
	 fn(mode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Frustum
#define GL_HPP_FUNDEF_Frustum
typedef void (*PFNGLFRUSTUMPROC_HPP)(GLdouble,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void Frustum(GLdouble left1,GLdouble right1,GLdouble bottom1,GLdouble top1,GLdouble zNear1,GLdouble zFar1)
{
	static PFNGLFRUSTUMPROC_HPP fn=reinterpret_cast<PFNGLFRUSTUMPROC_HPP>(_impl::_get_proc_address("glFrustum",3,1));
	 fn(left1,right1,bottom1,top1,zNear1,zFar1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GenBuffers
#define GL_HPP_FUNDEF_GenBuffers
typedef void (*PFNGLGENBUFFERSPROC_HPP)(GLsizei,GLuint *);
static inline void GenBuffers(GLsizei n1,GLuint * buffers1)
{
	static PFNGLGENBUFFERSPROC_HPP fn=reinterpret_cast<PFNGLGENBUFFERSPROC_HPP>(_impl::_get_proc_address("glGenBuffers",3,1));
	 fn(n1,buffers1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GenFramebuffers
#define GL_HPP_FUNDEF_GenFramebuffers
typedef void (*PFNGLGENFRAMEBUFFERSPROC_HPP)(GLsizei,GLuint *);
static inline void GenFramebuffers(GLsizei n1,GLuint * framebuffers1)
{
	static PFNGLGENFRAMEBUFFERSPROC_HPP fn=reinterpret_cast<PFNGLGENFRAMEBUFFERSPROC_HPP>(_impl::_get_proc_address("glGenFramebuffers",3,1));
	 fn(n1,framebuffers1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GenLists
#define GL_HPP_FUNDEF_GenLists
typedef GLuint (*PFNGLGENLISTSPROC_HPP)(GLsizei);
static inline GLuint GenLists(GLsizei range1)
{
	static PFNGLGENLISTSPROC_HPP fn=reinterpret_cast<PFNGLGENLISTSPROC_HPP>(_impl::_get_proc_address("glGenLists",3,1));
	return fn(range1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GenQueries
#define GL_HPP_FUNDEF_GenQueries
typedef void (*PFNGLGENQUERIESPROC_HPP)(GLsizei,GLuint *);
static inline void GenQueries(GLsizei n1,GLuint * ids1)
{
	static PFNGLGENQUERIESPROC_HPP fn=reinterpret_cast<PFNGLGENQUERIESPROC_HPP>(_impl::_get_proc_address("glGenQueries",3,1));
	 fn(n1,ids1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GenRenderbuffers
#define GL_HPP_FUNDEF_GenRenderbuffers
typedef void (*PFNGLGENRENDERBUFFERSPROC_HPP)(GLsizei,GLuint *);
static inline void GenRenderbuffers(GLsizei n1,GLuint * renderbuffers1)
{
	static PFNGLGENRENDERBUFFERSPROC_HPP fn=reinterpret_cast<PFNGLGENRENDERBUFFERSPROC_HPP>(_impl::_get_proc_address("glGenRenderbuffers",3,1));
	 fn(n1,renderbuffers1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GenTextures
#define GL_HPP_FUNDEF_GenTextures
typedef void (*PFNGLGENTEXTURESPROC_HPP)(GLsizei,GLuint *);
static inline void GenTextures(GLsizei n1,GLuint * textures1)
{
	static PFNGLGENTEXTURESPROC_HPP fn=reinterpret_cast<PFNGLGENTEXTURESPROC_HPP>(_impl::_get_proc_address("glGenTextures",3,1));
	 fn(n1,textures1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GenVertexArrays
#define GL_HPP_FUNDEF_GenVertexArrays
typedef void (*PFNGLGENVERTEXARRAYSPROC_HPP)(GLsizei,GLuint *);
static inline void GenVertexArrays(GLsizei n1,GLuint * arrays1)
{
	static PFNGLGENVERTEXARRAYSPROC_HPP fn=reinterpret_cast<PFNGLGENVERTEXARRAYSPROC_HPP>(_impl::_get_proc_address("glGenVertexArrays",3,1));
	 fn(n1,arrays1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GenerateMipmap
#define GL_HPP_FUNDEF_GenerateMipmap
typedef void (*PFNGLGENERATEMIPMAPPROC_HPP)(GLenum);
static inline void GenerateMipmap(GLenum target1)
{
	static PFNGLGENERATEMIPMAPPROC_HPP fn=reinterpret_cast<PFNGLGENERATEMIPMAPPROC_HPP>(_impl::_get_proc_address("glGenerateMipmap",3,1));
	 fn(target1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetActiveAttrib
#define GL_HPP_FUNDEF_GetActiveAttrib
typedef void (*PFNGLGETACTIVEATTRIBPROC_HPP)(GLuint,GLuint,GLsizei,GLsizei *,GLint *,GLenum *,GLchar *);
static inline void GetActiveAttrib(GLuint program1,GLuint index1,GLsizei bufSize1,GLsizei * length1,GLint * size1,GLenum * type1,GLchar * name1)
{
	static PFNGLGETACTIVEATTRIBPROC_HPP fn=reinterpret_cast<PFNGLGETACTIVEATTRIBPROC_HPP>(_impl::_get_proc_address("glGetActiveAttrib",3,1));
	 fn(program1,index1,bufSize1,length1,size1,type1,name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetActiveUniform
#define GL_HPP_FUNDEF_GetActiveUniform
typedef void (*PFNGLGETACTIVEUNIFORMPROC_HPP)(GLuint,GLuint,GLsizei,GLsizei *,GLint *,GLenum *,GLchar *);
static inline void GetActiveUniform(GLuint program1,GLuint index1,GLsizei bufSize1,GLsizei * length1,GLint * size1,GLenum * type1,GLchar * name1)
{
	static PFNGLGETACTIVEUNIFORMPROC_HPP fn=reinterpret_cast<PFNGLGETACTIVEUNIFORMPROC_HPP>(_impl::_get_proc_address("glGetActiveUniform",3,1));
	 fn(program1,index1,bufSize1,length1,size1,type1,name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetActiveUniformBlockName
#define GL_HPP_FUNDEF_GetActiveUniformBlockName
typedef void (*PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC_HPP)(GLuint,GLuint,GLsizei,GLsizei *,GLchar *);
static inline void GetActiveUniformBlockName(GLuint program1,GLuint uniformBlockIndex1,GLsizei bufSize1,GLsizei * length1,GLchar * uniformBlockName1)
{
	static PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC_HPP fn=reinterpret_cast<PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC_HPP>(_impl::_get_proc_address("glGetActiveUniformBlockName",3,1));
	 fn(program1,uniformBlockIndex1,bufSize1,length1,uniformBlockName1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetActiveUniformBlockiv
#define GL_HPP_FUNDEF_GetActiveUniformBlockiv
typedef void (*PFNGLGETACTIVEUNIFORMBLOCKIVPROC_HPP)(GLuint,GLuint,GLenum,GLint *);
static inline void GetActiveUniformBlockiv(GLuint program1,GLuint uniformBlockIndex1,GLenum pname1,GLint * params1)
{
	static PFNGLGETACTIVEUNIFORMBLOCKIVPROC_HPP fn=reinterpret_cast<PFNGLGETACTIVEUNIFORMBLOCKIVPROC_HPP>(_impl::_get_proc_address("glGetActiveUniformBlockiv",3,1));
	 fn(program1,uniformBlockIndex1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetActiveUniformName
#define GL_HPP_FUNDEF_GetActiveUniformName
typedef void (*PFNGLGETACTIVEUNIFORMNAMEPROC_HPP)(GLuint,GLuint,GLsizei,GLsizei *,GLchar *);
static inline void GetActiveUniformName(GLuint program1,GLuint uniformIndex1,GLsizei bufSize1,GLsizei * length1,GLchar * uniformName1)
{
	static PFNGLGETACTIVEUNIFORMNAMEPROC_HPP fn=reinterpret_cast<PFNGLGETACTIVEUNIFORMNAMEPROC_HPP>(_impl::_get_proc_address("glGetActiveUniformName",3,1));
	 fn(program1,uniformIndex1,bufSize1,length1,uniformName1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetActiveUniformsiv
#define GL_HPP_FUNDEF_GetActiveUniformsiv
typedef void (*PFNGLGETACTIVEUNIFORMSIVPROC_HPP)(GLuint,GLsizei,const GLuint *,GLenum,GLint *);
static inline void GetActiveUniformsiv(GLuint program1,GLsizei uniformCount1,const GLuint * uniformIndices1,GLenum pname1,GLint * params1)
{
	static PFNGLGETACTIVEUNIFORMSIVPROC_HPP fn=reinterpret_cast<PFNGLGETACTIVEUNIFORMSIVPROC_HPP>(_impl::_get_proc_address("glGetActiveUniformsiv",3,1));
	 fn(program1,uniformCount1,uniformIndices1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetAttachedShaders
#define GL_HPP_FUNDEF_GetAttachedShaders
typedef void (*PFNGLGETATTACHEDSHADERSPROC_HPP)(GLuint,GLsizei,GLsizei *,GLuint *);
static inline void GetAttachedShaders(GLuint program1,GLsizei maxCount1,GLsizei * count1,GLuint * shaders1)
{
	static PFNGLGETATTACHEDSHADERSPROC_HPP fn=reinterpret_cast<PFNGLGETATTACHEDSHADERSPROC_HPP>(_impl::_get_proc_address("glGetAttachedShaders",3,1));
	 fn(program1,maxCount1,count1,shaders1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetAttribLocation
#define GL_HPP_FUNDEF_GetAttribLocation
typedef GLint (*PFNGLGETATTRIBLOCATIONPROC_HPP)(GLuint,const GLchar *);
static inline GLint GetAttribLocation(GLuint program1,const GLchar * name1)
{
	static PFNGLGETATTRIBLOCATIONPROC_HPP fn=reinterpret_cast<PFNGLGETATTRIBLOCATIONPROC_HPP>(_impl::_get_proc_address("glGetAttribLocation",3,1));
	return fn(program1,name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetBooleani_v
#define GL_HPP_FUNDEF_GetBooleani_v
typedef void (*PFNGLGETBOOLEANI_VPROC_HPP)(GLenum,GLuint,GLboolean *);
static inline void GetBooleani_v(GLenum target1,GLuint index1,GLboolean * data1)
{
	static PFNGLGETBOOLEANI_VPROC_HPP fn=reinterpret_cast<PFNGLGETBOOLEANI_VPROC_HPP>(_impl::_get_proc_address("glGetBooleani_v",3,1));
	 fn(target1,index1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetBooleanv
#define GL_HPP_FUNDEF_GetBooleanv
typedef void (*PFNGLGETBOOLEANVPROC_HPP)(GLenum,GLboolean *);
static inline void GetBooleanv(GLenum pname1,GLboolean * data1)
{
	static PFNGLGETBOOLEANVPROC_HPP fn=reinterpret_cast<PFNGLGETBOOLEANVPROC_HPP>(_impl::_get_proc_address("glGetBooleanv",3,1));
	 fn(pname1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetBufferParameteriv
#define GL_HPP_FUNDEF_GetBufferParameteriv
typedef void (*PFNGLGETBUFFERPARAMETERIVPROC_HPP)(GLenum,GLenum,GLint *);
static inline void GetBufferParameteriv(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETBUFFERPARAMETERIVPROC_HPP fn=reinterpret_cast<PFNGLGETBUFFERPARAMETERIVPROC_HPP>(_impl::_get_proc_address("glGetBufferParameteriv",3,1));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetBufferPointerv
#define GL_HPP_FUNDEF_GetBufferPointerv
typedef void (*PFNGLGETBUFFERPOINTERVPROC_HPP)(GLenum,GLenum,void **);
static inline void GetBufferPointerv(GLenum target1,GLenum pname1,void ** params1)
{
	static PFNGLGETBUFFERPOINTERVPROC_HPP fn=reinterpret_cast<PFNGLGETBUFFERPOINTERVPROC_HPP>(_impl::_get_proc_address("glGetBufferPointerv",3,1));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetBufferSubData
#define GL_HPP_FUNDEF_GetBufferSubData
typedef void (*PFNGLGETBUFFERSUBDATAPROC_HPP)(GLenum,GLintptr,GLsizeiptr,void *);
static inline void GetBufferSubData(GLenum target1,GLintptr offset1,GLsizeiptr size1,void * data1)
{
	static PFNGLGETBUFFERSUBDATAPROC_HPP fn=reinterpret_cast<PFNGLGETBUFFERSUBDATAPROC_HPP>(_impl::_get_proc_address("glGetBufferSubData",3,1));
	 fn(target1,offset1,size1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetClipPlane
#define GL_HPP_FUNDEF_GetClipPlane
typedef void (*PFNGLGETCLIPPLANEPROC_HPP)(GLenum,GLdouble *);
static inline void GetClipPlane(GLenum plane1,GLdouble * equation1)
{
	static PFNGLGETCLIPPLANEPROC_HPP fn=reinterpret_cast<PFNGLGETCLIPPLANEPROC_HPP>(_impl::_get_proc_address("glGetClipPlane",3,1));
	 fn(plane1,equation1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetCompressedTexImage
#define GL_HPP_FUNDEF_GetCompressedTexImage
typedef void (*PFNGLGETCOMPRESSEDTEXIMAGEPROC_HPP)(GLenum,GLint,void *);
static inline void GetCompressedTexImage(GLenum target1,GLint level1,void * img1)
{
	static PFNGLGETCOMPRESSEDTEXIMAGEPROC_HPP fn=reinterpret_cast<PFNGLGETCOMPRESSEDTEXIMAGEPROC_HPP>(_impl::_get_proc_address("glGetCompressedTexImage",3,1));
	 fn(target1,level1,img1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetDoublev
#define GL_HPP_FUNDEF_GetDoublev
typedef void (*PFNGLGETDOUBLEVPROC_HPP)(GLenum,GLdouble *);
static inline void GetDoublev(GLenum pname1,GLdouble * data1)
{
	static PFNGLGETDOUBLEVPROC_HPP fn=reinterpret_cast<PFNGLGETDOUBLEVPROC_HPP>(_impl::_get_proc_address("glGetDoublev",3,1));
	 fn(pname1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetError
#define GL_HPP_FUNDEF_GetError
typedef GLenum (*PFNGLGETERRORPROC_HPP)();
static inline GLenum GetError()
{
	static PFNGLGETERRORPROC_HPP fn=reinterpret_cast<PFNGLGETERRORPROC_HPP>(_impl::_get_proc_address("glGetError",3,1));
	return fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_GetFloatv
#define GL_HPP_FUNDEF_GetFloatv
typedef void (*PFNGLGETFLOATVPROC_HPP)(GLenum,GLfloat *);
static inline void GetFloatv(GLenum pname1,GLfloat * data1)
{
	static PFNGLGETFLOATVPROC_HPP fn=reinterpret_cast<PFNGLGETFLOATVPROC_HPP>(_impl::_get_proc_address("glGetFloatv",3,1));
	 fn(pname1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetFragDataLocation
#define GL_HPP_FUNDEF_GetFragDataLocation
typedef GLint (*PFNGLGETFRAGDATALOCATIONPROC_HPP)(GLuint,const GLchar *);
static inline GLint GetFragDataLocation(GLuint program1,const GLchar * name1)
{
	static PFNGLGETFRAGDATALOCATIONPROC_HPP fn=reinterpret_cast<PFNGLGETFRAGDATALOCATIONPROC_HPP>(_impl::_get_proc_address("glGetFragDataLocation",3,1));
	return fn(program1,name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetFramebufferAttachmentParameteriv
#define GL_HPP_FUNDEF_GetFramebufferAttachmentParameteriv
typedef void (*PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC_HPP)(GLenum,GLenum,GLenum,GLint *);
static inline void GetFramebufferAttachmentParameteriv(GLenum target1,GLenum attachment1,GLenum pname1,GLint * params1)
{
	static PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC_HPP fn=reinterpret_cast<PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC_HPP>(_impl::_get_proc_address("glGetFramebufferAttachmentParameteriv",3,1));
	 fn(target1,attachment1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetIntegeri_v
#define GL_HPP_FUNDEF_GetIntegeri_v
typedef void (*PFNGLGETINTEGERI_VPROC_HPP)(GLenum,GLuint,GLint *);
static inline void GetIntegeri_v(GLenum target1,GLuint index1,GLint * data1)
{
	static PFNGLGETINTEGERI_VPROC_HPP fn=reinterpret_cast<PFNGLGETINTEGERI_VPROC_HPP>(_impl::_get_proc_address("glGetIntegeri_v",3,1));
	 fn(target1,index1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetIntegerv
#define GL_HPP_FUNDEF_GetIntegerv
typedef void (*PFNGLGETINTEGERVPROC_HPP)(GLenum,GLint *);
static inline void GetIntegerv(GLenum pname1,GLint * data1)
{
	static PFNGLGETINTEGERVPROC_HPP fn=reinterpret_cast<PFNGLGETINTEGERVPROC_HPP>(_impl::_get_proc_address("glGetIntegerv",3,1));
	 fn(pname1,data1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetLightfv
#define GL_HPP_FUNDEF_GetLightfv
typedef void (*PFNGLGETLIGHTFVPROC_HPP)(GLenum,GLenum,GLfloat *);
static inline void GetLightfv(GLenum light1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETLIGHTFVPROC_HPP fn=reinterpret_cast<PFNGLGETLIGHTFVPROC_HPP>(_impl::_get_proc_address("glGetLightfv",3,1));
	 fn(light1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetLightiv
#define GL_HPP_FUNDEF_GetLightiv
typedef void (*PFNGLGETLIGHTIVPROC_HPP)(GLenum,GLenum,GLint *);
static inline void GetLightiv(GLenum light1,GLenum pname1,GLint * params1)
{
	static PFNGLGETLIGHTIVPROC_HPP fn=reinterpret_cast<PFNGLGETLIGHTIVPROC_HPP>(_impl::_get_proc_address("glGetLightiv",3,1));
	 fn(light1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetMapdv
#define GL_HPP_FUNDEF_GetMapdv
typedef void (*PFNGLGETMAPDVPROC_HPP)(GLenum,GLenum,GLdouble *);
static inline void GetMapdv(GLenum target1,GLenum query1,GLdouble * v1)
{
	static PFNGLGETMAPDVPROC_HPP fn=reinterpret_cast<PFNGLGETMAPDVPROC_HPP>(_impl::_get_proc_address("glGetMapdv",3,1));
	 fn(target1,query1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetMapfv
#define GL_HPP_FUNDEF_GetMapfv
typedef void (*PFNGLGETMAPFVPROC_HPP)(GLenum,GLenum,GLfloat *);
static inline void GetMapfv(GLenum target1,GLenum query1,GLfloat * v1)
{
	static PFNGLGETMAPFVPROC_HPP fn=reinterpret_cast<PFNGLGETMAPFVPROC_HPP>(_impl::_get_proc_address("glGetMapfv",3,1));
	 fn(target1,query1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetMapiv
#define GL_HPP_FUNDEF_GetMapiv
typedef void (*PFNGLGETMAPIVPROC_HPP)(GLenum,GLenum,GLint *);
static inline void GetMapiv(GLenum target1,GLenum query1,GLint * v1)
{
	static PFNGLGETMAPIVPROC_HPP fn=reinterpret_cast<PFNGLGETMAPIVPROC_HPP>(_impl::_get_proc_address("glGetMapiv",3,1));
	 fn(target1,query1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetMaterialfv
#define GL_HPP_FUNDEF_GetMaterialfv
typedef void (*PFNGLGETMATERIALFVPROC_HPP)(GLenum,GLenum,GLfloat *);
static inline void GetMaterialfv(GLenum face1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETMATERIALFVPROC_HPP fn=reinterpret_cast<PFNGLGETMATERIALFVPROC_HPP>(_impl::_get_proc_address("glGetMaterialfv",3,1));
	 fn(face1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetMaterialiv
#define GL_HPP_FUNDEF_GetMaterialiv
typedef void (*PFNGLGETMATERIALIVPROC_HPP)(GLenum,GLenum,GLint *);
static inline void GetMaterialiv(GLenum face1,GLenum pname1,GLint * params1)
{
	static PFNGLGETMATERIALIVPROC_HPP fn=reinterpret_cast<PFNGLGETMATERIALIVPROC_HPP>(_impl::_get_proc_address("glGetMaterialiv",3,1));
	 fn(face1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetPixelMapfv
#define GL_HPP_FUNDEF_GetPixelMapfv
typedef void (*PFNGLGETPIXELMAPFVPROC_HPP)(GLenum,GLfloat *);
static inline void GetPixelMapfv(GLenum map1,GLfloat * values1)
{
	static PFNGLGETPIXELMAPFVPROC_HPP fn=reinterpret_cast<PFNGLGETPIXELMAPFVPROC_HPP>(_impl::_get_proc_address("glGetPixelMapfv",3,1));
	 fn(map1,values1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetPixelMapuiv
#define GL_HPP_FUNDEF_GetPixelMapuiv
typedef void (*PFNGLGETPIXELMAPUIVPROC_HPP)(GLenum,GLuint *);
static inline void GetPixelMapuiv(GLenum map1,GLuint * values1)
{
	static PFNGLGETPIXELMAPUIVPROC_HPP fn=reinterpret_cast<PFNGLGETPIXELMAPUIVPROC_HPP>(_impl::_get_proc_address("glGetPixelMapuiv",3,1));
	 fn(map1,values1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetPixelMapusv
#define GL_HPP_FUNDEF_GetPixelMapusv
typedef void (*PFNGLGETPIXELMAPUSVPROC_HPP)(GLenum,GLushort *);
static inline void GetPixelMapusv(GLenum map1,GLushort * values1)
{
	static PFNGLGETPIXELMAPUSVPROC_HPP fn=reinterpret_cast<PFNGLGETPIXELMAPUSVPROC_HPP>(_impl::_get_proc_address("glGetPixelMapusv",3,1));
	 fn(map1,values1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetPointerv
#define GL_HPP_FUNDEF_GetPointerv
typedef void (*PFNGLGETPOINTERVPROC_HPP)(GLenum,void **);
static inline void GetPointerv(GLenum pname1,void ** params1)
{
	static PFNGLGETPOINTERVPROC_HPP fn=reinterpret_cast<PFNGLGETPOINTERVPROC_HPP>(_impl::_get_proc_address("glGetPointerv",3,1));
	 fn(pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetPolygonStipple
#define GL_HPP_FUNDEF_GetPolygonStipple
typedef void (*PFNGLGETPOLYGONSTIPPLEPROC_HPP)(GLubyte *);
static inline void GetPolygonStipple(GLubyte * mask1)
{
	static PFNGLGETPOLYGONSTIPPLEPROC_HPP fn=reinterpret_cast<PFNGLGETPOLYGONSTIPPLEPROC_HPP>(_impl::_get_proc_address("glGetPolygonStipple",3,1));
	 fn(mask1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetProgramInfoLog
#define GL_HPP_FUNDEF_GetProgramInfoLog
typedef void (*PFNGLGETPROGRAMINFOLOGPROC_HPP)(GLuint,GLsizei,GLsizei *,GLchar *);
static inline void GetProgramInfoLog(GLuint program1,GLsizei bufSize1,GLsizei * length1,GLchar * infoLog1)
{
	static PFNGLGETPROGRAMINFOLOGPROC_HPP fn=reinterpret_cast<PFNGLGETPROGRAMINFOLOGPROC_HPP>(_impl::_get_proc_address("glGetProgramInfoLog",3,1));
	 fn(program1,bufSize1,length1,infoLog1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetProgramiv
#define GL_HPP_FUNDEF_GetProgramiv
typedef void (*PFNGLGETPROGRAMIVPROC_HPP)(GLuint,GLenum,GLint *);
static inline void GetProgramiv(GLuint program1,GLenum pname1,GLint * params1)
{
	static PFNGLGETPROGRAMIVPROC_HPP fn=reinterpret_cast<PFNGLGETPROGRAMIVPROC_HPP>(_impl::_get_proc_address("glGetProgramiv",3,1));
	 fn(program1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetQueryObjectiv
#define GL_HPP_FUNDEF_GetQueryObjectiv
typedef void (*PFNGLGETQUERYOBJECTIVPROC_HPP)(GLuint,GLenum,GLint *);
static inline void GetQueryObjectiv(GLuint id1,GLenum pname1,GLint * params1)
{
	static PFNGLGETQUERYOBJECTIVPROC_HPP fn=reinterpret_cast<PFNGLGETQUERYOBJECTIVPROC_HPP>(_impl::_get_proc_address("glGetQueryObjectiv",3,1));
	 fn(id1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetQueryObjectuiv
#define GL_HPP_FUNDEF_GetQueryObjectuiv
typedef void (*PFNGLGETQUERYOBJECTUIVPROC_HPP)(GLuint,GLenum,GLuint *);
static inline void GetQueryObjectuiv(GLuint id1,GLenum pname1,GLuint * params1)
{
	static PFNGLGETQUERYOBJECTUIVPROC_HPP fn=reinterpret_cast<PFNGLGETQUERYOBJECTUIVPROC_HPP>(_impl::_get_proc_address("glGetQueryObjectuiv",3,1));
	 fn(id1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetQueryiv
#define GL_HPP_FUNDEF_GetQueryiv
typedef void (*PFNGLGETQUERYIVPROC_HPP)(GLenum,GLenum,GLint *);
static inline void GetQueryiv(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETQUERYIVPROC_HPP fn=reinterpret_cast<PFNGLGETQUERYIVPROC_HPP>(_impl::_get_proc_address("glGetQueryiv",3,1));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetRenderbufferParameteriv
#define GL_HPP_FUNDEF_GetRenderbufferParameteriv
typedef void (*PFNGLGETRENDERBUFFERPARAMETERIVPROC_HPP)(GLenum,GLenum,GLint *);
static inline void GetRenderbufferParameteriv(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETRENDERBUFFERPARAMETERIVPROC_HPP fn=reinterpret_cast<PFNGLGETRENDERBUFFERPARAMETERIVPROC_HPP>(_impl::_get_proc_address("glGetRenderbufferParameteriv",3,1));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetShaderInfoLog
#define GL_HPP_FUNDEF_GetShaderInfoLog
typedef void (*PFNGLGETSHADERINFOLOGPROC_HPP)(GLuint,GLsizei,GLsizei *,GLchar *);
static inline void GetShaderInfoLog(GLuint shader1,GLsizei bufSize1,GLsizei * length1,GLchar * infoLog1)
{
	static PFNGLGETSHADERINFOLOGPROC_HPP fn=reinterpret_cast<PFNGLGETSHADERINFOLOGPROC_HPP>(_impl::_get_proc_address("glGetShaderInfoLog",3,1));
	 fn(shader1,bufSize1,length1,infoLog1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetShaderSource
#define GL_HPP_FUNDEF_GetShaderSource
typedef void (*PFNGLGETSHADERSOURCEPROC_HPP)(GLuint,GLsizei,GLsizei *,GLchar *);
static inline void GetShaderSource(GLuint shader1,GLsizei bufSize1,GLsizei * length1,GLchar * source1)
{
	static PFNGLGETSHADERSOURCEPROC_HPP fn=reinterpret_cast<PFNGLGETSHADERSOURCEPROC_HPP>(_impl::_get_proc_address("glGetShaderSource",3,1));
	 fn(shader1,bufSize1,length1,source1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetShaderiv
#define GL_HPP_FUNDEF_GetShaderiv
typedef void (*PFNGLGETSHADERIVPROC_HPP)(GLuint,GLenum,GLint *);
static inline void GetShaderiv(GLuint shader1,GLenum pname1,GLint * params1)
{
	static PFNGLGETSHADERIVPROC_HPP fn=reinterpret_cast<PFNGLGETSHADERIVPROC_HPP>(_impl::_get_proc_address("glGetShaderiv",3,1));
	 fn(shader1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetString
#define GL_HPP_FUNDEF_GetString
typedef const GLubyte * (*PFNGLGETSTRINGPROC_HPP)(GLenum);
static inline const GLubyte * GetString(GLenum name1)
{
	static PFNGLGETSTRINGPROC_HPP fn=reinterpret_cast<PFNGLGETSTRINGPROC_HPP>(_impl::_get_proc_address("glGetString",3,1));
	return fn(name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetStringi
#define GL_HPP_FUNDEF_GetStringi
typedef const GLubyte * (*PFNGLGETSTRINGIPROC_HPP)(GLenum,GLuint);
static inline const GLubyte * GetStringi(GLenum name1,GLuint index1)
{
	static PFNGLGETSTRINGIPROC_HPP fn=reinterpret_cast<PFNGLGETSTRINGIPROC_HPP>(_impl::_get_proc_address("glGetStringi",3,1));
	return fn(name1,index1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetTexEnvfv
#define GL_HPP_FUNDEF_GetTexEnvfv
typedef void (*PFNGLGETTEXENVFVPROC_HPP)(GLenum,GLenum,GLfloat *);
static inline void GetTexEnvfv(GLenum target1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETTEXENVFVPROC_HPP fn=reinterpret_cast<PFNGLGETTEXENVFVPROC_HPP>(_impl::_get_proc_address("glGetTexEnvfv",3,1));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetTexEnviv
#define GL_HPP_FUNDEF_GetTexEnviv
typedef void (*PFNGLGETTEXENVIVPROC_HPP)(GLenum,GLenum,GLint *);
static inline void GetTexEnviv(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETTEXENVIVPROC_HPP fn=reinterpret_cast<PFNGLGETTEXENVIVPROC_HPP>(_impl::_get_proc_address("glGetTexEnviv",3,1));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetTexGendv
#define GL_HPP_FUNDEF_GetTexGendv
typedef void (*PFNGLGETTEXGENDVPROC_HPP)(GLenum,GLenum,GLdouble *);
static inline void GetTexGendv(GLenum coord1,GLenum pname1,GLdouble * params1)
{
	static PFNGLGETTEXGENDVPROC_HPP fn=reinterpret_cast<PFNGLGETTEXGENDVPROC_HPP>(_impl::_get_proc_address("glGetTexGendv",3,1));
	 fn(coord1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetTexGenfv
#define GL_HPP_FUNDEF_GetTexGenfv
typedef void (*PFNGLGETTEXGENFVPROC_HPP)(GLenum,GLenum,GLfloat *);
static inline void GetTexGenfv(GLenum coord1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETTEXGENFVPROC_HPP fn=reinterpret_cast<PFNGLGETTEXGENFVPROC_HPP>(_impl::_get_proc_address("glGetTexGenfv",3,1));
	 fn(coord1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetTexGeniv
#define GL_HPP_FUNDEF_GetTexGeniv
typedef void (*PFNGLGETTEXGENIVPROC_HPP)(GLenum,GLenum,GLint *);
static inline void GetTexGeniv(GLenum coord1,GLenum pname1,GLint * params1)
{
	static PFNGLGETTEXGENIVPROC_HPP fn=reinterpret_cast<PFNGLGETTEXGENIVPROC_HPP>(_impl::_get_proc_address("glGetTexGeniv",3,1));
	 fn(coord1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetTexImage
#define GL_HPP_FUNDEF_GetTexImage
typedef void (*PFNGLGETTEXIMAGEPROC_HPP)(GLenum,GLint,GLenum,GLenum,void *);
static inline void GetTexImage(GLenum target1,GLint level1,GLenum format1,GLenum type1,void * pixels1)
{
	static PFNGLGETTEXIMAGEPROC_HPP fn=reinterpret_cast<PFNGLGETTEXIMAGEPROC_HPP>(_impl::_get_proc_address("glGetTexImage",3,1));
	 fn(target1,level1,format1,type1,pixels1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetTexLevelParameterfv
#define GL_HPP_FUNDEF_GetTexLevelParameterfv
typedef void (*PFNGLGETTEXLEVELPARAMETERFVPROC_HPP)(GLenum,GLint,GLenum,GLfloat *);
static inline void GetTexLevelParameterfv(GLenum target1,GLint level1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETTEXLEVELPARAMETERFVPROC_HPP fn=reinterpret_cast<PFNGLGETTEXLEVELPARAMETERFVPROC_HPP>(_impl::_get_proc_address("glGetTexLevelParameterfv",3,1));
	 fn(target1,level1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetTexLevelParameteriv
#define GL_HPP_FUNDEF_GetTexLevelParameteriv
typedef void (*PFNGLGETTEXLEVELPARAMETERIVPROC_HPP)(GLenum,GLint,GLenum,GLint *);
static inline void GetTexLevelParameteriv(GLenum target1,GLint level1,GLenum pname1,GLint * params1)
{
	static PFNGLGETTEXLEVELPARAMETERIVPROC_HPP fn=reinterpret_cast<PFNGLGETTEXLEVELPARAMETERIVPROC_HPP>(_impl::_get_proc_address("glGetTexLevelParameteriv",3,1));
	 fn(target1,level1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetTexParameterIiv
#define GL_HPP_FUNDEF_GetTexParameterIiv
typedef void (*PFNGLGETTEXPARAMETERIIVPROC_HPP)(GLenum,GLenum,GLint *);
static inline void GetTexParameterIiv(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETTEXPARAMETERIIVPROC_HPP fn=reinterpret_cast<PFNGLGETTEXPARAMETERIIVPROC_HPP>(_impl::_get_proc_address("glGetTexParameterIiv",3,1));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetTexParameterIuiv
#define GL_HPP_FUNDEF_GetTexParameterIuiv
typedef void (*PFNGLGETTEXPARAMETERIUIVPROC_HPP)(GLenum,GLenum,GLuint *);
static inline void GetTexParameterIuiv(GLenum target1,GLenum pname1,GLuint * params1)
{
	static PFNGLGETTEXPARAMETERIUIVPROC_HPP fn=reinterpret_cast<PFNGLGETTEXPARAMETERIUIVPROC_HPP>(_impl::_get_proc_address("glGetTexParameterIuiv",3,1));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetTexParameterfv
#define GL_HPP_FUNDEF_GetTexParameterfv
typedef void (*PFNGLGETTEXPARAMETERFVPROC_HPP)(GLenum,GLenum,GLfloat *);
static inline void GetTexParameterfv(GLenum target1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETTEXPARAMETERFVPROC_HPP fn=reinterpret_cast<PFNGLGETTEXPARAMETERFVPROC_HPP>(_impl::_get_proc_address("glGetTexParameterfv",3,1));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetTexParameteriv
#define GL_HPP_FUNDEF_GetTexParameteriv
typedef void (*PFNGLGETTEXPARAMETERIVPROC_HPP)(GLenum,GLenum,GLint *);
static inline void GetTexParameteriv(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETTEXPARAMETERIVPROC_HPP fn=reinterpret_cast<PFNGLGETTEXPARAMETERIVPROC_HPP>(_impl::_get_proc_address("glGetTexParameteriv",3,1));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetTransformFeedbackVarying
#define GL_HPP_FUNDEF_GetTransformFeedbackVarying
typedef void (*PFNGLGETTRANSFORMFEEDBACKVARYINGPROC_HPP)(GLuint,GLuint,GLsizei,GLsizei *,GLsizei *,GLenum *,GLchar *);
static inline void GetTransformFeedbackVarying(GLuint program1,GLuint index1,GLsizei bufSize1,GLsizei * length1,GLsizei * size1,GLenum * type1,GLchar * name1)
{
	static PFNGLGETTRANSFORMFEEDBACKVARYINGPROC_HPP fn=reinterpret_cast<PFNGLGETTRANSFORMFEEDBACKVARYINGPROC_HPP>(_impl::_get_proc_address("glGetTransformFeedbackVarying",3,1));
	 fn(program1,index1,bufSize1,length1,size1,type1,name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetUniformBlockIndex
#define GL_HPP_FUNDEF_GetUniformBlockIndex
typedef GLuint (*PFNGLGETUNIFORMBLOCKINDEXPROC_HPP)(GLuint,const GLchar *);
static inline GLuint GetUniformBlockIndex(GLuint program1,const GLchar * uniformBlockName1)
{
	static PFNGLGETUNIFORMBLOCKINDEXPROC_HPP fn=reinterpret_cast<PFNGLGETUNIFORMBLOCKINDEXPROC_HPP>(_impl::_get_proc_address("glGetUniformBlockIndex",3,1));
	return fn(program1,uniformBlockName1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetUniformIndices
#define GL_HPP_FUNDEF_GetUniformIndices
typedef void (*PFNGLGETUNIFORMINDICESPROC_HPP)(GLuint,GLsizei,const GLchar *const*,GLuint *);
static inline void GetUniformIndices(GLuint program1,GLsizei uniformCount1,const GLchar *const* uniformNames1,GLuint * uniformIndices1)
{
	static PFNGLGETUNIFORMINDICESPROC_HPP fn=reinterpret_cast<PFNGLGETUNIFORMINDICESPROC_HPP>(_impl::_get_proc_address("glGetUniformIndices",3,1));
	 fn(program1,uniformCount1,uniformNames1,uniformIndices1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetUniformLocation
#define GL_HPP_FUNDEF_GetUniformLocation
typedef GLint (*PFNGLGETUNIFORMLOCATIONPROC_HPP)(GLuint,const GLchar *);
static inline GLint GetUniformLocation(GLuint program1,const GLchar * name1)
{
	static PFNGLGETUNIFORMLOCATIONPROC_HPP fn=reinterpret_cast<PFNGLGETUNIFORMLOCATIONPROC_HPP>(_impl::_get_proc_address("glGetUniformLocation",3,1));
	return fn(program1,name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetUniformfv
#define GL_HPP_FUNDEF_GetUniformfv
typedef void (*PFNGLGETUNIFORMFVPROC_HPP)(GLuint,GLint,GLfloat *);
static inline void GetUniformfv(GLuint program1,GLint location1,GLfloat * params1)
{
	static PFNGLGETUNIFORMFVPROC_HPP fn=reinterpret_cast<PFNGLGETUNIFORMFVPROC_HPP>(_impl::_get_proc_address("glGetUniformfv",3,1));
	 fn(program1,location1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetUniformiv
#define GL_HPP_FUNDEF_GetUniformiv
typedef void (*PFNGLGETUNIFORMIVPROC_HPP)(GLuint,GLint,GLint *);
static inline void GetUniformiv(GLuint program1,GLint location1,GLint * params1)
{
	static PFNGLGETUNIFORMIVPROC_HPP fn=reinterpret_cast<PFNGLGETUNIFORMIVPROC_HPP>(_impl::_get_proc_address("glGetUniformiv",3,1));
	 fn(program1,location1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetUniformuiv
#define GL_HPP_FUNDEF_GetUniformuiv
typedef void (*PFNGLGETUNIFORMUIVPROC_HPP)(GLuint,GLint,GLuint *);
static inline void GetUniformuiv(GLuint program1,GLint location1,GLuint * params1)
{
	static PFNGLGETUNIFORMUIVPROC_HPP fn=reinterpret_cast<PFNGLGETUNIFORMUIVPROC_HPP>(_impl::_get_proc_address("glGetUniformuiv",3,1));
	 fn(program1,location1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetVertexAttribIiv
#define GL_HPP_FUNDEF_GetVertexAttribIiv
typedef void (*PFNGLGETVERTEXATTRIBIIVPROC_HPP)(GLuint,GLenum,GLint *);
static inline void GetVertexAttribIiv(GLuint index1,GLenum pname1,GLint * params1)
{
	static PFNGLGETVERTEXATTRIBIIVPROC_HPP fn=reinterpret_cast<PFNGLGETVERTEXATTRIBIIVPROC_HPP>(_impl::_get_proc_address("glGetVertexAttribIiv",3,1));
	 fn(index1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetVertexAttribIuiv
#define GL_HPP_FUNDEF_GetVertexAttribIuiv
typedef void (*PFNGLGETVERTEXATTRIBIUIVPROC_HPP)(GLuint,GLenum,GLuint *);
static inline void GetVertexAttribIuiv(GLuint index1,GLenum pname1,GLuint * params1)
{
	static PFNGLGETVERTEXATTRIBIUIVPROC_HPP fn=reinterpret_cast<PFNGLGETVERTEXATTRIBIUIVPROC_HPP>(_impl::_get_proc_address("glGetVertexAttribIuiv",3,1));
	 fn(index1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetVertexAttribPointerv
#define GL_HPP_FUNDEF_GetVertexAttribPointerv
typedef void (*PFNGLGETVERTEXATTRIBPOINTERVPROC_HPP)(GLuint,GLenum,void **);
static inline void GetVertexAttribPointerv(GLuint index1,GLenum pname1,void ** pointer1)
{
	static PFNGLGETVERTEXATTRIBPOINTERVPROC_HPP fn=reinterpret_cast<PFNGLGETVERTEXATTRIBPOINTERVPROC_HPP>(_impl::_get_proc_address("glGetVertexAttribPointerv",3,1));
	 fn(index1,pname1,pointer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetVertexAttribdv
#define GL_HPP_FUNDEF_GetVertexAttribdv
typedef void (*PFNGLGETVERTEXATTRIBDVPROC_HPP)(GLuint,GLenum,GLdouble *);
static inline void GetVertexAttribdv(GLuint index1,GLenum pname1,GLdouble * params1)
{
	static PFNGLGETVERTEXATTRIBDVPROC_HPP fn=reinterpret_cast<PFNGLGETVERTEXATTRIBDVPROC_HPP>(_impl::_get_proc_address("glGetVertexAttribdv",3,1));
	 fn(index1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetVertexAttribfv
#define GL_HPP_FUNDEF_GetVertexAttribfv
typedef void (*PFNGLGETVERTEXATTRIBFVPROC_HPP)(GLuint,GLenum,GLfloat *);
static inline void GetVertexAttribfv(GLuint index1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETVERTEXATTRIBFVPROC_HPP fn=reinterpret_cast<PFNGLGETVERTEXATTRIBFVPROC_HPP>(_impl::_get_proc_address("glGetVertexAttribfv",3,1));
	 fn(index1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_GetVertexAttribiv
#define GL_HPP_FUNDEF_GetVertexAttribiv
typedef void (*PFNGLGETVERTEXATTRIBIVPROC_HPP)(GLuint,GLenum,GLint *);
static inline void GetVertexAttribiv(GLuint index1,GLenum pname1,GLint * params1)
{
	static PFNGLGETVERTEXATTRIBIVPROC_HPP fn=reinterpret_cast<PFNGLGETVERTEXATTRIBIVPROC_HPP>(_impl::_get_proc_address("glGetVertexAttribiv",3,1));
	 fn(index1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Hint
#define GL_HPP_FUNDEF_Hint
typedef void (*PFNGLHINTPROC_HPP)(GLenum,GLenum);
static inline void Hint(GLenum target1,GLenum mode1)
{
	static PFNGLHINTPROC_HPP fn=reinterpret_cast<PFNGLHINTPROC_HPP>(_impl::_get_proc_address("glHint",3,1));
	 fn(target1,mode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IndexMask
#define GL_HPP_FUNDEF_IndexMask
typedef void (*PFNGLINDEXMASKPROC_HPP)(GLuint);
static inline void IndexMask(GLuint mask1)
{
	static PFNGLINDEXMASKPROC_HPP fn=reinterpret_cast<PFNGLINDEXMASKPROC_HPP>(_impl::_get_proc_address("glIndexMask",3,1));
	 fn(mask1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IndexPointer
#define GL_HPP_FUNDEF_IndexPointer
typedef void (*PFNGLINDEXPOINTERPROC_HPP)(GLenum,GLsizei,const void *);
static inline void IndexPointer(GLenum type1,GLsizei stride1,const void * pointer1)
{
	static PFNGLINDEXPOINTERPROC_HPP fn=reinterpret_cast<PFNGLINDEXPOINTERPROC_HPP>(_impl::_get_proc_address("glIndexPointer",3,1));
	 fn(type1,stride1,pointer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Indexd
#define GL_HPP_FUNDEF_Indexd
typedef void (*PFNGLINDEXDPROC_HPP)(GLdouble);
static inline void Indexd(GLdouble c1)
{
	static PFNGLINDEXDPROC_HPP fn=reinterpret_cast<PFNGLINDEXDPROC_HPP>(_impl::_get_proc_address("glIndexd",3,1));
	 fn(c1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Indexdv
#define GL_HPP_FUNDEF_Indexdv
typedef void (*PFNGLINDEXDVPROC_HPP)(const GLdouble *);
static inline void Indexdv(const GLdouble * c1)
{
	static PFNGLINDEXDVPROC_HPP fn=reinterpret_cast<PFNGLINDEXDVPROC_HPP>(_impl::_get_proc_address("glIndexdv",3,1));
	 fn(c1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Indexf
#define GL_HPP_FUNDEF_Indexf
typedef void (*PFNGLINDEXFPROC_HPP)(GLfloat);
static inline void Indexf(GLfloat c1)
{
	static PFNGLINDEXFPROC_HPP fn=reinterpret_cast<PFNGLINDEXFPROC_HPP>(_impl::_get_proc_address("glIndexf",3,1));
	 fn(c1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Indexfv
#define GL_HPP_FUNDEF_Indexfv
typedef void (*PFNGLINDEXFVPROC_HPP)(const GLfloat *);
static inline void Indexfv(const GLfloat * c1)
{
	static PFNGLINDEXFVPROC_HPP fn=reinterpret_cast<PFNGLINDEXFVPROC_HPP>(_impl::_get_proc_address("glIndexfv",3,1));
	 fn(c1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Indexi
#define GL_HPP_FUNDEF_Indexi
typedef void (*PFNGLINDEXIPROC_HPP)(GLint);
static inline void Indexi(GLint c1)
{
	static PFNGLINDEXIPROC_HPP fn=reinterpret_cast<PFNGLINDEXIPROC_HPP>(_impl::_get_proc_address("glIndexi",3,1));
	 fn(c1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Indexiv
#define GL_HPP_FUNDEF_Indexiv
typedef void (*PFNGLINDEXIVPROC_HPP)(const GLint *);
static inline void Indexiv(const GLint * c1)
{
	static PFNGLINDEXIVPROC_HPP fn=reinterpret_cast<PFNGLINDEXIVPROC_HPP>(_impl::_get_proc_address("glIndexiv",3,1));
	 fn(c1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Indexs
#define GL_HPP_FUNDEF_Indexs
typedef void (*PFNGLINDEXSPROC_HPP)(GLshort);
static inline void Indexs(GLshort c1)
{
	static PFNGLINDEXSPROC_HPP fn=reinterpret_cast<PFNGLINDEXSPROC_HPP>(_impl::_get_proc_address("glIndexs",3,1));
	 fn(c1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Indexsv
#define GL_HPP_FUNDEF_Indexsv
typedef void (*PFNGLINDEXSVPROC_HPP)(const GLshort *);
static inline void Indexsv(const GLshort * c1)
{
	static PFNGLINDEXSVPROC_HPP fn=reinterpret_cast<PFNGLINDEXSVPROC_HPP>(_impl::_get_proc_address("glIndexsv",3,1));
	 fn(c1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Indexub
#define GL_HPP_FUNDEF_Indexub
typedef void (*PFNGLINDEXUBPROC_HPP)(GLubyte);
static inline void Indexub(GLubyte c1)
{
	static PFNGLINDEXUBPROC_HPP fn=reinterpret_cast<PFNGLINDEXUBPROC_HPP>(_impl::_get_proc_address("glIndexub",3,1));
	 fn(c1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Indexubv
#define GL_HPP_FUNDEF_Indexubv
typedef void (*PFNGLINDEXUBVPROC_HPP)(const GLubyte *);
static inline void Indexubv(const GLubyte * c1)
{
	static PFNGLINDEXUBVPROC_HPP fn=reinterpret_cast<PFNGLINDEXUBVPROC_HPP>(_impl::_get_proc_address("glIndexubv",3,1));
	 fn(c1);
}
#endif

#ifndef	GL_HPP_FUNDEF_InitNames
#define GL_HPP_FUNDEF_InitNames
typedef void (*PFNGLINITNAMESPROC_HPP)();
static inline void InitNames()
{
	static PFNGLINITNAMESPROC_HPP fn=reinterpret_cast<PFNGLINITNAMESPROC_HPP>(_impl::_get_proc_address("glInitNames",3,1));
	 fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_InterleavedArrays
#define GL_HPP_FUNDEF_InterleavedArrays
typedef void (*PFNGLINTERLEAVEDARRAYSPROC_HPP)(GLenum,GLsizei,const void *);
static inline void InterleavedArrays(GLenum format1,GLsizei stride1,const void * pointer1)
{
	static PFNGLINTERLEAVEDARRAYSPROC_HPP fn=reinterpret_cast<PFNGLINTERLEAVEDARRAYSPROC_HPP>(_impl::_get_proc_address("glInterleavedArrays",3,1));
	 fn(format1,stride1,pointer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsBuffer
#define GL_HPP_FUNDEF_IsBuffer
typedef GLboolean (*PFNGLISBUFFERPROC_HPP)(GLuint);
static inline GLboolean IsBuffer(GLuint buffer1)
{
	static PFNGLISBUFFERPROC_HPP fn=reinterpret_cast<PFNGLISBUFFERPROC_HPP>(_impl::_get_proc_address("glIsBuffer",3,1));
	return fn(buffer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsEnabled
#define GL_HPP_FUNDEF_IsEnabled
typedef GLboolean (*PFNGLISENABLEDPROC_HPP)(GLenum);
static inline GLboolean IsEnabled(GLenum cap1)
{
	static PFNGLISENABLEDPROC_HPP fn=reinterpret_cast<PFNGLISENABLEDPROC_HPP>(_impl::_get_proc_address("glIsEnabled",3,1));
	return fn(cap1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsEnabledi
#define GL_HPP_FUNDEF_IsEnabledi
typedef GLboolean (*PFNGLISENABLEDIPROC_HPP)(GLenum,GLuint);
static inline GLboolean IsEnabledi(GLenum target1,GLuint index1)
{
	static PFNGLISENABLEDIPROC_HPP fn=reinterpret_cast<PFNGLISENABLEDIPROC_HPP>(_impl::_get_proc_address("glIsEnabledi",3,1));
	return fn(target1,index1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsFramebuffer
#define GL_HPP_FUNDEF_IsFramebuffer
typedef GLboolean (*PFNGLISFRAMEBUFFERPROC_HPP)(GLuint);
static inline GLboolean IsFramebuffer(GLuint framebuffer1)
{
	static PFNGLISFRAMEBUFFERPROC_HPP fn=reinterpret_cast<PFNGLISFRAMEBUFFERPROC_HPP>(_impl::_get_proc_address("glIsFramebuffer",3,1));
	return fn(framebuffer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsList
#define GL_HPP_FUNDEF_IsList
typedef GLboolean (*PFNGLISLISTPROC_HPP)(GLuint);
static inline GLboolean IsList(GLuint list1)
{
	static PFNGLISLISTPROC_HPP fn=reinterpret_cast<PFNGLISLISTPROC_HPP>(_impl::_get_proc_address("glIsList",3,1));
	return fn(list1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsProgram
#define GL_HPP_FUNDEF_IsProgram
typedef GLboolean (*PFNGLISPROGRAMPROC_HPP)(GLuint);
static inline GLboolean IsProgram(GLuint program1)
{
	static PFNGLISPROGRAMPROC_HPP fn=reinterpret_cast<PFNGLISPROGRAMPROC_HPP>(_impl::_get_proc_address("glIsProgram",3,1));
	return fn(program1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsQuery
#define GL_HPP_FUNDEF_IsQuery
typedef GLboolean (*PFNGLISQUERYPROC_HPP)(GLuint);
static inline GLboolean IsQuery(GLuint id1)
{
	static PFNGLISQUERYPROC_HPP fn=reinterpret_cast<PFNGLISQUERYPROC_HPP>(_impl::_get_proc_address("glIsQuery",3,1));
	return fn(id1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsRenderbuffer
#define GL_HPP_FUNDEF_IsRenderbuffer
typedef GLboolean (*PFNGLISRENDERBUFFERPROC_HPP)(GLuint);
static inline GLboolean IsRenderbuffer(GLuint renderbuffer1)
{
	static PFNGLISRENDERBUFFERPROC_HPP fn=reinterpret_cast<PFNGLISRENDERBUFFERPROC_HPP>(_impl::_get_proc_address("glIsRenderbuffer",3,1));
	return fn(renderbuffer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsShader
#define GL_HPP_FUNDEF_IsShader
typedef GLboolean (*PFNGLISSHADERPROC_HPP)(GLuint);
static inline GLboolean IsShader(GLuint shader1)
{
	static PFNGLISSHADERPROC_HPP fn=reinterpret_cast<PFNGLISSHADERPROC_HPP>(_impl::_get_proc_address("glIsShader",3,1));
	return fn(shader1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsTexture
#define GL_HPP_FUNDEF_IsTexture
typedef GLboolean (*PFNGLISTEXTUREPROC_HPP)(GLuint);
static inline GLboolean IsTexture(GLuint texture1)
{
	static PFNGLISTEXTUREPROC_HPP fn=reinterpret_cast<PFNGLISTEXTUREPROC_HPP>(_impl::_get_proc_address("glIsTexture",3,1));
	return fn(texture1);
}
#endif

#ifndef	GL_HPP_FUNDEF_IsVertexArray
#define GL_HPP_FUNDEF_IsVertexArray
typedef GLboolean (*PFNGLISVERTEXARRAYPROC_HPP)(GLuint);
static inline GLboolean IsVertexArray(GLuint array1)
{
	static PFNGLISVERTEXARRAYPROC_HPP fn=reinterpret_cast<PFNGLISVERTEXARRAYPROC_HPP>(_impl::_get_proc_address("glIsVertexArray",3,1));
	return fn(array1);
}
#endif

#ifndef	GL_HPP_FUNDEF_LightModelf
#define GL_HPP_FUNDEF_LightModelf
typedef void (*PFNGLLIGHTMODELFPROC_HPP)(GLenum,GLfloat);
static inline void LightModelf(GLenum pname1,GLfloat param1)
{
	static PFNGLLIGHTMODELFPROC_HPP fn=reinterpret_cast<PFNGLLIGHTMODELFPROC_HPP>(_impl::_get_proc_address("glLightModelf",3,1));
	 fn(pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_LightModelfv
#define GL_HPP_FUNDEF_LightModelfv
typedef void (*PFNGLLIGHTMODELFVPROC_HPP)(GLenum,const GLfloat *);
static inline void LightModelfv(GLenum pname1,const GLfloat * params1)
{
	static PFNGLLIGHTMODELFVPROC_HPP fn=reinterpret_cast<PFNGLLIGHTMODELFVPROC_HPP>(_impl::_get_proc_address("glLightModelfv",3,1));
	 fn(pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_LightModeli
#define GL_HPP_FUNDEF_LightModeli
typedef void (*PFNGLLIGHTMODELIPROC_HPP)(GLenum,GLint);
static inline void LightModeli(GLenum pname1,GLint param1)
{
	static PFNGLLIGHTMODELIPROC_HPP fn=reinterpret_cast<PFNGLLIGHTMODELIPROC_HPP>(_impl::_get_proc_address("glLightModeli",3,1));
	 fn(pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_LightModeliv
#define GL_HPP_FUNDEF_LightModeliv
typedef void (*PFNGLLIGHTMODELIVPROC_HPP)(GLenum,const GLint *);
static inline void LightModeliv(GLenum pname1,const GLint * params1)
{
	static PFNGLLIGHTMODELIVPROC_HPP fn=reinterpret_cast<PFNGLLIGHTMODELIVPROC_HPP>(_impl::_get_proc_address("glLightModeliv",3,1));
	 fn(pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Lightf
#define GL_HPP_FUNDEF_Lightf
typedef void (*PFNGLLIGHTFPROC_HPP)(GLenum,GLenum,GLfloat);
static inline void Lightf(GLenum light1,GLenum pname1,GLfloat param1)
{
	static PFNGLLIGHTFPROC_HPP fn=reinterpret_cast<PFNGLLIGHTFPROC_HPP>(_impl::_get_proc_address("glLightf",3,1));
	 fn(light1,pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Lightfv
#define GL_HPP_FUNDEF_Lightfv
typedef void (*PFNGLLIGHTFVPROC_HPP)(GLenum,GLenum,const GLfloat *);
static inline void Lightfv(GLenum light1,GLenum pname1,const GLfloat * params1)
{
	static PFNGLLIGHTFVPROC_HPP fn=reinterpret_cast<PFNGLLIGHTFVPROC_HPP>(_impl::_get_proc_address("glLightfv",3,1));
	 fn(light1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Lighti
#define GL_HPP_FUNDEF_Lighti
typedef void (*PFNGLLIGHTIPROC_HPP)(GLenum,GLenum,GLint);
static inline void Lighti(GLenum light1,GLenum pname1,GLint param1)
{
	static PFNGLLIGHTIPROC_HPP fn=reinterpret_cast<PFNGLLIGHTIPROC_HPP>(_impl::_get_proc_address("glLighti",3,1));
	 fn(light1,pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Lightiv
#define GL_HPP_FUNDEF_Lightiv
typedef void (*PFNGLLIGHTIVPROC_HPP)(GLenum,GLenum,const GLint *);
static inline void Lightiv(GLenum light1,GLenum pname1,const GLint * params1)
{
	static PFNGLLIGHTIVPROC_HPP fn=reinterpret_cast<PFNGLLIGHTIVPROC_HPP>(_impl::_get_proc_address("glLightiv",3,1));
	 fn(light1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_LineStipple
#define GL_HPP_FUNDEF_LineStipple
typedef void (*PFNGLLINESTIPPLEPROC_HPP)(GLint,GLushort);
static inline void LineStipple(GLint factor1,GLushort pattern1)
{
	static PFNGLLINESTIPPLEPROC_HPP fn=reinterpret_cast<PFNGLLINESTIPPLEPROC_HPP>(_impl::_get_proc_address("glLineStipple",3,1));
	 fn(factor1,pattern1);
}
#endif

#ifndef	GL_HPP_FUNDEF_LineWidth
#define GL_HPP_FUNDEF_LineWidth
typedef void (*PFNGLLINEWIDTHPROC_HPP)(GLfloat);
static inline void LineWidth(GLfloat width1)
{
	static PFNGLLINEWIDTHPROC_HPP fn=reinterpret_cast<PFNGLLINEWIDTHPROC_HPP>(_impl::_get_proc_address("glLineWidth",3,1));
	 fn(width1);
}
#endif

#ifndef	GL_HPP_FUNDEF_LinkProgram
#define GL_HPP_FUNDEF_LinkProgram
typedef void (*PFNGLLINKPROGRAMPROC_HPP)(GLuint);
static inline void LinkProgram(GLuint program1)
{
	static PFNGLLINKPROGRAMPROC_HPP fn=reinterpret_cast<PFNGLLINKPROGRAMPROC_HPP>(_impl::_get_proc_address("glLinkProgram",3,1));
	 fn(program1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ListBase
#define GL_HPP_FUNDEF_ListBase
typedef void (*PFNGLLISTBASEPROC_HPP)(GLuint);
static inline void ListBase(GLuint base1)
{
	static PFNGLLISTBASEPROC_HPP fn=reinterpret_cast<PFNGLLISTBASEPROC_HPP>(_impl::_get_proc_address("glListBase",3,1));
	 fn(base1);
}
#endif

#ifndef	GL_HPP_FUNDEF_LoadIdentity
#define GL_HPP_FUNDEF_LoadIdentity
typedef void (*PFNGLLOADIDENTITYPROC_HPP)();
static inline void LoadIdentity()
{
	static PFNGLLOADIDENTITYPROC_HPP fn=reinterpret_cast<PFNGLLOADIDENTITYPROC_HPP>(_impl::_get_proc_address("glLoadIdentity",3,1));
	 fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_LoadMatrixd
#define GL_HPP_FUNDEF_LoadMatrixd
typedef void (*PFNGLLOADMATRIXDPROC_HPP)(const GLdouble *);
static inline void LoadMatrixd(const GLdouble * m1)
{
	static PFNGLLOADMATRIXDPROC_HPP fn=reinterpret_cast<PFNGLLOADMATRIXDPROC_HPP>(_impl::_get_proc_address("glLoadMatrixd",3,1));
	 fn(m1);
}
#endif

#ifndef	GL_HPP_FUNDEF_LoadMatrixf
#define GL_HPP_FUNDEF_LoadMatrixf
typedef void (*PFNGLLOADMATRIXFPROC_HPP)(const GLfloat *);
static inline void LoadMatrixf(const GLfloat * m1)
{
	static PFNGLLOADMATRIXFPROC_HPP fn=reinterpret_cast<PFNGLLOADMATRIXFPROC_HPP>(_impl::_get_proc_address("glLoadMatrixf",3,1));
	 fn(m1);
}
#endif

#ifndef	GL_HPP_FUNDEF_LoadName
#define GL_HPP_FUNDEF_LoadName
typedef void (*PFNGLLOADNAMEPROC_HPP)(GLuint);
static inline void LoadName(GLuint name1)
{
	static PFNGLLOADNAMEPROC_HPP fn=reinterpret_cast<PFNGLLOADNAMEPROC_HPP>(_impl::_get_proc_address("glLoadName",3,1));
	 fn(name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_LoadTransposeMatrixd
#define GL_HPP_FUNDEF_LoadTransposeMatrixd
typedef void (*PFNGLLOADTRANSPOSEMATRIXDPROC_HPP)(const GLdouble *);
static inline void LoadTransposeMatrixd(const GLdouble * m1)
{
	static PFNGLLOADTRANSPOSEMATRIXDPROC_HPP fn=reinterpret_cast<PFNGLLOADTRANSPOSEMATRIXDPROC_HPP>(_impl::_get_proc_address("glLoadTransposeMatrixd",3,1));
	 fn(m1);
}
#endif

#ifndef	GL_HPP_FUNDEF_LoadTransposeMatrixf
#define GL_HPP_FUNDEF_LoadTransposeMatrixf
typedef void (*PFNGLLOADTRANSPOSEMATRIXFPROC_HPP)(const GLfloat *);
static inline void LoadTransposeMatrixf(const GLfloat * m1)
{
	static PFNGLLOADTRANSPOSEMATRIXFPROC_HPP fn=reinterpret_cast<PFNGLLOADTRANSPOSEMATRIXFPROC_HPP>(_impl::_get_proc_address("glLoadTransposeMatrixf",3,1));
	 fn(m1);
}
#endif

#ifndef	GL_HPP_FUNDEF_LogicOp
#define GL_HPP_FUNDEF_LogicOp
typedef void (*PFNGLLOGICOPPROC_HPP)(GLenum);
static inline void LogicOp(GLenum opcode1)
{
	static PFNGLLOGICOPPROC_HPP fn=reinterpret_cast<PFNGLLOGICOPPROC_HPP>(_impl::_get_proc_address("glLogicOp",3,1));
	 fn(opcode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Map1d
#define GL_HPP_FUNDEF_Map1d
typedef void (*PFNGLMAP1DPROC_HPP)(GLenum,GLdouble,GLdouble,GLint,GLint,const GLdouble *);
static inline void Map1d(GLenum target1,GLdouble u11,GLdouble u21,GLint stride1,GLint order1,const GLdouble * points1)
{
	static PFNGLMAP1DPROC_HPP fn=reinterpret_cast<PFNGLMAP1DPROC_HPP>(_impl::_get_proc_address("glMap1d",3,1));
	 fn(target1,u11,u21,stride1,order1,points1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Map1f
#define GL_HPP_FUNDEF_Map1f
typedef void (*PFNGLMAP1FPROC_HPP)(GLenum,GLfloat,GLfloat,GLint,GLint,const GLfloat *);
static inline void Map1f(GLenum target1,GLfloat u11,GLfloat u21,GLint stride1,GLint order1,const GLfloat * points1)
{
	static PFNGLMAP1FPROC_HPP fn=reinterpret_cast<PFNGLMAP1FPROC_HPP>(_impl::_get_proc_address("glMap1f",3,1));
	 fn(target1,u11,u21,stride1,order1,points1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Map2d
#define GL_HPP_FUNDEF_Map2d
typedef void (*PFNGLMAP2DPROC_HPP)(GLenum,GLdouble,GLdouble,GLint,GLint,GLdouble,GLdouble,GLint,GLint,const GLdouble *);
static inline void Map2d(GLenum target1,GLdouble u11,GLdouble u21,GLint ustride1,GLint uorder1,GLdouble v11,GLdouble v21,GLint vstride1,GLint vorder1,const GLdouble * points1)
{
	static PFNGLMAP2DPROC_HPP fn=reinterpret_cast<PFNGLMAP2DPROC_HPP>(_impl::_get_proc_address("glMap2d",3,1));
	 fn(target1,u11,u21,ustride1,uorder1,v11,v21,vstride1,vorder1,points1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Map2f
#define GL_HPP_FUNDEF_Map2f
typedef void (*PFNGLMAP2FPROC_HPP)(GLenum,GLfloat,GLfloat,GLint,GLint,GLfloat,GLfloat,GLint,GLint,const GLfloat *);
static inline void Map2f(GLenum target1,GLfloat u11,GLfloat u21,GLint ustride1,GLint uorder1,GLfloat v11,GLfloat v21,GLint vstride1,GLint vorder1,const GLfloat * points1)
{
	static PFNGLMAP2FPROC_HPP fn=reinterpret_cast<PFNGLMAP2FPROC_HPP>(_impl::_get_proc_address("glMap2f",3,1));
	 fn(target1,u11,u21,ustride1,uorder1,v11,v21,vstride1,vorder1,points1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MapBuffer
#define GL_HPP_FUNDEF_MapBuffer
typedef void * (*PFNGLMAPBUFFERPROC_HPP)(GLenum,GLenum);
static inline void * MapBuffer(GLenum target1,GLenum access1)
{
	static PFNGLMAPBUFFERPROC_HPP fn=reinterpret_cast<PFNGLMAPBUFFERPROC_HPP>(_impl::_get_proc_address("glMapBuffer",3,1));
	return fn(target1,access1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MapBufferRange
#define GL_HPP_FUNDEF_MapBufferRange
typedef void * (*PFNGLMAPBUFFERRANGEPROC_HPP)(GLenum,GLintptr,GLsizeiptr,GLbitfield);
static inline void * MapBufferRange(GLenum target1,GLintptr offset1,GLsizeiptr length1,GLbitfield access1)
{
	static PFNGLMAPBUFFERRANGEPROC_HPP fn=reinterpret_cast<PFNGLMAPBUFFERRANGEPROC_HPP>(_impl::_get_proc_address("glMapBufferRange",3,1));
	return fn(target1,offset1,length1,access1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MapGrid1d
#define GL_HPP_FUNDEF_MapGrid1d
typedef void (*PFNGLMAPGRID1DPROC_HPP)(GLint,GLdouble,GLdouble);
static inline void MapGrid1d(GLint un1,GLdouble u11,GLdouble u21)
{
	static PFNGLMAPGRID1DPROC_HPP fn=reinterpret_cast<PFNGLMAPGRID1DPROC_HPP>(_impl::_get_proc_address("glMapGrid1d",3,1));
	 fn(un1,u11,u21);
}
#endif

#ifndef	GL_HPP_FUNDEF_MapGrid1f
#define GL_HPP_FUNDEF_MapGrid1f
typedef void (*PFNGLMAPGRID1FPROC_HPP)(GLint,GLfloat,GLfloat);
static inline void MapGrid1f(GLint un1,GLfloat u11,GLfloat u21)
{
	static PFNGLMAPGRID1FPROC_HPP fn=reinterpret_cast<PFNGLMAPGRID1FPROC_HPP>(_impl::_get_proc_address("glMapGrid1f",3,1));
	 fn(un1,u11,u21);
}
#endif

#ifndef	GL_HPP_FUNDEF_MapGrid2d
#define GL_HPP_FUNDEF_MapGrid2d
typedef void (*PFNGLMAPGRID2DPROC_HPP)(GLint,GLdouble,GLdouble,GLint,GLdouble,GLdouble);
static inline void MapGrid2d(GLint un1,GLdouble u11,GLdouble u21,GLint vn1,GLdouble v11,GLdouble v21)
{
	static PFNGLMAPGRID2DPROC_HPP fn=reinterpret_cast<PFNGLMAPGRID2DPROC_HPP>(_impl::_get_proc_address("glMapGrid2d",3,1));
	 fn(un1,u11,u21,vn1,v11,v21);
}
#endif

#ifndef	GL_HPP_FUNDEF_MapGrid2f
#define GL_HPP_FUNDEF_MapGrid2f
typedef void (*PFNGLMAPGRID2FPROC_HPP)(GLint,GLfloat,GLfloat,GLint,GLfloat,GLfloat);
static inline void MapGrid2f(GLint un1,GLfloat u11,GLfloat u21,GLint vn1,GLfloat v11,GLfloat v21)
{
	static PFNGLMAPGRID2FPROC_HPP fn=reinterpret_cast<PFNGLMAPGRID2FPROC_HPP>(_impl::_get_proc_address("glMapGrid2f",3,1));
	 fn(un1,u11,u21,vn1,v11,v21);
}
#endif

#ifndef	GL_HPP_FUNDEF_Materialf
#define GL_HPP_FUNDEF_Materialf
typedef void (*PFNGLMATERIALFPROC_HPP)(GLenum,GLenum,GLfloat);
static inline void Materialf(GLenum face1,GLenum pname1,GLfloat param1)
{
	static PFNGLMATERIALFPROC_HPP fn=reinterpret_cast<PFNGLMATERIALFPROC_HPP>(_impl::_get_proc_address("glMaterialf",3,1));
	 fn(face1,pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Materialfv
#define GL_HPP_FUNDEF_Materialfv
typedef void (*PFNGLMATERIALFVPROC_HPP)(GLenum,GLenum,const GLfloat *);
static inline void Materialfv(GLenum face1,GLenum pname1,const GLfloat * params1)
{
	static PFNGLMATERIALFVPROC_HPP fn=reinterpret_cast<PFNGLMATERIALFVPROC_HPP>(_impl::_get_proc_address("glMaterialfv",3,1));
	 fn(face1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Materiali
#define GL_HPP_FUNDEF_Materiali
typedef void (*PFNGLMATERIALIPROC_HPP)(GLenum,GLenum,GLint);
static inline void Materiali(GLenum face1,GLenum pname1,GLint param1)
{
	static PFNGLMATERIALIPROC_HPP fn=reinterpret_cast<PFNGLMATERIALIPROC_HPP>(_impl::_get_proc_address("glMateriali",3,1));
	 fn(face1,pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Materialiv
#define GL_HPP_FUNDEF_Materialiv
typedef void (*PFNGLMATERIALIVPROC_HPP)(GLenum,GLenum,const GLint *);
static inline void Materialiv(GLenum face1,GLenum pname1,const GLint * params1)
{
	static PFNGLMATERIALIVPROC_HPP fn=reinterpret_cast<PFNGLMATERIALIVPROC_HPP>(_impl::_get_proc_address("glMaterialiv",3,1));
	 fn(face1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MatrixMode
#define GL_HPP_FUNDEF_MatrixMode
typedef void (*PFNGLMATRIXMODEPROC_HPP)(GLenum);
static inline void MatrixMode(GLenum mode1)
{
	static PFNGLMATRIXMODEPROC_HPP fn=reinterpret_cast<PFNGLMATRIXMODEPROC_HPP>(_impl::_get_proc_address("glMatrixMode",3,1));
	 fn(mode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultMatrixd
#define GL_HPP_FUNDEF_MultMatrixd
typedef void (*PFNGLMULTMATRIXDPROC_HPP)(const GLdouble *);
static inline void MultMatrixd(const GLdouble * m1)
{
	static PFNGLMULTMATRIXDPROC_HPP fn=reinterpret_cast<PFNGLMULTMATRIXDPROC_HPP>(_impl::_get_proc_address("glMultMatrixd",3,1));
	 fn(m1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultMatrixf
#define GL_HPP_FUNDEF_MultMatrixf
typedef void (*PFNGLMULTMATRIXFPROC_HPP)(const GLfloat *);
static inline void MultMatrixf(const GLfloat * m1)
{
	static PFNGLMULTMATRIXFPROC_HPP fn=reinterpret_cast<PFNGLMULTMATRIXFPROC_HPP>(_impl::_get_proc_address("glMultMatrixf",3,1));
	 fn(m1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultTransposeMatrixd
#define GL_HPP_FUNDEF_MultTransposeMatrixd
typedef void (*PFNGLMULTTRANSPOSEMATRIXDPROC_HPP)(const GLdouble *);
static inline void MultTransposeMatrixd(const GLdouble * m1)
{
	static PFNGLMULTTRANSPOSEMATRIXDPROC_HPP fn=reinterpret_cast<PFNGLMULTTRANSPOSEMATRIXDPROC_HPP>(_impl::_get_proc_address("glMultTransposeMatrixd",3,1));
	 fn(m1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultTransposeMatrixf
#define GL_HPP_FUNDEF_MultTransposeMatrixf
typedef void (*PFNGLMULTTRANSPOSEMATRIXFPROC_HPP)(const GLfloat *);
static inline void MultTransposeMatrixf(const GLfloat * m1)
{
	static PFNGLMULTTRANSPOSEMATRIXFPROC_HPP fn=reinterpret_cast<PFNGLMULTTRANSPOSEMATRIXFPROC_HPP>(_impl::_get_proc_address("glMultTransposeMatrixf",3,1));
	 fn(m1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiDrawArrays
#define GL_HPP_FUNDEF_MultiDrawArrays
typedef void (*PFNGLMULTIDRAWARRAYSPROC_HPP)(GLenum,const GLint *,const GLsizei *,GLsizei);
static inline void MultiDrawArrays(GLenum mode1,const GLint * first1,const GLsizei * count1,GLsizei drawcount1)
{
	static PFNGLMULTIDRAWARRAYSPROC_HPP fn=reinterpret_cast<PFNGLMULTIDRAWARRAYSPROC_HPP>(_impl::_get_proc_address("glMultiDrawArrays",3,1));
	 fn(mode1,first1,count1,drawcount1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiDrawElements
#define GL_HPP_FUNDEF_MultiDrawElements
typedef void (*PFNGLMULTIDRAWELEMENTSPROC_HPP)(GLenum,const GLsizei *,GLenum,const void *const*,GLsizei);
static inline void MultiDrawElements(GLenum mode1,const GLsizei * count1,GLenum type1,const void *const* indices1,GLsizei drawcount1)
{
	static PFNGLMULTIDRAWELEMENTSPROC_HPP fn=reinterpret_cast<PFNGLMULTIDRAWELEMENTSPROC_HPP>(_impl::_get_proc_address("glMultiDrawElements",3,1));
	 fn(mode1,count1,type1,indices1,drawcount1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord1d
#define GL_HPP_FUNDEF_MultiTexCoord1d
typedef void (*PFNGLMULTITEXCOORD1DPROC_HPP)(GLenum,GLdouble);
static inline void MultiTexCoord1d(GLenum target1,GLdouble s1)
{
	static PFNGLMULTITEXCOORD1DPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD1DPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord1d",3,1));
	 fn(target1,s1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord1dv
#define GL_HPP_FUNDEF_MultiTexCoord1dv
typedef void (*PFNGLMULTITEXCOORD1DVPROC_HPP)(GLenum,const GLdouble *);
static inline void MultiTexCoord1dv(GLenum target1,const GLdouble * v1)
{
	static PFNGLMULTITEXCOORD1DVPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD1DVPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord1dv",3,1));
	 fn(target1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord1f
#define GL_HPP_FUNDEF_MultiTexCoord1f
typedef void (*PFNGLMULTITEXCOORD1FPROC_HPP)(GLenum,GLfloat);
static inline void MultiTexCoord1f(GLenum target1,GLfloat s1)
{
	static PFNGLMULTITEXCOORD1FPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD1FPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord1f",3,1));
	 fn(target1,s1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord1fv
#define GL_HPP_FUNDEF_MultiTexCoord1fv
typedef void (*PFNGLMULTITEXCOORD1FVPROC_HPP)(GLenum,const GLfloat *);
static inline void MultiTexCoord1fv(GLenum target1,const GLfloat * v1)
{
	static PFNGLMULTITEXCOORD1FVPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD1FVPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord1fv",3,1));
	 fn(target1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord1i
#define GL_HPP_FUNDEF_MultiTexCoord1i
typedef void (*PFNGLMULTITEXCOORD1IPROC_HPP)(GLenum,GLint);
static inline void MultiTexCoord1i(GLenum target1,GLint s1)
{
	static PFNGLMULTITEXCOORD1IPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD1IPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord1i",3,1));
	 fn(target1,s1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord1iv
#define GL_HPP_FUNDEF_MultiTexCoord1iv
typedef void (*PFNGLMULTITEXCOORD1IVPROC_HPP)(GLenum,const GLint *);
static inline void MultiTexCoord1iv(GLenum target1,const GLint * v1)
{
	static PFNGLMULTITEXCOORD1IVPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD1IVPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord1iv",3,1));
	 fn(target1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord1s
#define GL_HPP_FUNDEF_MultiTexCoord1s
typedef void (*PFNGLMULTITEXCOORD1SPROC_HPP)(GLenum,GLshort);
static inline void MultiTexCoord1s(GLenum target1,GLshort s1)
{
	static PFNGLMULTITEXCOORD1SPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD1SPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord1s",3,1));
	 fn(target1,s1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord1sv
#define GL_HPP_FUNDEF_MultiTexCoord1sv
typedef void (*PFNGLMULTITEXCOORD1SVPROC_HPP)(GLenum,const GLshort *);
static inline void MultiTexCoord1sv(GLenum target1,const GLshort * v1)
{
	static PFNGLMULTITEXCOORD1SVPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD1SVPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord1sv",3,1));
	 fn(target1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord2d
#define GL_HPP_FUNDEF_MultiTexCoord2d
typedef void (*PFNGLMULTITEXCOORD2DPROC_HPP)(GLenum,GLdouble,GLdouble);
static inline void MultiTexCoord2d(GLenum target1,GLdouble s1,GLdouble t1)
{
	static PFNGLMULTITEXCOORD2DPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD2DPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord2d",3,1));
	 fn(target1,s1,t1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord2dv
#define GL_HPP_FUNDEF_MultiTexCoord2dv
typedef void (*PFNGLMULTITEXCOORD2DVPROC_HPP)(GLenum,const GLdouble *);
static inline void MultiTexCoord2dv(GLenum target1,const GLdouble * v1)
{
	static PFNGLMULTITEXCOORD2DVPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD2DVPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord2dv",3,1));
	 fn(target1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord2f
#define GL_HPP_FUNDEF_MultiTexCoord2f
typedef void (*PFNGLMULTITEXCOORD2FPROC_HPP)(GLenum,GLfloat,GLfloat);
static inline void MultiTexCoord2f(GLenum target1,GLfloat s1,GLfloat t1)
{
	static PFNGLMULTITEXCOORD2FPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD2FPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord2f",3,1));
	 fn(target1,s1,t1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord2fv
#define GL_HPP_FUNDEF_MultiTexCoord2fv
typedef void (*PFNGLMULTITEXCOORD2FVPROC_HPP)(GLenum,const GLfloat *);
static inline void MultiTexCoord2fv(GLenum target1,const GLfloat * v1)
{
	static PFNGLMULTITEXCOORD2FVPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD2FVPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord2fv",3,1));
	 fn(target1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord2i
#define GL_HPP_FUNDEF_MultiTexCoord2i
typedef void (*PFNGLMULTITEXCOORD2IPROC_HPP)(GLenum,GLint,GLint);
static inline void MultiTexCoord2i(GLenum target1,GLint s1,GLint t1)
{
	static PFNGLMULTITEXCOORD2IPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD2IPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord2i",3,1));
	 fn(target1,s1,t1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord2iv
#define GL_HPP_FUNDEF_MultiTexCoord2iv
typedef void (*PFNGLMULTITEXCOORD2IVPROC_HPP)(GLenum,const GLint *);
static inline void MultiTexCoord2iv(GLenum target1,const GLint * v1)
{
	static PFNGLMULTITEXCOORD2IVPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD2IVPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord2iv",3,1));
	 fn(target1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord2s
#define GL_HPP_FUNDEF_MultiTexCoord2s
typedef void (*PFNGLMULTITEXCOORD2SPROC_HPP)(GLenum,GLshort,GLshort);
static inline void MultiTexCoord2s(GLenum target1,GLshort s1,GLshort t1)
{
	static PFNGLMULTITEXCOORD2SPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD2SPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord2s",3,1));
	 fn(target1,s1,t1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord2sv
#define GL_HPP_FUNDEF_MultiTexCoord2sv
typedef void (*PFNGLMULTITEXCOORD2SVPROC_HPP)(GLenum,const GLshort *);
static inline void MultiTexCoord2sv(GLenum target1,const GLshort * v1)
{
	static PFNGLMULTITEXCOORD2SVPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD2SVPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord2sv",3,1));
	 fn(target1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord3d
#define GL_HPP_FUNDEF_MultiTexCoord3d
typedef void (*PFNGLMULTITEXCOORD3DPROC_HPP)(GLenum,GLdouble,GLdouble,GLdouble);
static inline void MultiTexCoord3d(GLenum target1,GLdouble s1,GLdouble t1,GLdouble r1)
{
	static PFNGLMULTITEXCOORD3DPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD3DPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord3d",3,1));
	 fn(target1,s1,t1,r1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord3dv
#define GL_HPP_FUNDEF_MultiTexCoord3dv
typedef void (*PFNGLMULTITEXCOORD3DVPROC_HPP)(GLenum,const GLdouble *);
static inline void MultiTexCoord3dv(GLenum target1,const GLdouble * v1)
{
	static PFNGLMULTITEXCOORD3DVPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD3DVPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord3dv",3,1));
	 fn(target1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord3f
#define GL_HPP_FUNDEF_MultiTexCoord3f
typedef void (*PFNGLMULTITEXCOORD3FPROC_HPP)(GLenum,GLfloat,GLfloat,GLfloat);
static inline void MultiTexCoord3f(GLenum target1,GLfloat s1,GLfloat t1,GLfloat r1)
{
	static PFNGLMULTITEXCOORD3FPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD3FPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord3f",3,1));
	 fn(target1,s1,t1,r1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord3fv
#define GL_HPP_FUNDEF_MultiTexCoord3fv
typedef void (*PFNGLMULTITEXCOORD3FVPROC_HPP)(GLenum,const GLfloat *);
static inline void MultiTexCoord3fv(GLenum target1,const GLfloat * v1)
{
	static PFNGLMULTITEXCOORD3FVPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD3FVPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord3fv",3,1));
	 fn(target1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord3i
#define GL_HPP_FUNDEF_MultiTexCoord3i
typedef void (*PFNGLMULTITEXCOORD3IPROC_HPP)(GLenum,GLint,GLint,GLint);
static inline void MultiTexCoord3i(GLenum target1,GLint s1,GLint t1,GLint r1)
{
	static PFNGLMULTITEXCOORD3IPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD3IPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord3i",3,1));
	 fn(target1,s1,t1,r1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord3iv
#define GL_HPP_FUNDEF_MultiTexCoord3iv
typedef void (*PFNGLMULTITEXCOORD3IVPROC_HPP)(GLenum,const GLint *);
static inline void MultiTexCoord3iv(GLenum target1,const GLint * v1)
{
	static PFNGLMULTITEXCOORD3IVPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD3IVPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord3iv",3,1));
	 fn(target1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord3s
#define GL_HPP_FUNDEF_MultiTexCoord3s
typedef void (*PFNGLMULTITEXCOORD3SPROC_HPP)(GLenum,GLshort,GLshort,GLshort);
static inline void MultiTexCoord3s(GLenum target1,GLshort s1,GLshort t1,GLshort r1)
{
	static PFNGLMULTITEXCOORD3SPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD3SPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord3s",3,1));
	 fn(target1,s1,t1,r1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord3sv
#define GL_HPP_FUNDEF_MultiTexCoord3sv
typedef void (*PFNGLMULTITEXCOORD3SVPROC_HPP)(GLenum,const GLshort *);
static inline void MultiTexCoord3sv(GLenum target1,const GLshort * v1)
{
	static PFNGLMULTITEXCOORD3SVPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD3SVPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord3sv",3,1));
	 fn(target1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord4d
#define GL_HPP_FUNDEF_MultiTexCoord4d
typedef void (*PFNGLMULTITEXCOORD4DPROC_HPP)(GLenum,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void MultiTexCoord4d(GLenum target1,GLdouble s1,GLdouble t1,GLdouble r1,GLdouble q1)
{
	static PFNGLMULTITEXCOORD4DPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD4DPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord4d",3,1));
	 fn(target1,s1,t1,r1,q1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord4dv
#define GL_HPP_FUNDEF_MultiTexCoord4dv
typedef void (*PFNGLMULTITEXCOORD4DVPROC_HPP)(GLenum,const GLdouble *);
static inline void MultiTexCoord4dv(GLenum target1,const GLdouble * v1)
{
	static PFNGLMULTITEXCOORD4DVPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD4DVPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord4dv",3,1));
	 fn(target1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord4f
#define GL_HPP_FUNDEF_MultiTexCoord4f
typedef void (*PFNGLMULTITEXCOORD4FPROC_HPP)(GLenum,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void MultiTexCoord4f(GLenum target1,GLfloat s1,GLfloat t1,GLfloat r1,GLfloat q1)
{
	static PFNGLMULTITEXCOORD4FPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD4FPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord4f",3,1));
	 fn(target1,s1,t1,r1,q1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord4fv
#define GL_HPP_FUNDEF_MultiTexCoord4fv
typedef void (*PFNGLMULTITEXCOORD4FVPROC_HPP)(GLenum,const GLfloat *);
static inline void MultiTexCoord4fv(GLenum target1,const GLfloat * v1)
{
	static PFNGLMULTITEXCOORD4FVPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD4FVPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord4fv",3,1));
	 fn(target1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord4i
#define GL_HPP_FUNDEF_MultiTexCoord4i
typedef void (*PFNGLMULTITEXCOORD4IPROC_HPP)(GLenum,GLint,GLint,GLint,GLint);
static inline void MultiTexCoord4i(GLenum target1,GLint s1,GLint t1,GLint r1,GLint q1)
{
	static PFNGLMULTITEXCOORD4IPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD4IPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord4i",3,1));
	 fn(target1,s1,t1,r1,q1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord4iv
#define GL_HPP_FUNDEF_MultiTexCoord4iv
typedef void (*PFNGLMULTITEXCOORD4IVPROC_HPP)(GLenum,const GLint *);
static inline void MultiTexCoord4iv(GLenum target1,const GLint * v1)
{
	static PFNGLMULTITEXCOORD4IVPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD4IVPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord4iv",3,1));
	 fn(target1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord4s
#define GL_HPP_FUNDEF_MultiTexCoord4s
typedef void (*PFNGLMULTITEXCOORD4SPROC_HPP)(GLenum,GLshort,GLshort,GLshort,GLshort);
static inline void MultiTexCoord4s(GLenum target1,GLshort s1,GLshort t1,GLshort r1,GLshort q1)
{
	static PFNGLMULTITEXCOORD4SPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD4SPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord4s",3,1));
	 fn(target1,s1,t1,r1,q1);
}
#endif

#ifndef	GL_HPP_FUNDEF_MultiTexCoord4sv
#define GL_HPP_FUNDEF_MultiTexCoord4sv
typedef void (*PFNGLMULTITEXCOORD4SVPROC_HPP)(GLenum,const GLshort *);
static inline void MultiTexCoord4sv(GLenum target1,const GLshort * v1)
{
	static PFNGLMULTITEXCOORD4SVPROC_HPP fn=reinterpret_cast<PFNGLMULTITEXCOORD4SVPROC_HPP>(_impl::_get_proc_address("glMultiTexCoord4sv",3,1));
	 fn(target1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_NewList
#define GL_HPP_FUNDEF_NewList
typedef void (*PFNGLNEWLISTPROC_HPP)(GLuint,GLenum);
static inline void NewList(GLuint list1,GLenum mode1)
{
	static PFNGLNEWLISTPROC_HPP fn=reinterpret_cast<PFNGLNEWLISTPROC_HPP>(_impl::_get_proc_address("glNewList",3,1));
	 fn(list1,mode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Normal3b
#define GL_HPP_FUNDEF_Normal3b
typedef void (*PFNGLNORMAL3BPROC_HPP)(GLbyte,GLbyte,GLbyte);
static inline void Normal3b(GLbyte nx1,GLbyte ny1,GLbyte nz1)
{
	static PFNGLNORMAL3BPROC_HPP fn=reinterpret_cast<PFNGLNORMAL3BPROC_HPP>(_impl::_get_proc_address("glNormal3b",3,1));
	 fn(nx1,ny1,nz1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Normal3bv
#define GL_HPP_FUNDEF_Normal3bv
typedef void (*PFNGLNORMAL3BVPROC_HPP)(const GLbyte *);
static inline void Normal3bv(const GLbyte * v1)
{
	static PFNGLNORMAL3BVPROC_HPP fn=reinterpret_cast<PFNGLNORMAL3BVPROC_HPP>(_impl::_get_proc_address("glNormal3bv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Normal3d
#define GL_HPP_FUNDEF_Normal3d
typedef void (*PFNGLNORMAL3DPROC_HPP)(GLdouble,GLdouble,GLdouble);
static inline void Normal3d(GLdouble nx1,GLdouble ny1,GLdouble nz1)
{
	static PFNGLNORMAL3DPROC_HPP fn=reinterpret_cast<PFNGLNORMAL3DPROC_HPP>(_impl::_get_proc_address("glNormal3d",3,1));
	 fn(nx1,ny1,nz1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Normal3dv
#define GL_HPP_FUNDEF_Normal3dv
typedef void (*PFNGLNORMAL3DVPROC_HPP)(const GLdouble *);
static inline void Normal3dv(const GLdouble * v1)
{
	static PFNGLNORMAL3DVPROC_HPP fn=reinterpret_cast<PFNGLNORMAL3DVPROC_HPP>(_impl::_get_proc_address("glNormal3dv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Normal3f
#define GL_HPP_FUNDEF_Normal3f
typedef void (*PFNGLNORMAL3FPROC_HPP)(GLfloat,GLfloat,GLfloat);
static inline void Normal3f(GLfloat nx1,GLfloat ny1,GLfloat nz1)
{
	static PFNGLNORMAL3FPROC_HPP fn=reinterpret_cast<PFNGLNORMAL3FPROC_HPP>(_impl::_get_proc_address("glNormal3f",3,1));
	 fn(nx1,ny1,nz1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Normal3fv
#define GL_HPP_FUNDEF_Normal3fv
typedef void (*PFNGLNORMAL3FVPROC_HPP)(const GLfloat *);
static inline void Normal3fv(const GLfloat * v1)
{
	static PFNGLNORMAL3FVPROC_HPP fn=reinterpret_cast<PFNGLNORMAL3FVPROC_HPP>(_impl::_get_proc_address("glNormal3fv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Normal3i
#define GL_HPP_FUNDEF_Normal3i
typedef void (*PFNGLNORMAL3IPROC_HPP)(GLint,GLint,GLint);
static inline void Normal3i(GLint nx1,GLint ny1,GLint nz1)
{
	static PFNGLNORMAL3IPROC_HPP fn=reinterpret_cast<PFNGLNORMAL3IPROC_HPP>(_impl::_get_proc_address("glNormal3i",3,1));
	 fn(nx1,ny1,nz1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Normal3iv
#define GL_HPP_FUNDEF_Normal3iv
typedef void (*PFNGLNORMAL3IVPROC_HPP)(const GLint *);
static inline void Normal3iv(const GLint * v1)
{
	static PFNGLNORMAL3IVPROC_HPP fn=reinterpret_cast<PFNGLNORMAL3IVPROC_HPP>(_impl::_get_proc_address("glNormal3iv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Normal3s
#define GL_HPP_FUNDEF_Normal3s
typedef void (*PFNGLNORMAL3SPROC_HPP)(GLshort,GLshort,GLshort);
static inline void Normal3s(GLshort nx1,GLshort ny1,GLshort nz1)
{
	static PFNGLNORMAL3SPROC_HPP fn=reinterpret_cast<PFNGLNORMAL3SPROC_HPP>(_impl::_get_proc_address("glNormal3s",3,1));
	 fn(nx1,ny1,nz1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Normal3sv
#define GL_HPP_FUNDEF_Normal3sv
typedef void (*PFNGLNORMAL3SVPROC_HPP)(const GLshort *);
static inline void Normal3sv(const GLshort * v1)
{
	static PFNGLNORMAL3SVPROC_HPP fn=reinterpret_cast<PFNGLNORMAL3SVPROC_HPP>(_impl::_get_proc_address("glNormal3sv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_NormalPointer
#define GL_HPP_FUNDEF_NormalPointer
typedef void (*PFNGLNORMALPOINTERPROC_HPP)(GLenum,GLsizei,const void *);
static inline void NormalPointer(GLenum type1,GLsizei stride1,const void * pointer1)
{
	static PFNGLNORMALPOINTERPROC_HPP fn=reinterpret_cast<PFNGLNORMALPOINTERPROC_HPP>(_impl::_get_proc_address("glNormalPointer",3,1));
	 fn(type1,stride1,pointer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Ortho
#define GL_HPP_FUNDEF_Ortho
typedef void (*PFNGLORTHOPROC_HPP)(GLdouble,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void Ortho(GLdouble left1,GLdouble right1,GLdouble bottom1,GLdouble top1,GLdouble zNear1,GLdouble zFar1)
{
	static PFNGLORTHOPROC_HPP fn=reinterpret_cast<PFNGLORTHOPROC_HPP>(_impl::_get_proc_address("glOrtho",3,1));
	 fn(left1,right1,bottom1,top1,zNear1,zFar1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PassThrough
#define GL_HPP_FUNDEF_PassThrough
typedef void (*PFNGLPASSTHROUGHPROC_HPP)(GLfloat);
static inline void PassThrough(GLfloat token1)
{
	static PFNGLPASSTHROUGHPROC_HPP fn=reinterpret_cast<PFNGLPASSTHROUGHPROC_HPP>(_impl::_get_proc_address("glPassThrough",3,1));
	 fn(token1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PixelMapfv
#define GL_HPP_FUNDEF_PixelMapfv
typedef void (*PFNGLPIXELMAPFVPROC_HPP)(GLenum,GLsizei,const GLfloat *);
static inline void PixelMapfv(GLenum map1,GLsizei mapsize1,const GLfloat * values1)
{
	static PFNGLPIXELMAPFVPROC_HPP fn=reinterpret_cast<PFNGLPIXELMAPFVPROC_HPP>(_impl::_get_proc_address("glPixelMapfv",3,1));
	 fn(map1,mapsize1,values1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PixelMapuiv
#define GL_HPP_FUNDEF_PixelMapuiv
typedef void (*PFNGLPIXELMAPUIVPROC_HPP)(GLenum,GLsizei,const GLuint *);
static inline void PixelMapuiv(GLenum map1,GLsizei mapsize1,const GLuint * values1)
{
	static PFNGLPIXELMAPUIVPROC_HPP fn=reinterpret_cast<PFNGLPIXELMAPUIVPROC_HPP>(_impl::_get_proc_address("glPixelMapuiv",3,1));
	 fn(map1,mapsize1,values1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PixelMapusv
#define GL_HPP_FUNDEF_PixelMapusv
typedef void (*PFNGLPIXELMAPUSVPROC_HPP)(GLenum,GLsizei,const GLushort *);
static inline void PixelMapusv(GLenum map1,GLsizei mapsize1,const GLushort * values1)
{
	static PFNGLPIXELMAPUSVPROC_HPP fn=reinterpret_cast<PFNGLPIXELMAPUSVPROC_HPP>(_impl::_get_proc_address("glPixelMapusv",3,1));
	 fn(map1,mapsize1,values1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PixelStoref
#define GL_HPP_FUNDEF_PixelStoref
typedef void (*PFNGLPIXELSTOREFPROC_HPP)(GLenum,GLfloat);
static inline void PixelStoref(GLenum pname1,GLfloat param1)
{
	static PFNGLPIXELSTOREFPROC_HPP fn=reinterpret_cast<PFNGLPIXELSTOREFPROC_HPP>(_impl::_get_proc_address("glPixelStoref",3,1));
	 fn(pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PixelStorei
#define GL_HPP_FUNDEF_PixelStorei
typedef void (*PFNGLPIXELSTOREIPROC_HPP)(GLenum,GLint);
static inline void PixelStorei(GLenum pname1,GLint param1)
{
	static PFNGLPIXELSTOREIPROC_HPP fn=reinterpret_cast<PFNGLPIXELSTOREIPROC_HPP>(_impl::_get_proc_address("glPixelStorei",3,1));
	 fn(pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PixelTransferf
#define GL_HPP_FUNDEF_PixelTransferf
typedef void (*PFNGLPIXELTRANSFERFPROC_HPP)(GLenum,GLfloat);
static inline void PixelTransferf(GLenum pname1,GLfloat param1)
{
	static PFNGLPIXELTRANSFERFPROC_HPP fn=reinterpret_cast<PFNGLPIXELTRANSFERFPROC_HPP>(_impl::_get_proc_address("glPixelTransferf",3,1));
	 fn(pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PixelTransferi
#define GL_HPP_FUNDEF_PixelTransferi
typedef void (*PFNGLPIXELTRANSFERIPROC_HPP)(GLenum,GLint);
static inline void PixelTransferi(GLenum pname1,GLint param1)
{
	static PFNGLPIXELTRANSFERIPROC_HPP fn=reinterpret_cast<PFNGLPIXELTRANSFERIPROC_HPP>(_impl::_get_proc_address("glPixelTransferi",3,1));
	 fn(pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PixelZoom
#define GL_HPP_FUNDEF_PixelZoom
typedef void (*PFNGLPIXELZOOMPROC_HPP)(GLfloat,GLfloat);
static inline void PixelZoom(GLfloat xfactor1,GLfloat yfactor1)
{
	static PFNGLPIXELZOOMPROC_HPP fn=reinterpret_cast<PFNGLPIXELZOOMPROC_HPP>(_impl::_get_proc_address("glPixelZoom",3,1));
	 fn(xfactor1,yfactor1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PointParameterf
#define GL_HPP_FUNDEF_PointParameterf
typedef void (*PFNGLPOINTPARAMETERFPROC_HPP)(GLenum,GLfloat);
static inline void PointParameterf(GLenum pname1,GLfloat param1)
{
	static PFNGLPOINTPARAMETERFPROC_HPP fn=reinterpret_cast<PFNGLPOINTPARAMETERFPROC_HPP>(_impl::_get_proc_address("glPointParameterf",3,1));
	 fn(pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PointParameterfv
#define GL_HPP_FUNDEF_PointParameterfv
typedef void (*PFNGLPOINTPARAMETERFVPROC_HPP)(GLenum,const GLfloat *);
static inline void PointParameterfv(GLenum pname1,const GLfloat * params1)
{
	static PFNGLPOINTPARAMETERFVPROC_HPP fn=reinterpret_cast<PFNGLPOINTPARAMETERFVPROC_HPP>(_impl::_get_proc_address("glPointParameterfv",3,1));
	 fn(pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PointParameteri
#define GL_HPP_FUNDEF_PointParameteri
typedef void (*PFNGLPOINTPARAMETERIPROC_HPP)(GLenum,GLint);
static inline void PointParameteri(GLenum pname1,GLint param1)
{
	static PFNGLPOINTPARAMETERIPROC_HPP fn=reinterpret_cast<PFNGLPOINTPARAMETERIPROC_HPP>(_impl::_get_proc_address("glPointParameteri",3,1));
	 fn(pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PointParameteriv
#define GL_HPP_FUNDEF_PointParameteriv
typedef void (*PFNGLPOINTPARAMETERIVPROC_HPP)(GLenum,const GLint *);
static inline void PointParameteriv(GLenum pname1,const GLint * params1)
{
	static PFNGLPOINTPARAMETERIVPROC_HPP fn=reinterpret_cast<PFNGLPOINTPARAMETERIVPROC_HPP>(_impl::_get_proc_address("glPointParameteriv",3,1));
	 fn(pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PointSize
#define GL_HPP_FUNDEF_PointSize
typedef void (*PFNGLPOINTSIZEPROC_HPP)(GLfloat);
static inline void PointSize(GLfloat size1)
{
	static PFNGLPOINTSIZEPROC_HPP fn=reinterpret_cast<PFNGLPOINTSIZEPROC_HPP>(_impl::_get_proc_address("glPointSize",3,1));
	 fn(size1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PolygonMode
#define GL_HPP_FUNDEF_PolygonMode
typedef void (*PFNGLPOLYGONMODEPROC_HPP)(GLenum,GLenum);
static inline void PolygonMode(GLenum face1,GLenum mode1)
{
	static PFNGLPOLYGONMODEPROC_HPP fn=reinterpret_cast<PFNGLPOLYGONMODEPROC_HPP>(_impl::_get_proc_address("glPolygonMode",3,1));
	 fn(face1,mode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PolygonOffset
#define GL_HPP_FUNDEF_PolygonOffset
typedef void (*PFNGLPOLYGONOFFSETPROC_HPP)(GLfloat,GLfloat);
static inline void PolygonOffset(GLfloat factor1,GLfloat units1)
{
	static PFNGLPOLYGONOFFSETPROC_HPP fn=reinterpret_cast<PFNGLPOLYGONOFFSETPROC_HPP>(_impl::_get_proc_address("glPolygonOffset",3,1));
	 fn(factor1,units1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PolygonStipple
#define GL_HPP_FUNDEF_PolygonStipple
typedef void (*PFNGLPOLYGONSTIPPLEPROC_HPP)(const GLubyte *);
static inline void PolygonStipple(const GLubyte * mask1)
{
	static PFNGLPOLYGONSTIPPLEPROC_HPP fn=reinterpret_cast<PFNGLPOLYGONSTIPPLEPROC_HPP>(_impl::_get_proc_address("glPolygonStipple",3,1));
	 fn(mask1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PopAttrib
#define GL_HPP_FUNDEF_PopAttrib
typedef void (*PFNGLPOPATTRIBPROC_HPP)();
static inline void PopAttrib()
{
	static PFNGLPOPATTRIBPROC_HPP fn=reinterpret_cast<PFNGLPOPATTRIBPROC_HPP>(_impl::_get_proc_address("glPopAttrib",3,1));
	 fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_PopClientAttrib
#define GL_HPP_FUNDEF_PopClientAttrib
typedef void (*PFNGLPOPCLIENTATTRIBPROC_HPP)();
static inline void PopClientAttrib()
{
	static PFNGLPOPCLIENTATTRIBPROC_HPP fn=reinterpret_cast<PFNGLPOPCLIENTATTRIBPROC_HPP>(_impl::_get_proc_address("glPopClientAttrib",3,1));
	 fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_PopMatrix
#define GL_HPP_FUNDEF_PopMatrix
typedef void (*PFNGLPOPMATRIXPROC_HPP)();
static inline void PopMatrix()
{
	static PFNGLPOPMATRIXPROC_HPP fn=reinterpret_cast<PFNGLPOPMATRIXPROC_HPP>(_impl::_get_proc_address("glPopMatrix",3,1));
	 fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_PopName
#define GL_HPP_FUNDEF_PopName
typedef void (*PFNGLPOPNAMEPROC_HPP)();
static inline void PopName()
{
	static PFNGLPOPNAMEPROC_HPP fn=reinterpret_cast<PFNGLPOPNAMEPROC_HPP>(_impl::_get_proc_address("glPopName",3,1));
	 fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_PrimitiveRestartIndex
#define GL_HPP_FUNDEF_PrimitiveRestartIndex
typedef void (*PFNGLPRIMITIVERESTARTINDEXPROC_HPP)(GLuint);
static inline void PrimitiveRestartIndex(GLuint index1)
{
	static PFNGLPRIMITIVERESTARTINDEXPROC_HPP fn=reinterpret_cast<PFNGLPRIMITIVERESTARTINDEXPROC_HPP>(_impl::_get_proc_address("glPrimitiveRestartIndex",3,1));
	 fn(index1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PrioritizeTextures
#define GL_HPP_FUNDEF_PrioritizeTextures
typedef void (*PFNGLPRIORITIZETEXTURESPROC_HPP)(GLsizei,const GLuint *,const GLfloat *);
static inline void PrioritizeTextures(GLsizei n1,const GLuint * textures1,const GLfloat * priorities1)
{
	static PFNGLPRIORITIZETEXTURESPROC_HPP fn=reinterpret_cast<PFNGLPRIORITIZETEXTURESPROC_HPP>(_impl::_get_proc_address("glPrioritizeTextures",3,1));
	 fn(n1,textures1,priorities1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PushAttrib
#define GL_HPP_FUNDEF_PushAttrib
typedef void (*PFNGLPUSHATTRIBPROC_HPP)(GLbitfield);
static inline void PushAttrib(GLbitfield mask1)
{
	static PFNGLPUSHATTRIBPROC_HPP fn=reinterpret_cast<PFNGLPUSHATTRIBPROC_HPP>(_impl::_get_proc_address("glPushAttrib",3,1));
	 fn(mask1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PushClientAttrib
#define GL_HPP_FUNDEF_PushClientAttrib
typedef void (*PFNGLPUSHCLIENTATTRIBPROC_HPP)(GLbitfield);
static inline void PushClientAttrib(GLbitfield mask1)
{
	static PFNGLPUSHCLIENTATTRIBPROC_HPP fn=reinterpret_cast<PFNGLPUSHCLIENTATTRIBPROC_HPP>(_impl::_get_proc_address("glPushClientAttrib",3,1));
	 fn(mask1);
}
#endif

#ifndef	GL_HPP_FUNDEF_PushMatrix
#define GL_HPP_FUNDEF_PushMatrix
typedef void (*PFNGLPUSHMATRIXPROC_HPP)();
static inline void PushMatrix()
{
	static PFNGLPUSHMATRIXPROC_HPP fn=reinterpret_cast<PFNGLPUSHMATRIXPROC_HPP>(_impl::_get_proc_address("glPushMatrix",3,1));
	 fn();
}
#endif

#ifndef	GL_HPP_FUNDEF_PushName
#define GL_HPP_FUNDEF_PushName
typedef void (*PFNGLPUSHNAMEPROC_HPP)(GLuint);
static inline void PushName(GLuint name1)
{
	static PFNGLPUSHNAMEPROC_HPP fn=reinterpret_cast<PFNGLPUSHNAMEPROC_HPP>(_impl::_get_proc_address("glPushName",3,1));
	 fn(name1);
}
#endif

#ifndef	GL_HPP_FUNDEF_RasterPos2d
#define GL_HPP_FUNDEF_RasterPos2d
typedef void (*PFNGLRASTERPOS2DPROC_HPP)(GLdouble,GLdouble);
static inline void RasterPos2d(GLdouble x1,GLdouble y1)
{
	static PFNGLRASTERPOS2DPROC_HPP fn=reinterpret_cast<PFNGLRASTERPOS2DPROC_HPP>(_impl::_get_proc_address("glRasterPos2d",3,1));
	 fn(x1,y1);
}
#endif

#ifndef	GL_HPP_FUNDEF_RasterPos2dv
#define GL_HPP_FUNDEF_RasterPos2dv
typedef void (*PFNGLRASTERPOS2DVPROC_HPP)(const GLdouble *);
static inline void RasterPos2dv(const GLdouble * v1)
{
	static PFNGLRASTERPOS2DVPROC_HPP fn=reinterpret_cast<PFNGLRASTERPOS2DVPROC_HPP>(_impl::_get_proc_address("glRasterPos2dv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_RasterPos2f
#define GL_HPP_FUNDEF_RasterPos2f
typedef void (*PFNGLRASTERPOS2FPROC_HPP)(GLfloat,GLfloat);
static inline void RasterPos2f(GLfloat x1,GLfloat y1)
{
	static PFNGLRASTERPOS2FPROC_HPP fn=reinterpret_cast<PFNGLRASTERPOS2FPROC_HPP>(_impl::_get_proc_address("glRasterPos2f",3,1));
	 fn(x1,y1);
}
#endif

#ifndef	GL_HPP_FUNDEF_RasterPos2fv
#define GL_HPP_FUNDEF_RasterPos2fv
typedef void (*PFNGLRASTERPOS2FVPROC_HPP)(const GLfloat *);
static inline void RasterPos2fv(const GLfloat * v1)
{
	static PFNGLRASTERPOS2FVPROC_HPP fn=reinterpret_cast<PFNGLRASTERPOS2FVPROC_HPP>(_impl::_get_proc_address("glRasterPos2fv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_RasterPos2i
#define GL_HPP_FUNDEF_RasterPos2i
typedef void (*PFNGLRASTERPOS2IPROC_HPP)(GLint,GLint);
static inline void RasterPos2i(GLint x1,GLint y1)
{
	static PFNGLRASTERPOS2IPROC_HPP fn=reinterpret_cast<PFNGLRASTERPOS2IPROC_HPP>(_impl::_get_proc_address("glRasterPos2i",3,1));
	 fn(x1,y1);
}
#endif

#ifndef	GL_HPP_FUNDEF_RasterPos2iv
#define GL_HPP_FUNDEF_RasterPos2iv
typedef void (*PFNGLRASTERPOS2IVPROC_HPP)(const GLint *);
static inline void RasterPos2iv(const GLint * v1)
{
	static PFNGLRASTERPOS2IVPROC_HPP fn=reinterpret_cast<PFNGLRASTERPOS2IVPROC_HPP>(_impl::_get_proc_address("glRasterPos2iv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_RasterPos2s
#define GL_HPP_FUNDEF_RasterPos2s
typedef void (*PFNGLRASTERPOS2SPROC_HPP)(GLshort,GLshort);
static inline void RasterPos2s(GLshort x1,GLshort y1)
{
	static PFNGLRASTERPOS2SPROC_HPP fn=reinterpret_cast<PFNGLRASTERPOS2SPROC_HPP>(_impl::_get_proc_address("glRasterPos2s",3,1));
	 fn(x1,y1);
}
#endif

#ifndef	GL_HPP_FUNDEF_RasterPos2sv
#define GL_HPP_FUNDEF_RasterPos2sv
typedef void (*PFNGLRASTERPOS2SVPROC_HPP)(const GLshort *);
static inline void RasterPos2sv(const GLshort * v1)
{
	static PFNGLRASTERPOS2SVPROC_HPP fn=reinterpret_cast<PFNGLRASTERPOS2SVPROC_HPP>(_impl::_get_proc_address("glRasterPos2sv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_RasterPos3d
#define GL_HPP_FUNDEF_RasterPos3d
typedef void (*PFNGLRASTERPOS3DPROC_HPP)(GLdouble,GLdouble,GLdouble);
static inline void RasterPos3d(GLdouble x1,GLdouble y1,GLdouble z1)
{
	static PFNGLRASTERPOS3DPROC_HPP fn=reinterpret_cast<PFNGLRASTERPOS3DPROC_HPP>(_impl::_get_proc_address("glRasterPos3d",3,1));
	 fn(x1,y1,z1);
}
#endif

#ifndef	GL_HPP_FUNDEF_RasterPos3dv
#define GL_HPP_FUNDEF_RasterPos3dv
typedef void (*PFNGLRASTERPOS3DVPROC_HPP)(const GLdouble *);
static inline void RasterPos3dv(const GLdouble * v1)
{
	static PFNGLRASTERPOS3DVPROC_HPP fn=reinterpret_cast<PFNGLRASTERPOS3DVPROC_HPP>(_impl::_get_proc_address("glRasterPos3dv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_RasterPos3f
#define GL_HPP_FUNDEF_RasterPos3f
typedef void (*PFNGLRASTERPOS3FPROC_HPP)(GLfloat,GLfloat,GLfloat);
static inline void RasterPos3f(GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLRASTERPOS3FPROC_HPP fn=reinterpret_cast<PFNGLRASTERPOS3FPROC_HPP>(_impl::_get_proc_address("glRasterPos3f",3,1));
	 fn(x1,y1,z1);
}
#endif

#ifndef	GL_HPP_FUNDEF_RasterPos3fv
#define GL_HPP_FUNDEF_RasterPos3fv
typedef void (*PFNGLRASTERPOS3FVPROC_HPP)(const GLfloat *);
static inline void RasterPos3fv(const GLfloat * v1)
{
	static PFNGLRASTERPOS3FVPROC_HPP fn=reinterpret_cast<PFNGLRASTERPOS3FVPROC_HPP>(_impl::_get_proc_address("glRasterPos3fv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_RasterPos3i
#define GL_HPP_FUNDEF_RasterPos3i
typedef void (*PFNGLRASTERPOS3IPROC_HPP)(GLint,GLint,GLint);
static inline void RasterPos3i(GLint x1,GLint y1,GLint z1)
{
	static PFNGLRASTERPOS3IPROC_HPP fn=reinterpret_cast<PFNGLRASTERPOS3IPROC_HPP>(_impl::_get_proc_address("glRasterPos3i",3,1));
	 fn(x1,y1,z1);
}
#endif

#ifndef	GL_HPP_FUNDEF_RasterPos3iv
#define GL_HPP_FUNDEF_RasterPos3iv
typedef void (*PFNGLRASTERPOS3IVPROC_HPP)(const GLint *);
static inline void RasterPos3iv(const GLint * v1)
{
	static PFNGLRASTERPOS3IVPROC_HPP fn=reinterpret_cast<PFNGLRASTERPOS3IVPROC_HPP>(_impl::_get_proc_address("glRasterPos3iv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_RasterPos3s
#define GL_HPP_FUNDEF_RasterPos3s
typedef void (*PFNGLRASTERPOS3SPROC_HPP)(GLshort,GLshort,GLshort);
static inline void RasterPos3s(GLshort x1,GLshort y1,GLshort z1)
{
	static PFNGLRASTERPOS3SPROC_HPP fn=reinterpret_cast<PFNGLRASTERPOS3SPROC_HPP>(_impl::_get_proc_address("glRasterPos3s",3,1));
	 fn(x1,y1,z1);
}
#endif

#ifndef	GL_HPP_FUNDEF_RasterPos3sv
#define GL_HPP_FUNDEF_RasterPos3sv
typedef void (*PFNGLRASTERPOS3SVPROC_HPP)(const GLshort *);
static inline void RasterPos3sv(const GLshort * v1)
{
	static PFNGLRASTERPOS3SVPROC_HPP fn=reinterpret_cast<PFNGLRASTERPOS3SVPROC_HPP>(_impl::_get_proc_address("glRasterPos3sv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_RasterPos4d
#define GL_HPP_FUNDEF_RasterPos4d
typedef void (*PFNGLRASTERPOS4DPROC_HPP)(GLdouble,GLdouble,GLdouble,GLdouble);
static inline void RasterPos4d(GLdouble x1,GLdouble y1,GLdouble z1,GLdouble w1)
{
	static PFNGLRASTERPOS4DPROC_HPP fn=reinterpret_cast<PFNGLRASTERPOS4DPROC_HPP>(_impl::_get_proc_address("glRasterPos4d",3,1));
	 fn(x1,y1,z1,w1);
}
#endif

#ifndef	GL_HPP_FUNDEF_RasterPos4dv
#define GL_HPP_FUNDEF_RasterPos4dv
typedef void (*PFNGLRASTERPOS4DVPROC_HPP)(const GLdouble *);
static inline void RasterPos4dv(const GLdouble * v1)
{
	static PFNGLRASTERPOS4DVPROC_HPP fn=reinterpret_cast<PFNGLRASTERPOS4DVPROC_HPP>(_impl::_get_proc_address("glRasterPos4dv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_RasterPos4f
#define GL_HPP_FUNDEF_RasterPos4f
typedef void (*PFNGLRASTERPOS4FPROC_HPP)(GLfloat,GLfloat,GLfloat,GLfloat);
static inline void RasterPos4f(GLfloat x1,GLfloat y1,GLfloat z1,GLfloat w1)
{
	static PFNGLRASTERPOS4FPROC_HPP fn=reinterpret_cast<PFNGLRASTERPOS4FPROC_HPP>(_impl::_get_proc_address("glRasterPos4f",3,1));
	 fn(x1,y1,z1,w1);
}
#endif

#ifndef	GL_HPP_FUNDEF_RasterPos4fv
#define GL_HPP_FUNDEF_RasterPos4fv
typedef void (*PFNGLRASTERPOS4FVPROC_HPP)(const GLfloat *);
static inline void RasterPos4fv(const GLfloat * v1)
{
	static PFNGLRASTERPOS4FVPROC_HPP fn=reinterpret_cast<PFNGLRASTERPOS4FVPROC_HPP>(_impl::_get_proc_address("glRasterPos4fv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_RasterPos4i
#define GL_HPP_FUNDEF_RasterPos4i
typedef void (*PFNGLRASTERPOS4IPROC_HPP)(GLint,GLint,GLint,GLint);
static inline void RasterPos4i(GLint x1,GLint y1,GLint z1,GLint w1)
{
	static PFNGLRASTERPOS4IPROC_HPP fn=reinterpret_cast<PFNGLRASTERPOS4IPROC_HPP>(_impl::_get_proc_address("glRasterPos4i",3,1));
	 fn(x1,y1,z1,w1);
}
#endif

#ifndef	GL_HPP_FUNDEF_RasterPos4iv
#define GL_HPP_FUNDEF_RasterPos4iv
typedef void (*PFNGLRASTERPOS4IVPROC_HPP)(const GLint *);
static inline void RasterPos4iv(const GLint * v1)
{
	static PFNGLRASTERPOS4IVPROC_HPP fn=reinterpret_cast<PFNGLRASTERPOS4IVPROC_HPP>(_impl::_get_proc_address("glRasterPos4iv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_RasterPos4s
#define GL_HPP_FUNDEF_RasterPos4s
typedef void (*PFNGLRASTERPOS4SPROC_HPP)(GLshort,GLshort,GLshort,GLshort);
static inline void RasterPos4s(GLshort x1,GLshort y1,GLshort z1,GLshort w1)
{
	static PFNGLRASTERPOS4SPROC_HPP fn=reinterpret_cast<PFNGLRASTERPOS4SPROC_HPP>(_impl::_get_proc_address("glRasterPos4s",3,1));
	 fn(x1,y1,z1,w1);
}
#endif

#ifndef	GL_HPP_FUNDEF_RasterPos4sv
#define GL_HPP_FUNDEF_RasterPos4sv
typedef void (*PFNGLRASTERPOS4SVPROC_HPP)(const GLshort *);
static inline void RasterPos4sv(const GLshort * v1)
{
	static PFNGLRASTERPOS4SVPROC_HPP fn=reinterpret_cast<PFNGLRASTERPOS4SVPROC_HPP>(_impl::_get_proc_address("glRasterPos4sv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ReadBuffer
#define GL_HPP_FUNDEF_ReadBuffer
typedef void (*PFNGLREADBUFFERPROC_HPP)(GLenum);
static inline void ReadBuffer(GLenum src1)
{
	static PFNGLREADBUFFERPROC_HPP fn=reinterpret_cast<PFNGLREADBUFFERPROC_HPP>(_impl::_get_proc_address("glReadBuffer",3,1));
	 fn(src1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ReadPixels
#define GL_HPP_FUNDEF_ReadPixels
typedef void (*PFNGLREADPIXELSPROC_HPP)(GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,void *);
static inline void ReadPixels(GLint x1,GLint y1,GLsizei width1,GLsizei height1,GLenum format1,GLenum type1,void * pixels1)
{
	static PFNGLREADPIXELSPROC_HPP fn=reinterpret_cast<PFNGLREADPIXELSPROC_HPP>(_impl::_get_proc_address("glReadPixels",3,1));
	 fn(x1,y1,width1,height1,format1,type1,pixels1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Rectd
#define GL_HPP_FUNDEF_Rectd
typedef void (*PFNGLRECTDPROC_HPP)(GLdouble,GLdouble,GLdouble,GLdouble);
static inline void Rectd(GLdouble x11,GLdouble y11,GLdouble x21,GLdouble y21)
{
	static PFNGLRECTDPROC_HPP fn=reinterpret_cast<PFNGLRECTDPROC_HPP>(_impl::_get_proc_address("glRectd",3,1));
	 fn(x11,y11,x21,y21);
}
#endif

#ifndef	GL_HPP_FUNDEF_Rectdv
#define GL_HPP_FUNDEF_Rectdv
typedef void (*PFNGLRECTDVPROC_HPP)(const GLdouble *,const GLdouble *);
static inline void Rectdv(const GLdouble * v11,const GLdouble * v21)
{
	static PFNGLRECTDVPROC_HPP fn=reinterpret_cast<PFNGLRECTDVPROC_HPP>(_impl::_get_proc_address("glRectdv",3,1));
	 fn(v11,v21);
}
#endif

#ifndef	GL_HPP_FUNDEF_Rectf
#define GL_HPP_FUNDEF_Rectf
typedef void (*PFNGLRECTFPROC_HPP)(GLfloat,GLfloat,GLfloat,GLfloat);
static inline void Rectf(GLfloat x11,GLfloat y11,GLfloat x21,GLfloat y21)
{
	static PFNGLRECTFPROC_HPP fn=reinterpret_cast<PFNGLRECTFPROC_HPP>(_impl::_get_proc_address("glRectf",3,1));
	 fn(x11,y11,x21,y21);
}
#endif

#ifndef	GL_HPP_FUNDEF_Rectfv
#define GL_HPP_FUNDEF_Rectfv
typedef void (*PFNGLRECTFVPROC_HPP)(const GLfloat *,const GLfloat *);
static inline void Rectfv(const GLfloat * v11,const GLfloat * v21)
{
	static PFNGLRECTFVPROC_HPP fn=reinterpret_cast<PFNGLRECTFVPROC_HPP>(_impl::_get_proc_address("glRectfv",3,1));
	 fn(v11,v21);
}
#endif

#ifndef	GL_HPP_FUNDEF_Recti
#define GL_HPP_FUNDEF_Recti
typedef void (*PFNGLRECTIPROC_HPP)(GLint,GLint,GLint,GLint);
static inline void Recti(GLint x11,GLint y11,GLint x21,GLint y21)
{
	static PFNGLRECTIPROC_HPP fn=reinterpret_cast<PFNGLRECTIPROC_HPP>(_impl::_get_proc_address("glRecti",3,1));
	 fn(x11,y11,x21,y21);
}
#endif

#ifndef	GL_HPP_FUNDEF_Rectiv
#define GL_HPP_FUNDEF_Rectiv
typedef void (*PFNGLRECTIVPROC_HPP)(const GLint *,const GLint *);
static inline void Rectiv(const GLint * v11,const GLint * v21)
{
	static PFNGLRECTIVPROC_HPP fn=reinterpret_cast<PFNGLRECTIVPROC_HPP>(_impl::_get_proc_address("glRectiv",3,1));
	 fn(v11,v21);
}
#endif

#ifndef	GL_HPP_FUNDEF_Rects
#define GL_HPP_FUNDEF_Rects
typedef void (*PFNGLRECTSPROC_HPP)(GLshort,GLshort,GLshort,GLshort);
static inline void Rects(GLshort x11,GLshort y11,GLshort x21,GLshort y21)
{
	static PFNGLRECTSPROC_HPP fn=reinterpret_cast<PFNGLRECTSPROC_HPP>(_impl::_get_proc_address("glRects",3,1));
	 fn(x11,y11,x21,y21);
}
#endif

#ifndef	GL_HPP_FUNDEF_Rectsv
#define GL_HPP_FUNDEF_Rectsv
typedef void (*PFNGLRECTSVPROC_HPP)(const GLshort *,const GLshort *);
static inline void Rectsv(const GLshort * v11,const GLshort * v21)
{
	static PFNGLRECTSVPROC_HPP fn=reinterpret_cast<PFNGLRECTSVPROC_HPP>(_impl::_get_proc_address("glRectsv",3,1));
	 fn(v11,v21);
}
#endif

#ifndef	GL_HPP_FUNDEF_RenderMode
#define GL_HPP_FUNDEF_RenderMode
typedef GLint (*PFNGLRENDERMODEPROC_HPP)(GLenum);
static inline GLint RenderMode(GLenum mode1)
{
	static PFNGLRENDERMODEPROC_HPP fn=reinterpret_cast<PFNGLRENDERMODEPROC_HPP>(_impl::_get_proc_address("glRenderMode",3,1));
	return fn(mode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_RenderbufferStorage
#define GL_HPP_FUNDEF_RenderbufferStorage
typedef void (*PFNGLRENDERBUFFERSTORAGEPROC_HPP)(GLenum,GLenum,GLsizei,GLsizei);
static inline void RenderbufferStorage(GLenum target1,GLenum internalformat1,GLsizei width1,GLsizei height1)
{
	static PFNGLRENDERBUFFERSTORAGEPROC_HPP fn=reinterpret_cast<PFNGLRENDERBUFFERSTORAGEPROC_HPP>(_impl::_get_proc_address("glRenderbufferStorage",3,1));
	 fn(target1,internalformat1,width1,height1);
}
#endif

#ifndef	GL_HPP_FUNDEF_RenderbufferStorageMultisample
#define GL_HPP_FUNDEF_RenderbufferStorageMultisample
typedef void (*PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC_HPP)(GLenum,GLsizei,GLenum,GLsizei,GLsizei);
static inline void RenderbufferStorageMultisample(GLenum target1,GLsizei samples1,GLenum internalformat1,GLsizei width1,GLsizei height1)
{
	static PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC_HPP fn=reinterpret_cast<PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC_HPP>(_impl::_get_proc_address("glRenderbufferStorageMultisample",3,1));
	 fn(target1,samples1,internalformat1,width1,height1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Rotated
#define GL_HPP_FUNDEF_Rotated
typedef void (*PFNGLROTATEDPROC_HPP)(GLdouble,GLdouble,GLdouble,GLdouble);
static inline void Rotated(GLdouble angle1,GLdouble x1,GLdouble y1,GLdouble z1)
{
	static PFNGLROTATEDPROC_HPP fn=reinterpret_cast<PFNGLROTATEDPROC_HPP>(_impl::_get_proc_address("glRotated",3,1));
	 fn(angle1,x1,y1,z1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Rotatef
#define GL_HPP_FUNDEF_Rotatef
typedef void (*PFNGLROTATEFPROC_HPP)(GLfloat,GLfloat,GLfloat,GLfloat);
static inline void Rotatef(GLfloat angle1,GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLROTATEFPROC_HPP fn=reinterpret_cast<PFNGLROTATEFPROC_HPP>(_impl::_get_proc_address("glRotatef",3,1));
	 fn(angle1,x1,y1,z1);
}
#endif

#ifndef	GL_HPP_FUNDEF_SampleCoverage
#define GL_HPP_FUNDEF_SampleCoverage
typedef void (*PFNGLSAMPLECOVERAGEPROC_HPP)(GLfloat,GLboolean);
static inline void SampleCoverage(GLfloat value1,GLboolean invert1)
{
	static PFNGLSAMPLECOVERAGEPROC_HPP fn=reinterpret_cast<PFNGLSAMPLECOVERAGEPROC_HPP>(_impl::_get_proc_address("glSampleCoverage",3,1));
	 fn(value1,invert1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Scaled
#define GL_HPP_FUNDEF_Scaled
typedef void (*PFNGLSCALEDPROC_HPP)(GLdouble,GLdouble,GLdouble);
static inline void Scaled(GLdouble x1,GLdouble y1,GLdouble z1)
{
	static PFNGLSCALEDPROC_HPP fn=reinterpret_cast<PFNGLSCALEDPROC_HPP>(_impl::_get_proc_address("glScaled",3,1));
	 fn(x1,y1,z1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Scalef
#define GL_HPP_FUNDEF_Scalef
typedef void (*PFNGLSCALEFPROC_HPP)(GLfloat,GLfloat,GLfloat);
static inline void Scalef(GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLSCALEFPROC_HPP fn=reinterpret_cast<PFNGLSCALEFPROC_HPP>(_impl::_get_proc_address("glScalef",3,1));
	 fn(x1,y1,z1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Scissor
#define GL_HPP_FUNDEF_Scissor
typedef void (*PFNGLSCISSORPROC_HPP)(GLint,GLint,GLsizei,GLsizei);
static inline void Scissor(GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
	static PFNGLSCISSORPROC_HPP fn=reinterpret_cast<PFNGLSCISSORPROC_HPP>(_impl::_get_proc_address("glScissor",3,1));
	 fn(x1,y1,width1,height1);
}
#endif

#ifndef	GL_HPP_FUNDEF_SecondaryColor3b
#define GL_HPP_FUNDEF_SecondaryColor3b
typedef void (*PFNGLSECONDARYCOLOR3BPROC_HPP)(GLbyte,GLbyte,GLbyte);
static inline void SecondaryColor3b(GLbyte red1,GLbyte green1,GLbyte blue1)
{
	static PFNGLSECONDARYCOLOR3BPROC_HPP fn=reinterpret_cast<PFNGLSECONDARYCOLOR3BPROC_HPP>(_impl::_get_proc_address("glSecondaryColor3b",3,1));
	 fn(red1,green1,blue1);
}
#endif

#ifndef	GL_HPP_FUNDEF_SecondaryColor3bv
#define GL_HPP_FUNDEF_SecondaryColor3bv
typedef void (*PFNGLSECONDARYCOLOR3BVPROC_HPP)(const GLbyte *);
static inline void SecondaryColor3bv(const GLbyte * v1)
{
	static PFNGLSECONDARYCOLOR3BVPROC_HPP fn=reinterpret_cast<PFNGLSECONDARYCOLOR3BVPROC_HPP>(_impl::_get_proc_address("glSecondaryColor3bv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_SecondaryColor3d
#define GL_HPP_FUNDEF_SecondaryColor3d
typedef void (*PFNGLSECONDARYCOLOR3DPROC_HPP)(GLdouble,GLdouble,GLdouble);
static inline void SecondaryColor3d(GLdouble red1,GLdouble green1,GLdouble blue1)
{
	static PFNGLSECONDARYCOLOR3DPROC_HPP fn=reinterpret_cast<PFNGLSECONDARYCOLOR3DPROC_HPP>(_impl::_get_proc_address("glSecondaryColor3d",3,1));
	 fn(red1,green1,blue1);
}
#endif

#ifndef	GL_HPP_FUNDEF_SecondaryColor3dv
#define GL_HPP_FUNDEF_SecondaryColor3dv
typedef void (*PFNGLSECONDARYCOLOR3DVPROC_HPP)(const GLdouble *);
static inline void SecondaryColor3dv(const GLdouble * v1)
{
	static PFNGLSECONDARYCOLOR3DVPROC_HPP fn=reinterpret_cast<PFNGLSECONDARYCOLOR3DVPROC_HPP>(_impl::_get_proc_address("glSecondaryColor3dv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_SecondaryColor3f
#define GL_HPP_FUNDEF_SecondaryColor3f
typedef void (*PFNGLSECONDARYCOLOR3FPROC_HPP)(GLfloat,GLfloat,GLfloat);
static inline void SecondaryColor3f(GLfloat red1,GLfloat green1,GLfloat blue1)
{
	static PFNGLSECONDARYCOLOR3FPROC_HPP fn=reinterpret_cast<PFNGLSECONDARYCOLOR3FPROC_HPP>(_impl::_get_proc_address("glSecondaryColor3f",3,1));
	 fn(red1,green1,blue1);
}
#endif

#ifndef	GL_HPP_FUNDEF_SecondaryColor3fv
#define GL_HPP_FUNDEF_SecondaryColor3fv
typedef void (*PFNGLSECONDARYCOLOR3FVPROC_HPP)(const GLfloat *);
static inline void SecondaryColor3fv(const GLfloat * v1)
{
	static PFNGLSECONDARYCOLOR3FVPROC_HPP fn=reinterpret_cast<PFNGLSECONDARYCOLOR3FVPROC_HPP>(_impl::_get_proc_address("glSecondaryColor3fv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_SecondaryColor3i
#define GL_HPP_FUNDEF_SecondaryColor3i
typedef void (*PFNGLSECONDARYCOLOR3IPROC_HPP)(GLint,GLint,GLint);
static inline void SecondaryColor3i(GLint red1,GLint green1,GLint blue1)
{
	static PFNGLSECONDARYCOLOR3IPROC_HPP fn=reinterpret_cast<PFNGLSECONDARYCOLOR3IPROC_HPP>(_impl::_get_proc_address("glSecondaryColor3i",3,1));
	 fn(red1,green1,blue1);
}
#endif

#ifndef	GL_HPP_FUNDEF_SecondaryColor3iv
#define GL_HPP_FUNDEF_SecondaryColor3iv
typedef void (*PFNGLSECONDARYCOLOR3IVPROC_HPP)(const GLint *);
static inline void SecondaryColor3iv(const GLint * v1)
{
	static PFNGLSECONDARYCOLOR3IVPROC_HPP fn=reinterpret_cast<PFNGLSECONDARYCOLOR3IVPROC_HPP>(_impl::_get_proc_address("glSecondaryColor3iv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_SecondaryColor3s
#define GL_HPP_FUNDEF_SecondaryColor3s
typedef void (*PFNGLSECONDARYCOLOR3SPROC_HPP)(GLshort,GLshort,GLshort);
static inline void SecondaryColor3s(GLshort red1,GLshort green1,GLshort blue1)
{
	static PFNGLSECONDARYCOLOR3SPROC_HPP fn=reinterpret_cast<PFNGLSECONDARYCOLOR3SPROC_HPP>(_impl::_get_proc_address("glSecondaryColor3s",3,1));
	 fn(red1,green1,blue1);
}
#endif

#ifndef	GL_HPP_FUNDEF_SecondaryColor3sv
#define GL_HPP_FUNDEF_SecondaryColor3sv
typedef void (*PFNGLSECONDARYCOLOR3SVPROC_HPP)(const GLshort *);
static inline void SecondaryColor3sv(const GLshort * v1)
{
	static PFNGLSECONDARYCOLOR3SVPROC_HPP fn=reinterpret_cast<PFNGLSECONDARYCOLOR3SVPROC_HPP>(_impl::_get_proc_address("glSecondaryColor3sv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_SecondaryColor3ub
#define GL_HPP_FUNDEF_SecondaryColor3ub
typedef void (*PFNGLSECONDARYCOLOR3UBPROC_HPP)(GLubyte,GLubyte,GLubyte);
static inline void SecondaryColor3ub(GLubyte red1,GLubyte green1,GLubyte blue1)
{
	static PFNGLSECONDARYCOLOR3UBPROC_HPP fn=reinterpret_cast<PFNGLSECONDARYCOLOR3UBPROC_HPP>(_impl::_get_proc_address("glSecondaryColor3ub",3,1));
	 fn(red1,green1,blue1);
}
#endif

#ifndef	GL_HPP_FUNDEF_SecondaryColor3ubv
#define GL_HPP_FUNDEF_SecondaryColor3ubv
typedef void (*PFNGLSECONDARYCOLOR3UBVPROC_HPP)(const GLubyte *);
static inline void SecondaryColor3ubv(const GLubyte * v1)
{
	static PFNGLSECONDARYCOLOR3UBVPROC_HPP fn=reinterpret_cast<PFNGLSECONDARYCOLOR3UBVPROC_HPP>(_impl::_get_proc_address("glSecondaryColor3ubv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_SecondaryColor3ui
#define GL_HPP_FUNDEF_SecondaryColor3ui
typedef void (*PFNGLSECONDARYCOLOR3UIPROC_HPP)(GLuint,GLuint,GLuint);
static inline void SecondaryColor3ui(GLuint red1,GLuint green1,GLuint blue1)
{
	static PFNGLSECONDARYCOLOR3UIPROC_HPP fn=reinterpret_cast<PFNGLSECONDARYCOLOR3UIPROC_HPP>(_impl::_get_proc_address("glSecondaryColor3ui",3,1));
	 fn(red1,green1,blue1);
}
#endif

#ifndef	GL_HPP_FUNDEF_SecondaryColor3uiv
#define GL_HPP_FUNDEF_SecondaryColor3uiv
typedef void (*PFNGLSECONDARYCOLOR3UIVPROC_HPP)(const GLuint *);
static inline void SecondaryColor3uiv(const GLuint * v1)
{
	static PFNGLSECONDARYCOLOR3UIVPROC_HPP fn=reinterpret_cast<PFNGLSECONDARYCOLOR3UIVPROC_HPP>(_impl::_get_proc_address("glSecondaryColor3uiv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_SecondaryColor3us
#define GL_HPP_FUNDEF_SecondaryColor3us
typedef void (*PFNGLSECONDARYCOLOR3USPROC_HPP)(GLushort,GLushort,GLushort);
static inline void SecondaryColor3us(GLushort red1,GLushort green1,GLushort blue1)
{
	static PFNGLSECONDARYCOLOR3USPROC_HPP fn=reinterpret_cast<PFNGLSECONDARYCOLOR3USPROC_HPP>(_impl::_get_proc_address("glSecondaryColor3us",3,1));
	 fn(red1,green1,blue1);
}
#endif

#ifndef	GL_HPP_FUNDEF_SecondaryColor3usv
#define GL_HPP_FUNDEF_SecondaryColor3usv
typedef void (*PFNGLSECONDARYCOLOR3USVPROC_HPP)(const GLushort *);
static inline void SecondaryColor3usv(const GLushort * v1)
{
	static PFNGLSECONDARYCOLOR3USVPROC_HPP fn=reinterpret_cast<PFNGLSECONDARYCOLOR3USVPROC_HPP>(_impl::_get_proc_address("glSecondaryColor3usv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_SecondaryColorPointer
#define GL_HPP_FUNDEF_SecondaryColorPointer
typedef void (*PFNGLSECONDARYCOLORPOINTERPROC_HPP)(GLint,GLenum,GLsizei,const void *);
static inline void SecondaryColorPointer(GLint size1,GLenum type1,GLsizei stride1,const void * pointer1)
{
	static PFNGLSECONDARYCOLORPOINTERPROC_HPP fn=reinterpret_cast<PFNGLSECONDARYCOLORPOINTERPROC_HPP>(_impl::_get_proc_address("glSecondaryColorPointer",3,1));
	 fn(size1,type1,stride1,pointer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_SelectBuffer
#define GL_HPP_FUNDEF_SelectBuffer
typedef void (*PFNGLSELECTBUFFERPROC_HPP)(GLsizei,GLuint *);
static inline void SelectBuffer(GLsizei size1,GLuint * buffer1)
{
	static PFNGLSELECTBUFFERPROC_HPP fn=reinterpret_cast<PFNGLSELECTBUFFERPROC_HPP>(_impl::_get_proc_address("glSelectBuffer",3,1));
	 fn(size1,buffer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ShadeModel
#define GL_HPP_FUNDEF_ShadeModel
typedef void (*PFNGLSHADEMODELPROC_HPP)(GLenum);
static inline void ShadeModel(GLenum mode1)
{
	static PFNGLSHADEMODELPROC_HPP fn=reinterpret_cast<PFNGLSHADEMODELPROC_HPP>(_impl::_get_proc_address("glShadeModel",3,1));
	 fn(mode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ShaderSource
#define GL_HPP_FUNDEF_ShaderSource
typedef void (*PFNGLSHADERSOURCEPROC_HPP)(GLuint,GLsizei,const GLchar *const*,const GLint *);
static inline void ShaderSource(GLuint shader1,GLsizei count1,const GLchar *const* string1,const GLint * length1)
{
	static PFNGLSHADERSOURCEPROC_HPP fn=reinterpret_cast<PFNGLSHADERSOURCEPROC_HPP>(_impl::_get_proc_address("glShaderSource",3,1));
	 fn(shader1,count1,string1,length1);
}
#endif

#ifndef	GL_HPP_FUNDEF_StencilFunc
#define GL_HPP_FUNDEF_StencilFunc
typedef void (*PFNGLSTENCILFUNCPROC_HPP)(GLenum,GLint,GLuint);
static inline void StencilFunc(GLenum func1,GLint ref1,GLuint mask1)
{
	static PFNGLSTENCILFUNCPROC_HPP fn=reinterpret_cast<PFNGLSTENCILFUNCPROC_HPP>(_impl::_get_proc_address("glStencilFunc",3,1));
	 fn(func1,ref1,mask1);
}
#endif

#ifndef	GL_HPP_FUNDEF_StencilFuncSeparate
#define GL_HPP_FUNDEF_StencilFuncSeparate
typedef void (*PFNGLSTENCILFUNCSEPARATEPROC_HPP)(GLenum,GLenum,GLint,GLuint);
static inline void StencilFuncSeparate(GLenum face1,GLenum func1,GLint ref1,GLuint mask1)
{
	static PFNGLSTENCILFUNCSEPARATEPROC_HPP fn=reinterpret_cast<PFNGLSTENCILFUNCSEPARATEPROC_HPP>(_impl::_get_proc_address("glStencilFuncSeparate",3,1));
	 fn(face1,func1,ref1,mask1);
}
#endif

#ifndef	GL_HPP_FUNDEF_StencilMask
#define GL_HPP_FUNDEF_StencilMask
typedef void (*PFNGLSTENCILMASKPROC_HPP)(GLuint);
static inline void StencilMask(GLuint mask1)
{
	static PFNGLSTENCILMASKPROC_HPP fn=reinterpret_cast<PFNGLSTENCILMASKPROC_HPP>(_impl::_get_proc_address("glStencilMask",3,1));
	 fn(mask1);
}
#endif

#ifndef	GL_HPP_FUNDEF_StencilMaskSeparate
#define GL_HPP_FUNDEF_StencilMaskSeparate
typedef void (*PFNGLSTENCILMASKSEPARATEPROC_HPP)(GLenum,GLuint);
static inline void StencilMaskSeparate(GLenum face1,GLuint mask1)
{
	static PFNGLSTENCILMASKSEPARATEPROC_HPP fn=reinterpret_cast<PFNGLSTENCILMASKSEPARATEPROC_HPP>(_impl::_get_proc_address("glStencilMaskSeparate",3,1));
	 fn(face1,mask1);
}
#endif

#ifndef	GL_HPP_FUNDEF_StencilOp
#define GL_HPP_FUNDEF_StencilOp
typedef void (*PFNGLSTENCILOPPROC_HPP)(GLenum,GLenum,GLenum);
static inline void StencilOp(GLenum fail1,GLenum zfail1,GLenum zpass1)
{
	static PFNGLSTENCILOPPROC_HPP fn=reinterpret_cast<PFNGLSTENCILOPPROC_HPP>(_impl::_get_proc_address("glStencilOp",3,1));
	 fn(fail1,zfail1,zpass1);
}
#endif

#ifndef	GL_HPP_FUNDEF_StencilOpSeparate
#define GL_HPP_FUNDEF_StencilOpSeparate
typedef void (*PFNGLSTENCILOPSEPARATEPROC_HPP)(GLenum,GLenum,GLenum,GLenum);
static inline void StencilOpSeparate(GLenum face1,GLenum sfail1,GLenum dpfail1,GLenum dppass1)
{
	static PFNGLSTENCILOPSEPARATEPROC_HPP fn=reinterpret_cast<PFNGLSTENCILOPSEPARATEPROC_HPP>(_impl::_get_proc_address("glStencilOpSeparate",3,1));
	 fn(face1,sfail1,dpfail1,dppass1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexBuffer
#define GL_HPP_FUNDEF_TexBuffer
typedef void (*PFNGLTEXBUFFERPROC_HPP)(GLenum,GLenum,GLuint);
static inline void TexBuffer(GLenum target1,GLenum internalformat1,GLuint buffer1)
{
	static PFNGLTEXBUFFERPROC_HPP fn=reinterpret_cast<PFNGLTEXBUFFERPROC_HPP>(_impl::_get_proc_address("glTexBuffer",3,1));
	 fn(target1,internalformat1,buffer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord1d
#define GL_HPP_FUNDEF_TexCoord1d
typedef void (*PFNGLTEXCOORD1DPROC_HPP)(GLdouble);
static inline void TexCoord1d(GLdouble s1)
{
	static PFNGLTEXCOORD1DPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD1DPROC_HPP>(_impl::_get_proc_address("glTexCoord1d",3,1));
	 fn(s1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord1dv
#define GL_HPP_FUNDEF_TexCoord1dv
typedef void (*PFNGLTEXCOORD1DVPROC_HPP)(const GLdouble *);
static inline void TexCoord1dv(const GLdouble * v1)
{
	static PFNGLTEXCOORD1DVPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD1DVPROC_HPP>(_impl::_get_proc_address("glTexCoord1dv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord1f
#define GL_HPP_FUNDEF_TexCoord1f
typedef void (*PFNGLTEXCOORD1FPROC_HPP)(GLfloat);
static inline void TexCoord1f(GLfloat s1)
{
	static PFNGLTEXCOORD1FPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD1FPROC_HPP>(_impl::_get_proc_address("glTexCoord1f",3,1));
	 fn(s1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord1fv
#define GL_HPP_FUNDEF_TexCoord1fv
typedef void (*PFNGLTEXCOORD1FVPROC_HPP)(const GLfloat *);
static inline void TexCoord1fv(const GLfloat * v1)
{
	static PFNGLTEXCOORD1FVPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD1FVPROC_HPP>(_impl::_get_proc_address("glTexCoord1fv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord1i
#define GL_HPP_FUNDEF_TexCoord1i
typedef void (*PFNGLTEXCOORD1IPROC_HPP)(GLint);
static inline void TexCoord1i(GLint s1)
{
	static PFNGLTEXCOORD1IPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD1IPROC_HPP>(_impl::_get_proc_address("glTexCoord1i",3,1));
	 fn(s1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord1iv
#define GL_HPP_FUNDEF_TexCoord1iv
typedef void (*PFNGLTEXCOORD1IVPROC_HPP)(const GLint *);
static inline void TexCoord1iv(const GLint * v1)
{
	static PFNGLTEXCOORD1IVPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD1IVPROC_HPP>(_impl::_get_proc_address("glTexCoord1iv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord1s
#define GL_HPP_FUNDEF_TexCoord1s
typedef void (*PFNGLTEXCOORD1SPROC_HPP)(GLshort);
static inline void TexCoord1s(GLshort s1)
{
	static PFNGLTEXCOORD1SPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD1SPROC_HPP>(_impl::_get_proc_address("glTexCoord1s",3,1));
	 fn(s1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord1sv
#define GL_HPP_FUNDEF_TexCoord1sv
typedef void (*PFNGLTEXCOORD1SVPROC_HPP)(const GLshort *);
static inline void TexCoord1sv(const GLshort * v1)
{
	static PFNGLTEXCOORD1SVPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD1SVPROC_HPP>(_impl::_get_proc_address("glTexCoord1sv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord2d
#define GL_HPP_FUNDEF_TexCoord2d
typedef void (*PFNGLTEXCOORD2DPROC_HPP)(GLdouble,GLdouble);
static inline void TexCoord2d(GLdouble s1,GLdouble t1)
{
	static PFNGLTEXCOORD2DPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD2DPROC_HPP>(_impl::_get_proc_address("glTexCoord2d",3,1));
	 fn(s1,t1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord2dv
#define GL_HPP_FUNDEF_TexCoord2dv
typedef void (*PFNGLTEXCOORD2DVPROC_HPP)(const GLdouble *);
static inline void TexCoord2dv(const GLdouble * v1)
{
	static PFNGLTEXCOORD2DVPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD2DVPROC_HPP>(_impl::_get_proc_address("glTexCoord2dv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord2f
#define GL_HPP_FUNDEF_TexCoord2f
typedef void (*PFNGLTEXCOORD2FPROC_HPP)(GLfloat,GLfloat);
static inline void TexCoord2f(GLfloat s1,GLfloat t1)
{
	static PFNGLTEXCOORD2FPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD2FPROC_HPP>(_impl::_get_proc_address("glTexCoord2f",3,1));
	 fn(s1,t1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord2fv
#define GL_HPP_FUNDEF_TexCoord2fv
typedef void (*PFNGLTEXCOORD2FVPROC_HPP)(const GLfloat *);
static inline void TexCoord2fv(const GLfloat * v1)
{
	static PFNGLTEXCOORD2FVPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD2FVPROC_HPP>(_impl::_get_proc_address("glTexCoord2fv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord2i
#define GL_HPP_FUNDEF_TexCoord2i
typedef void (*PFNGLTEXCOORD2IPROC_HPP)(GLint,GLint);
static inline void TexCoord2i(GLint s1,GLint t1)
{
	static PFNGLTEXCOORD2IPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD2IPROC_HPP>(_impl::_get_proc_address("glTexCoord2i",3,1));
	 fn(s1,t1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord2iv
#define GL_HPP_FUNDEF_TexCoord2iv
typedef void (*PFNGLTEXCOORD2IVPROC_HPP)(const GLint *);
static inline void TexCoord2iv(const GLint * v1)
{
	static PFNGLTEXCOORD2IVPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD2IVPROC_HPP>(_impl::_get_proc_address("glTexCoord2iv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord2s
#define GL_HPP_FUNDEF_TexCoord2s
typedef void (*PFNGLTEXCOORD2SPROC_HPP)(GLshort,GLshort);
static inline void TexCoord2s(GLshort s1,GLshort t1)
{
	static PFNGLTEXCOORD2SPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD2SPROC_HPP>(_impl::_get_proc_address("glTexCoord2s",3,1));
	 fn(s1,t1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord2sv
#define GL_HPP_FUNDEF_TexCoord2sv
typedef void (*PFNGLTEXCOORD2SVPROC_HPP)(const GLshort *);
static inline void TexCoord2sv(const GLshort * v1)
{
	static PFNGLTEXCOORD2SVPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD2SVPROC_HPP>(_impl::_get_proc_address("glTexCoord2sv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord3d
#define GL_HPP_FUNDEF_TexCoord3d
typedef void (*PFNGLTEXCOORD3DPROC_HPP)(GLdouble,GLdouble,GLdouble);
static inline void TexCoord3d(GLdouble s1,GLdouble t1,GLdouble r1)
{
	static PFNGLTEXCOORD3DPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD3DPROC_HPP>(_impl::_get_proc_address("glTexCoord3d",3,1));
	 fn(s1,t1,r1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord3dv
#define GL_HPP_FUNDEF_TexCoord3dv
typedef void (*PFNGLTEXCOORD3DVPROC_HPP)(const GLdouble *);
static inline void TexCoord3dv(const GLdouble * v1)
{
	static PFNGLTEXCOORD3DVPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD3DVPROC_HPP>(_impl::_get_proc_address("glTexCoord3dv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord3f
#define GL_HPP_FUNDEF_TexCoord3f
typedef void (*PFNGLTEXCOORD3FPROC_HPP)(GLfloat,GLfloat,GLfloat);
static inline void TexCoord3f(GLfloat s1,GLfloat t1,GLfloat r1)
{
	static PFNGLTEXCOORD3FPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD3FPROC_HPP>(_impl::_get_proc_address("glTexCoord3f",3,1));
	 fn(s1,t1,r1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord3fv
#define GL_HPP_FUNDEF_TexCoord3fv
typedef void (*PFNGLTEXCOORD3FVPROC_HPP)(const GLfloat *);
static inline void TexCoord3fv(const GLfloat * v1)
{
	static PFNGLTEXCOORD3FVPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD3FVPROC_HPP>(_impl::_get_proc_address("glTexCoord3fv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord3i
#define GL_HPP_FUNDEF_TexCoord3i
typedef void (*PFNGLTEXCOORD3IPROC_HPP)(GLint,GLint,GLint);
static inline void TexCoord3i(GLint s1,GLint t1,GLint r1)
{
	static PFNGLTEXCOORD3IPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD3IPROC_HPP>(_impl::_get_proc_address("glTexCoord3i",3,1));
	 fn(s1,t1,r1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord3iv
#define GL_HPP_FUNDEF_TexCoord3iv
typedef void (*PFNGLTEXCOORD3IVPROC_HPP)(const GLint *);
static inline void TexCoord3iv(const GLint * v1)
{
	static PFNGLTEXCOORD3IVPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD3IVPROC_HPP>(_impl::_get_proc_address("glTexCoord3iv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord3s
#define GL_HPP_FUNDEF_TexCoord3s
typedef void (*PFNGLTEXCOORD3SPROC_HPP)(GLshort,GLshort,GLshort);
static inline void TexCoord3s(GLshort s1,GLshort t1,GLshort r1)
{
	static PFNGLTEXCOORD3SPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD3SPROC_HPP>(_impl::_get_proc_address("glTexCoord3s",3,1));
	 fn(s1,t1,r1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord3sv
#define GL_HPP_FUNDEF_TexCoord3sv
typedef void (*PFNGLTEXCOORD3SVPROC_HPP)(const GLshort *);
static inline void TexCoord3sv(const GLshort * v1)
{
	static PFNGLTEXCOORD3SVPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD3SVPROC_HPP>(_impl::_get_proc_address("glTexCoord3sv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord4d
#define GL_HPP_FUNDEF_TexCoord4d
typedef void (*PFNGLTEXCOORD4DPROC_HPP)(GLdouble,GLdouble,GLdouble,GLdouble);
static inline void TexCoord4d(GLdouble s1,GLdouble t1,GLdouble r1,GLdouble q1)
{
	static PFNGLTEXCOORD4DPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD4DPROC_HPP>(_impl::_get_proc_address("glTexCoord4d",3,1));
	 fn(s1,t1,r1,q1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord4dv
#define GL_HPP_FUNDEF_TexCoord4dv
typedef void (*PFNGLTEXCOORD4DVPROC_HPP)(const GLdouble *);
static inline void TexCoord4dv(const GLdouble * v1)
{
	static PFNGLTEXCOORD4DVPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD4DVPROC_HPP>(_impl::_get_proc_address("glTexCoord4dv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord4f
#define GL_HPP_FUNDEF_TexCoord4f
typedef void (*PFNGLTEXCOORD4FPROC_HPP)(GLfloat,GLfloat,GLfloat,GLfloat);
static inline void TexCoord4f(GLfloat s1,GLfloat t1,GLfloat r1,GLfloat q1)
{
	static PFNGLTEXCOORD4FPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD4FPROC_HPP>(_impl::_get_proc_address("glTexCoord4f",3,1));
	 fn(s1,t1,r1,q1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord4fv
#define GL_HPP_FUNDEF_TexCoord4fv
typedef void (*PFNGLTEXCOORD4FVPROC_HPP)(const GLfloat *);
static inline void TexCoord4fv(const GLfloat * v1)
{
	static PFNGLTEXCOORD4FVPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD4FVPROC_HPP>(_impl::_get_proc_address("glTexCoord4fv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord4i
#define GL_HPP_FUNDEF_TexCoord4i
typedef void (*PFNGLTEXCOORD4IPROC_HPP)(GLint,GLint,GLint,GLint);
static inline void TexCoord4i(GLint s1,GLint t1,GLint r1,GLint q1)
{
	static PFNGLTEXCOORD4IPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD4IPROC_HPP>(_impl::_get_proc_address("glTexCoord4i",3,1));
	 fn(s1,t1,r1,q1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord4iv
#define GL_HPP_FUNDEF_TexCoord4iv
typedef void (*PFNGLTEXCOORD4IVPROC_HPP)(const GLint *);
static inline void TexCoord4iv(const GLint * v1)
{
	static PFNGLTEXCOORD4IVPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD4IVPROC_HPP>(_impl::_get_proc_address("glTexCoord4iv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord4s
#define GL_HPP_FUNDEF_TexCoord4s
typedef void (*PFNGLTEXCOORD4SPROC_HPP)(GLshort,GLshort,GLshort,GLshort);
static inline void TexCoord4s(GLshort s1,GLshort t1,GLshort r1,GLshort q1)
{
	static PFNGLTEXCOORD4SPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD4SPROC_HPP>(_impl::_get_proc_address("glTexCoord4s",3,1));
	 fn(s1,t1,r1,q1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoord4sv
#define GL_HPP_FUNDEF_TexCoord4sv
typedef void (*PFNGLTEXCOORD4SVPROC_HPP)(const GLshort *);
static inline void TexCoord4sv(const GLshort * v1)
{
	static PFNGLTEXCOORD4SVPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORD4SVPROC_HPP>(_impl::_get_proc_address("glTexCoord4sv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexCoordPointer
#define GL_HPP_FUNDEF_TexCoordPointer
typedef void (*PFNGLTEXCOORDPOINTERPROC_HPP)(GLint,GLenum,GLsizei,const void *);
static inline void TexCoordPointer(GLint size1,GLenum type1,GLsizei stride1,const void * pointer1)
{
	static PFNGLTEXCOORDPOINTERPROC_HPP fn=reinterpret_cast<PFNGLTEXCOORDPOINTERPROC_HPP>(_impl::_get_proc_address("glTexCoordPointer",3,1));
	 fn(size1,type1,stride1,pointer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexEnvf
#define GL_HPP_FUNDEF_TexEnvf
typedef void (*PFNGLTEXENVFPROC_HPP)(GLenum,GLenum,GLfloat);
static inline void TexEnvf(GLenum target1,GLenum pname1,GLfloat param1)
{
	static PFNGLTEXENVFPROC_HPP fn=reinterpret_cast<PFNGLTEXENVFPROC_HPP>(_impl::_get_proc_address("glTexEnvf",3,1));
	 fn(target1,pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexEnvfv
#define GL_HPP_FUNDEF_TexEnvfv
typedef void (*PFNGLTEXENVFVPROC_HPP)(GLenum,GLenum,const GLfloat *);
static inline void TexEnvfv(GLenum target1,GLenum pname1,const GLfloat * params1)
{
	static PFNGLTEXENVFVPROC_HPP fn=reinterpret_cast<PFNGLTEXENVFVPROC_HPP>(_impl::_get_proc_address("glTexEnvfv",3,1));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexEnvi
#define GL_HPP_FUNDEF_TexEnvi
typedef void (*PFNGLTEXENVIPROC_HPP)(GLenum,GLenum,GLint);
static inline void TexEnvi(GLenum target1,GLenum pname1,GLint param1)
{
	static PFNGLTEXENVIPROC_HPP fn=reinterpret_cast<PFNGLTEXENVIPROC_HPP>(_impl::_get_proc_address("glTexEnvi",3,1));
	 fn(target1,pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexEnviv
#define GL_HPP_FUNDEF_TexEnviv
typedef void (*PFNGLTEXENVIVPROC_HPP)(GLenum,GLenum,const GLint *);
static inline void TexEnviv(GLenum target1,GLenum pname1,const GLint * params1)
{
	static PFNGLTEXENVIVPROC_HPP fn=reinterpret_cast<PFNGLTEXENVIVPROC_HPP>(_impl::_get_proc_address("glTexEnviv",3,1));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexGend
#define GL_HPP_FUNDEF_TexGend
typedef void (*PFNGLTEXGENDPROC_HPP)(GLenum,GLenum,GLdouble);
static inline void TexGend(GLenum coord1,GLenum pname1,GLdouble param1)
{
	static PFNGLTEXGENDPROC_HPP fn=reinterpret_cast<PFNGLTEXGENDPROC_HPP>(_impl::_get_proc_address("glTexGend",3,1));
	 fn(coord1,pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexGendv
#define GL_HPP_FUNDEF_TexGendv
typedef void (*PFNGLTEXGENDVPROC_HPP)(GLenum,GLenum,const GLdouble *);
static inline void TexGendv(GLenum coord1,GLenum pname1,const GLdouble * params1)
{
	static PFNGLTEXGENDVPROC_HPP fn=reinterpret_cast<PFNGLTEXGENDVPROC_HPP>(_impl::_get_proc_address("glTexGendv",3,1));
	 fn(coord1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexGenf
#define GL_HPP_FUNDEF_TexGenf
typedef void (*PFNGLTEXGENFPROC_HPP)(GLenum,GLenum,GLfloat);
static inline void TexGenf(GLenum coord1,GLenum pname1,GLfloat param1)
{
	static PFNGLTEXGENFPROC_HPP fn=reinterpret_cast<PFNGLTEXGENFPROC_HPP>(_impl::_get_proc_address("glTexGenf",3,1));
	 fn(coord1,pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexGenfv
#define GL_HPP_FUNDEF_TexGenfv
typedef void (*PFNGLTEXGENFVPROC_HPP)(GLenum,GLenum,const GLfloat *);
static inline void TexGenfv(GLenum coord1,GLenum pname1,const GLfloat * params1)
{
	static PFNGLTEXGENFVPROC_HPP fn=reinterpret_cast<PFNGLTEXGENFVPROC_HPP>(_impl::_get_proc_address("glTexGenfv",3,1));
	 fn(coord1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexGeni
#define GL_HPP_FUNDEF_TexGeni
typedef void (*PFNGLTEXGENIPROC_HPP)(GLenum,GLenum,GLint);
static inline void TexGeni(GLenum coord1,GLenum pname1,GLint param1)
{
	static PFNGLTEXGENIPROC_HPP fn=reinterpret_cast<PFNGLTEXGENIPROC_HPP>(_impl::_get_proc_address("glTexGeni",3,1));
	 fn(coord1,pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexGeniv
#define GL_HPP_FUNDEF_TexGeniv
typedef void (*PFNGLTEXGENIVPROC_HPP)(GLenum,GLenum,const GLint *);
static inline void TexGeniv(GLenum coord1,GLenum pname1,const GLint * params1)
{
	static PFNGLTEXGENIVPROC_HPP fn=reinterpret_cast<PFNGLTEXGENIVPROC_HPP>(_impl::_get_proc_address("glTexGeniv",3,1));
	 fn(coord1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexImage1D
#define GL_HPP_FUNDEF_TexImage1D
typedef void (*PFNGLTEXIMAGE1DPROC_HPP)(GLenum,GLint,GLint,GLsizei,GLint,GLenum,GLenum,const void *);
static inline void TexImage1D(GLenum target1,GLint level1,GLint internalformat1,GLsizei width1,GLint border1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXIMAGE1DPROC_HPP fn=reinterpret_cast<PFNGLTEXIMAGE1DPROC_HPP>(_impl::_get_proc_address("glTexImage1D",3,1));
	 fn(target1,level1,internalformat1,width1,border1,format1,type1,pixels1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexImage2D
#define GL_HPP_FUNDEF_TexImage2D
typedef void (*PFNGLTEXIMAGE2DPROC_HPP)(GLenum,GLint,GLint,GLsizei,GLsizei,GLint,GLenum,GLenum,const void *);
static inline void TexImage2D(GLenum target1,GLint level1,GLint internalformat1,GLsizei width1,GLsizei height1,GLint border1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXIMAGE2DPROC_HPP fn=reinterpret_cast<PFNGLTEXIMAGE2DPROC_HPP>(_impl::_get_proc_address("glTexImage2D",3,1));
	 fn(target1,level1,internalformat1,width1,height1,border1,format1,type1,pixels1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexImage3D
#define GL_HPP_FUNDEF_TexImage3D
typedef void (*PFNGLTEXIMAGE3DPROC_HPP)(GLenum,GLint,GLint,GLsizei,GLsizei,GLsizei,GLint,GLenum,GLenum,const void *);
static inline void TexImage3D(GLenum target1,GLint level1,GLint internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLint border1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXIMAGE3DPROC_HPP fn=reinterpret_cast<PFNGLTEXIMAGE3DPROC_HPP>(_impl::_get_proc_address("glTexImage3D",3,1));
	 fn(target1,level1,internalformat1,width1,height1,depth1,border1,format1,type1,pixels1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexParameterIiv
#define GL_HPP_FUNDEF_TexParameterIiv
typedef void (*PFNGLTEXPARAMETERIIVPROC_HPP)(GLenum,GLenum,const GLint *);
static inline void TexParameterIiv(GLenum target1,GLenum pname1,const GLint * params1)
{
	static PFNGLTEXPARAMETERIIVPROC_HPP fn=reinterpret_cast<PFNGLTEXPARAMETERIIVPROC_HPP>(_impl::_get_proc_address("glTexParameterIiv",3,1));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexParameterIuiv
#define GL_HPP_FUNDEF_TexParameterIuiv
typedef void (*PFNGLTEXPARAMETERIUIVPROC_HPP)(GLenum,GLenum,const GLuint *);
static inline void TexParameterIuiv(GLenum target1,GLenum pname1,const GLuint * params1)
{
	static PFNGLTEXPARAMETERIUIVPROC_HPP fn=reinterpret_cast<PFNGLTEXPARAMETERIUIVPROC_HPP>(_impl::_get_proc_address("glTexParameterIuiv",3,1));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexParameterf
#define GL_HPP_FUNDEF_TexParameterf
typedef void (*PFNGLTEXPARAMETERFPROC_HPP)(GLenum,GLenum,GLfloat);
static inline void TexParameterf(GLenum target1,GLenum pname1,GLfloat param1)
{
	static PFNGLTEXPARAMETERFPROC_HPP fn=reinterpret_cast<PFNGLTEXPARAMETERFPROC_HPP>(_impl::_get_proc_address("glTexParameterf",3,1));
	 fn(target1,pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexParameterfv
#define GL_HPP_FUNDEF_TexParameterfv
typedef void (*PFNGLTEXPARAMETERFVPROC_HPP)(GLenum,GLenum,const GLfloat *);
static inline void TexParameterfv(GLenum target1,GLenum pname1,const GLfloat * params1)
{
	static PFNGLTEXPARAMETERFVPROC_HPP fn=reinterpret_cast<PFNGLTEXPARAMETERFVPROC_HPP>(_impl::_get_proc_address("glTexParameterfv",3,1));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexParameteri
#define GL_HPP_FUNDEF_TexParameteri
typedef void (*PFNGLTEXPARAMETERIPROC_HPP)(GLenum,GLenum,GLint);
static inline void TexParameteri(GLenum target1,GLenum pname1,GLint param1)
{
	static PFNGLTEXPARAMETERIPROC_HPP fn=reinterpret_cast<PFNGLTEXPARAMETERIPROC_HPP>(_impl::_get_proc_address("glTexParameteri",3,1));
	 fn(target1,pname1,param1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexParameteriv
#define GL_HPP_FUNDEF_TexParameteriv
typedef void (*PFNGLTEXPARAMETERIVPROC_HPP)(GLenum,GLenum,const GLint *);
static inline void TexParameteriv(GLenum target1,GLenum pname1,const GLint * params1)
{
	static PFNGLTEXPARAMETERIVPROC_HPP fn=reinterpret_cast<PFNGLTEXPARAMETERIVPROC_HPP>(_impl::_get_proc_address("glTexParameteriv",3,1));
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexSubImage1D
#define GL_HPP_FUNDEF_TexSubImage1D
typedef void (*PFNGLTEXSUBIMAGE1DPROC_HPP)(GLenum,GLint,GLint,GLsizei,GLenum,GLenum,const void *);
static inline void TexSubImage1D(GLenum target1,GLint level1,GLint xoffset1,GLsizei width1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXSUBIMAGE1DPROC_HPP fn=reinterpret_cast<PFNGLTEXSUBIMAGE1DPROC_HPP>(_impl::_get_proc_address("glTexSubImage1D",3,1));
	 fn(target1,level1,xoffset1,width1,format1,type1,pixels1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexSubImage2D
#define GL_HPP_FUNDEF_TexSubImage2D
typedef void (*PFNGLTEXSUBIMAGE2DPROC_HPP)(GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,const void *);
static inline void TexSubImage2D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLsizei width1,GLsizei height1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXSUBIMAGE2DPROC_HPP fn=reinterpret_cast<PFNGLTEXSUBIMAGE2DPROC_HPP>(_impl::_get_proc_address("glTexSubImage2D",3,1));
	 fn(target1,level1,xoffset1,yoffset1,width1,height1,format1,type1,pixels1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TexSubImage3D
#define GL_HPP_FUNDEF_TexSubImage3D
typedef void (*PFNGLTEXSUBIMAGE3DPROC_HPP)(GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,const void *);
static inline void TexSubImage3D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLsizei width1,GLsizei height1,GLsizei depth1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXSUBIMAGE3DPROC_HPP fn=reinterpret_cast<PFNGLTEXSUBIMAGE3DPROC_HPP>(_impl::_get_proc_address("glTexSubImage3D",3,1));
	 fn(target1,level1,xoffset1,yoffset1,zoffset1,width1,height1,depth1,format1,type1,pixels1);
}
#endif

#ifndef	GL_HPP_FUNDEF_TransformFeedbackVaryings
#define GL_HPP_FUNDEF_TransformFeedbackVaryings
typedef void (*PFNGLTRANSFORMFEEDBACKVARYINGSPROC_HPP)(GLuint,GLsizei,const GLchar *const*,GLenum);
static inline void TransformFeedbackVaryings(GLuint program1,GLsizei count1,const GLchar *const* varyings1,GLenum bufferMode1)
{
	static PFNGLTRANSFORMFEEDBACKVARYINGSPROC_HPP fn=reinterpret_cast<PFNGLTRANSFORMFEEDBACKVARYINGSPROC_HPP>(_impl::_get_proc_address("glTransformFeedbackVaryings",3,1));
	 fn(program1,count1,varyings1,bufferMode1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Translated
#define GL_HPP_FUNDEF_Translated
typedef void (*PFNGLTRANSLATEDPROC_HPP)(GLdouble,GLdouble,GLdouble);
static inline void Translated(GLdouble x1,GLdouble y1,GLdouble z1)
{
	static PFNGLTRANSLATEDPROC_HPP fn=reinterpret_cast<PFNGLTRANSLATEDPROC_HPP>(_impl::_get_proc_address("glTranslated",3,1));
	 fn(x1,y1,z1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Translatef
#define GL_HPP_FUNDEF_Translatef
typedef void (*PFNGLTRANSLATEFPROC_HPP)(GLfloat,GLfloat,GLfloat);
static inline void Translatef(GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLTRANSLATEFPROC_HPP fn=reinterpret_cast<PFNGLTRANSLATEFPROC_HPP>(_impl::_get_proc_address("glTranslatef",3,1));
	 fn(x1,y1,z1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform1f
#define GL_HPP_FUNDEF_Uniform1f
typedef void (*PFNGLUNIFORM1FPROC_HPP)(GLint,GLfloat);
static inline void Uniform1f(GLint location1,GLfloat v01)
{
	static PFNGLUNIFORM1FPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM1FPROC_HPP>(_impl::_get_proc_address("glUniform1f",3,1));
	 fn(location1,v01);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform1fv
#define GL_HPP_FUNDEF_Uniform1fv
typedef void (*PFNGLUNIFORM1FVPROC_HPP)(GLint,GLsizei,const GLfloat *);
static inline void Uniform1fv(GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLUNIFORM1FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM1FVPROC_HPP>(_impl::_get_proc_address("glUniform1fv",3,1));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform1i
#define GL_HPP_FUNDEF_Uniform1i
typedef void (*PFNGLUNIFORM1IPROC_HPP)(GLint,GLint);
static inline void Uniform1i(GLint location1,GLint v01)
{
	static PFNGLUNIFORM1IPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM1IPROC_HPP>(_impl::_get_proc_address("glUniform1i",3,1));
	 fn(location1,v01);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform1iv
#define GL_HPP_FUNDEF_Uniform1iv
typedef void (*PFNGLUNIFORM1IVPROC_HPP)(GLint,GLsizei,const GLint *);
static inline void Uniform1iv(GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLUNIFORM1IVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM1IVPROC_HPP>(_impl::_get_proc_address("glUniform1iv",3,1));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform1ui
#define GL_HPP_FUNDEF_Uniform1ui
typedef void (*PFNGLUNIFORM1UIPROC_HPP)(GLint,GLuint);
static inline void Uniform1ui(GLint location1,GLuint v01)
{
	static PFNGLUNIFORM1UIPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM1UIPROC_HPP>(_impl::_get_proc_address("glUniform1ui",3,1));
	 fn(location1,v01);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform1uiv
#define GL_HPP_FUNDEF_Uniform1uiv
typedef void (*PFNGLUNIFORM1UIVPROC_HPP)(GLint,GLsizei,const GLuint *);
static inline void Uniform1uiv(GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLUNIFORM1UIVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM1UIVPROC_HPP>(_impl::_get_proc_address("glUniform1uiv",3,1));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform2f
#define GL_HPP_FUNDEF_Uniform2f
typedef void (*PFNGLUNIFORM2FPROC_HPP)(GLint,GLfloat,GLfloat);
static inline void Uniform2f(GLint location1,GLfloat v01,GLfloat v11)
{
	static PFNGLUNIFORM2FPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM2FPROC_HPP>(_impl::_get_proc_address("glUniform2f",3,1));
	 fn(location1,v01,v11);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform2fv
#define GL_HPP_FUNDEF_Uniform2fv
typedef void (*PFNGLUNIFORM2FVPROC_HPP)(GLint,GLsizei,const GLfloat *);
static inline void Uniform2fv(GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLUNIFORM2FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM2FVPROC_HPP>(_impl::_get_proc_address("glUniform2fv",3,1));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform2i
#define GL_HPP_FUNDEF_Uniform2i
typedef void (*PFNGLUNIFORM2IPROC_HPP)(GLint,GLint,GLint);
static inline void Uniform2i(GLint location1,GLint v01,GLint v11)
{
	static PFNGLUNIFORM2IPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM2IPROC_HPP>(_impl::_get_proc_address("glUniform2i",3,1));
	 fn(location1,v01,v11);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform2iv
#define GL_HPP_FUNDEF_Uniform2iv
typedef void (*PFNGLUNIFORM2IVPROC_HPP)(GLint,GLsizei,const GLint *);
static inline void Uniform2iv(GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLUNIFORM2IVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM2IVPROC_HPP>(_impl::_get_proc_address("glUniform2iv",3,1));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform2ui
#define GL_HPP_FUNDEF_Uniform2ui
typedef void (*PFNGLUNIFORM2UIPROC_HPP)(GLint,GLuint,GLuint);
static inline void Uniform2ui(GLint location1,GLuint v01,GLuint v11)
{
	static PFNGLUNIFORM2UIPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM2UIPROC_HPP>(_impl::_get_proc_address("glUniform2ui",3,1));
	 fn(location1,v01,v11);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform2uiv
#define GL_HPP_FUNDEF_Uniform2uiv
typedef void (*PFNGLUNIFORM2UIVPROC_HPP)(GLint,GLsizei,const GLuint *);
static inline void Uniform2uiv(GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLUNIFORM2UIVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM2UIVPROC_HPP>(_impl::_get_proc_address("glUniform2uiv",3,1));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform3f
#define GL_HPP_FUNDEF_Uniform3f
typedef void (*PFNGLUNIFORM3FPROC_HPP)(GLint,GLfloat,GLfloat,GLfloat);
static inline void Uniform3f(GLint location1,GLfloat v01,GLfloat v11,GLfloat v21)
{
	static PFNGLUNIFORM3FPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM3FPROC_HPP>(_impl::_get_proc_address("glUniform3f",3,1));
	 fn(location1,v01,v11,v21);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform3fv
#define GL_HPP_FUNDEF_Uniform3fv
typedef void (*PFNGLUNIFORM3FVPROC_HPP)(GLint,GLsizei,const GLfloat *);
static inline void Uniform3fv(GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLUNIFORM3FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM3FVPROC_HPP>(_impl::_get_proc_address("glUniform3fv",3,1));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform3i
#define GL_HPP_FUNDEF_Uniform3i
typedef void (*PFNGLUNIFORM3IPROC_HPP)(GLint,GLint,GLint,GLint);
static inline void Uniform3i(GLint location1,GLint v01,GLint v11,GLint v21)
{
	static PFNGLUNIFORM3IPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM3IPROC_HPP>(_impl::_get_proc_address("glUniform3i",3,1));
	 fn(location1,v01,v11,v21);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform3iv
#define GL_HPP_FUNDEF_Uniform3iv
typedef void (*PFNGLUNIFORM3IVPROC_HPP)(GLint,GLsizei,const GLint *);
static inline void Uniform3iv(GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLUNIFORM3IVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM3IVPROC_HPP>(_impl::_get_proc_address("glUniform3iv",3,1));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform3ui
#define GL_HPP_FUNDEF_Uniform3ui
typedef void (*PFNGLUNIFORM3UIPROC_HPP)(GLint,GLuint,GLuint,GLuint);
static inline void Uniform3ui(GLint location1,GLuint v01,GLuint v11,GLuint v21)
{
	static PFNGLUNIFORM3UIPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM3UIPROC_HPP>(_impl::_get_proc_address("glUniform3ui",3,1));
	 fn(location1,v01,v11,v21);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform3uiv
#define GL_HPP_FUNDEF_Uniform3uiv
typedef void (*PFNGLUNIFORM3UIVPROC_HPP)(GLint,GLsizei,const GLuint *);
static inline void Uniform3uiv(GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLUNIFORM3UIVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM3UIVPROC_HPP>(_impl::_get_proc_address("glUniform3uiv",3,1));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform4f
#define GL_HPP_FUNDEF_Uniform4f
typedef void (*PFNGLUNIFORM4FPROC_HPP)(GLint,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void Uniform4f(GLint location1,GLfloat v01,GLfloat v11,GLfloat v21,GLfloat v31)
{
	static PFNGLUNIFORM4FPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM4FPROC_HPP>(_impl::_get_proc_address("glUniform4f",3,1));
	 fn(location1,v01,v11,v21,v31);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform4fv
#define GL_HPP_FUNDEF_Uniform4fv
typedef void (*PFNGLUNIFORM4FVPROC_HPP)(GLint,GLsizei,const GLfloat *);
static inline void Uniform4fv(GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLUNIFORM4FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM4FVPROC_HPP>(_impl::_get_proc_address("glUniform4fv",3,1));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform4i
#define GL_HPP_FUNDEF_Uniform4i
typedef void (*PFNGLUNIFORM4IPROC_HPP)(GLint,GLint,GLint,GLint,GLint);
static inline void Uniform4i(GLint location1,GLint v01,GLint v11,GLint v21,GLint v31)
{
	static PFNGLUNIFORM4IPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM4IPROC_HPP>(_impl::_get_proc_address("glUniform4i",3,1));
	 fn(location1,v01,v11,v21,v31);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform4iv
#define GL_HPP_FUNDEF_Uniform4iv
typedef void (*PFNGLUNIFORM4IVPROC_HPP)(GLint,GLsizei,const GLint *);
static inline void Uniform4iv(GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLUNIFORM4IVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM4IVPROC_HPP>(_impl::_get_proc_address("glUniform4iv",3,1));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform4ui
#define GL_HPP_FUNDEF_Uniform4ui
typedef void (*PFNGLUNIFORM4UIPROC_HPP)(GLint,GLuint,GLuint,GLuint,GLuint);
static inline void Uniform4ui(GLint location1,GLuint v01,GLuint v11,GLuint v21,GLuint v31)
{
	static PFNGLUNIFORM4UIPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM4UIPROC_HPP>(_impl::_get_proc_address("glUniform4ui",3,1));
	 fn(location1,v01,v11,v21,v31);
}
#endif

#ifndef	GL_HPP_FUNDEF_Uniform4uiv
#define GL_HPP_FUNDEF_Uniform4uiv
typedef void (*PFNGLUNIFORM4UIVPROC_HPP)(GLint,GLsizei,const GLuint *);
static inline void Uniform4uiv(GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLUNIFORM4UIVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORM4UIVPROC_HPP>(_impl::_get_proc_address("glUniform4uiv",3,1));
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformBlockBinding
#define GL_HPP_FUNDEF_UniformBlockBinding
typedef void (*PFNGLUNIFORMBLOCKBINDINGPROC_HPP)(GLuint,GLuint,GLuint);
static inline void UniformBlockBinding(GLuint program1,GLuint uniformBlockIndex1,GLuint uniformBlockBinding1)
{
	static PFNGLUNIFORMBLOCKBINDINGPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMBLOCKBINDINGPROC_HPP>(_impl::_get_proc_address("glUniformBlockBinding",3,1));
	 fn(program1,uniformBlockIndex1,uniformBlockBinding1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix2fv
#define GL_HPP_FUNDEF_UniformMatrix2fv
typedef void (*PFNGLUNIFORMMATRIX2FVPROC_HPP)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void UniformMatrix2fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX2FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX2FVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix2fv",3,1));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix2x3fv
#define GL_HPP_FUNDEF_UniformMatrix2x3fv
typedef void (*PFNGLUNIFORMMATRIX2X3FVPROC_HPP)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void UniformMatrix2x3fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX2X3FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX2X3FVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix2x3fv",3,1));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix2x4fv
#define GL_HPP_FUNDEF_UniformMatrix2x4fv
typedef void (*PFNGLUNIFORMMATRIX2X4FVPROC_HPP)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void UniformMatrix2x4fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX2X4FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX2X4FVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix2x4fv",3,1));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix3fv
#define GL_HPP_FUNDEF_UniformMatrix3fv
typedef void (*PFNGLUNIFORMMATRIX3FVPROC_HPP)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void UniformMatrix3fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX3FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX3FVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix3fv",3,1));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix3x2fv
#define GL_HPP_FUNDEF_UniformMatrix3x2fv
typedef void (*PFNGLUNIFORMMATRIX3X2FVPROC_HPP)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void UniformMatrix3x2fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX3X2FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX3X2FVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix3x2fv",3,1));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix3x4fv
#define GL_HPP_FUNDEF_UniformMatrix3x4fv
typedef void (*PFNGLUNIFORMMATRIX3X4FVPROC_HPP)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void UniformMatrix3x4fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX3X4FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX3X4FVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix3x4fv",3,1));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix4fv
#define GL_HPP_FUNDEF_UniformMatrix4fv
typedef void (*PFNGLUNIFORMMATRIX4FVPROC_HPP)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void UniformMatrix4fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX4FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX4FVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix4fv",3,1));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix4x2fv
#define GL_HPP_FUNDEF_UniformMatrix4x2fv
typedef void (*PFNGLUNIFORMMATRIX4X2FVPROC_HPP)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void UniformMatrix4x2fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX4X2FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX4X2FVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix4x2fv",3,1));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UniformMatrix4x3fv
#define GL_HPP_FUNDEF_UniformMatrix4x3fv
typedef void (*PFNGLUNIFORMMATRIX4X3FVPROC_HPP)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void UniformMatrix4x3fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX4X3FVPROC_HPP fn=reinterpret_cast<PFNGLUNIFORMMATRIX4X3FVPROC_HPP>(_impl::_get_proc_address("glUniformMatrix4x3fv",3,1));
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UnmapBuffer
#define GL_HPP_FUNDEF_UnmapBuffer
typedef GLboolean (*PFNGLUNMAPBUFFERPROC_HPP)(GLenum);
static inline GLboolean UnmapBuffer(GLenum target1)
{
	static PFNGLUNMAPBUFFERPROC_HPP fn=reinterpret_cast<PFNGLUNMAPBUFFERPROC_HPP>(_impl::_get_proc_address("glUnmapBuffer",3,1));
	return fn(target1);
}
#endif

#ifndef	GL_HPP_FUNDEF_UseProgram
#define GL_HPP_FUNDEF_UseProgram
typedef void (*PFNGLUSEPROGRAMPROC_HPP)(GLuint);
static inline void UseProgram(GLuint program1)
{
	static PFNGLUSEPROGRAMPROC_HPP fn=reinterpret_cast<PFNGLUSEPROGRAMPROC_HPP>(_impl::_get_proc_address("glUseProgram",3,1));
	 fn(program1);
}
#endif

#ifndef	GL_HPP_FUNDEF_ValidateProgram
#define GL_HPP_FUNDEF_ValidateProgram
typedef void (*PFNGLVALIDATEPROGRAMPROC_HPP)(GLuint);
static inline void ValidateProgram(GLuint program1)
{
	static PFNGLVALIDATEPROGRAMPROC_HPP fn=reinterpret_cast<PFNGLVALIDATEPROGRAMPROC_HPP>(_impl::_get_proc_address("glValidateProgram",3,1));
	 fn(program1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Vertex2d
#define GL_HPP_FUNDEF_Vertex2d
typedef void (*PFNGLVERTEX2DPROC_HPP)(GLdouble,GLdouble);
static inline void Vertex2d(GLdouble x1,GLdouble y1)
{
	static PFNGLVERTEX2DPROC_HPP fn=reinterpret_cast<PFNGLVERTEX2DPROC_HPP>(_impl::_get_proc_address("glVertex2d",3,1));
	 fn(x1,y1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Vertex2dv
#define GL_HPP_FUNDEF_Vertex2dv
typedef void (*PFNGLVERTEX2DVPROC_HPP)(const GLdouble *);
static inline void Vertex2dv(const GLdouble * v1)
{
	static PFNGLVERTEX2DVPROC_HPP fn=reinterpret_cast<PFNGLVERTEX2DVPROC_HPP>(_impl::_get_proc_address("glVertex2dv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Vertex2f
#define GL_HPP_FUNDEF_Vertex2f
typedef void (*PFNGLVERTEX2FPROC_HPP)(GLfloat,GLfloat);
static inline void Vertex2f(GLfloat x1,GLfloat y1)
{
	static PFNGLVERTEX2FPROC_HPP fn=reinterpret_cast<PFNGLVERTEX2FPROC_HPP>(_impl::_get_proc_address("glVertex2f",3,1));
	 fn(x1,y1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Vertex2fv
#define GL_HPP_FUNDEF_Vertex2fv
typedef void (*PFNGLVERTEX2FVPROC_HPP)(const GLfloat *);
static inline void Vertex2fv(const GLfloat * v1)
{
	static PFNGLVERTEX2FVPROC_HPP fn=reinterpret_cast<PFNGLVERTEX2FVPROC_HPP>(_impl::_get_proc_address("glVertex2fv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Vertex2i
#define GL_HPP_FUNDEF_Vertex2i
typedef void (*PFNGLVERTEX2IPROC_HPP)(GLint,GLint);
static inline void Vertex2i(GLint x1,GLint y1)
{
	static PFNGLVERTEX2IPROC_HPP fn=reinterpret_cast<PFNGLVERTEX2IPROC_HPP>(_impl::_get_proc_address("glVertex2i",3,1));
	 fn(x1,y1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Vertex2iv
#define GL_HPP_FUNDEF_Vertex2iv
typedef void (*PFNGLVERTEX2IVPROC_HPP)(const GLint *);
static inline void Vertex2iv(const GLint * v1)
{
	static PFNGLVERTEX2IVPROC_HPP fn=reinterpret_cast<PFNGLVERTEX2IVPROC_HPP>(_impl::_get_proc_address("glVertex2iv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Vertex2s
#define GL_HPP_FUNDEF_Vertex2s
typedef void (*PFNGLVERTEX2SPROC_HPP)(GLshort,GLshort);
static inline void Vertex2s(GLshort x1,GLshort y1)
{
	static PFNGLVERTEX2SPROC_HPP fn=reinterpret_cast<PFNGLVERTEX2SPROC_HPP>(_impl::_get_proc_address("glVertex2s",3,1));
	 fn(x1,y1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Vertex2sv
#define GL_HPP_FUNDEF_Vertex2sv
typedef void (*PFNGLVERTEX2SVPROC_HPP)(const GLshort *);
static inline void Vertex2sv(const GLshort * v1)
{
	static PFNGLVERTEX2SVPROC_HPP fn=reinterpret_cast<PFNGLVERTEX2SVPROC_HPP>(_impl::_get_proc_address("glVertex2sv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Vertex3d
#define GL_HPP_FUNDEF_Vertex3d
typedef void (*PFNGLVERTEX3DPROC_HPP)(GLdouble,GLdouble,GLdouble);
static inline void Vertex3d(GLdouble x1,GLdouble y1,GLdouble z1)
{
	static PFNGLVERTEX3DPROC_HPP fn=reinterpret_cast<PFNGLVERTEX3DPROC_HPP>(_impl::_get_proc_address("glVertex3d",3,1));
	 fn(x1,y1,z1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Vertex3dv
#define GL_HPP_FUNDEF_Vertex3dv
typedef void (*PFNGLVERTEX3DVPROC_HPP)(const GLdouble *);
static inline void Vertex3dv(const GLdouble * v1)
{
	static PFNGLVERTEX3DVPROC_HPP fn=reinterpret_cast<PFNGLVERTEX3DVPROC_HPP>(_impl::_get_proc_address("glVertex3dv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Vertex3f
#define GL_HPP_FUNDEF_Vertex3f
typedef void (*PFNGLVERTEX3FPROC_HPP)(GLfloat,GLfloat,GLfloat);
static inline void Vertex3f(GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLVERTEX3FPROC_HPP fn=reinterpret_cast<PFNGLVERTEX3FPROC_HPP>(_impl::_get_proc_address("glVertex3f",3,1));
	 fn(x1,y1,z1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Vertex3fv
#define GL_HPP_FUNDEF_Vertex3fv
typedef void (*PFNGLVERTEX3FVPROC_HPP)(const GLfloat *);
static inline void Vertex3fv(const GLfloat * v1)
{
	static PFNGLVERTEX3FVPROC_HPP fn=reinterpret_cast<PFNGLVERTEX3FVPROC_HPP>(_impl::_get_proc_address("glVertex3fv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Vertex3i
#define GL_HPP_FUNDEF_Vertex3i
typedef void (*PFNGLVERTEX3IPROC_HPP)(GLint,GLint,GLint);
static inline void Vertex3i(GLint x1,GLint y1,GLint z1)
{
	static PFNGLVERTEX3IPROC_HPP fn=reinterpret_cast<PFNGLVERTEX3IPROC_HPP>(_impl::_get_proc_address("glVertex3i",3,1));
	 fn(x1,y1,z1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Vertex3iv
#define GL_HPP_FUNDEF_Vertex3iv
typedef void (*PFNGLVERTEX3IVPROC_HPP)(const GLint *);
static inline void Vertex3iv(const GLint * v1)
{
	static PFNGLVERTEX3IVPROC_HPP fn=reinterpret_cast<PFNGLVERTEX3IVPROC_HPP>(_impl::_get_proc_address("glVertex3iv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Vertex3s
#define GL_HPP_FUNDEF_Vertex3s
typedef void (*PFNGLVERTEX3SPROC_HPP)(GLshort,GLshort,GLshort);
static inline void Vertex3s(GLshort x1,GLshort y1,GLshort z1)
{
	static PFNGLVERTEX3SPROC_HPP fn=reinterpret_cast<PFNGLVERTEX3SPROC_HPP>(_impl::_get_proc_address("glVertex3s",3,1));
	 fn(x1,y1,z1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Vertex3sv
#define GL_HPP_FUNDEF_Vertex3sv
typedef void (*PFNGLVERTEX3SVPROC_HPP)(const GLshort *);
static inline void Vertex3sv(const GLshort * v1)
{
	static PFNGLVERTEX3SVPROC_HPP fn=reinterpret_cast<PFNGLVERTEX3SVPROC_HPP>(_impl::_get_proc_address("glVertex3sv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Vertex4d
#define GL_HPP_FUNDEF_Vertex4d
typedef void (*PFNGLVERTEX4DPROC_HPP)(GLdouble,GLdouble,GLdouble,GLdouble);
static inline void Vertex4d(GLdouble x1,GLdouble y1,GLdouble z1,GLdouble w1)
{
	static PFNGLVERTEX4DPROC_HPP fn=reinterpret_cast<PFNGLVERTEX4DPROC_HPP>(_impl::_get_proc_address("glVertex4d",3,1));
	 fn(x1,y1,z1,w1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Vertex4dv
#define GL_HPP_FUNDEF_Vertex4dv
typedef void (*PFNGLVERTEX4DVPROC_HPP)(const GLdouble *);
static inline void Vertex4dv(const GLdouble * v1)
{
	static PFNGLVERTEX4DVPROC_HPP fn=reinterpret_cast<PFNGLVERTEX4DVPROC_HPP>(_impl::_get_proc_address("glVertex4dv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Vertex4f
#define GL_HPP_FUNDEF_Vertex4f
typedef void (*PFNGLVERTEX4FPROC_HPP)(GLfloat,GLfloat,GLfloat,GLfloat);
static inline void Vertex4f(GLfloat x1,GLfloat y1,GLfloat z1,GLfloat w1)
{
	static PFNGLVERTEX4FPROC_HPP fn=reinterpret_cast<PFNGLVERTEX4FPROC_HPP>(_impl::_get_proc_address("glVertex4f",3,1));
	 fn(x1,y1,z1,w1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Vertex4fv
#define GL_HPP_FUNDEF_Vertex4fv
typedef void (*PFNGLVERTEX4FVPROC_HPP)(const GLfloat *);
static inline void Vertex4fv(const GLfloat * v1)
{
	static PFNGLVERTEX4FVPROC_HPP fn=reinterpret_cast<PFNGLVERTEX4FVPROC_HPP>(_impl::_get_proc_address("glVertex4fv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Vertex4i
#define GL_HPP_FUNDEF_Vertex4i
typedef void (*PFNGLVERTEX4IPROC_HPP)(GLint,GLint,GLint,GLint);
static inline void Vertex4i(GLint x1,GLint y1,GLint z1,GLint w1)
{
	static PFNGLVERTEX4IPROC_HPP fn=reinterpret_cast<PFNGLVERTEX4IPROC_HPP>(_impl::_get_proc_address("glVertex4i",3,1));
	 fn(x1,y1,z1,w1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Vertex4iv
#define GL_HPP_FUNDEF_Vertex4iv
typedef void (*PFNGLVERTEX4IVPROC_HPP)(const GLint *);
static inline void Vertex4iv(const GLint * v1)
{
	static PFNGLVERTEX4IVPROC_HPP fn=reinterpret_cast<PFNGLVERTEX4IVPROC_HPP>(_impl::_get_proc_address("glVertex4iv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Vertex4s
#define GL_HPP_FUNDEF_Vertex4s
typedef void (*PFNGLVERTEX4SPROC_HPP)(GLshort,GLshort,GLshort,GLshort);
static inline void Vertex4s(GLshort x1,GLshort y1,GLshort z1,GLshort w1)
{
	static PFNGLVERTEX4SPROC_HPP fn=reinterpret_cast<PFNGLVERTEX4SPROC_HPP>(_impl::_get_proc_address("glVertex4s",3,1));
	 fn(x1,y1,z1,w1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Vertex4sv
#define GL_HPP_FUNDEF_Vertex4sv
typedef void (*PFNGLVERTEX4SVPROC_HPP)(const GLshort *);
static inline void Vertex4sv(const GLshort * v1)
{
	static PFNGLVERTEX4SVPROC_HPP fn=reinterpret_cast<PFNGLVERTEX4SVPROC_HPP>(_impl::_get_proc_address("glVertex4sv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib1d
#define GL_HPP_FUNDEF_VertexAttrib1d
typedef void (*PFNGLVERTEXATTRIB1DPROC_HPP)(GLuint,GLdouble);
static inline void VertexAttrib1d(GLuint index1,GLdouble x1)
{
	static PFNGLVERTEXATTRIB1DPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB1DPROC_HPP>(_impl::_get_proc_address("glVertexAttrib1d",3,1));
	 fn(index1,x1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib1dv
#define GL_HPP_FUNDEF_VertexAttrib1dv
typedef void (*PFNGLVERTEXATTRIB1DVPROC_HPP)(GLuint,const GLdouble *);
static inline void VertexAttrib1dv(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIB1DVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB1DVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib1dv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib1f
#define GL_HPP_FUNDEF_VertexAttrib1f
typedef void (*PFNGLVERTEXATTRIB1FPROC_HPP)(GLuint,GLfloat);
static inline void VertexAttrib1f(GLuint index1,GLfloat x1)
{
	static PFNGLVERTEXATTRIB1FPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB1FPROC_HPP>(_impl::_get_proc_address("glVertexAttrib1f",3,1));
	 fn(index1,x1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib1fv
#define GL_HPP_FUNDEF_VertexAttrib1fv
typedef void (*PFNGLVERTEXATTRIB1FVPROC_HPP)(GLuint,const GLfloat *);
static inline void VertexAttrib1fv(GLuint index1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIB1FVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB1FVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib1fv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib1s
#define GL_HPP_FUNDEF_VertexAttrib1s
typedef void (*PFNGLVERTEXATTRIB1SPROC_HPP)(GLuint,GLshort);
static inline void VertexAttrib1s(GLuint index1,GLshort x1)
{
	static PFNGLVERTEXATTRIB1SPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB1SPROC_HPP>(_impl::_get_proc_address("glVertexAttrib1s",3,1));
	 fn(index1,x1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib1sv
#define GL_HPP_FUNDEF_VertexAttrib1sv
typedef void (*PFNGLVERTEXATTRIB1SVPROC_HPP)(GLuint,const GLshort *);
static inline void VertexAttrib1sv(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIB1SVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB1SVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib1sv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib2d
#define GL_HPP_FUNDEF_VertexAttrib2d
typedef void (*PFNGLVERTEXATTRIB2DPROC_HPP)(GLuint,GLdouble,GLdouble);
static inline void VertexAttrib2d(GLuint index1,GLdouble x1,GLdouble y1)
{
	static PFNGLVERTEXATTRIB2DPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB2DPROC_HPP>(_impl::_get_proc_address("glVertexAttrib2d",3,1));
	 fn(index1,x1,y1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib2dv
#define GL_HPP_FUNDEF_VertexAttrib2dv
typedef void (*PFNGLVERTEXATTRIB2DVPROC_HPP)(GLuint,const GLdouble *);
static inline void VertexAttrib2dv(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIB2DVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB2DVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib2dv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib2f
#define GL_HPP_FUNDEF_VertexAttrib2f
typedef void (*PFNGLVERTEXATTRIB2FPROC_HPP)(GLuint,GLfloat,GLfloat);
static inline void VertexAttrib2f(GLuint index1,GLfloat x1,GLfloat y1)
{
	static PFNGLVERTEXATTRIB2FPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB2FPROC_HPP>(_impl::_get_proc_address("glVertexAttrib2f",3,1));
	 fn(index1,x1,y1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib2fv
#define GL_HPP_FUNDEF_VertexAttrib2fv
typedef void (*PFNGLVERTEXATTRIB2FVPROC_HPP)(GLuint,const GLfloat *);
static inline void VertexAttrib2fv(GLuint index1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIB2FVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB2FVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib2fv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib2s
#define GL_HPP_FUNDEF_VertexAttrib2s
typedef void (*PFNGLVERTEXATTRIB2SPROC_HPP)(GLuint,GLshort,GLshort);
static inline void VertexAttrib2s(GLuint index1,GLshort x1,GLshort y1)
{
	static PFNGLVERTEXATTRIB2SPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB2SPROC_HPP>(_impl::_get_proc_address("glVertexAttrib2s",3,1));
	 fn(index1,x1,y1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib2sv
#define GL_HPP_FUNDEF_VertexAttrib2sv
typedef void (*PFNGLVERTEXATTRIB2SVPROC_HPP)(GLuint,const GLshort *);
static inline void VertexAttrib2sv(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIB2SVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB2SVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib2sv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib3d
#define GL_HPP_FUNDEF_VertexAttrib3d
typedef void (*PFNGLVERTEXATTRIB3DPROC_HPP)(GLuint,GLdouble,GLdouble,GLdouble);
static inline void VertexAttrib3d(GLuint index1,GLdouble x1,GLdouble y1,GLdouble z1)
{
	static PFNGLVERTEXATTRIB3DPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB3DPROC_HPP>(_impl::_get_proc_address("glVertexAttrib3d",3,1));
	 fn(index1,x1,y1,z1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib3dv
#define GL_HPP_FUNDEF_VertexAttrib3dv
typedef void (*PFNGLVERTEXATTRIB3DVPROC_HPP)(GLuint,const GLdouble *);
static inline void VertexAttrib3dv(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIB3DVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB3DVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib3dv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib3f
#define GL_HPP_FUNDEF_VertexAttrib3f
typedef void (*PFNGLVERTEXATTRIB3FPROC_HPP)(GLuint,GLfloat,GLfloat,GLfloat);
static inline void VertexAttrib3f(GLuint index1,GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLVERTEXATTRIB3FPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB3FPROC_HPP>(_impl::_get_proc_address("glVertexAttrib3f",3,1));
	 fn(index1,x1,y1,z1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib3fv
#define GL_HPP_FUNDEF_VertexAttrib3fv
typedef void (*PFNGLVERTEXATTRIB3FVPROC_HPP)(GLuint,const GLfloat *);
static inline void VertexAttrib3fv(GLuint index1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIB3FVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB3FVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib3fv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib3s
#define GL_HPP_FUNDEF_VertexAttrib3s
typedef void (*PFNGLVERTEXATTRIB3SPROC_HPP)(GLuint,GLshort,GLshort,GLshort);
static inline void VertexAttrib3s(GLuint index1,GLshort x1,GLshort y1,GLshort z1)
{
	static PFNGLVERTEXATTRIB3SPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB3SPROC_HPP>(_impl::_get_proc_address("glVertexAttrib3s",3,1));
	 fn(index1,x1,y1,z1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib3sv
#define GL_HPP_FUNDEF_VertexAttrib3sv
typedef void (*PFNGLVERTEXATTRIB3SVPROC_HPP)(GLuint,const GLshort *);
static inline void VertexAttrib3sv(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIB3SVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB3SVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib3sv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4Nbv
#define GL_HPP_FUNDEF_VertexAttrib4Nbv
typedef void (*PFNGLVERTEXATTRIB4NBVPROC_HPP)(GLuint,const GLbyte *);
static inline void VertexAttrib4Nbv(GLuint index1,const GLbyte * v1)
{
	static PFNGLVERTEXATTRIB4NBVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4NBVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4Nbv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4Niv
#define GL_HPP_FUNDEF_VertexAttrib4Niv
typedef void (*PFNGLVERTEXATTRIB4NIVPROC_HPP)(GLuint,const GLint *);
static inline void VertexAttrib4Niv(GLuint index1,const GLint * v1)
{
	static PFNGLVERTEXATTRIB4NIVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4NIVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4Niv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4Nsv
#define GL_HPP_FUNDEF_VertexAttrib4Nsv
typedef void (*PFNGLVERTEXATTRIB4NSVPROC_HPP)(GLuint,const GLshort *);
static inline void VertexAttrib4Nsv(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIB4NSVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4NSVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4Nsv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4Nub
#define GL_HPP_FUNDEF_VertexAttrib4Nub
typedef void (*PFNGLVERTEXATTRIB4NUBPROC_HPP)(GLuint,GLubyte,GLubyte,GLubyte,GLubyte);
static inline void VertexAttrib4Nub(GLuint index1,GLubyte x1,GLubyte y1,GLubyte z1,GLubyte w1)
{
	static PFNGLVERTEXATTRIB4NUBPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4NUBPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4Nub",3,1));
	 fn(index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4Nubv
#define GL_HPP_FUNDEF_VertexAttrib4Nubv
typedef void (*PFNGLVERTEXATTRIB4NUBVPROC_HPP)(GLuint,const GLubyte *);
static inline void VertexAttrib4Nubv(GLuint index1,const GLubyte * v1)
{
	static PFNGLVERTEXATTRIB4NUBVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4NUBVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4Nubv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4Nuiv
#define GL_HPP_FUNDEF_VertexAttrib4Nuiv
typedef void (*PFNGLVERTEXATTRIB4NUIVPROC_HPP)(GLuint,const GLuint *);
static inline void VertexAttrib4Nuiv(GLuint index1,const GLuint * v1)
{
	static PFNGLVERTEXATTRIB4NUIVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4NUIVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4Nuiv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4Nusv
#define GL_HPP_FUNDEF_VertexAttrib4Nusv
typedef void (*PFNGLVERTEXATTRIB4NUSVPROC_HPP)(GLuint,const GLushort *);
static inline void VertexAttrib4Nusv(GLuint index1,const GLushort * v1)
{
	static PFNGLVERTEXATTRIB4NUSVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4NUSVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4Nusv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4bv
#define GL_HPP_FUNDEF_VertexAttrib4bv
typedef void (*PFNGLVERTEXATTRIB4BVPROC_HPP)(GLuint,const GLbyte *);
static inline void VertexAttrib4bv(GLuint index1,const GLbyte * v1)
{
	static PFNGLVERTEXATTRIB4BVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4BVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4bv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4d
#define GL_HPP_FUNDEF_VertexAttrib4d
typedef void (*PFNGLVERTEXATTRIB4DPROC_HPP)(GLuint,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void VertexAttrib4d(GLuint index1,GLdouble x1,GLdouble y1,GLdouble z1,GLdouble w1)
{
	static PFNGLVERTEXATTRIB4DPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4DPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4d",3,1));
	 fn(index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4dv
#define GL_HPP_FUNDEF_VertexAttrib4dv
typedef void (*PFNGLVERTEXATTRIB4DVPROC_HPP)(GLuint,const GLdouble *);
static inline void VertexAttrib4dv(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIB4DVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4DVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4dv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4f
#define GL_HPP_FUNDEF_VertexAttrib4f
typedef void (*PFNGLVERTEXATTRIB4FPROC_HPP)(GLuint,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void VertexAttrib4f(GLuint index1,GLfloat x1,GLfloat y1,GLfloat z1,GLfloat w1)
{
	static PFNGLVERTEXATTRIB4FPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4FPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4f",3,1));
	 fn(index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4fv
#define GL_HPP_FUNDEF_VertexAttrib4fv
typedef void (*PFNGLVERTEXATTRIB4FVPROC_HPP)(GLuint,const GLfloat *);
static inline void VertexAttrib4fv(GLuint index1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIB4FVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4FVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4fv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4iv
#define GL_HPP_FUNDEF_VertexAttrib4iv
typedef void (*PFNGLVERTEXATTRIB4IVPROC_HPP)(GLuint,const GLint *);
static inline void VertexAttrib4iv(GLuint index1,const GLint * v1)
{
	static PFNGLVERTEXATTRIB4IVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4IVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4iv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4s
#define GL_HPP_FUNDEF_VertexAttrib4s
typedef void (*PFNGLVERTEXATTRIB4SPROC_HPP)(GLuint,GLshort,GLshort,GLshort,GLshort);
static inline void VertexAttrib4s(GLuint index1,GLshort x1,GLshort y1,GLshort z1,GLshort w1)
{
	static PFNGLVERTEXATTRIB4SPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4SPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4s",3,1));
	 fn(index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4sv
#define GL_HPP_FUNDEF_VertexAttrib4sv
typedef void (*PFNGLVERTEXATTRIB4SVPROC_HPP)(GLuint,const GLshort *);
static inline void VertexAttrib4sv(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIB4SVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4SVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4sv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4ubv
#define GL_HPP_FUNDEF_VertexAttrib4ubv
typedef void (*PFNGLVERTEXATTRIB4UBVPROC_HPP)(GLuint,const GLubyte *);
static inline void VertexAttrib4ubv(GLuint index1,const GLubyte * v1)
{
	static PFNGLVERTEXATTRIB4UBVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4UBVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4ubv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4uiv
#define GL_HPP_FUNDEF_VertexAttrib4uiv
typedef void (*PFNGLVERTEXATTRIB4UIVPROC_HPP)(GLuint,const GLuint *);
static inline void VertexAttrib4uiv(GLuint index1,const GLuint * v1)
{
	static PFNGLVERTEXATTRIB4UIVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4UIVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4uiv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttrib4usv
#define GL_HPP_FUNDEF_VertexAttrib4usv
typedef void (*PFNGLVERTEXATTRIB4USVPROC_HPP)(GLuint,const GLushort *);
static inline void VertexAttrib4usv(GLuint index1,const GLushort * v1)
{
	static PFNGLVERTEXATTRIB4USVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIB4USVPROC_HPP>(_impl::_get_proc_address("glVertexAttrib4usv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI1i
#define GL_HPP_FUNDEF_VertexAttribI1i
typedef void (*PFNGLVERTEXATTRIBI1IPROC_HPP)(GLuint,GLint);
static inline void VertexAttribI1i(GLuint index1,GLint x1)
{
	static PFNGLVERTEXATTRIBI1IPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI1IPROC_HPP>(_impl::_get_proc_address("glVertexAttribI1i",3,1));
	 fn(index1,x1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI1iv
#define GL_HPP_FUNDEF_VertexAttribI1iv
typedef void (*PFNGLVERTEXATTRIBI1IVPROC_HPP)(GLuint,const GLint *);
static inline void VertexAttribI1iv(GLuint index1,const GLint * v1)
{
	static PFNGLVERTEXATTRIBI1IVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI1IVPROC_HPP>(_impl::_get_proc_address("glVertexAttribI1iv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI1ui
#define GL_HPP_FUNDEF_VertexAttribI1ui
typedef void (*PFNGLVERTEXATTRIBI1UIPROC_HPP)(GLuint,GLuint);
static inline void VertexAttribI1ui(GLuint index1,GLuint x1)
{
	static PFNGLVERTEXATTRIBI1UIPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI1UIPROC_HPP>(_impl::_get_proc_address("glVertexAttribI1ui",3,1));
	 fn(index1,x1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI1uiv
#define GL_HPP_FUNDEF_VertexAttribI1uiv
typedef void (*PFNGLVERTEXATTRIBI1UIVPROC_HPP)(GLuint,const GLuint *);
static inline void VertexAttribI1uiv(GLuint index1,const GLuint * v1)
{
	static PFNGLVERTEXATTRIBI1UIVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI1UIVPROC_HPP>(_impl::_get_proc_address("glVertexAttribI1uiv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI2i
#define GL_HPP_FUNDEF_VertexAttribI2i
typedef void (*PFNGLVERTEXATTRIBI2IPROC_HPP)(GLuint,GLint,GLint);
static inline void VertexAttribI2i(GLuint index1,GLint x1,GLint y1)
{
	static PFNGLVERTEXATTRIBI2IPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI2IPROC_HPP>(_impl::_get_proc_address("glVertexAttribI2i",3,1));
	 fn(index1,x1,y1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI2iv
#define GL_HPP_FUNDEF_VertexAttribI2iv
typedef void (*PFNGLVERTEXATTRIBI2IVPROC_HPP)(GLuint,const GLint *);
static inline void VertexAttribI2iv(GLuint index1,const GLint * v1)
{
	static PFNGLVERTEXATTRIBI2IVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI2IVPROC_HPP>(_impl::_get_proc_address("glVertexAttribI2iv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI2ui
#define GL_HPP_FUNDEF_VertexAttribI2ui
typedef void (*PFNGLVERTEXATTRIBI2UIPROC_HPP)(GLuint,GLuint,GLuint);
static inline void VertexAttribI2ui(GLuint index1,GLuint x1,GLuint y1)
{
	static PFNGLVERTEXATTRIBI2UIPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI2UIPROC_HPP>(_impl::_get_proc_address("glVertexAttribI2ui",3,1));
	 fn(index1,x1,y1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI2uiv
#define GL_HPP_FUNDEF_VertexAttribI2uiv
typedef void (*PFNGLVERTEXATTRIBI2UIVPROC_HPP)(GLuint,const GLuint *);
static inline void VertexAttribI2uiv(GLuint index1,const GLuint * v1)
{
	static PFNGLVERTEXATTRIBI2UIVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI2UIVPROC_HPP>(_impl::_get_proc_address("glVertexAttribI2uiv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI3i
#define GL_HPP_FUNDEF_VertexAttribI3i
typedef void (*PFNGLVERTEXATTRIBI3IPROC_HPP)(GLuint,GLint,GLint,GLint);
static inline void VertexAttribI3i(GLuint index1,GLint x1,GLint y1,GLint z1)
{
	static PFNGLVERTEXATTRIBI3IPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI3IPROC_HPP>(_impl::_get_proc_address("glVertexAttribI3i",3,1));
	 fn(index1,x1,y1,z1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI3iv
#define GL_HPP_FUNDEF_VertexAttribI3iv
typedef void (*PFNGLVERTEXATTRIBI3IVPROC_HPP)(GLuint,const GLint *);
static inline void VertexAttribI3iv(GLuint index1,const GLint * v1)
{
	static PFNGLVERTEXATTRIBI3IVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI3IVPROC_HPP>(_impl::_get_proc_address("glVertexAttribI3iv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI3ui
#define GL_HPP_FUNDEF_VertexAttribI3ui
typedef void (*PFNGLVERTEXATTRIBI3UIPROC_HPP)(GLuint,GLuint,GLuint,GLuint);
static inline void VertexAttribI3ui(GLuint index1,GLuint x1,GLuint y1,GLuint z1)
{
	static PFNGLVERTEXATTRIBI3UIPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI3UIPROC_HPP>(_impl::_get_proc_address("glVertexAttribI3ui",3,1));
	 fn(index1,x1,y1,z1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI3uiv
#define GL_HPP_FUNDEF_VertexAttribI3uiv
typedef void (*PFNGLVERTEXATTRIBI3UIVPROC_HPP)(GLuint,const GLuint *);
static inline void VertexAttribI3uiv(GLuint index1,const GLuint * v1)
{
	static PFNGLVERTEXATTRIBI3UIVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI3UIVPROC_HPP>(_impl::_get_proc_address("glVertexAttribI3uiv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI4bv
#define GL_HPP_FUNDEF_VertexAttribI4bv
typedef void (*PFNGLVERTEXATTRIBI4BVPROC_HPP)(GLuint,const GLbyte *);
static inline void VertexAttribI4bv(GLuint index1,const GLbyte * v1)
{
	static PFNGLVERTEXATTRIBI4BVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI4BVPROC_HPP>(_impl::_get_proc_address("glVertexAttribI4bv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI4i
#define GL_HPP_FUNDEF_VertexAttribI4i
typedef void (*PFNGLVERTEXATTRIBI4IPROC_HPP)(GLuint,GLint,GLint,GLint,GLint);
static inline void VertexAttribI4i(GLuint index1,GLint x1,GLint y1,GLint z1,GLint w1)
{
	static PFNGLVERTEXATTRIBI4IPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI4IPROC_HPP>(_impl::_get_proc_address("glVertexAttribI4i",3,1));
	 fn(index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI4iv
#define GL_HPP_FUNDEF_VertexAttribI4iv
typedef void (*PFNGLVERTEXATTRIBI4IVPROC_HPP)(GLuint,const GLint *);
static inline void VertexAttribI4iv(GLuint index1,const GLint * v1)
{
	static PFNGLVERTEXATTRIBI4IVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI4IVPROC_HPP>(_impl::_get_proc_address("glVertexAttribI4iv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI4sv
#define GL_HPP_FUNDEF_VertexAttribI4sv
typedef void (*PFNGLVERTEXATTRIBI4SVPROC_HPP)(GLuint,const GLshort *);
static inline void VertexAttribI4sv(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIBI4SVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI4SVPROC_HPP>(_impl::_get_proc_address("glVertexAttribI4sv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI4ubv
#define GL_HPP_FUNDEF_VertexAttribI4ubv
typedef void (*PFNGLVERTEXATTRIBI4UBVPROC_HPP)(GLuint,const GLubyte *);
static inline void VertexAttribI4ubv(GLuint index1,const GLubyte * v1)
{
	static PFNGLVERTEXATTRIBI4UBVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI4UBVPROC_HPP>(_impl::_get_proc_address("glVertexAttribI4ubv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI4ui
#define GL_HPP_FUNDEF_VertexAttribI4ui
typedef void (*PFNGLVERTEXATTRIBI4UIPROC_HPP)(GLuint,GLuint,GLuint,GLuint,GLuint);
static inline void VertexAttribI4ui(GLuint index1,GLuint x1,GLuint y1,GLuint z1,GLuint w1)
{
	static PFNGLVERTEXATTRIBI4UIPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI4UIPROC_HPP>(_impl::_get_proc_address("glVertexAttribI4ui",3,1));
	 fn(index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI4uiv
#define GL_HPP_FUNDEF_VertexAttribI4uiv
typedef void (*PFNGLVERTEXATTRIBI4UIVPROC_HPP)(GLuint,const GLuint *);
static inline void VertexAttribI4uiv(GLuint index1,const GLuint * v1)
{
	static PFNGLVERTEXATTRIBI4UIVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI4UIVPROC_HPP>(_impl::_get_proc_address("glVertexAttribI4uiv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribI4usv
#define GL_HPP_FUNDEF_VertexAttribI4usv
typedef void (*PFNGLVERTEXATTRIBI4USVPROC_HPP)(GLuint,const GLushort *);
static inline void VertexAttribI4usv(GLuint index1,const GLushort * v1)
{
	static PFNGLVERTEXATTRIBI4USVPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBI4USVPROC_HPP>(_impl::_get_proc_address("glVertexAttribI4usv",3,1));
	 fn(index1,v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribIPointer
#define GL_HPP_FUNDEF_VertexAttribIPointer
typedef void (*PFNGLVERTEXATTRIBIPOINTERPROC_HPP)(GLuint,GLint,GLenum,GLsizei,const void *);
static inline void VertexAttribIPointer(GLuint index1,GLint size1,GLenum type1,GLsizei stride1,const void * pointer1)
{
	static PFNGLVERTEXATTRIBIPOINTERPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBIPOINTERPROC_HPP>(_impl::_get_proc_address("glVertexAttribIPointer",3,1));
	 fn(index1,size1,type1,stride1,pointer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexAttribPointer
#define GL_HPP_FUNDEF_VertexAttribPointer
typedef void (*PFNGLVERTEXATTRIBPOINTERPROC_HPP)(GLuint,GLint,GLenum,GLboolean,GLsizei,const void *);
static inline void VertexAttribPointer(GLuint index1,GLint size1,GLenum type1,GLboolean normalized1,GLsizei stride1,const void * pointer1)
{
	static PFNGLVERTEXATTRIBPOINTERPROC_HPP fn=reinterpret_cast<PFNGLVERTEXATTRIBPOINTERPROC_HPP>(_impl::_get_proc_address("glVertexAttribPointer",3,1));
	 fn(index1,size1,type1,normalized1,stride1,pointer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_VertexPointer
#define GL_HPP_FUNDEF_VertexPointer
typedef void (*PFNGLVERTEXPOINTERPROC_HPP)(GLint,GLenum,GLsizei,const void *);
static inline void VertexPointer(GLint size1,GLenum type1,GLsizei stride1,const void * pointer1)
{
	static PFNGLVERTEXPOINTERPROC_HPP fn=reinterpret_cast<PFNGLVERTEXPOINTERPROC_HPP>(_impl::_get_proc_address("glVertexPointer",3,1));
	 fn(size1,type1,stride1,pointer1);
}
#endif

#ifndef	GL_HPP_FUNDEF_Viewport
#define GL_HPP_FUNDEF_Viewport
typedef void (*PFNGLVIEWPORTPROC_HPP)(GLint,GLint,GLsizei,GLsizei);
static inline void Viewport(GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
	static PFNGLVIEWPORTPROC_HPP fn=reinterpret_cast<PFNGLVIEWPORTPROC_HPP>(_impl::_get_proc_address("glViewport",3,1));
	 fn(x1,y1,width1,height1);
}
#endif

#ifndef	GL_HPP_FUNDEF_WindowPos2d
#define GL_HPP_FUNDEF_WindowPos2d
typedef void (*PFNGLWINDOWPOS2DPROC_HPP)(GLdouble,GLdouble);
static inline void WindowPos2d(GLdouble x1,GLdouble y1)
{
	static PFNGLWINDOWPOS2DPROC_HPP fn=reinterpret_cast<PFNGLWINDOWPOS2DPROC_HPP>(_impl::_get_proc_address("glWindowPos2d",3,1));
	 fn(x1,y1);
}
#endif

#ifndef	GL_HPP_FUNDEF_WindowPos2dv
#define GL_HPP_FUNDEF_WindowPos2dv
typedef void (*PFNGLWINDOWPOS2DVPROC_HPP)(const GLdouble *);
static inline void WindowPos2dv(const GLdouble * v1)
{
	static PFNGLWINDOWPOS2DVPROC_HPP fn=reinterpret_cast<PFNGLWINDOWPOS2DVPROC_HPP>(_impl::_get_proc_address("glWindowPos2dv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_WindowPos2f
#define GL_HPP_FUNDEF_WindowPos2f
typedef void (*PFNGLWINDOWPOS2FPROC_HPP)(GLfloat,GLfloat);
static inline void WindowPos2f(GLfloat x1,GLfloat y1)
{
	static PFNGLWINDOWPOS2FPROC_HPP fn=reinterpret_cast<PFNGLWINDOWPOS2FPROC_HPP>(_impl::_get_proc_address("glWindowPos2f",3,1));
	 fn(x1,y1);
}
#endif

#ifndef	GL_HPP_FUNDEF_WindowPos2fv
#define GL_HPP_FUNDEF_WindowPos2fv
typedef void (*PFNGLWINDOWPOS2FVPROC_HPP)(const GLfloat *);
static inline void WindowPos2fv(const GLfloat * v1)
{
	static PFNGLWINDOWPOS2FVPROC_HPP fn=reinterpret_cast<PFNGLWINDOWPOS2FVPROC_HPP>(_impl::_get_proc_address("glWindowPos2fv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_WindowPos2i
#define GL_HPP_FUNDEF_WindowPos2i
typedef void (*PFNGLWINDOWPOS2IPROC_HPP)(GLint,GLint);
static inline void WindowPos2i(GLint x1,GLint y1)
{
	static PFNGLWINDOWPOS2IPROC_HPP fn=reinterpret_cast<PFNGLWINDOWPOS2IPROC_HPP>(_impl::_get_proc_address("glWindowPos2i",3,1));
	 fn(x1,y1);
}
#endif

#ifndef	GL_HPP_FUNDEF_WindowPos2iv
#define GL_HPP_FUNDEF_WindowPos2iv
typedef void (*PFNGLWINDOWPOS2IVPROC_HPP)(const GLint *);
static inline void WindowPos2iv(const GLint * v1)
{
	static PFNGLWINDOWPOS2IVPROC_HPP fn=reinterpret_cast<PFNGLWINDOWPOS2IVPROC_HPP>(_impl::_get_proc_address("glWindowPos2iv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_WindowPos2s
#define GL_HPP_FUNDEF_WindowPos2s
typedef void (*PFNGLWINDOWPOS2SPROC_HPP)(GLshort,GLshort);
static inline void WindowPos2s(GLshort x1,GLshort y1)
{
	static PFNGLWINDOWPOS2SPROC_HPP fn=reinterpret_cast<PFNGLWINDOWPOS2SPROC_HPP>(_impl::_get_proc_address("glWindowPos2s",3,1));
	 fn(x1,y1);
}
#endif

#ifndef	GL_HPP_FUNDEF_WindowPos2sv
#define GL_HPP_FUNDEF_WindowPos2sv
typedef void (*PFNGLWINDOWPOS2SVPROC_HPP)(const GLshort *);
static inline void WindowPos2sv(const GLshort * v1)
{
	static PFNGLWINDOWPOS2SVPROC_HPP fn=reinterpret_cast<PFNGLWINDOWPOS2SVPROC_HPP>(_impl::_get_proc_address("glWindowPos2sv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_WindowPos3d
#define GL_HPP_FUNDEF_WindowPos3d
typedef void (*PFNGLWINDOWPOS3DPROC_HPP)(GLdouble,GLdouble,GLdouble);
static inline void WindowPos3d(GLdouble x1,GLdouble y1,GLdouble z1)
{
	static PFNGLWINDOWPOS3DPROC_HPP fn=reinterpret_cast<PFNGLWINDOWPOS3DPROC_HPP>(_impl::_get_proc_address("glWindowPos3d",3,1));
	 fn(x1,y1,z1);
}
#endif

#ifndef	GL_HPP_FUNDEF_WindowPos3dv
#define GL_HPP_FUNDEF_WindowPos3dv
typedef void (*PFNGLWINDOWPOS3DVPROC_HPP)(const GLdouble *);
static inline void WindowPos3dv(const GLdouble * v1)
{
	static PFNGLWINDOWPOS3DVPROC_HPP fn=reinterpret_cast<PFNGLWINDOWPOS3DVPROC_HPP>(_impl::_get_proc_address("glWindowPos3dv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_WindowPos3f
#define GL_HPP_FUNDEF_WindowPos3f
typedef void (*PFNGLWINDOWPOS3FPROC_HPP)(GLfloat,GLfloat,GLfloat);
static inline void WindowPos3f(GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLWINDOWPOS3FPROC_HPP fn=reinterpret_cast<PFNGLWINDOWPOS3FPROC_HPP>(_impl::_get_proc_address("glWindowPos3f",3,1));
	 fn(x1,y1,z1);
}
#endif

#ifndef	GL_HPP_FUNDEF_WindowPos3fv
#define GL_HPP_FUNDEF_WindowPos3fv
typedef void (*PFNGLWINDOWPOS3FVPROC_HPP)(const GLfloat *);
static inline void WindowPos3fv(const GLfloat * v1)
{
	static PFNGLWINDOWPOS3FVPROC_HPP fn=reinterpret_cast<PFNGLWINDOWPOS3FVPROC_HPP>(_impl::_get_proc_address("glWindowPos3fv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_WindowPos3i
#define GL_HPP_FUNDEF_WindowPos3i
typedef void (*PFNGLWINDOWPOS3IPROC_HPP)(GLint,GLint,GLint);
static inline void WindowPos3i(GLint x1,GLint y1,GLint z1)
{
	static PFNGLWINDOWPOS3IPROC_HPP fn=reinterpret_cast<PFNGLWINDOWPOS3IPROC_HPP>(_impl::_get_proc_address("glWindowPos3i",3,1));
	 fn(x1,y1,z1);
}
#endif

#ifndef	GL_HPP_FUNDEF_WindowPos3iv
#define GL_HPP_FUNDEF_WindowPos3iv
typedef void (*PFNGLWINDOWPOS3IVPROC_HPP)(const GLint *);
static inline void WindowPos3iv(const GLint * v1)
{
	static PFNGLWINDOWPOS3IVPROC_HPP fn=reinterpret_cast<PFNGLWINDOWPOS3IVPROC_HPP>(_impl::_get_proc_address("glWindowPos3iv",3,1));
	 fn(v1);
}
#endif

#ifndef	GL_HPP_FUNDEF_WindowPos3s
#define GL_HPP_FUNDEF_WindowPos3s
typedef void (*PFNGLWINDOWPOS3SPROC_HPP)(GLshort,GLshort,GLshort);
static inline void WindowPos3s(GLshort x1,GLshort y1,GLshort z1)
{
	static PFNGLWINDOWPOS3SPROC_HPP fn=reinterpret_cast<PFNGLWINDOWPOS3SPROC_HPP>(_impl::_get_proc_address("glWindowPos3s",3,1));
	 fn(x1,y1,z1);
}
#endif

#ifndef	GL_HPP_FUNDEF_WindowPos3sv
#define GL_HPP_FUNDEF_WindowPos3sv
typedef void (*PFNGLWINDOWPOS3SVPROC_HPP)(const GLshort *);
static inline void WindowPos3sv(const GLshort * v1)
{
	static PFNGLWINDOWPOS3SVPROC_HPP fn=reinterpret_cast<PFNGLWINDOWPOS3SVPROC_HPP>(_impl::_get_proc_address("glWindowPos3sv",3,1));
	 fn(v1);
}
#endif
}
#endif
