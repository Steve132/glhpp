#ifndef GL_PROC_GL_VERSION_1_1_HPP
#define GL_PROC_GL_VERSION_1_1_HPP
#include "common.hpp"


#ifndef GL_NO_ERROR
#define GL_NO_ERROR 0
#endif //GL_NO_ERROR
#ifndef GL_FALSE
#define GL_FALSE 0
#endif //GL_FALSE
#ifndef GL_NONE
#define GL_NONE 0
#endif //GL_NONE
#ifndef GL_ZERO
#define GL_ZERO 0
#endif //GL_ZERO
#ifndef GL_POINTS
#define GL_POINTS 0x0000
#endif //GL_POINTS
#ifndef GL_CURRENT_BIT
#define GL_CURRENT_BIT 0x00000001
#endif //GL_CURRENT_BIT
#ifndef GL_CLIENT_PIXEL_STORE_BIT
#define GL_CLIENT_PIXEL_STORE_BIT 0x00000001
#endif //GL_CLIENT_PIXEL_STORE_BIT
#ifndef GL_POINT_BIT
#define GL_POINT_BIT 0x00000002
#endif //GL_POINT_BIT
#ifndef GL_CLIENT_VERTEX_ARRAY_BIT
#define GL_CLIENT_VERTEX_ARRAY_BIT 0x00000002
#endif //GL_CLIENT_VERTEX_ARRAY_BIT
#ifndef GL_LINE_BIT
#define GL_LINE_BIT 0x00000004
#endif //GL_LINE_BIT
#ifndef GL_POLYGON_BIT
#define GL_POLYGON_BIT 0x00000008
#endif //GL_POLYGON_BIT
#ifndef GL_POLYGON_STIPPLE_BIT
#define GL_POLYGON_STIPPLE_BIT 0x00000010
#endif //GL_POLYGON_STIPPLE_BIT
#ifndef GL_PIXEL_MODE_BIT
#define GL_PIXEL_MODE_BIT 0x00000020
#endif //GL_PIXEL_MODE_BIT
#ifndef GL_LIGHTING_BIT
#define GL_LIGHTING_BIT 0x00000040
#endif //GL_LIGHTING_BIT
#ifndef GL_FOG_BIT
#define GL_FOG_BIT 0x00000080
#endif //GL_FOG_BIT
#ifndef GL_DEPTH_BUFFER_BIT
#define GL_DEPTH_BUFFER_BIT 0x00000100
#endif //GL_DEPTH_BUFFER_BIT
#ifndef GL_ACCUM_BUFFER_BIT
#define GL_ACCUM_BUFFER_BIT 0x00000200
#endif //GL_ACCUM_BUFFER_BIT
#ifndef GL_STENCIL_BUFFER_BIT
#define GL_STENCIL_BUFFER_BIT 0x00000400
#endif //GL_STENCIL_BUFFER_BIT
#ifndef GL_VIEWPORT_BIT
#define GL_VIEWPORT_BIT 0x00000800
#endif //GL_VIEWPORT_BIT
#ifndef GL_TRANSFORM_BIT
#define GL_TRANSFORM_BIT 0x00001000
#endif //GL_TRANSFORM_BIT
#ifndef GL_ENABLE_BIT
#define GL_ENABLE_BIT 0x00002000
#endif //GL_ENABLE_BIT
#ifndef GL_COLOR_BUFFER_BIT
#define GL_COLOR_BUFFER_BIT 0x00004000
#endif //GL_COLOR_BUFFER_BIT
#ifndef GL_HINT_BIT
#define GL_HINT_BIT 0x00008000
#endif //GL_HINT_BIT
#ifndef GL_LINES
#define GL_LINES 0x0001
#endif //GL_LINES
#ifndef GL_EVAL_BIT
#define GL_EVAL_BIT 0x00010000
#endif //GL_EVAL_BIT
#ifndef GL_LINE_LOOP
#define GL_LINE_LOOP 0x0002
#endif //GL_LINE_LOOP
#ifndef GL_LIST_BIT
#define GL_LIST_BIT 0x00020000
#endif //GL_LIST_BIT
#ifndef GL_LINE_STRIP
#define GL_LINE_STRIP 0x0003
#endif //GL_LINE_STRIP
#ifndef GL_TRIANGLES
#define GL_TRIANGLES 0x0004
#endif //GL_TRIANGLES
#ifndef GL_TEXTURE_BIT
#define GL_TEXTURE_BIT 0x00040000
#endif //GL_TEXTURE_BIT
#ifndef GL_TRIANGLE_STRIP
#define GL_TRIANGLE_STRIP 0x0005
#endif //GL_TRIANGLE_STRIP
#ifndef GL_TRIANGLE_FAN
#define GL_TRIANGLE_FAN 0x0006
#endif //GL_TRIANGLE_FAN
#ifndef GL_QUADS
#define GL_QUADS 0x0007
#endif //GL_QUADS
#ifndef GL_QUAD_STRIP
#define GL_QUAD_STRIP 0x0008
#endif //GL_QUAD_STRIP
#ifndef GL_SCISSOR_BIT
#define GL_SCISSOR_BIT 0x00080000
#endif //GL_SCISSOR_BIT
#ifndef GL_POLYGON
#define GL_POLYGON 0x0009
#endif //GL_POLYGON
#ifndef GL_ACCUM
#define GL_ACCUM 0x0100
#endif //GL_ACCUM
#ifndef GL_LOAD
#define GL_LOAD 0x0101
#endif //GL_LOAD
#ifndef GL_RETURN
#define GL_RETURN 0x0102
#endif //GL_RETURN
#ifndef GL_MULT
#define GL_MULT 0x0103
#endif //GL_MULT
#ifndef GL_ADD
#define GL_ADD 0x0104
#endif //GL_ADD
#ifndef GL_NEVER
#define GL_NEVER 0x0200
#endif //GL_NEVER
#ifndef GL_LESS
#define GL_LESS 0x0201
#endif //GL_LESS
#ifndef GL_EQUAL
#define GL_EQUAL 0x0202
#endif //GL_EQUAL
#ifndef GL_LEQUAL
#define GL_LEQUAL 0x0203
#endif //GL_LEQUAL
#ifndef GL_GREATER
#define GL_GREATER 0x0204
#endif //GL_GREATER
#ifndef GL_NOTEQUAL
#define GL_NOTEQUAL 0x0205
#endif //GL_NOTEQUAL
#ifndef GL_GEQUAL
#define GL_GEQUAL 0x0206
#endif //GL_GEQUAL
#ifndef GL_ALWAYS
#define GL_ALWAYS 0x0207
#endif //GL_ALWAYS
#ifndef GL_SRC_COLOR
#define GL_SRC_COLOR 0x0300
#endif //GL_SRC_COLOR
#ifndef GL_ONE_MINUS_SRC_COLOR
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#endif //GL_ONE_MINUS_SRC_COLOR
#ifndef GL_SRC_ALPHA
#define GL_SRC_ALPHA 0x0302
#endif //GL_SRC_ALPHA
#ifndef GL_ONE_MINUS_SRC_ALPHA
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#endif //GL_ONE_MINUS_SRC_ALPHA
#ifndef GL_DST_ALPHA
#define GL_DST_ALPHA 0x0304
#endif //GL_DST_ALPHA
#ifndef GL_ONE_MINUS_DST_ALPHA
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#endif //GL_ONE_MINUS_DST_ALPHA
#ifndef GL_DST_COLOR
#define GL_DST_COLOR 0x0306
#endif //GL_DST_COLOR
#ifndef GL_ONE_MINUS_DST_COLOR
#define GL_ONE_MINUS_DST_COLOR 0x0307
#endif //GL_ONE_MINUS_DST_COLOR
#ifndef GL_SRC_ALPHA_SATURATE
#define GL_SRC_ALPHA_SATURATE 0x0308
#endif //GL_SRC_ALPHA_SATURATE
#ifndef GL_FRONT_LEFT
#define GL_FRONT_LEFT 0x0400
#endif //GL_FRONT_LEFT
#ifndef GL_FRONT_RIGHT
#define GL_FRONT_RIGHT 0x0401
#endif //GL_FRONT_RIGHT
#ifndef GL_BACK_LEFT
#define GL_BACK_LEFT 0x0402
#endif //GL_BACK_LEFT
#ifndef GL_BACK_RIGHT
#define GL_BACK_RIGHT 0x0403
#endif //GL_BACK_RIGHT
#ifndef GL_FRONT
#define GL_FRONT 0x0404
#endif //GL_FRONT
#ifndef GL_BACK
#define GL_BACK 0x0405
#endif //GL_BACK
#ifndef GL_LEFT
#define GL_LEFT 0x0406
#endif //GL_LEFT
#ifndef GL_RIGHT
#define GL_RIGHT 0x0407
#endif //GL_RIGHT
#ifndef GL_FRONT_AND_BACK
#define GL_FRONT_AND_BACK 0x0408
#endif //GL_FRONT_AND_BACK
#ifndef GL_AUX0
#define GL_AUX0 0x0409
#endif //GL_AUX0
#ifndef GL_AUX1
#define GL_AUX1 0x040A
#endif //GL_AUX1
#ifndef GL_AUX2
#define GL_AUX2 0x040B
#endif //GL_AUX2
#ifndef GL_AUX3
#define GL_AUX3 0x040C
#endif //GL_AUX3
#ifndef GL_INVALID_ENUM
#define GL_INVALID_ENUM 0x0500
#endif //GL_INVALID_ENUM
#ifndef GL_INVALID_VALUE
#define GL_INVALID_VALUE 0x0501
#endif //GL_INVALID_VALUE
#ifndef GL_INVALID_OPERATION
#define GL_INVALID_OPERATION 0x0502
#endif //GL_INVALID_OPERATION
#ifndef GL_STACK_OVERFLOW
#define GL_STACK_OVERFLOW 0x0503
#endif //GL_STACK_OVERFLOW
#ifndef GL_STACK_UNDERFLOW
#define GL_STACK_UNDERFLOW 0x0504
#endif //GL_STACK_UNDERFLOW
#ifndef GL_OUT_OF_MEMORY
#define GL_OUT_OF_MEMORY 0x0505
#endif //GL_OUT_OF_MEMORY
#ifndef GL_2D
#define GL_2D 0x0600
#endif //GL_2D
#ifndef GL_3D
#define GL_3D 0x0601
#endif //GL_3D
#ifndef GL_3D_COLOR
#define GL_3D_COLOR 0x0602
#endif //GL_3D_COLOR
#ifndef GL_3D_COLOR_TEXTURE
#define GL_3D_COLOR_TEXTURE 0x0603
#endif //GL_3D_COLOR_TEXTURE
#ifndef GL_4D_COLOR_TEXTURE
#define GL_4D_COLOR_TEXTURE 0x0604
#endif //GL_4D_COLOR_TEXTURE
#ifndef GL_PASS_THROUGH_TOKEN
#define GL_PASS_THROUGH_TOKEN 0x0700
#endif //GL_PASS_THROUGH_TOKEN
#ifndef GL_POINT_TOKEN
#define GL_POINT_TOKEN 0x0701
#endif //GL_POINT_TOKEN
#ifndef GL_LINE_TOKEN
#define GL_LINE_TOKEN 0x0702
#endif //GL_LINE_TOKEN
#ifndef GL_POLYGON_TOKEN
#define GL_POLYGON_TOKEN 0x0703
#endif //GL_POLYGON_TOKEN
#ifndef GL_BITMAP_TOKEN
#define GL_BITMAP_TOKEN 0x0704
#endif //GL_BITMAP_TOKEN
#ifndef GL_DRAW_PIXEL_TOKEN
#define GL_DRAW_PIXEL_TOKEN 0x0705
#endif //GL_DRAW_PIXEL_TOKEN
#ifndef GL_COPY_PIXEL_TOKEN
#define GL_COPY_PIXEL_TOKEN 0x0706
#endif //GL_COPY_PIXEL_TOKEN
#ifndef GL_LINE_RESET_TOKEN
#define GL_LINE_RESET_TOKEN 0x0707
#endif //GL_LINE_RESET_TOKEN
#ifndef GL_EXP
#define GL_EXP 0x0800
#endif //GL_EXP
#ifndef GL_EXP2
#define GL_EXP2 0x0801
#endif //GL_EXP2
#ifndef GL_CW
#define GL_CW 0x0900
#endif //GL_CW
#ifndef GL_CCW
#define GL_CCW 0x0901
#endif //GL_CCW
#ifndef GL_COEFF
#define GL_COEFF 0x0A00
#endif //GL_COEFF
#ifndef GL_ORDER
#define GL_ORDER 0x0A01
#endif //GL_ORDER
#ifndef GL_DOMAIN
#define GL_DOMAIN 0x0A02
#endif //GL_DOMAIN
#ifndef GL_CURRENT_COLOR
#define GL_CURRENT_COLOR 0x0B00
#endif //GL_CURRENT_COLOR
#ifndef GL_CURRENT_INDEX
#define GL_CURRENT_INDEX 0x0B01
#endif //GL_CURRENT_INDEX
#ifndef GL_CURRENT_NORMAL
#define GL_CURRENT_NORMAL 0x0B02
#endif //GL_CURRENT_NORMAL
#ifndef GL_CURRENT_TEXTURE_COORDS
#define GL_CURRENT_TEXTURE_COORDS 0x0B03
#endif //GL_CURRENT_TEXTURE_COORDS
#ifndef GL_CURRENT_RASTER_COLOR
#define GL_CURRENT_RASTER_COLOR 0x0B04
#endif //GL_CURRENT_RASTER_COLOR
#ifndef GL_CURRENT_RASTER_INDEX
#define GL_CURRENT_RASTER_INDEX 0x0B05
#endif //GL_CURRENT_RASTER_INDEX
#ifndef GL_CURRENT_RASTER_TEXTURE_COORDS
#define GL_CURRENT_RASTER_TEXTURE_COORDS 0x0B06
#endif //GL_CURRENT_RASTER_TEXTURE_COORDS
#ifndef GL_CURRENT_RASTER_POSITION
#define GL_CURRENT_RASTER_POSITION 0x0B07
#endif //GL_CURRENT_RASTER_POSITION
#ifndef GL_CURRENT_RASTER_POSITION_VALID
#define GL_CURRENT_RASTER_POSITION_VALID 0x0B08
#endif //GL_CURRENT_RASTER_POSITION_VALID
#ifndef GL_CURRENT_RASTER_DISTANCE
#define GL_CURRENT_RASTER_DISTANCE 0x0B09
#endif //GL_CURRENT_RASTER_DISTANCE
#ifndef GL_POINT_SMOOTH
#define GL_POINT_SMOOTH 0x0B10
#endif //GL_POINT_SMOOTH
#ifndef GL_POINT_SIZE
#define GL_POINT_SIZE 0x0B11
#endif //GL_POINT_SIZE
#ifndef GL_POINT_SIZE_RANGE
#define GL_POINT_SIZE_RANGE 0x0B12
#endif //GL_POINT_SIZE_RANGE
#ifndef GL_POINT_SIZE_GRANULARITY
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#endif //GL_POINT_SIZE_GRANULARITY
#ifndef GL_LINE_SMOOTH
#define GL_LINE_SMOOTH 0x0B20
#endif //GL_LINE_SMOOTH
#ifndef GL_LINE_WIDTH
#define GL_LINE_WIDTH 0x0B21
#endif //GL_LINE_WIDTH
#ifndef GL_LINE_WIDTH_RANGE
#define GL_LINE_WIDTH_RANGE 0x0B22
#endif //GL_LINE_WIDTH_RANGE
#ifndef GL_LINE_WIDTH_GRANULARITY
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#endif //GL_LINE_WIDTH_GRANULARITY
#ifndef GL_LINE_STIPPLE
#define GL_LINE_STIPPLE 0x0B24
#endif //GL_LINE_STIPPLE
#ifndef GL_LINE_STIPPLE_PATTERN
#define GL_LINE_STIPPLE_PATTERN 0x0B25
#endif //GL_LINE_STIPPLE_PATTERN
#ifndef GL_LINE_STIPPLE_REPEAT
#define GL_LINE_STIPPLE_REPEAT 0x0B26
#endif //GL_LINE_STIPPLE_REPEAT
#ifndef GL_LIST_MODE
#define GL_LIST_MODE 0x0B30
#endif //GL_LIST_MODE
#ifndef GL_MAX_LIST_NESTING
#define GL_MAX_LIST_NESTING 0x0B31
#endif //GL_MAX_LIST_NESTING
#ifndef GL_LIST_BASE
#define GL_LIST_BASE 0x0B32
#endif //GL_LIST_BASE
#ifndef GL_LIST_INDEX
#define GL_LIST_INDEX 0x0B33
#endif //GL_LIST_INDEX
#ifndef GL_POLYGON_MODE
#define GL_POLYGON_MODE 0x0B40
#endif //GL_POLYGON_MODE
#ifndef GL_POLYGON_SMOOTH
#define GL_POLYGON_SMOOTH 0x0B41
#endif //GL_POLYGON_SMOOTH
#ifndef GL_POLYGON_STIPPLE
#define GL_POLYGON_STIPPLE 0x0B42
#endif //GL_POLYGON_STIPPLE
#ifndef GL_EDGE_FLAG
#define GL_EDGE_FLAG 0x0B43
#endif //GL_EDGE_FLAG
#ifndef GL_CULL_FACE
#define GL_CULL_FACE 0x0B44
#endif //GL_CULL_FACE
#ifndef GL_CULL_FACE_MODE
#define GL_CULL_FACE_MODE 0x0B45
#endif //GL_CULL_FACE_MODE
#ifndef GL_FRONT_FACE
#define GL_FRONT_FACE 0x0B46
#endif //GL_FRONT_FACE
#ifndef GL_LIGHTING
#define GL_LIGHTING 0x0B50
#endif //GL_LIGHTING
#ifndef GL_LIGHT_MODEL_LOCAL_VIEWER
#define GL_LIGHT_MODEL_LOCAL_VIEWER 0x0B51
#endif //GL_LIGHT_MODEL_LOCAL_VIEWER
#ifndef GL_LIGHT_MODEL_TWO_SIDE
#define GL_LIGHT_MODEL_TWO_SIDE 0x0B52
#endif //GL_LIGHT_MODEL_TWO_SIDE
#ifndef GL_LIGHT_MODEL_AMBIENT
#define GL_LIGHT_MODEL_AMBIENT 0x0B53
#endif //GL_LIGHT_MODEL_AMBIENT
#ifndef GL_SHADE_MODEL
#define GL_SHADE_MODEL 0x0B54
#endif //GL_SHADE_MODEL
#ifndef GL_COLOR_MATERIAL_FACE
#define GL_COLOR_MATERIAL_FACE 0x0B55
#endif //GL_COLOR_MATERIAL_FACE
#ifndef GL_COLOR_MATERIAL_PARAMETER
#define GL_COLOR_MATERIAL_PARAMETER 0x0B56
#endif //GL_COLOR_MATERIAL_PARAMETER
#ifndef GL_COLOR_MATERIAL
#define GL_COLOR_MATERIAL 0x0B57
#endif //GL_COLOR_MATERIAL
#ifndef GL_FOG
#define GL_FOG 0x0B60
#endif //GL_FOG
#ifndef GL_FOG_INDEX
#define GL_FOG_INDEX 0x0B61
#endif //GL_FOG_INDEX
#ifndef GL_FOG_DENSITY
#define GL_FOG_DENSITY 0x0B62
#endif //GL_FOG_DENSITY
#ifndef GL_FOG_START
#define GL_FOG_START 0x0B63
#endif //GL_FOG_START
#ifndef GL_FOG_END
#define GL_FOG_END 0x0B64
#endif //GL_FOG_END
#ifndef GL_FOG_MODE
#define GL_FOG_MODE 0x0B65
#endif //GL_FOG_MODE
#ifndef GL_FOG_COLOR
#define GL_FOG_COLOR 0x0B66
#endif //GL_FOG_COLOR
#ifndef GL_DEPTH_RANGE
#define GL_DEPTH_RANGE 0x0B70
#endif //GL_DEPTH_RANGE
#ifndef GL_DEPTH_TEST
#define GL_DEPTH_TEST 0x0B71
#endif //GL_DEPTH_TEST
#ifndef GL_DEPTH_WRITEMASK
#define GL_DEPTH_WRITEMASK 0x0B72
#endif //GL_DEPTH_WRITEMASK
#ifndef GL_DEPTH_CLEAR_VALUE
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#endif //GL_DEPTH_CLEAR_VALUE
#ifndef GL_DEPTH_FUNC
#define GL_DEPTH_FUNC 0x0B74
#endif //GL_DEPTH_FUNC
#ifndef GL_ACCUM_CLEAR_VALUE
#define GL_ACCUM_CLEAR_VALUE 0x0B80
#endif //GL_ACCUM_CLEAR_VALUE
#ifndef GL_STENCIL_TEST
#define GL_STENCIL_TEST 0x0B90
#endif //GL_STENCIL_TEST
#ifndef GL_STENCIL_CLEAR_VALUE
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#endif //GL_STENCIL_CLEAR_VALUE
#ifndef GL_STENCIL_FUNC
#define GL_STENCIL_FUNC 0x0B92
#endif //GL_STENCIL_FUNC
#ifndef GL_STENCIL_VALUE_MASK
#define GL_STENCIL_VALUE_MASK 0x0B93
#endif //GL_STENCIL_VALUE_MASK
#ifndef GL_STENCIL_FAIL
#define GL_STENCIL_FAIL 0x0B94
#endif //GL_STENCIL_FAIL
#ifndef GL_STENCIL_PASS_DEPTH_FAIL
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#endif //GL_STENCIL_PASS_DEPTH_FAIL
#ifndef GL_STENCIL_PASS_DEPTH_PASS
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#endif //GL_STENCIL_PASS_DEPTH_PASS
#ifndef GL_STENCIL_REF
#define GL_STENCIL_REF 0x0B97
#endif //GL_STENCIL_REF
#ifndef GL_STENCIL_WRITEMASK
#define GL_STENCIL_WRITEMASK 0x0B98
#endif //GL_STENCIL_WRITEMASK
#ifndef GL_MATRIX_MODE
#define GL_MATRIX_MODE 0x0BA0
#endif //GL_MATRIX_MODE
#ifndef GL_NORMALIZE
#define GL_NORMALIZE 0x0BA1
#endif //GL_NORMALIZE
#ifndef GL_VIEWPORT
#define GL_VIEWPORT 0x0BA2
#endif //GL_VIEWPORT
#ifndef GL_MODELVIEW_STACK_DEPTH
#define GL_MODELVIEW_STACK_DEPTH 0x0BA3
#endif //GL_MODELVIEW_STACK_DEPTH
#ifndef GL_PROJECTION_STACK_DEPTH
#define GL_PROJECTION_STACK_DEPTH 0x0BA4
#endif //GL_PROJECTION_STACK_DEPTH
#ifndef GL_TEXTURE_STACK_DEPTH
#define GL_TEXTURE_STACK_DEPTH 0x0BA5
#endif //GL_TEXTURE_STACK_DEPTH
#ifndef GL_MODELVIEW_MATRIX
#define GL_MODELVIEW_MATRIX 0x0BA6
#endif //GL_MODELVIEW_MATRIX
#ifndef GL_PROJECTION_MATRIX
#define GL_PROJECTION_MATRIX 0x0BA7
#endif //GL_PROJECTION_MATRIX
#ifndef GL_TEXTURE_MATRIX
#define GL_TEXTURE_MATRIX 0x0BA8
#endif //GL_TEXTURE_MATRIX
#ifndef GL_ATTRIB_STACK_DEPTH
#define GL_ATTRIB_STACK_DEPTH 0x0BB0
#endif //GL_ATTRIB_STACK_DEPTH
#ifndef GL_CLIENT_ATTRIB_STACK_DEPTH
#define GL_CLIENT_ATTRIB_STACK_DEPTH 0x0BB1
#endif //GL_CLIENT_ATTRIB_STACK_DEPTH
#ifndef GL_ALPHA_TEST
#define GL_ALPHA_TEST 0x0BC0
#endif //GL_ALPHA_TEST
#ifndef GL_ALPHA_TEST_FUNC
#define GL_ALPHA_TEST_FUNC 0x0BC1
#endif //GL_ALPHA_TEST_FUNC
#ifndef GL_ALPHA_TEST_REF
#define GL_ALPHA_TEST_REF 0x0BC2
#endif //GL_ALPHA_TEST_REF
#ifndef GL_DITHER
#define GL_DITHER 0x0BD0
#endif //GL_DITHER
#ifndef GL_BLEND_DST
#define GL_BLEND_DST 0x0BE0
#endif //GL_BLEND_DST
#ifndef GL_BLEND_SRC
#define GL_BLEND_SRC 0x0BE1
#endif //GL_BLEND_SRC
#ifndef GL_BLEND
#define GL_BLEND 0x0BE2
#endif //GL_BLEND
#ifndef GL_LOGIC_OP_MODE
#define GL_LOGIC_OP_MODE 0x0BF0
#endif //GL_LOGIC_OP_MODE
#ifndef GL_LOGIC_OP
#define GL_LOGIC_OP 0x0BF1
#endif //GL_LOGIC_OP
#ifndef GL_INDEX_LOGIC_OP
#define GL_INDEX_LOGIC_OP 0x0BF1
#endif //GL_INDEX_LOGIC_OP
#ifndef GL_COLOR_LOGIC_OP
#define GL_COLOR_LOGIC_OP 0x0BF2
#endif //GL_COLOR_LOGIC_OP
#ifndef GL_AUX_BUFFERS
#define GL_AUX_BUFFERS 0x0C00
#endif //GL_AUX_BUFFERS
#ifndef GL_DRAW_BUFFER
#define GL_DRAW_BUFFER 0x0C01
#endif //GL_DRAW_BUFFER
#ifndef GL_READ_BUFFER
#define GL_READ_BUFFER 0x0C02
#endif //GL_READ_BUFFER
#ifndef GL_SCISSOR_BOX
#define GL_SCISSOR_BOX 0x0C10
#endif //GL_SCISSOR_BOX
#ifndef GL_SCISSOR_TEST
#define GL_SCISSOR_TEST 0x0C11
#endif //GL_SCISSOR_TEST
#ifndef GL_INDEX_CLEAR_VALUE
#define GL_INDEX_CLEAR_VALUE 0x0C20
#endif //GL_INDEX_CLEAR_VALUE
#ifndef GL_INDEX_WRITEMASK
#define GL_INDEX_WRITEMASK 0x0C21
#endif //GL_INDEX_WRITEMASK
#ifndef GL_COLOR_CLEAR_VALUE
#define GL_COLOR_CLEAR_VALUE 0x0C22
#endif //GL_COLOR_CLEAR_VALUE
#ifndef GL_COLOR_WRITEMASK
#define GL_COLOR_WRITEMASK 0x0C23
#endif //GL_COLOR_WRITEMASK
#ifndef GL_INDEX_MODE
#define GL_INDEX_MODE 0x0C30
#endif //GL_INDEX_MODE
#ifndef GL_RGBA_MODE
#define GL_RGBA_MODE 0x0C31
#endif //GL_RGBA_MODE
#ifndef GL_DOUBLEBUFFER
#define GL_DOUBLEBUFFER 0x0C32
#endif //GL_DOUBLEBUFFER
#ifndef GL_STEREO
#define GL_STEREO 0x0C33
#endif //GL_STEREO
#ifndef GL_RENDER_MODE
#define GL_RENDER_MODE 0x0C40
#endif //GL_RENDER_MODE
#ifndef GL_PERSPECTIVE_CORRECTION_HINT
#define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50
#endif //GL_PERSPECTIVE_CORRECTION_HINT
#ifndef GL_POINT_SMOOTH_HINT
#define GL_POINT_SMOOTH_HINT 0x0C51
#endif //GL_POINT_SMOOTH_HINT
#ifndef GL_LINE_SMOOTH_HINT
#define GL_LINE_SMOOTH_HINT 0x0C52
#endif //GL_LINE_SMOOTH_HINT
#ifndef GL_POLYGON_SMOOTH_HINT
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#endif //GL_POLYGON_SMOOTH_HINT
#ifndef GL_FOG_HINT
#define GL_FOG_HINT 0x0C54
#endif //GL_FOG_HINT
#ifndef GL_TEXTURE_GEN_S
#define GL_TEXTURE_GEN_S 0x0C60
#endif //GL_TEXTURE_GEN_S
#ifndef GL_TEXTURE_GEN_T
#define GL_TEXTURE_GEN_T 0x0C61
#endif //GL_TEXTURE_GEN_T
#ifndef GL_TEXTURE_GEN_R
#define GL_TEXTURE_GEN_R 0x0C62
#endif //GL_TEXTURE_GEN_R
#ifndef GL_TEXTURE_GEN_Q
#define GL_TEXTURE_GEN_Q 0x0C63
#endif //GL_TEXTURE_GEN_Q
#ifndef GL_PIXEL_MAP_I_TO_I
#define GL_PIXEL_MAP_I_TO_I 0x0C70
#endif //GL_PIXEL_MAP_I_TO_I
#ifndef GL_PIXEL_MAP_S_TO_S
#define GL_PIXEL_MAP_S_TO_S 0x0C71
#endif //GL_PIXEL_MAP_S_TO_S
#ifndef GL_PIXEL_MAP_I_TO_R
#define GL_PIXEL_MAP_I_TO_R 0x0C72
#endif //GL_PIXEL_MAP_I_TO_R
#ifndef GL_PIXEL_MAP_I_TO_G
#define GL_PIXEL_MAP_I_TO_G 0x0C73
#endif //GL_PIXEL_MAP_I_TO_G
#ifndef GL_PIXEL_MAP_I_TO_B
#define GL_PIXEL_MAP_I_TO_B 0x0C74
#endif //GL_PIXEL_MAP_I_TO_B
#ifndef GL_PIXEL_MAP_I_TO_A
#define GL_PIXEL_MAP_I_TO_A 0x0C75
#endif //GL_PIXEL_MAP_I_TO_A
#ifndef GL_PIXEL_MAP_R_TO_R
#define GL_PIXEL_MAP_R_TO_R 0x0C76
#endif //GL_PIXEL_MAP_R_TO_R
#ifndef GL_PIXEL_MAP_G_TO_G
#define GL_PIXEL_MAP_G_TO_G 0x0C77
#endif //GL_PIXEL_MAP_G_TO_G
#ifndef GL_PIXEL_MAP_B_TO_B
#define GL_PIXEL_MAP_B_TO_B 0x0C78
#endif //GL_PIXEL_MAP_B_TO_B
#ifndef GL_PIXEL_MAP_A_TO_A
#define GL_PIXEL_MAP_A_TO_A 0x0C79
#endif //GL_PIXEL_MAP_A_TO_A
#ifndef GL_PIXEL_MAP_I_TO_I_SIZE
#define GL_PIXEL_MAP_I_TO_I_SIZE 0x0CB0
#endif //GL_PIXEL_MAP_I_TO_I_SIZE
#ifndef GL_PIXEL_MAP_S_TO_S_SIZE
#define GL_PIXEL_MAP_S_TO_S_SIZE 0x0CB1
#endif //GL_PIXEL_MAP_S_TO_S_SIZE
#ifndef GL_PIXEL_MAP_I_TO_R_SIZE
#define GL_PIXEL_MAP_I_TO_R_SIZE 0x0CB2
#endif //GL_PIXEL_MAP_I_TO_R_SIZE
#ifndef GL_PIXEL_MAP_I_TO_G_SIZE
#define GL_PIXEL_MAP_I_TO_G_SIZE 0x0CB3
#endif //GL_PIXEL_MAP_I_TO_G_SIZE
#ifndef GL_PIXEL_MAP_I_TO_B_SIZE
#define GL_PIXEL_MAP_I_TO_B_SIZE 0x0CB4
#endif //GL_PIXEL_MAP_I_TO_B_SIZE
#ifndef GL_PIXEL_MAP_I_TO_A_SIZE
#define GL_PIXEL_MAP_I_TO_A_SIZE 0x0CB5
#endif //GL_PIXEL_MAP_I_TO_A_SIZE
#ifndef GL_PIXEL_MAP_R_TO_R_SIZE
#define GL_PIXEL_MAP_R_TO_R_SIZE 0x0CB6
#endif //GL_PIXEL_MAP_R_TO_R_SIZE
#ifndef GL_PIXEL_MAP_G_TO_G_SIZE
#define GL_PIXEL_MAP_G_TO_G_SIZE 0x0CB7
#endif //GL_PIXEL_MAP_G_TO_G_SIZE
#ifndef GL_PIXEL_MAP_B_TO_B_SIZE
#define GL_PIXEL_MAP_B_TO_B_SIZE 0x0CB8
#endif //GL_PIXEL_MAP_B_TO_B_SIZE
#ifndef GL_PIXEL_MAP_A_TO_A_SIZE
#define GL_PIXEL_MAP_A_TO_A_SIZE 0x0CB9
#endif //GL_PIXEL_MAP_A_TO_A_SIZE
#ifndef GL_UNPACK_SWAP_BYTES
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#endif //GL_UNPACK_SWAP_BYTES
#ifndef GL_UNPACK_LSB_FIRST
#define GL_UNPACK_LSB_FIRST 0x0CF1
#endif //GL_UNPACK_LSB_FIRST
#ifndef GL_UNPACK_ROW_LENGTH
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#endif //GL_UNPACK_ROW_LENGTH
#ifndef GL_UNPACK_SKIP_ROWS
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#endif //GL_UNPACK_SKIP_ROWS
#ifndef GL_UNPACK_SKIP_PIXELS
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#endif //GL_UNPACK_SKIP_PIXELS
#ifndef GL_UNPACK_ALIGNMENT
#define GL_UNPACK_ALIGNMENT 0x0CF5
#endif //GL_UNPACK_ALIGNMENT
#ifndef GL_PACK_SWAP_BYTES
#define GL_PACK_SWAP_BYTES 0x0D00
#endif //GL_PACK_SWAP_BYTES
#ifndef GL_PACK_LSB_FIRST
#define GL_PACK_LSB_FIRST 0x0D01
#endif //GL_PACK_LSB_FIRST
#ifndef GL_PACK_ROW_LENGTH
#define GL_PACK_ROW_LENGTH 0x0D02
#endif //GL_PACK_ROW_LENGTH
#ifndef GL_PACK_SKIP_ROWS
#define GL_PACK_SKIP_ROWS 0x0D03
#endif //GL_PACK_SKIP_ROWS
#ifndef GL_PACK_SKIP_PIXELS
#define GL_PACK_SKIP_PIXELS 0x0D04
#endif //GL_PACK_SKIP_PIXELS
#ifndef GL_PACK_ALIGNMENT
#define GL_PACK_ALIGNMENT 0x0D05
#endif //GL_PACK_ALIGNMENT
#ifndef GL_MAP_COLOR
#define GL_MAP_COLOR 0x0D10
#endif //GL_MAP_COLOR
#ifndef GL_MAP_STENCIL
#define GL_MAP_STENCIL 0x0D11
#endif //GL_MAP_STENCIL
#ifndef GL_INDEX_SHIFT
#define GL_INDEX_SHIFT 0x0D12
#endif //GL_INDEX_SHIFT
#ifndef GL_INDEX_OFFSET
#define GL_INDEX_OFFSET 0x0D13
#endif //GL_INDEX_OFFSET
#ifndef GL_RED_SCALE
#define GL_RED_SCALE 0x0D14
#endif //GL_RED_SCALE
#ifndef GL_RED_BIAS
#define GL_RED_BIAS 0x0D15
#endif //GL_RED_BIAS
#ifndef GL_ZOOM_X
#define GL_ZOOM_X 0x0D16
#endif //GL_ZOOM_X
#ifndef GL_ZOOM_Y
#define GL_ZOOM_Y 0x0D17
#endif //GL_ZOOM_Y
#ifndef GL_GREEN_SCALE
#define GL_GREEN_SCALE 0x0D18
#endif //GL_GREEN_SCALE
#ifndef GL_GREEN_BIAS
#define GL_GREEN_BIAS 0x0D19
#endif //GL_GREEN_BIAS
#ifndef GL_BLUE_SCALE
#define GL_BLUE_SCALE 0x0D1A
#endif //GL_BLUE_SCALE
#ifndef GL_BLUE_BIAS
#define GL_BLUE_BIAS 0x0D1B
#endif //GL_BLUE_BIAS
#ifndef GL_ALPHA_SCALE
#define GL_ALPHA_SCALE 0x0D1C
#endif //GL_ALPHA_SCALE
#ifndef GL_ALPHA_BIAS
#define GL_ALPHA_BIAS 0x0D1D
#endif //GL_ALPHA_BIAS
#ifndef GL_DEPTH_SCALE
#define GL_DEPTH_SCALE 0x0D1E
#endif //GL_DEPTH_SCALE
#ifndef GL_DEPTH_BIAS
#define GL_DEPTH_BIAS 0x0D1F
#endif //GL_DEPTH_BIAS
#ifndef GL_MAX_EVAL_ORDER
#define GL_MAX_EVAL_ORDER 0x0D30
#endif //GL_MAX_EVAL_ORDER
#ifndef GL_MAX_LIGHTS
#define GL_MAX_LIGHTS 0x0D31
#endif //GL_MAX_LIGHTS
#ifndef GL_MAX_CLIP_PLANES
#define GL_MAX_CLIP_PLANES 0x0D32
#endif //GL_MAX_CLIP_PLANES
#ifndef GL_MAX_TEXTURE_SIZE
#define GL_MAX_TEXTURE_SIZE 0x0D33
#endif //GL_MAX_TEXTURE_SIZE
#ifndef GL_MAX_PIXEL_MAP_TABLE
#define GL_MAX_PIXEL_MAP_TABLE 0x0D34
#endif //GL_MAX_PIXEL_MAP_TABLE
#ifndef GL_MAX_ATTRIB_STACK_DEPTH
#define GL_MAX_ATTRIB_STACK_DEPTH 0x0D35
#endif //GL_MAX_ATTRIB_STACK_DEPTH
#ifndef GL_MAX_MODELVIEW_STACK_DEPTH
#define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36
#endif //GL_MAX_MODELVIEW_STACK_DEPTH
#ifndef GL_MAX_NAME_STACK_DEPTH
#define GL_MAX_NAME_STACK_DEPTH 0x0D37
#endif //GL_MAX_NAME_STACK_DEPTH
#ifndef GL_MAX_PROJECTION_STACK_DEPTH
#define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38
#endif //GL_MAX_PROJECTION_STACK_DEPTH
#ifndef GL_MAX_TEXTURE_STACK_DEPTH
#define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39
#endif //GL_MAX_TEXTURE_STACK_DEPTH
#ifndef GL_MAX_VIEWPORT_DIMS
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#endif //GL_MAX_VIEWPORT_DIMS
#ifndef GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0x0D3B
#endif //GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
#ifndef GL_SUBPIXEL_BITS
#define GL_SUBPIXEL_BITS 0x0D50
#endif //GL_SUBPIXEL_BITS
#ifndef GL_INDEX_BITS
#define GL_INDEX_BITS 0x0D51
#endif //GL_INDEX_BITS
#ifndef GL_RED_BITS
#define GL_RED_BITS 0x0D52
#endif //GL_RED_BITS
#ifndef GL_GREEN_BITS
#define GL_GREEN_BITS 0x0D53
#endif //GL_GREEN_BITS
#ifndef GL_BLUE_BITS
#define GL_BLUE_BITS 0x0D54
#endif //GL_BLUE_BITS
#ifndef GL_ALPHA_BITS
#define GL_ALPHA_BITS 0x0D55
#endif //GL_ALPHA_BITS
#ifndef GL_DEPTH_BITS
#define GL_DEPTH_BITS 0x0D56
#endif //GL_DEPTH_BITS
#ifndef GL_STENCIL_BITS
#define GL_STENCIL_BITS 0x0D57
#endif //GL_STENCIL_BITS
#ifndef GL_ACCUM_RED_BITS
#define GL_ACCUM_RED_BITS 0x0D58
#endif //GL_ACCUM_RED_BITS
#ifndef GL_ACCUM_GREEN_BITS
#define GL_ACCUM_GREEN_BITS 0x0D59
#endif //GL_ACCUM_GREEN_BITS
#ifndef GL_ACCUM_BLUE_BITS
#define GL_ACCUM_BLUE_BITS 0x0D5A
#endif //GL_ACCUM_BLUE_BITS
#ifndef GL_ACCUM_ALPHA_BITS
#define GL_ACCUM_ALPHA_BITS 0x0D5B
#endif //GL_ACCUM_ALPHA_BITS
#ifndef GL_NAME_STACK_DEPTH
#define GL_NAME_STACK_DEPTH 0x0D70
#endif //GL_NAME_STACK_DEPTH
#ifndef GL_AUTO_NORMAL
#define GL_AUTO_NORMAL 0x0D80
#endif //GL_AUTO_NORMAL
#ifndef GL_MAP1_COLOR_4
#define GL_MAP1_COLOR_4 0x0D90
#endif //GL_MAP1_COLOR_4
#ifndef GL_MAP1_INDEX
#define GL_MAP1_INDEX 0x0D91
#endif //GL_MAP1_INDEX
#ifndef GL_MAP1_NORMAL
#define GL_MAP1_NORMAL 0x0D92
#endif //GL_MAP1_NORMAL
#ifndef GL_MAP1_TEXTURE_COORD_1
#define GL_MAP1_TEXTURE_COORD_1 0x0D93
#endif //GL_MAP1_TEXTURE_COORD_1
#ifndef GL_MAP1_TEXTURE_COORD_2
#define GL_MAP1_TEXTURE_COORD_2 0x0D94
#endif //GL_MAP1_TEXTURE_COORD_2
#ifndef GL_MAP1_TEXTURE_COORD_3
#define GL_MAP1_TEXTURE_COORD_3 0x0D95
#endif //GL_MAP1_TEXTURE_COORD_3
#ifndef GL_MAP1_TEXTURE_COORD_4
#define GL_MAP1_TEXTURE_COORD_4 0x0D96
#endif //GL_MAP1_TEXTURE_COORD_4
#ifndef GL_MAP1_VERTEX_3
#define GL_MAP1_VERTEX_3 0x0D97
#endif //GL_MAP1_VERTEX_3
#ifndef GL_MAP1_VERTEX_4
#define GL_MAP1_VERTEX_4 0x0D98
#endif //GL_MAP1_VERTEX_4
#ifndef GL_MAP2_COLOR_4
#define GL_MAP2_COLOR_4 0x0DB0
#endif //GL_MAP2_COLOR_4
#ifndef GL_MAP2_INDEX
#define GL_MAP2_INDEX 0x0DB1
#endif //GL_MAP2_INDEX
#ifndef GL_MAP2_NORMAL
#define GL_MAP2_NORMAL 0x0DB2
#endif //GL_MAP2_NORMAL
#ifndef GL_MAP2_TEXTURE_COORD_1
#define GL_MAP2_TEXTURE_COORD_1 0x0DB3
#endif //GL_MAP2_TEXTURE_COORD_1
#ifndef GL_MAP2_TEXTURE_COORD_2
#define GL_MAP2_TEXTURE_COORD_2 0x0DB4
#endif //GL_MAP2_TEXTURE_COORD_2
#ifndef GL_MAP2_TEXTURE_COORD_3
#define GL_MAP2_TEXTURE_COORD_3 0x0DB5
#endif //GL_MAP2_TEXTURE_COORD_3
#ifndef GL_MAP2_TEXTURE_COORD_4
#define GL_MAP2_TEXTURE_COORD_4 0x0DB6
#endif //GL_MAP2_TEXTURE_COORD_4
#ifndef GL_MAP2_VERTEX_3
#define GL_MAP2_VERTEX_3 0x0DB7
#endif //GL_MAP2_VERTEX_3
#ifndef GL_MAP2_VERTEX_4
#define GL_MAP2_VERTEX_4 0x0DB8
#endif //GL_MAP2_VERTEX_4
#ifndef GL_MAP1_GRID_DOMAIN
#define GL_MAP1_GRID_DOMAIN 0x0DD0
#endif //GL_MAP1_GRID_DOMAIN
#ifndef GL_MAP1_GRID_SEGMENTS
#define GL_MAP1_GRID_SEGMENTS 0x0DD1
#endif //GL_MAP1_GRID_SEGMENTS
#ifndef GL_MAP2_GRID_DOMAIN
#define GL_MAP2_GRID_DOMAIN 0x0DD2
#endif //GL_MAP2_GRID_DOMAIN
#ifndef GL_MAP2_GRID_SEGMENTS
#define GL_MAP2_GRID_SEGMENTS 0x0DD3
#endif //GL_MAP2_GRID_SEGMENTS
#ifndef GL_TEXTURE_1D
#define GL_TEXTURE_1D 0x0DE0
#endif //GL_TEXTURE_1D
#ifndef GL_TEXTURE_2D
#define GL_TEXTURE_2D 0x0DE1
#endif //GL_TEXTURE_2D
#ifndef GL_FEEDBACK_BUFFER_POINTER
#define GL_FEEDBACK_BUFFER_POINTER 0x0DF0
#endif //GL_FEEDBACK_BUFFER_POINTER
#ifndef GL_FEEDBACK_BUFFER_SIZE
#define GL_FEEDBACK_BUFFER_SIZE 0x0DF1
#endif //GL_FEEDBACK_BUFFER_SIZE
#ifndef GL_FEEDBACK_BUFFER_TYPE
#define GL_FEEDBACK_BUFFER_TYPE 0x0DF2
#endif //GL_FEEDBACK_BUFFER_TYPE
#ifndef GL_SELECTION_BUFFER_POINTER
#define GL_SELECTION_BUFFER_POINTER 0x0DF3
#endif //GL_SELECTION_BUFFER_POINTER
#ifndef GL_SELECTION_BUFFER_SIZE
#define GL_SELECTION_BUFFER_SIZE 0x0DF4
#endif //GL_SELECTION_BUFFER_SIZE
#ifndef GL_TEXTURE_WIDTH
#define GL_TEXTURE_WIDTH 0x1000
#endif //GL_TEXTURE_WIDTH
#ifndef GL_TEXTURE_HEIGHT
#define GL_TEXTURE_HEIGHT 0x1001
#endif //GL_TEXTURE_HEIGHT
#ifndef GL_TEXTURE_COMPONENTS
#define GL_TEXTURE_COMPONENTS 0x1003
#endif //GL_TEXTURE_COMPONENTS
#ifndef GL_TEXTURE_INTERNAL_FORMAT
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#endif //GL_TEXTURE_INTERNAL_FORMAT
#ifndef GL_TEXTURE_BORDER_COLOR
#define GL_TEXTURE_BORDER_COLOR 0x1004
#endif //GL_TEXTURE_BORDER_COLOR
#ifndef GL_TEXTURE_BORDER
#define GL_TEXTURE_BORDER 0x1005
#endif //GL_TEXTURE_BORDER
#ifndef GL_DONT_CARE
#define GL_DONT_CARE 0x1100
#endif //GL_DONT_CARE
#ifndef GL_FASTEST
#define GL_FASTEST 0x1101
#endif //GL_FASTEST
#ifndef GL_NICEST
#define GL_NICEST 0x1102
#endif //GL_NICEST
#ifndef GL_AMBIENT
#define GL_AMBIENT 0x1200
#endif //GL_AMBIENT
#ifndef GL_DIFFUSE
#define GL_DIFFUSE 0x1201
#endif //GL_DIFFUSE
#ifndef GL_SPECULAR
#define GL_SPECULAR 0x1202
#endif //GL_SPECULAR
#ifndef GL_POSITION
#define GL_POSITION 0x1203
#endif //GL_POSITION
#ifndef GL_SPOT_DIRECTION
#define GL_SPOT_DIRECTION 0x1204
#endif //GL_SPOT_DIRECTION
#ifndef GL_SPOT_EXPONENT
#define GL_SPOT_EXPONENT 0x1205
#endif //GL_SPOT_EXPONENT
#ifndef GL_SPOT_CUTOFF
#define GL_SPOT_CUTOFF 0x1206
#endif //GL_SPOT_CUTOFF
#ifndef GL_CONSTANT_ATTENUATION
#define GL_CONSTANT_ATTENUATION 0x1207
#endif //GL_CONSTANT_ATTENUATION
#ifndef GL_LINEAR_ATTENUATION
#define GL_LINEAR_ATTENUATION 0x1208
#endif //GL_LINEAR_ATTENUATION
#ifndef GL_QUADRATIC_ATTENUATION
#define GL_QUADRATIC_ATTENUATION 0x1209
#endif //GL_QUADRATIC_ATTENUATION
#ifndef GL_COMPILE
#define GL_COMPILE 0x1300
#endif //GL_COMPILE
#ifndef GL_COMPILE_AND_EXECUTE
#define GL_COMPILE_AND_EXECUTE 0x1301
#endif //GL_COMPILE_AND_EXECUTE
#ifndef GL_BYTE
#define GL_BYTE 0x1400
#endif //GL_BYTE
#ifndef GL_UNSIGNED_BYTE
#define GL_UNSIGNED_BYTE 0x1401
#endif //GL_UNSIGNED_BYTE
#ifndef GL_SHORT
#define GL_SHORT 0x1402
#endif //GL_SHORT
#ifndef GL_UNSIGNED_SHORT
#define GL_UNSIGNED_SHORT 0x1403
#endif //GL_UNSIGNED_SHORT
#ifndef GL_INT
#define GL_INT 0x1404
#endif //GL_INT
#ifndef GL_UNSIGNED_INT
#define GL_UNSIGNED_INT 0x1405
#endif //GL_UNSIGNED_INT
#ifndef GL_FLOAT
#define GL_FLOAT 0x1406
#endif //GL_FLOAT
#ifndef GL_2_BYTES
#define GL_2_BYTES 0x1407
#endif //GL_2_BYTES
#ifndef GL_3_BYTES
#define GL_3_BYTES 0x1408
#endif //GL_3_BYTES
#ifndef GL_4_BYTES
#define GL_4_BYTES 0x1409
#endif //GL_4_BYTES
#ifndef GL_DOUBLE
#define GL_DOUBLE 0x140A
#endif //GL_DOUBLE
#ifndef GL_CLEAR
#define GL_CLEAR 0x1500
#endif //GL_CLEAR
#ifndef GL_AND
#define GL_AND 0x1501
#endif //GL_AND
#ifndef GL_AND_REVERSE
#define GL_AND_REVERSE 0x1502
#endif //GL_AND_REVERSE
#ifndef GL_COPY
#define GL_COPY 0x1503
#endif //GL_COPY
#ifndef GL_AND_INVERTED
#define GL_AND_INVERTED 0x1504
#endif //GL_AND_INVERTED
#ifndef GL_NOOP
#define GL_NOOP 0x1505
#endif //GL_NOOP
#ifndef GL_XOR
#define GL_XOR 0x1506
#endif //GL_XOR
#ifndef GL_OR
#define GL_OR 0x1507
#endif //GL_OR
#ifndef GL_NOR
#define GL_NOR 0x1508
#endif //GL_NOR
#ifndef GL_EQUIV
#define GL_EQUIV 0x1509
#endif //GL_EQUIV
#ifndef GL_INVERT
#define GL_INVERT 0x150A
#endif //GL_INVERT
#ifndef GL_OR_REVERSE
#define GL_OR_REVERSE 0x150B
#endif //GL_OR_REVERSE
#ifndef GL_COPY_INVERTED
#define GL_COPY_INVERTED 0x150C
#endif //GL_COPY_INVERTED
#ifndef GL_OR_INVERTED
#define GL_OR_INVERTED 0x150D
#endif //GL_OR_INVERTED
#ifndef GL_NAND
#define GL_NAND 0x150E
#endif //GL_NAND
#ifndef GL_SET
#define GL_SET 0x150F
#endif //GL_SET
#ifndef GL_EMISSION
#define GL_EMISSION 0x1600
#endif //GL_EMISSION
#ifndef GL_SHININESS
#define GL_SHININESS 0x1601
#endif //GL_SHININESS
#ifndef GL_AMBIENT_AND_DIFFUSE
#define GL_AMBIENT_AND_DIFFUSE 0x1602
#endif //GL_AMBIENT_AND_DIFFUSE
#ifndef GL_COLOR_INDEXES
#define GL_COLOR_INDEXES 0x1603
#endif //GL_COLOR_INDEXES
#ifndef GL_MODELVIEW
#define GL_MODELVIEW 0x1700
#endif //GL_MODELVIEW
#ifndef GL_PROJECTION
#define GL_PROJECTION 0x1701
#endif //GL_PROJECTION
#ifndef GL_TEXTURE
#define GL_TEXTURE 0x1702
#endif //GL_TEXTURE
#ifndef GL_COLOR
#define GL_COLOR 0x1800
#endif //GL_COLOR
#ifndef GL_DEPTH
#define GL_DEPTH 0x1801
#endif //GL_DEPTH
#ifndef GL_STENCIL
#define GL_STENCIL 0x1802
#endif //GL_STENCIL
#ifndef GL_COLOR_INDEX
#define GL_COLOR_INDEX 0x1900
#endif //GL_COLOR_INDEX
#ifndef GL_STENCIL_INDEX
#define GL_STENCIL_INDEX 0x1901
#endif //GL_STENCIL_INDEX
#ifndef GL_DEPTH_COMPONENT
#define GL_DEPTH_COMPONENT 0x1902
#endif //GL_DEPTH_COMPONENT
#ifndef GL_RED
#define GL_RED 0x1903
#endif //GL_RED
#ifndef GL_GREEN
#define GL_GREEN 0x1904
#endif //GL_GREEN
#ifndef GL_BLUE
#define GL_BLUE 0x1905
#endif //GL_BLUE
#ifndef GL_ALPHA
#define GL_ALPHA 0x1906
#endif //GL_ALPHA
#ifndef GL_RGB
#define GL_RGB 0x1907
#endif //GL_RGB
#ifndef GL_RGBA
#define GL_RGBA 0x1908
#endif //GL_RGBA
#ifndef GL_LUMINANCE
#define GL_LUMINANCE 0x1909
#endif //GL_LUMINANCE
#ifndef GL_LUMINANCE_ALPHA
#define GL_LUMINANCE_ALPHA 0x190A
#endif //GL_LUMINANCE_ALPHA
#ifndef GL_BITMAP
#define GL_BITMAP 0x1A00
#endif //GL_BITMAP
#ifndef GL_POINT
#define GL_POINT 0x1B00
#endif //GL_POINT
#ifndef GL_LINE
#define GL_LINE 0x1B01
#endif //GL_LINE
#ifndef GL_FILL
#define GL_FILL 0x1B02
#endif //GL_FILL
#ifndef GL_RENDER
#define GL_RENDER 0x1C00
#endif //GL_RENDER
#ifndef GL_FEEDBACK
#define GL_FEEDBACK 0x1C01
#endif //GL_FEEDBACK
#ifndef GL_SELECT
#define GL_SELECT 0x1C02
#endif //GL_SELECT
#ifndef GL_FLAT
#define GL_FLAT 0x1D00
#endif //GL_FLAT
#ifndef GL_SMOOTH
#define GL_SMOOTH 0x1D01
#endif //GL_SMOOTH
#ifndef GL_KEEP
#define GL_KEEP 0x1E00
#endif //GL_KEEP
#ifndef GL_REPLACE
#define GL_REPLACE 0x1E01
#endif //GL_REPLACE
#ifndef GL_INCR
#define GL_INCR 0x1E02
#endif //GL_INCR
#ifndef GL_DECR
#define GL_DECR 0x1E03
#endif //GL_DECR
#ifndef GL_VENDOR
#define GL_VENDOR 0x1F00
#endif //GL_VENDOR
#ifndef GL_RENDERER
#define GL_RENDERER 0x1F01
#endif //GL_RENDERER
#ifndef GL_VERSION
#define GL_VERSION 0x1F02
#endif //GL_VERSION
#ifndef GL_EXTENSIONS
#define GL_EXTENSIONS 0x1F03
#endif //GL_EXTENSIONS
#ifndef GL_S
#define GL_S 0x2000
#endif //GL_S
#ifndef GL_T
#define GL_T 0x2001
#endif //GL_T
#ifndef GL_R
#define GL_R 0x2002
#endif //GL_R
#ifndef GL_Q
#define GL_Q 0x2003
#endif //GL_Q
#ifndef GL_MODULATE
#define GL_MODULATE 0x2100
#endif //GL_MODULATE
#ifndef GL_DECAL
#define GL_DECAL 0x2101
#endif //GL_DECAL
#ifndef GL_TEXTURE_ENV_MODE
#define GL_TEXTURE_ENV_MODE 0x2200
#endif //GL_TEXTURE_ENV_MODE
#ifndef GL_TEXTURE_ENV_COLOR
#define GL_TEXTURE_ENV_COLOR 0x2201
#endif //GL_TEXTURE_ENV_COLOR
#ifndef GL_TEXTURE_ENV
#define GL_TEXTURE_ENV 0x2300
#endif //GL_TEXTURE_ENV
#ifndef GL_EYE_LINEAR
#define GL_EYE_LINEAR 0x2400
#endif //GL_EYE_LINEAR
#ifndef GL_OBJECT_LINEAR
#define GL_OBJECT_LINEAR 0x2401
#endif //GL_OBJECT_LINEAR
#ifndef GL_SPHERE_MAP
#define GL_SPHERE_MAP 0x2402
#endif //GL_SPHERE_MAP
#ifndef GL_TEXTURE_GEN_MODE
#define GL_TEXTURE_GEN_MODE 0x2500
#endif //GL_TEXTURE_GEN_MODE
#ifndef GL_OBJECT_PLANE
#define GL_OBJECT_PLANE 0x2501
#endif //GL_OBJECT_PLANE
#ifndef GL_EYE_PLANE
#define GL_EYE_PLANE 0x2502
#endif //GL_EYE_PLANE
#ifndef GL_NEAREST
#define GL_NEAREST 0x2600
#endif //GL_NEAREST
#ifndef GL_LINEAR
#define GL_LINEAR 0x2601
#endif //GL_LINEAR
#ifndef GL_NEAREST_MIPMAP_NEAREST
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#endif //GL_NEAREST_MIPMAP_NEAREST
#ifndef GL_LINEAR_MIPMAP_NEAREST
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#endif //GL_LINEAR_MIPMAP_NEAREST
#ifndef GL_NEAREST_MIPMAP_LINEAR
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#endif //GL_NEAREST_MIPMAP_LINEAR
#ifndef GL_LINEAR_MIPMAP_LINEAR
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#endif //GL_LINEAR_MIPMAP_LINEAR
#ifndef GL_TEXTURE_MAG_FILTER
#define GL_TEXTURE_MAG_FILTER 0x2800
#endif //GL_TEXTURE_MAG_FILTER
#ifndef GL_TEXTURE_MIN_FILTER
#define GL_TEXTURE_MIN_FILTER 0x2801
#endif //GL_TEXTURE_MIN_FILTER
#ifndef GL_TEXTURE_WRAP_S
#define GL_TEXTURE_WRAP_S 0x2802
#endif //GL_TEXTURE_WRAP_S
#ifndef GL_TEXTURE_WRAP_T
#define GL_TEXTURE_WRAP_T 0x2803
#endif //GL_TEXTURE_WRAP_T
#ifndef GL_CLAMP
#define GL_CLAMP 0x2900
#endif //GL_CLAMP
#ifndef GL_REPEAT
#define GL_REPEAT 0x2901
#endif //GL_REPEAT
#ifndef GL_POLYGON_OFFSET_UNITS
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#endif //GL_POLYGON_OFFSET_UNITS
#ifndef GL_POLYGON_OFFSET_POINT
#define GL_POLYGON_OFFSET_POINT 0x2A01
#endif //GL_POLYGON_OFFSET_POINT
#ifndef GL_POLYGON_OFFSET_LINE
#define GL_POLYGON_OFFSET_LINE 0x2A02
#endif //GL_POLYGON_OFFSET_LINE
#ifndef GL_R3_G3_B2
#define GL_R3_G3_B2 0x2A10
#endif //GL_R3_G3_B2
#ifndef GL_V2F
#define GL_V2F 0x2A20
#endif //GL_V2F
#ifndef GL_V3F
#define GL_V3F 0x2A21
#endif //GL_V3F
#ifndef GL_C4UB_V2F
#define GL_C4UB_V2F 0x2A22
#endif //GL_C4UB_V2F
#ifndef GL_C4UB_V3F
#define GL_C4UB_V3F 0x2A23
#endif //GL_C4UB_V3F
#ifndef GL_C3F_V3F
#define GL_C3F_V3F 0x2A24
#endif //GL_C3F_V3F
#ifndef GL_N3F_V3F
#define GL_N3F_V3F 0x2A25
#endif //GL_N3F_V3F
#ifndef GL_C4F_N3F_V3F
#define GL_C4F_N3F_V3F 0x2A26
#endif //GL_C4F_N3F_V3F
#ifndef GL_T2F_V3F
#define GL_T2F_V3F 0x2A27
#endif //GL_T2F_V3F
#ifndef GL_T4F_V4F
#define GL_T4F_V4F 0x2A28
#endif //GL_T4F_V4F
#ifndef GL_T2F_C4UB_V3F
#define GL_T2F_C4UB_V3F 0x2A29
#endif //GL_T2F_C4UB_V3F
#ifndef GL_T2F_C3F_V3F
#define GL_T2F_C3F_V3F 0x2A2A
#endif //GL_T2F_C3F_V3F
#ifndef GL_T2F_N3F_V3F
#define GL_T2F_N3F_V3F 0x2A2B
#endif //GL_T2F_N3F_V3F
#ifndef GL_T2F_C4F_N3F_V3F
#define GL_T2F_C4F_N3F_V3F 0x2A2C
#endif //GL_T2F_C4F_N3F_V3F
#ifndef GL_T4F_C4F_N3F_V4F
#define GL_T4F_C4F_N3F_V4F 0x2A2D
#endif //GL_T4F_C4F_N3F_V4F
#ifndef GL_CLIP_PLANE0
#define GL_CLIP_PLANE0 0x3000
#endif //GL_CLIP_PLANE0
#ifndef GL_CLIP_PLANE1
#define GL_CLIP_PLANE1 0x3001
#endif //GL_CLIP_PLANE1
#ifndef GL_CLIP_PLANE2
#define GL_CLIP_PLANE2 0x3002
#endif //GL_CLIP_PLANE2
#ifndef GL_CLIP_PLANE3
#define GL_CLIP_PLANE3 0x3003
#endif //GL_CLIP_PLANE3
#ifndef GL_CLIP_PLANE4
#define GL_CLIP_PLANE4 0x3004
#endif //GL_CLIP_PLANE4
#ifndef GL_CLIP_PLANE5
#define GL_CLIP_PLANE5 0x3005
#endif //GL_CLIP_PLANE5
#ifndef GL_LIGHT0
#define GL_LIGHT0 0x4000
#endif //GL_LIGHT0
#ifndef GL_LIGHT1
#define GL_LIGHT1 0x4001
#endif //GL_LIGHT1
#ifndef GL_LIGHT2
#define GL_LIGHT2 0x4002
#endif //GL_LIGHT2
#ifndef GL_LIGHT3
#define GL_LIGHT3 0x4003
#endif //GL_LIGHT3
#ifndef GL_LIGHT4
#define GL_LIGHT4 0x4004
#endif //GL_LIGHT4
#ifndef GL_LIGHT5
#define GL_LIGHT5 0x4005
#endif //GL_LIGHT5
#ifndef GL_LIGHT6
#define GL_LIGHT6 0x4006
#endif //GL_LIGHT6
#ifndef GL_LIGHT7
#define GL_LIGHT7 0x4007
#endif //GL_LIGHT7
#ifndef GL_POLYGON_OFFSET_FILL
#define GL_POLYGON_OFFSET_FILL 0x8037
#endif //GL_POLYGON_OFFSET_FILL
#ifndef GL_POLYGON_OFFSET_FACTOR
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#endif //GL_POLYGON_OFFSET_FACTOR
#ifndef GL_ALPHA4
#define GL_ALPHA4 0x803B
#endif //GL_ALPHA4
#ifndef GL_ALPHA8
#define GL_ALPHA8 0x803C
#endif //GL_ALPHA8
#ifndef GL_ALPHA12
#define GL_ALPHA12 0x803D
#endif //GL_ALPHA12
#ifndef GL_ALPHA16
#define GL_ALPHA16 0x803E
#endif //GL_ALPHA16
#ifndef GL_LUMINANCE4
#define GL_LUMINANCE4 0x803F
#endif //GL_LUMINANCE4
#ifndef GL_LUMINANCE8
#define GL_LUMINANCE8 0x8040
#endif //GL_LUMINANCE8
#ifndef GL_LUMINANCE12
#define GL_LUMINANCE12 0x8041
#endif //GL_LUMINANCE12
#ifndef GL_LUMINANCE16
#define GL_LUMINANCE16 0x8042
#endif //GL_LUMINANCE16
#ifndef GL_LUMINANCE4_ALPHA4
#define GL_LUMINANCE4_ALPHA4 0x8043
#endif //GL_LUMINANCE4_ALPHA4
#ifndef GL_LUMINANCE6_ALPHA2
#define GL_LUMINANCE6_ALPHA2 0x8044
#endif //GL_LUMINANCE6_ALPHA2
#ifndef GL_LUMINANCE8_ALPHA8
#define GL_LUMINANCE8_ALPHA8 0x8045
#endif //GL_LUMINANCE8_ALPHA8
#ifndef GL_LUMINANCE12_ALPHA4
#define GL_LUMINANCE12_ALPHA4 0x8046
#endif //GL_LUMINANCE12_ALPHA4
#ifndef GL_LUMINANCE12_ALPHA12
#define GL_LUMINANCE12_ALPHA12 0x8047
#endif //GL_LUMINANCE12_ALPHA12
#ifndef GL_LUMINANCE16_ALPHA16
#define GL_LUMINANCE16_ALPHA16 0x8048
#endif //GL_LUMINANCE16_ALPHA16
#ifndef GL_INTENSITY
#define GL_INTENSITY 0x8049
#endif //GL_INTENSITY
#ifndef GL_INTENSITY4
#define GL_INTENSITY4 0x804A
#endif //GL_INTENSITY4
#ifndef GL_INTENSITY8
#define GL_INTENSITY8 0x804B
#endif //GL_INTENSITY8
#ifndef GL_INTENSITY12
#define GL_INTENSITY12 0x804C
#endif //GL_INTENSITY12
#ifndef GL_INTENSITY16
#define GL_INTENSITY16 0x804D
#endif //GL_INTENSITY16
#ifndef GL_RGB4
#define GL_RGB4 0x804F
#endif //GL_RGB4
#ifndef GL_RGB5
#define GL_RGB5 0x8050
#endif //GL_RGB5
#ifndef GL_RGB8
#define GL_RGB8 0x8051
#endif //GL_RGB8
#ifndef GL_RGB10
#define GL_RGB10 0x8052
#endif //GL_RGB10
#ifndef GL_RGB12
#define GL_RGB12 0x8053
#endif //GL_RGB12
#ifndef GL_RGB16
#define GL_RGB16 0x8054
#endif //GL_RGB16
#ifndef GL_RGBA2
#define GL_RGBA2 0x8055
#endif //GL_RGBA2
#ifndef GL_RGBA4
#define GL_RGBA4 0x8056
#endif //GL_RGBA4
#ifndef GL_RGB5_A1
#define GL_RGB5_A1 0x8057
#endif //GL_RGB5_A1
#ifndef GL_RGBA8
#define GL_RGBA8 0x8058
#endif //GL_RGBA8
#ifndef GL_RGB10_A2
#define GL_RGB10_A2 0x8059
#endif //GL_RGB10_A2
#ifndef GL_RGBA12
#define GL_RGBA12 0x805A
#endif //GL_RGBA12
#ifndef GL_RGBA16
#define GL_RGBA16 0x805B
#endif //GL_RGBA16
#ifndef GL_TEXTURE_RED_SIZE
#define GL_TEXTURE_RED_SIZE 0x805C
#endif //GL_TEXTURE_RED_SIZE
#ifndef GL_TEXTURE_GREEN_SIZE
#define GL_TEXTURE_GREEN_SIZE 0x805D
#endif //GL_TEXTURE_GREEN_SIZE
#ifndef GL_TEXTURE_BLUE_SIZE
#define GL_TEXTURE_BLUE_SIZE 0x805E
#endif //GL_TEXTURE_BLUE_SIZE
#ifndef GL_TEXTURE_ALPHA_SIZE
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#endif //GL_TEXTURE_ALPHA_SIZE
#ifndef GL_TEXTURE_LUMINANCE_SIZE
#define GL_TEXTURE_LUMINANCE_SIZE 0x8060
#endif //GL_TEXTURE_LUMINANCE_SIZE
#ifndef GL_TEXTURE_INTENSITY_SIZE
#define GL_TEXTURE_INTENSITY_SIZE 0x8061
#endif //GL_TEXTURE_INTENSITY_SIZE
#ifndef GL_PROXY_TEXTURE_1D
#define GL_PROXY_TEXTURE_1D 0x8063
#endif //GL_PROXY_TEXTURE_1D
#ifndef GL_PROXY_TEXTURE_2D
#define GL_PROXY_TEXTURE_2D 0x8064
#endif //GL_PROXY_TEXTURE_2D
#ifndef GL_TEXTURE_PRIORITY
#define GL_TEXTURE_PRIORITY 0x8066
#endif //GL_TEXTURE_PRIORITY
#ifndef GL_TEXTURE_RESIDENT
#define GL_TEXTURE_RESIDENT 0x8067
#endif //GL_TEXTURE_RESIDENT
#ifndef GL_TEXTURE_BINDING_1D
#define GL_TEXTURE_BINDING_1D 0x8068
#endif //GL_TEXTURE_BINDING_1D
#ifndef GL_TEXTURE_BINDING_2D
#define GL_TEXTURE_BINDING_2D 0x8069
#endif //GL_TEXTURE_BINDING_2D
#ifndef GL_VERTEX_ARRAY
#define GL_VERTEX_ARRAY 0x8074
#endif //GL_VERTEX_ARRAY
#ifndef GL_NORMAL_ARRAY
#define GL_NORMAL_ARRAY 0x8075
#endif //GL_NORMAL_ARRAY
#ifndef GL_COLOR_ARRAY
#define GL_COLOR_ARRAY 0x8076
#endif //GL_COLOR_ARRAY
#ifndef GL_INDEX_ARRAY
#define GL_INDEX_ARRAY 0x8077
#endif //GL_INDEX_ARRAY
#ifndef GL_TEXTURE_COORD_ARRAY
#define GL_TEXTURE_COORD_ARRAY 0x8078
#endif //GL_TEXTURE_COORD_ARRAY
#ifndef GL_EDGE_FLAG_ARRAY
#define GL_EDGE_FLAG_ARRAY 0x8079
#endif //GL_EDGE_FLAG_ARRAY
#ifndef GL_VERTEX_ARRAY_SIZE
#define GL_VERTEX_ARRAY_SIZE 0x807A
#endif //GL_VERTEX_ARRAY_SIZE
#ifndef GL_VERTEX_ARRAY_TYPE
#define GL_VERTEX_ARRAY_TYPE 0x807B
#endif //GL_VERTEX_ARRAY_TYPE
#ifndef GL_VERTEX_ARRAY_STRIDE
#define GL_VERTEX_ARRAY_STRIDE 0x807C
#endif //GL_VERTEX_ARRAY_STRIDE
#ifndef GL_NORMAL_ARRAY_TYPE
#define GL_NORMAL_ARRAY_TYPE 0x807E
#endif //GL_NORMAL_ARRAY_TYPE
#ifndef GL_NORMAL_ARRAY_STRIDE
#define GL_NORMAL_ARRAY_STRIDE 0x807F
#endif //GL_NORMAL_ARRAY_STRIDE
#ifndef GL_COLOR_ARRAY_SIZE
#define GL_COLOR_ARRAY_SIZE 0x8081
#endif //GL_COLOR_ARRAY_SIZE
#ifndef GL_COLOR_ARRAY_TYPE
#define GL_COLOR_ARRAY_TYPE 0x8082
#endif //GL_COLOR_ARRAY_TYPE
#ifndef GL_COLOR_ARRAY_STRIDE
#define GL_COLOR_ARRAY_STRIDE 0x8083
#endif //GL_COLOR_ARRAY_STRIDE
#ifndef GL_INDEX_ARRAY_TYPE
#define GL_INDEX_ARRAY_TYPE 0x8085
#endif //GL_INDEX_ARRAY_TYPE
#ifndef GL_INDEX_ARRAY_STRIDE
#define GL_INDEX_ARRAY_STRIDE 0x8086
#endif //GL_INDEX_ARRAY_STRIDE
#ifndef GL_TEXTURE_COORD_ARRAY_SIZE
#define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088
#endif //GL_TEXTURE_COORD_ARRAY_SIZE
#ifndef GL_TEXTURE_COORD_ARRAY_TYPE
#define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089
#endif //GL_TEXTURE_COORD_ARRAY_TYPE
#ifndef GL_TEXTURE_COORD_ARRAY_STRIDE
#define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A
#endif //GL_TEXTURE_COORD_ARRAY_STRIDE
#ifndef GL_EDGE_FLAG_ARRAY_STRIDE
#define GL_EDGE_FLAG_ARRAY_STRIDE 0x808C
#endif //GL_EDGE_FLAG_ARRAY_STRIDE
#ifndef GL_VERTEX_ARRAY_POINTER
#define GL_VERTEX_ARRAY_POINTER 0x808E
#endif //GL_VERTEX_ARRAY_POINTER
#ifndef GL_NORMAL_ARRAY_POINTER
#define GL_NORMAL_ARRAY_POINTER 0x808F
#endif //GL_NORMAL_ARRAY_POINTER
#ifndef GL_COLOR_ARRAY_POINTER
#define GL_COLOR_ARRAY_POINTER 0x8090
#endif //GL_COLOR_ARRAY_POINTER
#ifndef GL_INDEX_ARRAY_POINTER
#define GL_INDEX_ARRAY_POINTER 0x8091
#endif //GL_INDEX_ARRAY_POINTER
#ifndef GL_TEXTURE_COORD_ARRAY_POINTER
#define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092
#endif //GL_TEXTURE_COORD_ARRAY_POINTER
#ifndef GL_EDGE_FLAG_ARRAY_POINTER
#define GL_EDGE_FLAG_ARRAY_POINTER 0x8093
#endif //GL_EDGE_FLAG_ARRAY_POINTER
#ifndef GL_ALL_ATTRIB_BITS
#define GL_ALL_ATTRIB_BITS 0xFFFFFFFF
#endif //GL_ALL_ATTRIB_BITS
#ifndef GL_CLIENT_ALL_ATTRIB_BITS
#define GL_CLIENT_ALL_ATTRIB_BITS 0xFFFFFFFF
#endif //GL_CLIENT_ALL_ATTRIB_BITS
#ifndef GL_ONE
#define GL_ONE 1
#endif //GL_ONE
#ifndef GL_TRUE
#define GL_TRUE 1
#endif //GL_TRUE
extern "C" {
extern void glAccum(GLenum,GLfloat);
extern void glAlphaFunc(GLenum,GLfloat);
extern GLboolean glAreTexturesResident(GLsizei,const GLuint *,GLboolean *);
extern void glArrayElement(GLint);
extern void glBegin(GLenum);
extern void glBindTexture(GLenum,GLuint);
extern void glBitmap(GLsizei,GLsizei,GLfloat,GLfloat,GLfloat,GLfloat,const GLubyte *);
extern void glBlendFunc(GLenum,GLenum);
extern void glCallList(GLuint);
extern void glCallLists(GLsizei,GLenum,const void *);
extern void glClear(GLbitfield);
extern void glClearAccum(GLfloat,GLfloat,GLfloat,GLfloat);
extern void glClearColor(GLfloat,GLfloat,GLfloat,GLfloat);
extern void glClearDepth(GLdouble);
extern void glClearIndex(GLfloat);
extern void glClearStencil(GLint);
extern void glClipPlane(GLenum,const GLdouble *);
extern void glColor3b(GLbyte,GLbyte,GLbyte);
extern void glColor3bv(const GLbyte *);
extern void glColor3d(GLdouble,GLdouble,GLdouble);
extern void glColor3dv(const GLdouble *);
extern void glColor3f(GLfloat,GLfloat,GLfloat);
extern void glColor3fv(const GLfloat *);
extern void glColor3i(GLint,GLint,GLint);
extern void glColor3iv(const GLint *);
extern void glColor3s(GLshort,GLshort,GLshort);
extern void glColor3sv(const GLshort *);
extern void glColor3ub(GLubyte,GLubyte,GLubyte);
extern void glColor3ubv(const GLubyte *);
extern void glColor3ui(GLuint,GLuint,GLuint);
extern void glColor3uiv(const GLuint *);
extern void glColor3us(GLushort,GLushort,GLushort);
extern void glColor3usv(const GLushort *);
extern void glColor4b(GLbyte,GLbyte,GLbyte,GLbyte);
extern void glColor4bv(const GLbyte *);
extern void glColor4d(GLdouble,GLdouble,GLdouble,GLdouble);
extern void glColor4dv(const GLdouble *);
extern void glColor4f(GLfloat,GLfloat,GLfloat,GLfloat);
extern void glColor4fv(const GLfloat *);
extern void glColor4i(GLint,GLint,GLint,GLint);
extern void glColor4iv(const GLint *);
extern void glColor4s(GLshort,GLshort,GLshort,GLshort);
extern void glColor4sv(const GLshort *);
extern void glColor4ub(GLubyte,GLubyte,GLubyte,GLubyte);
extern void glColor4ubv(const GLubyte *);
extern void glColor4ui(GLuint,GLuint,GLuint,GLuint);
extern void glColor4uiv(const GLuint *);
extern void glColor4us(GLushort,GLushort,GLushort,GLushort);
extern void glColor4usv(const GLushort *);
extern void glColorMask(GLboolean,GLboolean,GLboolean,GLboolean);
extern void glColorMaterial(GLenum,GLenum);
extern void glColorPointer(GLint,GLenum,GLsizei,const void *);
extern void glCopyPixels(GLint,GLint,GLsizei,GLsizei,GLenum);
extern void glCopyTexImage1D(GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLint);
extern void glCopyTexImage2D(GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLsizei,GLint);
extern void glCopyTexSubImage1D(GLenum,GLint,GLint,GLint,GLint,GLsizei);
extern void glCopyTexSubImage2D(GLenum,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
extern void glCullFace(GLenum);
extern void glDeleteLists(GLuint,GLsizei);
extern void glDeleteTextures(GLsizei,const GLuint *);
extern void glDepthFunc(GLenum);
extern void glDepthMask(GLboolean);
extern void glDepthRange(GLdouble,GLdouble);
extern void glDisable(GLenum);
extern void glDisableClientState(GLenum);
extern void glDrawArrays(GLenum,GLint,GLsizei);
extern void glDrawBuffer(GLenum);
extern void glDrawElements(GLenum,GLsizei,GLenum,const void *);
extern void glDrawPixels(GLsizei,GLsizei,GLenum,GLenum,const void *);
extern void glEdgeFlag(GLboolean);
extern void glEdgeFlagPointer(GLsizei,const void *);
extern void glEdgeFlagv(const GLboolean *);
extern void glEnable(GLenum);
extern void glEnableClientState(GLenum);
extern void glEnd();
extern void glEndList();
extern void glEvalCoord1d(GLdouble);
extern void glEvalCoord1dv(const GLdouble *);
extern void glEvalCoord1f(GLfloat);
extern void glEvalCoord1fv(const GLfloat *);
extern void glEvalCoord2d(GLdouble,GLdouble);
extern void glEvalCoord2dv(const GLdouble *);
extern void glEvalCoord2f(GLfloat,GLfloat);
extern void glEvalCoord2fv(const GLfloat *);
extern void glEvalMesh1(GLenum,GLint,GLint);
extern void glEvalMesh2(GLenum,GLint,GLint,GLint,GLint);
extern void glEvalPoint1(GLint);
extern void glEvalPoint2(GLint,GLint);
extern void glFeedbackBuffer(GLsizei,GLenum,GLfloat *);
extern void glFinish();
extern void glFlush();
extern void glFogf(GLenum,GLfloat);
extern void glFogfv(GLenum,const GLfloat *);
extern void glFogi(GLenum,GLint);
extern void glFogiv(GLenum,const GLint *);
extern void glFrontFace(GLenum);
extern void glFrustum(GLdouble,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble);
extern GLuint glGenLists(GLsizei);
extern void glGenTextures(GLsizei,GLuint *);
extern void glGetBooleanv(GLenum,GLboolean *);
extern void glGetClipPlane(GLenum,GLdouble *);
extern void glGetDoublev(GLenum,GLdouble *);
extern GLenum glGetError();
extern void glGetFloatv(GLenum,GLfloat *);
extern void glGetIntegerv(GLenum,GLint *);
extern void glGetLightfv(GLenum,GLenum,GLfloat *);
extern void glGetLightiv(GLenum,GLenum,GLint *);
extern void glGetMapdv(GLenum,GLenum,GLdouble *);
extern void glGetMapfv(GLenum,GLenum,GLfloat *);
extern void glGetMapiv(GLenum,GLenum,GLint *);
extern void glGetMaterialfv(GLenum,GLenum,GLfloat *);
extern void glGetMaterialiv(GLenum,GLenum,GLint *);
extern void glGetPixelMapfv(GLenum,GLfloat *);
extern void glGetPixelMapuiv(GLenum,GLuint *);
extern void glGetPixelMapusv(GLenum,GLushort *);
extern void glGetPointerv(GLenum,void **);
extern void glGetPolygonStipple(GLubyte *);
extern const GLubyte * glGetString(GLenum);
extern void glGetTexEnvfv(GLenum,GLenum,GLfloat *);
extern void glGetTexEnviv(GLenum,GLenum,GLint *);
extern void glGetTexGendv(GLenum,GLenum,GLdouble *);
extern void glGetTexGenfv(GLenum,GLenum,GLfloat *);
extern void glGetTexGeniv(GLenum,GLenum,GLint *);
extern void glGetTexImage(GLenum,GLint,GLenum,GLenum,void *);
extern void glGetTexLevelParameterfv(GLenum,GLint,GLenum,GLfloat *);
extern void glGetTexLevelParameteriv(GLenum,GLint,GLenum,GLint *);
extern void glGetTexParameterfv(GLenum,GLenum,GLfloat *);
extern void glGetTexParameteriv(GLenum,GLenum,GLint *);
extern void glHint(GLenum,GLenum);
extern void glIndexMask(GLuint);
extern void glIndexPointer(GLenum,GLsizei,const void *);
extern void glIndexd(GLdouble);
extern void glIndexdv(const GLdouble *);
extern void glIndexf(GLfloat);
extern void glIndexfv(const GLfloat *);
extern void glIndexi(GLint);
extern void glIndexiv(const GLint *);
extern void glIndexs(GLshort);
extern void glIndexsv(const GLshort *);
extern void glIndexub(GLubyte);
extern void glIndexubv(const GLubyte *);
extern void glInitNames();
extern void glInterleavedArrays(GLenum,GLsizei,const void *);
extern GLboolean glIsEnabled(GLenum);
extern GLboolean glIsList(GLuint);
extern GLboolean glIsTexture(GLuint);
extern void glLightModelf(GLenum,GLfloat);
extern void glLightModelfv(GLenum,const GLfloat *);
extern void glLightModeli(GLenum,GLint);
extern void glLightModeliv(GLenum,const GLint *);
extern void glLightf(GLenum,GLenum,GLfloat);
extern void glLightfv(GLenum,GLenum,const GLfloat *);
extern void glLighti(GLenum,GLenum,GLint);
extern void glLightiv(GLenum,GLenum,const GLint *);
extern void glLineStipple(GLint,GLushort);
extern void glLineWidth(GLfloat);
extern void glListBase(GLuint);
extern void glLoadIdentity();
extern void glLoadMatrixd(const GLdouble *);
extern void glLoadMatrixf(const GLfloat *);
extern void glLoadName(GLuint);
extern void glLogicOp(GLenum);
extern void glMap1d(GLenum,GLdouble,GLdouble,GLint,GLint,const GLdouble *);
extern void glMap1f(GLenum,GLfloat,GLfloat,GLint,GLint,const GLfloat *);
extern void glMap2d(GLenum,GLdouble,GLdouble,GLint,GLint,GLdouble,GLdouble,GLint,GLint,const GLdouble *);
extern void glMap2f(GLenum,GLfloat,GLfloat,GLint,GLint,GLfloat,GLfloat,GLint,GLint,const GLfloat *);
extern void glMapGrid1d(GLint,GLdouble,GLdouble);
extern void glMapGrid1f(GLint,GLfloat,GLfloat);
extern void glMapGrid2d(GLint,GLdouble,GLdouble,GLint,GLdouble,GLdouble);
extern void glMapGrid2f(GLint,GLfloat,GLfloat,GLint,GLfloat,GLfloat);
extern void glMaterialf(GLenum,GLenum,GLfloat);
extern void glMaterialfv(GLenum,GLenum,const GLfloat *);
extern void glMateriali(GLenum,GLenum,GLint);
extern void glMaterialiv(GLenum,GLenum,const GLint *);
extern void glMatrixMode(GLenum);
extern void glMultMatrixd(const GLdouble *);
extern void glMultMatrixf(const GLfloat *);
extern void glNewList(GLuint,GLenum);
extern void glNormal3b(GLbyte,GLbyte,GLbyte);
extern void glNormal3bv(const GLbyte *);
extern void glNormal3d(GLdouble,GLdouble,GLdouble);
extern void glNormal3dv(const GLdouble *);
extern void glNormal3f(GLfloat,GLfloat,GLfloat);
extern void glNormal3fv(const GLfloat *);
extern void glNormal3i(GLint,GLint,GLint);
extern void glNormal3iv(const GLint *);
extern void glNormal3s(GLshort,GLshort,GLshort);
extern void glNormal3sv(const GLshort *);
extern void glNormalPointer(GLenum,GLsizei,const void *);
extern void glOrtho(GLdouble,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble);
extern void glPassThrough(GLfloat);
extern void glPixelMapfv(GLenum,GLsizei,const GLfloat *);
extern void glPixelMapuiv(GLenum,GLsizei,const GLuint *);
extern void glPixelMapusv(GLenum,GLsizei,const GLushort *);
extern void glPixelStoref(GLenum,GLfloat);
extern void glPixelStorei(GLenum,GLint);
extern void glPixelTransferf(GLenum,GLfloat);
extern void glPixelTransferi(GLenum,GLint);
extern void glPixelZoom(GLfloat,GLfloat);
extern void glPointSize(GLfloat);
extern void glPolygonMode(GLenum,GLenum);
extern void glPolygonOffset(GLfloat,GLfloat);
extern void glPolygonStipple(const GLubyte *);
extern void glPopAttrib();
extern void glPopClientAttrib();
extern void glPopMatrix();
extern void glPopName();
extern void glPrioritizeTextures(GLsizei,const GLuint *,const GLfloat *);
extern void glPushAttrib(GLbitfield);
extern void glPushClientAttrib(GLbitfield);
extern void glPushMatrix();
extern void glPushName(GLuint);
extern void glRasterPos2d(GLdouble,GLdouble);
extern void glRasterPos2dv(const GLdouble *);
extern void glRasterPos2f(GLfloat,GLfloat);
extern void glRasterPos2fv(const GLfloat *);
extern void glRasterPos2i(GLint,GLint);
extern void glRasterPos2iv(const GLint *);
extern void glRasterPos2s(GLshort,GLshort);
extern void glRasterPos2sv(const GLshort *);
extern void glRasterPos3d(GLdouble,GLdouble,GLdouble);
extern void glRasterPos3dv(const GLdouble *);
extern void glRasterPos3f(GLfloat,GLfloat,GLfloat);
extern void glRasterPos3fv(const GLfloat *);
extern void glRasterPos3i(GLint,GLint,GLint);
extern void glRasterPos3iv(const GLint *);
extern void glRasterPos3s(GLshort,GLshort,GLshort);
extern void glRasterPos3sv(const GLshort *);
extern void glRasterPos4d(GLdouble,GLdouble,GLdouble,GLdouble);
extern void glRasterPos4dv(const GLdouble *);
extern void glRasterPos4f(GLfloat,GLfloat,GLfloat,GLfloat);
extern void glRasterPos4fv(const GLfloat *);
extern void glRasterPos4i(GLint,GLint,GLint,GLint);
extern void glRasterPos4iv(const GLint *);
extern void glRasterPos4s(GLshort,GLshort,GLshort,GLshort);
extern void glRasterPos4sv(const GLshort *);
extern void glReadBuffer(GLenum);
extern void glReadPixels(GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,void *);
extern void glRectd(GLdouble,GLdouble,GLdouble,GLdouble);
extern void glRectdv(const GLdouble *,const GLdouble *);
extern void glRectf(GLfloat,GLfloat,GLfloat,GLfloat);
extern void glRectfv(const GLfloat *,const GLfloat *);
extern void glRecti(GLint,GLint,GLint,GLint);
extern void glRectiv(const GLint *,const GLint *);
extern void glRects(GLshort,GLshort,GLshort,GLshort);
extern void glRectsv(const GLshort *,const GLshort *);
extern GLint glRenderMode(GLenum);
extern void glRotated(GLdouble,GLdouble,GLdouble,GLdouble);
extern void glRotatef(GLfloat,GLfloat,GLfloat,GLfloat);
extern void glScaled(GLdouble,GLdouble,GLdouble);
extern void glScalef(GLfloat,GLfloat,GLfloat);
extern void glScissor(GLint,GLint,GLsizei,GLsizei);
extern void glSelectBuffer(GLsizei,GLuint *);
extern void glShadeModel(GLenum);
extern void glStencilFunc(GLenum,GLint,GLuint);
extern void glStencilMask(GLuint);
extern void glStencilOp(GLenum,GLenum,GLenum);
extern void glTexCoord1d(GLdouble);
extern void glTexCoord1dv(const GLdouble *);
extern void glTexCoord1f(GLfloat);
extern void glTexCoord1fv(const GLfloat *);
extern void glTexCoord1i(GLint);
extern void glTexCoord1iv(const GLint *);
extern void glTexCoord1s(GLshort);
extern void glTexCoord1sv(const GLshort *);
extern void glTexCoord2d(GLdouble,GLdouble);
extern void glTexCoord2dv(const GLdouble *);
extern void glTexCoord2f(GLfloat,GLfloat);
extern void glTexCoord2fv(const GLfloat *);
extern void glTexCoord2i(GLint,GLint);
extern void glTexCoord2iv(const GLint *);
extern void glTexCoord2s(GLshort,GLshort);
extern void glTexCoord2sv(const GLshort *);
extern void glTexCoord3d(GLdouble,GLdouble,GLdouble);
extern void glTexCoord3dv(const GLdouble *);
extern void glTexCoord3f(GLfloat,GLfloat,GLfloat);
extern void glTexCoord3fv(const GLfloat *);
extern void glTexCoord3i(GLint,GLint,GLint);
extern void glTexCoord3iv(const GLint *);
extern void glTexCoord3s(GLshort,GLshort,GLshort);
extern void glTexCoord3sv(const GLshort *);
extern void glTexCoord4d(GLdouble,GLdouble,GLdouble,GLdouble);
extern void glTexCoord4dv(const GLdouble *);
extern void glTexCoord4f(GLfloat,GLfloat,GLfloat,GLfloat);
extern void glTexCoord4fv(const GLfloat *);
extern void glTexCoord4i(GLint,GLint,GLint,GLint);
extern void glTexCoord4iv(const GLint *);
extern void glTexCoord4s(GLshort,GLshort,GLshort,GLshort);
extern void glTexCoord4sv(const GLshort *);
extern void glTexCoordPointer(GLint,GLenum,GLsizei,const void *);
extern void glTexEnvf(GLenum,GLenum,GLfloat);
extern void glTexEnvfv(GLenum,GLenum,const GLfloat *);
extern void glTexEnvi(GLenum,GLenum,GLint);
extern void glTexEnviv(GLenum,GLenum,const GLint *);
extern void glTexGend(GLenum,GLenum,GLdouble);
extern void glTexGendv(GLenum,GLenum,const GLdouble *);
extern void glTexGenf(GLenum,GLenum,GLfloat);
extern void glTexGenfv(GLenum,GLenum,const GLfloat *);
extern void glTexGeni(GLenum,GLenum,GLint);
extern void glTexGeniv(GLenum,GLenum,const GLint *);
extern void glTexImage1D(GLenum,GLint,GLint,GLsizei,GLint,GLenum,GLenum,const void *);
extern void glTexImage2D(GLenum,GLint,GLint,GLsizei,GLsizei,GLint,GLenum,GLenum,const void *);
extern void glTexParameterf(GLenum,GLenum,GLfloat);
extern void glTexParameterfv(GLenum,GLenum,const GLfloat *);
extern void glTexParameteri(GLenum,GLenum,GLint);
extern void glTexParameteriv(GLenum,GLenum,const GLint *);
extern void glTexSubImage1D(GLenum,GLint,GLint,GLsizei,GLenum,GLenum,const void *);
extern void glTexSubImage2D(GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,const void *);
extern void glTranslated(GLdouble,GLdouble,GLdouble);
extern void glTranslatef(GLfloat,GLfloat,GLfloat);
extern void glVertex2d(GLdouble,GLdouble);
extern void glVertex2dv(const GLdouble *);
extern void glVertex2f(GLfloat,GLfloat);
extern void glVertex2fv(const GLfloat *);
extern void glVertex2i(GLint,GLint);
extern void glVertex2iv(const GLint *);
extern void glVertex2s(GLshort,GLshort);
extern void glVertex2sv(const GLshort *);
extern void glVertex3d(GLdouble,GLdouble,GLdouble);
extern void glVertex3dv(const GLdouble *);
extern void glVertex3f(GLfloat,GLfloat,GLfloat);
extern void glVertex3fv(const GLfloat *);
extern void glVertex3i(GLint,GLint,GLint);
extern void glVertex3iv(const GLint *);
extern void glVertex3s(GLshort,GLshort,GLshort);
extern void glVertex3sv(const GLshort *);
extern void glVertex4d(GLdouble,GLdouble,GLdouble,GLdouble);
extern void glVertex4dv(const GLdouble *);
extern void glVertex4f(GLfloat,GLfloat,GLfloat,GLfloat);
extern void glVertex4fv(const GLfloat *);
extern void glVertex4i(GLint,GLint,GLint,GLint);
extern void glVertex4iv(const GLint *);
extern void glVertex4s(GLshort,GLshort,GLshort,GLshort);
extern void glVertex4sv(const GLshort *);
extern void glVertexPointer(GLint,GLenum,GLsizei,const void *);
extern void glViewport(GLint,GLint,GLsizei,GLsizei);
}
namespace gl{

static inline void Accum(GLenum op1,GLfloat value1)
{
	 glAccum(op1,value1);
}
static inline void AlphaFunc(GLenum func1,GLfloat ref1)
{
	 glAlphaFunc(func1,ref1);
}
static inline GLboolean AreTexturesResident(GLsizei n1,const GLuint * textures1,GLboolean * residences1)
{
	return glAreTexturesResident(n1,textures1,residences1);
}
static inline void ArrayElement(GLint i1)
{
	 glArrayElement(i1);
}
static inline void Begin(GLenum mode1)
{
	 glBegin(mode1);
}
static inline void BindTexture(GLenum target1,GLuint texture1)
{
	 glBindTexture(target1,texture1);
}
static inline void Bitmap(GLsizei width1,GLsizei height1,GLfloat xorig1,GLfloat yorig1,GLfloat xmove1,GLfloat ymove1,const GLubyte * bitmap1)
{
	 glBitmap(width1,height1,xorig1,yorig1,xmove1,ymove1,bitmap1);
}
static inline void BlendFunc(GLenum sfactor1,GLenum dfactor1)
{
	 glBlendFunc(sfactor1,dfactor1);
}
static inline void CallList(GLuint list1)
{
	 glCallList(list1);
}
static inline void CallLists(GLsizei n1,GLenum type1,const void * lists1)
{
	 glCallLists(n1,type1,lists1);
}
static inline void Clear(GLbitfield mask1)
{
	 glClear(mask1);
}
static inline void ClearAccum(GLfloat red1,GLfloat green1,GLfloat blue1,GLfloat alpha1)
{
	 glClearAccum(red1,green1,blue1,alpha1);
}
static inline void ClearColor(GLfloat red1,GLfloat green1,GLfloat blue1,GLfloat alpha1)
{
	 glClearColor(red1,green1,blue1,alpha1);
}
static inline void ClearDepth(GLdouble depth1)
{
	 glClearDepth(depth1);
}
static inline void ClearIndex(GLfloat c1)
{
	 glClearIndex(c1);
}
static inline void ClearStencil(GLint s1)
{
	 glClearStencil(s1);
}
static inline void ClipPlane(GLenum plane1,const GLdouble * equation1)
{
	 glClipPlane(plane1,equation1);
}
static inline void Color3b(GLbyte red1,GLbyte green1,GLbyte blue1)
{
	 glColor3b(red1,green1,blue1);
}
static inline void Color3bv(const GLbyte * v1)
{
	 glColor3bv(v1);
}
static inline void Color3d(GLdouble red1,GLdouble green1,GLdouble blue1)
{
	 glColor3d(red1,green1,blue1);
}
static inline void Color3dv(const GLdouble * v1)
{
	 glColor3dv(v1);
}
static inline void Color3f(GLfloat red1,GLfloat green1,GLfloat blue1)
{
	 glColor3f(red1,green1,blue1);
}
static inline void Color3fv(const GLfloat * v1)
{
	 glColor3fv(v1);
}
static inline void Color3i(GLint red1,GLint green1,GLint blue1)
{
	 glColor3i(red1,green1,blue1);
}
static inline void Color3iv(const GLint * v1)
{
	 glColor3iv(v1);
}
static inline void Color3s(GLshort red1,GLshort green1,GLshort blue1)
{
	 glColor3s(red1,green1,blue1);
}
static inline void Color3sv(const GLshort * v1)
{
	 glColor3sv(v1);
}
static inline void Color3ub(GLubyte red1,GLubyte green1,GLubyte blue1)
{
	 glColor3ub(red1,green1,blue1);
}
static inline void Color3ubv(const GLubyte * v1)
{
	 glColor3ubv(v1);
}
static inline void Color3ui(GLuint red1,GLuint green1,GLuint blue1)
{
	 glColor3ui(red1,green1,blue1);
}
static inline void Color3uiv(const GLuint * v1)
{
	 glColor3uiv(v1);
}
static inline void Color3us(GLushort red1,GLushort green1,GLushort blue1)
{
	 glColor3us(red1,green1,blue1);
}
static inline void Color3usv(const GLushort * v1)
{
	 glColor3usv(v1);
}
static inline void Color4b(GLbyte red1,GLbyte green1,GLbyte blue1,GLbyte alpha1)
{
	 glColor4b(red1,green1,blue1,alpha1);
}
static inline void Color4bv(const GLbyte * v1)
{
	 glColor4bv(v1);
}
static inline void Color4d(GLdouble red1,GLdouble green1,GLdouble blue1,GLdouble alpha1)
{
	 glColor4d(red1,green1,blue1,alpha1);
}
static inline void Color4dv(const GLdouble * v1)
{
	 glColor4dv(v1);
}
static inline void Color4f(GLfloat red1,GLfloat green1,GLfloat blue1,GLfloat alpha1)
{
	 glColor4f(red1,green1,blue1,alpha1);
}
static inline void Color4fv(const GLfloat * v1)
{
	 glColor4fv(v1);
}
static inline void Color4i(GLint red1,GLint green1,GLint blue1,GLint alpha1)
{
	 glColor4i(red1,green1,blue1,alpha1);
}
static inline void Color4iv(const GLint * v1)
{
	 glColor4iv(v1);
}
static inline void Color4s(GLshort red1,GLshort green1,GLshort blue1,GLshort alpha1)
{
	 glColor4s(red1,green1,blue1,alpha1);
}
static inline void Color4sv(const GLshort * v1)
{
	 glColor4sv(v1);
}
static inline void Color4ub(GLubyte red1,GLubyte green1,GLubyte blue1,GLubyte alpha1)
{
	 glColor4ub(red1,green1,blue1,alpha1);
}
static inline void Color4ubv(const GLubyte * v1)
{
	 glColor4ubv(v1);
}
static inline void Color4ui(GLuint red1,GLuint green1,GLuint blue1,GLuint alpha1)
{
	 glColor4ui(red1,green1,blue1,alpha1);
}
static inline void Color4uiv(const GLuint * v1)
{
	 glColor4uiv(v1);
}
static inline void Color4us(GLushort red1,GLushort green1,GLushort blue1,GLushort alpha1)
{
	 glColor4us(red1,green1,blue1,alpha1);
}
static inline void Color4usv(const GLushort * v1)
{
	 glColor4usv(v1);
}
static inline void ColorMask(GLboolean red1,GLboolean green1,GLboolean blue1,GLboolean alpha1)
{
	 glColorMask(red1,green1,blue1,alpha1);
}
static inline void ColorMaterial(GLenum face1,GLenum mode1)
{
	 glColorMaterial(face1,mode1);
}
static inline void ColorPointer(GLint size1,GLenum type1,GLsizei stride1,const void * pointer1)
{
	 glColorPointer(size1,type1,stride1,pointer1);
}
static inline void CopyPixels(GLint x1,GLint y1,GLsizei width1,GLsizei height1,GLenum type1)
{
	 glCopyPixels(x1,y1,width1,height1,type1);
}
static inline void CopyTexImage1D(GLenum target1,GLint level1,GLenum internalformat1,GLint x1,GLint y1,GLsizei width1,GLint border1)
{
	 glCopyTexImage1D(target1,level1,internalformat1,x1,y1,width1,border1);
}
static inline void CopyTexImage2D(GLenum target1,GLint level1,GLenum internalformat1,GLint x1,GLint y1,GLsizei width1,GLsizei height1,GLint border1)
{
	 glCopyTexImage2D(target1,level1,internalformat1,x1,y1,width1,height1,border1);
}
static inline void CopyTexSubImage1D(GLenum target1,GLint level1,GLint xoffset1,GLint x1,GLint y1,GLsizei width1)
{
	 glCopyTexSubImage1D(target1,level1,xoffset1,x1,y1,width1);
}
static inline void CopyTexSubImage2D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
	 glCopyTexSubImage2D(target1,level1,xoffset1,yoffset1,x1,y1,width1,height1);
}
static inline void CullFace(GLenum mode1)
{
	 glCullFace(mode1);
}
static inline void DeleteLists(GLuint list1,GLsizei range1)
{
	 glDeleteLists(list1,range1);
}
static inline void DeleteTextures(GLsizei n1,const GLuint * textures1)
{
	 glDeleteTextures(n1,textures1);
}
static inline void DepthFunc(GLenum func1)
{
	 glDepthFunc(func1);
}
static inline void DepthMask(GLboolean flag1)
{
	 glDepthMask(flag1);
}
static inline void DepthRange(GLdouble near1,GLdouble far1)
{
	 glDepthRange(near1,far1);
}
static inline void Disable(GLenum cap1)
{
	 glDisable(cap1);
}
static inline void DisableClientState(GLenum array1)
{
	 glDisableClientState(array1);
}
static inline void DrawArrays(GLenum mode1,GLint first1,GLsizei count1)
{
	 glDrawArrays(mode1,first1,count1);
}
static inline void DrawBuffer(GLenum buf1)
{
	 glDrawBuffer(buf1);
}
static inline void DrawElements(GLenum mode1,GLsizei count1,GLenum type1,const void * indices1)
{
	 glDrawElements(mode1,count1,type1,indices1);
}
static inline void DrawPixels(GLsizei width1,GLsizei height1,GLenum format1,GLenum type1,const void * pixels1)
{
	 glDrawPixels(width1,height1,format1,type1,pixels1);
}
static inline void EdgeFlag(GLboolean flag1)
{
	 glEdgeFlag(flag1);
}
static inline void EdgeFlagPointer(GLsizei stride1,const void * pointer1)
{
	 glEdgeFlagPointer(stride1,pointer1);
}
static inline void EdgeFlagv(const GLboolean * flag1)
{
	 glEdgeFlagv(flag1);
}
static inline void Enable(GLenum cap1)
{
	 glEnable(cap1);
}
static inline void EnableClientState(GLenum array1)
{
	 glEnableClientState(array1);
}
static inline void End()
{
	 glEnd();
}
static inline void EndList()
{
	 glEndList();
}
static inline void EvalCoord1d(GLdouble u1)
{
	 glEvalCoord1d(u1);
}
static inline void EvalCoord1dv(const GLdouble * u1)
{
	 glEvalCoord1dv(u1);
}
static inline void EvalCoord1f(GLfloat u1)
{
	 glEvalCoord1f(u1);
}
static inline void EvalCoord1fv(const GLfloat * u1)
{
	 glEvalCoord1fv(u1);
}
static inline void EvalCoord2d(GLdouble u1,GLdouble v1)
{
	 glEvalCoord2d(u1,v1);
}
static inline void EvalCoord2dv(const GLdouble * u1)
{
	 glEvalCoord2dv(u1);
}
static inline void EvalCoord2f(GLfloat u1,GLfloat v1)
{
	 glEvalCoord2f(u1,v1);
}
static inline void EvalCoord2fv(const GLfloat * u1)
{
	 glEvalCoord2fv(u1);
}
static inline void EvalMesh1(GLenum mode1,GLint i11,GLint i21)
{
	 glEvalMesh1(mode1,i11,i21);
}
static inline void EvalMesh2(GLenum mode1,GLint i11,GLint i21,GLint j11,GLint j21)
{
	 glEvalMesh2(mode1,i11,i21,j11,j21);
}
static inline void EvalPoint1(GLint i1)
{
	 glEvalPoint1(i1);
}
static inline void EvalPoint2(GLint i1,GLint j1)
{
	 glEvalPoint2(i1,j1);
}
static inline void FeedbackBuffer(GLsizei size1,GLenum type1,GLfloat * buffer1)
{
	 glFeedbackBuffer(size1,type1,buffer1);
}
static inline void Finish()
{
	 glFinish();
}
static inline void Flush()
{
	 glFlush();
}
static inline void Fogf(GLenum pname1,GLfloat param1)
{
	 glFogf(pname1,param1);
}
static inline void Fogfv(GLenum pname1,const GLfloat * params1)
{
	 glFogfv(pname1,params1);
}
static inline void Fogi(GLenum pname1,GLint param1)
{
	 glFogi(pname1,param1);
}
static inline void Fogiv(GLenum pname1,const GLint * params1)
{
	 glFogiv(pname1,params1);
}
static inline void FrontFace(GLenum mode1)
{
	 glFrontFace(mode1);
}
static inline void Frustum(GLdouble left1,GLdouble right1,GLdouble bottom1,GLdouble top1,GLdouble zNear1,GLdouble zFar1)
{
	 glFrustum(left1,right1,bottom1,top1,zNear1,zFar1);
}
static inline GLuint GenLists(GLsizei range1)
{
	return glGenLists(range1);
}
static inline void GenTextures(GLsizei n1,GLuint * textures1)
{
	 glGenTextures(n1,textures1);
}
static inline void GetBooleanv(GLenum pname1,GLboolean * data1)
{
	 glGetBooleanv(pname1,data1);
}
static inline void GetClipPlane(GLenum plane1,GLdouble * equation1)
{
	 glGetClipPlane(plane1,equation1);
}
static inline void GetDoublev(GLenum pname1,GLdouble * data1)
{
	 glGetDoublev(pname1,data1);
}
static inline GLenum GetError()
{
	return glGetError();
}
static inline void GetFloatv(GLenum pname1,GLfloat * data1)
{
	 glGetFloatv(pname1,data1);
}
static inline void GetIntegerv(GLenum pname1,GLint * data1)
{
	 glGetIntegerv(pname1,data1);
}
static inline void GetLightfv(GLenum light1,GLenum pname1,GLfloat * params1)
{
	 glGetLightfv(light1,pname1,params1);
}
static inline void GetLightiv(GLenum light1,GLenum pname1,GLint * params1)
{
	 glGetLightiv(light1,pname1,params1);
}
static inline void GetMapdv(GLenum target1,GLenum query1,GLdouble * v1)
{
	 glGetMapdv(target1,query1,v1);
}
static inline void GetMapfv(GLenum target1,GLenum query1,GLfloat * v1)
{
	 glGetMapfv(target1,query1,v1);
}
static inline void GetMapiv(GLenum target1,GLenum query1,GLint * v1)
{
	 glGetMapiv(target1,query1,v1);
}
static inline void GetMaterialfv(GLenum face1,GLenum pname1,GLfloat * params1)
{
	 glGetMaterialfv(face1,pname1,params1);
}
static inline void GetMaterialiv(GLenum face1,GLenum pname1,GLint * params1)
{
	 glGetMaterialiv(face1,pname1,params1);
}
static inline void GetPixelMapfv(GLenum map1,GLfloat * values1)
{
	 glGetPixelMapfv(map1,values1);
}
static inline void GetPixelMapuiv(GLenum map1,GLuint * values1)
{
	 glGetPixelMapuiv(map1,values1);
}
static inline void GetPixelMapusv(GLenum map1,GLushort * values1)
{
	 glGetPixelMapusv(map1,values1);
}
static inline void GetPointerv(GLenum pname1,void ** params1)
{
	 glGetPointerv(pname1,params1);
}
static inline void GetPolygonStipple(GLubyte * mask1)
{
	 glGetPolygonStipple(mask1);
}
static inline const GLubyte * GetString(GLenum name1)
{
	return glGetString(name1);
}
static inline void GetTexEnvfv(GLenum target1,GLenum pname1,GLfloat * params1)
{
	 glGetTexEnvfv(target1,pname1,params1);
}
static inline void GetTexEnviv(GLenum target1,GLenum pname1,GLint * params1)
{
	 glGetTexEnviv(target1,pname1,params1);
}
static inline void GetTexGendv(GLenum coord1,GLenum pname1,GLdouble * params1)
{
	 glGetTexGendv(coord1,pname1,params1);
}
static inline void GetTexGenfv(GLenum coord1,GLenum pname1,GLfloat * params1)
{
	 glGetTexGenfv(coord1,pname1,params1);
}
static inline void GetTexGeniv(GLenum coord1,GLenum pname1,GLint * params1)
{
	 glGetTexGeniv(coord1,pname1,params1);
}
static inline void GetTexImage(GLenum target1,GLint level1,GLenum format1,GLenum type1,void * pixels1)
{
	 glGetTexImage(target1,level1,format1,type1,pixels1);
}
static inline void GetTexLevelParameterfv(GLenum target1,GLint level1,GLenum pname1,GLfloat * params1)
{
	 glGetTexLevelParameterfv(target1,level1,pname1,params1);
}
static inline void GetTexLevelParameteriv(GLenum target1,GLint level1,GLenum pname1,GLint * params1)
{
	 glGetTexLevelParameteriv(target1,level1,pname1,params1);
}
static inline void GetTexParameterfv(GLenum target1,GLenum pname1,GLfloat * params1)
{
	 glGetTexParameterfv(target1,pname1,params1);
}
static inline void GetTexParameteriv(GLenum target1,GLenum pname1,GLint * params1)
{
	 glGetTexParameteriv(target1,pname1,params1);
}
static inline void Hint(GLenum target1,GLenum mode1)
{
	 glHint(target1,mode1);
}
static inline void IndexMask(GLuint mask1)
{
	 glIndexMask(mask1);
}
static inline void IndexPointer(GLenum type1,GLsizei stride1,const void * pointer1)
{
	 glIndexPointer(type1,stride1,pointer1);
}
static inline void Indexd(GLdouble c1)
{
	 glIndexd(c1);
}
static inline void Indexdv(const GLdouble * c1)
{
	 glIndexdv(c1);
}
static inline void Indexf(GLfloat c1)
{
	 glIndexf(c1);
}
static inline void Indexfv(const GLfloat * c1)
{
	 glIndexfv(c1);
}
static inline void Indexi(GLint c1)
{
	 glIndexi(c1);
}
static inline void Indexiv(const GLint * c1)
{
	 glIndexiv(c1);
}
static inline void Indexs(GLshort c1)
{
	 glIndexs(c1);
}
static inline void Indexsv(const GLshort * c1)
{
	 glIndexsv(c1);
}
static inline void Indexub(GLubyte c1)
{
	 glIndexub(c1);
}
static inline void Indexubv(const GLubyte * c1)
{
	 glIndexubv(c1);
}
static inline void InitNames()
{
	 glInitNames();
}
static inline void InterleavedArrays(GLenum format1,GLsizei stride1,const void * pointer1)
{
	 glInterleavedArrays(format1,stride1,pointer1);
}
static inline GLboolean IsEnabled(GLenum cap1)
{
	return glIsEnabled(cap1);
}
static inline GLboolean IsList(GLuint list1)
{
	return glIsList(list1);
}
static inline GLboolean IsTexture(GLuint texture1)
{
	return glIsTexture(texture1);
}
static inline void LightModelf(GLenum pname1,GLfloat param1)
{
	 glLightModelf(pname1,param1);
}
static inline void LightModelfv(GLenum pname1,const GLfloat * params1)
{
	 glLightModelfv(pname1,params1);
}
static inline void LightModeli(GLenum pname1,GLint param1)
{
	 glLightModeli(pname1,param1);
}
static inline void LightModeliv(GLenum pname1,const GLint * params1)
{
	 glLightModeliv(pname1,params1);
}
static inline void Lightf(GLenum light1,GLenum pname1,GLfloat param1)
{
	 glLightf(light1,pname1,param1);
}
static inline void Lightfv(GLenum light1,GLenum pname1,const GLfloat * params1)
{
	 glLightfv(light1,pname1,params1);
}
static inline void Lighti(GLenum light1,GLenum pname1,GLint param1)
{
	 glLighti(light1,pname1,param1);
}
static inline void Lightiv(GLenum light1,GLenum pname1,const GLint * params1)
{
	 glLightiv(light1,pname1,params1);
}
static inline void LineStipple(GLint factor1,GLushort pattern1)
{
	 glLineStipple(factor1,pattern1);
}
static inline void LineWidth(GLfloat width1)
{
	 glLineWidth(width1);
}
static inline void ListBase(GLuint base1)
{
	 glListBase(base1);
}
static inline void LoadIdentity()
{
	 glLoadIdentity();
}
static inline void LoadMatrixd(const GLdouble * m1)
{
	 glLoadMatrixd(m1);
}
static inline void LoadMatrixf(const GLfloat * m1)
{
	 glLoadMatrixf(m1);
}
static inline void LoadName(GLuint name1)
{
	 glLoadName(name1);
}
static inline void LogicOp(GLenum opcode1)
{
	 glLogicOp(opcode1);
}
static inline void Map1d(GLenum target1,GLdouble u11,GLdouble u21,GLint stride1,GLint order1,const GLdouble * points1)
{
	 glMap1d(target1,u11,u21,stride1,order1,points1);
}
static inline void Map1f(GLenum target1,GLfloat u11,GLfloat u21,GLint stride1,GLint order1,const GLfloat * points1)
{
	 glMap1f(target1,u11,u21,stride1,order1,points1);
}
static inline void Map2d(GLenum target1,GLdouble u11,GLdouble u21,GLint ustride1,GLint uorder1,GLdouble v11,GLdouble v21,GLint vstride1,GLint vorder1,const GLdouble * points1)
{
	 glMap2d(target1,u11,u21,ustride1,uorder1,v11,v21,vstride1,vorder1,points1);
}
static inline void Map2f(GLenum target1,GLfloat u11,GLfloat u21,GLint ustride1,GLint uorder1,GLfloat v11,GLfloat v21,GLint vstride1,GLint vorder1,const GLfloat * points1)
{
	 glMap2f(target1,u11,u21,ustride1,uorder1,v11,v21,vstride1,vorder1,points1);
}
static inline void MapGrid1d(GLint un1,GLdouble u11,GLdouble u21)
{
	 glMapGrid1d(un1,u11,u21);
}
static inline void MapGrid1f(GLint un1,GLfloat u11,GLfloat u21)
{
	 glMapGrid1f(un1,u11,u21);
}
static inline void MapGrid2d(GLint un1,GLdouble u11,GLdouble u21,GLint vn1,GLdouble v11,GLdouble v21)
{
	 glMapGrid2d(un1,u11,u21,vn1,v11,v21);
}
static inline void MapGrid2f(GLint un1,GLfloat u11,GLfloat u21,GLint vn1,GLfloat v11,GLfloat v21)
{
	 glMapGrid2f(un1,u11,u21,vn1,v11,v21);
}
static inline void Materialf(GLenum face1,GLenum pname1,GLfloat param1)
{
	 glMaterialf(face1,pname1,param1);
}
static inline void Materialfv(GLenum face1,GLenum pname1,const GLfloat * params1)
{
	 glMaterialfv(face1,pname1,params1);
}
static inline void Materiali(GLenum face1,GLenum pname1,GLint param1)
{
	 glMateriali(face1,pname1,param1);
}
static inline void Materialiv(GLenum face1,GLenum pname1,const GLint * params1)
{
	 glMaterialiv(face1,pname1,params1);
}
static inline void MatrixMode(GLenum mode1)
{
	 glMatrixMode(mode1);
}
static inline void MultMatrixd(const GLdouble * m1)
{
	 glMultMatrixd(m1);
}
static inline void MultMatrixf(const GLfloat * m1)
{
	 glMultMatrixf(m1);
}
static inline void NewList(GLuint list1,GLenum mode1)
{
	 glNewList(list1,mode1);
}
static inline void Normal3b(GLbyte nx1,GLbyte ny1,GLbyte nz1)
{
	 glNormal3b(nx1,ny1,nz1);
}
static inline void Normal3bv(const GLbyte * v1)
{
	 glNormal3bv(v1);
}
static inline void Normal3d(GLdouble nx1,GLdouble ny1,GLdouble nz1)
{
	 glNormal3d(nx1,ny1,nz1);
}
static inline void Normal3dv(const GLdouble * v1)
{
	 glNormal3dv(v1);
}
static inline void Normal3f(GLfloat nx1,GLfloat ny1,GLfloat nz1)
{
	 glNormal3f(nx1,ny1,nz1);
}
static inline void Normal3fv(const GLfloat * v1)
{
	 glNormal3fv(v1);
}
static inline void Normal3i(GLint nx1,GLint ny1,GLint nz1)
{
	 glNormal3i(nx1,ny1,nz1);
}
static inline void Normal3iv(const GLint * v1)
{
	 glNormal3iv(v1);
}
static inline void Normal3s(GLshort nx1,GLshort ny1,GLshort nz1)
{
	 glNormal3s(nx1,ny1,nz1);
}
static inline void Normal3sv(const GLshort * v1)
{
	 glNormal3sv(v1);
}
static inline void NormalPointer(GLenum type1,GLsizei stride1,const void * pointer1)
{
	 glNormalPointer(type1,stride1,pointer1);
}
static inline void Ortho(GLdouble left1,GLdouble right1,GLdouble bottom1,GLdouble top1,GLdouble zNear1,GLdouble zFar1)
{
	 glOrtho(left1,right1,bottom1,top1,zNear1,zFar1);
}
static inline void PassThrough(GLfloat token1)
{
	 glPassThrough(token1);
}
static inline void PixelMapfv(GLenum map1,GLsizei mapsize1,const GLfloat * values1)
{
	 glPixelMapfv(map1,mapsize1,values1);
}
static inline void PixelMapuiv(GLenum map1,GLsizei mapsize1,const GLuint * values1)
{
	 glPixelMapuiv(map1,mapsize1,values1);
}
static inline void PixelMapusv(GLenum map1,GLsizei mapsize1,const GLushort * values1)
{
	 glPixelMapusv(map1,mapsize1,values1);
}
static inline void PixelStoref(GLenum pname1,GLfloat param1)
{
	 glPixelStoref(pname1,param1);
}
static inline void PixelStorei(GLenum pname1,GLint param1)
{
	 glPixelStorei(pname1,param1);
}
static inline void PixelTransferf(GLenum pname1,GLfloat param1)
{
	 glPixelTransferf(pname1,param1);
}
static inline void PixelTransferi(GLenum pname1,GLint param1)
{
	 glPixelTransferi(pname1,param1);
}
static inline void PixelZoom(GLfloat xfactor1,GLfloat yfactor1)
{
	 glPixelZoom(xfactor1,yfactor1);
}
static inline void PointSize(GLfloat size1)
{
	 glPointSize(size1);
}
static inline void PolygonMode(GLenum face1,GLenum mode1)
{
	 glPolygonMode(face1,mode1);
}
static inline void PolygonOffset(GLfloat factor1,GLfloat units1)
{
	 glPolygonOffset(factor1,units1);
}
static inline void PolygonStipple(const GLubyte * mask1)
{
	 glPolygonStipple(mask1);
}
static inline void PopAttrib()
{
	 glPopAttrib();
}
static inline void PopClientAttrib()
{
	 glPopClientAttrib();
}
static inline void PopMatrix()
{
	 glPopMatrix();
}
static inline void PopName()
{
	 glPopName();
}
static inline void PrioritizeTextures(GLsizei n1,const GLuint * textures1,const GLfloat * priorities1)
{
	 glPrioritizeTextures(n1,textures1,priorities1);
}
static inline void PushAttrib(GLbitfield mask1)
{
	 glPushAttrib(mask1);
}
static inline void PushClientAttrib(GLbitfield mask1)
{
	 glPushClientAttrib(mask1);
}
static inline void PushMatrix()
{
	 glPushMatrix();
}
static inline void PushName(GLuint name1)
{
	 glPushName(name1);
}
static inline void RasterPos2d(GLdouble x1,GLdouble y1)
{
	 glRasterPos2d(x1,y1);
}
static inline void RasterPos2dv(const GLdouble * v1)
{
	 glRasterPos2dv(v1);
}
static inline void RasterPos2f(GLfloat x1,GLfloat y1)
{
	 glRasterPos2f(x1,y1);
}
static inline void RasterPos2fv(const GLfloat * v1)
{
	 glRasterPos2fv(v1);
}
static inline void RasterPos2i(GLint x1,GLint y1)
{
	 glRasterPos2i(x1,y1);
}
static inline void RasterPos2iv(const GLint * v1)
{
	 glRasterPos2iv(v1);
}
static inline void RasterPos2s(GLshort x1,GLshort y1)
{
	 glRasterPos2s(x1,y1);
}
static inline void RasterPos2sv(const GLshort * v1)
{
	 glRasterPos2sv(v1);
}
static inline void RasterPos3d(GLdouble x1,GLdouble y1,GLdouble z1)
{
	 glRasterPos3d(x1,y1,z1);
}
static inline void RasterPos3dv(const GLdouble * v1)
{
	 glRasterPos3dv(v1);
}
static inline void RasterPos3f(GLfloat x1,GLfloat y1,GLfloat z1)
{
	 glRasterPos3f(x1,y1,z1);
}
static inline void RasterPos3fv(const GLfloat * v1)
{
	 glRasterPos3fv(v1);
}
static inline void RasterPos3i(GLint x1,GLint y1,GLint z1)
{
	 glRasterPos3i(x1,y1,z1);
}
static inline void RasterPos3iv(const GLint * v1)
{
	 glRasterPos3iv(v1);
}
static inline void RasterPos3s(GLshort x1,GLshort y1,GLshort z1)
{
	 glRasterPos3s(x1,y1,z1);
}
static inline void RasterPos3sv(const GLshort * v1)
{
	 glRasterPos3sv(v1);
}
static inline void RasterPos4d(GLdouble x1,GLdouble y1,GLdouble z1,GLdouble w1)
{
	 glRasterPos4d(x1,y1,z1,w1);
}
static inline void RasterPos4dv(const GLdouble * v1)
{
	 glRasterPos4dv(v1);
}
static inline void RasterPos4f(GLfloat x1,GLfloat y1,GLfloat z1,GLfloat w1)
{
	 glRasterPos4f(x1,y1,z1,w1);
}
static inline void RasterPos4fv(const GLfloat * v1)
{
	 glRasterPos4fv(v1);
}
static inline void RasterPos4i(GLint x1,GLint y1,GLint z1,GLint w1)
{
	 glRasterPos4i(x1,y1,z1,w1);
}
static inline void RasterPos4iv(const GLint * v1)
{
	 glRasterPos4iv(v1);
}
static inline void RasterPos4s(GLshort x1,GLshort y1,GLshort z1,GLshort w1)
{
	 glRasterPos4s(x1,y1,z1,w1);
}
static inline void RasterPos4sv(const GLshort * v1)
{
	 glRasterPos4sv(v1);
}
static inline void ReadBuffer(GLenum src1)
{
	 glReadBuffer(src1);
}
static inline void ReadPixels(GLint x1,GLint y1,GLsizei width1,GLsizei height1,GLenum format1,GLenum type1,void * pixels1)
{
	 glReadPixels(x1,y1,width1,height1,format1,type1,pixels1);
}
static inline void Rectd(GLdouble x11,GLdouble y11,GLdouble x21,GLdouble y21)
{
	 glRectd(x11,y11,x21,y21);
}
static inline void Rectdv(const GLdouble * v11,const GLdouble * v21)
{
	 glRectdv(v11,v21);
}
static inline void Rectf(GLfloat x11,GLfloat y11,GLfloat x21,GLfloat y21)
{
	 glRectf(x11,y11,x21,y21);
}
static inline void Rectfv(const GLfloat * v11,const GLfloat * v21)
{
	 glRectfv(v11,v21);
}
static inline void Recti(GLint x11,GLint y11,GLint x21,GLint y21)
{
	 glRecti(x11,y11,x21,y21);
}
static inline void Rectiv(const GLint * v11,const GLint * v21)
{
	 glRectiv(v11,v21);
}
static inline void Rects(GLshort x11,GLshort y11,GLshort x21,GLshort y21)
{
	 glRects(x11,y11,x21,y21);
}
static inline void Rectsv(const GLshort * v11,const GLshort * v21)
{
	 glRectsv(v11,v21);
}
static inline GLint RenderMode(GLenum mode1)
{
	return glRenderMode(mode1);
}
static inline void Rotated(GLdouble angle1,GLdouble x1,GLdouble y1,GLdouble z1)
{
	 glRotated(angle1,x1,y1,z1);
}
static inline void Rotatef(GLfloat angle1,GLfloat x1,GLfloat y1,GLfloat z1)
{
	 glRotatef(angle1,x1,y1,z1);
}
static inline void Scaled(GLdouble x1,GLdouble y1,GLdouble z1)
{
	 glScaled(x1,y1,z1);
}
static inline void Scalef(GLfloat x1,GLfloat y1,GLfloat z1)
{
	 glScalef(x1,y1,z1);
}
static inline void Scissor(GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
	 glScissor(x1,y1,width1,height1);
}
static inline void SelectBuffer(GLsizei size1,GLuint * buffer1)
{
	 glSelectBuffer(size1,buffer1);
}
static inline void ShadeModel(GLenum mode1)
{
	 glShadeModel(mode1);
}
static inline void StencilFunc(GLenum func1,GLint ref1,GLuint mask1)
{
	 glStencilFunc(func1,ref1,mask1);
}
static inline void StencilMask(GLuint mask1)
{
	 glStencilMask(mask1);
}
static inline void StencilOp(GLenum fail1,GLenum zfail1,GLenum zpass1)
{
	 glStencilOp(fail1,zfail1,zpass1);
}
static inline void TexCoord1d(GLdouble s1)
{
	 glTexCoord1d(s1);
}
static inline void TexCoord1dv(const GLdouble * v1)
{
	 glTexCoord1dv(v1);
}
static inline void TexCoord1f(GLfloat s1)
{
	 glTexCoord1f(s1);
}
static inline void TexCoord1fv(const GLfloat * v1)
{
	 glTexCoord1fv(v1);
}
static inline void TexCoord1i(GLint s1)
{
	 glTexCoord1i(s1);
}
static inline void TexCoord1iv(const GLint * v1)
{
	 glTexCoord1iv(v1);
}
static inline void TexCoord1s(GLshort s1)
{
	 glTexCoord1s(s1);
}
static inline void TexCoord1sv(const GLshort * v1)
{
	 glTexCoord1sv(v1);
}
static inline void TexCoord2d(GLdouble s1,GLdouble t1)
{
	 glTexCoord2d(s1,t1);
}
static inline void TexCoord2dv(const GLdouble * v1)
{
	 glTexCoord2dv(v1);
}
static inline void TexCoord2f(GLfloat s1,GLfloat t1)
{
	 glTexCoord2f(s1,t1);
}
static inline void TexCoord2fv(const GLfloat * v1)
{
	 glTexCoord2fv(v1);
}
static inline void TexCoord2i(GLint s1,GLint t1)
{
	 glTexCoord2i(s1,t1);
}
static inline void TexCoord2iv(const GLint * v1)
{
	 glTexCoord2iv(v1);
}
static inline void TexCoord2s(GLshort s1,GLshort t1)
{
	 glTexCoord2s(s1,t1);
}
static inline void TexCoord2sv(const GLshort * v1)
{
	 glTexCoord2sv(v1);
}
static inline void TexCoord3d(GLdouble s1,GLdouble t1,GLdouble r1)
{
	 glTexCoord3d(s1,t1,r1);
}
static inline void TexCoord3dv(const GLdouble * v1)
{
	 glTexCoord3dv(v1);
}
static inline void TexCoord3f(GLfloat s1,GLfloat t1,GLfloat r1)
{
	 glTexCoord3f(s1,t1,r1);
}
static inline void TexCoord3fv(const GLfloat * v1)
{
	 glTexCoord3fv(v1);
}
static inline void TexCoord3i(GLint s1,GLint t1,GLint r1)
{
	 glTexCoord3i(s1,t1,r1);
}
static inline void TexCoord3iv(const GLint * v1)
{
	 glTexCoord3iv(v1);
}
static inline void TexCoord3s(GLshort s1,GLshort t1,GLshort r1)
{
	 glTexCoord3s(s1,t1,r1);
}
static inline void TexCoord3sv(const GLshort * v1)
{
	 glTexCoord3sv(v1);
}
static inline void TexCoord4d(GLdouble s1,GLdouble t1,GLdouble r1,GLdouble q1)
{
	 glTexCoord4d(s1,t1,r1,q1);
}
static inline void TexCoord4dv(const GLdouble * v1)
{
	 glTexCoord4dv(v1);
}
static inline void TexCoord4f(GLfloat s1,GLfloat t1,GLfloat r1,GLfloat q1)
{
	 glTexCoord4f(s1,t1,r1,q1);
}
static inline void TexCoord4fv(const GLfloat * v1)
{
	 glTexCoord4fv(v1);
}
static inline void TexCoord4i(GLint s1,GLint t1,GLint r1,GLint q1)
{
	 glTexCoord4i(s1,t1,r1,q1);
}
static inline void TexCoord4iv(const GLint * v1)
{
	 glTexCoord4iv(v1);
}
static inline void TexCoord4s(GLshort s1,GLshort t1,GLshort r1,GLshort q1)
{
	 glTexCoord4s(s1,t1,r1,q1);
}
static inline void TexCoord4sv(const GLshort * v1)
{
	 glTexCoord4sv(v1);
}
static inline void TexCoordPointer(GLint size1,GLenum type1,GLsizei stride1,const void * pointer1)
{
	 glTexCoordPointer(size1,type1,stride1,pointer1);
}
static inline void TexEnvf(GLenum target1,GLenum pname1,GLfloat param1)
{
	 glTexEnvf(target1,pname1,param1);
}
static inline void TexEnvfv(GLenum target1,GLenum pname1,const GLfloat * params1)
{
	 glTexEnvfv(target1,pname1,params1);
}
static inline void TexEnvi(GLenum target1,GLenum pname1,GLint param1)
{
	 glTexEnvi(target1,pname1,param1);
}
static inline void TexEnviv(GLenum target1,GLenum pname1,const GLint * params1)
{
	 glTexEnviv(target1,pname1,params1);
}
static inline void TexGend(GLenum coord1,GLenum pname1,GLdouble param1)
{
	 glTexGend(coord1,pname1,param1);
}
static inline void TexGendv(GLenum coord1,GLenum pname1,const GLdouble * params1)
{
	 glTexGendv(coord1,pname1,params1);
}
static inline void TexGenf(GLenum coord1,GLenum pname1,GLfloat param1)
{
	 glTexGenf(coord1,pname1,param1);
}
static inline void TexGenfv(GLenum coord1,GLenum pname1,const GLfloat * params1)
{
	 glTexGenfv(coord1,pname1,params1);
}
static inline void TexGeni(GLenum coord1,GLenum pname1,GLint param1)
{
	 glTexGeni(coord1,pname1,param1);
}
static inline void TexGeniv(GLenum coord1,GLenum pname1,const GLint * params1)
{
	 glTexGeniv(coord1,pname1,params1);
}
static inline void TexImage1D(GLenum target1,GLint level1,GLint internalformat1,GLsizei width1,GLint border1,GLenum format1,GLenum type1,const void * pixels1)
{
	 glTexImage1D(target1,level1,internalformat1,width1,border1,format1,type1,pixels1);
}
static inline void TexImage2D(GLenum target1,GLint level1,GLint internalformat1,GLsizei width1,GLsizei height1,GLint border1,GLenum format1,GLenum type1,const void * pixels1)
{
	 glTexImage2D(target1,level1,internalformat1,width1,height1,border1,format1,type1,pixels1);
}
static inline void TexParameterf(GLenum target1,GLenum pname1,GLfloat param1)
{
	 glTexParameterf(target1,pname1,param1);
}
static inline void TexParameterfv(GLenum target1,GLenum pname1,const GLfloat * params1)
{
	 glTexParameterfv(target1,pname1,params1);
}
static inline void TexParameteri(GLenum target1,GLenum pname1,GLint param1)
{
	 glTexParameteri(target1,pname1,param1);
}
static inline void TexParameteriv(GLenum target1,GLenum pname1,const GLint * params1)
{
	 glTexParameteriv(target1,pname1,params1);
}
static inline void TexSubImage1D(GLenum target1,GLint level1,GLint xoffset1,GLsizei width1,GLenum format1,GLenum type1,const void * pixels1)
{
	 glTexSubImage1D(target1,level1,xoffset1,width1,format1,type1,pixels1);
}
static inline void TexSubImage2D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLsizei width1,GLsizei height1,GLenum format1,GLenum type1,const void * pixels1)
{
	 glTexSubImage2D(target1,level1,xoffset1,yoffset1,width1,height1,format1,type1,pixels1);
}
static inline void Translated(GLdouble x1,GLdouble y1,GLdouble z1)
{
	 glTranslated(x1,y1,z1);
}
static inline void Translatef(GLfloat x1,GLfloat y1,GLfloat z1)
{
	 glTranslatef(x1,y1,z1);
}
static inline void Vertex2d(GLdouble x1,GLdouble y1)
{
	 glVertex2d(x1,y1);
}
static inline void Vertex2dv(const GLdouble * v1)
{
	 glVertex2dv(v1);
}
static inline void Vertex2f(GLfloat x1,GLfloat y1)
{
	 glVertex2f(x1,y1);
}
static inline void Vertex2fv(const GLfloat * v1)
{
	 glVertex2fv(v1);
}
static inline void Vertex2i(GLint x1,GLint y1)
{
	 glVertex2i(x1,y1);
}
static inline void Vertex2iv(const GLint * v1)
{
	 glVertex2iv(v1);
}
static inline void Vertex2s(GLshort x1,GLshort y1)
{
	 glVertex2s(x1,y1);
}
static inline void Vertex2sv(const GLshort * v1)
{
	 glVertex2sv(v1);
}
static inline void Vertex3d(GLdouble x1,GLdouble y1,GLdouble z1)
{
	 glVertex3d(x1,y1,z1);
}
static inline void Vertex3dv(const GLdouble * v1)
{
	 glVertex3dv(v1);
}
static inline void Vertex3f(GLfloat x1,GLfloat y1,GLfloat z1)
{
	 glVertex3f(x1,y1,z1);
}
static inline void Vertex3fv(const GLfloat * v1)
{
	 glVertex3fv(v1);
}
static inline void Vertex3i(GLint x1,GLint y1,GLint z1)
{
	 glVertex3i(x1,y1,z1);
}
static inline void Vertex3iv(const GLint * v1)
{
	 glVertex3iv(v1);
}
static inline void Vertex3s(GLshort x1,GLshort y1,GLshort z1)
{
	 glVertex3s(x1,y1,z1);
}
static inline void Vertex3sv(const GLshort * v1)
{
	 glVertex3sv(v1);
}
static inline void Vertex4d(GLdouble x1,GLdouble y1,GLdouble z1,GLdouble w1)
{
	 glVertex4d(x1,y1,z1,w1);
}
static inline void Vertex4dv(const GLdouble * v1)
{
	 glVertex4dv(v1);
}
static inline void Vertex4f(GLfloat x1,GLfloat y1,GLfloat z1,GLfloat w1)
{
	 glVertex4f(x1,y1,z1,w1);
}
static inline void Vertex4fv(const GLfloat * v1)
{
	 glVertex4fv(v1);
}
static inline void Vertex4i(GLint x1,GLint y1,GLint z1,GLint w1)
{
	 glVertex4i(x1,y1,z1,w1);
}
static inline void Vertex4iv(const GLint * v1)
{
	 glVertex4iv(v1);
}
static inline void Vertex4s(GLshort x1,GLshort y1,GLshort z1,GLshort w1)
{
	 glVertex4s(x1,y1,z1,w1);
}
static inline void Vertex4sv(const GLshort * v1)
{
	 glVertex4sv(v1);
}
static inline void VertexPointer(GLint size1,GLenum type1,GLsizei stride1,const void * pointer1)
{
	 glVertexPointer(size1,type1,stride1,pointer1);
}
static inline void Viewport(GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
	 glViewport(x1,y1,width1,height1);
}}
#endif
