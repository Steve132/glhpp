
namespace gl
{
///////////////////////////////////////////////////////
//Shader Objects
#ifdef	GL_ALT_FUNDEF_CreateShader
namespace _impl
{
	inline void genShader(GLenum t,GLsizei,GLuint* out)
	{
		if(t!=0)
		{
			*out=glCreateShader(t);
		}
	}
	inline void delShader(GLsizei,const GLuint* obj)
	{
		glDeleteShader(*obj);
	}
}
inline Shader::Shader(GLenum t):
	_impl::GLObject<Shader>("Shader",std::bind(_impl::genShader,t,std::placeholders::_1,std::placeholders::_2),_impl::delShader),
	type(t)
{
	_impl::_checkError(GL_INVALID_ENUM,"Shader creation failed: Shader type is not an accepted value");
}

inline GLint Shader::Get(GLenum variable) const
{			
	GLint p;
	glGetShaderiv(object,variable,&p);	
	_impl::_checkError(GL_INVALID_VALUE,"Shader object is not a value generated by OpenGL");	
	_impl::_checkError(GL_INVALID_OPERATION,"Shader is not a shader object");	
	return p;	
}
    
    
#if defined(GL_ALT_FUNDEF_ShaderSource)
inline void Shader::Source(const std::string& src)
{
	GLint len=static_cast<GLint>(src.size());
	const char *cst=src.c_str();
	glShaderSource(object,1,&cst,&len);
	_impl::_checkError(GL_INVALID_VALUE,"Shader object is not a value generated by OpenGL");
	_impl::_checkError(GL_INVALID_OPERATION,"Shader is not a shader object");
}
inline void Shader::Source(std::istream& in)
{
	std::ostringstream oss;
	oss << in.rdbuf();
	Source(oss.str());
}
inline void Shader::SourceFile(const std::string& filename)
{
	std::ifstream in(filename.c_str());
	if(!in)
		_impl::_handleError(GL_HPP_CUSTOM,std::string("File I/O error: ")+filename+"Could not be opened for reading"); 
	Source(in);
}
#endif

    
#if defined(GL_ALT_FUNDEF_CompileShader)
inline std::string Shader::Compile()
{
	glCompileShader(object);
	_impl::_checkError(GL_INVALID_VALUE,"Shader object is not a value generated by OpenGL.");
	_impl::_checkError(GL_INVALID_OPERATION,"Shader object is not a shader object.");
	
	std::string message(Shader::Get(GL_INFO_LOG_LENGTH),0);
	GLsizei sz;
	glGetShaderInfoLog(object,static_cast<GLsizei>(message.size()),&sz,&message[0]);
		
	if(Shader::Get(GL_COMPILE_STATUS)==GL_FALSE)
	{
		_impl::_handleError(GL_INVALID_VALUE,std::string("Error compiling shader...")+message); 
	}
	return message;
}
#endif
}
    
#endif
