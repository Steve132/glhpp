#ifndef GL_ALT_glEXT_ALT
#define GL_ALT_glEXT_ALT
#include "common.h"


#ifndef GL_3DFX_multisample
#define GL_3DFX_multisample
#ifndef GL_MULTISAMPLE_BIT_3DFX
#define GL_MULTISAMPLE_BIT_3DFX 0x20000000
#endif //GL_MULTISAMPLE_BIT_3DFX
#ifndef GL_MULTISAMPLE_3DFX
#define GL_MULTISAMPLE_3DFX 0x86B2
#endif //GL_MULTISAMPLE_3DFX
#ifndef GL_SAMPLE_BUFFERS_3DFX
#define GL_SAMPLE_BUFFERS_3DFX 0x86B3
#endif //GL_SAMPLE_BUFFERS_3DFX
#ifndef GL_SAMPLES_3DFX
#define GL_SAMPLES_3DFX 0x86B4
#endif //GL_SAMPLES_3DFX
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_3DFX_tbuffer
#define GL_3DFX_tbuffer
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_TbufferMask3DFX
#define GL_ALT_FUNDEF_TbufferMask3DFX
typedef void (*PFNGLTBUFFERMASK3DFXPROC_ALT)(GLuint);
static inline void glTbufferMask3DFX(GLuint mask1)
{
	static PFNGLTBUFFERMASK3DFXPROC_ALT fn=(PFNGLTBUFFERMASK3DFXPROC_ALT)glaltGetProcAddressExtension("glTbufferMask3DFX","GL_3DFX_tbuffer");
	 fn(mask1);
}
#endif
CGUARDEND

#endif

#ifndef GL_3DFX_texture_compression_FXT1
#define GL_3DFX_texture_compression_FXT1
#ifndef GL_COMPRESSED_RGB_FXT1_3DFX
#define GL_COMPRESSED_RGB_FXT1_3DFX 0x86B0
#endif //GL_COMPRESSED_RGB_FXT1_3DFX
#ifndef GL_COMPRESSED_RGBA_FXT1_3DFX
#define GL_COMPRESSED_RGBA_FXT1_3DFX 0x86B1
#endif //GL_COMPRESSED_RGBA_FXT1_3DFX
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_AMD_blend_minmax_factor
#define GL_AMD_blend_minmax_factor
#ifndef GL_FACTOR_MIN_AMD
#define GL_FACTOR_MIN_AMD 0x901C
#endif //GL_FACTOR_MIN_AMD
#ifndef GL_FACTOR_MAX_AMD
#define GL_FACTOR_MAX_AMD 0x901D
#endif //GL_FACTOR_MAX_AMD
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_AMD_conservative_depth
#define GL_AMD_conservative_depth
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_AMD_debug_output
#define GL_AMD_debug_output
#ifndef GL_MAX_DEBUG_MESSAGE_LENGTH_AMD
#define GL_MAX_DEBUG_MESSAGE_LENGTH_AMD 0x9143
#endif //GL_MAX_DEBUG_MESSAGE_LENGTH_AMD
#ifndef GL_MAX_DEBUG_LOGGED_MESSAGES_AMD
#define GL_MAX_DEBUG_LOGGED_MESSAGES_AMD 0x9144
#endif //GL_MAX_DEBUG_LOGGED_MESSAGES_AMD
#ifndef GL_DEBUG_LOGGED_MESSAGES_AMD
#define GL_DEBUG_LOGGED_MESSAGES_AMD 0x9145
#endif //GL_DEBUG_LOGGED_MESSAGES_AMD
#ifndef GL_DEBUG_SEVERITY_HIGH_AMD
#define GL_DEBUG_SEVERITY_HIGH_AMD 0x9146
#endif //GL_DEBUG_SEVERITY_HIGH_AMD
#ifndef GL_DEBUG_SEVERITY_MEDIUM_AMD
#define GL_DEBUG_SEVERITY_MEDIUM_AMD 0x9147
#endif //GL_DEBUG_SEVERITY_MEDIUM_AMD
#ifndef GL_DEBUG_SEVERITY_LOW_AMD
#define GL_DEBUG_SEVERITY_LOW_AMD 0x9148
#endif //GL_DEBUG_SEVERITY_LOW_AMD
#ifndef GL_DEBUG_CATEGORY_API_ERROR_AMD
#define GL_DEBUG_CATEGORY_API_ERROR_AMD 0x9149
#endif //GL_DEBUG_CATEGORY_API_ERROR_AMD
#ifndef GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD
#define GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD 0x914A
#endif //GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD
#ifndef GL_DEBUG_CATEGORY_DEPRECATION_AMD
#define GL_DEBUG_CATEGORY_DEPRECATION_AMD 0x914B
#endif //GL_DEBUG_CATEGORY_DEPRECATION_AMD
#ifndef GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD
#define GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD 0x914C
#endif //GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD
#ifndef GL_DEBUG_CATEGORY_PERFORMANCE_AMD
#define GL_DEBUG_CATEGORY_PERFORMANCE_AMD 0x914D
#endif //GL_DEBUG_CATEGORY_PERFORMANCE_AMD
#ifndef GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD
#define GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD 0x914E
#endif //GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD
#ifndef GL_DEBUG_CATEGORY_APPLICATION_AMD
#define GL_DEBUG_CATEGORY_APPLICATION_AMD 0x914F
#endif //GL_DEBUG_CATEGORY_APPLICATION_AMD
#ifndef GL_DEBUG_CATEGORY_OTHER_AMD
#define GL_DEBUG_CATEGORY_OTHER_AMD 0x9150
#endif //GL_DEBUG_CATEGORY_OTHER_AMD
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_DebugMessageCallbackAMD
#define GL_ALT_FUNDEF_DebugMessageCallbackAMD
typedef void (*PFNGLDEBUGMESSAGECALLBACKAMDPROC_ALT)(GLALTDEBUGPROCAMD,void *);
static inline void glDebugMessageCallbackAMD(GLALTDEBUGPROCAMD callback1,void * userParam1)
{
	static PFNGLDEBUGMESSAGECALLBACKAMDPROC_ALT fn=(PFNGLDEBUGMESSAGECALLBACKAMDPROC_ALT)glaltGetProcAddressExtension("glDebugMessageCallbackAMD","GL_AMD_debug_output");
	 fn(callback1,userParam1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DebugMessageEnableAMD
#define GL_ALT_FUNDEF_DebugMessageEnableAMD
typedef void (*PFNGLDEBUGMESSAGEENABLEAMDPROC_ALT)(GLenum,GLenum,GLsizei,const GLuint *,GLboolean);
static inline void glDebugMessageEnableAMD(GLenum category1,GLenum severity1,GLsizei count1,const GLuint * ids1,GLboolean enabled1)
{
	static PFNGLDEBUGMESSAGEENABLEAMDPROC_ALT fn=(PFNGLDEBUGMESSAGEENABLEAMDPROC_ALT)glaltGetProcAddressExtension("glDebugMessageEnableAMD","GL_AMD_debug_output");
	 fn(category1,severity1,count1,ids1,enabled1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DebugMessageInsertAMD
#define GL_ALT_FUNDEF_DebugMessageInsertAMD
typedef void (*PFNGLDEBUGMESSAGEINSERTAMDPROC_ALT)(GLenum,GLenum,GLuint,GLsizei,const GLchar *);
static inline void glDebugMessageInsertAMD(GLenum category1,GLenum severity1,GLuint id1,GLsizei length1,const GLchar * buf1)
{
	static PFNGLDEBUGMESSAGEINSERTAMDPROC_ALT fn=(PFNGLDEBUGMESSAGEINSERTAMDPROC_ALT)glaltGetProcAddressExtension("glDebugMessageInsertAMD","GL_AMD_debug_output");
	 fn(category1,severity1,id1,length1,buf1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetDebugMessageLogAMD
#define GL_ALT_FUNDEF_GetDebugMessageLogAMD
typedef GLuint (*PFNGLGETDEBUGMESSAGELOGAMDPROC_ALT)(GLuint,GLsizei,GLenum *,GLuint *,GLuint *,GLsizei *,GLchar *);
static inline GLuint glGetDebugMessageLogAMD(GLuint count1,GLsizei bufsize1,GLenum * categories1,GLuint * severities1,GLuint * ids1,GLsizei * lengths1,GLchar * message1)
{
	static PFNGLGETDEBUGMESSAGELOGAMDPROC_ALT fn=(PFNGLGETDEBUGMESSAGELOGAMDPROC_ALT)glaltGetProcAddressExtension("glGetDebugMessageLogAMD","GL_AMD_debug_output");
	return fn(count1,bufsize1,categories1,severities1,ids1,lengths1,message1);
}
#endif
CGUARDEND

#endif

#ifndef GL_AMD_depth_clamp_separate
#define GL_AMD_depth_clamp_separate
#ifndef GL_DEPTH_CLAMP_NEAR_AMD
#define GL_DEPTH_CLAMP_NEAR_AMD 0x901E
#endif //GL_DEPTH_CLAMP_NEAR_AMD
#ifndef GL_DEPTH_CLAMP_FAR_AMD
#define GL_DEPTH_CLAMP_FAR_AMD 0x901F
#endif //GL_DEPTH_CLAMP_FAR_AMD
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_AMD_draw_buffers_blend
#define GL_AMD_draw_buffers_blend
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BlendEquationIndexedAMD
#define GL_ALT_FUNDEF_BlendEquationIndexedAMD
typedef void (*PFNGLBLENDEQUATIONINDEXEDAMDPROC_ALT)(GLuint,GLenum);
static inline void glBlendEquationIndexedAMD(GLuint buf1,GLenum mode1)
{
	static PFNGLBLENDEQUATIONINDEXEDAMDPROC_ALT fn=(PFNGLBLENDEQUATIONINDEXEDAMDPROC_ALT)glaltGetProcAddressExtension("glBlendEquationIndexedAMD","GL_AMD_draw_buffers_blend");
	 fn(buf1,mode1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_BlendEquationSeparateIndexedAMD
#define GL_ALT_FUNDEF_BlendEquationSeparateIndexedAMD
typedef void (*PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC_ALT)(GLuint,GLenum,GLenum);
static inline void glBlendEquationSeparateIndexedAMD(GLuint buf1,GLenum modeRGB1,GLenum modeAlpha1)
{
	static PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC_ALT fn=(PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC_ALT)glaltGetProcAddressExtension("glBlendEquationSeparateIndexedAMD","GL_AMD_draw_buffers_blend");
	 fn(buf1,modeRGB1,modeAlpha1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_BlendFuncIndexedAMD
#define GL_ALT_FUNDEF_BlendFuncIndexedAMD
typedef void (*PFNGLBLENDFUNCINDEXEDAMDPROC_ALT)(GLuint,GLenum,GLenum);
static inline void glBlendFuncIndexedAMD(GLuint buf1,GLenum src1,GLenum dst1)
{
	static PFNGLBLENDFUNCINDEXEDAMDPROC_ALT fn=(PFNGLBLENDFUNCINDEXEDAMDPROC_ALT)glaltGetProcAddressExtension("glBlendFuncIndexedAMD","GL_AMD_draw_buffers_blend");
	 fn(buf1,src1,dst1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_BlendFuncSeparateIndexedAMD
#define GL_ALT_FUNDEF_BlendFuncSeparateIndexedAMD
typedef void (*PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC_ALT)(GLuint,GLenum,GLenum,GLenum,GLenum);
static inline void glBlendFuncSeparateIndexedAMD(GLuint buf1,GLenum srcRGB1,GLenum dstRGB1,GLenum srcAlpha1,GLenum dstAlpha1)
{
	static PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC_ALT fn=(PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC_ALT)glaltGetProcAddressExtension("glBlendFuncSeparateIndexedAMD","GL_AMD_draw_buffers_blend");
	 fn(buf1,srcRGB1,dstRGB1,srcAlpha1,dstAlpha1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_AMD_gcn_shader
#define GL_AMD_gcn_shader
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_AMD_gpu_shader_int64
#define GL_AMD_gpu_shader_int64
#ifndef GL_INT64_NV
#define GL_INT64_NV 0x140E
#endif //GL_INT64_NV
#ifndef GL_UNSIGNED_INT64_NV
#define GL_UNSIGNED_INT64_NV 0x140F
#endif //GL_UNSIGNED_INT64_NV
#ifndef GL_INT8_NV
#define GL_INT8_NV 0x8FE0
#endif //GL_INT8_NV
#ifndef GL_INT8_VEC2_NV
#define GL_INT8_VEC2_NV 0x8FE1
#endif //GL_INT8_VEC2_NV
#ifndef GL_INT8_VEC3_NV
#define GL_INT8_VEC3_NV 0x8FE2
#endif //GL_INT8_VEC3_NV
#ifndef GL_INT8_VEC4_NV
#define GL_INT8_VEC4_NV 0x8FE3
#endif //GL_INT8_VEC4_NV
#ifndef GL_INT16_NV
#define GL_INT16_NV 0x8FE4
#endif //GL_INT16_NV
#ifndef GL_INT16_VEC2_NV
#define GL_INT16_VEC2_NV 0x8FE5
#endif //GL_INT16_VEC2_NV
#ifndef GL_INT16_VEC3_NV
#define GL_INT16_VEC3_NV 0x8FE6
#endif //GL_INT16_VEC3_NV
#ifndef GL_INT16_VEC4_NV
#define GL_INT16_VEC4_NV 0x8FE7
#endif //GL_INT16_VEC4_NV
#ifndef GL_INT64_VEC2_NV
#define GL_INT64_VEC2_NV 0x8FE9
#endif //GL_INT64_VEC2_NV
#ifndef GL_INT64_VEC3_NV
#define GL_INT64_VEC3_NV 0x8FEA
#endif //GL_INT64_VEC3_NV
#ifndef GL_INT64_VEC4_NV
#define GL_INT64_VEC4_NV 0x8FEB
#endif //GL_INT64_VEC4_NV
#ifndef GL_UNSIGNED_INT8_NV
#define GL_UNSIGNED_INT8_NV 0x8FEC
#endif //GL_UNSIGNED_INT8_NV
#ifndef GL_UNSIGNED_INT8_VEC2_NV
#define GL_UNSIGNED_INT8_VEC2_NV 0x8FED
#endif //GL_UNSIGNED_INT8_VEC2_NV
#ifndef GL_UNSIGNED_INT8_VEC3_NV
#define GL_UNSIGNED_INT8_VEC3_NV 0x8FEE
#endif //GL_UNSIGNED_INT8_VEC3_NV
#ifndef GL_UNSIGNED_INT8_VEC4_NV
#define GL_UNSIGNED_INT8_VEC4_NV 0x8FEF
#endif //GL_UNSIGNED_INT8_VEC4_NV
#ifndef GL_UNSIGNED_INT16_NV
#define GL_UNSIGNED_INT16_NV 0x8FF0
#endif //GL_UNSIGNED_INT16_NV
#ifndef GL_UNSIGNED_INT16_VEC2_NV
#define GL_UNSIGNED_INT16_VEC2_NV 0x8FF1
#endif //GL_UNSIGNED_INT16_VEC2_NV
#ifndef GL_UNSIGNED_INT16_VEC3_NV
#define GL_UNSIGNED_INT16_VEC3_NV 0x8FF2
#endif //GL_UNSIGNED_INT16_VEC3_NV
#ifndef GL_UNSIGNED_INT16_VEC4_NV
#define GL_UNSIGNED_INT16_VEC4_NV 0x8FF3
#endif //GL_UNSIGNED_INT16_VEC4_NV
#ifndef GL_UNSIGNED_INT64_VEC2_NV
#define GL_UNSIGNED_INT64_VEC2_NV 0x8FF5
#endif //GL_UNSIGNED_INT64_VEC2_NV
#ifndef GL_UNSIGNED_INT64_VEC3_NV
#define GL_UNSIGNED_INT64_VEC3_NV 0x8FF6
#endif //GL_UNSIGNED_INT64_VEC3_NV
#ifndef GL_UNSIGNED_INT64_VEC4_NV
#define GL_UNSIGNED_INT64_VEC4_NV 0x8FF7
#endif //GL_UNSIGNED_INT64_VEC4_NV
#ifndef GL_FLOAT16_NV
#define GL_FLOAT16_NV 0x8FF8
#endif //GL_FLOAT16_NV
#ifndef GL_FLOAT16_VEC2_NV
#define GL_FLOAT16_VEC2_NV 0x8FF9
#endif //GL_FLOAT16_VEC2_NV
#ifndef GL_FLOAT16_VEC3_NV
#define GL_FLOAT16_VEC3_NV 0x8FFA
#endif //GL_FLOAT16_VEC3_NV
#ifndef GL_FLOAT16_VEC4_NV
#define GL_FLOAT16_VEC4_NV 0x8FFB
#endif //GL_FLOAT16_VEC4_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetUniformi64vNV
#define GL_ALT_FUNDEF_GetUniformi64vNV
typedef void (*PFNGLGETUNIFORMI64VNVPROC_ALT)(GLuint,GLint,GLint64EXT *);
static inline void glGetUniformi64vNV(GLuint program1,GLint location1,GLint64EXT * params1)
{
	static PFNGLGETUNIFORMI64VNVPROC_ALT fn=(PFNGLGETUNIFORMI64VNVPROC_ALT)glaltGetProcAddressExtension("glGetUniformi64vNV","GL_AMD_gpu_shader_int64");
	 fn(program1,location1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetUniformui64vNV
#define GL_ALT_FUNDEF_GetUniformui64vNV
typedef void (*PFNGLGETUNIFORMUI64VNVPROC_ALT)(GLuint,GLint,GLuint64EXT *);
static inline void glGetUniformui64vNV(GLuint program1,GLint location1,GLuint64EXT * params1)
{
	static PFNGLGETUNIFORMUI64VNVPROC_ALT fn=(PFNGLGETUNIFORMUI64VNVPROC_ALT)glaltGetProcAddressExtension("glGetUniformui64vNV","GL_AMD_gpu_shader_int64");
	 fn(program1,location1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform1i64NV
#define GL_ALT_FUNDEF_ProgramUniform1i64NV
typedef void (*PFNGLPROGRAMUNIFORM1I64NVPROC_ALT)(GLuint,GLint,GLint64EXT);
static inline void glProgramUniform1i64NV(GLuint program1,GLint location1,GLint64EXT x1)
{
	static PFNGLPROGRAMUNIFORM1I64NVPROC_ALT fn=(PFNGLPROGRAMUNIFORM1I64NVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform1i64NV","GL_AMD_gpu_shader_int64");
	 fn(program1,location1,x1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform1i64vNV
#define GL_ALT_FUNDEF_ProgramUniform1i64vNV
typedef void (*PFNGLPROGRAMUNIFORM1I64VNVPROC_ALT)(GLuint,GLint,GLsizei,const GLint64EXT *);
static inline void glProgramUniform1i64vNV(GLuint program1,GLint location1,GLsizei count1,const GLint64EXT * value1)
{
	static PFNGLPROGRAMUNIFORM1I64VNVPROC_ALT fn=(PFNGLPROGRAMUNIFORM1I64VNVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform1i64vNV","GL_AMD_gpu_shader_int64");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform1ui64NV
#define GL_ALT_FUNDEF_ProgramUniform1ui64NV
typedef void (*PFNGLPROGRAMUNIFORM1UI64NVPROC_ALT)(GLuint,GLint,GLuint64EXT);
static inline void glProgramUniform1ui64NV(GLuint program1,GLint location1,GLuint64EXT x1)
{
	static PFNGLPROGRAMUNIFORM1UI64NVPROC_ALT fn=(PFNGLPROGRAMUNIFORM1UI64NVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform1ui64NV","GL_AMD_gpu_shader_int64");
	 fn(program1,location1,x1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform1ui64vNV
#define GL_ALT_FUNDEF_ProgramUniform1ui64vNV
typedef void (*PFNGLPROGRAMUNIFORM1UI64VNVPROC_ALT)(GLuint,GLint,GLsizei,const GLuint64EXT *);
static inline void glProgramUniform1ui64vNV(GLuint program1,GLint location1,GLsizei count1,const GLuint64EXT * value1)
{
	static PFNGLPROGRAMUNIFORM1UI64VNVPROC_ALT fn=(PFNGLPROGRAMUNIFORM1UI64VNVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform1ui64vNV","GL_AMD_gpu_shader_int64");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform2i64NV
#define GL_ALT_FUNDEF_ProgramUniform2i64NV
typedef void (*PFNGLPROGRAMUNIFORM2I64NVPROC_ALT)(GLuint,GLint,GLint64EXT,GLint64EXT);
static inline void glProgramUniform2i64NV(GLuint program1,GLint location1,GLint64EXT x1,GLint64EXT y1)
{
	static PFNGLPROGRAMUNIFORM2I64NVPROC_ALT fn=(PFNGLPROGRAMUNIFORM2I64NVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform2i64NV","GL_AMD_gpu_shader_int64");
	 fn(program1,location1,x1,y1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform2i64vNV
#define GL_ALT_FUNDEF_ProgramUniform2i64vNV
typedef void (*PFNGLPROGRAMUNIFORM2I64VNVPROC_ALT)(GLuint,GLint,GLsizei,const GLint64EXT *);
static inline void glProgramUniform2i64vNV(GLuint program1,GLint location1,GLsizei count1,const GLint64EXT * value1)
{
	static PFNGLPROGRAMUNIFORM2I64VNVPROC_ALT fn=(PFNGLPROGRAMUNIFORM2I64VNVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform2i64vNV","GL_AMD_gpu_shader_int64");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform2ui64NV
#define GL_ALT_FUNDEF_ProgramUniform2ui64NV
typedef void (*PFNGLPROGRAMUNIFORM2UI64NVPROC_ALT)(GLuint,GLint,GLuint64EXT,GLuint64EXT);
static inline void glProgramUniform2ui64NV(GLuint program1,GLint location1,GLuint64EXT x1,GLuint64EXT y1)
{
	static PFNGLPROGRAMUNIFORM2UI64NVPROC_ALT fn=(PFNGLPROGRAMUNIFORM2UI64NVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform2ui64NV","GL_AMD_gpu_shader_int64");
	 fn(program1,location1,x1,y1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform2ui64vNV
#define GL_ALT_FUNDEF_ProgramUniform2ui64vNV
typedef void (*PFNGLPROGRAMUNIFORM2UI64VNVPROC_ALT)(GLuint,GLint,GLsizei,const GLuint64EXT *);
static inline void glProgramUniform2ui64vNV(GLuint program1,GLint location1,GLsizei count1,const GLuint64EXT * value1)
{
	static PFNGLPROGRAMUNIFORM2UI64VNVPROC_ALT fn=(PFNGLPROGRAMUNIFORM2UI64VNVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform2ui64vNV","GL_AMD_gpu_shader_int64");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform3i64NV
#define GL_ALT_FUNDEF_ProgramUniform3i64NV
typedef void (*PFNGLPROGRAMUNIFORM3I64NVPROC_ALT)(GLuint,GLint,GLint64EXT,GLint64EXT,GLint64EXT);
static inline void glProgramUniform3i64NV(GLuint program1,GLint location1,GLint64EXT x1,GLint64EXT y1,GLint64EXT z1)
{
	static PFNGLPROGRAMUNIFORM3I64NVPROC_ALT fn=(PFNGLPROGRAMUNIFORM3I64NVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform3i64NV","GL_AMD_gpu_shader_int64");
	 fn(program1,location1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform3i64vNV
#define GL_ALT_FUNDEF_ProgramUniform3i64vNV
typedef void (*PFNGLPROGRAMUNIFORM3I64VNVPROC_ALT)(GLuint,GLint,GLsizei,const GLint64EXT *);
static inline void glProgramUniform3i64vNV(GLuint program1,GLint location1,GLsizei count1,const GLint64EXT * value1)
{
	static PFNGLPROGRAMUNIFORM3I64VNVPROC_ALT fn=(PFNGLPROGRAMUNIFORM3I64VNVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform3i64vNV","GL_AMD_gpu_shader_int64");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform3ui64NV
#define GL_ALT_FUNDEF_ProgramUniform3ui64NV
typedef void (*PFNGLPROGRAMUNIFORM3UI64NVPROC_ALT)(GLuint,GLint,GLuint64EXT,GLuint64EXT,GLuint64EXT);
static inline void glProgramUniform3ui64NV(GLuint program1,GLint location1,GLuint64EXT x1,GLuint64EXT y1,GLuint64EXT z1)
{
	static PFNGLPROGRAMUNIFORM3UI64NVPROC_ALT fn=(PFNGLPROGRAMUNIFORM3UI64NVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform3ui64NV","GL_AMD_gpu_shader_int64");
	 fn(program1,location1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform3ui64vNV
#define GL_ALT_FUNDEF_ProgramUniform3ui64vNV
typedef void (*PFNGLPROGRAMUNIFORM3UI64VNVPROC_ALT)(GLuint,GLint,GLsizei,const GLuint64EXT *);
static inline void glProgramUniform3ui64vNV(GLuint program1,GLint location1,GLsizei count1,const GLuint64EXT * value1)
{
	static PFNGLPROGRAMUNIFORM3UI64VNVPROC_ALT fn=(PFNGLPROGRAMUNIFORM3UI64VNVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform3ui64vNV","GL_AMD_gpu_shader_int64");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform4i64NV
#define GL_ALT_FUNDEF_ProgramUniform4i64NV
typedef void (*PFNGLPROGRAMUNIFORM4I64NVPROC_ALT)(GLuint,GLint,GLint64EXT,GLint64EXT,GLint64EXT,GLint64EXT);
static inline void glProgramUniform4i64NV(GLuint program1,GLint location1,GLint64EXT x1,GLint64EXT y1,GLint64EXT z1,GLint64EXT w1)
{
	static PFNGLPROGRAMUNIFORM4I64NVPROC_ALT fn=(PFNGLPROGRAMUNIFORM4I64NVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform4i64NV","GL_AMD_gpu_shader_int64");
	 fn(program1,location1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform4i64vNV
#define GL_ALT_FUNDEF_ProgramUniform4i64vNV
typedef void (*PFNGLPROGRAMUNIFORM4I64VNVPROC_ALT)(GLuint,GLint,GLsizei,const GLint64EXT *);
static inline void glProgramUniform4i64vNV(GLuint program1,GLint location1,GLsizei count1,const GLint64EXT * value1)
{
	static PFNGLPROGRAMUNIFORM4I64VNVPROC_ALT fn=(PFNGLPROGRAMUNIFORM4I64VNVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform4i64vNV","GL_AMD_gpu_shader_int64");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform4ui64NV
#define GL_ALT_FUNDEF_ProgramUniform4ui64NV
typedef void (*PFNGLPROGRAMUNIFORM4UI64NVPROC_ALT)(GLuint,GLint,GLuint64EXT,GLuint64EXT,GLuint64EXT,GLuint64EXT);
static inline void glProgramUniform4ui64NV(GLuint program1,GLint location1,GLuint64EXT x1,GLuint64EXT y1,GLuint64EXT z1,GLuint64EXT w1)
{
	static PFNGLPROGRAMUNIFORM4UI64NVPROC_ALT fn=(PFNGLPROGRAMUNIFORM4UI64NVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform4ui64NV","GL_AMD_gpu_shader_int64");
	 fn(program1,location1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform4ui64vNV
#define GL_ALT_FUNDEF_ProgramUniform4ui64vNV
typedef void (*PFNGLPROGRAMUNIFORM4UI64VNVPROC_ALT)(GLuint,GLint,GLsizei,const GLuint64EXT *);
static inline void glProgramUniform4ui64vNV(GLuint program1,GLint location1,GLsizei count1,const GLuint64EXT * value1)
{
	static PFNGLPROGRAMUNIFORM4UI64VNVPROC_ALT fn=(PFNGLPROGRAMUNIFORM4UI64VNVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform4ui64vNV","GL_AMD_gpu_shader_int64");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform1i64NV
#define GL_ALT_FUNDEF_Uniform1i64NV
typedef void (*PFNGLUNIFORM1I64NVPROC_ALT)(GLint,GLint64EXT);
static inline void glUniform1i64NV(GLint location1,GLint64EXT x1)
{
	static PFNGLUNIFORM1I64NVPROC_ALT fn=(PFNGLUNIFORM1I64NVPROC_ALT)glaltGetProcAddressExtension("glUniform1i64NV","GL_AMD_gpu_shader_int64");
	 fn(location1,x1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform1i64vNV
#define GL_ALT_FUNDEF_Uniform1i64vNV
typedef void (*PFNGLUNIFORM1I64VNVPROC_ALT)(GLint,GLsizei,const GLint64EXT *);
static inline void glUniform1i64vNV(GLint location1,GLsizei count1,const GLint64EXT * value1)
{
	static PFNGLUNIFORM1I64VNVPROC_ALT fn=(PFNGLUNIFORM1I64VNVPROC_ALT)glaltGetProcAddressExtension("glUniform1i64vNV","GL_AMD_gpu_shader_int64");
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform1ui64NV
#define GL_ALT_FUNDEF_Uniform1ui64NV
typedef void (*PFNGLUNIFORM1UI64NVPROC_ALT)(GLint,GLuint64EXT);
static inline void glUniform1ui64NV(GLint location1,GLuint64EXT x1)
{
	static PFNGLUNIFORM1UI64NVPROC_ALT fn=(PFNGLUNIFORM1UI64NVPROC_ALT)glaltGetProcAddressExtension("glUniform1ui64NV","GL_AMD_gpu_shader_int64");
	 fn(location1,x1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform1ui64vNV
#define GL_ALT_FUNDEF_Uniform1ui64vNV
typedef void (*PFNGLUNIFORM1UI64VNVPROC_ALT)(GLint,GLsizei,const GLuint64EXT *);
static inline void glUniform1ui64vNV(GLint location1,GLsizei count1,const GLuint64EXT * value1)
{
	static PFNGLUNIFORM1UI64VNVPROC_ALT fn=(PFNGLUNIFORM1UI64VNVPROC_ALT)glaltGetProcAddressExtension("glUniform1ui64vNV","GL_AMD_gpu_shader_int64");
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform2i64NV
#define GL_ALT_FUNDEF_Uniform2i64NV
typedef void (*PFNGLUNIFORM2I64NVPROC_ALT)(GLint,GLint64EXT,GLint64EXT);
static inline void glUniform2i64NV(GLint location1,GLint64EXT x1,GLint64EXT y1)
{
	static PFNGLUNIFORM2I64NVPROC_ALT fn=(PFNGLUNIFORM2I64NVPROC_ALT)glaltGetProcAddressExtension("glUniform2i64NV","GL_AMD_gpu_shader_int64");
	 fn(location1,x1,y1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform2i64vNV
#define GL_ALT_FUNDEF_Uniform2i64vNV
typedef void (*PFNGLUNIFORM2I64VNVPROC_ALT)(GLint,GLsizei,const GLint64EXT *);
static inline void glUniform2i64vNV(GLint location1,GLsizei count1,const GLint64EXT * value1)
{
	static PFNGLUNIFORM2I64VNVPROC_ALT fn=(PFNGLUNIFORM2I64VNVPROC_ALT)glaltGetProcAddressExtension("glUniform2i64vNV","GL_AMD_gpu_shader_int64");
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform2ui64NV
#define GL_ALT_FUNDEF_Uniform2ui64NV
typedef void (*PFNGLUNIFORM2UI64NVPROC_ALT)(GLint,GLuint64EXT,GLuint64EXT);
static inline void glUniform2ui64NV(GLint location1,GLuint64EXT x1,GLuint64EXT y1)
{
	static PFNGLUNIFORM2UI64NVPROC_ALT fn=(PFNGLUNIFORM2UI64NVPROC_ALT)glaltGetProcAddressExtension("glUniform2ui64NV","GL_AMD_gpu_shader_int64");
	 fn(location1,x1,y1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform2ui64vNV
#define GL_ALT_FUNDEF_Uniform2ui64vNV
typedef void (*PFNGLUNIFORM2UI64VNVPROC_ALT)(GLint,GLsizei,const GLuint64EXT *);
static inline void glUniform2ui64vNV(GLint location1,GLsizei count1,const GLuint64EXT * value1)
{
	static PFNGLUNIFORM2UI64VNVPROC_ALT fn=(PFNGLUNIFORM2UI64VNVPROC_ALT)glaltGetProcAddressExtension("glUniform2ui64vNV","GL_AMD_gpu_shader_int64");
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform3i64NV
#define GL_ALT_FUNDEF_Uniform3i64NV
typedef void (*PFNGLUNIFORM3I64NVPROC_ALT)(GLint,GLint64EXT,GLint64EXT,GLint64EXT);
static inline void glUniform3i64NV(GLint location1,GLint64EXT x1,GLint64EXT y1,GLint64EXT z1)
{
	static PFNGLUNIFORM3I64NVPROC_ALT fn=(PFNGLUNIFORM3I64NVPROC_ALT)glaltGetProcAddressExtension("glUniform3i64NV","GL_AMD_gpu_shader_int64");
	 fn(location1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform3i64vNV
#define GL_ALT_FUNDEF_Uniform3i64vNV
typedef void (*PFNGLUNIFORM3I64VNVPROC_ALT)(GLint,GLsizei,const GLint64EXT *);
static inline void glUniform3i64vNV(GLint location1,GLsizei count1,const GLint64EXT * value1)
{
	static PFNGLUNIFORM3I64VNVPROC_ALT fn=(PFNGLUNIFORM3I64VNVPROC_ALT)glaltGetProcAddressExtension("glUniform3i64vNV","GL_AMD_gpu_shader_int64");
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform3ui64NV
#define GL_ALT_FUNDEF_Uniform3ui64NV
typedef void (*PFNGLUNIFORM3UI64NVPROC_ALT)(GLint,GLuint64EXT,GLuint64EXT,GLuint64EXT);
static inline void glUniform3ui64NV(GLint location1,GLuint64EXT x1,GLuint64EXT y1,GLuint64EXT z1)
{
	static PFNGLUNIFORM3UI64NVPROC_ALT fn=(PFNGLUNIFORM3UI64NVPROC_ALT)glaltGetProcAddressExtension("glUniform3ui64NV","GL_AMD_gpu_shader_int64");
	 fn(location1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform3ui64vNV
#define GL_ALT_FUNDEF_Uniform3ui64vNV
typedef void (*PFNGLUNIFORM3UI64VNVPROC_ALT)(GLint,GLsizei,const GLuint64EXT *);
static inline void glUniform3ui64vNV(GLint location1,GLsizei count1,const GLuint64EXT * value1)
{
	static PFNGLUNIFORM3UI64VNVPROC_ALT fn=(PFNGLUNIFORM3UI64VNVPROC_ALT)glaltGetProcAddressExtension("glUniform3ui64vNV","GL_AMD_gpu_shader_int64");
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform4i64NV
#define GL_ALT_FUNDEF_Uniform4i64NV
typedef void (*PFNGLUNIFORM4I64NVPROC_ALT)(GLint,GLint64EXT,GLint64EXT,GLint64EXT,GLint64EXT);
static inline void glUniform4i64NV(GLint location1,GLint64EXT x1,GLint64EXT y1,GLint64EXT z1,GLint64EXT w1)
{
	static PFNGLUNIFORM4I64NVPROC_ALT fn=(PFNGLUNIFORM4I64NVPROC_ALT)glaltGetProcAddressExtension("glUniform4i64NV","GL_AMD_gpu_shader_int64");
	 fn(location1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform4i64vNV
#define GL_ALT_FUNDEF_Uniform4i64vNV
typedef void (*PFNGLUNIFORM4I64VNVPROC_ALT)(GLint,GLsizei,const GLint64EXT *);
static inline void glUniform4i64vNV(GLint location1,GLsizei count1,const GLint64EXT * value1)
{
	static PFNGLUNIFORM4I64VNVPROC_ALT fn=(PFNGLUNIFORM4I64VNVPROC_ALT)glaltGetProcAddressExtension("glUniform4i64vNV","GL_AMD_gpu_shader_int64");
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform4ui64NV
#define GL_ALT_FUNDEF_Uniform4ui64NV
typedef void (*PFNGLUNIFORM4UI64NVPROC_ALT)(GLint,GLuint64EXT,GLuint64EXT,GLuint64EXT,GLuint64EXT);
static inline void glUniform4ui64NV(GLint location1,GLuint64EXT x1,GLuint64EXT y1,GLuint64EXT z1,GLuint64EXT w1)
{
	static PFNGLUNIFORM4UI64NVPROC_ALT fn=(PFNGLUNIFORM4UI64NVPROC_ALT)glaltGetProcAddressExtension("glUniform4ui64NV","GL_AMD_gpu_shader_int64");
	 fn(location1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform4ui64vNV
#define GL_ALT_FUNDEF_Uniform4ui64vNV
typedef void (*PFNGLUNIFORM4UI64VNVPROC_ALT)(GLint,GLsizei,const GLuint64EXT *);
static inline void glUniform4ui64vNV(GLint location1,GLsizei count1,const GLuint64EXT * value1)
{
	static PFNGLUNIFORM4UI64VNVPROC_ALT fn=(PFNGLUNIFORM4UI64VNVPROC_ALT)glaltGetProcAddressExtension("glUniform4ui64vNV","GL_AMD_gpu_shader_int64");
	 fn(location1,count1,value1);
}
#endif
CGUARDEND

#endif

#ifndef GL_AMD_interleaved_elements
#define GL_AMD_interleaved_elements
#ifndef GL_RED
#define GL_RED 0x1903
#endif //GL_RED
#ifndef GL_GREEN
#define GL_GREEN 0x1904
#endif //GL_GREEN
#ifndef GL_BLUE
#define GL_BLUE 0x1905
#endif //GL_BLUE
#ifndef GL_ALPHA
#define GL_ALPHA 0x1906
#endif //GL_ALPHA
#ifndef GL_RG8UI
#define GL_RG8UI 0x8238
#endif //GL_RG8UI
#ifndef GL_RG16UI
#define GL_RG16UI 0x823A
#endif //GL_RG16UI
#ifndef GL_RGBA8UI
#define GL_RGBA8UI 0x8D7C
#endif //GL_RGBA8UI
#ifndef GL_VERTEX_ELEMENT_SWIZZLE_AMD
#define GL_VERTEX_ELEMENT_SWIZZLE_AMD 0x91A4
#endif //GL_VERTEX_ELEMENT_SWIZZLE_AMD
#ifndef GL_VERTEX_ID_SWIZZLE_AMD
#define GL_VERTEX_ID_SWIZZLE_AMD 0x91A5
#endif //GL_VERTEX_ID_SWIZZLE_AMD
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_VertexAttribParameteriAMD
#define GL_ALT_FUNDEF_VertexAttribParameteriAMD
typedef void (*PFNGLVERTEXATTRIBPARAMETERIAMDPROC_ALT)(GLuint,GLenum,GLint);
static inline void glVertexAttribParameteriAMD(GLuint index1,GLenum pname1,GLint param1)
{
	static PFNGLVERTEXATTRIBPARAMETERIAMDPROC_ALT fn=(PFNGLVERTEXATTRIBPARAMETERIAMDPROC_ALT)glaltGetProcAddressExtension("glVertexAttribParameteriAMD","GL_AMD_interleaved_elements");
	 fn(index1,pname1,param1);
}
#endif
CGUARDEND

#endif

#ifndef GL_AMD_multi_draw_indirect
#define GL_AMD_multi_draw_indirect
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_MultiDrawArraysIndirectAMD
#define GL_ALT_FUNDEF_MultiDrawArraysIndirectAMD
typedef void (*PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC_ALT)(GLenum,const void *,GLsizei,GLsizei);
static inline void glMultiDrawArraysIndirectAMD(GLenum mode1,const void * indirect1,GLsizei primcount1,GLsizei stride1)
{
	static PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC_ALT fn=(PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC_ALT)glaltGetProcAddressExtension("glMultiDrawArraysIndirectAMD","GL_AMD_multi_draw_indirect");
	 fn(mode1,indirect1,primcount1,stride1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiDrawElementsIndirectAMD
#define GL_ALT_FUNDEF_MultiDrawElementsIndirectAMD
typedef void (*PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC_ALT)(GLenum,GLenum,const void *,GLsizei,GLsizei);
static inline void glMultiDrawElementsIndirectAMD(GLenum mode1,GLenum type1,const void * indirect1,GLsizei primcount1,GLsizei stride1)
{
	static PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC_ALT fn=(PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC_ALT)glaltGetProcAddressExtension("glMultiDrawElementsIndirectAMD","GL_AMD_multi_draw_indirect");
	 fn(mode1,type1,indirect1,primcount1,stride1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_AMD_name_gen_delete
#define GL_AMD_name_gen_delete
#ifndef GL_DATA_BUFFER_AMD
#define GL_DATA_BUFFER_AMD 0x9151
#endif //GL_DATA_BUFFER_AMD
#ifndef GL_PERFORMANCE_MONITOR_AMD
#define GL_PERFORMANCE_MONITOR_AMD 0x9152
#endif //GL_PERFORMANCE_MONITOR_AMD
#ifndef GL_QUERY_OBJECT_AMD
#define GL_QUERY_OBJECT_AMD 0x9153
#endif //GL_QUERY_OBJECT_AMD
#ifndef GL_VERTEX_ARRAY_OBJECT_AMD
#define GL_VERTEX_ARRAY_OBJECT_AMD 0x9154
#endif //GL_VERTEX_ARRAY_OBJECT_AMD
#ifndef GL_SAMPLER_OBJECT_AMD
#define GL_SAMPLER_OBJECT_AMD 0x9155
#endif //GL_SAMPLER_OBJECT_AMD
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_DeleteNamesAMD
#define GL_ALT_FUNDEF_DeleteNamesAMD
typedef void (*PFNGLDELETENAMESAMDPROC_ALT)(GLenum,GLuint,const GLuint *);
static inline void glDeleteNamesAMD(GLenum identifier1,GLuint num1,const GLuint * names1)
{
	static PFNGLDELETENAMESAMDPROC_ALT fn=(PFNGLDELETENAMESAMDPROC_ALT)glaltGetProcAddressExtension("glDeleteNamesAMD","GL_AMD_name_gen_delete");
	 fn(identifier1,num1,names1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GenNamesAMD
#define GL_ALT_FUNDEF_GenNamesAMD
typedef void (*PFNGLGENNAMESAMDPROC_ALT)(GLenum,GLuint,GLuint *);
static inline void glGenNamesAMD(GLenum identifier1,GLuint num1,GLuint * names1)
{
	static PFNGLGENNAMESAMDPROC_ALT fn=(PFNGLGENNAMESAMDPROC_ALT)glaltGetProcAddressExtension("glGenNamesAMD","GL_AMD_name_gen_delete");
	 fn(identifier1,num1,names1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IsNameAMD
#define GL_ALT_FUNDEF_IsNameAMD
typedef GLboolean (*PFNGLISNAMEAMDPROC_ALT)(GLenum,GLuint);
static inline GLboolean glIsNameAMD(GLenum identifier1,GLuint name1)
{
	static PFNGLISNAMEAMDPROC_ALT fn=(PFNGLISNAMEAMDPROC_ALT)glaltGetProcAddressExtension("glIsNameAMD","GL_AMD_name_gen_delete");
	return fn(identifier1,name1);
}
#endif
CGUARDEND

#endif

#ifndef GL_AMD_occlusion_query_event
#define GL_AMD_occlusion_query_event
#ifndef GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD
#define GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD 0x00000001
#endif //GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD
#ifndef GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD
#define GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD 0x00000002
#endif //GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD
#ifndef GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD
#define GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD 0x00000004
#endif //GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD
#ifndef GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD
#define GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD 0x00000008
#endif //GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD
#ifndef GL_OCCLUSION_QUERY_EVENT_MASK_AMD
#define GL_OCCLUSION_QUERY_EVENT_MASK_AMD 0x874F
#endif //GL_OCCLUSION_QUERY_EVENT_MASK_AMD
#ifndef GL_QUERY_ALL_EVENT_BITS_AMD
#define GL_QUERY_ALL_EVENT_BITS_AMD 0xFFFFFFFF
#endif //GL_QUERY_ALL_EVENT_BITS_AMD
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_QueryObjectParameteruiAMD
#define GL_ALT_FUNDEF_QueryObjectParameteruiAMD
typedef void (*PFNGLQUERYOBJECTPARAMETERUIAMDPROC_ALT)(GLenum,GLuint,GLenum,GLuint);
static inline void glQueryObjectParameteruiAMD(GLenum target1,GLuint id1,GLenum pname1,GLuint param1)
{
	static PFNGLQUERYOBJECTPARAMETERUIAMDPROC_ALT fn=(PFNGLQUERYOBJECTPARAMETERUIAMDPROC_ALT)glaltGetProcAddressExtension("glQueryObjectParameteruiAMD","GL_AMD_occlusion_query_event");
	 fn(target1,id1,pname1,param1);
}
#endif
CGUARDEND

#endif

#ifndef GL_AMD_performance_monitor
#define GL_AMD_performance_monitor
#ifndef GL_COUNTER_TYPE_AMD
#define GL_COUNTER_TYPE_AMD 0x8BC0
#endif //GL_COUNTER_TYPE_AMD
#ifndef GL_COUNTER_RANGE_AMD
#define GL_COUNTER_RANGE_AMD 0x8BC1
#endif //GL_COUNTER_RANGE_AMD
#ifndef GL_UNSIGNED_INT64_AMD
#define GL_UNSIGNED_INT64_AMD 0x8BC2
#endif //GL_UNSIGNED_INT64_AMD
#ifndef GL_PERCENTAGE_AMD
#define GL_PERCENTAGE_AMD 0x8BC3
#endif //GL_PERCENTAGE_AMD
#ifndef GL_PERFMON_RESULT_AVAILABLE_AMD
#define GL_PERFMON_RESULT_AVAILABLE_AMD 0x8BC4
#endif //GL_PERFMON_RESULT_AVAILABLE_AMD
#ifndef GL_PERFMON_RESULT_SIZE_AMD
#define GL_PERFMON_RESULT_SIZE_AMD 0x8BC5
#endif //GL_PERFMON_RESULT_SIZE_AMD
#ifndef GL_PERFMON_RESULT_AMD
#define GL_PERFMON_RESULT_AMD 0x8BC6
#endif //GL_PERFMON_RESULT_AMD
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BeginPerfMonitorAMD
#define GL_ALT_FUNDEF_BeginPerfMonitorAMD
typedef void (*PFNGLBEGINPERFMONITORAMDPROC_ALT)(GLuint);
static inline void glBeginPerfMonitorAMD(GLuint monitor1)
{
	static PFNGLBEGINPERFMONITORAMDPROC_ALT fn=(PFNGLBEGINPERFMONITORAMDPROC_ALT)glaltGetProcAddressExtension("glBeginPerfMonitorAMD","GL_AMD_performance_monitor");
	 fn(monitor1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DeletePerfMonitorsAMD
#define GL_ALT_FUNDEF_DeletePerfMonitorsAMD
typedef void (*PFNGLDELETEPERFMONITORSAMDPROC_ALT)(GLsizei,GLuint *);
static inline void glDeletePerfMonitorsAMD(GLsizei n1,GLuint * monitors1)
{
	static PFNGLDELETEPERFMONITORSAMDPROC_ALT fn=(PFNGLDELETEPERFMONITORSAMDPROC_ALT)glaltGetProcAddressExtension("glDeletePerfMonitorsAMD","GL_AMD_performance_monitor");
	 fn(n1,monitors1);
}
#endif

#ifndef	GL_ALT_FUNDEF_EndPerfMonitorAMD
#define GL_ALT_FUNDEF_EndPerfMonitorAMD
typedef void (*PFNGLENDPERFMONITORAMDPROC_ALT)(GLuint);
static inline void glEndPerfMonitorAMD(GLuint monitor1)
{
	static PFNGLENDPERFMONITORAMDPROC_ALT fn=(PFNGLENDPERFMONITORAMDPROC_ALT)glaltGetProcAddressExtension("glEndPerfMonitorAMD","GL_AMD_performance_monitor");
	 fn(monitor1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GenPerfMonitorsAMD
#define GL_ALT_FUNDEF_GenPerfMonitorsAMD
typedef void (*PFNGLGENPERFMONITORSAMDPROC_ALT)(GLsizei,GLuint *);
static inline void glGenPerfMonitorsAMD(GLsizei n1,GLuint * monitors1)
{
	static PFNGLGENPERFMONITORSAMDPROC_ALT fn=(PFNGLGENPERFMONITORSAMDPROC_ALT)glaltGetProcAddressExtension("glGenPerfMonitorsAMD","GL_AMD_performance_monitor");
	 fn(n1,monitors1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetPerfMonitorCounterDataAMD
#define GL_ALT_FUNDEF_GetPerfMonitorCounterDataAMD
typedef void (*PFNGLGETPERFMONITORCOUNTERDATAAMDPROC_ALT)(GLuint,GLenum,GLsizei,GLuint *,GLint *);
static inline void glGetPerfMonitorCounterDataAMD(GLuint monitor1,GLenum pname1,GLsizei dataSize1,GLuint * data1,GLint * bytesWritten1)
{
	static PFNGLGETPERFMONITORCOUNTERDATAAMDPROC_ALT fn=(PFNGLGETPERFMONITORCOUNTERDATAAMDPROC_ALT)glaltGetProcAddressExtension("glGetPerfMonitorCounterDataAMD","GL_AMD_performance_monitor");
	 fn(monitor1,pname1,dataSize1,data1,bytesWritten1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetPerfMonitorCounterInfoAMD
#define GL_ALT_FUNDEF_GetPerfMonitorCounterInfoAMD
typedef void (*PFNGLGETPERFMONITORCOUNTERINFOAMDPROC_ALT)(GLuint,GLuint,GLenum,void *);
static inline void glGetPerfMonitorCounterInfoAMD(GLuint group1,GLuint counter1,GLenum pname1,void * data1)
{
	static PFNGLGETPERFMONITORCOUNTERINFOAMDPROC_ALT fn=(PFNGLGETPERFMONITORCOUNTERINFOAMDPROC_ALT)glaltGetProcAddressExtension("glGetPerfMonitorCounterInfoAMD","GL_AMD_performance_monitor");
	 fn(group1,counter1,pname1,data1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetPerfMonitorCounterStringAMD
#define GL_ALT_FUNDEF_GetPerfMonitorCounterStringAMD
typedef void (*PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC_ALT)(GLuint,GLuint,GLsizei,GLsizei *,GLchar *);
static inline void glGetPerfMonitorCounterStringAMD(GLuint group1,GLuint counter1,GLsizei bufSize1,GLsizei * length1,GLchar * counterString1)
{
	static PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC_ALT fn=(PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC_ALT)glaltGetProcAddressExtension("glGetPerfMonitorCounterStringAMD","GL_AMD_performance_monitor");
	 fn(group1,counter1,bufSize1,length1,counterString1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetPerfMonitorCountersAMD
#define GL_ALT_FUNDEF_GetPerfMonitorCountersAMD
typedef void (*PFNGLGETPERFMONITORCOUNTERSAMDPROC_ALT)(GLuint,GLint *,GLint *,GLsizei,GLuint *);
static inline void glGetPerfMonitorCountersAMD(GLuint group1,GLint * numCounters1,GLint * maxActiveCounters1,GLsizei counterSize1,GLuint * counters1)
{
	static PFNGLGETPERFMONITORCOUNTERSAMDPROC_ALT fn=(PFNGLGETPERFMONITORCOUNTERSAMDPROC_ALT)glaltGetProcAddressExtension("glGetPerfMonitorCountersAMD","GL_AMD_performance_monitor");
	 fn(group1,numCounters1,maxActiveCounters1,counterSize1,counters1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetPerfMonitorGroupStringAMD
#define GL_ALT_FUNDEF_GetPerfMonitorGroupStringAMD
typedef void (*PFNGLGETPERFMONITORGROUPSTRINGAMDPROC_ALT)(GLuint,GLsizei,GLsizei *,GLchar *);
static inline void glGetPerfMonitorGroupStringAMD(GLuint group1,GLsizei bufSize1,GLsizei * length1,GLchar * groupString1)
{
	static PFNGLGETPERFMONITORGROUPSTRINGAMDPROC_ALT fn=(PFNGLGETPERFMONITORGROUPSTRINGAMDPROC_ALT)glaltGetProcAddressExtension("glGetPerfMonitorGroupStringAMD","GL_AMD_performance_monitor");
	 fn(group1,bufSize1,length1,groupString1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetPerfMonitorGroupsAMD
#define GL_ALT_FUNDEF_GetPerfMonitorGroupsAMD
typedef void (*PFNGLGETPERFMONITORGROUPSAMDPROC_ALT)(GLint *,GLsizei,GLuint *);
static inline void glGetPerfMonitorGroupsAMD(GLint * numGroups1,GLsizei groupsSize1,GLuint * groups1)
{
	static PFNGLGETPERFMONITORGROUPSAMDPROC_ALT fn=(PFNGLGETPERFMONITORGROUPSAMDPROC_ALT)glaltGetProcAddressExtension("glGetPerfMonitorGroupsAMD","GL_AMD_performance_monitor");
	 fn(numGroups1,groupsSize1,groups1);
}
#endif

#ifndef	GL_ALT_FUNDEF_SelectPerfMonitorCountersAMD
#define GL_ALT_FUNDEF_SelectPerfMonitorCountersAMD
typedef void (*PFNGLSELECTPERFMONITORCOUNTERSAMDPROC_ALT)(GLuint,GLboolean,GLuint,GLint,GLuint *);
static inline void glSelectPerfMonitorCountersAMD(GLuint monitor1,GLboolean enable1,GLuint group1,GLint numCounters1,GLuint * counterList1)
{
	static PFNGLSELECTPERFMONITORCOUNTERSAMDPROC_ALT fn=(PFNGLSELECTPERFMONITORCOUNTERSAMDPROC_ALT)glaltGetProcAddressExtension("glSelectPerfMonitorCountersAMD","GL_AMD_performance_monitor");
	 fn(monitor1,enable1,group1,numCounters1,counterList1);
}
#endif
CGUARDEND

#endif

#ifndef GL_AMD_pinned_memory
#define GL_AMD_pinned_memory
#ifndef GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD
#define GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD 0x9160
#endif //GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_AMD_query_buffer_object
#define GL_AMD_query_buffer_object
#ifndef GL_QUERY_BUFFER_AMD
#define GL_QUERY_BUFFER_AMD 0x9192
#endif //GL_QUERY_BUFFER_AMD
#ifndef GL_QUERY_BUFFER_BINDING_AMD
#define GL_QUERY_BUFFER_BINDING_AMD 0x9193
#endif //GL_QUERY_BUFFER_BINDING_AMD
#ifndef GL_QUERY_RESULT_NO_WAIT_AMD
#define GL_QUERY_RESULT_NO_WAIT_AMD 0x9194
#endif //GL_QUERY_RESULT_NO_WAIT_AMD
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_AMD_sample_positions
#define GL_AMD_sample_positions
#ifndef GL_SUBSAMPLE_DISTANCE_AMD
#define GL_SUBSAMPLE_DISTANCE_AMD 0x883F
#endif //GL_SUBSAMPLE_DISTANCE_AMD
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_SetMultisamplefvAMD
#define GL_ALT_FUNDEF_SetMultisamplefvAMD
typedef void (*PFNGLSETMULTISAMPLEFVAMDPROC_ALT)(GLenum,GLuint,const GLfloat *);
static inline void glSetMultisamplefvAMD(GLenum pname1,GLuint index1,const GLfloat * val1)
{
	static PFNGLSETMULTISAMPLEFVAMDPROC_ALT fn=(PFNGLSETMULTISAMPLEFVAMDPROC_ALT)glaltGetProcAddressExtension("glSetMultisamplefvAMD","GL_AMD_sample_positions");
	 fn(pname1,index1,val1);
}
#endif
CGUARDEND

#endif

#ifndef GL_AMD_seamless_cubemap_per_texture
#define GL_AMD_seamless_cubemap_per_texture
#ifndef GL_TEXTURE_CUBE_MAP_SEAMLESS
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#endif //GL_TEXTURE_CUBE_MAP_SEAMLESS
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_AMD_shader_atomic_counter_ops
#define GL_AMD_shader_atomic_counter_ops
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_AMD_shader_stencil_export
#define GL_AMD_shader_stencil_export
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_AMD_shader_trinary_minmax
#define GL_AMD_shader_trinary_minmax
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_AMD_sparse_texture
#define GL_AMD_sparse_texture
#ifndef GL_TEXTURE_STORAGE_SPARSE_BIT_AMD
#define GL_TEXTURE_STORAGE_SPARSE_BIT_AMD 0x00000001
#endif //GL_TEXTURE_STORAGE_SPARSE_BIT_AMD
#ifndef GL_VIRTUAL_PAGE_SIZE_X_AMD
#define GL_VIRTUAL_PAGE_SIZE_X_AMD 0x9195
#endif //GL_VIRTUAL_PAGE_SIZE_X_AMD
#ifndef GL_VIRTUAL_PAGE_SIZE_Y_AMD
#define GL_VIRTUAL_PAGE_SIZE_Y_AMD 0x9196
#endif //GL_VIRTUAL_PAGE_SIZE_Y_AMD
#ifndef GL_VIRTUAL_PAGE_SIZE_Z_AMD
#define GL_VIRTUAL_PAGE_SIZE_Z_AMD 0x9197
#endif //GL_VIRTUAL_PAGE_SIZE_Z_AMD
#ifndef GL_MAX_SPARSE_TEXTURE_SIZE_AMD
#define GL_MAX_SPARSE_TEXTURE_SIZE_AMD 0x9198
#endif //GL_MAX_SPARSE_TEXTURE_SIZE_AMD
#ifndef GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD 0x9199
#endif //GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD
#ifndef GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS 0x919A
#endif //GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS
#ifndef GL_MIN_SPARSE_LEVEL_AMD
#define GL_MIN_SPARSE_LEVEL_AMD 0x919B
#endif //GL_MIN_SPARSE_LEVEL_AMD
#ifndef GL_MIN_LOD_WARNING_AMD
#define GL_MIN_LOD_WARNING_AMD 0x919C
#endif //GL_MIN_LOD_WARNING_AMD
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_TexStorageSparseAMD
#define GL_ALT_FUNDEF_TexStorageSparseAMD
typedef void (*PFNGLTEXSTORAGESPARSEAMDPROC_ALT)(GLenum,GLenum,GLsizei,GLsizei,GLsizei,GLsizei,GLbitfield);
static inline void glTexStorageSparseAMD(GLenum target1,GLenum internalFormat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLsizei layers1,GLbitfield flags1)
{
	static PFNGLTEXSTORAGESPARSEAMDPROC_ALT fn=(PFNGLTEXSTORAGESPARSEAMDPROC_ALT)glaltGetProcAddressExtension("glTexStorageSparseAMD","GL_AMD_sparse_texture");
	 fn(target1,internalFormat1,width1,height1,depth1,layers1,flags1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureStorageSparseAMD
#define GL_ALT_FUNDEF_TextureStorageSparseAMD
typedef void (*PFNGLTEXTURESTORAGESPARSEAMDPROC_ALT)(GLuint,GLenum,GLenum,GLsizei,GLsizei,GLsizei,GLsizei,GLbitfield);
static inline void glTextureStorageSparseAMD(GLuint texture1,GLenum target1,GLenum internalFormat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLsizei layers1,GLbitfield flags1)
{
	static PFNGLTEXTURESTORAGESPARSEAMDPROC_ALT fn=(PFNGLTEXTURESTORAGESPARSEAMDPROC_ALT)glaltGetProcAddressExtension("glTextureStorageSparseAMD","GL_AMD_sparse_texture");
	 fn(texture1,target1,internalFormat1,width1,height1,depth1,layers1,flags1);
}
#endif
CGUARDEND

#endif

#ifndef GL_AMD_stencil_operation_extended
#define GL_AMD_stencil_operation_extended
#ifndef GL_SET_AMD
#define GL_SET_AMD 0x874A
#endif //GL_SET_AMD
#ifndef GL_REPLACE_VALUE_AMD
#define GL_REPLACE_VALUE_AMD 0x874B
#endif //GL_REPLACE_VALUE_AMD
#ifndef GL_STENCIL_OP_VALUE_AMD
#define GL_STENCIL_OP_VALUE_AMD 0x874C
#endif //GL_STENCIL_OP_VALUE_AMD
#ifndef GL_STENCIL_BACK_OP_VALUE_AMD
#define GL_STENCIL_BACK_OP_VALUE_AMD 0x874D
#endif //GL_STENCIL_BACK_OP_VALUE_AMD
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_StencilOpValueAMD
#define GL_ALT_FUNDEF_StencilOpValueAMD
typedef void (*PFNGLSTENCILOPVALUEAMDPROC_ALT)(GLenum,GLuint);
static inline void glStencilOpValueAMD(GLenum face1,GLuint value1)
{
	static PFNGLSTENCILOPVALUEAMDPROC_ALT fn=(PFNGLSTENCILOPVALUEAMDPROC_ALT)glaltGetProcAddressExtension("glStencilOpValueAMD","GL_AMD_stencil_operation_extended");
	 fn(face1,value1);
}
#endif
CGUARDEND

#endif

#ifndef GL_AMD_texture_texture4
#define GL_AMD_texture_texture4
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_AMD_transform_feedback3_lines_triangles
#define GL_AMD_transform_feedback3_lines_triangles
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_AMD_transform_feedback4
#define GL_AMD_transform_feedback4
#ifndef GL_STREAM_RASTERIZATION_AMD
#define GL_STREAM_RASTERIZATION_AMD 0x91A0
#endif //GL_STREAM_RASTERIZATION_AMD
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_AMD_vertex_shader_layer
#define GL_AMD_vertex_shader_layer
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_AMD_vertex_shader_tessellator
#define GL_AMD_vertex_shader_tessellator
#ifndef GL_SAMPLER_BUFFER_AMD
#define GL_SAMPLER_BUFFER_AMD 0x9001
#endif //GL_SAMPLER_BUFFER_AMD
#ifndef GL_INT_SAMPLER_BUFFER_AMD
#define GL_INT_SAMPLER_BUFFER_AMD 0x9002
#endif //GL_INT_SAMPLER_BUFFER_AMD
#ifndef GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD 0x9003
#endif //GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD
#ifndef GL_TESSELLATION_MODE_AMD
#define GL_TESSELLATION_MODE_AMD 0x9004
#endif //GL_TESSELLATION_MODE_AMD
#ifndef GL_TESSELLATION_FACTOR_AMD
#define GL_TESSELLATION_FACTOR_AMD 0x9005
#endif //GL_TESSELLATION_FACTOR_AMD
#ifndef GL_DISCRETE_AMD
#define GL_DISCRETE_AMD 0x9006
#endif //GL_DISCRETE_AMD
#ifndef GL_CONTINUOUS_AMD
#define GL_CONTINUOUS_AMD 0x9007
#endif //GL_CONTINUOUS_AMD
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_TessellationFactorAMD
#define GL_ALT_FUNDEF_TessellationFactorAMD
typedef void (*PFNGLTESSELLATIONFACTORAMDPROC_ALT)(GLfloat);
static inline void glTessellationFactorAMD(GLfloat factor1)
{
	static PFNGLTESSELLATIONFACTORAMDPROC_ALT fn=(PFNGLTESSELLATIONFACTORAMDPROC_ALT)glaltGetProcAddressExtension("glTessellationFactorAMD","GL_AMD_vertex_shader_tessellator");
	 fn(factor1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TessellationModeAMD
#define GL_ALT_FUNDEF_TessellationModeAMD
typedef void (*PFNGLTESSELLATIONMODEAMDPROC_ALT)(GLenum);
static inline void glTessellationModeAMD(GLenum mode1)
{
	static PFNGLTESSELLATIONMODEAMDPROC_ALT fn=(PFNGLTESSELLATIONMODEAMDPROC_ALT)glaltGetProcAddressExtension("glTessellationModeAMD","GL_AMD_vertex_shader_tessellator");
	 fn(mode1);
}
#endif
CGUARDEND

#endif

#ifndef GL_AMD_vertex_shader_viewport_index
#define GL_AMD_vertex_shader_viewport_index
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_APPLE_aux_depth_stencil
#define GL_APPLE_aux_depth_stencil
#ifndef GL_AUX_DEPTH_STENCIL_APPLE
#define GL_AUX_DEPTH_STENCIL_APPLE 0x8A14
#endif //GL_AUX_DEPTH_STENCIL_APPLE
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_APPLE_client_storage
#define GL_APPLE_client_storage
#ifndef GL_UNPACK_CLIENT_STORAGE_APPLE
#define GL_UNPACK_CLIENT_STORAGE_APPLE 0x85B2
#endif //GL_UNPACK_CLIENT_STORAGE_APPLE
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_APPLE_element_array
#define GL_APPLE_element_array
#ifndef GL_ELEMENT_ARRAY_APPLE
#define GL_ELEMENT_ARRAY_APPLE 0x8A0C
#endif //GL_ELEMENT_ARRAY_APPLE
#ifndef GL_ELEMENT_ARRAY_TYPE_APPLE
#define GL_ELEMENT_ARRAY_TYPE_APPLE 0x8A0D
#endif //GL_ELEMENT_ARRAY_TYPE_APPLE
#ifndef GL_ELEMENT_ARRAY_POINTER_APPLE
#define GL_ELEMENT_ARRAY_POINTER_APPLE 0x8A0E
#endif //GL_ELEMENT_ARRAY_POINTER_APPLE
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_DrawElementArrayAPPLE
#define GL_ALT_FUNDEF_DrawElementArrayAPPLE
typedef void (*PFNGLDRAWELEMENTARRAYAPPLEPROC_ALT)(GLenum,GLint,GLsizei);
static inline void glDrawElementArrayAPPLE(GLenum mode1,GLint first1,GLsizei count1)
{
	static PFNGLDRAWELEMENTARRAYAPPLEPROC_ALT fn=(PFNGLDRAWELEMENTARRAYAPPLEPROC_ALT)glaltGetProcAddressExtension("glDrawElementArrayAPPLE","GL_APPLE_element_array");
	 fn(mode1,first1,count1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DrawRangeElementArrayAPPLE
#define GL_ALT_FUNDEF_DrawRangeElementArrayAPPLE
typedef void (*PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC_ALT)(GLenum,GLuint,GLuint,GLint,GLsizei);
static inline void glDrawRangeElementArrayAPPLE(GLenum mode1,GLuint start1,GLuint end1,GLint first1,GLsizei count1)
{
	static PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC_ALT fn=(PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC_ALT)glaltGetProcAddressExtension("glDrawRangeElementArrayAPPLE","GL_APPLE_element_array");
	 fn(mode1,start1,end1,first1,count1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ElementPointerAPPLE
#define GL_ALT_FUNDEF_ElementPointerAPPLE
typedef void (*PFNGLELEMENTPOINTERAPPLEPROC_ALT)(GLenum,const void *);
static inline void glElementPointerAPPLE(GLenum type1,const void * pointer1)
{
	static PFNGLELEMENTPOINTERAPPLEPROC_ALT fn=(PFNGLELEMENTPOINTERAPPLEPROC_ALT)glaltGetProcAddressExtension("glElementPointerAPPLE","GL_APPLE_element_array");
	 fn(type1,pointer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiDrawElementArrayAPPLE
#define GL_ALT_FUNDEF_MultiDrawElementArrayAPPLE
typedef void (*PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC_ALT)(GLenum,const GLint *,const GLsizei *,GLsizei);
static inline void glMultiDrawElementArrayAPPLE(GLenum mode1,const GLint * first1,const GLsizei * count1,GLsizei primcount1)
{
	static PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC_ALT fn=(PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC_ALT)glaltGetProcAddressExtension("glMultiDrawElementArrayAPPLE","GL_APPLE_element_array");
	 fn(mode1,first1,count1,primcount1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiDrawRangeElementArrayAPPLE
#define GL_ALT_FUNDEF_MultiDrawRangeElementArrayAPPLE
typedef void (*PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC_ALT)(GLenum,GLuint,GLuint,const GLint *,const GLsizei *,GLsizei);
static inline void glMultiDrawRangeElementArrayAPPLE(GLenum mode1,GLuint start1,GLuint end1,const GLint * first1,const GLsizei * count1,GLsizei primcount1)
{
	static PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC_ALT fn=(PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC_ALT)glaltGetProcAddressExtension("glMultiDrawRangeElementArrayAPPLE","GL_APPLE_element_array");
	 fn(mode1,start1,end1,first1,count1,primcount1);
}
#endif
CGUARDEND

#endif

#ifndef GL_APPLE_fence
#define GL_APPLE_fence
#ifndef GL_DRAW_PIXELS_APPLE
#define GL_DRAW_PIXELS_APPLE 0x8A0A
#endif //GL_DRAW_PIXELS_APPLE
#ifndef GL_FENCE_APPLE
#define GL_FENCE_APPLE 0x8A0B
#endif //GL_FENCE_APPLE
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_DeleteFencesAPPLE
#define GL_ALT_FUNDEF_DeleteFencesAPPLE
typedef void (*PFNGLDELETEFENCESAPPLEPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteFencesAPPLE(GLsizei n1,const GLuint * fences1)
{
	static PFNGLDELETEFENCESAPPLEPROC_ALT fn=(PFNGLDELETEFENCESAPPLEPROC_ALT)glaltGetProcAddressExtension("glDeleteFencesAPPLE","GL_APPLE_fence");
	 fn(n1,fences1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FinishFenceAPPLE
#define GL_ALT_FUNDEF_FinishFenceAPPLE
typedef void (*PFNGLFINISHFENCEAPPLEPROC_ALT)(GLuint);
static inline void glFinishFenceAPPLE(GLuint fence1)
{
	static PFNGLFINISHFENCEAPPLEPROC_ALT fn=(PFNGLFINISHFENCEAPPLEPROC_ALT)glaltGetProcAddressExtension("glFinishFenceAPPLE","GL_APPLE_fence");
	 fn(fence1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FinishObjectAPPLE
#define GL_ALT_FUNDEF_FinishObjectAPPLE
typedef void (*PFNGLFINISHOBJECTAPPLEPROC_ALT)(GLenum,GLint);
static inline void glFinishObjectAPPLE(GLenum object1,GLint name1)
{
	static PFNGLFINISHOBJECTAPPLEPROC_ALT fn=(PFNGLFINISHOBJECTAPPLEPROC_ALT)glaltGetProcAddressExtension("glFinishObjectAPPLE","GL_APPLE_fence");
	 fn(object1,name1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GenFencesAPPLE
#define GL_ALT_FUNDEF_GenFencesAPPLE
typedef void (*PFNGLGENFENCESAPPLEPROC_ALT)(GLsizei,GLuint *);
static inline void glGenFencesAPPLE(GLsizei n1,GLuint * fences1)
{
	static PFNGLGENFENCESAPPLEPROC_ALT fn=(PFNGLGENFENCESAPPLEPROC_ALT)glaltGetProcAddressExtension("glGenFencesAPPLE","GL_APPLE_fence");
	 fn(n1,fences1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IsFenceAPPLE
#define GL_ALT_FUNDEF_IsFenceAPPLE
typedef GLboolean (*PFNGLISFENCEAPPLEPROC_ALT)(GLuint);
static inline GLboolean glIsFenceAPPLE(GLuint fence1)
{
	static PFNGLISFENCEAPPLEPROC_ALT fn=(PFNGLISFENCEAPPLEPROC_ALT)glaltGetProcAddressExtension("glIsFenceAPPLE","GL_APPLE_fence");
	return fn(fence1);
}
#endif

#ifndef	GL_ALT_FUNDEF_SetFenceAPPLE
#define GL_ALT_FUNDEF_SetFenceAPPLE
typedef void (*PFNGLSETFENCEAPPLEPROC_ALT)(GLuint);
static inline void glSetFenceAPPLE(GLuint fence1)
{
	static PFNGLSETFENCEAPPLEPROC_ALT fn=(PFNGLSETFENCEAPPLEPROC_ALT)glaltGetProcAddressExtension("glSetFenceAPPLE","GL_APPLE_fence");
	 fn(fence1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TestFenceAPPLE
#define GL_ALT_FUNDEF_TestFenceAPPLE
typedef GLboolean (*PFNGLTESTFENCEAPPLEPROC_ALT)(GLuint);
static inline GLboolean glTestFenceAPPLE(GLuint fence1)
{
	static PFNGLTESTFENCEAPPLEPROC_ALT fn=(PFNGLTESTFENCEAPPLEPROC_ALT)glaltGetProcAddressExtension("glTestFenceAPPLE","GL_APPLE_fence");
	return fn(fence1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TestObjectAPPLE
#define GL_ALT_FUNDEF_TestObjectAPPLE
typedef GLboolean (*PFNGLTESTOBJECTAPPLEPROC_ALT)(GLenum,GLuint);
static inline GLboolean glTestObjectAPPLE(GLenum object1,GLuint name1)
{
	static PFNGLTESTOBJECTAPPLEPROC_ALT fn=(PFNGLTESTOBJECTAPPLEPROC_ALT)glaltGetProcAddressExtension("glTestObjectAPPLE","GL_APPLE_fence");
	return fn(object1,name1);
}
#endif
CGUARDEND

#endif

#ifndef GL_APPLE_float_pixels
#define GL_APPLE_float_pixels
#ifndef GL_HALF_APPLE
#define GL_HALF_APPLE 0x140B
#endif //GL_HALF_APPLE
#ifndef GL_RGBA_FLOAT32_APPLE
#define GL_RGBA_FLOAT32_APPLE 0x8814
#endif //GL_RGBA_FLOAT32_APPLE
#ifndef GL_RGB_FLOAT32_APPLE
#define GL_RGB_FLOAT32_APPLE 0x8815
#endif //GL_RGB_FLOAT32_APPLE
#ifndef GL_ALPHA_FLOAT32_APPLE
#define GL_ALPHA_FLOAT32_APPLE 0x8816
#endif //GL_ALPHA_FLOAT32_APPLE
#ifndef GL_INTENSITY_FLOAT32_APPLE
#define GL_INTENSITY_FLOAT32_APPLE 0x8817
#endif //GL_INTENSITY_FLOAT32_APPLE
#ifndef GL_LUMINANCE_FLOAT32_APPLE
#define GL_LUMINANCE_FLOAT32_APPLE 0x8818
#endif //GL_LUMINANCE_FLOAT32_APPLE
#ifndef GL_LUMINANCE_ALPHA_FLOAT32_APPLE
#define GL_LUMINANCE_ALPHA_FLOAT32_APPLE 0x8819
#endif //GL_LUMINANCE_ALPHA_FLOAT32_APPLE
#ifndef GL_RGBA_FLOAT16_APPLE
#define GL_RGBA_FLOAT16_APPLE 0x881A
#endif //GL_RGBA_FLOAT16_APPLE
#ifndef GL_RGB_FLOAT16_APPLE
#define GL_RGB_FLOAT16_APPLE 0x881B
#endif //GL_RGB_FLOAT16_APPLE
#ifndef GL_ALPHA_FLOAT16_APPLE
#define GL_ALPHA_FLOAT16_APPLE 0x881C
#endif //GL_ALPHA_FLOAT16_APPLE
#ifndef GL_INTENSITY_FLOAT16_APPLE
#define GL_INTENSITY_FLOAT16_APPLE 0x881D
#endif //GL_INTENSITY_FLOAT16_APPLE
#ifndef GL_LUMINANCE_FLOAT16_APPLE
#define GL_LUMINANCE_FLOAT16_APPLE 0x881E
#endif //GL_LUMINANCE_FLOAT16_APPLE
#ifndef GL_LUMINANCE_ALPHA_FLOAT16_APPLE
#define GL_LUMINANCE_ALPHA_FLOAT16_APPLE 0x881F
#endif //GL_LUMINANCE_ALPHA_FLOAT16_APPLE
#ifndef GL_COLOR_FLOAT_APPLE
#define GL_COLOR_FLOAT_APPLE 0x8A0F
#endif //GL_COLOR_FLOAT_APPLE
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_APPLE_flush_buffer_range
#define GL_APPLE_flush_buffer_range
#ifndef GL_BUFFER_SERIALIZED_MODIFY_APPLE
#define GL_BUFFER_SERIALIZED_MODIFY_APPLE 0x8A12
#endif //GL_BUFFER_SERIALIZED_MODIFY_APPLE
#ifndef GL_BUFFER_FLUSHING_UNMAP_APPLE
#define GL_BUFFER_FLUSHING_UNMAP_APPLE 0x8A13
#endif //GL_BUFFER_FLUSHING_UNMAP_APPLE
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BufferParameteriAPPLE
#define GL_ALT_FUNDEF_BufferParameteriAPPLE
typedef void (*PFNGLBUFFERPARAMETERIAPPLEPROC_ALT)(GLenum,GLenum,GLint);
static inline void glBufferParameteriAPPLE(GLenum target1,GLenum pname1,GLint param1)
{
	static PFNGLBUFFERPARAMETERIAPPLEPROC_ALT fn=(PFNGLBUFFERPARAMETERIAPPLEPROC_ALT)glaltGetProcAddressExtension("glBufferParameteriAPPLE","GL_APPLE_flush_buffer_range");
	 fn(target1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FlushMappedBufferRangeAPPLE
#define GL_ALT_FUNDEF_FlushMappedBufferRangeAPPLE
typedef void (*PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC_ALT)(GLenum,GLintptr,GLsizeiptr);
static inline void glFlushMappedBufferRangeAPPLE(GLenum target1,GLintptr offset1,GLsizeiptr size1)
{
	static PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC_ALT fn=(PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC_ALT)glaltGetProcAddressExtension("glFlushMappedBufferRangeAPPLE","GL_APPLE_flush_buffer_range");
	 fn(target1,offset1,size1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_APPLE_object_purgeable
#define GL_APPLE_object_purgeable
#ifndef GL_BUFFER_OBJECT_APPLE
#define GL_BUFFER_OBJECT_APPLE 0x85B3
#endif //GL_BUFFER_OBJECT_APPLE
#ifndef GL_RELEASED_APPLE
#define GL_RELEASED_APPLE 0x8A19
#endif //GL_RELEASED_APPLE
#ifndef GL_VOLATILE_APPLE
#define GL_VOLATILE_APPLE 0x8A1A
#endif //GL_VOLATILE_APPLE
#ifndef GL_RETAINED_APPLE
#define GL_RETAINED_APPLE 0x8A1B
#endif //GL_RETAINED_APPLE
#ifndef GL_UNDEFINED_APPLE
#define GL_UNDEFINED_APPLE 0x8A1C
#endif //GL_UNDEFINED_APPLE
#ifndef GL_PURGEABLE_APPLE
#define GL_PURGEABLE_APPLE 0x8A1D
#endif //GL_PURGEABLE_APPLE
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetObjectParameterivAPPLE
#define GL_ALT_FUNDEF_GetObjectParameterivAPPLE
typedef void (*PFNGLGETOBJECTPARAMETERIVAPPLEPROC_ALT)(GLenum,GLuint,GLenum,GLint *);
static inline void glGetObjectParameterivAPPLE(GLenum objectType1,GLuint name1,GLenum pname1,GLint * params1)
{
	static PFNGLGETOBJECTPARAMETERIVAPPLEPROC_ALT fn=(PFNGLGETOBJECTPARAMETERIVAPPLEPROC_ALT)glaltGetProcAddressExtension("glGetObjectParameterivAPPLE","GL_APPLE_object_purgeable");
	 fn(objectType1,name1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ObjectPurgeableAPPLE
#define GL_ALT_FUNDEF_ObjectPurgeableAPPLE
typedef GLenum (*PFNGLOBJECTPURGEABLEAPPLEPROC_ALT)(GLenum,GLuint,GLenum);
static inline GLenum glObjectPurgeableAPPLE(GLenum objectType1,GLuint name1,GLenum option1)
{
	static PFNGLOBJECTPURGEABLEAPPLEPROC_ALT fn=(PFNGLOBJECTPURGEABLEAPPLEPROC_ALT)glaltGetProcAddressExtension("glObjectPurgeableAPPLE","GL_APPLE_object_purgeable");
	return fn(objectType1,name1,option1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ObjectUnpurgeableAPPLE
#define GL_ALT_FUNDEF_ObjectUnpurgeableAPPLE
typedef GLenum (*PFNGLOBJECTUNPURGEABLEAPPLEPROC_ALT)(GLenum,GLuint,GLenum);
static inline GLenum glObjectUnpurgeableAPPLE(GLenum objectType1,GLuint name1,GLenum option1)
{
	static PFNGLOBJECTUNPURGEABLEAPPLEPROC_ALT fn=(PFNGLOBJECTUNPURGEABLEAPPLEPROC_ALT)glaltGetProcAddressExtension("glObjectUnpurgeableAPPLE","GL_APPLE_object_purgeable");
	return fn(objectType1,name1,option1);
}
#endif
CGUARDEND

#endif

#ifndef GL_APPLE_rgb_422
#define GL_APPLE_rgb_422
#ifndef GL_UNSIGNED_SHORT_8_8_APPLE
#define GL_UNSIGNED_SHORT_8_8_APPLE 0x85BA
#endif //GL_UNSIGNED_SHORT_8_8_APPLE
#ifndef GL_UNSIGNED_SHORT_8_8_REV_APPLE
#define GL_UNSIGNED_SHORT_8_8_REV_APPLE 0x85BB
#endif //GL_UNSIGNED_SHORT_8_8_REV_APPLE
#ifndef GL_RGB_422_APPLE
#define GL_RGB_422_APPLE 0x8A1F
#endif //GL_RGB_422_APPLE
#ifndef GL_RGB_RAW_422_APPLE
#define GL_RGB_RAW_422_APPLE 0x8A51
#endif //GL_RGB_RAW_422_APPLE
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_APPLE_row_bytes
#define GL_APPLE_row_bytes
#ifndef GL_PACK_ROW_BYTES_APPLE
#define GL_PACK_ROW_BYTES_APPLE 0x8A15
#endif //GL_PACK_ROW_BYTES_APPLE
#ifndef GL_UNPACK_ROW_BYTES_APPLE
#define GL_UNPACK_ROW_BYTES_APPLE 0x8A16
#endif //GL_UNPACK_ROW_BYTES_APPLE
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_APPLE_specular_vector
#define GL_APPLE_specular_vector
#ifndef GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE
#define GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE 0x85B0
#endif //GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_APPLE_texture_range
#define GL_APPLE_texture_range
#ifndef GL_TEXTURE_RANGE_LENGTH_APPLE
#define GL_TEXTURE_RANGE_LENGTH_APPLE 0x85B7
#endif //GL_TEXTURE_RANGE_LENGTH_APPLE
#ifndef GL_TEXTURE_RANGE_POINTER_APPLE
#define GL_TEXTURE_RANGE_POINTER_APPLE 0x85B8
#endif //GL_TEXTURE_RANGE_POINTER_APPLE
#ifndef GL_TEXTURE_STORAGE_HINT_APPLE
#define GL_TEXTURE_STORAGE_HINT_APPLE 0x85BC
#endif //GL_TEXTURE_STORAGE_HINT_APPLE
#ifndef GL_STORAGE_PRIVATE_APPLE
#define GL_STORAGE_PRIVATE_APPLE 0x85BD
#endif //GL_STORAGE_PRIVATE_APPLE
#ifndef GL_STORAGE_CACHED_APPLE
#define GL_STORAGE_CACHED_APPLE 0x85BE
#endif //GL_STORAGE_CACHED_APPLE
#ifndef GL_STORAGE_SHARED_APPLE
#define GL_STORAGE_SHARED_APPLE 0x85BF
#endif //GL_STORAGE_SHARED_APPLE
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetTexParameterPointervAPPLE
#define GL_ALT_FUNDEF_GetTexParameterPointervAPPLE
typedef void (*PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC_ALT)(GLenum,GLenum,void **);
static inline void glGetTexParameterPointervAPPLE(GLenum target1,GLenum pname1,void ** params1)
{
	static PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC_ALT fn=(PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC_ALT)glaltGetProcAddressExtension("glGetTexParameterPointervAPPLE","GL_APPLE_texture_range");
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureRangeAPPLE
#define GL_ALT_FUNDEF_TextureRangeAPPLE
typedef void (*PFNGLTEXTURERANGEAPPLEPROC_ALT)(GLenum,GLsizei,const void *);
static inline void glTextureRangeAPPLE(GLenum target1,GLsizei length1,const void * pointer1)
{
	static PFNGLTEXTURERANGEAPPLEPROC_ALT fn=(PFNGLTEXTURERANGEAPPLEPROC_ALT)glaltGetProcAddressExtension("glTextureRangeAPPLE","GL_APPLE_texture_range");
	 fn(target1,length1,pointer1);
}
#endif
CGUARDEND

#endif

#ifndef GL_APPLE_transform_hint
#define GL_APPLE_transform_hint
#ifndef GL_TRANSFORM_HINT_APPLE
#define GL_TRANSFORM_HINT_APPLE 0x85B1
#endif //GL_TRANSFORM_HINT_APPLE
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_APPLE_vertex_array_object
#define GL_APPLE_vertex_array_object
#ifndef GL_VERTEX_ARRAY_BINDING_APPLE
#define GL_VERTEX_ARRAY_BINDING_APPLE 0x85B5
#endif //GL_VERTEX_ARRAY_BINDING_APPLE
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BindVertexArrayAPPLE
#define GL_ALT_FUNDEF_BindVertexArrayAPPLE
typedef void (*PFNGLBINDVERTEXARRAYAPPLEPROC_ALT)(GLuint);
static inline void glBindVertexArrayAPPLE(GLuint array1)
{
	static PFNGLBINDVERTEXARRAYAPPLEPROC_ALT fn=(PFNGLBINDVERTEXARRAYAPPLEPROC_ALT)glaltGetProcAddressExtension("glBindVertexArrayAPPLE","GL_APPLE_vertex_array_object");
	 fn(array1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DeleteVertexArraysAPPLE
#define GL_ALT_FUNDEF_DeleteVertexArraysAPPLE
typedef void (*PFNGLDELETEVERTEXARRAYSAPPLEPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteVertexArraysAPPLE(GLsizei n1,const GLuint * arrays1)
{
	static PFNGLDELETEVERTEXARRAYSAPPLEPROC_ALT fn=(PFNGLDELETEVERTEXARRAYSAPPLEPROC_ALT)glaltGetProcAddressExtension("glDeleteVertexArraysAPPLE","GL_APPLE_vertex_array_object");
	 fn(n1,arrays1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GenVertexArraysAPPLE
#define GL_ALT_FUNDEF_GenVertexArraysAPPLE
typedef void (*PFNGLGENVERTEXARRAYSAPPLEPROC_ALT)(GLsizei,GLuint *);
static inline void glGenVertexArraysAPPLE(GLsizei n1,GLuint * arrays1)
{
	static PFNGLGENVERTEXARRAYSAPPLEPROC_ALT fn=(PFNGLGENVERTEXARRAYSAPPLEPROC_ALT)glaltGetProcAddressExtension("glGenVertexArraysAPPLE","GL_APPLE_vertex_array_object");
	 fn(n1,arrays1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_IsVertexArrayAPPLE
#define GL_ALT_FUNDEF_IsVertexArrayAPPLE
typedef GLboolean (*PFNGLISVERTEXARRAYAPPLEPROC_ALT)(GLuint);
static inline GLboolean glIsVertexArrayAPPLE(GLuint array1)
{
	static PFNGLISVERTEXARRAYAPPLEPROC_ALT fn=(PFNGLISVERTEXARRAYAPPLEPROC_ALT)glaltGetProcAddressExtension("glIsVertexArrayAPPLE","GL_APPLE_vertex_array_object");
	return fn(array1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_APPLE_vertex_array_range
#define GL_APPLE_vertex_array_range
#ifndef GL_VERTEX_ARRAY_RANGE_APPLE
#define GL_VERTEX_ARRAY_RANGE_APPLE 0x851D
#endif //GL_VERTEX_ARRAY_RANGE_APPLE
#ifndef GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE
#define GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE 0x851E
#endif //GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE
#ifndef GL_VERTEX_ARRAY_STORAGE_HINT_APPLE
#define GL_VERTEX_ARRAY_STORAGE_HINT_APPLE 0x851F
#endif //GL_VERTEX_ARRAY_STORAGE_HINT_APPLE
#ifndef GL_VERTEX_ARRAY_RANGE_POINTER_APPLE
#define GL_VERTEX_ARRAY_RANGE_POINTER_APPLE 0x8521
#endif //GL_VERTEX_ARRAY_RANGE_POINTER_APPLE
#ifndef GL_STORAGE_CLIENT_APPLE
#define GL_STORAGE_CLIENT_APPLE 0x85B4
#endif //GL_STORAGE_CLIENT_APPLE
#ifndef GL_STORAGE_CACHED_APPLE
#define GL_STORAGE_CACHED_APPLE 0x85BE
#endif //GL_STORAGE_CACHED_APPLE
#ifndef GL_STORAGE_SHARED_APPLE
#define GL_STORAGE_SHARED_APPLE 0x85BF
#endif //GL_STORAGE_SHARED_APPLE
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_FlushVertexArrayRangeAPPLE
#define GL_ALT_FUNDEF_FlushVertexArrayRangeAPPLE
typedef void (*PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC_ALT)(GLsizei,void *);
static inline void glFlushVertexArrayRangeAPPLE(GLsizei length1,void * pointer1)
{
	static PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC_ALT fn=(PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC_ALT)glaltGetProcAddressExtension("glFlushVertexArrayRangeAPPLE","GL_APPLE_vertex_array_range");
	 fn(length1,pointer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexArrayParameteriAPPLE
#define GL_ALT_FUNDEF_VertexArrayParameteriAPPLE
typedef void (*PFNGLVERTEXARRAYPARAMETERIAPPLEPROC_ALT)(GLenum,GLint);
static inline void glVertexArrayParameteriAPPLE(GLenum pname1,GLint param1)
{
	static PFNGLVERTEXARRAYPARAMETERIAPPLEPROC_ALT fn=(PFNGLVERTEXARRAYPARAMETERIAPPLEPROC_ALT)glaltGetProcAddressExtension("glVertexArrayParameteriAPPLE","GL_APPLE_vertex_array_range");
	 fn(pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexArrayRangeAPPLE
#define GL_ALT_FUNDEF_VertexArrayRangeAPPLE
typedef void (*PFNGLVERTEXARRAYRANGEAPPLEPROC_ALT)(GLsizei,void *);
static inline void glVertexArrayRangeAPPLE(GLsizei length1,void * pointer1)
{
	static PFNGLVERTEXARRAYRANGEAPPLEPROC_ALT fn=(PFNGLVERTEXARRAYRANGEAPPLEPROC_ALT)glaltGetProcAddressExtension("glVertexArrayRangeAPPLE","GL_APPLE_vertex_array_range");
	 fn(length1,pointer1);
}
#endif
CGUARDEND

#endif

#ifndef GL_APPLE_vertex_program_evaluators
#define GL_APPLE_vertex_program_evaluators
#ifndef GL_VERTEX_ATTRIB_MAP1_APPLE
#define GL_VERTEX_ATTRIB_MAP1_APPLE 0x8A00
#endif //GL_VERTEX_ATTRIB_MAP1_APPLE
#ifndef GL_VERTEX_ATTRIB_MAP2_APPLE
#define GL_VERTEX_ATTRIB_MAP2_APPLE 0x8A01
#endif //GL_VERTEX_ATTRIB_MAP2_APPLE
#ifndef GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE
#define GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE 0x8A02
#endif //GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE
#ifndef GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE
#define GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE 0x8A03
#endif //GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE
#ifndef GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE
#define GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE 0x8A04
#endif //GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE
#ifndef GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE
#define GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE 0x8A05
#endif //GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE
#ifndef GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE
#define GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE 0x8A06
#endif //GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE
#ifndef GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE
#define GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE 0x8A07
#endif //GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE
#ifndef GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE
#define GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE 0x8A08
#endif //GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE
#ifndef GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE
#define GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE 0x8A09
#endif //GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_DisableVertexAttribAPPLE
#define GL_ALT_FUNDEF_DisableVertexAttribAPPLE
typedef void (*PFNGLDISABLEVERTEXATTRIBAPPLEPROC_ALT)(GLuint,GLenum);
static inline void glDisableVertexAttribAPPLE(GLuint index1,GLenum pname1)
{
	static PFNGLDISABLEVERTEXATTRIBAPPLEPROC_ALT fn=(PFNGLDISABLEVERTEXATTRIBAPPLEPROC_ALT)glaltGetProcAddressExtension("glDisableVertexAttribAPPLE","GL_APPLE_vertex_program_evaluators");
	 fn(index1,pname1);
}
#endif

#ifndef	GL_ALT_FUNDEF_EnableVertexAttribAPPLE
#define GL_ALT_FUNDEF_EnableVertexAttribAPPLE
typedef void (*PFNGLENABLEVERTEXATTRIBAPPLEPROC_ALT)(GLuint,GLenum);
static inline void glEnableVertexAttribAPPLE(GLuint index1,GLenum pname1)
{
	static PFNGLENABLEVERTEXATTRIBAPPLEPROC_ALT fn=(PFNGLENABLEVERTEXATTRIBAPPLEPROC_ALT)glaltGetProcAddressExtension("glEnableVertexAttribAPPLE","GL_APPLE_vertex_program_evaluators");
	 fn(index1,pname1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IsVertexAttribEnabledAPPLE
#define GL_ALT_FUNDEF_IsVertexAttribEnabledAPPLE
typedef GLboolean (*PFNGLISVERTEXATTRIBENABLEDAPPLEPROC_ALT)(GLuint,GLenum);
static inline GLboolean glIsVertexAttribEnabledAPPLE(GLuint index1,GLenum pname1)
{
	static PFNGLISVERTEXATTRIBENABLEDAPPLEPROC_ALT fn=(PFNGLISVERTEXATTRIBENABLEDAPPLEPROC_ALT)glaltGetProcAddressExtension("glIsVertexAttribEnabledAPPLE","GL_APPLE_vertex_program_evaluators");
	return fn(index1,pname1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MapVertexAttrib1dAPPLE
#define GL_ALT_FUNDEF_MapVertexAttrib1dAPPLE
typedef void (*PFNGLMAPVERTEXATTRIB1DAPPLEPROC_ALT)(GLuint,GLuint,GLdouble,GLdouble,GLint,GLint,const GLdouble *);
static inline void glMapVertexAttrib1dAPPLE(GLuint index1,GLuint size1,GLdouble u11,GLdouble u21,GLint stride1,GLint order1,const GLdouble * points1)
{
	static PFNGLMAPVERTEXATTRIB1DAPPLEPROC_ALT fn=(PFNGLMAPVERTEXATTRIB1DAPPLEPROC_ALT)glaltGetProcAddressExtension("glMapVertexAttrib1dAPPLE","GL_APPLE_vertex_program_evaluators");
	 fn(index1,size1,u11,u21,stride1,order1,points1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MapVertexAttrib1fAPPLE
#define GL_ALT_FUNDEF_MapVertexAttrib1fAPPLE
typedef void (*PFNGLMAPVERTEXATTRIB1FAPPLEPROC_ALT)(GLuint,GLuint,GLfloat,GLfloat,GLint,GLint,const GLfloat *);
static inline void glMapVertexAttrib1fAPPLE(GLuint index1,GLuint size1,GLfloat u11,GLfloat u21,GLint stride1,GLint order1,const GLfloat * points1)
{
	static PFNGLMAPVERTEXATTRIB1FAPPLEPROC_ALT fn=(PFNGLMAPVERTEXATTRIB1FAPPLEPROC_ALT)glaltGetProcAddressExtension("glMapVertexAttrib1fAPPLE","GL_APPLE_vertex_program_evaluators");
	 fn(index1,size1,u11,u21,stride1,order1,points1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MapVertexAttrib2dAPPLE
#define GL_ALT_FUNDEF_MapVertexAttrib2dAPPLE
typedef void (*PFNGLMAPVERTEXATTRIB2DAPPLEPROC_ALT)(GLuint,GLuint,GLdouble,GLdouble,GLint,GLint,GLdouble,GLdouble,GLint,GLint,const GLdouble *);
static inline void glMapVertexAttrib2dAPPLE(GLuint index1,GLuint size1,GLdouble u11,GLdouble u21,GLint ustride1,GLint uorder1,GLdouble v11,GLdouble v21,GLint vstride1,GLint vorder1,const GLdouble * points1)
{
	static PFNGLMAPVERTEXATTRIB2DAPPLEPROC_ALT fn=(PFNGLMAPVERTEXATTRIB2DAPPLEPROC_ALT)glaltGetProcAddressExtension("glMapVertexAttrib2dAPPLE","GL_APPLE_vertex_program_evaluators");
	 fn(index1,size1,u11,u21,ustride1,uorder1,v11,v21,vstride1,vorder1,points1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MapVertexAttrib2fAPPLE
#define GL_ALT_FUNDEF_MapVertexAttrib2fAPPLE
typedef void (*PFNGLMAPVERTEXATTRIB2FAPPLEPROC_ALT)(GLuint,GLuint,GLfloat,GLfloat,GLint,GLint,GLfloat,GLfloat,GLint,GLint,const GLfloat *);
static inline void glMapVertexAttrib2fAPPLE(GLuint index1,GLuint size1,GLfloat u11,GLfloat u21,GLint ustride1,GLint uorder1,GLfloat v11,GLfloat v21,GLint vstride1,GLint vorder1,const GLfloat * points1)
{
	static PFNGLMAPVERTEXATTRIB2FAPPLEPROC_ALT fn=(PFNGLMAPVERTEXATTRIB2FAPPLEPROC_ALT)glaltGetProcAddressExtension("glMapVertexAttrib2fAPPLE","GL_APPLE_vertex_program_evaluators");
	 fn(index1,size1,u11,u21,ustride1,uorder1,v11,v21,vstride1,vorder1,points1);
}
#endif
CGUARDEND

#endif

#ifndef GL_APPLE_ycbcr_422
#define GL_APPLE_ycbcr_422
#ifndef GL_YCBCR_422_APPLE
#define GL_YCBCR_422_APPLE 0x85B9
#endif //GL_YCBCR_422_APPLE
#ifndef GL_UNSIGNED_SHORT_8_8_APPLE
#define GL_UNSIGNED_SHORT_8_8_APPLE 0x85BA
#endif //GL_UNSIGNED_SHORT_8_8_APPLE
#ifndef GL_UNSIGNED_SHORT_8_8_REV_APPLE
#define GL_UNSIGNED_SHORT_8_8_REV_APPLE 0x85BB
#endif //GL_UNSIGNED_SHORT_8_8_REV_APPLE
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_ES2_compatibility
#define GL_ARB_ES2_compatibility
#ifndef GL_FIXED
#define GL_FIXED 0x140C
#endif //GL_FIXED
#ifndef GL_IMPLEMENTATION_COLOR_READ_TYPE
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#endif //GL_IMPLEMENTATION_COLOR_READ_TYPE
#ifndef GL_IMPLEMENTATION_COLOR_READ_FORMAT
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#endif //GL_IMPLEMENTATION_COLOR_READ_FORMAT
#ifndef GL_RGB565
#define GL_RGB565 0x8D62
#endif //GL_RGB565
#ifndef GL_LOW_FLOAT
#define GL_LOW_FLOAT 0x8DF0
#endif //GL_LOW_FLOAT
#ifndef GL_MEDIUM_FLOAT
#define GL_MEDIUM_FLOAT 0x8DF1
#endif //GL_MEDIUM_FLOAT
#ifndef GL_HIGH_FLOAT
#define GL_HIGH_FLOAT 0x8DF2
#endif //GL_HIGH_FLOAT
#ifndef GL_LOW_INT
#define GL_LOW_INT 0x8DF3
#endif //GL_LOW_INT
#ifndef GL_MEDIUM_INT
#define GL_MEDIUM_INT 0x8DF4
#endif //GL_MEDIUM_INT
#ifndef GL_HIGH_INT
#define GL_HIGH_INT 0x8DF5
#endif //GL_HIGH_INT
#ifndef GL_SHADER_BINARY_FORMATS
#define GL_SHADER_BINARY_FORMATS 0x8DF8
#endif //GL_SHADER_BINARY_FORMATS
#ifndef GL_NUM_SHADER_BINARY_FORMATS
#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
#endif //GL_NUM_SHADER_BINARY_FORMATS
#ifndef GL_SHADER_COMPILER
#define GL_SHADER_COMPILER 0x8DFA
#endif //GL_SHADER_COMPILER
#ifndef GL_MAX_VERTEX_UNIFORM_VECTORS
#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
#endif //GL_MAX_VERTEX_UNIFORM_VECTORS
#ifndef GL_MAX_VARYING_VECTORS
#define GL_MAX_VARYING_VECTORS 0x8DFC
#endif //GL_MAX_VARYING_VECTORS
#ifndef GL_MAX_FRAGMENT_UNIFORM_VECTORS
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
#endif //GL_MAX_FRAGMENT_UNIFORM_VECTORS
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ClearDepthf
#define GL_ALT_FUNDEF_ClearDepthf
typedef void (*PFNGLCLEARDEPTHFPROC_ALT)(GLfloat);
static inline void glClearDepthf(GLfloat d1)
{
	static PFNGLCLEARDEPTHFPROC_ALT fn=(PFNGLCLEARDEPTHFPROC_ALT)glaltGetProcAddressExtension("glClearDepthf","GL_ARB_ES2_compatibility");
	 fn(d1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DepthRangef
#define GL_ALT_FUNDEF_DepthRangef
typedef void (*PFNGLDEPTHRANGEFPROC_ALT)(GLfloat,GLfloat);
static inline void glDepthRangef(GLfloat n1,GLfloat f1)
{
	static PFNGLDEPTHRANGEFPROC_ALT fn=(PFNGLDEPTHRANGEFPROC_ALT)glaltGetProcAddressExtension("glDepthRangef","GL_ARB_ES2_compatibility");
	 fn(n1,f1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetShaderPrecisionFormat
#define GL_ALT_FUNDEF_GetShaderPrecisionFormat
typedef void (*PFNGLGETSHADERPRECISIONFORMATPROC_ALT)(GLenum,GLenum,GLint *,GLint *);
static inline void glGetShaderPrecisionFormat(GLenum shadertype1,GLenum precisiontype1,GLint * range1,GLint * precision1)
{
	static PFNGLGETSHADERPRECISIONFORMATPROC_ALT fn=(PFNGLGETSHADERPRECISIONFORMATPROC_ALT)glaltGetProcAddressExtension("glGetShaderPrecisionFormat","GL_ARB_ES2_compatibility");
	 fn(shadertype1,precisiontype1,range1,precision1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ReleaseShaderCompiler
#define GL_ALT_FUNDEF_ReleaseShaderCompiler
typedef void (*PFNGLRELEASESHADERCOMPILERPROC_ALT)();
static inline void glReleaseShaderCompiler()
{
	static PFNGLRELEASESHADERCOMPILERPROC_ALT fn=(PFNGLRELEASESHADERCOMPILERPROC_ALT)glaltGetProcAddressExtension("glReleaseShaderCompiler","GL_ARB_ES2_compatibility");
	 fn();
}
#endif

#ifndef	GL_ALT_FUNDEF_ShaderBinary
#define GL_ALT_FUNDEF_ShaderBinary
typedef void (*PFNGLSHADERBINARYPROC_ALT)(GLsizei,const GLuint *,GLenum,const void *,GLsizei);
static inline void glShaderBinary(GLsizei count1,const GLuint * shaders1,GLenum binaryformat1,const void * binary1,GLsizei length1)
{
	static PFNGLSHADERBINARYPROC_ALT fn=(PFNGLSHADERBINARYPROC_ALT)glaltGetProcAddressExtension("glShaderBinary","GL_ARB_ES2_compatibility");
	 fn(count1,shaders1,binaryformat1,binary1,length1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_ES3_1_compatibility
#define GL_ARB_ES3_1_compatibility
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_MemoryBarrierByRegion
#define GL_ALT_FUNDEF_MemoryBarrierByRegion
typedef void (*PFNGLMEMORYBARRIERBYREGIONPROC_ALT)(GLbitfield);
static inline void glMemoryBarrierByRegion(GLbitfield barriers1)
{
	static PFNGLMEMORYBARRIERBYREGIONPROC_ALT fn=(PFNGLMEMORYBARRIERBYREGIONPROC_ALT)glaltGetProcAddressExtension("glMemoryBarrierByRegion","GL_ARB_ES3_1_compatibility");
	 fn(barriers1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_ES3_compatibility
#define GL_ARB_ES3_compatibility
#ifndef GL_PRIMITIVE_RESTART_FIXED_INDEX
#define GL_PRIMITIVE_RESTART_FIXED_INDEX 0x8D69
#endif //GL_PRIMITIVE_RESTART_FIXED_INDEX
#ifndef GL_ANY_SAMPLES_PASSED_CONSERVATIVE
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0x8D6A
#endif //GL_ANY_SAMPLES_PASSED_CONSERVATIVE
#ifndef GL_MAX_ELEMENT_INDEX
#define GL_MAX_ELEMENT_INDEX 0x8D6B
#endif //GL_MAX_ELEMENT_INDEX
#ifndef GL_COMPRESSED_R11_EAC
#define GL_COMPRESSED_R11_EAC 0x9270
#endif //GL_COMPRESSED_R11_EAC
#ifndef GL_COMPRESSED_SIGNED_R11_EAC
#define GL_COMPRESSED_SIGNED_R11_EAC 0x9271
#endif //GL_COMPRESSED_SIGNED_R11_EAC
#ifndef GL_COMPRESSED_RG11_EAC
#define GL_COMPRESSED_RG11_EAC 0x9272
#endif //GL_COMPRESSED_RG11_EAC
#ifndef GL_COMPRESSED_SIGNED_RG11_EAC
#define GL_COMPRESSED_SIGNED_RG11_EAC 0x9273
#endif //GL_COMPRESSED_SIGNED_RG11_EAC
#ifndef GL_COMPRESSED_RGB8_ETC2
#define GL_COMPRESSED_RGB8_ETC2 0x9274
#endif //GL_COMPRESSED_RGB8_ETC2
#ifndef GL_COMPRESSED_SRGB8_ETC2
#define GL_COMPRESSED_SRGB8_ETC2 0x9275
#endif //GL_COMPRESSED_SRGB8_ETC2
#ifndef GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276
#endif //GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
#ifndef GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277
#endif //GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
#ifndef GL_COMPRESSED_RGBA8_ETC2_EAC
#define GL_COMPRESSED_RGBA8_ETC2_EAC 0x9278
#endif //GL_COMPRESSED_RGBA8_ETC2_EAC
#ifndef GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0x9279
#endif //GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_arrays_of_arrays
#define GL_ARB_arrays_of_arrays
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_base_instance
#define GL_ARB_base_instance
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_DrawArraysInstancedBaseInstance
#define GL_ALT_FUNDEF_DrawArraysInstancedBaseInstance
typedef void (*PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC_ALT)(GLenum,GLint,GLsizei,GLsizei,GLuint);
static inline void glDrawArraysInstancedBaseInstance(GLenum mode1,GLint first1,GLsizei count1,GLsizei instancecount1,GLuint baseinstance1)
{
	static PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC_ALT fn=(PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC_ALT)glaltGetProcAddressExtension("glDrawArraysInstancedBaseInstance","GL_ARB_base_instance");
	 fn(mode1,first1,count1,instancecount1,baseinstance1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DrawElementsInstancedBaseInstance
#define GL_ALT_FUNDEF_DrawElementsInstancedBaseInstance
typedef void (*PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC_ALT)(GLenum,GLsizei,GLenum,const void *,GLsizei,GLuint);
static inline void glDrawElementsInstancedBaseInstance(GLenum mode1,GLsizei count1,GLenum type1,const void * indices1,GLsizei instancecount1,GLuint baseinstance1)
{
	static PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC_ALT fn=(PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC_ALT)glaltGetProcAddressExtension("glDrawElementsInstancedBaseInstance","GL_ARB_base_instance");
	 fn(mode1,count1,type1,indices1,instancecount1,baseinstance1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DrawElementsInstancedBaseVertexBaseInstance
#define GL_ALT_FUNDEF_DrawElementsInstancedBaseVertexBaseInstance
typedef void (*PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC_ALT)(GLenum,GLsizei,GLenum,const void *,GLsizei,GLint,GLuint);
static inline void glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode1,GLsizei count1,GLenum type1,const void * indices1,GLsizei instancecount1,GLint basevertex1,GLuint baseinstance1)
{
	static PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC_ALT fn=(PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC_ALT)glaltGetProcAddressExtension("glDrawElementsInstancedBaseVertexBaseInstance","GL_ARB_base_instance");
	 fn(mode1,count1,type1,indices1,instancecount1,basevertex1,baseinstance1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_bindless_texture
#define GL_ARB_bindless_texture
#ifndef GL_UNSIGNED_INT64_ARB
#define GL_UNSIGNED_INT64_ARB 0x140F
#endif //GL_UNSIGNED_INT64_ARB
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetImageHandleARB
#define GL_ALT_FUNDEF_GetImageHandleARB
typedef GLuint64 (*PFNGLGETIMAGEHANDLEARBPROC_ALT)(GLuint,GLint,GLboolean,GLint,GLenum);
static inline GLuint64 glGetImageHandleARB(GLuint texture1,GLint level1,GLboolean layered1,GLint layer1,GLenum format1)
{
	static PFNGLGETIMAGEHANDLEARBPROC_ALT fn=(PFNGLGETIMAGEHANDLEARBPROC_ALT)glaltGetProcAddressExtension("glGetImageHandleARB","GL_ARB_bindless_texture");
	return fn(texture1,level1,layered1,layer1,format1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetTextureHandleARB
#define GL_ALT_FUNDEF_GetTextureHandleARB
typedef GLuint64 (*PFNGLGETTEXTUREHANDLEARBPROC_ALT)(GLuint);
static inline GLuint64 glGetTextureHandleARB(GLuint texture1)
{
	static PFNGLGETTEXTUREHANDLEARBPROC_ALT fn=(PFNGLGETTEXTUREHANDLEARBPROC_ALT)glaltGetProcAddressExtension("glGetTextureHandleARB","GL_ARB_bindless_texture");
	return fn(texture1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetTextureSamplerHandleARB
#define GL_ALT_FUNDEF_GetTextureSamplerHandleARB
typedef GLuint64 (*PFNGLGETTEXTURESAMPLERHANDLEARBPROC_ALT)(GLuint,GLuint);
static inline GLuint64 glGetTextureSamplerHandleARB(GLuint texture1,GLuint sampler1)
{
	static PFNGLGETTEXTURESAMPLERHANDLEARBPROC_ALT fn=(PFNGLGETTEXTURESAMPLERHANDLEARBPROC_ALT)glaltGetProcAddressExtension("glGetTextureSamplerHandleARB","GL_ARB_bindless_texture");
	return fn(texture1,sampler1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetVertexAttribLui64vARB
#define GL_ALT_FUNDEF_GetVertexAttribLui64vARB
typedef void (*PFNGLGETVERTEXATTRIBLUI64VARBPROC_ALT)(GLuint,GLenum,GLuint64EXT *);
static inline void glGetVertexAttribLui64vARB(GLuint index1,GLenum pname1,GLuint64EXT * params1)
{
	static PFNGLGETVERTEXATTRIBLUI64VARBPROC_ALT fn=(PFNGLGETVERTEXATTRIBLUI64VARBPROC_ALT)glaltGetProcAddressExtension("glGetVertexAttribLui64vARB","GL_ARB_bindless_texture");
	 fn(index1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IsImageHandleResidentARB
#define GL_ALT_FUNDEF_IsImageHandleResidentARB
typedef GLboolean (*PFNGLISIMAGEHANDLERESIDENTARBPROC_ALT)(GLuint64);
static inline GLboolean glIsImageHandleResidentARB(GLuint64 handle1)
{
	static PFNGLISIMAGEHANDLERESIDENTARBPROC_ALT fn=(PFNGLISIMAGEHANDLERESIDENTARBPROC_ALT)glaltGetProcAddressExtension("glIsImageHandleResidentARB","GL_ARB_bindless_texture");
	return fn(handle1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IsTextureHandleResidentARB
#define GL_ALT_FUNDEF_IsTextureHandleResidentARB
typedef GLboolean (*PFNGLISTEXTUREHANDLERESIDENTARBPROC_ALT)(GLuint64);
static inline GLboolean glIsTextureHandleResidentARB(GLuint64 handle1)
{
	static PFNGLISTEXTUREHANDLERESIDENTARBPROC_ALT fn=(PFNGLISTEXTUREHANDLERESIDENTARBPROC_ALT)glaltGetProcAddressExtension("glIsTextureHandleResidentARB","GL_ARB_bindless_texture");
	return fn(handle1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MakeImageHandleNonResidentARB
#define GL_ALT_FUNDEF_MakeImageHandleNonResidentARB
typedef void (*PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC_ALT)(GLuint64);
static inline void glMakeImageHandleNonResidentARB(GLuint64 handle1)
{
	static PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC_ALT fn=(PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC_ALT)glaltGetProcAddressExtension("glMakeImageHandleNonResidentARB","GL_ARB_bindless_texture");
	 fn(handle1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MakeImageHandleResidentARB
#define GL_ALT_FUNDEF_MakeImageHandleResidentARB
typedef void (*PFNGLMAKEIMAGEHANDLERESIDENTARBPROC_ALT)(GLuint64,GLenum);
static inline void glMakeImageHandleResidentARB(GLuint64 handle1,GLenum access1)
{
	static PFNGLMAKEIMAGEHANDLERESIDENTARBPROC_ALT fn=(PFNGLMAKEIMAGEHANDLERESIDENTARBPROC_ALT)glaltGetProcAddressExtension("glMakeImageHandleResidentARB","GL_ARB_bindless_texture");
	 fn(handle1,access1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MakeTextureHandleNonResidentARB
#define GL_ALT_FUNDEF_MakeTextureHandleNonResidentARB
typedef void (*PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC_ALT)(GLuint64);
static inline void glMakeTextureHandleNonResidentARB(GLuint64 handle1)
{
	static PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC_ALT fn=(PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC_ALT)glaltGetProcAddressExtension("glMakeTextureHandleNonResidentARB","GL_ARB_bindless_texture");
	 fn(handle1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MakeTextureHandleResidentARB
#define GL_ALT_FUNDEF_MakeTextureHandleResidentARB
typedef void (*PFNGLMAKETEXTUREHANDLERESIDENTARBPROC_ALT)(GLuint64);
static inline void glMakeTextureHandleResidentARB(GLuint64 handle1)
{
	static PFNGLMAKETEXTUREHANDLERESIDENTARBPROC_ALT fn=(PFNGLMAKETEXTUREHANDLERESIDENTARBPROC_ALT)glaltGetProcAddressExtension("glMakeTextureHandleResidentARB","GL_ARB_bindless_texture");
	 fn(handle1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformHandleui64ARB
#define GL_ALT_FUNDEF_ProgramUniformHandleui64ARB
typedef void (*PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC_ALT)(GLuint,GLint,GLuint64);
static inline void glProgramUniformHandleui64ARB(GLuint program1,GLint location1,GLuint64 value1)
{
	static PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC_ALT fn=(PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC_ALT)glaltGetProcAddressExtension("glProgramUniformHandleui64ARB","GL_ARB_bindless_texture");
	 fn(program1,location1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformHandleui64vARB
#define GL_ALT_FUNDEF_ProgramUniformHandleui64vARB
typedef void (*PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC_ALT)(GLuint,GLint,GLsizei,const GLuint64 *);
static inline void glProgramUniformHandleui64vARB(GLuint program1,GLint location1,GLsizei count1,const GLuint64 * values1)
{
	static PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC_ALT fn=(PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC_ALT)glaltGetProcAddressExtension("glProgramUniformHandleui64vARB","GL_ARB_bindless_texture");
	 fn(program1,location1,count1,values1);
}
#endif

#ifndef	GL_ALT_FUNDEF_UniformHandleui64ARB
#define GL_ALT_FUNDEF_UniformHandleui64ARB
typedef void (*PFNGLUNIFORMHANDLEUI64ARBPROC_ALT)(GLint,GLuint64);
static inline void glUniformHandleui64ARB(GLint location1,GLuint64 value1)
{
	static PFNGLUNIFORMHANDLEUI64ARBPROC_ALT fn=(PFNGLUNIFORMHANDLEUI64ARBPROC_ALT)glaltGetProcAddressExtension("glUniformHandleui64ARB","GL_ARB_bindless_texture");
	 fn(location1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_UniformHandleui64vARB
#define GL_ALT_FUNDEF_UniformHandleui64vARB
typedef void (*PFNGLUNIFORMHANDLEUI64VARBPROC_ALT)(GLint,GLsizei,const GLuint64 *);
static inline void glUniformHandleui64vARB(GLint location1,GLsizei count1,const GLuint64 * value1)
{
	static PFNGLUNIFORMHANDLEUI64VARBPROC_ALT fn=(PFNGLUNIFORMHANDLEUI64VARBPROC_ALT)glaltGetProcAddressExtension("glUniformHandleui64vARB","GL_ARB_bindless_texture");
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribL1ui64ARB
#define GL_ALT_FUNDEF_VertexAttribL1ui64ARB
typedef void (*PFNGLVERTEXATTRIBL1UI64ARBPROC_ALT)(GLuint,GLuint64EXT);
static inline void glVertexAttribL1ui64ARB(GLuint index1,GLuint64EXT x1)
{
	static PFNGLVERTEXATTRIBL1UI64ARBPROC_ALT fn=(PFNGLVERTEXATTRIBL1UI64ARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL1ui64ARB","GL_ARB_bindless_texture");
	 fn(index1,x1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribL1ui64vARB
#define GL_ALT_FUNDEF_VertexAttribL1ui64vARB
typedef void (*PFNGLVERTEXATTRIBL1UI64VARBPROC_ALT)(GLuint,const GLuint64EXT *);
static inline void glVertexAttribL1ui64vARB(GLuint index1,const GLuint64EXT * v1)
{
	static PFNGLVERTEXATTRIBL1UI64VARBPROC_ALT fn=(PFNGLVERTEXATTRIBL1UI64VARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL1ui64vARB","GL_ARB_bindless_texture");
	 fn(index1,v1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_blend_func_extended
#define GL_ARB_blend_func_extended
#ifndef GL_SRC1_ALPHA
#define GL_SRC1_ALPHA 0x8589
#endif //GL_SRC1_ALPHA
#ifndef GL_SRC1_COLOR
#define GL_SRC1_COLOR 0x88F9
#endif //GL_SRC1_COLOR
#ifndef GL_ONE_MINUS_SRC1_COLOR
#define GL_ONE_MINUS_SRC1_COLOR 0x88FA
#endif //GL_ONE_MINUS_SRC1_COLOR
#ifndef GL_ONE_MINUS_SRC1_ALPHA
#define GL_ONE_MINUS_SRC1_ALPHA 0x88FB
#endif //GL_ONE_MINUS_SRC1_ALPHA
#ifndef GL_MAX_DUAL_SOURCE_DRAW_BUFFERS
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC
#endif //GL_MAX_DUAL_SOURCE_DRAW_BUFFERS
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BindFragDataLocationIndexed
#define GL_ALT_FUNDEF_BindFragDataLocationIndexed
typedef void (*PFNGLBINDFRAGDATALOCATIONINDEXEDPROC_ALT)(GLuint,GLuint,GLuint,const GLchar *);
static inline void glBindFragDataLocationIndexed(GLuint program1,GLuint colorNumber1,GLuint index1,const GLchar * name1)
{
	static PFNGLBINDFRAGDATALOCATIONINDEXEDPROC_ALT fn=(PFNGLBINDFRAGDATALOCATIONINDEXEDPROC_ALT)glaltGetProcAddressExtension("glBindFragDataLocationIndexed","GL_ARB_blend_func_extended");
	 fn(program1,colorNumber1,index1,name1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetFragDataIndex
#define GL_ALT_FUNDEF_GetFragDataIndex
typedef GLint (*PFNGLGETFRAGDATAINDEXPROC_ALT)(GLuint,const GLchar *);
static inline GLint glGetFragDataIndex(GLuint program1,const GLchar * name1)
{
	static PFNGLGETFRAGDATAINDEXPROC_ALT fn=(PFNGLGETFRAGDATAINDEXPROC_ALT)glaltGetProcAddressExtension("glGetFragDataIndex","GL_ARB_blend_func_extended");
	return fn(program1,name1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_buffer_storage
#define GL_ARB_buffer_storage
#ifndef GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT
#define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT 0x00004000
#endif //GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT
#ifndef GL_MAP_READ_BIT
#define GL_MAP_READ_BIT 0x0001
#endif //GL_MAP_READ_BIT
#ifndef GL_MAP_WRITE_BIT
#define GL_MAP_WRITE_BIT 0x0002
#endif //GL_MAP_WRITE_BIT
#ifndef GL_MAP_PERSISTENT_BIT
#define GL_MAP_PERSISTENT_BIT 0x0040
#endif //GL_MAP_PERSISTENT_BIT
#ifndef GL_MAP_COHERENT_BIT
#define GL_MAP_COHERENT_BIT 0x0080
#endif //GL_MAP_COHERENT_BIT
#ifndef GL_DYNAMIC_STORAGE_BIT
#define GL_DYNAMIC_STORAGE_BIT 0x0100
#endif //GL_DYNAMIC_STORAGE_BIT
#ifndef GL_CLIENT_STORAGE_BIT
#define GL_CLIENT_STORAGE_BIT 0x0200
#endif //GL_CLIENT_STORAGE_BIT
#ifndef GL_BUFFER_IMMUTABLE_STORAGE
#define GL_BUFFER_IMMUTABLE_STORAGE 0x821F
#endif //GL_BUFFER_IMMUTABLE_STORAGE
#ifndef GL_BUFFER_STORAGE_FLAGS
#define GL_BUFFER_STORAGE_FLAGS 0x8220
#endif //GL_BUFFER_STORAGE_FLAGS
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BufferStorage
#define GL_ALT_FUNDEF_BufferStorage
typedef void (*PFNGLBUFFERSTORAGEPROC_ALT)(GLenum,GLsizeiptr,const void *,GLbitfield);
static inline void glBufferStorage(GLenum target1,GLsizeiptr size1,const void * data1,GLbitfield flags1)
{
	static PFNGLBUFFERSTORAGEPROC_ALT fn=(PFNGLBUFFERSTORAGEPROC_ALT)glaltGetProcAddressExtension("glBufferStorage","GL_ARB_buffer_storage");
	 fn(target1,size1,data1,flags1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_cl_event
#define GL_ARB_cl_event
#ifndef GL_SYNC_CL_EVENT_ARB
#define GL_SYNC_CL_EVENT_ARB 0x8240
#endif //GL_SYNC_CL_EVENT_ARB
#ifndef GL_SYNC_CL_EVENT_COMPLETE_ARB
#define GL_SYNC_CL_EVENT_COMPLETE_ARB 0x8241
#endif //GL_SYNC_CL_EVENT_COMPLETE_ARB
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_CreateSyncFromCLeventARB
#define GL_ALT_FUNDEF_CreateSyncFromCLeventARB
typedef GLsync (*PFNGLCREATESYNCFROMCLEVENTARBPROC_ALT)(struct _cl_context *,struct _cl_event *,GLbitfield);
static inline GLsync glCreateSyncFromCLeventARB(struct _cl_context * context1,struct _cl_event * event1,GLbitfield flags1)
{
	static PFNGLCREATESYNCFROMCLEVENTARBPROC_ALT fn=(PFNGLCREATESYNCFROMCLEVENTARBPROC_ALT)glaltGetProcAddressExtension("glCreateSyncFromCLeventARB","GL_ARB_cl_event");
	return fn(context1,event1,flags1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_clear_buffer_object
#define GL_ARB_clear_buffer_object
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ClearBufferData
#define GL_ALT_FUNDEF_ClearBufferData
typedef void (*PFNGLCLEARBUFFERDATAPROC_ALT)(GLenum,GLenum,GLenum,GLenum,const void *);
static inline void glClearBufferData(GLenum target1,GLenum internalformat1,GLenum format1,GLenum type1,const void * data1)
{
	static PFNGLCLEARBUFFERDATAPROC_ALT fn=(PFNGLCLEARBUFFERDATAPROC_ALT)glaltGetProcAddressExtension("glClearBufferData","GL_ARB_clear_buffer_object");
	 fn(target1,internalformat1,format1,type1,data1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ClearBufferSubData
#define GL_ALT_FUNDEF_ClearBufferSubData
typedef void (*PFNGLCLEARBUFFERSUBDATAPROC_ALT)(GLenum,GLenum,GLintptr,GLsizeiptr,GLenum,GLenum,const void *);
static inline void glClearBufferSubData(GLenum target1,GLenum internalformat1,GLintptr offset1,GLsizeiptr size1,GLenum format1,GLenum type1,const void * data1)
{
	static PFNGLCLEARBUFFERSUBDATAPROC_ALT fn=(PFNGLCLEARBUFFERSUBDATAPROC_ALT)glaltGetProcAddressExtension("glClearBufferSubData","GL_ARB_clear_buffer_object");
	 fn(target1,internalformat1,offset1,size1,format1,type1,data1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_clear_texture
#define GL_ARB_clear_texture
#ifndef GL_CLEAR_TEXTURE
#define GL_CLEAR_TEXTURE 0x9365
#endif //GL_CLEAR_TEXTURE
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ClearTexImage
#define GL_ALT_FUNDEF_ClearTexImage
typedef void (*PFNGLCLEARTEXIMAGEPROC_ALT)(GLuint,GLint,GLenum,GLenum,const void *);
static inline void glClearTexImage(GLuint texture1,GLint level1,GLenum format1,GLenum type1,const void * data1)
{
	static PFNGLCLEARTEXIMAGEPROC_ALT fn=(PFNGLCLEARTEXIMAGEPROC_ALT)glaltGetProcAddressExtension("glClearTexImage","GL_ARB_clear_texture");
	 fn(texture1,level1,format1,type1,data1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ClearTexSubImage
#define GL_ALT_FUNDEF_ClearTexSubImage
typedef void (*PFNGLCLEARTEXSUBIMAGEPROC_ALT)(GLuint,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,const void *);
static inline void glClearTexSubImage(GLuint texture1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLsizei width1,GLsizei height1,GLsizei depth1,GLenum format1,GLenum type1,const void * data1)
{
	static PFNGLCLEARTEXSUBIMAGEPROC_ALT fn=(PFNGLCLEARTEXSUBIMAGEPROC_ALT)glaltGetProcAddressExtension("glClearTexSubImage","GL_ARB_clear_texture");
	 fn(texture1,level1,xoffset1,yoffset1,zoffset1,width1,height1,depth1,format1,type1,data1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_clip_control
#define GL_ARB_clip_control
#ifndef GL_LOWER_LEFT
#define GL_LOWER_LEFT 0x8CA1
#endif //GL_LOWER_LEFT
#ifndef GL_UPPER_LEFT
#define GL_UPPER_LEFT 0x8CA2
#endif //GL_UPPER_LEFT
#ifndef GL_CLIP_ORIGIN
#define GL_CLIP_ORIGIN 0x935C
#endif //GL_CLIP_ORIGIN
#ifndef GL_CLIP_DEPTH_MODE
#define GL_CLIP_DEPTH_MODE 0x935D
#endif //GL_CLIP_DEPTH_MODE
#ifndef GL_NEGATIVE_ONE_TO_ONE
#define GL_NEGATIVE_ONE_TO_ONE 0x935E
#endif //GL_NEGATIVE_ONE_TO_ONE
#ifndef GL_ZERO_TO_ONE
#define GL_ZERO_TO_ONE 0x935F
#endif //GL_ZERO_TO_ONE
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ClipControl
#define GL_ALT_FUNDEF_ClipControl
typedef void (*PFNGLCLIPCONTROLPROC_ALT)(GLenum,GLenum);
static inline void glClipControl(GLenum origin1,GLenum depth1)
{
	static PFNGLCLIPCONTROLPROC_ALT fn=(PFNGLCLIPCONTROLPROC_ALT)glaltGetProcAddressExtension("glClipControl","GL_ARB_clip_control");
	 fn(origin1,depth1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_color_buffer_float
#define GL_ARB_color_buffer_float
#ifndef GL_RGBA_FLOAT_MODE_ARB
#define GL_RGBA_FLOAT_MODE_ARB 0x8820
#endif //GL_RGBA_FLOAT_MODE_ARB
#ifndef GL_CLAMP_VERTEX_COLOR_ARB
#define GL_CLAMP_VERTEX_COLOR_ARB 0x891A
#endif //GL_CLAMP_VERTEX_COLOR_ARB
#ifndef GL_CLAMP_FRAGMENT_COLOR_ARB
#define GL_CLAMP_FRAGMENT_COLOR_ARB 0x891B
#endif //GL_CLAMP_FRAGMENT_COLOR_ARB
#ifndef GL_CLAMP_READ_COLOR_ARB
#define GL_CLAMP_READ_COLOR_ARB 0x891C
#endif //GL_CLAMP_READ_COLOR_ARB
#ifndef GL_FIXED_ONLY_ARB
#define GL_FIXED_ONLY_ARB 0x891D
#endif //GL_FIXED_ONLY_ARB
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ClampColorARB
#define GL_ALT_FUNDEF_ClampColorARB
typedef void (*PFNGLCLAMPCOLORARBPROC_ALT)(GLenum,GLenum);
static inline void glClampColorARB(GLenum target1,GLenum clamp1)
{
	static PFNGLCLAMPCOLORARBPROC_ALT fn=(PFNGLCLAMPCOLORARBPROC_ALT)glaltGetProcAddressExtension("glClampColorARB","GL_ARB_color_buffer_float");
	 fn(target1,clamp1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_ARB_compatibility
#define GL_ARB_compatibility
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_compressed_texture_pixel_storage
#define GL_ARB_compressed_texture_pixel_storage
#ifndef GL_UNPACK_COMPRESSED_BLOCK_WIDTH
#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH 0x9127
#endif //GL_UNPACK_COMPRESSED_BLOCK_WIDTH
#ifndef GL_UNPACK_COMPRESSED_BLOCK_HEIGHT
#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT 0x9128
#endif //GL_UNPACK_COMPRESSED_BLOCK_HEIGHT
#ifndef GL_UNPACK_COMPRESSED_BLOCK_DEPTH
#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH 0x9129
#endif //GL_UNPACK_COMPRESSED_BLOCK_DEPTH
#ifndef GL_UNPACK_COMPRESSED_BLOCK_SIZE
#define GL_UNPACK_COMPRESSED_BLOCK_SIZE 0x912A
#endif //GL_UNPACK_COMPRESSED_BLOCK_SIZE
#ifndef GL_PACK_COMPRESSED_BLOCK_WIDTH
#define GL_PACK_COMPRESSED_BLOCK_WIDTH 0x912B
#endif //GL_PACK_COMPRESSED_BLOCK_WIDTH
#ifndef GL_PACK_COMPRESSED_BLOCK_HEIGHT
#define GL_PACK_COMPRESSED_BLOCK_HEIGHT 0x912C
#endif //GL_PACK_COMPRESSED_BLOCK_HEIGHT
#ifndef GL_PACK_COMPRESSED_BLOCK_DEPTH
#define GL_PACK_COMPRESSED_BLOCK_DEPTH 0x912D
#endif //GL_PACK_COMPRESSED_BLOCK_DEPTH
#ifndef GL_PACK_COMPRESSED_BLOCK_SIZE
#define GL_PACK_COMPRESSED_BLOCK_SIZE 0x912E
#endif //GL_PACK_COMPRESSED_BLOCK_SIZE
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_compute_shader
#define GL_ARB_compute_shader
#ifndef GL_COMPUTE_SHADER_BIT
#define GL_COMPUTE_SHADER_BIT 0x00000020
#endif //GL_COMPUTE_SHADER_BIT
#ifndef GL_MAX_COMPUTE_SHARED_MEMORY_SIZE
#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0x8262
#endif //GL_MAX_COMPUTE_SHARED_MEMORY_SIZE
#ifndef GL_MAX_COMPUTE_UNIFORM_COMPONENTS
#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0x8263
#endif //GL_MAX_COMPUTE_UNIFORM_COMPONENTS
#ifndef GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS
#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0x8264
#endif //GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS
#ifndef GL_MAX_COMPUTE_ATOMIC_COUNTERS
#define GL_MAX_COMPUTE_ATOMIC_COUNTERS 0x8265
#endif //GL_MAX_COMPUTE_ATOMIC_COUNTERS
#ifndef GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS
#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0x8266
#endif //GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS
#ifndef GL_COMPUTE_WORK_GROUP_SIZE
#define GL_COMPUTE_WORK_GROUP_SIZE 0x8267
#endif //GL_COMPUTE_WORK_GROUP_SIZE
#ifndef GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS
#define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0x90EB
#endif //GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER
#define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER 0x90EC
#endif //GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER 0x90ED
#endif //GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER
#ifndef GL_DISPATCH_INDIRECT_BUFFER
#define GL_DISPATCH_INDIRECT_BUFFER 0x90EE
#endif //GL_DISPATCH_INDIRECT_BUFFER
#ifndef GL_DISPATCH_INDIRECT_BUFFER_BINDING
#define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0x90EF
#endif //GL_DISPATCH_INDIRECT_BUFFER_BINDING
#ifndef GL_COMPUTE_SHADER
#define GL_COMPUTE_SHADER 0x91B9
#endif //GL_COMPUTE_SHADER
#ifndef GL_MAX_COMPUTE_UNIFORM_BLOCKS
#define GL_MAX_COMPUTE_UNIFORM_BLOCKS 0x91BB
#endif //GL_MAX_COMPUTE_UNIFORM_BLOCKS
#ifndef GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS
#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0x91BC
#endif //GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS
#ifndef GL_MAX_COMPUTE_IMAGE_UNIFORMS
#define GL_MAX_COMPUTE_IMAGE_UNIFORMS 0x91BD
#endif //GL_MAX_COMPUTE_IMAGE_UNIFORMS
#ifndef GL_MAX_COMPUTE_WORK_GROUP_COUNT
#define GL_MAX_COMPUTE_WORK_GROUP_COUNT 0x91BE
#endif //GL_MAX_COMPUTE_WORK_GROUP_COUNT
#ifndef GL_MAX_COMPUTE_WORK_GROUP_SIZE
#define GL_MAX_COMPUTE_WORK_GROUP_SIZE 0x91BF
#endif //GL_MAX_COMPUTE_WORK_GROUP_SIZE
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_DispatchCompute
#define GL_ALT_FUNDEF_DispatchCompute
typedef void (*PFNGLDISPATCHCOMPUTEPROC_ALT)(GLuint,GLuint,GLuint);
static inline void glDispatchCompute(GLuint num_groups_x1,GLuint num_groups_y1,GLuint num_groups_z1)
{
	static PFNGLDISPATCHCOMPUTEPROC_ALT fn=(PFNGLDISPATCHCOMPUTEPROC_ALT)glaltGetProcAddressExtension("glDispatchCompute","GL_ARB_compute_shader");
	 fn(num_groups_x1,num_groups_y1,num_groups_z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DispatchComputeIndirect
#define GL_ALT_FUNDEF_DispatchComputeIndirect
typedef void (*PFNGLDISPATCHCOMPUTEINDIRECTPROC_ALT)(GLintptr);
static inline void glDispatchComputeIndirect(GLintptr indirect1)
{
	static PFNGLDISPATCHCOMPUTEINDIRECTPROC_ALT fn=(PFNGLDISPATCHCOMPUTEINDIRECTPROC_ALT)glaltGetProcAddressExtension("glDispatchComputeIndirect","GL_ARB_compute_shader");
	 fn(indirect1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_compute_variable_group_size
#define GL_ARB_compute_variable_group_size
#ifndef GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB
#define GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB 0x90EB
#endif //GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB
#ifndef GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB
#define GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB 0x91BF
#endif //GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB
#ifndef GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB
#define GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB 0x9344
#endif //GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB
#ifndef GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB
#define GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB 0x9345
#endif //GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_DispatchComputeGroupSizeARB
#define GL_ALT_FUNDEF_DispatchComputeGroupSizeARB
typedef void (*PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC_ALT)(GLuint,GLuint,GLuint,GLuint,GLuint,GLuint);
static inline void glDispatchComputeGroupSizeARB(GLuint num_groups_x1,GLuint num_groups_y1,GLuint num_groups_z1,GLuint group_size_x1,GLuint group_size_y1,GLuint group_size_z1)
{
	static PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC_ALT fn=(PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC_ALT)glaltGetProcAddressExtension("glDispatchComputeGroupSizeARB","GL_ARB_compute_variable_group_size");
	 fn(num_groups_x1,num_groups_y1,num_groups_z1,group_size_x1,group_size_y1,group_size_z1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_conditional_render_inverted
#define GL_ARB_conditional_render_inverted
#ifndef GL_QUERY_WAIT_INVERTED
#define GL_QUERY_WAIT_INVERTED 0x8E17
#endif //GL_QUERY_WAIT_INVERTED
#ifndef GL_QUERY_NO_WAIT_INVERTED
#define GL_QUERY_NO_WAIT_INVERTED 0x8E18
#endif //GL_QUERY_NO_WAIT_INVERTED
#ifndef GL_QUERY_BY_REGION_WAIT_INVERTED
#define GL_QUERY_BY_REGION_WAIT_INVERTED 0x8E19
#endif //GL_QUERY_BY_REGION_WAIT_INVERTED
#ifndef GL_QUERY_BY_REGION_NO_WAIT_INVERTED
#define GL_QUERY_BY_REGION_NO_WAIT_INVERTED 0x8E1A
#endif //GL_QUERY_BY_REGION_NO_WAIT_INVERTED
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_conservative_depth
#define GL_ARB_conservative_depth
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_copy_buffer
#define GL_ARB_copy_buffer
#ifndef GL_COPY_READ_BUFFER
#define GL_COPY_READ_BUFFER 0x8F36
#endif //GL_COPY_READ_BUFFER
#ifndef GL_COPY_READ_BUFFER_BINDING
#define GL_COPY_READ_BUFFER_BINDING 0x8F36
#endif //GL_COPY_READ_BUFFER_BINDING
#ifndef GL_COPY_WRITE_BUFFER
#define GL_COPY_WRITE_BUFFER 0x8F37
#endif //GL_COPY_WRITE_BUFFER
#ifndef GL_COPY_WRITE_BUFFER_BINDING
#define GL_COPY_WRITE_BUFFER_BINDING 0x8F37
#endif //GL_COPY_WRITE_BUFFER_BINDING
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_CopyBufferSubData
#define GL_ALT_FUNDEF_CopyBufferSubData
typedef void (*PFNGLCOPYBUFFERSUBDATAPROC_ALT)(GLenum,GLenum,GLintptr,GLintptr,GLsizeiptr);
static inline void glCopyBufferSubData(GLenum readTarget1,GLenum writeTarget1,GLintptr readOffset1,GLintptr writeOffset1,GLsizeiptr size1)
{
	static PFNGLCOPYBUFFERSUBDATAPROC_ALT fn=(PFNGLCOPYBUFFERSUBDATAPROC_ALT)glaltGetProcAddressExtension("glCopyBufferSubData","GL_ARB_copy_buffer");
	 fn(readTarget1,writeTarget1,readOffset1,writeOffset1,size1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_copy_image
#define GL_ARB_copy_image
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_CopyImageSubData
#define GL_ALT_FUNDEF_CopyImageSubData
typedef void (*PFNGLCOPYIMAGESUBDATAPROC_ALT)(GLuint,GLenum,GLint,GLint,GLint,GLint,GLuint,GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei);
static inline void glCopyImageSubData(GLuint srcName1,GLenum srcTarget1,GLint srcLevel1,GLint srcX1,GLint srcY1,GLint srcZ1,GLuint dstName1,GLenum dstTarget1,GLint dstLevel1,GLint dstX1,GLint dstY1,GLint dstZ1,GLsizei srcWidth1,GLsizei srcHeight1,GLsizei srcDepth1)
{
	static PFNGLCOPYIMAGESUBDATAPROC_ALT fn=(PFNGLCOPYIMAGESUBDATAPROC_ALT)glaltGetProcAddressExtension("glCopyImageSubData","GL_ARB_copy_image");
	 fn(srcName1,srcTarget1,srcLevel1,srcX1,srcY1,srcZ1,dstName1,dstTarget1,dstLevel1,dstX1,dstY1,dstZ1,srcWidth1,srcHeight1,srcDepth1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_cull_distance
#define GL_ARB_cull_distance
#ifndef GL_MAX_CULL_DISTANCES
#define GL_MAX_CULL_DISTANCES 0x82F9
#endif //GL_MAX_CULL_DISTANCES
#ifndef GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES
#define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES 0x82FA
#endif //GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_debug_output
#define GL_ARB_debug_output
#ifndef GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB
#define GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB 0x8242
#endif //GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB
#ifndef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB 0x8243
#endif //GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB
#ifndef GL_DEBUG_CALLBACK_FUNCTION_ARB
#define GL_DEBUG_CALLBACK_FUNCTION_ARB 0x8244
#endif //GL_DEBUG_CALLBACK_FUNCTION_ARB
#ifndef GL_DEBUG_CALLBACK_USER_PARAM_ARB
#define GL_DEBUG_CALLBACK_USER_PARAM_ARB 0x8245
#endif //GL_DEBUG_CALLBACK_USER_PARAM_ARB
#ifndef GL_DEBUG_SOURCE_API_ARB
#define GL_DEBUG_SOURCE_API_ARB 0x8246
#endif //GL_DEBUG_SOURCE_API_ARB
#ifndef GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB 0x8247
#endif //GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB
#ifndef GL_DEBUG_SOURCE_SHADER_COMPILER_ARB
#define GL_DEBUG_SOURCE_SHADER_COMPILER_ARB 0x8248
#endif //GL_DEBUG_SOURCE_SHADER_COMPILER_ARB
#ifndef GL_DEBUG_SOURCE_THIRD_PARTY_ARB
#define GL_DEBUG_SOURCE_THIRD_PARTY_ARB 0x8249
#endif //GL_DEBUG_SOURCE_THIRD_PARTY_ARB
#ifndef GL_DEBUG_SOURCE_APPLICATION_ARB
#define GL_DEBUG_SOURCE_APPLICATION_ARB 0x824A
#endif //GL_DEBUG_SOURCE_APPLICATION_ARB
#ifndef GL_DEBUG_SOURCE_OTHER_ARB
#define GL_DEBUG_SOURCE_OTHER_ARB 0x824B
#endif //GL_DEBUG_SOURCE_OTHER_ARB
#ifndef GL_DEBUG_TYPE_ERROR_ARB
#define GL_DEBUG_TYPE_ERROR_ARB 0x824C
#endif //GL_DEBUG_TYPE_ERROR_ARB
#ifndef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB 0x824D
#endif //GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB
#ifndef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB 0x824E
#endif //GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB
#ifndef GL_DEBUG_TYPE_PORTABILITY_ARB
#define GL_DEBUG_TYPE_PORTABILITY_ARB 0x824F
#endif //GL_DEBUG_TYPE_PORTABILITY_ARB
#ifndef GL_DEBUG_TYPE_PERFORMANCE_ARB
#define GL_DEBUG_TYPE_PERFORMANCE_ARB 0x8250
#endif //GL_DEBUG_TYPE_PERFORMANCE_ARB
#ifndef GL_DEBUG_TYPE_OTHER_ARB
#define GL_DEBUG_TYPE_OTHER_ARB 0x8251
#endif //GL_DEBUG_TYPE_OTHER_ARB
#ifndef GL_MAX_DEBUG_MESSAGE_LENGTH_ARB
#define GL_MAX_DEBUG_MESSAGE_LENGTH_ARB 0x9143
#endif //GL_MAX_DEBUG_MESSAGE_LENGTH_ARB
#ifndef GL_MAX_DEBUG_LOGGED_MESSAGES_ARB
#define GL_MAX_DEBUG_LOGGED_MESSAGES_ARB 0x9144
#endif //GL_MAX_DEBUG_LOGGED_MESSAGES_ARB
#ifndef GL_DEBUG_LOGGED_MESSAGES_ARB
#define GL_DEBUG_LOGGED_MESSAGES_ARB 0x9145
#endif //GL_DEBUG_LOGGED_MESSAGES_ARB
#ifndef GL_DEBUG_SEVERITY_HIGH_ARB
#define GL_DEBUG_SEVERITY_HIGH_ARB 0x9146
#endif //GL_DEBUG_SEVERITY_HIGH_ARB
#ifndef GL_DEBUG_SEVERITY_MEDIUM_ARB
#define GL_DEBUG_SEVERITY_MEDIUM_ARB 0x9147
#endif //GL_DEBUG_SEVERITY_MEDIUM_ARB
#ifndef GL_DEBUG_SEVERITY_LOW_ARB
#define GL_DEBUG_SEVERITY_LOW_ARB 0x9148
#endif //GL_DEBUG_SEVERITY_LOW_ARB
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_DebugMessageCallbackARB
#define GL_ALT_FUNDEF_DebugMessageCallbackARB
typedef void (*PFNGLDEBUGMESSAGECALLBACKARBPROC_ALT)(GLALTDEBUGPROCARB,const void *);
static inline void glDebugMessageCallbackARB(GLALTDEBUGPROCARB callback1,const void * userParam1)
{
	static PFNGLDEBUGMESSAGECALLBACKARBPROC_ALT fn=(PFNGLDEBUGMESSAGECALLBACKARBPROC_ALT)glaltGetProcAddressExtension("glDebugMessageCallbackARB","GL_ARB_debug_output");
	 fn(callback1,userParam1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_DebugMessageControlARB
#define GL_ALT_FUNDEF_DebugMessageControlARB
typedef void (*PFNGLDEBUGMESSAGECONTROLARBPROC_ALT)(GLenum,GLenum,GLenum,GLsizei,const GLuint *,GLboolean);
static inline void glDebugMessageControlARB(GLenum source1,GLenum type1,GLenum severity1,GLsizei count1,const GLuint * ids1,GLboolean enabled1)
{
	static PFNGLDEBUGMESSAGECONTROLARBPROC_ALT fn=(PFNGLDEBUGMESSAGECONTROLARBPROC_ALT)glaltGetProcAddressExtension("glDebugMessageControlARB","GL_ARB_debug_output");
	 fn(source1,type1,severity1,count1,ids1,enabled1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_DebugMessageInsertARB
#define GL_ALT_FUNDEF_DebugMessageInsertARB
typedef void (*PFNGLDEBUGMESSAGEINSERTARBPROC_ALT)(GLenum,GLenum,GLuint,GLenum,GLsizei,const GLchar *);
static inline void glDebugMessageInsertARB(GLenum source1,GLenum type1,GLuint id1,GLenum severity1,GLsizei length1,const GLchar * buf1)
{
	static PFNGLDEBUGMESSAGEINSERTARBPROC_ALT fn=(PFNGLDEBUGMESSAGEINSERTARBPROC_ALT)glaltGetProcAddressExtension("glDebugMessageInsertARB","GL_ARB_debug_output");
	 fn(source1,type1,id1,severity1,length1,buf1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetDebugMessageLogARB
#define GL_ALT_FUNDEF_GetDebugMessageLogARB
typedef GLuint (*PFNGLGETDEBUGMESSAGELOGARBPROC_ALT)(GLuint,GLsizei,GLenum *,GLenum *,GLuint *,GLenum *,GLsizei *,GLchar *);
static inline GLuint glGetDebugMessageLogARB(GLuint count1,GLsizei bufSize1,GLenum * sources1,GLenum * types1,GLuint * ids1,GLenum * severities1,GLsizei * lengths1,GLchar * messageLog1)
{
	static PFNGLGETDEBUGMESSAGELOGARBPROC_ALT fn=(PFNGLGETDEBUGMESSAGELOGARBPROC_ALT)glaltGetProcAddressExtension("glGetDebugMessageLogARB","GL_ARB_debug_output");
	return fn(count1,bufSize1,sources1,types1,ids1,severities1,lengths1,messageLog1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_ARB_depth_buffer_float
#define GL_ARB_depth_buffer_float
#ifndef GL_DEPTH_COMPONENT32F
#define GL_DEPTH_COMPONENT32F 0x8CAC
#endif //GL_DEPTH_COMPONENT32F
#ifndef GL_DEPTH32F_STENCIL8
#define GL_DEPTH32F_STENCIL8 0x8CAD
#endif //GL_DEPTH32F_STENCIL8
#ifndef GL_FLOAT_32_UNSIGNED_INT_24_8_REV
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#endif //GL_FLOAT_32_UNSIGNED_INT_24_8_REV
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_depth_clamp
#define GL_ARB_depth_clamp
#ifndef GL_DEPTH_CLAMP
#define GL_DEPTH_CLAMP 0x864F
#endif //GL_DEPTH_CLAMP
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_depth_texture
#define GL_ARB_depth_texture
#ifndef GL_DEPTH_COMPONENT16_ARB
#define GL_DEPTH_COMPONENT16_ARB 0x81A5
#endif //GL_DEPTH_COMPONENT16_ARB
#ifndef GL_DEPTH_COMPONENT24_ARB
#define GL_DEPTH_COMPONENT24_ARB 0x81A6
#endif //GL_DEPTH_COMPONENT24_ARB
#ifndef GL_DEPTH_COMPONENT32_ARB
#define GL_DEPTH_COMPONENT32_ARB 0x81A7
#endif //GL_DEPTH_COMPONENT32_ARB
#ifndef GL_TEXTURE_DEPTH_SIZE_ARB
#define GL_TEXTURE_DEPTH_SIZE_ARB 0x884A
#endif //GL_TEXTURE_DEPTH_SIZE_ARB
#ifndef GL_DEPTH_TEXTURE_MODE_ARB
#define GL_DEPTH_TEXTURE_MODE_ARB 0x884B
#endif //GL_DEPTH_TEXTURE_MODE_ARB
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_derivative_control
#define GL_ARB_derivative_control
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_direct_state_access
#define GL_ARB_direct_state_access
#ifndef GL_TEXTURE_TARGET
#define GL_TEXTURE_TARGET 0x1006
#endif //GL_TEXTURE_TARGET
#ifndef GL_TEXTURE_BINDING_1D
#define GL_TEXTURE_BINDING_1D 0x8068
#endif //GL_TEXTURE_BINDING_1D
#ifndef GL_TEXTURE_BINDING_2D
#define GL_TEXTURE_BINDING_2D 0x8069
#endif //GL_TEXTURE_BINDING_2D
#ifndef GL_TEXTURE_BINDING_3D
#define GL_TEXTURE_BINDING_3D 0x806A
#endif //GL_TEXTURE_BINDING_3D
#ifndef GL_QUERY_TARGET
#define GL_QUERY_TARGET 0x82EA
#endif //GL_QUERY_TARGET
#ifndef GL_TEXTURE_BINDING
#define GL_TEXTURE_BINDING 0x82EB
#endif //GL_TEXTURE_BINDING
#ifndef GL_TEXTURE_BINDING_RECTANGLE
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#endif //GL_TEXTURE_BINDING_RECTANGLE
#ifndef GL_TEXTURE_BINDING_CUBE_MAP
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#endif //GL_TEXTURE_BINDING_CUBE_MAP
#ifndef GL_TEXTURE_BINDING_1D_ARRAY
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#endif //GL_TEXTURE_BINDING_1D_ARRAY
#ifndef GL_TEXTURE_BINDING_2D_ARRAY
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#endif //GL_TEXTURE_BINDING_2D_ARRAY
#ifndef GL_TEXTURE_BINDING_BUFFER
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#endif //GL_TEXTURE_BINDING_BUFFER
#ifndef GL_TEXTURE_BINDING_CUBE_MAP_ARRAY
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#endif //GL_TEXTURE_BINDING_CUBE_MAP_ARRAY
#ifndef GL_TEXTURE_BINDING_2D_MULTISAMPLE
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#endif //GL_TEXTURE_BINDING_2D_MULTISAMPLE
#ifndef GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#endif //GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BindTextureUnit
#define GL_ALT_FUNDEF_BindTextureUnit
typedef void (*PFNGLBINDTEXTUREUNITPROC_ALT)(GLuint,GLuint);
static inline void glBindTextureUnit(GLuint unit1,GLuint texture1)
{
	static PFNGLBINDTEXTUREUNITPROC_ALT fn=(PFNGLBINDTEXTUREUNITPROC_ALT)glaltGetProcAddressExtension("glBindTextureUnit","GL_ARB_direct_state_access");
	 fn(unit1,texture1);
}
#endif

#ifndef	GL_ALT_FUNDEF_BlitNamedFramebuffer
#define GL_ALT_FUNDEF_BlitNamedFramebuffer
typedef void (*PFNGLBLITNAMEDFRAMEBUFFERPROC_ALT)(GLuint,GLuint,GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLbitfield,GLenum);
static inline void glBlitNamedFramebuffer(GLuint readFramebuffer1,GLuint drawFramebuffer1,GLint srcX01,GLint srcY01,GLint srcX11,GLint srcY11,GLint dstX01,GLint dstY01,GLint dstX11,GLint dstY11,GLbitfield mask1,GLenum filter1)
{
	static PFNGLBLITNAMEDFRAMEBUFFERPROC_ALT fn=(PFNGLBLITNAMEDFRAMEBUFFERPROC_ALT)glaltGetProcAddressExtension("glBlitNamedFramebuffer","GL_ARB_direct_state_access");
	 fn(readFramebuffer1,drawFramebuffer1,srcX01,srcY01,srcX11,srcY11,dstX01,dstY01,dstX11,dstY11,mask1,filter1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CheckNamedFramebufferStatus
#define GL_ALT_FUNDEF_CheckNamedFramebufferStatus
typedef GLenum (*PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC_ALT)(GLuint,GLenum);
static inline GLenum glCheckNamedFramebufferStatus(GLuint framebuffer1,GLenum target1)
{
	static PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC_ALT fn=(PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC_ALT)glaltGetProcAddressExtension("glCheckNamedFramebufferStatus","GL_ARB_direct_state_access");
	return fn(framebuffer1,target1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ClearNamedBufferData
#define GL_ALT_FUNDEF_ClearNamedBufferData
typedef void (*PFNGLCLEARNAMEDBUFFERDATAPROC_ALT)(GLuint,GLenum,GLenum,GLenum,const void *);
static inline void glClearNamedBufferData(GLuint buffer1,GLenum internalformat1,GLenum format1,GLenum type1,const void * data1)
{
	static PFNGLCLEARNAMEDBUFFERDATAPROC_ALT fn=(PFNGLCLEARNAMEDBUFFERDATAPROC_ALT)glaltGetProcAddressExtension("glClearNamedBufferData","GL_ARB_direct_state_access");
	 fn(buffer1,internalformat1,format1,type1,data1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ClearNamedBufferSubData
#define GL_ALT_FUNDEF_ClearNamedBufferSubData
typedef void (*PFNGLCLEARNAMEDBUFFERSUBDATAPROC_ALT)(GLuint,GLenum,GLintptr,GLsizei,GLenum,GLenum,const void *);
static inline void glClearNamedBufferSubData(GLuint buffer1,GLenum internalformat1,GLintptr offset1,GLsizei size1,GLenum format1,GLenum type1,const void * data1)
{
	static PFNGLCLEARNAMEDBUFFERSUBDATAPROC_ALT fn=(PFNGLCLEARNAMEDBUFFERSUBDATAPROC_ALT)glaltGetProcAddressExtension("glClearNamedBufferSubData","GL_ARB_direct_state_access");
	 fn(buffer1,internalformat1,offset1,size1,format1,type1,data1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ClearNamedFramebufferfi
#define GL_ALT_FUNDEF_ClearNamedFramebufferfi
typedef void (*PFNGLCLEARNAMEDFRAMEBUFFERFIPROC_ALT)(GLuint,GLenum,const GLfloat,GLint);
static inline void glClearNamedFramebufferfi(GLuint framebuffer1,GLenum buffer1,const GLfloat depth1,GLint stencil1)
{
	static PFNGLCLEARNAMEDFRAMEBUFFERFIPROC_ALT fn=(PFNGLCLEARNAMEDFRAMEBUFFERFIPROC_ALT)glaltGetProcAddressExtension("glClearNamedFramebufferfi","GL_ARB_direct_state_access");
	 fn(framebuffer1,buffer1,depth1,stencil1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ClearNamedFramebufferfv
#define GL_ALT_FUNDEF_ClearNamedFramebufferfv
typedef void (*PFNGLCLEARNAMEDFRAMEBUFFERFVPROC_ALT)(GLuint,GLenum,GLint,const GLfloat *);
static inline void glClearNamedFramebufferfv(GLuint framebuffer1,GLenum buffer1,GLint drawbuffer1,const GLfloat * value1)
{
	static PFNGLCLEARNAMEDFRAMEBUFFERFVPROC_ALT fn=(PFNGLCLEARNAMEDFRAMEBUFFERFVPROC_ALT)glaltGetProcAddressExtension("glClearNamedFramebufferfv","GL_ARB_direct_state_access");
	 fn(framebuffer1,buffer1,drawbuffer1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ClearNamedFramebufferiv
#define GL_ALT_FUNDEF_ClearNamedFramebufferiv
typedef void (*PFNGLCLEARNAMEDFRAMEBUFFERIVPROC_ALT)(GLuint,GLenum,GLint,const GLint *);
static inline void glClearNamedFramebufferiv(GLuint framebuffer1,GLenum buffer1,GLint drawbuffer1,const GLint * value1)
{
	static PFNGLCLEARNAMEDFRAMEBUFFERIVPROC_ALT fn=(PFNGLCLEARNAMEDFRAMEBUFFERIVPROC_ALT)glaltGetProcAddressExtension("glClearNamedFramebufferiv","GL_ARB_direct_state_access");
	 fn(framebuffer1,buffer1,drawbuffer1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ClearNamedFramebufferuiv
#define GL_ALT_FUNDEF_ClearNamedFramebufferuiv
typedef void (*PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC_ALT)(GLuint,GLenum,GLint,const GLuint *);
static inline void glClearNamedFramebufferuiv(GLuint framebuffer1,GLenum buffer1,GLint drawbuffer1,const GLuint * value1)
{
	static PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC_ALT fn=(PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC_ALT)glaltGetProcAddressExtension("glClearNamedFramebufferuiv","GL_ARB_direct_state_access");
	 fn(framebuffer1,buffer1,drawbuffer1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CompressedTextureSubImage1D
#define GL_ALT_FUNDEF_CompressedTextureSubImage1D
typedef void (*PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC_ALT)(GLuint,GLint,GLint,GLsizei,GLenum,GLsizei,const void *);
static inline void glCompressedTextureSubImage1D(GLuint texture1,GLint level1,GLint xoffset1,GLsizei width1,GLenum format1,GLsizei imageSize1,const void * data1)
{
	static PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC_ALT fn=(PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC_ALT)glaltGetProcAddressExtension("glCompressedTextureSubImage1D","GL_ARB_direct_state_access");
	 fn(texture1,level1,xoffset1,width1,format1,imageSize1,data1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CompressedTextureSubImage2D
#define GL_ALT_FUNDEF_CompressedTextureSubImage2D
typedef void (*PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC_ALT)(GLuint,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLsizei,const void *);
static inline void glCompressedTextureSubImage2D(GLuint texture1,GLint level1,GLint xoffset1,GLint yoffset1,GLsizei width1,GLsizei height1,GLenum format1,GLsizei imageSize1,const void * data1)
{
	static PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC_ALT fn=(PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC_ALT)glaltGetProcAddressExtension("glCompressedTextureSubImage2D","GL_ARB_direct_state_access");
	 fn(texture1,level1,xoffset1,yoffset1,width1,height1,format1,imageSize1,data1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CompressedTextureSubImage3D
#define GL_ALT_FUNDEF_CompressedTextureSubImage3D
typedef void (*PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC_ALT)(GLuint,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLsizei,const void *);
static inline void glCompressedTextureSubImage3D(GLuint texture1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLsizei width1,GLsizei height1,GLsizei depth1,GLenum format1,GLsizei imageSize1,const void * data1)
{
	static PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC_ALT fn=(PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC_ALT)glaltGetProcAddressExtension("glCompressedTextureSubImage3D","GL_ARB_direct_state_access");
	 fn(texture1,level1,xoffset1,yoffset1,zoffset1,width1,height1,depth1,format1,imageSize1,data1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CopyNamedBufferSubData
#define GL_ALT_FUNDEF_CopyNamedBufferSubData
typedef void (*PFNGLCOPYNAMEDBUFFERSUBDATAPROC_ALT)(GLuint,GLuint,GLintptr,GLintptr,GLsizei);
static inline void glCopyNamedBufferSubData(GLuint readBuffer1,GLuint writeBuffer1,GLintptr readOffset1,GLintptr writeOffset1,GLsizei size1)
{
	static PFNGLCOPYNAMEDBUFFERSUBDATAPROC_ALT fn=(PFNGLCOPYNAMEDBUFFERSUBDATAPROC_ALT)glaltGetProcAddressExtension("glCopyNamedBufferSubData","GL_ARB_direct_state_access");
	 fn(readBuffer1,writeBuffer1,readOffset1,writeOffset1,size1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CopyTextureSubImage1D
#define GL_ALT_FUNDEF_CopyTextureSubImage1D
typedef void (*PFNGLCOPYTEXTURESUBIMAGE1DPROC_ALT)(GLuint,GLint,GLint,GLint,GLint,GLsizei);
static inline void glCopyTextureSubImage1D(GLuint texture1,GLint level1,GLint xoffset1,GLint x1,GLint y1,GLsizei width1)
{
	static PFNGLCOPYTEXTURESUBIMAGE1DPROC_ALT fn=(PFNGLCOPYTEXTURESUBIMAGE1DPROC_ALT)glaltGetProcAddressExtension("glCopyTextureSubImage1D","GL_ARB_direct_state_access");
	 fn(texture1,level1,xoffset1,x1,y1,width1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CopyTextureSubImage2D
#define GL_ALT_FUNDEF_CopyTextureSubImage2D
typedef void (*PFNGLCOPYTEXTURESUBIMAGE2DPROC_ALT)(GLuint,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
static inline void glCopyTextureSubImage2D(GLuint texture1,GLint level1,GLint xoffset1,GLint yoffset1,GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
	static PFNGLCOPYTEXTURESUBIMAGE2DPROC_ALT fn=(PFNGLCOPYTEXTURESUBIMAGE2DPROC_ALT)glaltGetProcAddressExtension("glCopyTextureSubImage2D","GL_ARB_direct_state_access");
	 fn(texture1,level1,xoffset1,yoffset1,x1,y1,width1,height1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CopyTextureSubImage3D
#define GL_ALT_FUNDEF_CopyTextureSubImage3D
typedef void (*PFNGLCOPYTEXTURESUBIMAGE3DPROC_ALT)(GLuint,GLint,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
static inline void glCopyTextureSubImage3D(GLuint texture1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
	static PFNGLCOPYTEXTURESUBIMAGE3DPROC_ALT fn=(PFNGLCOPYTEXTURESUBIMAGE3DPROC_ALT)glaltGetProcAddressExtension("glCopyTextureSubImage3D","GL_ARB_direct_state_access");
	 fn(texture1,level1,xoffset1,yoffset1,zoffset1,x1,y1,width1,height1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CreateBuffers
#define GL_ALT_FUNDEF_CreateBuffers
typedef void (*PFNGLCREATEBUFFERSPROC_ALT)(GLsizei,GLuint *);
static inline void glCreateBuffers(GLsizei n1,GLuint * buffers1)
{
	static PFNGLCREATEBUFFERSPROC_ALT fn=(PFNGLCREATEBUFFERSPROC_ALT)glaltGetProcAddressExtension("glCreateBuffers","GL_ARB_direct_state_access");
	 fn(n1,buffers1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CreateFramebuffers
#define GL_ALT_FUNDEF_CreateFramebuffers
typedef void (*PFNGLCREATEFRAMEBUFFERSPROC_ALT)(GLsizei,GLuint *);
static inline void glCreateFramebuffers(GLsizei n1,GLuint * framebuffers1)
{
	static PFNGLCREATEFRAMEBUFFERSPROC_ALT fn=(PFNGLCREATEFRAMEBUFFERSPROC_ALT)glaltGetProcAddressExtension("glCreateFramebuffers","GL_ARB_direct_state_access");
	 fn(n1,framebuffers1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CreateProgramPipelines
#define GL_ALT_FUNDEF_CreateProgramPipelines
typedef void (*PFNGLCREATEPROGRAMPIPELINESPROC_ALT)(GLsizei,GLuint *);
static inline void glCreateProgramPipelines(GLsizei n1,GLuint * pipelines1)
{
	static PFNGLCREATEPROGRAMPIPELINESPROC_ALT fn=(PFNGLCREATEPROGRAMPIPELINESPROC_ALT)glaltGetProcAddressExtension("glCreateProgramPipelines","GL_ARB_direct_state_access");
	 fn(n1,pipelines1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CreateQueries
#define GL_ALT_FUNDEF_CreateQueries
typedef void (*PFNGLCREATEQUERIESPROC_ALT)(GLenum,GLsizei,GLuint *);
static inline void glCreateQueries(GLenum target1,GLsizei n1,GLuint * ids1)
{
	static PFNGLCREATEQUERIESPROC_ALT fn=(PFNGLCREATEQUERIESPROC_ALT)glaltGetProcAddressExtension("glCreateQueries","GL_ARB_direct_state_access");
	 fn(target1,n1,ids1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CreateRenderbuffers
#define GL_ALT_FUNDEF_CreateRenderbuffers
typedef void (*PFNGLCREATERENDERBUFFERSPROC_ALT)(GLsizei,GLuint *);
static inline void glCreateRenderbuffers(GLsizei n1,GLuint * renderbuffers1)
{
	static PFNGLCREATERENDERBUFFERSPROC_ALT fn=(PFNGLCREATERENDERBUFFERSPROC_ALT)glaltGetProcAddressExtension("glCreateRenderbuffers","GL_ARB_direct_state_access");
	 fn(n1,renderbuffers1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CreateSamplers
#define GL_ALT_FUNDEF_CreateSamplers
typedef void (*PFNGLCREATESAMPLERSPROC_ALT)(GLsizei,GLuint *);
static inline void glCreateSamplers(GLsizei n1,GLuint * samplers1)
{
	static PFNGLCREATESAMPLERSPROC_ALT fn=(PFNGLCREATESAMPLERSPROC_ALT)glaltGetProcAddressExtension("glCreateSamplers","GL_ARB_direct_state_access");
	 fn(n1,samplers1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CreateTextures
#define GL_ALT_FUNDEF_CreateTextures
typedef void (*PFNGLCREATETEXTURESPROC_ALT)(GLenum,GLsizei,GLuint *);
static inline void glCreateTextures(GLenum target1,GLsizei n1,GLuint * textures1)
{
	static PFNGLCREATETEXTURESPROC_ALT fn=(PFNGLCREATETEXTURESPROC_ALT)glaltGetProcAddressExtension("glCreateTextures","GL_ARB_direct_state_access");
	 fn(target1,n1,textures1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CreateTransformFeedbacks
#define GL_ALT_FUNDEF_CreateTransformFeedbacks
typedef void (*PFNGLCREATETRANSFORMFEEDBACKSPROC_ALT)(GLsizei,GLuint *);
static inline void glCreateTransformFeedbacks(GLsizei n1,GLuint * ids1)
{
	static PFNGLCREATETRANSFORMFEEDBACKSPROC_ALT fn=(PFNGLCREATETRANSFORMFEEDBACKSPROC_ALT)glaltGetProcAddressExtension("glCreateTransformFeedbacks","GL_ARB_direct_state_access");
	 fn(n1,ids1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CreateVertexArrays
#define GL_ALT_FUNDEF_CreateVertexArrays
typedef void (*PFNGLCREATEVERTEXARRAYSPROC_ALT)(GLsizei,GLuint *);
static inline void glCreateVertexArrays(GLsizei n1,GLuint * arrays1)
{
	static PFNGLCREATEVERTEXARRAYSPROC_ALT fn=(PFNGLCREATEVERTEXARRAYSPROC_ALT)glaltGetProcAddressExtension("glCreateVertexArrays","GL_ARB_direct_state_access");
	 fn(n1,arrays1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DisableVertexArrayAttrib
#define GL_ALT_FUNDEF_DisableVertexArrayAttrib
typedef void (*PFNGLDISABLEVERTEXARRAYATTRIBPROC_ALT)(GLuint,GLuint);
static inline void glDisableVertexArrayAttrib(GLuint vaobj1,GLuint index1)
{
	static PFNGLDISABLEVERTEXARRAYATTRIBPROC_ALT fn=(PFNGLDISABLEVERTEXARRAYATTRIBPROC_ALT)glaltGetProcAddressExtension("glDisableVertexArrayAttrib","GL_ARB_direct_state_access");
	 fn(vaobj1,index1);
}
#endif

#ifndef	GL_ALT_FUNDEF_EnableVertexArrayAttrib
#define GL_ALT_FUNDEF_EnableVertexArrayAttrib
typedef void (*PFNGLENABLEVERTEXARRAYATTRIBPROC_ALT)(GLuint,GLuint);
static inline void glEnableVertexArrayAttrib(GLuint vaobj1,GLuint index1)
{
	static PFNGLENABLEVERTEXARRAYATTRIBPROC_ALT fn=(PFNGLENABLEVERTEXARRAYATTRIBPROC_ALT)glaltGetProcAddressExtension("glEnableVertexArrayAttrib","GL_ARB_direct_state_access");
	 fn(vaobj1,index1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FlushMappedNamedBufferRange
#define GL_ALT_FUNDEF_FlushMappedNamedBufferRange
typedef void (*PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC_ALT)(GLuint,GLintptr,GLsizei);
static inline void glFlushMappedNamedBufferRange(GLuint buffer1,GLintptr offset1,GLsizei length1)
{
	static PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC_ALT fn=(PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC_ALT)glaltGetProcAddressExtension("glFlushMappedNamedBufferRange","GL_ARB_direct_state_access");
	 fn(buffer1,offset1,length1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GenerateTextureMipmap
#define GL_ALT_FUNDEF_GenerateTextureMipmap
typedef void (*PFNGLGENERATETEXTUREMIPMAPPROC_ALT)(GLuint);
static inline void glGenerateTextureMipmap(GLuint texture1)
{
	static PFNGLGENERATETEXTUREMIPMAPPROC_ALT fn=(PFNGLGENERATETEXTUREMIPMAPPROC_ALT)glaltGetProcAddressExtension("glGenerateTextureMipmap","GL_ARB_direct_state_access");
	 fn(texture1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetCompressedTextureImage
#define GL_ALT_FUNDEF_GetCompressedTextureImage
typedef void (*PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC_ALT)(GLuint,GLint,GLsizei,void *);
static inline void glGetCompressedTextureImage(GLuint texture1,GLint level1,GLsizei bufSize1,void * pixels1)
{
	static PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC_ALT fn=(PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC_ALT)glaltGetProcAddressExtension("glGetCompressedTextureImage","GL_ARB_direct_state_access");
	 fn(texture1,level1,bufSize1,pixels1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetNamedBufferParameteri64v
#define GL_ALT_FUNDEF_GetNamedBufferParameteri64v
typedef void (*PFNGLGETNAMEDBUFFERPARAMETERI64VPROC_ALT)(GLuint,GLenum,GLint64 *);
static inline void glGetNamedBufferParameteri64v(GLuint buffer1,GLenum pname1,GLint64 * params1)
{
	static PFNGLGETNAMEDBUFFERPARAMETERI64VPROC_ALT fn=(PFNGLGETNAMEDBUFFERPARAMETERI64VPROC_ALT)glaltGetProcAddressExtension("glGetNamedBufferParameteri64v","GL_ARB_direct_state_access");
	 fn(buffer1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetNamedBufferParameteriv
#define GL_ALT_FUNDEF_GetNamedBufferParameteriv
typedef void (*PFNGLGETNAMEDBUFFERPARAMETERIVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetNamedBufferParameteriv(GLuint buffer1,GLenum pname1,GLint * params1)
{
	static PFNGLGETNAMEDBUFFERPARAMETERIVPROC_ALT fn=(PFNGLGETNAMEDBUFFERPARAMETERIVPROC_ALT)glaltGetProcAddressExtension("glGetNamedBufferParameteriv","GL_ARB_direct_state_access");
	 fn(buffer1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetNamedBufferPointerv
#define GL_ALT_FUNDEF_GetNamedBufferPointerv
typedef void (*PFNGLGETNAMEDBUFFERPOINTERVPROC_ALT)(GLuint,GLenum,void **);
static inline void glGetNamedBufferPointerv(GLuint buffer1,GLenum pname1,void ** params1)
{
	static PFNGLGETNAMEDBUFFERPOINTERVPROC_ALT fn=(PFNGLGETNAMEDBUFFERPOINTERVPROC_ALT)glaltGetProcAddressExtension("glGetNamedBufferPointerv","GL_ARB_direct_state_access");
	 fn(buffer1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetNamedBufferSubData
#define GL_ALT_FUNDEF_GetNamedBufferSubData
typedef void (*PFNGLGETNAMEDBUFFERSUBDATAPROC_ALT)(GLuint,GLintptr,GLsizei,void *);
static inline void glGetNamedBufferSubData(GLuint buffer1,GLintptr offset1,GLsizei size1,void * data1)
{
	static PFNGLGETNAMEDBUFFERSUBDATAPROC_ALT fn=(PFNGLGETNAMEDBUFFERSUBDATAPROC_ALT)glaltGetProcAddressExtension("glGetNamedBufferSubData","GL_ARB_direct_state_access");
	 fn(buffer1,offset1,size1,data1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetNamedFramebufferAttachmentParameteriv
#define GL_ALT_FUNDEF_GetNamedFramebufferAttachmentParameteriv
typedef void (*PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC_ALT)(GLuint,GLenum,GLenum,GLint *);
static inline void glGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer1,GLenum attachment1,GLenum pname1,GLint * params1)
{
	static PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC_ALT fn=(PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC_ALT)glaltGetProcAddressExtension("glGetNamedFramebufferAttachmentParameteriv","GL_ARB_direct_state_access");
	 fn(framebuffer1,attachment1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetNamedFramebufferParameteriv
#define GL_ALT_FUNDEF_GetNamedFramebufferParameteriv
typedef void (*PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetNamedFramebufferParameteriv(GLuint framebuffer1,GLenum pname1,GLint * param1)
{
	static PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC_ALT fn=(PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC_ALT)glaltGetProcAddressExtension("glGetNamedFramebufferParameteriv","GL_ARB_direct_state_access");
	 fn(framebuffer1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetNamedRenderbufferParameteriv
#define GL_ALT_FUNDEF_GetNamedRenderbufferParameteriv
typedef void (*PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetNamedRenderbufferParameteriv(GLuint renderbuffer1,GLenum pname1,GLint * params1)
{
	static PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC_ALT fn=(PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC_ALT)glaltGetProcAddressExtension("glGetNamedRenderbufferParameteriv","GL_ARB_direct_state_access");
	 fn(renderbuffer1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetTextureImage
#define GL_ALT_FUNDEF_GetTextureImage
typedef void (*PFNGLGETTEXTUREIMAGEPROC_ALT)(GLuint,GLint,GLenum,GLenum,GLsizei,void *);
static inline void glGetTextureImage(GLuint texture1,GLint level1,GLenum format1,GLenum type1,GLsizei bufSize1,void * pixels1)
{
	static PFNGLGETTEXTUREIMAGEPROC_ALT fn=(PFNGLGETTEXTUREIMAGEPROC_ALT)glaltGetProcAddressExtension("glGetTextureImage","GL_ARB_direct_state_access");
	 fn(texture1,level1,format1,type1,bufSize1,pixels1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetTextureLevelParameterfv
#define GL_ALT_FUNDEF_GetTextureLevelParameterfv
typedef void (*PFNGLGETTEXTURELEVELPARAMETERFVPROC_ALT)(GLuint,GLint,GLenum,GLfloat *);
static inline void glGetTextureLevelParameterfv(GLuint texture1,GLint level1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETTEXTURELEVELPARAMETERFVPROC_ALT fn=(PFNGLGETTEXTURELEVELPARAMETERFVPROC_ALT)glaltGetProcAddressExtension("glGetTextureLevelParameterfv","GL_ARB_direct_state_access");
	 fn(texture1,level1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetTextureLevelParameteriv
#define GL_ALT_FUNDEF_GetTextureLevelParameteriv
typedef void (*PFNGLGETTEXTURELEVELPARAMETERIVPROC_ALT)(GLuint,GLint,GLenum,GLint *);
static inline void glGetTextureLevelParameteriv(GLuint texture1,GLint level1,GLenum pname1,GLint * params1)
{
	static PFNGLGETTEXTURELEVELPARAMETERIVPROC_ALT fn=(PFNGLGETTEXTURELEVELPARAMETERIVPROC_ALT)glaltGetProcAddressExtension("glGetTextureLevelParameteriv","GL_ARB_direct_state_access");
	 fn(texture1,level1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetTextureParameterIiv
#define GL_ALT_FUNDEF_GetTextureParameterIiv
typedef void (*PFNGLGETTEXTUREPARAMETERIIVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetTextureParameterIiv(GLuint texture1,GLenum pname1,GLint * params1)
{
	static PFNGLGETTEXTUREPARAMETERIIVPROC_ALT fn=(PFNGLGETTEXTUREPARAMETERIIVPROC_ALT)glaltGetProcAddressExtension("glGetTextureParameterIiv","GL_ARB_direct_state_access");
	 fn(texture1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetTextureParameterIuiv
#define GL_ALT_FUNDEF_GetTextureParameterIuiv
typedef void (*PFNGLGETTEXTUREPARAMETERIUIVPROC_ALT)(GLuint,GLenum,GLuint *);
static inline void glGetTextureParameterIuiv(GLuint texture1,GLenum pname1,GLuint * params1)
{
	static PFNGLGETTEXTUREPARAMETERIUIVPROC_ALT fn=(PFNGLGETTEXTUREPARAMETERIUIVPROC_ALT)glaltGetProcAddressExtension("glGetTextureParameterIuiv","GL_ARB_direct_state_access");
	 fn(texture1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetTextureParameterfv
#define GL_ALT_FUNDEF_GetTextureParameterfv
typedef void (*PFNGLGETTEXTUREPARAMETERFVPROC_ALT)(GLuint,GLenum,GLfloat *);
static inline void glGetTextureParameterfv(GLuint texture1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETTEXTUREPARAMETERFVPROC_ALT fn=(PFNGLGETTEXTUREPARAMETERFVPROC_ALT)glaltGetProcAddressExtension("glGetTextureParameterfv","GL_ARB_direct_state_access");
	 fn(texture1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetTextureParameteriv
#define GL_ALT_FUNDEF_GetTextureParameteriv
typedef void (*PFNGLGETTEXTUREPARAMETERIVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetTextureParameteriv(GLuint texture1,GLenum pname1,GLint * params1)
{
	static PFNGLGETTEXTUREPARAMETERIVPROC_ALT fn=(PFNGLGETTEXTUREPARAMETERIVPROC_ALT)glaltGetProcAddressExtension("glGetTextureParameteriv","GL_ARB_direct_state_access");
	 fn(texture1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetTransformFeedbacki64_v
#define GL_ALT_FUNDEF_GetTransformFeedbacki64_v
typedef void (*PFNGLGETTRANSFORMFEEDBACKI64_VPROC_ALT)(GLuint,GLenum,GLuint,GLint64 *);
static inline void glGetTransformFeedbacki64_v(GLuint xfb1,GLenum pname1,GLuint index1,GLint64 * param1)
{
	static PFNGLGETTRANSFORMFEEDBACKI64_VPROC_ALT fn=(PFNGLGETTRANSFORMFEEDBACKI64_VPROC_ALT)glaltGetProcAddressExtension("glGetTransformFeedbacki64_v","GL_ARB_direct_state_access");
	 fn(xfb1,pname1,index1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetTransformFeedbacki_v
#define GL_ALT_FUNDEF_GetTransformFeedbacki_v
typedef void (*PFNGLGETTRANSFORMFEEDBACKI_VPROC_ALT)(GLuint,GLenum,GLuint,GLint *);
static inline void glGetTransformFeedbacki_v(GLuint xfb1,GLenum pname1,GLuint index1,GLint * param1)
{
	static PFNGLGETTRANSFORMFEEDBACKI_VPROC_ALT fn=(PFNGLGETTRANSFORMFEEDBACKI_VPROC_ALT)glaltGetProcAddressExtension("glGetTransformFeedbacki_v","GL_ARB_direct_state_access");
	 fn(xfb1,pname1,index1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetTransformFeedbackiv
#define GL_ALT_FUNDEF_GetTransformFeedbackiv
typedef void (*PFNGLGETTRANSFORMFEEDBACKIVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetTransformFeedbackiv(GLuint xfb1,GLenum pname1,GLint * param1)
{
	static PFNGLGETTRANSFORMFEEDBACKIVPROC_ALT fn=(PFNGLGETTRANSFORMFEEDBACKIVPROC_ALT)glaltGetProcAddressExtension("glGetTransformFeedbackiv","GL_ARB_direct_state_access");
	 fn(xfb1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetVertexArrayIndexed64iv
#define GL_ALT_FUNDEF_GetVertexArrayIndexed64iv
typedef void (*PFNGLGETVERTEXARRAYINDEXED64IVPROC_ALT)(GLuint,GLuint,GLenum,GLint64 *);
static inline void glGetVertexArrayIndexed64iv(GLuint vaobj1,GLuint index1,GLenum pname1,GLint64 * param1)
{
	static PFNGLGETVERTEXARRAYINDEXED64IVPROC_ALT fn=(PFNGLGETVERTEXARRAYINDEXED64IVPROC_ALT)glaltGetProcAddressExtension("glGetVertexArrayIndexed64iv","GL_ARB_direct_state_access");
	 fn(vaobj1,index1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetVertexArrayIndexediv
#define GL_ALT_FUNDEF_GetVertexArrayIndexediv
typedef void (*PFNGLGETVERTEXARRAYINDEXEDIVPROC_ALT)(GLuint,GLuint,GLenum,GLint *);
static inline void glGetVertexArrayIndexediv(GLuint vaobj1,GLuint index1,GLenum pname1,GLint * param1)
{
	static PFNGLGETVERTEXARRAYINDEXEDIVPROC_ALT fn=(PFNGLGETVERTEXARRAYINDEXEDIVPROC_ALT)glaltGetProcAddressExtension("glGetVertexArrayIndexediv","GL_ARB_direct_state_access");
	 fn(vaobj1,index1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetVertexArrayiv
#define GL_ALT_FUNDEF_GetVertexArrayiv
typedef void (*PFNGLGETVERTEXARRAYIVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetVertexArrayiv(GLuint vaobj1,GLenum pname1,GLint * param1)
{
	static PFNGLGETVERTEXARRAYIVPROC_ALT fn=(PFNGLGETVERTEXARRAYIVPROC_ALT)glaltGetProcAddressExtension("glGetVertexArrayiv","GL_ARB_direct_state_access");
	 fn(vaobj1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_InvalidateNamedFramebufferData
#define GL_ALT_FUNDEF_InvalidateNamedFramebufferData
typedef void (*PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC_ALT)(GLuint,GLsizei,const GLenum *);
static inline void glInvalidateNamedFramebufferData(GLuint framebuffer1,GLsizei numAttachments1,const GLenum * attachments1)
{
	static PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC_ALT fn=(PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC_ALT)glaltGetProcAddressExtension("glInvalidateNamedFramebufferData","GL_ARB_direct_state_access");
	 fn(framebuffer1,numAttachments1,attachments1);
}
#endif

#ifndef	GL_ALT_FUNDEF_InvalidateNamedFramebufferSubData
#define GL_ALT_FUNDEF_InvalidateNamedFramebufferSubData
typedef void (*PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC_ALT)(GLuint,GLsizei,const GLenum *,GLint,GLint,GLsizei,GLsizei);
static inline void glInvalidateNamedFramebufferSubData(GLuint framebuffer1,GLsizei numAttachments1,const GLenum * attachments1,GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
	static PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC_ALT fn=(PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC_ALT)glaltGetProcAddressExtension("glInvalidateNamedFramebufferSubData","GL_ARB_direct_state_access");
	 fn(framebuffer1,numAttachments1,attachments1,x1,y1,width1,height1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MapNamedBuffer
#define GL_ALT_FUNDEF_MapNamedBuffer
typedef void * (*PFNGLMAPNAMEDBUFFERPROC_ALT)(GLuint,GLenum);
static inline void * glMapNamedBuffer(GLuint buffer1,GLenum access1)
{
	static PFNGLMAPNAMEDBUFFERPROC_ALT fn=(PFNGLMAPNAMEDBUFFERPROC_ALT)glaltGetProcAddressExtension("glMapNamedBuffer","GL_ARB_direct_state_access");
	return fn(buffer1,access1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MapNamedBufferRange
#define GL_ALT_FUNDEF_MapNamedBufferRange
typedef void * (*PFNGLMAPNAMEDBUFFERRANGEPROC_ALT)(GLuint,GLintptr,GLsizei,GLbitfield);
static inline void * glMapNamedBufferRange(GLuint buffer1,GLintptr offset1,GLsizei length1,GLbitfield access1)
{
	static PFNGLMAPNAMEDBUFFERRANGEPROC_ALT fn=(PFNGLMAPNAMEDBUFFERRANGEPROC_ALT)glaltGetProcAddressExtension("glMapNamedBufferRange","GL_ARB_direct_state_access");
	return fn(buffer1,offset1,length1,access1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedBufferData
#define GL_ALT_FUNDEF_NamedBufferData
typedef void (*PFNGLNAMEDBUFFERDATAPROC_ALT)(GLuint,GLsizei,const void *,GLenum);
static inline void glNamedBufferData(GLuint buffer1,GLsizei size1,const void * data1,GLenum usage1)
{
	static PFNGLNAMEDBUFFERDATAPROC_ALT fn=(PFNGLNAMEDBUFFERDATAPROC_ALT)glaltGetProcAddressExtension("glNamedBufferData","GL_ARB_direct_state_access");
	 fn(buffer1,size1,data1,usage1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedBufferStorage
#define GL_ALT_FUNDEF_NamedBufferStorage
typedef void (*PFNGLNAMEDBUFFERSTORAGEPROC_ALT)(GLuint,GLsizei,const void *,GLbitfield);
static inline void glNamedBufferStorage(GLuint buffer1,GLsizei size1,const void * data1,GLbitfield flags1)
{
	static PFNGLNAMEDBUFFERSTORAGEPROC_ALT fn=(PFNGLNAMEDBUFFERSTORAGEPROC_ALT)glaltGetProcAddressExtension("glNamedBufferStorage","GL_ARB_direct_state_access");
	 fn(buffer1,size1,data1,flags1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedBufferSubData
#define GL_ALT_FUNDEF_NamedBufferSubData
typedef void (*PFNGLNAMEDBUFFERSUBDATAPROC_ALT)(GLuint,GLintptr,GLsizei,const void *);
static inline void glNamedBufferSubData(GLuint buffer1,GLintptr offset1,GLsizei size1,const void * data1)
{
	static PFNGLNAMEDBUFFERSUBDATAPROC_ALT fn=(PFNGLNAMEDBUFFERSUBDATAPROC_ALT)glaltGetProcAddressExtension("glNamedBufferSubData","GL_ARB_direct_state_access");
	 fn(buffer1,offset1,size1,data1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedFramebufferDrawBuffer
#define GL_ALT_FUNDEF_NamedFramebufferDrawBuffer
typedef void (*PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC_ALT)(GLuint,GLenum);
static inline void glNamedFramebufferDrawBuffer(GLuint framebuffer1,GLenum buf1)
{
	static PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC_ALT fn=(PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC_ALT)glaltGetProcAddressExtension("glNamedFramebufferDrawBuffer","GL_ARB_direct_state_access");
	 fn(framebuffer1,buf1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedFramebufferDrawBuffers
#define GL_ALT_FUNDEF_NamedFramebufferDrawBuffers
typedef void (*PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC_ALT)(GLuint,GLsizei,const GLenum *);
static inline void glNamedFramebufferDrawBuffers(GLuint framebuffer1,GLsizei n1,const GLenum * bufs1)
{
	static PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC_ALT fn=(PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC_ALT)glaltGetProcAddressExtension("glNamedFramebufferDrawBuffers","GL_ARB_direct_state_access");
	 fn(framebuffer1,n1,bufs1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedFramebufferParameteri
#define GL_ALT_FUNDEF_NamedFramebufferParameteri
typedef void (*PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC_ALT)(GLuint,GLenum,GLint);
static inline void glNamedFramebufferParameteri(GLuint framebuffer1,GLenum pname1,GLint param1)
{
	static PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC_ALT fn=(PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC_ALT)glaltGetProcAddressExtension("glNamedFramebufferParameteri","GL_ARB_direct_state_access");
	 fn(framebuffer1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedFramebufferReadBuffer
#define GL_ALT_FUNDEF_NamedFramebufferReadBuffer
typedef void (*PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC_ALT)(GLuint,GLenum);
static inline void glNamedFramebufferReadBuffer(GLuint framebuffer1,GLenum src1)
{
	static PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC_ALT fn=(PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC_ALT)glaltGetProcAddressExtension("glNamedFramebufferReadBuffer","GL_ARB_direct_state_access");
	 fn(framebuffer1,src1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedFramebufferRenderbuffer
#define GL_ALT_FUNDEF_NamedFramebufferRenderbuffer
typedef void (*PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC_ALT)(GLuint,GLenum,GLenum,GLuint);
static inline void glNamedFramebufferRenderbuffer(GLuint framebuffer1,GLenum attachment1,GLenum renderbuffertarget1,GLuint renderbuffer1)
{
	static PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC_ALT fn=(PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC_ALT)glaltGetProcAddressExtension("glNamedFramebufferRenderbuffer","GL_ARB_direct_state_access");
	 fn(framebuffer1,attachment1,renderbuffertarget1,renderbuffer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedFramebufferTexture
#define GL_ALT_FUNDEF_NamedFramebufferTexture
typedef void (*PFNGLNAMEDFRAMEBUFFERTEXTUREPROC_ALT)(GLuint,GLenum,GLuint,GLint);
static inline void glNamedFramebufferTexture(GLuint framebuffer1,GLenum attachment1,GLuint texture1,GLint level1)
{
	static PFNGLNAMEDFRAMEBUFFERTEXTUREPROC_ALT fn=(PFNGLNAMEDFRAMEBUFFERTEXTUREPROC_ALT)glaltGetProcAddressExtension("glNamedFramebufferTexture","GL_ARB_direct_state_access");
	 fn(framebuffer1,attachment1,texture1,level1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedFramebufferTextureLayer
#define GL_ALT_FUNDEF_NamedFramebufferTextureLayer
typedef void (*PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC_ALT)(GLuint,GLenum,GLuint,GLint,GLint);
static inline void glNamedFramebufferTextureLayer(GLuint framebuffer1,GLenum attachment1,GLuint texture1,GLint level1,GLint layer1)
{
	static PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC_ALT fn=(PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC_ALT)glaltGetProcAddressExtension("glNamedFramebufferTextureLayer","GL_ARB_direct_state_access");
	 fn(framebuffer1,attachment1,texture1,level1,layer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedRenderbufferStorage
#define GL_ALT_FUNDEF_NamedRenderbufferStorage
typedef void (*PFNGLNAMEDRENDERBUFFERSTORAGEPROC_ALT)(GLuint,GLenum,GLsizei,GLsizei);
static inline void glNamedRenderbufferStorage(GLuint renderbuffer1,GLenum internalformat1,GLsizei width1,GLsizei height1)
{
	static PFNGLNAMEDRENDERBUFFERSTORAGEPROC_ALT fn=(PFNGLNAMEDRENDERBUFFERSTORAGEPROC_ALT)glaltGetProcAddressExtension("glNamedRenderbufferStorage","GL_ARB_direct_state_access");
	 fn(renderbuffer1,internalformat1,width1,height1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedRenderbufferStorageMultisample
#define GL_ALT_FUNDEF_NamedRenderbufferStorageMultisample
typedef void (*PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC_ALT)(GLuint,GLsizei,GLenum,GLsizei,GLsizei);
static inline void glNamedRenderbufferStorageMultisample(GLuint renderbuffer1,GLsizei samples1,GLenum internalformat1,GLsizei width1,GLsizei height1)
{
	static PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC_ALT fn=(PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC_ALT)glaltGetProcAddressExtension("glNamedRenderbufferStorageMultisample","GL_ARB_direct_state_access");
	 fn(renderbuffer1,samples1,internalformat1,width1,height1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureBuffer
#define GL_ALT_FUNDEF_TextureBuffer
typedef void (*PFNGLTEXTUREBUFFERPROC_ALT)(GLuint,GLenum,GLuint);
static inline void glTextureBuffer(GLuint texture1,GLenum internalformat1,GLuint buffer1)
{
	static PFNGLTEXTUREBUFFERPROC_ALT fn=(PFNGLTEXTUREBUFFERPROC_ALT)glaltGetProcAddressExtension("glTextureBuffer","GL_ARB_direct_state_access");
	 fn(texture1,internalformat1,buffer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureBufferRange
#define GL_ALT_FUNDEF_TextureBufferRange
typedef void (*PFNGLTEXTUREBUFFERRANGEPROC_ALT)(GLuint,GLenum,GLuint,GLintptr,GLsizei);
static inline void glTextureBufferRange(GLuint texture1,GLenum internalformat1,GLuint buffer1,GLintptr offset1,GLsizei size1)
{
	static PFNGLTEXTUREBUFFERRANGEPROC_ALT fn=(PFNGLTEXTUREBUFFERRANGEPROC_ALT)glaltGetProcAddressExtension("glTextureBufferRange","GL_ARB_direct_state_access");
	 fn(texture1,internalformat1,buffer1,offset1,size1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureParameterIiv
#define GL_ALT_FUNDEF_TextureParameterIiv
typedef void (*PFNGLTEXTUREPARAMETERIIVPROC_ALT)(GLuint,GLenum,const GLint *);
static inline void glTextureParameterIiv(GLuint texture1,GLenum pname1,const GLint * params1)
{
	static PFNGLTEXTUREPARAMETERIIVPROC_ALT fn=(PFNGLTEXTUREPARAMETERIIVPROC_ALT)glaltGetProcAddressExtension("glTextureParameterIiv","GL_ARB_direct_state_access");
	 fn(texture1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureParameterIuiv
#define GL_ALT_FUNDEF_TextureParameterIuiv
typedef void (*PFNGLTEXTUREPARAMETERIUIVPROC_ALT)(GLuint,GLenum,const GLuint *);
static inline void glTextureParameterIuiv(GLuint texture1,GLenum pname1,const GLuint * params1)
{
	static PFNGLTEXTUREPARAMETERIUIVPROC_ALT fn=(PFNGLTEXTUREPARAMETERIUIVPROC_ALT)glaltGetProcAddressExtension("glTextureParameterIuiv","GL_ARB_direct_state_access");
	 fn(texture1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureParameterf
#define GL_ALT_FUNDEF_TextureParameterf
typedef void (*PFNGLTEXTUREPARAMETERFPROC_ALT)(GLuint,GLenum,GLfloat);
static inline void glTextureParameterf(GLuint texture1,GLenum pname1,GLfloat param1)
{
	static PFNGLTEXTUREPARAMETERFPROC_ALT fn=(PFNGLTEXTUREPARAMETERFPROC_ALT)glaltGetProcAddressExtension("glTextureParameterf","GL_ARB_direct_state_access");
	 fn(texture1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureParameterfv
#define GL_ALT_FUNDEF_TextureParameterfv
typedef void (*PFNGLTEXTUREPARAMETERFVPROC_ALT)(GLuint,GLenum,const GLfloat *);
static inline void glTextureParameterfv(GLuint texture1,GLenum pname1,const GLfloat * param1)
{
	static PFNGLTEXTUREPARAMETERFVPROC_ALT fn=(PFNGLTEXTUREPARAMETERFVPROC_ALT)glaltGetProcAddressExtension("glTextureParameterfv","GL_ARB_direct_state_access");
	 fn(texture1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureParameteri
#define GL_ALT_FUNDEF_TextureParameteri
typedef void (*PFNGLTEXTUREPARAMETERIPROC_ALT)(GLuint,GLenum,GLint);
static inline void glTextureParameteri(GLuint texture1,GLenum pname1,GLint param1)
{
	static PFNGLTEXTUREPARAMETERIPROC_ALT fn=(PFNGLTEXTUREPARAMETERIPROC_ALT)glaltGetProcAddressExtension("glTextureParameteri","GL_ARB_direct_state_access");
	 fn(texture1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureParameteriv
#define GL_ALT_FUNDEF_TextureParameteriv
typedef void (*PFNGLTEXTUREPARAMETERIVPROC_ALT)(GLuint,GLenum,const GLint *);
static inline void glTextureParameteriv(GLuint texture1,GLenum pname1,const GLint * param1)
{
	static PFNGLTEXTUREPARAMETERIVPROC_ALT fn=(PFNGLTEXTUREPARAMETERIVPROC_ALT)glaltGetProcAddressExtension("glTextureParameteriv","GL_ARB_direct_state_access");
	 fn(texture1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureStorage1D
#define GL_ALT_FUNDEF_TextureStorage1D
typedef void (*PFNGLTEXTURESTORAGE1DPROC_ALT)(GLuint,GLsizei,GLenum,GLsizei);
static inline void glTextureStorage1D(GLuint texture1,GLsizei levels1,GLenum internalformat1,GLsizei width1)
{
	static PFNGLTEXTURESTORAGE1DPROC_ALT fn=(PFNGLTEXTURESTORAGE1DPROC_ALT)glaltGetProcAddressExtension("glTextureStorage1D","GL_ARB_direct_state_access");
	 fn(texture1,levels1,internalformat1,width1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureStorage2D
#define GL_ALT_FUNDEF_TextureStorage2D
typedef void (*PFNGLTEXTURESTORAGE2DPROC_ALT)(GLuint,GLsizei,GLenum,GLsizei,GLsizei);
static inline void glTextureStorage2D(GLuint texture1,GLsizei levels1,GLenum internalformat1,GLsizei width1,GLsizei height1)
{
	static PFNGLTEXTURESTORAGE2DPROC_ALT fn=(PFNGLTEXTURESTORAGE2DPROC_ALT)glaltGetProcAddressExtension("glTextureStorage2D","GL_ARB_direct_state_access");
	 fn(texture1,levels1,internalformat1,width1,height1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureStorage2DMultisample
#define GL_ALT_FUNDEF_TextureStorage2DMultisample
typedef void (*PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC_ALT)(GLuint,GLsizei,GLenum,GLsizei,GLsizei,GLboolean);
static inline void glTextureStorage2DMultisample(GLuint texture1,GLsizei samples1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLboolean fixedsamplelocations1)
{
	static PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC_ALT fn=(PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC_ALT)glaltGetProcAddressExtension("glTextureStorage2DMultisample","GL_ARB_direct_state_access");
	 fn(texture1,samples1,internalformat1,width1,height1,fixedsamplelocations1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureStorage3D
#define GL_ALT_FUNDEF_TextureStorage3D
typedef void (*PFNGLTEXTURESTORAGE3DPROC_ALT)(GLuint,GLsizei,GLenum,GLsizei,GLsizei,GLsizei);
static inline void glTextureStorage3D(GLuint texture1,GLsizei levels1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1)
{
	static PFNGLTEXTURESTORAGE3DPROC_ALT fn=(PFNGLTEXTURESTORAGE3DPROC_ALT)glaltGetProcAddressExtension("glTextureStorage3D","GL_ARB_direct_state_access");
	 fn(texture1,levels1,internalformat1,width1,height1,depth1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureStorage3DMultisample
#define GL_ALT_FUNDEF_TextureStorage3DMultisample
typedef void (*PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC_ALT)(GLuint,GLsizei,GLenum,GLsizei,GLsizei,GLsizei,GLboolean);
static inline void glTextureStorage3DMultisample(GLuint texture1,GLsizei samples1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLboolean fixedsamplelocations1)
{
	static PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC_ALT fn=(PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC_ALT)glaltGetProcAddressExtension("glTextureStorage3DMultisample","GL_ARB_direct_state_access");
	 fn(texture1,samples1,internalformat1,width1,height1,depth1,fixedsamplelocations1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureSubImage1D
#define GL_ALT_FUNDEF_TextureSubImage1D
typedef void (*PFNGLTEXTURESUBIMAGE1DPROC_ALT)(GLuint,GLint,GLint,GLsizei,GLenum,GLenum,const void *);
static inline void glTextureSubImage1D(GLuint texture1,GLint level1,GLint xoffset1,GLsizei width1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXTURESUBIMAGE1DPROC_ALT fn=(PFNGLTEXTURESUBIMAGE1DPROC_ALT)glaltGetProcAddressExtension("glTextureSubImage1D","GL_ARB_direct_state_access");
	 fn(texture1,level1,xoffset1,width1,format1,type1,pixels1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureSubImage2D
#define GL_ALT_FUNDEF_TextureSubImage2D
typedef void (*PFNGLTEXTURESUBIMAGE2DPROC_ALT)(GLuint,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,const void *);
static inline void glTextureSubImage2D(GLuint texture1,GLint level1,GLint xoffset1,GLint yoffset1,GLsizei width1,GLsizei height1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXTURESUBIMAGE2DPROC_ALT fn=(PFNGLTEXTURESUBIMAGE2DPROC_ALT)glaltGetProcAddressExtension("glTextureSubImage2D","GL_ARB_direct_state_access");
	 fn(texture1,level1,xoffset1,yoffset1,width1,height1,format1,type1,pixels1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureSubImage3D
#define GL_ALT_FUNDEF_TextureSubImage3D
typedef void (*PFNGLTEXTURESUBIMAGE3DPROC_ALT)(GLuint,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,const void *);
static inline void glTextureSubImage3D(GLuint texture1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLsizei width1,GLsizei height1,GLsizei depth1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXTURESUBIMAGE3DPROC_ALT fn=(PFNGLTEXTURESUBIMAGE3DPROC_ALT)glaltGetProcAddressExtension("glTextureSubImage3D","GL_ARB_direct_state_access");
	 fn(texture1,level1,xoffset1,yoffset1,zoffset1,width1,height1,depth1,format1,type1,pixels1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TransformFeedbackBufferBase
#define GL_ALT_FUNDEF_TransformFeedbackBufferBase
typedef void (*PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC_ALT)(GLuint,GLuint,GLuint);
static inline void glTransformFeedbackBufferBase(GLuint xfb1,GLuint index1,GLuint buffer1)
{
	static PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC_ALT fn=(PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC_ALT)glaltGetProcAddressExtension("glTransformFeedbackBufferBase","GL_ARB_direct_state_access");
	 fn(xfb1,index1,buffer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TransformFeedbackBufferRange
#define GL_ALT_FUNDEF_TransformFeedbackBufferRange
typedef void (*PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC_ALT)(GLuint,GLuint,GLuint,GLintptr,GLsizei);
static inline void glTransformFeedbackBufferRange(GLuint xfb1,GLuint index1,GLuint buffer1,GLintptr offset1,GLsizei size1)
{
	static PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC_ALT fn=(PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC_ALT)glaltGetProcAddressExtension("glTransformFeedbackBufferRange","GL_ARB_direct_state_access");
	 fn(xfb1,index1,buffer1,offset1,size1);
}
#endif

#ifndef	GL_ALT_FUNDEF_UnmapNamedBuffer
#define GL_ALT_FUNDEF_UnmapNamedBuffer
typedef GLboolean (*PFNGLUNMAPNAMEDBUFFERPROC_ALT)(GLuint);
static inline GLboolean glUnmapNamedBuffer(GLuint buffer1)
{
	static PFNGLUNMAPNAMEDBUFFERPROC_ALT fn=(PFNGLUNMAPNAMEDBUFFERPROC_ALT)glaltGetProcAddressExtension("glUnmapNamedBuffer","GL_ARB_direct_state_access");
	return fn(buffer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexArrayAttribBinding
#define GL_ALT_FUNDEF_VertexArrayAttribBinding
typedef void (*PFNGLVERTEXARRAYATTRIBBINDINGPROC_ALT)(GLuint,GLuint,GLuint);
static inline void glVertexArrayAttribBinding(GLuint vaobj1,GLuint attribindex1,GLuint bindingindex1)
{
	static PFNGLVERTEXARRAYATTRIBBINDINGPROC_ALT fn=(PFNGLVERTEXARRAYATTRIBBINDINGPROC_ALT)glaltGetProcAddressExtension("glVertexArrayAttribBinding","GL_ARB_direct_state_access");
	 fn(vaobj1,attribindex1,bindingindex1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexArrayAttribFormat
#define GL_ALT_FUNDEF_VertexArrayAttribFormat
typedef void (*PFNGLVERTEXARRAYATTRIBFORMATPROC_ALT)(GLuint,GLuint,GLint,GLenum,GLboolean,GLuint);
static inline void glVertexArrayAttribFormat(GLuint vaobj1,GLuint attribindex1,GLint size1,GLenum type1,GLboolean normalized1,GLuint relativeoffset1)
{
	static PFNGLVERTEXARRAYATTRIBFORMATPROC_ALT fn=(PFNGLVERTEXARRAYATTRIBFORMATPROC_ALT)glaltGetProcAddressExtension("glVertexArrayAttribFormat","GL_ARB_direct_state_access");
	 fn(vaobj1,attribindex1,size1,type1,normalized1,relativeoffset1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexArrayAttribIFormat
#define GL_ALT_FUNDEF_VertexArrayAttribIFormat
typedef void (*PFNGLVERTEXARRAYATTRIBIFORMATPROC_ALT)(GLuint,GLuint,GLint,GLenum,GLuint);
static inline void glVertexArrayAttribIFormat(GLuint vaobj1,GLuint attribindex1,GLint size1,GLenum type1,GLuint relativeoffset1)
{
	static PFNGLVERTEXARRAYATTRIBIFORMATPROC_ALT fn=(PFNGLVERTEXARRAYATTRIBIFORMATPROC_ALT)glaltGetProcAddressExtension("glVertexArrayAttribIFormat","GL_ARB_direct_state_access");
	 fn(vaobj1,attribindex1,size1,type1,relativeoffset1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexArrayAttribLFormat
#define GL_ALT_FUNDEF_VertexArrayAttribLFormat
typedef void (*PFNGLVERTEXARRAYATTRIBLFORMATPROC_ALT)(GLuint,GLuint,GLint,GLenum,GLuint);
static inline void glVertexArrayAttribLFormat(GLuint vaobj1,GLuint attribindex1,GLint size1,GLenum type1,GLuint relativeoffset1)
{
	static PFNGLVERTEXARRAYATTRIBLFORMATPROC_ALT fn=(PFNGLVERTEXARRAYATTRIBLFORMATPROC_ALT)glaltGetProcAddressExtension("glVertexArrayAttribLFormat","GL_ARB_direct_state_access");
	 fn(vaobj1,attribindex1,size1,type1,relativeoffset1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexArrayBindingDivisor
#define GL_ALT_FUNDEF_VertexArrayBindingDivisor
typedef void (*PFNGLVERTEXARRAYBINDINGDIVISORPROC_ALT)(GLuint,GLuint,GLuint);
static inline void glVertexArrayBindingDivisor(GLuint vaobj1,GLuint bindingindex1,GLuint divisor1)
{
	static PFNGLVERTEXARRAYBINDINGDIVISORPROC_ALT fn=(PFNGLVERTEXARRAYBINDINGDIVISORPROC_ALT)glaltGetProcAddressExtension("glVertexArrayBindingDivisor","GL_ARB_direct_state_access");
	 fn(vaobj1,bindingindex1,divisor1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexArrayElementBuffer
#define GL_ALT_FUNDEF_VertexArrayElementBuffer
typedef void (*PFNGLVERTEXARRAYELEMENTBUFFERPROC_ALT)(GLuint,GLuint);
static inline void glVertexArrayElementBuffer(GLuint vaobj1,GLuint buffer1)
{
	static PFNGLVERTEXARRAYELEMENTBUFFERPROC_ALT fn=(PFNGLVERTEXARRAYELEMENTBUFFERPROC_ALT)glaltGetProcAddressExtension("glVertexArrayElementBuffer","GL_ARB_direct_state_access");
	 fn(vaobj1,buffer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexArrayVertexBuffer
#define GL_ALT_FUNDEF_VertexArrayVertexBuffer
typedef void (*PFNGLVERTEXARRAYVERTEXBUFFERPROC_ALT)(GLuint,GLuint,GLuint,GLintptr,GLsizei);
static inline void glVertexArrayVertexBuffer(GLuint vaobj1,GLuint bindingindex1,GLuint buffer1,GLintptr offset1,GLsizei stride1)
{
	static PFNGLVERTEXARRAYVERTEXBUFFERPROC_ALT fn=(PFNGLVERTEXARRAYVERTEXBUFFERPROC_ALT)glaltGetProcAddressExtension("glVertexArrayVertexBuffer","GL_ARB_direct_state_access");
	 fn(vaobj1,bindingindex1,buffer1,offset1,stride1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexArrayVertexBuffers
#define GL_ALT_FUNDEF_VertexArrayVertexBuffers
typedef void (*PFNGLVERTEXARRAYVERTEXBUFFERSPROC_ALT)(GLuint,GLuint,GLsizei,const GLuint *,const GLintptr *,const GLsizei *);
static inline void glVertexArrayVertexBuffers(GLuint vaobj1,GLuint first1,GLsizei count1,const GLuint * buffers1,const GLintptr * offsets1,const GLsizei * strides1)
{
	static PFNGLVERTEXARRAYVERTEXBUFFERSPROC_ALT fn=(PFNGLVERTEXARRAYVERTEXBUFFERSPROC_ALT)glaltGetProcAddressExtension("glVertexArrayVertexBuffers","GL_ARB_direct_state_access");
	 fn(vaobj1,first1,count1,buffers1,offsets1,strides1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_draw_buffers
#define GL_ARB_draw_buffers
#ifndef GL_MAX_DRAW_BUFFERS_ARB
#define GL_MAX_DRAW_BUFFERS_ARB 0x8824
#endif //GL_MAX_DRAW_BUFFERS_ARB
#ifndef GL_DRAW_BUFFER0_ARB
#define GL_DRAW_BUFFER0_ARB 0x8825
#endif //GL_DRAW_BUFFER0_ARB
#ifndef GL_DRAW_BUFFER1_ARB
#define GL_DRAW_BUFFER1_ARB 0x8826
#endif //GL_DRAW_BUFFER1_ARB
#ifndef GL_DRAW_BUFFER2_ARB
#define GL_DRAW_BUFFER2_ARB 0x8827
#endif //GL_DRAW_BUFFER2_ARB
#ifndef GL_DRAW_BUFFER3_ARB
#define GL_DRAW_BUFFER3_ARB 0x8828
#endif //GL_DRAW_BUFFER3_ARB
#ifndef GL_DRAW_BUFFER4_ARB
#define GL_DRAW_BUFFER4_ARB 0x8829
#endif //GL_DRAW_BUFFER4_ARB
#ifndef GL_DRAW_BUFFER5_ARB
#define GL_DRAW_BUFFER5_ARB 0x882A
#endif //GL_DRAW_BUFFER5_ARB
#ifndef GL_DRAW_BUFFER6_ARB
#define GL_DRAW_BUFFER6_ARB 0x882B
#endif //GL_DRAW_BUFFER6_ARB
#ifndef GL_DRAW_BUFFER7_ARB
#define GL_DRAW_BUFFER7_ARB 0x882C
#endif //GL_DRAW_BUFFER7_ARB
#ifndef GL_DRAW_BUFFER8_ARB
#define GL_DRAW_BUFFER8_ARB 0x882D
#endif //GL_DRAW_BUFFER8_ARB
#ifndef GL_DRAW_BUFFER9_ARB
#define GL_DRAW_BUFFER9_ARB 0x882E
#endif //GL_DRAW_BUFFER9_ARB
#ifndef GL_DRAW_BUFFER10_ARB
#define GL_DRAW_BUFFER10_ARB 0x882F
#endif //GL_DRAW_BUFFER10_ARB
#ifndef GL_DRAW_BUFFER11_ARB
#define GL_DRAW_BUFFER11_ARB 0x8830
#endif //GL_DRAW_BUFFER11_ARB
#ifndef GL_DRAW_BUFFER12_ARB
#define GL_DRAW_BUFFER12_ARB 0x8831
#endif //GL_DRAW_BUFFER12_ARB
#ifndef GL_DRAW_BUFFER13_ARB
#define GL_DRAW_BUFFER13_ARB 0x8832
#endif //GL_DRAW_BUFFER13_ARB
#ifndef GL_DRAW_BUFFER14_ARB
#define GL_DRAW_BUFFER14_ARB 0x8833
#endif //GL_DRAW_BUFFER14_ARB
#ifndef GL_DRAW_BUFFER15_ARB
#define GL_DRAW_BUFFER15_ARB 0x8834
#endif //GL_DRAW_BUFFER15_ARB
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_DrawBuffersARB
#define GL_ALT_FUNDEF_DrawBuffersARB
typedef void (*PFNGLDRAWBUFFERSARBPROC_ALT)(GLsizei,const GLenum *);
static inline void glDrawBuffersARB(GLsizei n1,const GLenum * bufs1)
{
	static PFNGLDRAWBUFFERSARBPROC_ALT fn=(PFNGLDRAWBUFFERSARBPROC_ALT)glaltGetProcAddressExtension("glDrawBuffersARB","GL_ARB_draw_buffers");
	 fn(n1,bufs1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_ARB_draw_buffers_blend
#define GL_ARB_draw_buffers_blend
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BlendEquationSeparateiARB
#define GL_ALT_FUNDEF_BlendEquationSeparateiARB
typedef void (*PFNGLBLENDEQUATIONSEPARATEIARBPROC_ALT)(GLuint,GLenum,GLenum);
static inline void glBlendEquationSeparateiARB(GLuint buf1,GLenum modeRGB1,GLenum modeAlpha1)
{
	static PFNGLBLENDEQUATIONSEPARATEIARBPROC_ALT fn=(PFNGLBLENDEQUATIONSEPARATEIARBPROC_ALT)glaltGetProcAddressExtension("glBlendEquationSeparateiARB","GL_ARB_draw_buffers_blend");
	 fn(buf1,modeRGB1,modeAlpha1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_BlendEquationiARB
#define GL_ALT_FUNDEF_BlendEquationiARB
typedef void (*PFNGLBLENDEQUATIONIARBPROC_ALT)(GLuint,GLenum);
static inline void glBlendEquationiARB(GLuint buf1,GLenum mode1)
{
	static PFNGLBLENDEQUATIONIARBPROC_ALT fn=(PFNGLBLENDEQUATIONIARBPROC_ALT)glaltGetProcAddressExtension("glBlendEquationiARB","GL_ARB_draw_buffers_blend");
	 fn(buf1,mode1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_BlendFuncSeparateiARB
#define GL_ALT_FUNDEF_BlendFuncSeparateiARB
typedef void (*PFNGLBLENDFUNCSEPARATEIARBPROC_ALT)(GLuint,GLenum,GLenum,GLenum,GLenum);
static inline void glBlendFuncSeparateiARB(GLuint buf1,GLenum srcRGB1,GLenum dstRGB1,GLenum srcAlpha1,GLenum dstAlpha1)
{
	static PFNGLBLENDFUNCSEPARATEIARBPROC_ALT fn=(PFNGLBLENDFUNCSEPARATEIARBPROC_ALT)glaltGetProcAddressExtension("glBlendFuncSeparateiARB","GL_ARB_draw_buffers_blend");
	 fn(buf1,srcRGB1,dstRGB1,srcAlpha1,dstAlpha1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_BlendFunciARB
#define GL_ALT_FUNDEF_BlendFunciARB
typedef void (*PFNGLBLENDFUNCIARBPROC_ALT)(GLuint,GLenum,GLenum);
static inline void glBlendFunciARB(GLuint buf1,GLenum src1,GLenum dst1)
{
	static PFNGLBLENDFUNCIARBPROC_ALT fn=(PFNGLBLENDFUNCIARBPROC_ALT)glaltGetProcAddressExtension("glBlendFunciARB","GL_ARB_draw_buffers_blend");
	 fn(buf1,src1,dst1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_ARB_draw_elements_base_vertex
#define GL_ARB_draw_elements_base_vertex
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_DrawElementsBaseVertex
#define GL_ALT_FUNDEF_DrawElementsBaseVertex
typedef void (*PFNGLDRAWELEMENTSBASEVERTEXPROC_ALT)(GLenum,GLsizei,GLenum,const void *,GLint);
static inline void glDrawElementsBaseVertex(GLenum mode1,GLsizei count1,GLenum type1,const void * indices1,GLint basevertex1)
{
	static PFNGLDRAWELEMENTSBASEVERTEXPROC_ALT fn=(PFNGLDRAWELEMENTSBASEVERTEXPROC_ALT)glaltGetProcAddressExtension("glDrawElementsBaseVertex","GL_ARB_draw_elements_base_vertex");
	 fn(mode1,count1,type1,indices1,basevertex1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DrawElementsInstancedBaseVertex
#define GL_ALT_FUNDEF_DrawElementsInstancedBaseVertex
typedef void (*PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC_ALT)(GLenum,GLsizei,GLenum,const void *,GLsizei,GLint);
static inline void glDrawElementsInstancedBaseVertex(GLenum mode1,GLsizei count1,GLenum type1,const void * indices1,GLsizei instancecount1,GLint basevertex1)
{
	static PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC_ALT fn=(PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC_ALT)glaltGetProcAddressExtension("glDrawElementsInstancedBaseVertex","GL_ARB_draw_elements_base_vertex");
	 fn(mode1,count1,type1,indices1,instancecount1,basevertex1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DrawRangeElementsBaseVertex
#define GL_ALT_FUNDEF_DrawRangeElementsBaseVertex
typedef void (*PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC_ALT)(GLenum,GLuint,GLuint,GLsizei,GLenum,const void *,GLint);
static inline void glDrawRangeElementsBaseVertex(GLenum mode1,GLuint start1,GLuint end1,GLsizei count1,GLenum type1,const void * indices1,GLint basevertex1)
{
	static PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC_ALT fn=(PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC_ALT)glaltGetProcAddressExtension("glDrawRangeElementsBaseVertex","GL_ARB_draw_elements_base_vertex");
	 fn(mode1,start1,end1,count1,type1,indices1,basevertex1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiDrawElementsBaseVertex
#define GL_ALT_FUNDEF_MultiDrawElementsBaseVertex
typedef void (*PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC_ALT)(GLenum,const GLsizei *,GLenum,const void *const*,GLsizei,const GLint *);
static inline void glMultiDrawElementsBaseVertex(GLenum mode1,const GLsizei * count1,GLenum type1,const void *const* indices1,GLsizei drawcount1,const GLint * basevertex1)
{
	static PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC_ALT fn=(PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC_ALT)glaltGetProcAddressExtension("glMultiDrawElementsBaseVertex","GL_ARB_draw_elements_base_vertex");
	 fn(mode1,count1,type1,indices1,drawcount1,basevertex1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_draw_indirect
#define GL_ARB_draw_indirect
#ifndef GL_DRAW_INDIRECT_BUFFER
#define GL_DRAW_INDIRECT_BUFFER 0x8F3F
#endif //GL_DRAW_INDIRECT_BUFFER
#ifndef GL_DRAW_INDIRECT_BUFFER_BINDING
#define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43
#endif //GL_DRAW_INDIRECT_BUFFER_BINDING
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_DrawArraysIndirect
#define GL_ALT_FUNDEF_DrawArraysIndirect
typedef void (*PFNGLDRAWARRAYSINDIRECTPROC_ALT)(GLenum,const void *);
static inline void glDrawArraysIndirect(GLenum mode1,const void * indirect1)
{
	static PFNGLDRAWARRAYSINDIRECTPROC_ALT fn=(PFNGLDRAWARRAYSINDIRECTPROC_ALT)glaltGetProcAddressExtension("glDrawArraysIndirect","GL_ARB_draw_indirect");
	 fn(mode1,indirect1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DrawElementsIndirect
#define GL_ALT_FUNDEF_DrawElementsIndirect
typedef void (*PFNGLDRAWELEMENTSINDIRECTPROC_ALT)(GLenum,GLenum,const void *);
static inline void glDrawElementsIndirect(GLenum mode1,GLenum type1,const void * indirect1)
{
	static PFNGLDRAWELEMENTSINDIRECTPROC_ALT fn=(PFNGLDRAWELEMENTSINDIRECTPROC_ALT)glaltGetProcAddressExtension("glDrawElementsIndirect","GL_ARB_draw_indirect");
	 fn(mode1,type1,indirect1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_draw_instanced
#define GL_ARB_draw_instanced
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_DrawArraysInstancedARB
#define GL_ALT_FUNDEF_DrawArraysInstancedARB
typedef void (*PFNGLDRAWARRAYSINSTANCEDARBPROC_ALT)(GLenum,GLint,GLsizei,GLsizei);
static inline void glDrawArraysInstancedARB(GLenum mode1,GLint first1,GLsizei count1,GLsizei primcount1)
{
	static PFNGLDRAWARRAYSINSTANCEDARBPROC_ALT fn=(PFNGLDRAWARRAYSINSTANCEDARBPROC_ALT)glaltGetProcAddressExtension("glDrawArraysInstancedARB","GL_ARB_draw_instanced");
	 fn(mode1,first1,count1,primcount1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_DrawElementsInstancedARB
#define GL_ALT_FUNDEF_DrawElementsInstancedARB
typedef void (*PFNGLDRAWELEMENTSINSTANCEDARBPROC_ALT)(GLenum,GLsizei,GLenum,const void *,GLsizei);
static inline void glDrawElementsInstancedARB(GLenum mode1,GLsizei count1,GLenum type1,const void * indices1,GLsizei primcount1)
{
	static PFNGLDRAWELEMENTSINSTANCEDARBPROC_ALT fn=(PFNGLDRAWELEMENTSINSTANCEDARBPROC_ALT)glaltGetProcAddressExtension("glDrawElementsInstancedARB","GL_ARB_draw_instanced");
	 fn(mode1,count1,type1,indices1,primcount1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_ARB_enhanced_layouts
#define GL_ARB_enhanced_layouts
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#endif //GL_TRANSFORM_FEEDBACK_BUFFER
#ifndef GL_LOCATION_COMPONENT
#define GL_LOCATION_COMPONENT 0x934A
#endif //GL_LOCATION_COMPONENT
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_INDEX
#define GL_TRANSFORM_FEEDBACK_BUFFER_INDEX 0x934B
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_INDEX
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE
#define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE 0x934C
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_explicit_attrib_location
#define GL_ARB_explicit_attrib_location
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_explicit_uniform_location
#define GL_ARB_explicit_uniform_location
#ifndef GL_MAX_UNIFORM_LOCATIONS
#define GL_MAX_UNIFORM_LOCATIONS 0x826E
#endif //GL_MAX_UNIFORM_LOCATIONS
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_fragment_coord_conventions
#define GL_ARB_fragment_coord_conventions
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_fragment_layer_viewport
#define GL_ARB_fragment_layer_viewport
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_fragment_program
#define GL_ARB_fragment_program
#ifndef GL_PROGRAM_LENGTH_ARB
#define GL_PROGRAM_LENGTH_ARB 0x8627
#endif //GL_PROGRAM_LENGTH_ARB
#ifndef GL_PROGRAM_STRING_ARB
#define GL_PROGRAM_STRING_ARB 0x8628
#endif //GL_PROGRAM_STRING_ARB
#ifndef GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
#define GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB 0x862E
#endif //GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
#ifndef GL_MAX_PROGRAM_MATRICES_ARB
#define GL_MAX_PROGRAM_MATRICES_ARB 0x862F
#endif //GL_MAX_PROGRAM_MATRICES_ARB
#ifndef GL_CURRENT_MATRIX_STACK_DEPTH_ARB
#define GL_CURRENT_MATRIX_STACK_DEPTH_ARB 0x8640
#endif //GL_CURRENT_MATRIX_STACK_DEPTH_ARB
#ifndef GL_CURRENT_MATRIX_ARB
#define GL_CURRENT_MATRIX_ARB 0x8641
#endif //GL_CURRENT_MATRIX_ARB
#ifndef GL_PROGRAM_ERROR_POSITION_ARB
#define GL_PROGRAM_ERROR_POSITION_ARB 0x864B
#endif //GL_PROGRAM_ERROR_POSITION_ARB
#ifndef GL_PROGRAM_BINDING_ARB
#define GL_PROGRAM_BINDING_ARB 0x8677
#endif //GL_PROGRAM_BINDING_ARB
#ifndef GL_FRAGMENT_PROGRAM_ARB
#define GL_FRAGMENT_PROGRAM_ARB 0x8804
#endif //GL_FRAGMENT_PROGRAM_ARB
#ifndef GL_PROGRAM_ALU_INSTRUCTIONS_ARB
#define GL_PROGRAM_ALU_INSTRUCTIONS_ARB 0x8805
#endif //GL_PROGRAM_ALU_INSTRUCTIONS_ARB
#ifndef GL_PROGRAM_TEX_INSTRUCTIONS_ARB
#define GL_PROGRAM_TEX_INSTRUCTIONS_ARB 0x8806
#endif //GL_PROGRAM_TEX_INSTRUCTIONS_ARB
#ifndef GL_PROGRAM_TEX_INDIRECTIONS_ARB
#define GL_PROGRAM_TEX_INDIRECTIONS_ARB 0x8807
#endif //GL_PROGRAM_TEX_INDIRECTIONS_ARB
#ifndef GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
#define GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x8808
#endif //GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
#ifndef GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
#define GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x8809
#endif //GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
#ifndef GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
#define GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x880A
#endif //GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
#ifndef GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
#define GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB 0x880B
#endif //GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
#ifndef GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
#define GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB 0x880C
#endif //GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
#ifndef GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB
#define GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB 0x880D
#endif //GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB
#ifndef GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
#define GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x880E
#endif //GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
#ifndef GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
#define GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x880F
#endif //GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
#ifndef GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
#define GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x8810
#endif //GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
#ifndef GL_MAX_TEXTURE_COORDS_ARB
#define GL_MAX_TEXTURE_COORDS_ARB 0x8871
#endif //GL_MAX_TEXTURE_COORDS_ARB
#ifndef GL_MAX_TEXTURE_IMAGE_UNITS_ARB
#define GL_MAX_TEXTURE_IMAGE_UNITS_ARB 0x8872
#endif //GL_MAX_TEXTURE_IMAGE_UNITS_ARB
#ifndef GL_PROGRAM_ERROR_STRING_ARB
#define GL_PROGRAM_ERROR_STRING_ARB 0x8874
#endif //GL_PROGRAM_ERROR_STRING_ARB
#ifndef GL_PROGRAM_FORMAT_ASCII_ARB
#define GL_PROGRAM_FORMAT_ASCII_ARB 0x8875
#endif //GL_PROGRAM_FORMAT_ASCII_ARB
#ifndef GL_PROGRAM_FORMAT_ARB
#define GL_PROGRAM_FORMAT_ARB 0x8876
#endif //GL_PROGRAM_FORMAT_ARB
#ifndef GL_PROGRAM_INSTRUCTIONS_ARB
#define GL_PROGRAM_INSTRUCTIONS_ARB 0x88A0
#endif //GL_PROGRAM_INSTRUCTIONS_ARB
#ifndef GL_MAX_PROGRAM_INSTRUCTIONS_ARB
#define GL_MAX_PROGRAM_INSTRUCTIONS_ARB 0x88A1
#endif //GL_MAX_PROGRAM_INSTRUCTIONS_ARB
#ifndef GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
#define GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A2
#endif //GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
#ifndef GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
#define GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A3
#endif //GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
#ifndef GL_PROGRAM_TEMPORARIES_ARB
#define GL_PROGRAM_TEMPORARIES_ARB 0x88A4
#endif //GL_PROGRAM_TEMPORARIES_ARB
#ifndef GL_MAX_PROGRAM_TEMPORARIES_ARB
#define GL_MAX_PROGRAM_TEMPORARIES_ARB 0x88A5
#endif //GL_MAX_PROGRAM_TEMPORARIES_ARB
#ifndef GL_PROGRAM_NATIVE_TEMPORARIES_ARB
#define GL_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A6
#endif //GL_PROGRAM_NATIVE_TEMPORARIES_ARB
#ifndef GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
#define GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A7
#endif //GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
#ifndef GL_PROGRAM_PARAMETERS_ARB
#define GL_PROGRAM_PARAMETERS_ARB 0x88A8
#endif //GL_PROGRAM_PARAMETERS_ARB
#ifndef GL_MAX_PROGRAM_PARAMETERS_ARB
#define GL_MAX_PROGRAM_PARAMETERS_ARB 0x88A9
#endif //GL_MAX_PROGRAM_PARAMETERS_ARB
#ifndef GL_PROGRAM_NATIVE_PARAMETERS_ARB
#define GL_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AA
#endif //GL_PROGRAM_NATIVE_PARAMETERS_ARB
#ifndef GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
#define GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AB
#endif //GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
#ifndef GL_PROGRAM_ATTRIBS_ARB
#define GL_PROGRAM_ATTRIBS_ARB 0x88AC
#endif //GL_PROGRAM_ATTRIBS_ARB
#ifndef GL_MAX_PROGRAM_ATTRIBS_ARB
#define GL_MAX_PROGRAM_ATTRIBS_ARB 0x88AD
#endif //GL_MAX_PROGRAM_ATTRIBS_ARB
#ifndef GL_PROGRAM_NATIVE_ATTRIBS_ARB
#define GL_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AE
#endif //GL_PROGRAM_NATIVE_ATTRIBS_ARB
#ifndef GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
#define GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AF
#endif //GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
#ifndef GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
#define GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB 0x88B4
#endif //GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
#ifndef GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
#define GL_MAX_PROGRAM_ENV_PARAMETERS_ARB 0x88B5
#endif //GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
#ifndef GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
#define GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB 0x88B6
#endif //GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
#ifndef GL_TRANSPOSE_CURRENT_MATRIX_ARB
#define GL_TRANSPOSE_CURRENT_MATRIX_ARB 0x88B7
#endif //GL_TRANSPOSE_CURRENT_MATRIX_ARB
#ifndef GL_MATRIX0_ARB
#define GL_MATRIX0_ARB 0x88C0
#endif //GL_MATRIX0_ARB
#ifndef GL_MATRIX1_ARB
#define GL_MATRIX1_ARB 0x88C1
#endif //GL_MATRIX1_ARB
#ifndef GL_MATRIX2_ARB
#define GL_MATRIX2_ARB 0x88C2
#endif //GL_MATRIX2_ARB
#ifndef GL_MATRIX3_ARB
#define GL_MATRIX3_ARB 0x88C3
#endif //GL_MATRIX3_ARB
#ifndef GL_MATRIX4_ARB
#define GL_MATRIX4_ARB 0x88C4
#endif //GL_MATRIX4_ARB
#ifndef GL_MATRIX5_ARB
#define GL_MATRIX5_ARB 0x88C5
#endif //GL_MATRIX5_ARB
#ifndef GL_MATRIX6_ARB
#define GL_MATRIX6_ARB 0x88C6
#endif //GL_MATRIX6_ARB
#ifndef GL_MATRIX7_ARB
#define GL_MATRIX7_ARB 0x88C7
#endif //GL_MATRIX7_ARB
#ifndef GL_MATRIX8_ARB
#define GL_MATRIX8_ARB 0x88C8
#endif //GL_MATRIX8_ARB
#ifndef GL_MATRIX9_ARB
#define GL_MATRIX9_ARB 0x88C9
#endif //GL_MATRIX9_ARB
#ifndef GL_MATRIX10_ARB
#define GL_MATRIX10_ARB 0x88CA
#endif //GL_MATRIX10_ARB
#ifndef GL_MATRIX11_ARB
#define GL_MATRIX11_ARB 0x88CB
#endif //GL_MATRIX11_ARB
#ifndef GL_MATRIX12_ARB
#define GL_MATRIX12_ARB 0x88CC
#endif //GL_MATRIX12_ARB
#ifndef GL_MATRIX13_ARB
#define GL_MATRIX13_ARB 0x88CD
#endif //GL_MATRIX13_ARB
#ifndef GL_MATRIX14_ARB
#define GL_MATRIX14_ARB 0x88CE
#endif //GL_MATRIX14_ARB
#ifndef GL_MATRIX15_ARB
#define GL_MATRIX15_ARB 0x88CF
#endif //GL_MATRIX15_ARB
#ifndef GL_MATRIX16_ARB
#define GL_MATRIX16_ARB 0x88D0
#endif //GL_MATRIX16_ARB
#ifndef GL_MATRIX17_ARB
#define GL_MATRIX17_ARB 0x88D1
#endif //GL_MATRIX17_ARB
#ifndef GL_MATRIX18_ARB
#define GL_MATRIX18_ARB 0x88D2
#endif //GL_MATRIX18_ARB
#ifndef GL_MATRIX19_ARB
#define GL_MATRIX19_ARB 0x88D3
#endif //GL_MATRIX19_ARB
#ifndef GL_MATRIX20_ARB
#define GL_MATRIX20_ARB 0x88D4
#endif //GL_MATRIX20_ARB
#ifndef GL_MATRIX21_ARB
#define GL_MATRIX21_ARB 0x88D5
#endif //GL_MATRIX21_ARB
#ifndef GL_MATRIX22_ARB
#define GL_MATRIX22_ARB 0x88D6
#endif //GL_MATRIX22_ARB
#ifndef GL_MATRIX23_ARB
#define GL_MATRIX23_ARB 0x88D7
#endif //GL_MATRIX23_ARB
#ifndef GL_MATRIX24_ARB
#define GL_MATRIX24_ARB 0x88D8
#endif //GL_MATRIX24_ARB
#ifndef GL_MATRIX25_ARB
#define GL_MATRIX25_ARB 0x88D9
#endif //GL_MATRIX25_ARB
#ifndef GL_MATRIX26_ARB
#define GL_MATRIX26_ARB 0x88DA
#endif //GL_MATRIX26_ARB
#ifndef GL_MATRIX27_ARB
#define GL_MATRIX27_ARB 0x88DB
#endif //GL_MATRIX27_ARB
#ifndef GL_MATRIX28_ARB
#define GL_MATRIX28_ARB 0x88DC
#endif //GL_MATRIX28_ARB
#ifndef GL_MATRIX29_ARB
#define GL_MATRIX29_ARB 0x88DD
#endif //GL_MATRIX29_ARB
#ifndef GL_MATRIX30_ARB
#define GL_MATRIX30_ARB 0x88DE
#endif //GL_MATRIX30_ARB
#ifndef GL_MATRIX31_ARB
#define GL_MATRIX31_ARB 0x88DF
#endif //GL_MATRIX31_ARB
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BindProgramARB
#define GL_ALT_FUNDEF_BindProgramARB
typedef void (*PFNGLBINDPROGRAMARBPROC_ALT)(GLenum,GLuint);
static inline void glBindProgramARB(GLenum target1,GLuint program1)
{
	static PFNGLBINDPROGRAMARBPROC_ALT fn=(PFNGLBINDPROGRAMARBPROC_ALT)glaltGetProcAddressExtension("glBindProgramARB","GL_ARB_fragment_program");
	 fn(target1,program1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DeleteProgramsARB
#define GL_ALT_FUNDEF_DeleteProgramsARB
typedef void (*PFNGLDELETEPROGRAMSARBPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteProgramsARB(GLsizei n1,const GLuint * programs1)
{
	static PFNGLDELETEPROGRAMSARBPROC_ALT fn=(PFNGLDELETEPROGRAMSARBPROC_ALT)glaltGetProcAddressExtension("glDeleteProgramsARB","GL_ARB_fragment_program");
	 fn(n1,programs1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GenProgramsARB
#define GL_ALT_FUNDEF_GenProgramsARB
typedef void (*PFNGLGENPROGRAMSARBPROC_ALT)(GLsizei,GLuint *);
static inline void glGenProgramsARB(GLsizei n1,GLuint * programs1)
{
	static PFNGLGENPROGRAMSARBPROC_ALT fn=(PFNGLGENPROGRAMSARBPROC_ALT)glaltGetProcAddressExtension("glGenProgramsARB","GL_ARB_fragment_program");
	 fn(n1,programs1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetProgramEnvParameterdvARB
#define GL_ALT_FUNDEF_GetProgramEnvParameterdvARB
typedef void (*PFNGLGETPROGRAMENVPARAMETERDVARBPROC_ALT)(GLenum,GLuint,GLdouble *);
static inline void glGetProgramEnvParameterdvARB(GLenum target1,GLuint index1,GLdouble * params1)
{
	static PFNGLGETPROGRAMENVPARAMETERDVARBPROC_ALT fn=(PFNGLGETPROGRAMENVPARAMETERDVARBPROC_ALT)glaltGetProcAddressExtension("glGetProgramEnvParameterdvARB","GL_ARB_fragment_program");
	 fn(target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetProgramEnvParameterfvARB
#define GL_ALT_FUNDEF_GetProgramEnvParameterfvARB
typedef void (*PFNGLGETPROGRAMENVPARAMETERFVARBPROC_ALT)(GLenum,GLuint,GLfloat *);
static inline void glGetProgramEnvParameterfvARB(GLenum target1,GLuint index1,GLfloat * params1)
{
	static PFNGLGETPROGRAMENVPARAMETERFVARBPROC_ALT fn=(PFNGLGETPROGRAMENVPARAMETERFVARBPROC_ALT)glaltGetProcAddressExtension("glGetProgramEnvParameterfvARB","GL_ARB_fragment_program");
	 fn(target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetProgramLocalParameterdvARB
#define GL_ALT_FUNDEF_GetProgramLocalParameterdvARB
typedef void (*PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC_ALT)(GLenum,GLuint,GLdouble *);
static inline void glGetProgramLocalParameterdvARB(GLenum target1,GLuint index1,GLdouble * params1)
{
	static PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC_ALT fn=(PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC_ALT)glaltGetProcAddressExtension("glGetProgramLocalParameterdvARB","GL_ARB_fragment_program");
	 fn(target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetProgramLocalParameterfvARB
#define GL_ALT_FUNDEF_GetProgramLocalParameterfvARB
typedef void (*PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC_ALT)(GLenum,GLuint,GLfloat *);
static inline void glGetProgramLocalParameterfvARB(GLenum target1,GLuint index1,GLfloat * params1)
{
	static PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC_ALT fn=(PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC_ALT)glaltGetProcAddressExtension("glGetProgramLocalParameterfvARB","GL_ARB_fragment_program");
	 fn(target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetProgramStringARB
#define GL_ALT_FUNDEF_GetProgramStringARB
typedef void (*PFNGLGETPROGRAMSTRINGARBPROC_ALT)(GLenum,GLenum,void *);
static inline void glGetProgramStringARB(GLenum target1,GLenum pname1,void * string1)
{
	static PFNGLGETPROGRAMSTRINGARBPROC_ALT fn=(PFNGLGETPROGRAMSTRINGARBPROC_ALT)glaltGetProcAddressExtension("glGetProgramStringARB","GL_ARB_fragment_program");
	 fn(target1,pname1,string1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetProgramivARB
#define GL_ALT_FUNDEF_GetProgramivARB
typedef void (*PFNGLGETPROGRAMIVARBPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetProgramivARB(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETPROGRAMIVARBPROC_ALT fn=(PFNGLGETPROGRAMIVARBPROC_ALT)glaltGetProcAddressExtension("glGetProgramivARB","GL_ARB_fragment_program");
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IsProgramARB
#define GL_ALT_FUNDEF_IsProgramARB
typedef GLboolean (*PFNGLISPROGRAMARBPROC_ALT)(GLuint);
static inline GLboolean glIsProgramARB(GLuint program1)
{
	static PFNGLISPROGRAMARBPROC_ALT fn=(PFNGLISPROGRAMARBPROC_ALT)glaltGetProcAddressExtension("glIsProgramARB","GL_ARB_fragment_program");
	return fn(program1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramEnvParameter4dARB
#define GL_ALT_FUNDEF_ProgramEnvParameter4dARB
typedef void (*PFNGLPROGRAMENVPARAMETER4DARBPROC_ALT)(GLenum,GLuint,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void glProgramEnvParameter4dARB(GLenum target1,GLuint index1,GLdouble x1,GLdouble y1,GLdouble z1,GLdouble w1)
{
	static PFNGLPROGRAMENVPARAMETER4DARBPROC_ALT fn=(PFNGLPROGRAMENVPARAMETER4DARBPROC_ALT)glaltGetProcAddressExtension("glProgramEnvParameter4dARB","GL_ARB_fragment_program");
	 fn(target1,index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramEnvParameter4dvARB
#define GL_ALT_FUNDEF_ProgramEnvParameter4dvARB
typedef void (*PFNGLPROGRAMENVPARAMETER4DVARBPROC_ALT)(GLenum,GLuint,const GLdouble *);
static inline void glProgramEnvParameter4dvARB(GLenum target1,GLuint index1,const GLdouble * params1)
{
	static PFNGLPROGRAMENVPARAMETER4DVARBPROC_ALT fn=(PFNGLPROGRAMENVPARAMETER4DVARBPROC_ALT)glaltGetProcAddressExtension("glProgramEnvParameter4dvARB","GL_ARB_fragment_program");
	 fn(target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramEnvParameter4fARB
#define GL_ALT_FUNDEF_ProgramEnvParameter4fARB
typedef void (*PFNGLPROGRAMENVPARAMETER4FARBPROC_ALT)(GLenum,GLuint,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glProgramEnvParameter4fARB(GLenum target1,GLuint index1,GLfloat x1,GLfloat y1,GLfloat z1,GLfloat w1)
{
	static PFNGLPROGRAMENVPARAMETER4FARBPROC_ALT fn=(PFNGLPROGRAMENVPARAMETER4FARBPROC_ALT)glaltGetProcAddressExtension("glProgramEnvParameter4fARB","GL_ARB_fragment_program");
	 fn(target1,index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramEnvParameter4fvARB
#define GL_ALT_FUNDEF_ProgramEnvParameter4fvARB
typedef void (*PFNGLPROGRAMENVPARAMETER4FVARBPROC_ALT)(GLenum,GLuint,const GLfloat *);
static inline void glProgramEnvParameter4fvARB(GLenum target1,GLuint index1,const GLfloat * params1)
{
	static PFNGLPROGRAMENVPARAMETER4FVARBPROC_ALT fn=(PFNGLPROGRAMENVPARAMETER4FVARBPROC_ALT)glaltGetProcAddressExtension("glProgramEnvParameter4fvARB","GL_ARB_fragment_program");
	 fn(target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramLocalParameter4dARB
#define GL_ALT_FUNDEF_ProgramLocalParameter4dARB
typedef void (*PFNGLPROGRAMLOCALPARAMETER4DARBPROC_ALT)(GLenum,GLuint,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void glProgramLocalParameter4dARB(GLenum target1,GLuint index1,GLdouble x1,GLdouble y1,GLdouble z1,GLdouble w1)
{
	static PFNGLPROGRAMLOCALPARAMETER4DARBPROC_ALT fn=(PFNGLPROGRAMLOCALPARAMETER4DARBPROC_ALT)glaltGetProcAddressExtension("glProgramLocalParameter4dARB","GL_ARB_fragment_program");
	 fn(target1,index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramLocalParameter4dvARB
#define GL_ALT_FUNDEF_ProgramLocalParameter4dvARB
typedef void (*PFNGLPROGRAMLOCALPARAMETER4DVARBPROC_ALT)(GLenum,GLuint,const GLdouble *);
static inline void glProgramLocalParameter4dvARB(GLenum target1,GLuint index1,const GLdouble * params1)
{
	static PFNGLPROGRAMLOCALPARAMETER4DVARBPROC_ALT fn=(PFNGLPROGRAMLOCALPARAMETER4DVARBPROC_ALT)glaltGetProcAddressExtension("glProgramLocalParameter4dvARB","GL_ARB_fragment_program");
	 fn(target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramLocalParameter4fARB
#define GL_ALT_FUNDEF_ProgramLocalParameter4fARB
typedef void (*PFNGLPROGRAMLOCALPARAMETER4FARBPROC_ALT)(GLenum,GLuint,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glProgramLocalParameter4fARB(GLenum target1,GLuint index1,GLfloat x1,GLfloat y1,GLfloat z1,GLfloat w1)
{
	static PFNGLPROGRAMLOCALPARAMETER4FARBPROC_ALT fn=(PFNGLPROGRAMLOCALPARAMETER4FARBPROC_ALT)glaltGetProcAddressExtension("glProgramLocalParameter4fARB","GL_ARB_fragment_program");
	 fn(target1,index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramLocalParameter4fvARB
#define GL_ALT_FUNDEF_ProgramLocalParameter4fvARB
typedef void (*PFNGLPROGRAMLOCALPARAMETER4FVARBPROC_ALT)(GLenum,GLuint,const GLfloat *);
static inline void glProgramLocalParameter4fvARB(GLenum target1,GLuint index1,const GLfloat * params1)
{
	static PFNGLPROGRAMLOCALPARAMETER4FVARBPROC_ALT fn=(PFNGLPROGRAMLOCALPARAMETER4FVARBPROC_ALT)glaltGetProcAddressExtension("glProgramLocalParameter4fvARB","GL_ARB_fragment_program");
	 fn(target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramStringARB
#define GL_ALT_FUNDEF_ProgramStringARB
typedef void (*PFNGLPROGRAMSTRINGARBPROC_ALT)(GLenum,GLenum,GLsizei,const void *);
static inline void glProgramStringARB(GLenum target1,GLenum format1,GLsizei len1,const void * string1)
{
	static PFNGLPROGRAMSTRINGARBPROC_ALT fn=(PFNGLPROGRAMSTRINGARBPROC_ALT)glaltGetProcAddressExtension("glProgramStringARB","GL_ARB_fragment_program");
	 fn(target1,format1,len1,string1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_fragment_program_shadow
#define GL_ARB_fragment_program_shadow
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_fragment_shader
#define GL_ARB_fragment_shader
#ifndef GL_FRAGMENT_SHADER_ARB
#define GL_FRAGMENT_SHADER_ARB 0x8B30
#endif //GL_FRAGMENT_SHADER_ARB
#ifndef GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB 0x8B49
#endif //GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
#ifndef GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB 0x8B8B
#endif //GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_framebuffer_no_attachments
#define GL_ARB_framebuffer_no_attachments
#ifndef GL_FRAMEBUFFER_DEFAULT_WIDTH
#define GL_FRAMEBUFFER_DEFAULT_WIDTH 0x9310
#endif //GL_FRAMEBUFFER_DEFAULT_WIDTH
#ifndef GL_FRAMEBUFFER_DEFAULT_HEIGHT
#define GL_FRAMEBUFFER_DEFAULT_HEIGHT 0x9311
#endif //GL_FRAMEBUFFER_DEFAULT_HEIGHT
#ifndef GL_FRAMEBUFFER_DEFAULT_LAYERS
#define GL_FRAMEBUFFER_DEFAULT_LAYERS 0x9312
#endif //GL_FRAMEBUFFER_DEFAULT_LAYERS
#ifndef GL_FRAMEBUFFER_DEFAULT_SAMPLES
#define GL_FRAMEBUFFER_DEFAULT_SAMPLES 0x9313
#endif //GL_FRAMEBUFFER_DEFAULT_SAMPLES
#ifndef GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS
#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0x9314
#endif //GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS
#ifndef GL_MAX_FRAMEBUFFER_WIDTH
#define GL_MAX_FRAMEBUFFER_WIDTH 0x9315
#endif //GL_MAX_FRAMEBUFFER_WIDTH
#ifndef GL_MAX_FRAMEBUFFER_HEIGHT
#define GL_MAX_FRAMEBUFFER_HEIGHT 0x9316
#endif //GL_MAX_FRAMEBUFFER_HEIGHT
#ifndef GL_MAX_FRAMEBUFFER_LAYERS
#define GL_MAX_FRAMEBUFFER_LAYERS 0x9317
#endif //GL_MAX_FRAMEBUFFER_LAYERS
#ifndef GL_MAX_FRAMEBUFFER_SAMPLES
#define GL_MAX_FRAMEBUFFER_SAMPLES 0x9318
#endif //GL_MAX_FRAMEBUFFER_SAMPLES
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_FramebufferParameteri
#define GL_ALT_FUNDEF_FramebufferParameteri
typedef void (*PFNGLFRAMEBUFFERPARAMETERIPROC_ALT)(GLenum,GLenum,GLint);
static inline void glFramebufferParameteri(GLenum target1,GLenum pname1,GLint param1)
{
	static PFNGLFRAMEBUFFERPARAMETERIPROC_ALT fn=(PFNGLFRAMEBUFFERPARAMETERIPROC_ALT)glaltGetProcAddressExtension("glFramebufferParameteri","GL_ARB_framebuffer_no_attachments");
	 fn(target1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetFramebufferParameteriv
#define GL_ALT_FUNDEF_GetFramebufferParameteriv
typedef void (*PFNGLGETFRAMEBUFFERPARAMETERIVPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetFramebufferParameteriv(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETFRAMEBUFFERPARAMETERIVPROC_ALT fn=(PFNGLGETFRAMEBUFFERPARAMETERIVPROC_ALT)glaltGetProcAddressExtension("glGetFramebufferParameteriv","GL_ARB_framebuffer_no_attachments");
	 fn(target1,pname1,params1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_framebuffer_object
#define GL_ARB_framebuffer_object
#ifndef GL_INVALID_FRAMEBUFFER_OPERATION
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#endif //GL_INVALID_FRAMEBUFFER_OPERATION
#ifndef GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#endif //GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
#ifndef GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#endif //GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#endif //GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#endif //GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#endif //GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#endif //GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#endif //GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#endif //GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
#ifndef GL_FRAMEBUFFER_DEFAULT
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#endif //GL_FRAMEBUFFER_DEFAULT
#ifndef GL_FRAMEBUFFER_UNDEFINED
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#endif //GL_FRAMEBUFFER_UNDEFINED
#ifndef GL_DEPTH_STENCIL_ATTACHMENT
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#endif //GL_DEPTH_STENCIL_ATTACHMENT
#ifndef GL_MAX_RENDERBUFFER_SIZE
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#endif //GL_MAX_RENDERBUFFER_SIZE
#ifndef GL_DEPTH_STENCIL
#define GL_DEPTH_STENCIL 0x84F9
#endif //GL_DEPTH_STENCIL
#ifndef GL_UNSIGNED_INT_24_8
#define GL_UNSIGNED_INT_24_8 0x84FA
#endif //GL_UNSIGNED_INT_24_8
#ifndef GL_DEPTH24_STENCIL8
#define GL_DEPTH24_STENCIL8 0x88F0
#endif //GL_DEPTH24_STENCIL8
#ifndef GL_TEXTURE_STENCIL_SIZE
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#endif //GL_TEXTURE_STENCIL_SIZE
#ifndef GL_TEXTURE_RED_TYPE
#define GL_TEXTURE_RED_TYPE 0x8C10
#endif //GL_TEXTURE_RED_TYPE
#ifndef GL_TEXTURE_GREEN_TYPE
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#endif //GL_TEXTURE_GREEN_TYPE
#ifndef GL_TEXTURE_BLUE_TYPE
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#endif //GL_TEXTURE_BLUE_TYPE
#ifndef GL_TEXTURE_ALPHA_TYPE
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#endif //GL_TEXTURE_ALPHA_TYPE
#ifndef GL_TEXTURE_DEPTH_TYPE
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#endif //GL_TEXTURE_DEPTH_TYPE
#ifndef GL_UNSIGNED_NORMALIZED
#define GL_UNSIGNED_NORMALIZED 0x8C17
#endif //GL_UNSIGNED_NORMALIZED
#ifndef GL_DRAW_FRAMEBUFFER_BINDING
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#endif //GL_DRAW_FRAMEBUFFER_BINDING
#ifndef GL_FRAMEBUFFER_BINDING
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#endif //GL_FRAMEBUFFER_BINDING
#ifndef GL_RENDERBUFFER_BINDING
#define GL_RENDERBUFFER_BINDING 0x8CA7
#endif //GL_RENDERBUFFER_BINDING
#ifndef GL_READ_FRAMEBUFFER
#define GL_READ_FRAMEBUFFER 0x8CA8
#endif //GL_READ_FRAMEBUFFER
#ifndef GL_DRAW_FRAMEBUFFER
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#endif //GL_DRAW_FRAMEBUFFER
#ifndef GL_READ_FRAMEBUFFER_BINDING
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#endif //GL_READ_FRAMEBUFFER_BINDING
#ifndef GL_RENDERBUFFER_SAMPLES
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#endif //GL_RENDERBUFFER_SAMPLES
#ifndef GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#endif //GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#endif //GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
#ifndef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#endif //GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
#ifndef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#endif //GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#endif //GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
#ifndef GL_FRAMEBUFFER_COMPLETE
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#endif //GL_FRAMEBUFFER_COMPLETE
#ifndef GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#endif //GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
#ifndef GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#endif //GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
#ifndef GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#endif //GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
#ifndef GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#endif //GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
#ifndef GL_FRAMEBUFFER_UNSUPPORTED
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#endif //GL_FRAMEBUFFER_UNSUPPORTED
#ifndef GL_MAX_COLOR_ATTACHMENTS
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#endif //GL_MAX_COLOR_ATTACHMENTS
#ifndef GL_COLOR_ATTACHMENT0
#define GL_COLOR_ATTACHMENT0 0x8CE0
#endif //GL_COLOR_ATTACHMENT0
#ifndef GL_COLOR_ATTACHMENT1
#define GL_COLOR_ATTACHMENT1 0x8CE1
#endif //GL_COLOR_ATTACHMENT1
#ifndef GL_COLOR_ATTACHMENT2
#define GL_COLOR_ATTACHMENT2 0x8CE2
#endif //GL_COLOR_ATTACHMENT2
#ifndef GL_COLOR_ATTACHMENT3
#define GL_COLOR_ATTACHMENT3 0x8CE3
#endif //GL_COLOR_ATTACHMENT3
#ifndef GL_COLOR_ATTACHMENT4
#define GL_COLOR_ATTACHMENT4 0x8CE4
#endif //GL_COLOR_ATTACHMENT4
#ifndef GL_COLOR_ATTACHMENT5
#define GL_COLOR_ATTACHMENT5 0x8CE5
#endif //GL_COLOR_ATTACHMENT5
#ifndef GL_COLOR_ATTACHMENT6
#define GL_COLOR_ATTACHMENT6 0x8CE6
#endif //GL_COLOR_ATTACHMENT6
#ifndef GL_COLOR_ATTACHMENT7
#define GL_COLOR_ATTACHMENT7 0x8CE7
#endif //GL_COLOR_ATTACHMENT7
#ifndef GL_COLOR_ATTACHMENT8
#define GL_COLOR_ATTACHMENT8 0x8CE8
#endif //GL_COLOR_ATTACHMENT8
#ifndef GL_COLOR_ATTACHMENT9
#define GL_COLOR_ATTACHMENT9 0x8CE9
#endif //GL_COLOR_ATTACHMENT9
#ifndef GL_COLOR_ATTACHMENT10
#define GL_COLOR_ATTACHMENT10 0x8CEA
#endif //GL_COLOR_ATTACHMENT10
#ifndef GL_COLOR_ATTACHMENT11
#define GL_COLOR_ATTACHMENT11 0x8CEB
#endif //GL_COLOR_ATTACHMENT11
#ifndef GL_COLOR_ATTACHMENT12
#define GL_COLOR_ATTACHMENT12 0x8CEC
#endif //GL_COLOR_ATTACHMENT12
#ifndef GL_COLOR_ATTACHMENT13
#define GL_COLOR_ATTACHMENT13 0x8CED
#endif //GL_COLOR_ATTACHMENT13
#ifndef GL_COLOR_ATTACHMENT14
#define GL_COLOR_ATTACHMENT14 0x8CEE
#endif //GL_COLOR_ATTACHMENT14
#ifndef GL_COLOR_ATTACHMENT15
#define GL_COLOR_ATTACHMENT15 0x8CEF
#endif //GL_COLOR_ATTACHMENT15
#ifndef GL_DEPTH_ATTACHMENT
#define GL_DEPTH_ATTACHMENT 0x8D00
#endif //GL_DEPTH_ATTACHMENT
#ifndef GL_STENCIL_ATTACHMENT
#define GL_STENCIL_ATTACHMENT 0x8D20
#endif //GL_STENCIL_ATTACHMENT
#ifndef GL_FRAMEBUFFER
#define GL_FRAMEBUFFER 0x8D40
#endif //GL_FRAMEBUFFER
#ifndef GL_RENDERBUFFER
#define GL_RENDERBUFFER 0x8D41
#endif //GL_RENDERBUFFER
#ifndef GL_RENDERBUFFER_WIDTH
#define GL_RENDERBUFFER_WIDTH 0x8D42
#endif //GL_RENDERBUFFER_WIDTH
#ifndef GL_RENDERBUFFER_HEIGHT
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#endif //GL_RENDERBUFFER_HEIGHT
#ifndef GL_RENDERBUFFER_INTERNAL_FORMAT
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#endif //GL_RENDERBUFFER_INTERNAL_FORMAT
#ifndef GL_STENCIL_INDEX1
#define GL_STENCIL_INDEX1 0x8D46
#endif //GL_STENCIL_INDEX1
#ifndef GL_STENCIL_INDEX4
#define GL_STENCIL_INDEX4 0x8D47
#endif //GL_STENCIL_INDEX4
#ifndef GL_STENCIL_INDEX8
#define GL_STENCIL_INDEX8 0x8D48
#endif //GL_STENCIL_INDEX8
#ifndef GL_STENCIL_INDEX16
#define GL_STENCIL_INDEX16 0x8D49
#endif //GL_STENCIL_INDEX16
#ifndef GL_RENDERBUFFER_RED_SIZE
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#endif //GL_RENDERBUFFER_RED_SIZE
#ifndef GL_RENDERBUFFER_GREEN_SIZE
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#endif //GL_RENDERBUFFER_GREEN_SIZE
#ifndef GL_RENDERBUFFER_BLUE_SIZE
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#endif //GL_RENDERBUFFER_BLUE_SIZE
#ifndef GL_RENDERBUFFER_ALPHA_SIZE
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#endif //GL_RENDERBUFFER_ALPHA_SIZE
#ifndef GL_RENDERBUFFER_DEPTH_SIZE
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#endif //GL_RENDERBUFFER_DEPTH_SIZE
#ifndef GL_RENDERBUFFER_STENCIL_SIZE
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#endif //GL_RENDERBUFFER_STENCIL_SIZE
#ifndef GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#endif //GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
#ifndef GL_MAX_SAMPLES
#define GL_MAX_SAMPLES 0x8D57
#endif //GL_MAX_SAMPLES
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BindFramebuffer
#define GL_ALT_FUNDEF_BindFramebuffer
typedef void (*PFNGLBINDFRAMEBUFFERPROC_ALT)(GLenum,GLuint);
static inline void glBindFramebuffer(GLenum target1,GLuint framebuffer1)
{
	static PFNGLBINDFRAMEBUFFERPROC_ALT fn=(PFNGLBINDFRAMEBUFFERPROC_ALT)glaltGetProcAddressExtension("glBindFramebuffer","GL_ARB_framebuffer_object");
	 fn(target1,framebuffer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_BindRenderbuffer
#define GL_ALT_FUNDEF_BindRenderbuffer
typedef void (*PFNGLBINDRENDERBUFFERPROC_ALT)(GLenum,GLuint);
static inline void glBindRenderbuffer(GLenum target1,GLuint renderbuffer1)
{
	static PFNGLBINDRENDERBUFFERPROC_ALT fn=(PFNGLBINDRENDERBUFFERPROC_ALT)glaltGetProcAddressExtension("glBindRenderbuffer","GL_ARB_framebuffer_object");
	 fn(target1,renderbuffer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_BlitFramebuffer
#define GL_ALT_FUNDEF_BlitFramebuffer
typedef void (*PFNGLBLITFRAMEBUFFERPROC_ALT)(GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLbitfield,GLenum);
static inline void glBlitFramebuffer(GLint srcX01,GLint srcY01,GLint srcX11,GLint srcY11,GLint dstX01,GLint dstY01,GLint dstX11,GLint dstY11,GLbitfield mask1,GLenum filter1)
{
	static PFNGLBLITFRAMEBUFFERPROC_ALT fn=(PFNGLBLITFRAMEBUFFERPROC_ALT)glaltGetProcAddressExtension("glBlitFramebuffer","GL_ARB_framebuffer_object");
	 fn(srcX01,srcY01,srcX11,srcY11,dstX01,dstY01,dstX11,dstY11,mask1,filter1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CheckFramebufferStatus
#define GL_ALT_FUNDEF_CheckFramebufferStatus
typedef GLenum (*PFNGLCHECKFRAMEBUFFERSTATUSPROC_ALT)(GLenum);
static inline GLenum glCheckFramebufferStatus(GLenum target1)
{
	static PFNGLCHECKFRAMEBUFFERSTATUSPROC_ALT fn=(PFNGLCHECKFRAMEBUFFERSTATUSPROC_ALT)glaltGetProcAddressExtension("glCheckFramebufferStatus","GL_ARB_framebuffer_object");
	return fn(target1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DeleteFramebuffers
#define GL_ALT_FUNDEF_DeleteFramebuffers
typedef void (*PFNGLDELETEFRAMEBUFFERSPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteFramebuffers(GLsizei n1,const GLuint * framebuffers1)
{
	static PFNGLDELETEFRAMEBUFFERSPROC_ALT fn=(PFNGLDELETEFRAMEBUFFERSPROC_ALT)glaltGetProcAddressExtension("glDeleteFramebuffers","GL_ARB_framebuffer_object");
	 fn(n1,framebuffers1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DeleteRenderbuffers
#define GL_ALT_FUNDEF_DeleteRenderbuffers
typedef void (*PFNGLDELETERENDERBUFFERSPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteRenderbuffers(GLsizei n1,const GLuint * renderbuffers1)
{
	static PFNGLDELETERENDERBUFFERSPROC_ALT fn=(PFNGLDELETERENDERBUFFERSPROC_ALT)glaltGetProcAddressExtension("glDeleteRenderbuffers","GL_ARB_framebuffer_object");
	 fn(n1,renderbuffers1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FramebufferRenderbuffer
#define GL_ALT_FUNDEF_FramebufferRenderbuffer
typedef void (*PFNGLFRAMEBUFFERRENDERBUFFERPROC_ALT)(GLenum,GLenum,GLenum,GLuint);
static inline void glFramebufferRenderbuffer(GLenum target1,GLenum attachment1,GLenum renderbuffertarget1,GLuint renderbuffer1)
{
	static PFNGLFRAMEBUFFERRENDERBUFFERPROC_ALT fn=(PFNGLFRAMEBUFFERRENDERBUFFERPROC_ALT)glaltGetProcAddressExtension("glFramebufferRenderbuffer","GL_ARB_framebuffer_object");
	 fn(target1,attachment1,renderbuffertarget1,renderbuffer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FramebufferTexture1D
#define GL_ALT_FUNDEF_FramebufferTexture1D
typedef void (*PFNGLFRAMEBUFFERTEXTURE1DPROC_ALT)(GLenum,GLenum,GLenum,GLuint,GLint);
static inline void glFramebufferTexture1D(GLenum target1,GLenum attachment1,GLenum textarget1,GLuint texture1,GLint level1)
{
	static PFNGLFRAMEBUFFERTEXTURE1DPROC_ALT fn=(PFNGLFRAMEBUFFERTEXTURE1DPROC_ALT)glaltGetProcAddressExtension("glFramebufferTexture1D","GL_ARB_framebuffer_object");
	 fn(target1,attachment1,textarget1,texture1,level1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FramebufferTexture2D
#define GL_ALT_FUNDEF_FramebufferTexture2D
typedef void (*PFNGLFRAMEBUFFERTEXTURE2DPROC_ALT)(GLenum,GLenum,GLenum,GLuint,GLint);
static inline void glFramebufferTexture2D(GLenum target1,GLenum attachment1,GLenum textarget1,GLuint texture1,GLint level1)
{
	static PFNGLFRAMEBUFFERTEXTURE2DPROC_ALT fn=(PFNGLFRAMEBUFFERTEXTURE2DPROC_ALT)glaltGetProcAddressExtension("glFramebufferTexture2D","GL_ARB_framebuffer_object");
	 fn(target1,attachment1,textarget1,texture1,level1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FramebufferTexture3D
#define GL_ALT_FUNDEF_FramebufferTexture3D
typedef void (*PFNGLFRAMEBUFFERTEXTURE3DPROC_ALT)(GLenum,GLenum,GLenum,GLuint,GLint,GLint);
static inline void glFramebufferTexture3D(GLenum target1,GLenum attachment1,GLenum textarget1,GLuint texture1,GLint level1,GLint zoffset1)
{
	static PFNGLFRAMEBUFFERTEXTURE3DPROC_ALT fn=(PFNGLFRAMEBUFFERTEXTURE3DPROC_ALT)glaltGetProcAddressExtension("glFramebufferTexture3D","GL_ARB_framebuffer_object");
	 fn(target1,attachment1,textarget1,texture1,level1,zoffset1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FramebufferTextureLayer
#define GL_ALT_FUNDEF_FramebufferTextureLayer
typedef void (*PFNGLFRAMEBUFFERTEXTURELAYERPROC_ALT)(GLenum,GLenum,GLuint,GLint,GLint);
static inline void glFramebufferTextureLayer(GLenum target1,GLenum attachment1,GLuint texture1,GLint level1,GLint layer1)
{
	static PFNGLFRAMEBUFFERTEXTURELAYERPROC_ALT fn=(PFNGLFRAMEBUFFERTEXTURELAYERPROC_ALT)glaltGetProcAddressExtension("glFramebufferTextureLayer","GL_ARB_framebuffer_object");
	 fn(target1,attachment1,texture1,level1,layer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GenFramebuffers
#define GL_ALT_FUNDEF_GenFramebuffers
typedef void (*PFNGLGENFRAMEBUFFERSPROC_ALT)(GLsizei,GLuint *);
static inline void glGenFramebuffers(GLsizei n1,GLuint * framebuffers1)
{
	static PFNGLGENFRAMEBUFFERSPROC_ALT fn=(PFNGLGENFRAMEBUFFERSPROC_ALT)glaltGetProcAddressExtension("glGenFramebuffers","GL_ARB_framebuffer_object");
	 fn(n1,framebuffers1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GenRenderbuffers
#define GL_ALT_FUNDEF_GenRenderbuffers
typedef void (*PFNGLGENRENDERBUFFERSPROC_ALT)(GLsizei,GLuint *);
static inline void glGenRenderbuffers(GLsizei n1,GLuint * renderbuffers1)
{
	static PFNGLGENRENDERBUFFERSPROC_ALT fn=(PFNGLGENRENDERBUFFERSPROC_ALT)glaltGetProcAddressExtension("glGenRenderbuffers","GL_ARB_framebuffer_object");
	 fn(n1,renderbuffers1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GenerateMipmap
#define GL_ALT_FUNDEF_GenerateMipmap
typedef void (*PFNGLGENERATEMIPMAPPROC_ALT)(GLenum);
static inline void glGenerateMipmap(GLenum target1)
{
	static PFNGLGENERATEMIPMAPPROC_ALT fn=(PFNGLGENERATEMIPMAPPROC_ALT)glaltGetProcAddressExtension("glGenerateMipmap","GL_ARB_framebuffer_object");
	 fn(target1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetFramebufferAttachmentParameteriv
#define GL_ALT_FUNDEF_GetFramebufferAttachmentParameteriv
typedef void (*PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC_ALT)(GLenum,GLenum,GLenum,GLint *);
static inline void glGetFramebufferAttachmentParameteriv(GLenum target1,GLenum attachment1,GLenum pname1,GLint * params1)
{
	static PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC_ALT fn=(PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC_ALT)glaltGetProcAddressExtension("glGetFramebufferAttachmentParameteriv","GL_ARB_framebuffer_object");
	 fn(target1,attachment1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetRenderbufferParameteriv
#define GL_ALT_FUNDEF_GetRenderbufferParameteriv
typedef void (*PFNGLGETRENDERBUFFERPARAMETERIVPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetRenderbufferParameteriv(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETRENDERBUFFERPARAMETERIVPROC_ALT fn=(PFNGLGETRENDERBUFFERPARAMETERIVPROC_ALT)glaltGetProcAddressExtension("glGetRenderbufferParameteriv","GL_ARB_framebuffer_object");
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IsFramebuffer
#define GL_ALT_FUNDEF_IsFramebuffer
typedef GLboolean (*PFNGLISFRAMEBUFFERPROC_ALT)(GLuint);
static inline GLboolean glIsFramebuffer(GLuint framebuffer1)
{
	static PFNGLISFRAMEBUFFERPROC_ALT fn=(PFNGLISFRAMEBUFFERPROC_ALT)glaltGetProcAddressExtension("glIsFramebuffer","GL_ARB_framebuffer_object");
	return fn(framebuffer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IsRenderbuffer
#define GL_ALT_FUNDEF_IsRenderbuffer
typedef GLboolean (*PFNGLISRENDERBUFFERPROC_ALT)(GLuint);
static inline GLboolean glIsRenderbuffer(GLuint renderbuffer1)
{
	static PFNGLISRENDERBUFFERPROC_ALT fn=(PFNGLISRENDERBUFFERPROC_ALT)glaltGetProcAddressExtension("glIsRenderbuffer","GL_ARB_framebuffer_object");
	return fn(renderbuffer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_RenderbufferStorage
#define GL_ALT_FUNDEF_RenderbufferStorage
typedef void (*PFNGLRENDERBUFFERSTORAGEPROC_ALT)(GLenum,GLenum,GLsizei,GLsizei);
static inline void glRenderbufferStorage(GLenum target1,GLenum internalformat1,GLsizei width1,GLsizei height1)
{
	static PFNGLRENDERBUFFERSTORAGEPROC_ALT fn=(PFNGLRENDERBUFFERSTORAGEPROC_ALT)glaltGetProcAddressExtension("glRenderbufferStorage","GL_ARB_framebuffer_object");
	 fn(target1,internalformat1,width1,height1);
}
#endif

#ifndef	GL_ALT_FUNDEF_RenderbufferStorageMultisample
#define GL_ALT_FUNDEF_RenderbufferStorageMultisample
typedef void (*PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC_ALT)(GLenum,GLsizei,GLenum,GLsizei,GLsizei);
static inline void glRenderbufferStorageMultisample(GLenum target1,GLsizei samples1,GLenum internalformat1,GLsizei width1,GLsizei height1)
{
	static PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC_ALT fn=(PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC_ALT)glaltGetProcAddressExtension("glRenderbufferStorageMultisample","GL_ARB_framebuffer_object");
	 fn(target1,samples1,internalformat1,width1,height1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_framebuffer_sRGB
#define GL_ARB_framebuffer_sRGB
#ifndef GL_FRAMEBUFFER_SRGB
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#endif //GL_FRAMEBUFFER_SRGB
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_geometry_shader4
#define GL_ARB_geometry_shader4
#ifndef GL_LINES_ADJACENCY_ARB
#define GL_LINES_ADJACENCY_ARB 0x000A
#endif //GL_LINES_ADJACENCY_ARB
#ifndef GL_LINE_STRIP_ADJACENCY_ARB
#define GL_LINE_STRIP_ADJACENCY_ARB 0x000B
#endif //GL_LINE_STRIP_ADJACENCY_ARB
#ifndef GL_TRIANGLES_ADJACENCY_ARB
#define GL_TRIANGLES_ADJACENCY_ARB 0x000C
#endif //GL_TRIANGLES_ADJACENCY_ARB
#ifndef GL_TRIANGLE_STRIP_ADJACENCY_ARB
#define GL_TRIANGLE_STRIP_ADJACENCY_ARB 0x000D
#endif //GL_TRIANGLE_STRIP_ADJACENCY_ARB
#ifndef GL_PROGRAM_POINT_SIZE_ARB
#define GL_PROGRAM_POINT_SIZE_ARB 0x8642
#endif //GL_PROGRAM_POINT_SIZE_ARB
#ifndef GL_MAX_VARYING_COMPONENTS
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#endif //GL_MAX_VARYING_COMPONENTS
#ifndef GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB 0x8C29
#endif //GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB
#ifndef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#endif //GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
#ifndef GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB 0x8DA7
#endif //GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB
#ifndef GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB 0x8DA8
#endif //GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB
#ifndef GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB 0x8DA9
#endif //GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB
#ifndef GL_GEOMETRY_SHADER_ARB
#define GL_GEOMETRY_SHADER_ARB 0x8DD9
#endif //GL_GEOMETRY_SHADER_ARB
#ifndef GL_GEOMETRY_VERTICES_OUT_ARB
#define GL_GEOMETRY_VERTICES_OUT_ARB 0x8DDA
#endif //GL_GEOMETRY_VERTICES_OUT_ARB
#ifndef GL_GEOMETRY_INPUT_TYPE_ARB
#define GL_GEOMETRY_INPUT_TYPE_ARB 0x8DDB
#endif //GL_GEOMETRY_INPUT_TYPE_ARB
#ifndef GL_GEOMETRY_OUTPUT_TYPE_ARB
#define GL_GEOMETRY_OUTPUT_TYPE_ARB 0x8DDC
#endif //GL_GEOMETRY_OUTPUT_TYPE_ARB
#ifndef GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB 0x8DDD
#endif //GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB
#ifndef GL_MAX_VERTEX_VARYING_COMPONENTS_ARB
#define GL_MAX_VERTEX_VARYING_COMPONENTS_ARB 0x8DDE
#endif //GL_MAX_VERTEX_VARYING_COMPONENTS_ARB
#ifndef GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB 0x8DDF
#endif //GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB
#ifndef GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB 0x8DE0
#endif //GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB
#ifndef GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB 0x8DE1
#endif //GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_FramebufferTextureARB
#define GL_ALT_FUNDEF_FramebufferTextureARB
typedef void (*PFNGLFRAMEBUFFERTEXTUREARBPROC_ALT)(GLenum,GLenum,GLuint,GLint);
static inline void glFramebufferTextureARB(GLenum target1,GLenum attachment1,GLuint texture1,GLint level1)
{
	static PFNGLFRAMEBUFFERTEXTUREARBPROC_ALT fn=(PFNGLFRAMEBUFFERTEXTUREARBPROC_ALT)glaltGetProcAddressExtension("glFramebufferTextureARB","GL_ARB_geometry_shader4");
	 fn(target1,attachment1,texture1,level1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_FramebufferTextureFaceARB
#define GL_ALT_FUNDEF_FramebufferTextureFaceARB
typedef void (*PFNGLFRAMEBUFFERTEXTUREFACEARBPROC_ALT)(GLenum,GLenum,GLuint,GLint,GLenum);
static inline void glFramebufferTextureFaceARB(GLenum target1,GLenum attachment1,GLuint texture1,GLint level1,GLenum face1)
{
	static PFNGLFRAMEBUFFERTEXTUREFACEARBPROC_ALT fn=(PFNGLFRAMEBUFFERTEXTUREFACEARBPROC_ALT)glaltGetProcAddressExtension("glFramebufferTextureFaceARB","GL_ARB_geometry_shader4");
	 fn(target1,attachment1,texture1,level1,face1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FramebufferTextureLayerARB
#define GL_ALT_FUNDEF_FramebufferTextureLayerARB
typedef void (*PFNGLFRAMEBUFFERTEXTURELAYERARBPROC_ALT)(GLenum,GLenum,GLuint,GLint,GLint);
static inline void glFramebufferTextureLayerARB(GLenum target1,GLenum attachment1,GLuint texture1,GLint level1,GLint layer1)
{
	static PFNGLFRAMEBUFFERTEXTURELAYERARBPROC_ALT fn=(PFNGLFRAMEBUFFERTEXTURELAYERARBPROC_ALT)glaltGetProcAddressExtension("glFramebufferTextureLayerARB","GL_ARB_geometry_shader4");
	 fn(target1,attachment1,texture1,level1,layer1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramParameteriARB
#define GL_ALT_FUNDEF_ProgramParameteriARB
typedef void (*PFNGLPROGRAMPARAMETERIARBPROC_ALT)(GLuint,GLenum,GLint);
static inline void glProgramParameteriARB(GLuint program1,GLenum pname1,GLint value1)
{
	static PFNGLPROGRAMPARAMETERIARBPROC_ALT fn=(PFNGLPROGRAMPARAMETERIARBPROC_ALT)glaltGetProcAddressExtension("glProgramParameteriARB","GL_ARB_geometry_shader4");
	 fn(program1,pname1,value1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_ARB_get_program_binary
#define GL_ARB_get_program_binary
#ifndef GL_PROGRAM_BINARY_RETRIEVABLE_HINT
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#endif //GL_PROGRAM_BINARY_RETRIEVABLE_HINT
#ifndef GL_PROGRAM_BINARY_LENGTH
#define GL_PROGRAM_BINARY_LENGTH 0x8741
#endif //GL_PROGRAM_BINARY_LENGTH
#ifndef GL_NUM_PROGRAM_BINARY_FORMATS
#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE
#endif //GL_NUM_PROGRAM_BINARY_FORMATS
#ifndef GL_PROGRAM_BINARY_FORMATS
#define GL_PROGRAM_BINARY_FORMATS 0x87FF
#endif //GL_PROGRAM_BINARY_FORMATS
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetProgramBinary
#define GL_ALT_FUNDEF_GetProgramBinary
typedef void (*PFNGLGETPROGRAMBINARYPROC_ALT)(GLuint,GLsizei,GLsizei *,GLenum *,void *);
static inline void glGetProgramBinary(GLuint program1,GLsizei bufSize1,GLsizei * length1,GLenum * binaryFormat1,void * binary1)
{
	static PFNGLGETPROGRAMBINARYPROC_ALT fn=(PFNGLGETPROGRAMBINARYPROC_ALT)glaltGetProcAddressExtension("glGetProgramBinary","GL_ARB_get_program_binary");
	 fn(program1,bufSize1,length1,binaryFormat1,binary1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramBinary
#define GL_ALT_FUNDEF_ProgramBinary
typedef void (*PFNGLPROGRAMBINARYPROC_ALT)(GLuint,GLenum,const void *,GLsizei);
static inline void glProgramBinary(GLuint program1,GLenum binaryFormat1,const void * binary1,GLsizei length1)
{
	static PFNGLPROGRAMBINARYPROC_ALT fn=(PFNGLPROGRAMBINARYPROC_ALT)glaltGetProcAddressExtension("glProgramBinary","GL_ARB_get_program_binary");
	 fn(program1,binaryFormat1,binary1,length1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramParameteri
#define GL_ALT_FUNDEF_ProgramParameteri
typedef void (*PFNGLPROGRAMPARAMETERIPROC_ALT)(GLuint,GLenum,GLint);
static inline void glProgramParameteri(GLuint program1,GLenum pname1,GLint value1)
{
	static PFNGLPROGRAMPARAMETERIPROC_ALT fn=(PFNGLPROGRAMPARAMETERIPROC_ALT)glaltGetProcAddressExtension("glProgramParameteri","GL_ARB_get_program_binary");
	 fn(program1,pname1,value1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_get_texture_sub_image
#define GL_ARB_get_texture_sub_image
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetCompressedTextureSubImage
#define GL_ALT_FUNDEF_GetCompressedTextureSubImage
typedef void (*PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC_ALT)(GLuint,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLsizei,void *);
static inline void glGetCompressedTextureSubImage(GLuint texture1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLsizei width1,GLsizei height1,GLsizei depth1,GLsizei bufSize1,void * pixels1)
{
	static PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC_ALT fn=(PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC_ALT)glaltGetProcAddressExtension("glGetCompressedTextureSubImage","GL_ARB_get_texture_sub_image");
	 fn(texture1,level1,xoffset1,yoffset1,zoffset1,width1,height1,depth1,bufSize1,pixels1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetTextureSubImage
#define GL_ALT_FUNDEF_GetTextureSubImage
typedef void (*PFNGLGETTEXTURESUBIMAGEPROC_ALT)(GLuint,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,GLsizei,void *);
static inline void glGetTextureSubImage(GLuint texture1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLsizei width1,GLsizei height1,GLsizei depth1,GLenum format1,GLenum type1,GLsizei bufSize1,void * pixels1)
{
	static PFNGLGETTEXTURESUBIMAGEPROC_ALT fn=(PFNGLGETTEXTURESUBIMAGEPROC_ALT)glaltGetProcAddressExtension("glGetTextureSubImage","GL_ARB_get_texture_sub_image");
	 fn(texture1,level1,xoffset1,yoffset1,zoffset1,width1,height1,depth1,format1,type1,bufSize1,pixels1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_gpu_shader5
#define GL_ARB_gpu_shader5
#ifndef GL_GEOMETRY_SHADER_INVOCATIONS
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#endif //GL_GEOMETRY_SHADER_INVOCATIONS
#ifndef GL_MAX_GEOMETRY_SHADER_INVOCATIONS
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#endif //GL_MAX_GEOMETRY_SHADER_INVOCATIONS
#ifndef GL_MIN_FRAGMENT_INTERPOLATION_OFFSET
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#endif //GL_MIN_FRAGMENT_INTERPOLATION_OFFSET
#ifndef GL_MAX_FRAGMENT_INTERPOLATION_OFFSET
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#endif //GL_MAX_FRAGMENT_INTERPOLATION_OFFSET
#ifndef GL_FRAGMENT_INTERPOLATION_OFFSET_BITS
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#endif //GL_FRAGMENT_INTERPOLATION_OFFSET_BITS
#ifndef GL_MAX_VERTEX_STREAMS
#define GL_MAX_VERTEX_STREAMS 0x8E71
#endif //GL_MAX_VERTEX_STREAMS
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_gpu_shader_fp64
#define GL_ARB_gpu_shader_fp64
#ifndef GL_DOUBLE
#define GL_DOUBLE 0x140A
#endif //GL_DOUBLE
#ifndef GL_DOUBLE_MAT2
#define GL_DOUBLE_MAT2 0x8F46
#endif //GL_DOUBLE_MAT2
#ifndef GL_DOUBLE_MAT3
#define GL_DOUBLE_MAT3 0x8F47
#endif //GL_DOUBLE_MAT3
#ifndef GL_DOUBLE_MAT4
#define GL_DOUBLE_MAT4 0x8F48
#endif //GL_DOUBLE_MAT4
#ifndef GL_DOUBLE_MAT2x3
#define GL_DOUBLE_MAT2x3 0x8F49
#endif //GL_DOUBLE_MAT2x3
#ifndef GL_DOUBLE_MAT2x4
#define GL_DOUBLE_MAT2x4 0x8F4A
#endif //GL_DOUBLE_MAT2x4
#ifndef GL_DOUBLE_MAT3x2
#define GL_DOUBLE_MAT3x2 0x8F4B
#endif //GL_DOUBLE_MAT3x2
#ifndef GL_DOUBLE_MAT3x4
#define GL_DOUBLE_MAT3x4 0x8F4C
#endif //GL_DOUBLE_MAT3x4
#ifndef GL_DOUBLE_MAT4x2
#define GL_DOUBLE_MAT4x2 0x8F4D
#endif //GL_DOUBLE_MAT4x2
#ifndef GL_DOUBLE_MAT4x3
#define GL_DOUBLE_MAT4x3 0x8F4E
#endif //GL_DOUBLE_MAT4x3
#ifndef GL_DOUBLE_VEC2
#define GL_DOUBLE_VEC2 0x8FFC
#endif //GL_DOUBLE_VEC2
#ifndef GL_DOUBLE_VEC3
#define GL_DOUBLE_VEC3 0x8FFD
#endif //GL_DOUBLE_VEC3
#ifndef GL_DOUBLE_VEC4
#define GL_DOUBLE_VEC4 0x8FFE
#endif //GL_DOUBLE_VEC4
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetUniformdv
#define GL_ALT_FUNDEF_GetUniformdv
typedef void (*PFNGLGETUNIFORMDVPROC_ALT)(GLuint,GLint,GLdouble *);
static inline void glGetUniformdv(GLuint program1,GLint location1,GLdouble * params1)
{
	static PFNGLGETUNIFORMDVPROC_ALT fn=(PFNGLGETUNIFORMDVPROC_ALT)glaltGetProcAddressExtension("glGetUniformdv","GL_ARB_gpu_shader_fp64");
	 fn(program1,location1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform1d
#define GL_ALT_FUNDEF_Uniform1d
typedef void (*PFNGLUNIFORM1DPROC_ALT)(GLint,GLdouble);
static inline void glUniform1d(GLint location1,GLdouble x1)
{
	static PFNGLUNIFORM1DPROC_ALT fn=(PFNGLUNIFORM1DPROC_ALT)glaltGetProcAddressExtension("glUniform1d","GL_ARB_gpu_shader_fp64");
	 fn(location1,x1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform1dv
#define GL_ALT_FUNDEF_Uniform1dv
typedef void (*PFNGLUNIFORM1DVPROC_ALT)(GLint,GLsizei,const GLdouble *);
static inline void glUniform1dv(GLint location1,GLsizei count1,const GLdouble * value1)
{
	static PFNGLUNIFORM1DVPROC_ALT fn=(PFNGLUNIFORM1DVPROC_ALT)glaltGetProcAddressExtension("glUniform1dv","GL_ARB_gpu_shader_fp64");
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform2d
#define GL_ALT_FUNDEF_Uniform2d
typedef void (*PFNGLUNIFORM2DPROC_ALT)(GLint,GLdouble,GLdouble);
static inline void glUniform2d(GLint location1,GLdouble x1,GLdouble y1)
{
	static PFNGLUNIFORM2DPROC_ALT fn=(PFNGLUNIFORM2DPROC_ALT)glaltGetProcAddressExtension("glUniform2d","GL_ARB_gpu_shader_fp64");
	 fn(location1,x1,y1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform2dv
#define GL_ALT_FUNDEF_Uniform2dv
typedef void (*PFNGLUNIFORM2DVPROC_ALT)(GLint,GLsizei,const GLdouble *);
static inline void glUniform2dv(GLint location1,GLsizei count1,const GLdouble * value1)
{
	static PFNGLUNIFORM2DVPROC_ALT fn=(PFNGLUNIFORM2DVPROC_ALT)glaltGetProcAddressExtension("glUniform2dv","GL_ARB_gpu_shader_fp64");
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform3d
#define GL_ALT_FUNDEF_Uniform3d
typedef void (*PFNGLUNIFORM3DPROC_ALT)(GLint,GLdouble,GLdouble,GLdouble);
static inline void glUniform3d(GLint location1,GLdouble x1,GLdouble y1,GLdouble z1)
{
	static PFNGLUNIFORM3DPROC_ALT fn=(PFNGLUNIFORM3DPROC_ALT)glaltGetProcAddressExtension("glUniform3d","GL_ARB_gpu_shader_fp64");
	 fn(location1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform3dv
#define GL_ALT_FUNDEF_Uniform3dv
typedef void (*PFNGLUNIFORM3DVPROC_ALT)(GLint,GLsizei,const GLdouble *);
static inline void glUniform3dv(GLint location1,GLsizei count1,const GLdouble * value1)
{
	static PFNGLUNIFORM3DVPROC_ALT fn=(PFNGLUNIFORM3DVPROC_ALT)glaltGetProcAddressExtension("glUniform3dv","GL_ARB_gpu_shader_fp64");
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform4d
#define GL_ALT_FUNDEF_Uniform4d
typedef void (*PFNGLUNIFORM4DPROC_ALT)(GLint,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void glUniform4d(GLint location1,GLdouble x1,GLdouble y1,GLdouble z1,GLdouble w1)
{
	static PFNGLUNIFORM4DPROC_ALT fn=(PFNGLUNIFORM4DPROC_ALT)glaltGetProcAddressExtension("glUniform4d","GL_ARB_gpu_shader_fp64");
	 fn(location1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform4dv
#define GL_ALT_FUNDEF_Uniform4dv
typedef void (*PFNGLUNIFORM4DVPROC_ALT)(GLint,GLsizei,const GLdouble *);
static inline void glUniform4dv(GLint location1,GLsizei count1,const GLdouble * value1)
{
	static PFNGLUNIFORM4DVPROC_ALT fn=(PFNGLUNIFORM4DVPROC_ALT)glaltGetProcAddressExtension("glUniform4dv","GL_ARB_gpu_shader_fp64");
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_UniformMatrix2dv
#define GL_ALT_FUNDEF_UniformMatrix2dv
typedef void (*PFNGLUNIFORMMATRIX2DVPROC_ALT)(GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glUniformMatrix2dv(GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLUNIFORMMATRIX2DVPROC_ALT fn=(PFNGLUNIFORMMATRIX2DVPROC_ALT)glaltGetProcAddressExtension("glUniformMatrix2dv","GL_ARB_gpu_shader_fp64");
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_UniformMatrix2x3dv
#define GL_ALT_FUNDEF_UniformMatrix2x3dv
typedef void (*PFNGLUNIFORMMATRIX2X3DVPROC_ALT)(GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glUniformMatrix2x3dv(GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLUNIFORMMATRIX2X3DVPROC_ALT fn=(PFNGLUNIFORMMATRIX2X3DVPROC_ALT)glaltGetProcAddressExtension("glUniformMatrix2x3dv","GL_ARB_gpu_shader_fp64");
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_UniformMatrix2x4dv
#define GL_ALT_FUNDEF_UniformMatrix2x4dv
typedef void (*PFNGLUNIFORMMATRIX2X4DVPROC_ALT)(GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glUniformMatrix2x4dv(GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLUNIFORMMATRIX2X4DVPROC_ALT fn=(PFNGLUNIFORMMATRIX2X4DVPROC_ALT)glaltGetProcAddressExtension("glUniformMatrix2x4dv","GL_ARB_gpu_shader_fp64");
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_UniformMatrix3dv
#define GL_ALT_FUNDEF_UniformMatrix3dv
typedef void (*PFNGLUNIFORMMATRIX3DVPROC_ALT)(GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glUniformMatrix3dv(GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLUNIFORMMATRIX3DVPROC_ALT fn=(PFNGLUNIFORMMATRIX3DVPROC_ALT)glaltGetProcAddressExtension("glUniformMatrix3dv","GL_ARB_gpu_shader_fp64");
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_UniformMatrix3x2dv
#define GL_ALT_FUNDEF_UniformMatrix3x2dv
typedef void (*PFNGLUNIFORMMATRIX3X2DVPROC_ALT)(GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glUniformMatrix3x2dv(GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLUNIFORMMATRIX3X2DVPROC_ALT fn=(PFNGLUNIFORMMATRIX3X2DVPROC_ALT)glaltGetProcAddressExtension("glUniformMatrix3x2dv","GL_ARB_gpu_shader_fp64");
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_UniformMatrix3x4dv
#define GL_ALT_FUNDEF_UniformMatrix3x4dv
typedef void (*PFNGLUNIFORMMATRIX3X4DVPROC_ALT)(GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glUniformMatrix3x4dv(GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLUNIFORMMATRIX3X4DVPROC_ALT fn=(PFNGLUNIFORMMATRIX3X4DVPROC_ALT)glaltGetProcAddressExtension("glUniformMatrix3x4dv","GL_ARB_gpu_shader_fp64");
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_UniformMatrix4dv
#define GL_ALT_FUNDEF_UniformMatrix4dv
typedef void (*PFNGLUNIFORMMATRIX4DVPROC_ALT)(GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glUniformMatrix4dv(GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLUNIFORMMATRIX4DVPROC_ALT fn=(PFNGLUNIFORMMATRIX4DVPROC_ALT)glaltGetProcAddressExtension("glUniformMatrix4dv","GL_ARB_gpu_shader_fp64");
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_UniformMatrix4x2dv
#define GL_ALT_FUNDEF_UniformMatrix4x2dv
typedef void (*PFNGLUNIFORMMATRIX4X2DVPROC_ALT)(GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glUniformMatrix4x2dv(GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLUNIFORMMATRIX4X2DVPROC_ALT fn=(PFNGLUNIFORMMATRIX4X2DVPROC_ALT)glaltGetProcAddressExtension("glUniformMatrix4x2dv","GL_ARB_gpu_shader_fp64");
	 fn(location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_UniformMatrix4x3dv
#define GL_ALT_FUNDEF_UniformMatrix4x3dv
typedef void (*PFNGLUNIFORMMATRIX4X3DVPROC_ALT)(GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glUniformMatrix4x3dv(GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLUNIFORMMATRIX4X3DVPROC_ALT fn=(PFNGLUNIFORMMATRIX4X3DVPROC_ALT)glaltGetProcAddressExtension("glUniformMatrix4x3dv","GL_ARB_gpu_shader_fp64");
	 fn(location1,count1,transpose1,value1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_half_float_pixel
#define GL_ARB_half_float_pixel
#ifndef GL_HALF_FLOAT_ARB
#define GL_HALF_FLOAT_ARB 0x140B
#endif //GL_HALF_FLOAT_ARB
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_half_float_vertex
#define GL_ARB_half_float_vertex
#ifndef GL_HALF_FLOAT
#define GL_HALF_FLOAT 0x140B
#endif //GL_HALF_FLOAT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_imaging
#define GL_ARB_imaging
#ifndef GL_CONSTANT_COLOR
#define GL_CONSTANT_COLOR 0x8001
#endif //GL_CONSTANT_COLOR
#ifndef GL_ONE_MINUS_CONSTANT_COLOR
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#endif //GL_ONE_MINUS_CONSTANT_COLOR
#ifndef GL_CONSTANT_ALPHA
#define GL_CONSTANT_ALPHA 0x8003
#endif //GL_CONSTANT_ALPHA
#ifndef GL_ONE_MINUS_CONSTANT_ALPHA
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#endif //GL_ONE_MINUS_CONSTANT_ALPHA
#ifndef GL_BLEND_COLOR
#define GL_BLEND_COLOR 0x8005
#endif //GL_BLEND_COLOR
#ifndef GL_FUNC_ADD
#define GL_FUNC_ADD 0x8006
#endif //GL_FUNC_ADD
#ifndef GL_MIN
#define GL_MIN 0x8007
#endif //GL_MIN
#ifndef GL_MAX
#define GL_MAX 0x8008
#endif //GL_MAX
#ifndef GL_BLEND_EQUATION
#define GL_BLEND_EQUATION 0x8009
#endif //GL_BLEND_EQUATION
#ifndef GL_FUNC_SUBTRACT
#define GL_FUNC_SUBTRACT 0x800A
#endif //GL_FUNC_SUBTRACT
#ifndef GL_FUNC_REVERSE_SUBTRACT
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#endif //GL_FUNC_REVERSE_SUBTRACT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BlendColor
#define GL_ALT_FUNDEF_BlendColor
typedef void (*PFNGLBLENDCOLORPROC_ALT)(GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glBlendColor(GLfloat red1,GLfloat green1,GLfloat blue1,GLfloat alpha1)
{
	static PFNGLBLENDCOLORPROC_ALT fn=(PFNGLBLENDCOLORPROC_ALT)glaltGetProcAddressExtension("glBlendColor","GL_ARB_imaging");
	 fn(red1,green1,blue1,alpha1);
}
#endif

#ifndef	GL_ALT_FUNDEF_BlendEquation
#define GL_ALT_FUNDEF_BlendEquation
typedef void (*PFNGLBLENDEQUATIONPROC_ALT)(GLenum);
static inline void glBlendEquation(GLenum mode1)
{
	static PFNGLBLENDEQUATIONPROC_ALT fn=(PFNGLBLENDEQUATIONPROC_ALT)glaltGetProcAddressExtension("glBlendEquation","GL_ARB_imaging");
	 fn(mode1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_indirect_parameters
#define GL_ARB_indirect_parameters
#ifndef GL_PARAMETER_BUFFER_ARB
#define GL_PARAMETER_BUFFER_ARB 0x80EE
#endif //GL_PARAMETER_BUFFER_ARB
#ifndef GL_PARAMETER_BUFFER_BINDING_ARB
#define GL_PARAMETER_BUFFER_BINDING_ARB 0x80EF
#endif //GL_PARAMETER_BUFFER_BINDING_ARB
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_MultiDrawArraysIndirectCountARB
#define GL_ALT_FUNDEF_MultiDrawArraysIndirectCountARB
typedef void (*PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC_ALT)(GLenum,GLintptr,GLintptr,GLsizei,GLsizei);
static inline void glMultiDrawArraysIndirectCountARB(GLenum mode1,GLintptr indirect1,GLintptr drawcount1,GLsizei maxdrawcount1,GLsizei stride1)
{
	static PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC_ALT fn=(PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC_ALT)glaltGetProcAddressExtension("glMultiDrawArraysIndirectCountARB","GL_ARB_indirect_parameters");
	 fn(mode1,indirect1,drawcount1,maxdrawcount1,stride1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiDrawElementsIndirectCountARB
#define GL_ALT_FUNDEF_MultiDrawElementsIndirectCountARB
typedef void (*PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC_ALT)(GLenum,GLenum,GLintptr,GLintptr,GLsizei,GLsizei);
static inline void glMultiDrawElementsIndirectCountARB(GLenum mode1,GLenum type1,GLintptr indirect1,GLintptr drawcount1,GLsizei maxdrawcount1,GLsizei stride1)
{
	static PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC_ALT fn=(PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC_ALT)glaltGetProcAddressExtension("glMultiDrawElementsIndirectCountARB","GL_ARB_indirect_parameters");
	 fn(mode1,type1,indirect1,drawcount1,maxdrawcount1,stride1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_instanced_arrays
#define GL_ARB_instanced_arrays
#ifndef GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB 0x88FE
#endif //GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_VertexAttribDivisorARB
#define GL_ALT_FUNDEF_VertexAttribDivisorARB
typedef void (*PFNGLVERTEXATTRIBDIVISORARBPROC_ALT)(GLuint,GLuint);
static inline void glVertexAttribDivisorARB(GLuint index1,GLuint divisor1)
{
	static PFNGLVERTEXATTRIBDIVISORARBPROC_ALT fn=(PFNGLVERTEXATTRIBDIVISORARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttribDivisorARB","GL_ARB_instanced_arrays");
	 fn(index1,divisor1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_ARB_internalformat_query
#define GL_ARB_internalformat_query
#ifndef GL_NUM_SAMPLE_COUNTS
#define GL_NUM_SAMPLE_COUNTS 0x9380
#endif //GL_NUM_SAMPLE_COUNTS
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetInternalformativ
#define GL_ALT_FUNDEF_GetInternalformativ
typedef void (*PFNGLGETINTERNALFORMATIVPROC_ALT)(GLenum,GLenum,GLenum,GLsizei,GLint *);
static inline void glGetInternalformativ(GLenum target1,GLenum internalformat1,GLenum pname1,GLsizei bufSize1,GLint * params1)
{
	static PFNGLGETINTERNALFORMATIVPROC_ALT fn=(PFNGLGETINTERNALFORMATIVPROC_ALT)glaltGetProcAddressExtension("glGetInternalformativ","GL_ARB_internalformat_query");
	 fn(target1,internalformat1,pname1,bufSize1,params1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_internalformat_query2
#define GL_ARB_internalformat_query2
#ifndef GL_TEXTURE_1D
#define GL_TEXTURE_1D 0x0DE0
#endif //GL_TEXTURE_1D
#ifndef GL_TEXTURE_2D
#define GL_TEXTURE_2D 0x0DE1
#endif //GL_TEXTURE_2D
#ifndef GL_TEXTURE_3D
#define GL_TEXTURE_3D 0x806F
#endif //GL_TEXTURE_3D
#ifndef GL_SAMPLES
#define GL_SAMPLES 0x80A9
#endif //GL_SAMPLES
#ifndef GL_INTERNALFORMAT_SUPPORTED
#define GL_INTERNALFORMAT_SUPPORTED 0x826F
#endif //GL_INTERNALFORMAT_SUPPORTED
#ifndef GL_INTERNALFORMAT_PREFERRED
#define GL_INTERNALFORMAT_PREFERRED 0x8270
#endif //GL_INTERNALFORMAT_PREFERRED
#ifndef GL_INTERNALFORMAT_RED_SIZE
#define GL_INTERNALFORMAT_RED_SIZE 0x8271
#endif //GL_INTERNALFORMAT_RED_SIZE
#ifndef GL_INTERNALFORMAT_GREEN_SIZE
#define GL_INTERNALFORMAT_GREEN_SIZE 0x8272
#endif //GL_INTERNALFORMAT_GREEN_SIZE
#ifndef GL_INTERNALFORMAT_BLUE_SIZE
#define GL_INTERNALFORMAT_BLUE_SIZE 0x8273
#endif //GL_INTERNALFORMAT_BLUE_SIZE
#ifndef GL_INTERNALFORMAT_ALPHA_SIZE
#define GL_INTERNALFORMAT_ALPHA_SIZE 0x8274
#endif //GL_INTERNALFORMAT_ALPHA_SIZE
#ifndef GL_INTERNALFORMAT_DEPTH_SIZE
#define GL_INTERNALFORMAT_DEPTH_SIZE 0x8275
#endif //GL_INTERNALFORMAT_DEPTH_SIZE
#ifndef GL_INTERNALFORMAT_STENCIL_SIZE
#define GL_INTERNALFORMAT_STENCIL_SIZE 0x8276
#endif //GL_INTERNALFORMAT_STENCIL_SIZE
#ifndef GL_INTERNALFORMAT_SHARED_SIZE
#define GL_INTERNALFORMAT_SHARED_SIZE 0x8277
#endif //GL_INTERNALFORMAT_SHARED_SIZE
#ifndef GL_INTERNALFORMAT_RED_TYPE
#define GL_INTERNALFORMAT_RED_TYPE 0x8278
#endif //GL_INTERNALFORMAT_RED_TYPE
#ifndef GL_INTERNALFORMAT_GREEN_TYPE
#define GL_INTERNALFORMAT_GREEN_TYPE 0x8279
#endif //GL_INTERNALFORMAT_GREEN_TYPE
#ifndef GL_INTERNALFORMAT_BLUE_TYPE
#define GL_INTERNALFORMAT_BLUE_TYPE 0x827A
#endif //GL_INTERNALFORMAT_BLUE_TYPE
#ifndef GL_INTERNALFORMAT_ALPHA_TYPE
#define GL_INTERNALFORMAT_ALPHA_TYPE 0x827B
#endif //GL_INTERNALFORMAT_ALPHA_TYPE
#ifndef GL_INTERNALFORMAT_DEPTH_TYPE
#define GL_INTERNALFORMAT_DEPTH_TYPE 0x827C
#endif //GL_INTERNALFORMAT_DEPTH_TYPE
#ifndef GL_INTERNALFORMAT_STENCIL_TYPE
#define GL_INTERNALFORMAT_STENCIL_TYPE 0x827D
#endif //GL_INTERNALFORMAT_STENCIL_TYPE
#ifndef GL_MAX_WIDTH
#define GL_MAX_WIDTH 0x827E
#endif //GL_MAX_WIDTH
#ifndef GL_MAX_HEIGHT
#define GL_MAX_HEIGHT 0x827F
#endif //GL_MAX_HEIGHT
#ifndef GL_MAX_DEPTH
#define GL_MAX_DEPTH 0x8280
#endif //GL_MAX_DEPTH
#ifndef GL_MAX_LAYERS
#define GL_MAX_LAYERS 0x8281
#endif //GL_MAX_LAYERS
#ifndef GL_MAX_COMBINED_DIMENSIONS
#define GL_MAX_COMBINED_DIMENSIONS 0x8282
#endif //GL_MAX_COMBINED_DIMENSIONS
#ifndef GL_COLOR_COMPONENTS
#define GL_COLOR_COMPONENTS 0x8283
#endif //GL_COLOR_COMPONENTS
#ifndef GL_DEPTH_COMPONENTS
#define GL_DEPTH_COMPONENTS 0x8284
#endif //GL_DEPTH_COMPONENTS
#ifndef GL_STENCIL_COMPONENTS
#define GL_STENCIL_COMPONENTS 0x8285
#endif //GL_STENCIL_COMPONENTS
#ifndef GL_COLOR_RENDERABLE
#define GL_COLOR_RENDERABLE 0x8286
#endif //GL_COLOR_RENDERABLE
#ifndef GL_DEPTH_RENDERABLE
#define GL_DEPTH_RENDERABLE 0x8287
#endif //GL_DEPTH_RENDERABLE
#ifndef GL_STENCIL_RENDERABLE
#define GL_STENCIL_RENDERABLE 0x8288
#endif //GL_STENCIL_RENDERABLE
#ifndef GL_FRAMEBUFFER_RENDERABLE
#define GL_FRAMEBUFFER_RENDERABLE 0x8289
#endif //GL_FRAMEBUFFER_RENDERABLE
#ifndef GL_FRAMEBUFFER_RENDERABLE_LAYERED
#define GL_FRAMEBUFFER_RENDERABLE_LAYERED 0x828A
#endif //GL_FRAMEBUFFER_RENDERABLE_LAYERED
#ifndef GL_FRAMEBUFFER_BLEND
#define GL_FRAMEBUFFER_BLEND 0x828B
#endif //GL_FRAMEBUFFER_BLEND
#ifndef GL_READ_PIXELS
#define GL_READ_PIXELS 0x828C
#endif //GL_READ_PIXELS
#ifndef GL_READ_PIXELS_FORMAT
#define GL_READ_PIXELS_FORMAT 0x828D
#endif //GL_READ_PIXELS_FORMAT
#ifndef GL_READ_PIXELS_TYPE
#define GL_READ_PIXELS_TYPE 0x828E
#endif //GL_READ_PIXELS_TYPE
#ifndef GL_TEXTURE_IMAGE_FORMAT
#define GL_TEXTURE_IMAGE_FORMAT 0x828F
#endif //GL_TEXTURE_IMAGE_FORMAT
#ifndef GL_TEXTURE_IMAGE_TYPE
#define GL_TEXTURE_IMAGE_TYPE 0x8290
#endif //GL_TEXTURE_IMAGE_TYPE
#ifndef GL_GET_TEXTURE_IMAGE_FORMAT
#define GL_GET_TEXTURE_IMAGE_FORMAT 0x8291
#endif //GL_GET_TEXTURE_IMAGE_FORMAT
#ifndef GL_GET_TEXTURE_IMAGE_TYPE
#define GL_GET_TEXTURE_IMAGE_TYPE 0x8292
#endif //GL_GET_TEXTURE_IMAGE_TYPE
#ifndef GL_MIPMAP
#define GL_MIPMAP 0x8293
#endif //GL_MIPMAP
#ifndef GL_MANUAL_GENERATE_MIPMAP
#define GL_MANUAL_GENERATE_MIPMAP 0x8294
#endif //GL_MANUAL_GENERATE_MIPMAP
#ifndef GL_AUTO_GENERATE_MIPMAP
#define GL_AUTO_GENERATE_MIPMAP 0x8295
#endif //GL_AUTO_GENERATE_MIPMAP
#ifndef GL_COLOR_ENCODING
#define GL_COLOR_ENCODING 0x8296
#endif //GL_COLOR_ENCODING
#ifndef GL_SRGB_READ
#define GL_SRGB_READ 0x8297
#endif //GL_SRGB_READ
#ifndef GL_SRGB_WRITE
#define GL_SRGB_WRITE 0x8298
#endif //GL_SRGB_WRITE
#ifndef GL_SRGB_DECODE_ARB
#define GL_SRGB_DECODE_ARB 0x8299
#endif //GL_SRGB_DECODE_ARB
#ifndef GL_FILTER
#define GL_FILTER 0x829A
#endif //GL_FILTER
#ifndef GL_VERTEX_TEXTURE
#define GL_VERTEX_TEXTURE 0x829B
#endif //GL_VERTEX_TEXTURE
#ifndef GL_TESS_CONTROL_TEXTURE
#define GL_TESS_CONTROL_TEXTURE 0x829C
#endif //GL_TESS_CONTROL_TEXTURE
#ifndef GL_TESS_EVALUATION_TEXTURE
#define GL_TESS_EVALUATION_TEXTURE 0x829D
#endif //GL_TESS_EVALUATION_TEXTURE
#ifndef GL_GEOMETRY_TEXTURE
#define GL_GEOMETRY_TEXTURE 0x829E
#endif //GL_GEOMETRY_TEXTURE
#ifndef GL_FRAGMENT_TEXTURE
#define GL_FRAGMENT_TEXTURE 0x829F
#endif //GL_FRAGMENT_TEXTURE
#ifndef GL_COMPUTE_TEXTURE
#define GL_COMPUTE_TEXTURE 0x82A0
#endif //GL_COMPUTE_TEXTURE
#ifndef GL_TEXTURE_SHADOW
#define GL_TEXTURE_SHADOW 0x82A1
#endif //GL_TEXTURE_SHADOW
#ifndef GL_TEXTURE_GATHER
#define GL_TEXTURE_GATHER 0x82A2
#endif //GL_TEXTURE_GATHER
#ifndef GL_TEXTURE_GATHER_SHADOW
#define GL_TEXTURE_GATHER_SHADOW 0x82A3
#endif //GL_TEXTURE_GATHER_SHADOW
#ifndef GL_SHADER_IMAGE_LOAD
#define GL_SHADER_IMAGE_LOAD 0x82A4
#endif //GL_SHADER_IMAGE_LOAD
#ifndef GL_SHADER_IMAGE_STORE
#define GL_SHADER_IMAGE_STORE 0x82A5
#endif //GL_SHADER_IMAGE_STORE
#ifndef GL_SHADER_IMAGE_ATOMIC
#define GL_SHADER_IMAGE_ATOMIC 0x82A6
#endif //GL_SHADER_IMAGE_ATOMIC
#ifndef GL_IMAGE_TEXEL_SIZE
#define GL_IMAGE_TEXEL_SIZE 0x82A7
#endif //GL_IMAGE_TEXEL_SIZE
#ifndef GL_IMAGE_COMPATIBILITY_CLASS
#define GL_IMAGE_COMPATIBILITY_CLASS 0x82A8
#endif //GL_IMAGE_COMPATIBILITY_CLASS
#ifndef GL_IMAGE_PIXEL_FORMAT
#define GL_IMAGE_PIXEL_FORMAT 0x82A9
#endif //GL_IMAGE_PIXEL_FORMAT
#ifndef GL_IMAGE_PIXEL_TYPE
#define GL_IMAGE_PIXEL_TYPE 0x82AA
#endif //GL_IMAGE_PIXEL_TYPE
#ifndef GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST 0x82AC
#endif //GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST
#ifndef GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST 0x82AD
#endif //GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST
#ifndef GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE 0x82AE
#endif //GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE
#ifndef GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE 0x82AF
#endif //GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE
#ifndef GL_TEXTURE_COMPRESSED_BLOCK_WIDTH
#define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH 0x82B1
#endif //GL_TEXTURE_COMPRESSED_BLOCK_WIDTH
#ifndef GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT
#define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT 0x82B2
#endif //GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT
#ifndef GL_TEXTURE_COMPRESSED_BLOCK_SIZE
#define GL_TEXTURE_COMPRESSED_BLOCK_SIZE 0x82B3
#endif //GL_TEXTURE_COMPRESSED_BLOCK_SIZE
#ifndef GL_CLEAR_BUFFER
#define GL_CLEAR_BUFFER 0x82B4
#endif //GL_CLEAR_BUFFER
#ifndef GL_TEXTURE_VIEW
#define GL_TEXTURE_VIEW 0x82B5
#endif //GL_TEXTURE_VIEW
#ifndef GL_VIEW_COMPATIBILITY_CLASS
#define GL_VIEW_COMPATIBILITY_CLASS 0x82B6
#endif //GL_VIEW_COMPATIBILITY_CLASS
#ifndef GL_FULL_SUPPORT
#define GL_FULL_SUPPORT 0x82B7
#endif //GL_FULL_SUPPORT
#ifndef GL_CAVEAT_SUPPORT
#define GL_CAVEAT_SUPPORT 0x82B8
#endif //GL_CAVEAT_SUPPORT
#ifndef GL_IMAGE_CLASS_4_X_32
#define GL_IMAGE_CLASS_4_X_32 0x82B9
#endif //GL_IMAGE_CLASS_4_X_32
#ifndef GL_IMAGE_CLASS_2_X_32
#define GL_IMAGE_CLASS_2_X_32 0x82BA
#endif //GL_IMAGE_CLASS_2_X_32
#ifndef GL_IMAGE_CLASS_1_X_32
#define GL_IMAGE_CLASS_1_X_32 0x82BB
#endif //GL_IMAGE_CLASS_1_X_32
#ifndef GL_IMAGE_CLASS_4_X_16
#define GL_IMAGE_CLASS_4_X_16 0x82BC
#endif //GL_IMAGE_CLASS_4_X_16
#ifndef GL_IMAGE_CLASS_2_X_16
#define GL_IMAGE_CLASS_2_X_16 0x82BD
#endif //GL_IMAGE_CLASS_2_X_16
#ifndef GL_IMAGE_CLASS_1_X_16
#define GL_IMAGE_CLASS_1_X_16 0x82BE
#endif //GL_IMAGE_CLASS_1_X_16
#ifndef GL_IMAGE_CLASS_4_X_8
#define GL_IMAGE_CLASS_4_X_8 0x82BF
#endif //GL_IMAGE_CLASS_4_X_8
#ifndef GL_IMAGE_CLASS_2_X_8
#define GL_IMAGE_CLASS_2_X_8 0x82C0
#endif //GL_IMAGE_CLASS_2_X_8
#ifndef GL_IMAGE_CLASS_1_X_8
#define GL_IMAGE_CLASS_1_X_8 0x82C1
#endif //GL_IMAGE_CLASS_1_X_8
#ifndef GL_IMAGE_CLASS_11_11_10
#define GL_IMAGE_CLASS_11_11_10 0x82C2
#endif //GL_IMAGE_CLASS_11_11_10
#ifndef GL_IMAGE_CLASS_10_10_10_2
#define GL_IMAGE_CLASS_10_10_10_2 0x82C3
#endif //GL_IMAGE_CLASS_10_10_10_2
#ifndef GL_VIEW_CLASS_128_BITS
#define GL_VIEW_CLASS_128_BITS 0x82C4
#endif //GL_VIEW_CLASS_128_BITS
#ifndef GL_VIEW_CLASS_96_BITS
#define GL_VIEW_CLASS_96_BITS 0x82C5
#endif //GL_VIEW_CLASS_96_BITS
#ifndef GL_VIEW_CLASS_64_BITS
#define GL_VIEW_CLASS_64_BITS 0x82C6
#endif //GL_VIEW_CLASS_64_BITS
#ifndef GL_VIEW_CLASS_48_BITS
#define GL_VIEW_CLASS_48_BITS 0x82C7
#endif //GL_VIEW_CLASS_48_BITS
#ifndef GL_VIEW_CLASS_32_BITS
#define GL_VIEW_CLASS_32_BITS 0x82C8
#endif //GL_VIEW_CLASS_32_BITS
#ifndef GL_VIEW_CLASS_24_BITS
#define GL_VIEW_CLASS_24_BITS 0x82C9
#endif //GL_VIEW_CLASS_24_BITS
#ifndef GL_VIEW_CLASS_16_BITS
#define GL_VIEW_CLASS_16_BITS 0x82CA
#endif //GL_VIEW_CLASS_16_BITS
#ifndef GL_VIEW_CLASS_8_BITS
#define GL_VIEW_CLASS_8_BITS 0x82CB
#endif //GL_VIEW_CLASS_8_BITS
#ifndef GL_VIEW_CLASS_S3TC_DXT1_RGB
#define GL_VIEW_CLASS_S3TC_DXT1_RGB 0x82CC
#endif //GL_VIEW_CLASS_S3TC_DXT1_RGB
#ifndef GL_VIEW_CLASS_S3TC_DXT1_RGBA
#define GL_VIEW_CLASS_S3TC_DXT1_RGBA 0x82CD
#endif //GL_VIEW_CLASS_S3TC_DXT1_RGBA
#ifndef GL_VIEW_CLASS_S3TC_DXT3_RGBA
#define GL_VIEW_CLASS_S3TC_DXT3_RGBA 0x82CE
#endif //GL_VIEW_CLASS_S3TC_DXT3_RGBA
#ifndef GL_VIEW_CLASS_S3TC_DXT5_RGBA
#define GL_VIEW_CLASS_S3TC_DXT5_RGBA 0x82CF
#endif //GL_VIEW_CLASS_S3TC_DXT5_RGBA
#ifndef GL_VIEW_CLASS_RGTC1_RED
#define GL_VIEW_CLASS_RGTC1_RED 0x82D0
#endif //GL_VIEW_CLASS_RGTC1_RED
#ifndef GL_VIEW_CLASS_RGTC2_RG
#define GL_VIEW_CLASS_RGTC2_RG 0x82D1
#endif //GL_VIEW_CLASS_RGTC2_RG
#ifndef GL_VIEW_CLASS_BPTC_UNORM
#define GL_VIEW_CLASS_BPTC_UNORM 0x82D2
#endif //GL_VIEW_CLASS_BPTC_UNORM
#ifndef GL_VIEW_CLASS_BPTC_FLOAT
#define GL_VIEW_CLASS_BPTC_FLOAT 0x82D3
#endif //GL_VIEW_CLASS_BPTC_FLOAT
#ifndef GL_TEXTURE_RECTANGLE
#define GL_TEXTURE_RECTANGLE 0x84F5
#endif //GL_TEXTURE_RECTANGLE
#ifndef GL_TEXTURE_CUBE_MAP
#define GL_TEXTURE_CUBE_MAP 0x8513
#endif //GL_TEXTURE_CUBE_MAP
#ifndef GL_TEXTURE_COMPRESSED
#define GL_TEXTURE_COMPRESSED 0x86A1
#endif //GL_TEXTURE_COMPRESSED
#ifndef GL_TEXTURE_1D_ARRAY
#define GL_TEXTURE_1D_ARRAY 0x8C18
#endif //GL_TEXTURE_1D_ARRAY
#ifndef GL_TEXTURE_2D_ARRAY
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#endif //GL_TEXTURE_2D_ARRAY
#ifndef GL_TEXTURE_BUFFER
#define GL_TEXTURE_BUFFER 0x8C2A
#endif //GL_TEXTURE_BUFFER
#ifndef GL_RENDERBUFFER
#define GL_RENDERBUFFER 0x8D41
#endif //GL_RENDERBUFFER
#ifndef GL_TEXTURE_CUBE_MAP_ARRAY
#define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009
#endif //GL_TEXTURE_CUBE_MAP_ARRAY
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#endif //GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#ifndef GL_TEXTURE_2D_MULTISAMPLE
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#endif //GL_TEXTURE_2D_MULTISAMPLE
#ifndef GL_TEXTURE_2D_MULTISAMPLE_ARRAY
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#endif //GL_TEXTURE_2D_MULTISAMPLE_ARRAY
#ifndef GL_NUM_SAMPLE_COUNTS
#define GL_NUM_SAMPLE_COUNTS 0x9380
#endif //GL_NUM_SAMPLE_COUNTS
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetInternalformati64v
#define GL_ALT_FUNDEF_GetInternalformati64v
typedef void (*PFNGLGETINTERNALFORMATI64VPROC_ALT)(GLenum,GLenum,GLenum,GLsizei,GLint64 *);
static inline void glGetInternalformati64v(GLenum target1,GLenum internalformat1,GLenum pname1,GLsizei bufSize1,GLint64 * params1)
{
	static PFNGLGETINTERNALFORMATI64VPROC_ALT fn=(PFNGLGETINTERNALFORMATI64VPROC_ALT)glaltGetProcAddressExtension("glGetInternalformati64v","GL_ARB_internalformat_query2");
	 fn(target1,internalformat1,pname1,bufSize1,params1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_invalidate_subdata
#define GL_ARB_invalidate_subdata
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_InvalidateBufferData
#define GL_ALT_FUNDEF_InvalidateBufferData
typedef void (*PFNGLINVALIDATEBUFFERDATAPROC_ALT)(GLuint);
static inline void glInvalidateBufferData(GLuint buffer1)
{
	static PFNGLINVALIDATEBUFFERDATAPROC_ALT fn=(PFNGLINVALIDATEBUFFERDATAPROC_ALT)glaltGetProcAddressExtension("glInvalidateBufferData","GL_ARB_invalidate_subdata");
	 fn(buffer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_InvalidateBufferSubData
#define GL_ALT_FUNDEF_InvalidateBufferSubData
typedef void (*PFNGLINVALIDATEBUFFERSUBDATAPROC_ALT)(GLuint,GLintptr,GLsizeiptr);
static inline void glInvalidateBufferSubData(GLuint buffer1,GLintptr offset1,GLsizeiptr length1)
{
	static PFNGLINVALIDATEBUFFERSUBDATAPROC_ALT fn=(PFNGLINVALIDATEBUFFERSUBDATAPROC_ALT)glaltGetProcAddressExtension("glInvalidateBufferSubData","GL_ARB_invalidate_subdata");
	 fn(buffer1,offset1,length1);
}
#endif

#ifndef	GL_ALT_FUNDEF_InvalidateFramebuffer
#define GL_ALT_FUNDEF_InvalidateFramebuffer
typedef void (*PFNGLINVALIDATEFRAMEBUFFERPROC_ALT)(GLenum,GLsizei,const GLenum *);
static inline void glInvalidateFramebuffer(GLenum target1,GLsizei numAttachments1,const GLenum * attachments1)
{
	static PFNGLINVALIDATEFRAMEBUFFERPROC_ALT fn=(PFNGLINVALIDATEFRAMEBUFFERPROC_ALT)glaltGetProcAddressExtension("glInvalidateFramebuffer","GL_ARB_invalidate_subdata");
	 fn(target1,numAttachments1,attachments1);
}
#endif

#ifndef	GL_ALT_FUNDEF_InvalidateSubFramebuffer
#define GL_ALT_FUNDEF_InvalidateSubFramebuffer
typedef void (*PFNGLINVALIDATESUBFRAMEBUFFERPROC_ALT)(GLenum,GLsizei,const GLenum *,GLint,GLint,GLsizei,GLsizei);
static inline void glInvalidateSubFramebuffer(GLenum target1,GLsizei numAttachments1,const GLenum * attachments1,GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
	static PFNGLINVALIDATESUBFRAMEBUFFERPROC_ALT fn=(PFNGLINVALIDATESUBFRAMEBUFFERPROC_ALT)glaltGetProcAddressExtension("glInvalidateSubFramebuffer","GL_ARB_invalidate_subdata");
	 fn(target1,numAttachments1,attachments1,x1,y1,width1,height1);
}
#endif

#ifndef	GL_ALT_FUNDEF_InvalidateTexImage
#define GL_ALT_FUNDEF_InvalidateTexImage
typedef void (*PFNGLINVALIDATETEXIMAGEPROC_ALT)(GLuint,GLint);
static inline void glInvalidateTexImage(GLuint texture1,GLint level1)
{
	static PFNGLINVALIDATETEXIMAGEPROC_ALT fn=(PFNGLINVALIDATETEXIMAGEPROC_ALT)glaltGetProcAddressExtension("glInvalidateTexImage","GL_ARB_invalidate_subdata");
	 fn(texture1,level1);
}
#endif

#ifndef	GL_ALT_FUNDEF_InvalidateTexSubImage
#define GL_ALT_FUNDEF_InvalidateTexSubImage
typedef void (*PFNGLINVALIDATETEXSUBIMAGEPROC_ALT)(GLuint,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei);
static inline void glInvalidateTexSubImage(GLuint texture1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLsizei width1,GLsizei height1,GLsizei depth1)
{
	static PFNGLINVALIDATETEXSUBIMAGEPROC_ALT fn=(PFNGLINVALIDATETEXSUBIMAGEPROC_ALT)glaltGetProcAddressExtension("glInvalidateTexSubImage","GL_ARB_invalidate_subdata");
	 fn(texture1,level1,xoffset1,yoffset1,zoffset1,width1,height1,depth1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_map_buffer_alignment
#define GL_ARB_map_buffer_alignment
#ifndef GL_MIN_MAP_BUFFER_ALIGNMENT
#define GL_MIN_MAP_BUFFER_ALIGNMENT 0x90BC
#endif //GL_MIN_MAP_BUFFER_ALIGNMENT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_map_buffer_range
#define GL_ARB_map_buffer_range
#ifndef GL_MAP_READ_BIT
#define GL_MAP_READ_BIT 0x0001
#endif //GL_MAP_READ_BIT
#ifndef GL_MAP_WRITE_BIT
#define GL_MAP_WRITE_BIT 0x0002
#endif //GL_MAP_WRITE_BIT
#ifndef GL_MAP_INVALIDATE_RANGE_BIT
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#endif //GL_MAP_INVALIDATE_RANGE_BIT
#ifndef GL_MAP_INVALIDATE_BUFFER_BIT
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#endif //GL_MAP_INVALIDATE_BUFFER_BIT
#ifndef GL_MAP_FLUSH_EXPLICIT_BIT
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#endif //GL_MAP_FLUSH_EXPLICIT_BIT
#ifndef GL_MAP_UNSYNCHRONIZED_BIT
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#endif //GL_MAP_UNSYNCHRONIZED_BIT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_FlushMappedBufferRange
#define GL_ALT_FUNDEF_FlushMappedBufferRange
typedef void (*PFNGLFLUSHMAPPEDBUFFERRANGEPROC_ALT)(GLenum,GLintptr,GLsizeiptr);
static inline void glFlushMappedBufferRange(GLenum target1,GLintptr offset1,GLsizeiptr length1)
{
	static PFNGLFLUSHMAPPEDBUFFERRANGEPROC_ALT fn=(PFNGLFLUSHMAPPEDBUFFERRANGEPROC_ALT)glaltGetProcAddressExtension("glFlushMappedBufferRange","GL_ARB_map_buffer_range");
	 fn(target1,offset1,length1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MapBufferRange
#define GL_ALT_FUNDEF_MapBufferRange
typedef void * (*PFNGLMAPBUFFERRANGEPROC_ALT)(GLenum,GLintptr,GLsizeiptr,GLbitfield);
static inline void * glMapBufferRange(GLenum target1,GLintptr offset1,GLsizeiptr length1,GLbitfield access1)
{
	static PFNGLMAPBUFFERRANGEPROC_ALT fn=(PFNGLMAPBUFFERRANGEPROC_ALT)glaltGetProcAddressExtension("glMapBufferRange","GL_ARB_map_buffer_range");
	return fn(target1,offset1,length1,access1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_matrix_palette
#define GL_ARB_matrix_palette
#ifndef GL_MATRIX_PALETTE_ARB
#define GL_MATRIX_PALETTE_ARB 0x8840
#endif //GL_MATRIX_PALETTE_ARB
#ifndef GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB
#define GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB 0x8841
#endif //GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB
#ifndef GL_MAX_PALETTE_MATRICES_ARB
#define GL_MAX_PALETTE_MATRICES_ARB 0x8842
#endif //GL_MAX_PALETTE_MATRICES_ARB
#ifndef GL_CURRENT_PALETTE_MATRIX_ARB
#define GL_CURRENT_PALETTE_MATRIX_ARB 0x8843
#endif //GL_CURRENT_PALETTE_MATRIX_ARB
#ifndef GL_MATRIX_INDEX_ARRAY_ARB
#define GL_MATRIX_INDEX_ARRAY_ARB 0x8844
#endif //GL_MATRIX_INDEX_ARRAY_ARB
#ifndef GL_CURRENT_MATRIX_INDEX_ARB
#define GL_CURRENT_MATRIX_INDEX_ARB 0x8845
#endif //GL_CURRENT_MATRIX_INDEX_ARB
#ifndef GL_MATRIX_INDEX_ARRAY_SIZE_ARB
#define GL_MATRIX_INDEX_ARRAY_SIZE_ARB 0x8846
#endif //GL_MATRIX_INDEX_ARRAY_SIZE_ARB
#ifndef GL_MATRIX_INDEX_ARRAY_TYPE_ARB
#define GL_MATRIX_INDEX_ARRAY_TYPE_ARB 0x8847
#endif //GL_MATRIX_INDEX_ARRAY_TYPE_ARB
#ifndef GL_MATRIX_INDEX_ARRAY_STRIDE_ARB
#define GL_MATRIX_INDEX_ARRAY_STRIDE_ARB 0x8848
#endif //GL_MATRIX_INDEX_ARRAY_STRIDE_ARB
#ifndef GL_MATRIX_INDEX_ARRAY_POINTER_ARB
#define GL_MATRIX_INDEX_ARRAY_POINTER_ARB 0x8849
#endif //GL_MATRIX_INDEX_ARRAY_POINTER_ARB
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_CurrentPaletteMatrixARB
#define GL_ALT_FUNDEF_CurrentPaletteMatrixARB
typedef void (*PFNGLCURRENTPALETTEMATRIXARBPROC_ALT)(GLint);
static inline void glCurrentPaletteMatrixARB(GLint index1)
{
	static PFNGLCURRENTPALETTEMATRIXARBPROC_ALT fn=(PFNGLCURRENTPALETTEMATRIXARBPROC_ALT)glaltGetProcAddressExtension("glCurrentPaletteMatrixARB","GL_ARB_matrix_palette");
	 fn(index1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MatrixIndexPointerARB
#define GL_ALT_FUNDEF_MatrixIndexPointerARB
typedef void (*PFNGLMATRIXINDEXPOINTERARBPROC_ALT)(GLint,GLenum,GLsizei,const void *);
static inline void glMatrixIndexPointerARB(GLint size1,GLenum type1,GLsizei stride1,const void * pointer1)
{
	static PFNGLMATRIXINDEXPOINTERARBPROC_ALT fn=(PFNGLMATRIXINDEXPOINTERARBPROC_ALT)glaltGetProcAddressExtension("glMatrixIndexPointerARB","GL_ARB_matrix_palette");
	 fn(size1,type1,stride1,pointer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MatrixIndexubvARB
#define GL_ALT_FUNDEF_MatrixIndexubvARB
typedef void (*PFNGLMATRIXINDEXUBVARBPROC_ALT)(GLint,const GLubyte *);
static inline void glMatrixIndexubvARB(GLint size1,const GLubyte * indices1)
{
	static PFNGLMATRIXINDEXUBVARBPROC_ALT fn=(PFNGLMATRIXINDEXUBVARBPROC_ALT)glaltGetProcAddressExtension("glMatrixIndexubvARB","GL_ARB_matrix_palette");
	 fn(size1,indices1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MatrixIndexuivARB
#define GL_ALT_FUNDEF_MatrixIndexuivARB
typedef void (*PFNGLMATRIXINDEXUIVARBPROC_ALT)(GLint,const GLuint *);
static inline void glMatrixIndexuivARB(GLint size1,const GLuint * indices1)
{
	static PFNGLMATRIXINDEXUIVARBPROC_ALT fn=(PFNGLMATRIXINDEXUIVARBPROC_ALT)glaltGetProcAddressExtension("glMatrixIndexuivARB","GL_ARB_matrix_palette");
	 fn(size1,indices1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MatrixIndexusvARB
#define GL_ALT_FUNDEF_MatrixIndexusvARB
typedef void (*PFNGLMATRIXINDEXUSVARBPROC_ALT)(GLint,const GLushort *);
static inline void glMatrixIndexusvARB(GLint size1,const GLushort * indices1)
{
	static PFNGLMATRIXINDEXUSVARBPROC_ALT fn=(PFNGLMATRIXINDEXUSVARBPROC_ALT)glaltGetProcAddressExtension("glMatrixIndexusvARB","GL_ARB_matrix_palette");
	 fn(size1,indices1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_multi_bind
#define GL_ARB_multi_bind
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BindBuffersBase
#define GL_ALT_FUNDEF_BindBuffersBase
typedef void (*PFNGLBINDBUFFERSBASEPROC_ALT)(GLenum,GLuint,GLsizei,const GLuint *);
static inline void glBindBuffersBase(GLenum target1,GLuint first1,GLsizei count1,const GLuint * buffers1)
{
	static PFNGLBINDBUFFERSBASEPROC_ALT fn=(PFNGLBINDBUFFERSBASEPROC_ALT)glaltGetProcAddressExtension("glBindBuffersBase","GL_ARB_multi_bind");
	 fn(target1,first1,count1,buffers1);
}
#endif

#ifndef	GL_ALT_FUNDEF_BindBuffersRange
#define GL_ALT_FUNDEF_BindBuffersRange
typedef void (*PFNGLBINDBUFFERSRANGEPROC_ALT)(GLenum,GLuint,GLsizei,const GLuint *,const GLintptr *,const GLsizeiptr *);
static inline void glBindBuffersRange(GLenum target1,GLuint first1,GLsizei count1,const GLuint * buffers1,const GLintptr * offsets1,const GLsizeiptr * sizes1)
{
	static PFNGLBINDBUFFERSRANGEPROC_ALT fn=(PFNGLBINDBUFFERSRANGEPROC_ALT)glaltGetProcAddressExtension("glBindBuffersRange","GL_ARB_multi_bind");
	 fn(target1,first1,count1,buffers1,offsets1,sizes1);
}
#endif

#ifndef	GL_ALT_FUNDEF_BindImageTextures
#define GL_ALT_FUNDEF_BindImageTextures
typedef void (*PFNGLBINDIMAGETEXTURESPROC_ALT)(GLuint,GLsizei,const GLuint *);
static inline void glBindImageTextures(GLuint first1,GLsizei count1,const GLuint * textures1)
{
	static PFNGLBINDIMAGETEXTURESPROC_ALT fn=(PFNGLBINDIMAGETEXTURESPROC_ALT)glaltGetProcAddressExtension("glBindImageTextures","GL_ARB_multi_bind");
	 fn(first1,count1,textures1);
}
#endif

#ifndef	GL_ALT_FUNDEF_BindSamplers
#define GL_ALT_FUNDEF_BindSamplers
typedef void (*PFNGLBINDSAMPLERSPROC_ALT)(GLuint,GLsizei,const GLuint *);
static inline void glBindSamplers(GLuint first1,GLsizei count1,const GLuint * samplers1)
{
	static PFNGLBINDSAMPLERSPROC_ALT fn=(PFNGLBINDSAMPLERSPROC_ALT)glaltGetProcAddressExtension("glBindSamplers","GL_ARB_multi_bind");
	 fn(first1,count1,samplers1);
}
#endif

#ifndef	GL_ALT_FUNDEF_BindTextures
#define GL_ALT_FUNDEF_BindTextures
typedef void (*PFNGLBINDTEXTURESPROC_ALT)(GLuint,GLsizei,const GLuint *);
static inline void glBindTextures(GLuint first1,GLsizei count1,const GLuint * textures1)
{
	static PFNGLBINDTEXTURESPROC_ALT fn=(PFNGLBINDTEXTURESPROC_ALT)glaltGetProcAddressExtension("glBindTextures","GL_ARB_multi_bind");
	 fn(first1,count1,textures1);
}
#endif

#ifndef	GL_ALT_FUNDEF_BindVertexBuffers
#define GL_ALT_FUNDEF_BindVertexBuffers
typedef void (*PFNGLBINDVERTEXBUFFERSPROC_ALT)(GLuint,GLsizei,const GLuint *,const GLintptr *,const GLsizei *);
static inline void glBindVertexBuffers(GLuint first1,GLsizei count1,const GLuint * buffers1,const GLintptr * offsets1,const GLsizei * strides1)
{
	static PFNGLBINDVERTEXBUFFERSPROC_ALT fn=(PFNGLBINDVERTEXBUFFERSPROC_ALT)glaltGetProcAddressExtension("glBindVertexBuffers","GL_ARB_multi_bind");
	 fn(first1,count1,buffers1,offsets1,strides1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_multi_draw_indirect
#define GL_ARB_multi_draw_indirect
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_MultiDrawArraysIndirect
#define GL_ALT_FUNDEF_MultiDrawArraysIndirect
typedef void (*PFNGLMULTIDRAWARRAYSINDIRECTPROC_ALT)(GLenum,const void *,GLsizei,GLsizei);
static inline void glMultiDrawArraysIndirect(GLenum mode1,const void * indirect1,GLsizei drawcount1,GLsizei stride1)
{
	static PFNGLMULTIDRAWARRAYSINDIRECTPROC_ALT fn=(PFNGLMULTIDRAWARRAYSINDIRECTPROC_ALT)glaltGetProcAddressExtension("glMultiDrawArraysIndirect","GL_ARB_multi_draw_indirect");
	 fn(mode1,indirect1,drawcount1,stride1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiDrawElementsIndirect
#define GL_ALT_FUNDEF_MultiDrawElementsIndirect
typedef void (*PFNGLMULTIDRAWELEMENTSINDIRECTPROC_ALT)(GLenum,GLenum,const void *,GLsizei,GLsizei);
static inline void glMultiDrawElementsIndirect(GLenum mode1,GLenum type1,const void * indirect1,GLsizei drawcount1,GLsizei stride1)
{
	static PFNGLMULTIDRAWELEMENTSINDIRECTPROC_ALT fn=(PFNGLMULTIDRAWELEMENTSINDIRECTPROC_ALT)glaltGetProcAddressExtension("glMultiDrawElementsIndirect","GL_ARB_multi_draw_indirect");
	 fn(mode1,type1,indirect1,drawcount1,stride1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_multisample
#define GL_ARB_multisample
#ifndef GL_MULTISAMPLE_BIT_ARB
#define GL_MULTISAMPLE_BIT_ARB 0x20000000
#endif //GL_MULTISAMPLE_BIT_ARB
#ifndef GL_MULTISAMPLE_ARB
#define GL_MULTISAMPLE_ARB 0x809D
#endif //GL_MULTISAMPLE_ARB
#ifndef GL_SAMPLE_ALPHA_TO_COVERAGE_ARB
#define GL_SAMPLE_ALPHA_TO_COVERAGE_ARB 0x809E
#endif //GL_SAMPLE_ALPHA_TO_COVERAGE_ARB
#ifndef GL_SAMPLE_ALPHA_TO_ONE_ARB
#define GL_SAMPLE_ALPHA_TO_ONE_ARB 0x809F
#endif //GL_SAMPLE_ALPHA_TO_ONE_ARB
#ifndef GL_SAMPLE_COVERAGE_ARB
#define GL_SAMPLE_COVERAGE_ARB 0x80A0
#endif //GL_SAMPLE_COVERAGE_ARB
#ifndef GL_SAMPLE_BUFFERS_ARB
#define GL_SAMPLE_BUFFERS_ARB 0x80A8
#endif //GL_SAMPLE_BUFFERS_ARB
#ifndef GL_SAMPLES_ARB
#define GL_SAMPLES_ARB 0x80A9
#endif //GL_SAMPLES_ARB
#ifndef GL_SAMPLE_COVERAGE_VALUE_ARB
#define GL_SAMPLE_COVERAGE_VALUE_ARB 0x80AA
#endif //GL_SAMPLE_COVERAGE_VALUE_ARB
#ifndef GL_SAMPLE_COVERAGE_INVERT_ARB
#define GL_SAMPLE_COVERAGE_INVERT_ARB 0x80AB
#endif //GL_SAMPLE_COVERAGE_INVERT_ARB
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_SampleCoverageARB
#define GL_ALT_FUNDEF_SampleCoverageARB
typedef void (*PFNGLSAMPLECOVERAGEARBPROC_ALT)(GLfloat,GLboolean);
static inline void glSampleCoverageARB(GLfloat value1,GLboolean invert1)
{
	static PFNGLSAMPLECOVERAGEARBPROC_ALT fn=(PFNGLSAMPLECOVERAGEARBPROC_ALT)glaltGetProcAddressExtension("glSampleCoverageARB","GL_ARB_multisample");
	 fn(value1,invert1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_ARB_multitexture
#define GL_ARB_multitexture
#ifndef GL_TEXTURE0_ARB
#define GL_TEXTURE0_ARB 0x84C0
#endif //GL_TEXTURE0_ARB
#ifndef GL_TEXTURE1_ARB
#define GL_TEXTURE1_ARB 0x84C1
#endif //GL_TEXTURE1_ARB
#ifndef GL_TEXTURE2_ARB
#define GL_TEXTURE2_ARB 0x84C2
#endif //GL_TEXTURE2_ARB
#ifndef GL_TEXTURE3_ARB
#define GL_TEXTURE3_ARB 0x84C3
#endif //GL_TEXTURE3_ARB
#ifndef GL_TEXTURE4_ARB
#define GL_TEXTURE4_ARB 0x84C4
#endif //GL_TEXTURE4_ARB
#ifndef GL_TEXTURE5_ARB
#define GL_TEXTURE5_ARB 0x84C5
#endif //GL_TEXTURE5_ARB
#ifndef GL_TEXTURE6_ARB
#define GL_TEXTURE6_ARB 0x84C6
#endif //GL_TEXTURE6_ARB
#ifndef GL_TEXTURE7_ARB
#define GL_TEXTURE7_ARB 0x84C7
#endif //GL_TEXTURE7_ARB
#ifndef GL_TEXTURE8_ARB
#define GL_TEXTURE8_ARB 0x84C8
#endif //GL_TEXTURE8_ARB
#ifndef GL_TEXTURE9_ARB
#define GL_TEXTURE9_ARB 0x84C9
#endif //GL_TEXTURE9_ARB
#ifndef GL_TEXTURE10_ARB
#define GL_TEXTURE10_ARB 0x84CA
#endif //GL_TEXTURE10_ARB
#ifndef GL_TEXTURE11_ARB
#define GL_TEXTURE11_ARB 0x84CB
#endif //GL_TEXTURE11_ARB
#ifndef GL_TEXTURE12_ARB
#define GL_TEXTURE12_ARB 0x84CC
#endif //GL_TEXTURE12_ARB
#ifndef GL_TEXTURE13_ARB
#define GL_TEXTURE13_ARB 0x84CD
#endif //GL_TEXTURE13_ARB
#ifndef GL_TEXTURE14_ARB
#define GL_TEXTURE14_ARB 0x84CE
#endif //GL_TEXTURE14_ARB
#ifndef GL_TEXTURE15_ARB
#define GL_TEXTURE15_ARB 0x84CF
#endif //GL_TEXTURE15_ARB
#ifndef GL_TEXTURE16_ARB
#define GL_TEXTURE16_ARB 0x84D0
#endif //GL_TEXTURE16_ARB
#ifndef GL_TEXTURE17_ARB
#define GL_TEXTURE17_ARB 0x84D1
#endif //GL_TEXTURE17_ARB
#ifndef GL_TEXTURE18_ARB
#define GL_TEXTURE18_ARB 0x84D2
#endif //GL_TEXTURE18_ARB
#ifndef GL_TEXTURE19_ARB
#define GL_TEXTURE19_ARB 0x84D3
#endif //GL_TEXTURE19_ARB
#ifndef GL_TEXTURE20_ARB
#define GL_TEXTURE20_ARB 0x84D4
#endif //GL_TEXTURE20_ARB
#ifndef GL_TEXTURE21_ARB
#define GL_TEXTURE21_ARB 0x84D5
#endif //GL_TEXTURE21_ARB
#ifndef GL_TEXTURE22_ARB
#define GL_TEXTURE22_ARB 0x84D6
#endif //GL_TEXTURE22_ARB
#ifndef GL_TEXTURE23_ARB
#define GL_TEXTURE23_ARB 0x84D7
#endif //GL_TEXTURE23_ARB
#ifndef GL_TEXTURE24_ARB
#define GL_TEXTURE24_ARB 0x84D8
#endif //GL_TEXTURE24_ARB
#ifndef GL_TEXTURE25_ARB
#define GL_TEXTURE25_ARB 0x84D9
#endif //GL_TEXTURE25_ARB
#ifndef GL_TEXTURE26_ARB
#define GL_TEXTURE26_ARB 0x84DA
#endif //GL_TEXTURE26_ARB
#ifndef GL_TEXTURE27_ARB
#define GL_TEXTURE27_ARB 0x84DB
#endif //GL_TEXTURE27_ARB
#ifndef GL_TEXTURE28_ARB
#define GL_TEXTURE28_ARB 0x84DC
#endif //GL_TEXTURE28_ARB
#ifndef GL_TEXTURE29_ARB
#define GL_TEXTURE29_ARB 0x84DD
#endif //GL_TEXTURE29_ARB
#ifndef GL_TEXTURE30_ARB
#define GL_TEXTURE30_ARB 0x84DE
#endif //GL_TEXTURE30_ARB
#ifndef GL_TEXTURE31_ARB
#define GL_TEXTURE31_ARB 0x84DF
#endif //GL_TEXTURE31_ARB
#ifndef GL_ACTIVE_TEXTURE_ARB
#define GL_ACTIVE_TEXTURE_ARB 0x84E0
#endif //GL_ACTIVE_TEXTURE_ARB
#ifndef GL_CLIENT_ACTIVE_TEXTURE_ARB
#define GL_CLIENT_ACTIVE_TEXTURE_ARB 0x84E1
#endif //GL_CLIENT_ACTIVE_TEXTURE_ARB
#ifndef GL_MAX_TEXTURE_UNITS_ARB
#define GL_MAX_TEXTURE_UNITS_ARB 0x84E2
#endif //GL_MAX_TEXTURE_UNITS_ARB
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ActiveTextureARB
#define GL_ALT_FUNDEF_ActiveTextureARB
typedef void (*PFNGLACTIVETEXTUREARBPROC_ALT)(GLenum);
static inline void glActiveTextureARB(GLenum texture1)
{
	static PFNGLACTIVETEXTUREARBPROC_ALT fn=(PFNGLACTIVETEXTUREARBPROC_ALT)glaltGetProcAddressExtension("glActiveTextureARB","GL_ARB_multitexture");
	 fn(texture1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ClientActiveTextureARB
#define GL_ALT_FUNDEF_ClientActiveTextureARB
typedef void (*PFNGLCLIENTACTIVETEXTUREARBPROC_ALT)(GLenum);
static inline void glClientActiveTextureARB(GLenum texture1)
{
	static PFNGLCLIENTACTIVETEXTUREARBPROC_ALT fn=(PFNGLCLIENTACTIVETEXTUREARBPROC_ALT)glaltGetProcAddressExtension("glClientActiveTextureARB","GL_ARB_multitexture");
	 fn(texture1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord1dARB
#define GL_ALT_FUNDEF_MultiTexCoord1dARB
typedef void (*PFNGLMULTITEXCOORD1DARBPROC_ALT)(GLenum,GLdouble);
static inline void glMultiTexCoord1dARB(GLenum target1,GLdouble s1)
{
	static PFNGLMULTITEXCOORD1DARBPROC_ALT fn=(PFNGLMULTITEXCOORD1DARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord1dARB","GL_ARB_multitexture");
	 fn(target1,s1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord1dvARB
#define GL_ALT_FUNDEF_MultiTexCoord1dvARB
typedef void (*PFNGLMULTITEXCOORD1DVARBPROC_ALT)(GLenum,const GLdouble *);
static inline void glMultiTexCoord1dvARB(GLenum target1,const GLdouble * v1)
{
	static PFNGLMULTITEXCOORD1DVARBPROC_ALT fn=(PFNGLMULTITEXCOORD1DVARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord1dvARB","GL_ARB_multitexture");
	 fn(target1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord1fARB
#define GL_ALT_FUNDEF_MultiTexCoord1fARB
typedef void (*PFNGLMULTITEXCOORD1FARBPROC_ALT)(GLenum,GLfloat);
static inline void glMultiTexCoord1fARB(GLenum target1,GLfloat s1)
{
	static PFNGLMULTITEXCOORD1FARBPROC_ALT fn=(PFNGLMULTITEXCOORD1FARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord1fARB","GL_ARB_multitexture");
	 fn(target1,s1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord1fvARB
#define GL_ALT_FUNDEF_MultiTexCoord1fvARB
typedef void (*PFNGLMULTITEXCOORD1FVARBPROC_ALT)(GLenum,const GLfloat *);
static inline void glMultiTexCoord1fvARB(GLenum target1,const GLfloat * v1)
{
	static PFNGLMULTITEXCOORD1FVARBPROC_ALT fn=(PFNGLMULTITEXCOORD1FVARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord1fvARB","GL_ARB_multitexture");
	 fn(target1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord1iARB
#define GL_ALT_FUNDEF_MultiTexCoord1iARB
typedef void (*PFNGLMULTITEXCOORD1IARBPROC_ALT)(GLenum,GLint);
static inline void glMultiTexCoord1iARB(GLenum target1,GLint s1)
{
	static PFNGLMULTITEXCOORD1IARBPROC_ALT fn=(PFNGLMULTITEXCOORD1IARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord1iARB","GL_ARB_multitexture");
	 fn(target1,s1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord1ivARB
#define GL_ALT_FUNDEF_MultiTexCoord1ivARB
typedef void (*PFNGLMULTITEXCOORD1IVARBPROC_ALT)(GLenum,const GLint *);
static inline void glMultiTexCoord1ivARB(GLenum target1,const GLint * v1)
{
	static PFNGLMULTITEXCOORD1IVARBPROC_ALT fn=(PFNGLMULTITEXCOORD1IVARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord1ivARB","GL_ARB_multitexture");
	 fn(target1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord1sARB
#define GL_ALT_FUNDEF_MultiTexCoord1sARB
typedef void (*PFNGLMULTITEXCOORD1SARBPROC_ALT)(GLenum,GLshort);
static inline void glMultiTexCoord1sARB(GLenum target1,GLshort s1)
{
	static PFNGLMULTITEXCOORD1SARBPROC_ALT fn=(PFNGLMULTITEXCOORD1SARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord1sARB","GL_ARB_multitexture");
	 fn(target1,s1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord1svARB
#define GL_ALT_FUNDEF_MultiTexCoord1svARB
typedef void (*PFNGLMULTITEXCOORD1SVARBPROC_ALT)(GLenum,const GLshort *);
static inline void glMultiTexCoord1svARB(GLenum target1,const GLshort * v1)
{
	static PFNGLMULTITEXCOORD1SVARBPROC_ALT fn=(PFNGLMULTITEXCOORD1SVARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord1svARB","GL_ARB_multitexture");
	 fn(target1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord2dARB
#define GL_ALT_FUNDEF_MultiTexCoord2dARB
typedef void (*PFNGLMULTITEXCOORD2DARBPROC_ALT)(GLenum,GLdouble,GLdouble);
static inline void glMultiTexCoord2dARB(GLenum target1,GLdouble s1,GLdouble t1)
{
	static PFNGLMULTITEXCOORD2DARBPROC_ALT fn=(PFNGLMULTITEXCOORD2DARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord2dARB","GL_ARB_multitexture");
	 fn(target1,s1,t1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord2dvARB
#define GL_ALT_FUNDEF_MultiTexCoord2dvARB
typedef void (*PFNGLMULTITEXCOORD2DVARBPROC_ALT)(GLenum,const GLdouble *);
static inline void glMultiTexCoord2dvARB(GLenum target1,const GLdouble * v1)
{
	static PFNGLMULTITEXCOORD2DVARBPROC_ALT fn=(PFNGLMULTITEXCOORD2DVARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord2dvARB","GL_ARB_multitexture");
	 fn(target1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord2fARB
#define GL_ALT_FUNDEF_MultiTexCoord2fARB
typedef void (*PFNGLMULTITEXCOORD2FARBPROC_ALT)(GLenum,GLfloat,GLfloat);
static inline void glMultiTexCoord2fARB(GLenum target1,GLfloat s1,GLfloat t1)
{
	static PFNGLMULTITEXCOORD2FARBPROC_ALT fn=(PFNGLMULTITEXCOORD2FARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord2fARB","GL_ARB_multitexture");
	 fn(target1,s1,t1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord2fvARB
#define GL_ALT_FUNDEF_MultiTexCoord2fvARB
typedef void (*PFNGLMULTITEXCOORD2FVARBPROC_ALT)(GLenum,const GLfloat *);
static inline void glMultiTexCoord2fvARB(GLenum target1,const GLfloat * v1)
{
	static PFNGLMULTITEXCOORD2FVARBPROC_ALT fn=(PFNGLMULTITEXCOORD2FVARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord2fvARB","GL_ARB_multitexture");
	 fn(target1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord2iARB
#define GL_ALT_FUNDEF_MultiTexCoord2iARB
typedef void (*PFNGLMULTITEXCOORD2IARBPROC_ALT)(GLenum,GLint,GLint);
static inline void glMultiTexCoord2iARB(GLenum target1,GLint s1,GLint t1)
{
	static PFNGLMULTITEXCOORD2IARBPROC_ALT fn=(PFNGLMULTITEXCOORD2IARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord2iARB","GL_ARB_multitexture");
	 fn(target1,s1,t1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord2ivARB
#define GL_ALT_FUNDEF_MultiTexCoord2ivARB
typedef void (*PFNGLMULTITEXCOORD2IVARBPROC_ALT)(GLenum,const GLint *);
static inline void glMultiTexCoord2ivARB(GLenum target1,const GLint * v1)
{
	static PFNGLMULTITEXCOORD2IVARBPROC_ALT fn=(PFNGLMULTITEXCOORD2IVARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord2ivARB","GL_ARB_multitexture");
	 fn(target1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord2sARB
#define GL_ALT_FUNDEF_MultiTexCoord2sARB
typedef void (*PFNGLMULTITEXCOORD2SARBPROC_ALT)(GLenum,GLshort,GLshort);
static inline void glMultiTexCoord2sARB(GLenum target1,GLshort s1,GLshort t1)
{
	static PFNGLMULTITEXCOORD2SARBPROC_ALT fn=(PFNGLMULTITEXCOORD2SARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord2sARB","GL_ARB_multitexture");
	 fn(target1,s1,t1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord2svARB
#define GL_ALT_FUNDEF_MultiTexCoord2svARB
typedef void (*PFNGLMULTITEXCOORD2SVARBPROC_ALT)(GLenum,const GLshort *);
static inline void glMultiTexCoord2svARB(GLenum target1,const GLshort * v1)
{
	static PFNGLMULTITEXCOORD2SVARBPROC_ALT fn=(PFNGLMULTITEXCOORD2SVARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord2svARB","GL_ARB_multitexture");
	 fn(target1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord3dARB
#define GL_ALT_FUNDEF_MultiTexCoord3dARB
typedef void (*PFNGLMULTITEXCOORD3DARBPROC_ALT)(GLenum,GLdouble,GLdouble,GLdouble);
static inline void glMultiTexCoord3dARB(GLenum target1,GLdouble s1,GLdouble t1,GLdouble r1)
{
	static PFNGLMULTITEXCOORD3DARBPROC_ALT fn=(PFNGLMULTITEXCOORD3DARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord3dARB","GL_ARB_multitexture");
	 fn(target1,s1,t1,r1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord3dvARB
#define GL_ALT_FUNDEF_MultiTexCoord3dvARB
typedef void (*PFNGLMULTITEXCOORD3DVARBPROC_ALT)(GLenum,const GLdouble *);
static inline void glMultiTexCoord3dvARB(GLenum target1,const GLdouble * v1)
{
	static PFNGLMULTITEXCOORD3DVARBPROC_ALT fn=(PFNGLMULTITEXCOORD3DVARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord3dvARB","GL_ARB_multitexture");
	 fn(target1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord3fARB
#define GL_ALT_FUNDEF_MultiTexCoord3fARB
typedef void (*PFNGLMULTITEXCOORD3FARBPROC_ALT)(GLenum,GLfloat,GLfloat,GLfloat);
static inline void glMultiTexCoord3fARB(GLenum target1,GLfloat s1,GLfloat t1,GLfloat r1)
{
	static PFNGLMULTITEXCOORD3FARBPROC_ALT fn=(PFNGLMULTITEXCOORD3FARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord3fARB","GL_ARB_multitexture");
	 fn(target1,s1,t1,r1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord3fvARB
#define GL_ALT_FUNDEF_MultiTexCoord3fvARB
typedef void (*PFNGLMULTITEXCOORD3FVARBPROC_ALT)(GLenum,const GLfloat *);
static inline void glMultiTexCoord3fvARB(GLenum target1,const GLfloat * v1)
{
	static PFNGLMULTITEXCOORD3FVARBPROC_ALT fn=(PFNGLMULTITEXCOORD3FVARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord3fvARB","GL_ARB_multitexture");
	 fn(target1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord3iARB
#define GL_ALT_FUNDEF_MultiTexCoord3iARB
typedef void (*PFNGLMULTITEXCOORD3IARBPROC_ALT)(GLenum,GLint,GLint,GLint);
static inline void glMultiTexCoord3iARB(GLenum target1,GLint s1,GLint t1,GLint r1)
{
	static PFNGLMULTITEXCOORD3IARBPROC_ALT fn=(PFNGLMULTITEXCOORD3IARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord3iARB","GL_ARB_multitexture");
	 fn(target1,s1,t1,r1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord3ivARB
#define GL_ALT_FUNDEF_MultiTexCoord3ivARB
typedef void (*PFNGLMULTITEXCOORD3IVARBPROC_ALT)(GLenum,const GLint *);
static inline void glMultiTexCoord3ivARB(GLenum target1,const GLint * v1)
{
	static PFNGLMULTITEXCOORD3IVARBPROC_ALT fn=(PFNGLMULTITEXCOORD3IVARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord3ivARB","GL_ARB_multitexture");
	 fn(target1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord3sARB
#define GL_ALT_FUNDEF_MultiTexCoord3sARB
typedef void (*PFNGLMULTITEXCOORD3SARBPROC_ALT)(GLenum,GLshort,GLshort,GLshort);
static inline void glMultiTexCoord3sARB(GLenum target1,GLshort s1,GLshort t1,GLshort r1)
{
	static PFNGLMULTITEXCOORD3SARBPROC_ALT fn=(PFNGLMULTITEXCOORD3SARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord3sARB","GL_ARB_multitexture");
	 fn(target1,s1,t1,r1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord3svARB
#define GL_ALT_FUNDEF_MultiTexCoord3svARB
typedef void (*PFNGLMULTITEXCOORD3SVARBPROC_ALT)(GLenum,const GLshort *);
static inline void glMultiTexCoord3svARB(GLenum target1,const GLshort * v1)
{
	static PFNGLMULTITEXCOORD3SVARBPROC_ALT fn=(PFNGLMULTITEXCOORD3SVARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord3svARB","GL_ARB_multitexture");
	 fn(target1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord4dARB
#define GL_ALT_FUNDEF_MultiTexCoord4dARB
typedef void (*PFNGLMULTITEXCOORD4DARBPROC_ALT)(GLenum,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void glMultiTexCoord4dARB(GLenum target1,GLdouble s1,GLdouble t1,GLdouble r1,GLdouble q1)
{
	static PFNGLMULTITEXCOORD4DARBPROC_ALT fn=(PFNGLMULTITEXCOORD4DARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord4dARB","GL_ARB_multitexture");
	 fn(target1,s1,t1,r1,q1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord4dvARB
#define GL_ALT_FUNDEF_MultiTexCoord4dvARB
typedef void (*PFNGLMULTITEXCOORD4DVARBPROC_ALT)(GLenum,const GLdouble *);
static inline void glMultiTexCoord4dvARB(GLenum target1,const GLdouble * v1)
{
	static PFNGLMULTITEXCOORD4DVARBPROC_ALT fn=(PFNGLMULTITEXCOORD4DVARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord4dvARB","GL_ARB_multitexture");
	 fn(target1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord4fARB
#define GL_ALT_FUNDEF_MultiTexCoord4fARB
typedef void (*PFNGLMULTITEXCOORD4FARBPROC_ALT)(GLenum,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glMultiTexCoord4fARB(GLenum target1,GLfloat s1,GLfloat t1,GLfloat r1,GLfloat q1)
{
	static PFNGLMULTITEXCOORD4FARBPROC_ALT fn=(PFNGLMULTITEXCOORD4FARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord4fARB","GL_ARB_multitexture");
	 fn(target1,s1,t1,r1,q1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord4fvARB
#define GL_ALT_FUNDEF_MultiTexCoord4fvARB
typedef void (*PFNGLMULTITEXCOORD4FVARBPROC_ALT)(GLenum,const GLfloat *);
static inline void glMultiTexCoord4fvARB(GLenum target1,const GLfloat * v1)
{
	static PFNGLMULTITEXCOORD4FVARBPROC_ALT fn=(PFNGLMULTITEXCOORD4FVARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord4fvARB","GL_ARB_multitexture");
	 fn(target1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord4iARB
#define GL_ALT_FUNDEF_MultiTexCoord4iARB
typedef void (*PFNGLMULTITEXCOORD4IARBPROC_ALT)(GLenum,GLint,GLint,GLint,GLint);
static inline void glMultiTexCoord4iARB(GLenum target1,GLint s1,GLint t1,GLint r1,GLint q1)
{
	static PFNGLMULTITEXCOORD4IARBPROC_ALT fn=(PFNGLMULTITEXCOORD4IARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord4iARB","GL_ARB_multitexture");
	 fn(target1,s1,t1,r1,q1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord4ivARB
#define GL_ALT_FUNDEF_MultiTexCoord4ivARB
typedef void (*PFNGLMULTITEXCOORD4IVARBPROC_ALT)(GLenum,const GLint *);
static inline void glMultiTexCoord4ivARB(GLenum target1,const GLint * v1)
{
	static PFNGLMULTITEXCOORD4IVARBPROC_ALT fn=(PFNGLMULTITEXCOORD4IVARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord4ivARB","GL_ARB_multitexture");
	 fn(target1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord4sARB
#define GL_ALT_FUNDEF_MultiTexCoord4sARB
typedef void (*PFNGLMULTITEXCOORD4SARBPROC_ALT)(GLenum,GLshort,GLshort,GLshort,GLshort);
static inline void glMultiTexCoord4sARB(GLenum target1,GLshort s1,GLshort t1,GLshort r1,GLshort q1)
{
	static PFNGLMULTITEXCOORD4SARBPROC_ALT fn=(PFNGLMULTITEXCOORD4SARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord4sARB","GL_ARB_multitexture");
	 fn(target1,s1,t1,r1,q1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiTexCoord4svARB
#define GL_ALT_FUNDEF_MultiTexCoord4svARB
typedef void (*PFNGLMULTITEXCOORD4SVARBPROC_ALT)(GLenum,const GLshort *);
static inline void glMultiTexCoord4svARB(GLenum target1,const GLshort * v1)
{
	static PFNGLMULTITEXCOORD4SVARBPROC_ALT fn=(PFNGLMULTITEXCOORD4SVARBPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord4svARB","GL_ARB_multitexture");
	 fn(target1,v1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_ARB_occlusion_query
#define GL_ARB_occlusion_query
#ifndef GL_QUERY_COUNTER_BITS_ARB
#define GL_QUERY_COUNTER_BITS_ARB 0x8864
#endif //GL_QUERY_COUNTER_BITS_ARB
#ifndef GL_CURRENT_QUERY_ARB
#define GL_CURRENT_QUERY_ARB 0x8865
#endif //GL_CURRENT_QUERY_ARB
#ifndef GL_QUERY_RESULT_ARB
#define GL_QUERY_RESULT_ARB 0x8866
#endif //GL_QUERY_RESULT_ARB
#ifndef GL_QUERY_RESULT_AVAILABLE_ARB
#define GL_QUERY_RESULT_AVAILABLE_ARB 0x8867
#endif //GL_QUERY_RESULT_AVAILABLE_ARB
#ifndef GL_SAMPLES_PASSED_ARB
#define GL_SAMPLES_PASSED_ARB 0x8914
#endif //GL_SAMPLES_PASSED_ARB
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BeginQueryARB
#define GL_ALT_FUNDEF_BeginQueryARB
typedef void (*PFNGLBEGINQUERYARBPROC_ALT)(GLenum,GLuint);
static inline void glBeginQueryARB(GLenum target1,GLuint id1)
{
	static PFNGLBEGINQUERYARBPROC_ALT fn=(PFNGLBEGINQUERYARBPROC_ALT)glaltGetProcAddressExtension("glBeginQueryARB","GL_ARB_occlusion_query");
	 fn(target1,id1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_DeleteQueriesARB
#define GL_ALT_FUNDEF_DeleteQueriesARB
typedef void (*PFNGLDELETEQUERIESARBPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteQueriesARB(GLsizei n1,const GLuint * ids1)
{
	static PFNGLDELETEQUERIESARBPROC_ALT fn=(PFNGLDELETEQUERIESARBPROC_ALT)glaltGetProcAddressExtension("glDeleteQueriesARB","GL_ARB_occlusion_query");
	 fn(n1,ids1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_EndQueryARB
#define GL_ALT_FUNDEF_EndQueryARB
typedef void (*PFNGLENDQUERYARBPROC_ALT)(GLenum);
static inline void glEndQueryARB(GLenum target1)
{
	static PFNGLENDQUERYARBPROC_ALT fn=(PFNGLENDQUERYARBPROC_ALT)glaltGetProcAddressExtension("glEndQueryARB","GL_ARB_occlusion_query");
	 fn(target1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GenQueriesARB
#define GL_ALT_FUNDEF_GenQueriesARB
typedef void (*PFNGLGENQUERIESARBPROC_ALT)(GLsizei,GLuint *);
static inline void glGenQueriesARB(GLsizei n1,GLuint * ids1)
{
	static PFNGLGENQUERIESARBPROC_ALT fn=(PFNGLGENQUERIESARBPROC_ALT)glaltGetProcAddressExtension("glGenQueriesARB","GL_ARB_occlusion_query");
	 fn(n1,ids1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetQueryObjectivARB
#define GL_ALT_FUNDEF_GetQueryObjectivARB
typedef void (*PFNGLGETQUERYOBJECTIVARBPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetQueryObjectivARB(GLuint id1,GLenum pname1,GLint * params1)
{
	static PFNGLGETQUERYOBJECTIVARBPROC_ALT fn=(PFNGLGETQUERYOBJECTIVARBPROC_ALT)glaltGetProcAddressExtension("glGetQueryObjectivARB","GL_ARB_occlusion_query");
	 fn(id1,pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetQueryObjectuivARB
#define GL_ALT_FUNDEF_GetQueryObjectuivARB
typedef void (*PFNGLGETQUERYOBJECTUIVARBPROC_ALT)(GLuint,GLenum,GLuint *);
static inline void glGetQueryObjectuivARB(GLuint id1,GLenum pname1,GLuint * params1)
{
	static PFNGLGETQUERYOBJECTUIVARBPROC_ALT fn=(PFNGLGETQUERYOBJECTUIVARBPROC_ALT)glaltGetProcAddressExtension("glGetQueryObjectuivARB","GL_ARB_occlusion_query");
	 fn(id1,pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetQueryivARB
#define GL_ALT_FUNDEF_GetQueryivARB
typedef void (*PFNGLGETQUERYIVARBPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetQueryivARB(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETQUERYIVARBPROC_ALT fn=(PFNGLGETQUERYIVARBPROC_ALT)glaltGetProcAddressExtension("glGetQueryivARB","GL_ARB_occlusion_query");
	 fn(target1,pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_IsQueryARB
#define GL_ALT_FUNDEF_IsQueryARB
typedef GLboolean (*PFNGLISQUERYARBPROC_ALT)(GLuint);
static inline GLboolean glIsQueryARB(GLuint id1)
{
	static PFNGLISQUERYARBPROC_ALT fn=(PFNGLISQUERYARBPROC_ALT)glaltGetProcAddressExtension("glIsQueryARB","GL_ARB_occlusion_query");
	return fn(id1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_ARB_occlusion_query2
#define GL_ARB_occlusion_query2
#ifndef GL_ANY_SAMPLES_PASSED
#define GL_ANY_SAMPLES_PASSED 0x8C2F
#endif //GL_ANY_SAMPLES_PASSED
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_pipeline_statistics_query
#define GL_ARB_pipeline_statistics_query
#ifndef GL_VERTICES_SUBMITTED_ARB
#define GL_VERTICES_SUBMITTED_ARB 0x82EE
#endif //GL_VERTICES_SUBMITTED_ARB
#ifndef GL_PRIMITIVES_SUBMITTED_ARB
#define GL_PRIMITIVES_SUBMITTED_ARB 0x82EF
#endif //GL_PRIMITIVES_SUBMITTED_ARB
#ifndef GL_VERTEX_SHADER_INVOCATIONS_ARB
#define GL_VERTEX_SHADER_INVOCATIONS_ARB 0x82F0
#endif //GL_VERTEX_SHADER_INVOCATIONS_ARB
#ifndef GL_TESS_CONTROL_SHADER_PATCHES_ARB
#define GL_TESS_CONTROL_SHADER_PATCHES_ARB 0x82F1
#endif //GL_TESS_CONTROL_SHADER_PATCHES_ARB
#ifndef GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB
#define GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB 0x82F2
#endif //GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB
#ifndef GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB
#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB 0x82F3
#endif //GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB
#ifndef GL_FRAGMENT_SHADER_INVOCATIONS_ARB
#define GL_FRAGMENT_SHADER_INVOCATIONS_ARB 0x82F4
#endif //GL_FRAGMENT_SHADER_INVOCATIONS_ARB
#ifndef GL_COMPUTE_SHADER_INVOCATIONS_ARB
#define GL_COMPUTE_SHADER_INVOCATIONS_ARB 0x82F5
#endif //GL_COMPUTE_SHADER_INVOCATIONS_ARB
#ifndef GL_CLIPPING_INPUT_PRIMITIVES_ARB
#define GL_CLIPPING_INPUT_PRIMITIVES_ARB 0x82F6
#endif //GL_CLIPPING_INPUT_PRIMITIVES_ARB
#ifndef GL_CLIPPING_OUTPUT_PRIMITIVES_ARB
#define GL_CLIPPING_OUTPUT_PRIMITIVES_ARB 0x82F7
#endif //GL_CLIPPING_OUTPUT_PRIMITIVES_ARB
#ifndef GL_GEOMETRY_SHADER_INVOCATIONS
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#endif //GL_GEOMETRY_SHADER_INVOCATIONS
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_pixel_buffer_object
#define GL_ARB_pixel_buffer_object
#ifndef GL_PIXEL_PACK_BUFFER_ARB
#define GL_PIXEL_PACK_BUFFER_ARB 0x88EB
#endif //GL_PIXEL_PACK_BUFFER_ARB
#ifndef GL_PIXEL_UNPACK_BUFFER_ARB
#define GL_PIXEL_UNPACK_BUFFER_ARB 0x88EC
#endif //GL_PIXEL_UNPACK_BUFFER_ARB
#ifndef GL_PIXEL_PACK_BUFFER_BINDING_ARB
#define GL_PIXEL_PACK_BUFFER_BINDING_ARB 0x88ED
#endif //GL_PIXEL_PACK_BUFFER_BINDING_ARB
#ifndef GL_PIXEL_UNPACK_BUFFER_BINDING_ARB
#define GL_PIXEL_UNPACK_BUFFER_BINDING_ARB 0x88EF
#endif //GL_PIXEL_UNPACK_BUFFER_BINDING_ARB
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_point_parameters
#define GL_ARB_point_parameters
#ifndef GL_POINT_SIZE_MIN_ARB
#define GL_POINT_SIZE_MIN_ARB 0x8126
#endif //GL_POINT_SIZE_MIN_ARB
#ifndef GL_POINT_SIZE_MAX_ARB
#define GL_POINT_SIZE_MAX_ARB 0x8127
#endif //GL_POINT_SIZE_MAX_ARB
#ifndef GL_POINT_FADE_THRESHOLD_SIZE_ARB
#define GL_POINT_FADE_THRESHOLD_SIZE_ARB 0x8128
#endif //GL_POINT_FADE_THRESHOLD_SIZE_ARB
#ifndef GL_POINT_DISTANCE_ATTENUATION_ARB
#define GL_POINT_DISTANCE_ATTENUATION_ARB 0x8129
#endif //GL_POINT_DISTANCE_ATTENUATION_ARB
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_PointParameterfARB
#define GL_ALT_FUNDEF_PointParameterfARB
typedef void (*PFNGLPOINTPARAMETERFARBPROC_ALT)(GLenum,GLfloat);
static inline void glPointParameterfARB(GLenum pname1,GLfloat param1)
{
	static PFNGLPOINTPARAMETERFARBPROC_ALT fn=(PFNGLPOINTPARAMETERFARBPROC_ALT)glaltGetProcAddressExtension("glPointParameterfARB","GL_ARB_point_parameters");
	 fn(pname1,param1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_PointParameterfvARB
#define GL_ALT_FUNDEF_PointParameterfvARB
typedef void (*PFNGLPOINTPARAMETERFVARBPROC_ALT)(GLenum,const GLfloat *);
static inline void glPointParameterfvARB(GLenum pname1,const GLfloat * params1)
{
	static PFNGLPOINTPARAMETERFVARBPROC_ALT fn=(PFNGLPOINTPARAMETERFVARBPROC_ALT)glaltGetProcAddressExtension("glPointParameterfvARB","GL_ARB_point_parameters");
	 fn(pname1,params1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_ARB_point_sprite
#define GL_ARB_point_sprite
#ifndef GL_POINT_SPRITE_ARB
#define GL_POINT_SPRITE_ARB 0x8861
#endif //GL_POINT_SPRITE_ARB
#ifndef GL_COORD_REPLACE_ARB
#define GL_COORD_REPLACE_ARB 0x8862
#endif //GL_COORD_REPLACE_ARB
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_program_interface_query
#define GL_ARB_program_interface_query
#ifndef GL_NUM_COMPATIBLE_SUBROUTINES
#define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A
#endif //GL_NUM_COMPATIBLE_SUBROUTINES
#ifndef GL_COMPATIBLE_SUBROUTINES
#define GL_COMPATIBLE_SUBROUTINES 0x8E4B
#endif //GL_COMPATIBLE_SUBROUTINES
#ifndef GL_ATOMIC_COUNTER_BUFFER
#define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#endif //GL_ATOMIC_COUNTER_BUFFER
#ifndef GL_UNIFORM
#define GL_UNIFORM 0x92E1
#endif //GL_UNIFORM
#ifndef GL_UNIFORM_BLOCK
#define GL_UNIFORM_BLOCK 0x92E2
#endif //GL_UNIFORM_BLOCK
#ifndef GL_PROGRAM_INPUT
#define GL_PROGRAM_INPUT 0x92E3
#endif //GL_PROGRAM_INPUT
#ifndef GL_PROGRAM_OUTPUT
#define GL_PROGRAM_OUTPUT 0x92E4
#endif //GL_PROGRAM_OUTPUT
#ifndef GL_BUFFER_VARIABLE
#define GL_BUFFER_VARIABLE 0x92E5
#endif //GL_BUFFER_VARIABLE
#ifndef GL_SHADER_STORAGE_BLOCK
#define GL_SHADER_STORAGE_BLOCK 0x92E6
#endif //GL_SHADER_STORAGE_BLOCK
#ifndef GL_IS_PER_PATCH
#define GL_IS_PER_PATCH 0x92E7
#endif //GL_IS_PER_PATCH
#ifndef GL_VERTEX_SUBROUTINE
#define GL_VERTEX_SUBROUTINE 0x92E8
#endif //GL_VERTEX_SUBROUTINE
#ifndef GL_TESS_CONTROL_SUBROUTINE
#define GL_TESS_CONTROL_SUBROUTINE 0x92E9
#endif //GL_TESS_CONTROL_SUBROUTINE
#ifndef GL_TESS_EVALUATION_SUBROUTINE
#define GL_TESS_EVALUATION_SUBROUTINE 0x92EA
#endif //GL_TESS_EVALUATION_SUBROUTINE
#ifndef GL_GEOMETRY_SUBROUTINE
#define GL_GEOMETRY_SUBROUTINE 0x92EB
#endif //GL_GEOMETRY_SUBROUTINE
#ifndef GL_FRAGMENT_SUBROUTINE
#define GL_FRAGMENT_SUBROUTINE 0x92EC
#endif //GL_FRAGMENT_SUBROUTINE
#ifndef GL_COMPUTE_SUBROUTINE
#define GL_COMPUTE_SUBROUTINE 0x92ED
#endif //GL_COMPUTE_SUBROUTINE
#ifndef GL_VERTEX_SUBROUTINE_UNIFORM
#define GL_VERTEX_SUBROUTINE_UNIFORM 0x92EE
#endif //GL_VERTEX_SUBROUTINE_UNIFORM
#ifndef GL_TESS_CONTROL_SUBROUTINE_UNIFORM
#define GL_TESS_CONTROL_SUBROUTINE_UNIFORM 0x92EF
#endif //GL_TESS_CONTROL_SUBROUTINE_UNIFORM
#ifndef GL_TESS_EVALUATION_SUBROUTINE_UNIFORM
#define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM 0x92F0
#endif //GL_TESS_EVALUATION_SUBROUTINE_UNIFORM
#ifndef GL_GEOMETRY_SUBROUTINE_UNIFORM
#define GL_GEOMETRY_SUBROUTINE_UNIFORM 0x92F1
#endif //GL_GEOMETRY_SUBROUTINE_UNIFORM
#ifndef GL_FRAGMENT_SUBROUTINE_UNIFORM
#define GL_FRAGMENT_SUBROUTINE_UNIFORM 0x92F2
#endif //GL_FRAGMENT_SUBROUTINE_UNIFORM
#ifndef GL_COMPUTE_SUBROUTINE_UNIFORM
#define GL_COMPUTE_SUBROUTINE_UNIFORM 0x92F3
#endif //GL_COMPUTE_SUBROUTINE_UNIFORM
#ifndef GL_TRANSFORM_FEEDBACK_VARYING
#define GL_TRANSFORM_FEEDBACK_VARYING 0x92F4
#endif //GL_TRANSFORM_FEEDBACK_VARYING
#ifndef GL_ACTIVE_RESOURCES
#define GL_ACTIVE_RESOURCES 0x92F5
#endif //GL_ACTIVE_RESOURCES
#ifndef GL_MAX_NAME_LENGTH
#define GL_MAX_NAME_LENGTH 0x92F6
#endif //GL_MAX_NAME_LENGTH
#ifndef GL_MAX_NUM_ACTIVE_VARIABLES
#define GL_MAX_NUM_ACTIVE_VARIABLES 0x92F7
#endif //GL_MAX_NUM_ACTIVE_VARIABLES
#ifndef GL_MAX_NUM_COMPATIBLE_SUBROUTINES
#define GL_MAX_NUM_COMPATIBLE_SUBROUTINES 0x92F8
#endif //GL_MAX_NUM_COMPATIBLE_SUBROUTINES
#ifndef GL_NAME_LENGTH
#define GL_NAME_LENGTH 0x92F9
#endif //GL_NAME_LENGTH
#ifndef GL_TYPE
#define GL_TYPE 0x92FA
#endif //GL_TYPE
#ifndef GL_ARRAY_SIZE
#define GL_ARRAY_SIZE 0x92FB
#endif //GL_ARRAY_SIZE
#ifndef GL_OFFSET
#define GL_OFFSET 0x92FC
#endif //GL_OFFSET
#ifndef GL_BLOCK_INDEX
#define GL_BLOCK_INDEX 0x92FD
#endif //GL_BLOCK_INDEX
#ifndef GL_ARRAY_STRIDE
#define GL_ARRAY_STRIDE 0x92FE
#endif //GL_ARRAY_STRIDE
#ifndef GL_MATRIX_STRIDE
#define GL_MATRIX_STRIDE 0x92FF
#endif //GL_MATRIX_STRIDE
#ifndef GL_IS_ROW_MAJOR
#define GL_IS_ROW_MAJOR 0x9300
#endif //GL_IS_ROW_MAJOR
#ifndef GL_ATOMIC_COUNTER_BUFFER_INDEX
#define GL_ATOMIC_COUNTER_BUFFER_INDEX 0x9301
#endif //GL_ATOMIC_COUNTER_BUFFER_INDEX
#ifndef GL_BUFFER_BINDING
#define GL_BUFFER_BINDING 0x9302
#endif //GL_BUFFER_BINDING
#ifndef GL_BUFFER_DATA_SIZE
#define GL_BUFFER_DATA_SIZE 0x9303
#endif //GL_BUFFER_DATA_SIZE
#ifndef GL_NUM_ACTIVE_VARIABLES
#define GL_NUM_ACTIVE_VARIABLES 0x9304
#endif //GL_NUM_ACTIVE_VARIABLES
#ifndef GL_ACTIVE_VARIABLES
#define GL_ACTIVE_VARIABLES 0x9305
#endif //GL_ACTIVE_VARIABLES
#ifndef GL_REFERENCED_BY_VERTEX_SHADER
#define GL_REFERENCED_BY_VERTEX_SHADER 0x9306
#endif //GL_REFERENCED_BY_VERTEX_SHADER
#ifndef GL_REFERENCED_BY_TESS_CONTROL_SHADER
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0x9307
#endif //GL_REFERENCED_BY_TESS_CONTROL_SHADER
#ifndef GL_REFERENCED_BY_TESS_EVALUATION_SHADER
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0x9308
#endif //GL_REFERENCED_BY_TESS_EVALUATION_SHADER
#ifndef GL_REFERENCED_BY_GEOMETRY_SHADER
#define GL_REFERENCED_BY_GEOMETRY_SHADER 0x9309
#endif //GL_REFERENCED_BY_GEOMETRY_SHADER
#ifndef GL_REFERENCED_BY_FRAGMENT_SHADER
#define GL_REFERENCED_BY_FRAGMENT_SHADER 0x930A
#endif //GL_REFERENCED_BY_FRAGMENT_SHADER
#ifndef GL_REFERENCED_BY_COMPUTE_SHADER
#define GL_REFERENCED_BY_COMPUTE_SHADER 0x930B
#endif //GL_REFERENCED_BY_COMPUTE_SHADER
#ifndef GL_TOP_LEVEL_ARRAY_SIZE
#define GL_TOP_LEVEL_ARRAY_SIZE 0x930C
#endif //GL_TOP_LEVEL_ARRAY_SIZE
#ifndef GL_TOP_LEVEL_ARRAY_STRIDE
#define GL_TOP_LEVEL_ARRAY_STRIDE 0x930D
#endif //GL_TOP_LEVEL_ARRAY_STRIDE
#ifndef GL_LOCATION
#define GL_LOCATION 0x930E
#endif //GL_LOCATION
#ifndef GL_LOCATION_INDEX
#define GL_LOCATION_INDEX 0x930F
#endif //GL_LOCATION_INDEX
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetProgramInterfaceiv
#define GL_ALT_FUNDEF_GetProgramInterfaceiv
typedef void (*PFNGLGETPROGRAMINTERFACEIVPROC_ALT)(GLuint,GLenum,GLenum,GLint *);
static inline void glGetProgramInterfaceiv(GLuint program1,GLenum programInterface1,GLenum pname1,GLint * params1)
{
	static PFNGLGETPROGRAMINTERFACEIVPROC_ALT fn=(PFNGLGETPROGRAMINTERFACEIVPROC_ALT)glaltGetProcAddressExtension("glGetProgramInterfaceiv","GL_ARB_program_interface_query");
	 fn(program1,programInterface1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetProgramResourceIndex
#define GL_ALT_FUNDEF_GetProgramResourceIndex
typedef GLuint (*PFNGLGETPROGRAMRESOURCEINDEXPROC_ALT)(GLuint,GLenum,const GLchar *);
static inline GLuint glGetProgramResourceIndex(GLuint program1,GLenum programInterface1,const GLchar * name1)
{
	static PFNGLGETPROGRAMRESOURCEINDEXPROC_ALT fn=(PFNGLGETPROGRAMRESOURCEINDEXPROC_ALT)glaltGetProcAddressExtension("glGetProgramResourceIndex","GL_ARB_program_interface_query");
	return fn(program1,programInterface1,name1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetProgramResourceLocation
#define GL_ALT_FUNDEF_GetProgramResourceLocation
typedef GLint (*PFNGLGETPROGRAMRESOURCELOCATIONPROC_ALT)(GLuint,GLenum,const GLchar *);
static inline GLint glGetProgramResourceLocation(GLuint program1,GLenum programInterface1,const GLchar * name1)
{
	static PFNGLGETPROGRAMRESOURCELOCATIONPROC_ALT fn=(PFNGLGETPROGRAMRESOURCELOCATIONPROC_ALT)glaltGetProcAddressExtension("glGetProgramResourceLocation","GL_ARB_program_interface_query");
	return fn(program1,programInterface1,name1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetProgramResourceLocationIndex
#define GL_ALT_FUNDEF_GetProgramResourceLocationIndex
typedef GLint (*PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC_ALT)(GLuint,GLenum,const GLchar *);
static inline GLint glGetProgramResourceLocationIndex(GLuint program1,GLenum programInterface1,const GLchar * name1)
{
	static PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC_ALT fn=(PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC_ALT)glaltGetProcAddressExtension("glGetProgramResourceLocationIndex","GL_ARB_program_interface_query");
	return fn(program1,programInterface1,name1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetProgramResourceName
#define GL_ALT_FUNDEF_GetProgramResourceName
typedef void (*PFNGLGETPROGRAMRESOURCENAMEPROC_ALT)(GLuint,GLenum,GLuint,GLsizei,GLsizei *,GLchar *);
static inline void glGetProgramResourceName(GLuint program1,GLenum programInterface1,GLuint index1,GLsizei bufSize1,GLsizei * length1,GLchar * name1)
{
	static PFNGLGETPROGRAMRESOURCENAMEPROC_ALT fn=(PFNGLGETPROGRAMRESOURCENAMEPROC_ALT)glaltGetProcAddressExtension("glGetProgramResourceName","GL_ARB_program_interface_query");
	 fn(program1,programInterface1,index1,bufSize1,length1,name1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetProgramResourceiv
#define GL_ALT_FUNDEF_GetProgramResourceiv
typedef void (*PFNGLGETPROGRAMRESOURCEIVPROC_ALT)(GLuint,GLenum,GLuint,GLsizei,const GLenum *,GLsizei,GLsizei *,GLint *);
static inline void glGetProgramResourceiv(GLuint program1,GLenum programInterface1,GLuint index1,GLsizei propCount1,const GLenum * props1,GLsizei bufSize1,GLsizei * length1,GLint * params1)
{
	static PFNGLGETPROGRAMRESOURCEIVPROC_ALT fn=(PFNGLGETPROGRAMRESOURCEIVPROC_ALT)glaltGetProcAddressExtension("glGetProgramResourceiv","GL_ARB_program_interface_query");
	 fn(program1,programInterface1,index1,propCount1,props1,bufSize1,length1,params1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_provoking_vertex
#define GL_ARB_provoking_vertex
#ifndef GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#endif //GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
#ifndef GL_FIRST_VERTEX_CONVENTION
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#endif //GL_FIRST_VERTEX_CONVENTION
#ifndef GL_LAST_VERTEX_CONVENTION
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#endif //GL_LAST_VERTEX_CONVENTION
#ifndef GL_PROVOKING_VERTEX
#define GL_PROVOKING_VERTEX 0x8E4F
#endif //GL_PROVOKING_VERTEX
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ProvokingVertex
#define GL_ALT_FUNDEF_ProvokingVertex
typedef void (*PFNGLPROVOKINGVERTEXPROC_ALT)(GLenum);
static inline void glProvokingVertex(GLenum mode1)
{
	static PFNGLPROVOKINGVERTEXPROC_ALT fn=(PFNGLPROVOKINGVERTEXPROC_ALT)glaltGetProcAddressExtension("glProvokingVertex","GL_ARB_provoking_vertex");
	 fn(mode1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_query_buffer_object
#define GL_ARB_query_buffer_object
#ifndef GL_QUERY_BUFFER_BARRIER_BIT
#define GL_QUERY_BUFFER_BARRIER_BIT 0x00008000
#endif //GL_QUERY_BUFFER_BARRIER_BIT
#ifndef GL_QUERY_BUFFER
#define GL_QUERY_BUFFER 0x9192
#endif //GL_QUERY_BUFFER
#ifndef GL_QUERY_BUFFER_BINDING
#define GL_QUERY_BUFFER_BINDING 0x9193
#endif //GL_QUERY_BUFFER_BINDING
#ifndef GL_QUERY_RESULT_NO_WAIT
#define GL_QUERY_RESULT_NO_WAIT 0x9194
#endif //GL_QUERY_RESULT_NO_WAIT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_robust_buffer_access_behavior
#define GL_ARB_robust_buffer_access_behavior
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_robustness
#define GL_ARB_robustness
#ifndef GL_NO_ERROR
#define GL_NO_ERROR 0
#endif //GL_NO_ERROR
#ifndef GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB 0x00000004
#endif //GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB
#ifndef GL_LOSE_CONTEXT_ON_RESET_ARB
#define GL_LOSE_CONTEXT_ON_RESET_ARB 0x8252
#endif //GL_LOSE_CONTEXT_ON_RESET_ARB
#ifndef GL_GUILTY_CONTEXT_RESET_ARB
#define GL_GUILTY_CONTEXT_RESET_ARB 0x8253
#endif //GL_GUILTY_CONTEXT_RESET_ARB
#ifndef GL_INNOCENT_CONTEXT_RESET_ARB
#define GL_INNOCENT_CONTEXT_RESET_ARB 0x8254
#endif //GL_INNOCENT_CONTEXT_RESET_ARB
#ifndef GL_UNKNOWN_CONTEXT_RESET_ARB
#define GL_UNKNOWN_CONTEXT_RESET_ARB 0x8255
#endif //GL_UNKNOWN_CONTEXT_RESET_ARB
#ifndef GL_RESET_NOTIFICATION_STRATEGY_ARB
#define GL_RESET_NOTIFICATION_STRATEGY_ARB 0x8256
#endif //GL_RESET_NOTIFICATION_STRATEGY_ARB
#ifndef GL_NO_RESET_NOTIFICATION_ARB
#define GL_NO_RESET_NOTIFICATION_ARB 0x8261
#endif //GL_NO_RESET_NOTIFICATION_ARB
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetGraphicsResetStatusARB
#define GL_ALT_FUNDEF_GetGraphicsResetStatusARB
typedef GLenum (*PFNGLGETGRAPHICSRESETSTATUSARBPROC_ALT)();
static inline GLenum glGetGraphicsResetStatusARB()
{
	static PFNGLGETGRAPHICSRESETSTATUSARBPROC_ALT fn=(PFNGLGETGRAPHICSRESETSTATUSARBPROC_ALT)glaltGetProcAddressExtension("glGetGraphicsResetStatusARB","GL_ARB_robustness");
	return fn();
}
#endif

#ifndef	GL_ALT_FUNDEF_GetnCompressedTexImageARB
#define GL_ALT_FUNDEF_GetnCompressedTexImageARB
typedef void (*PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC_ALT)(GLenum,GLint,GLsizei,void *);
static inline void glGetnCompressedTexImageARB(GLenum target1,GLint lod1,GLsizei bufSize1,void * img1)
{
	static PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC_ALT fn=(PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC_ALT)glaltGetProcAddressExtension("glGetnCompressedTexImageARB","GL_ARB_robustness");
	 fn(target1,lod1,bufSize1,img1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetnTexImageARB
#define GL_ALT_FUNDEF_GetnTexImageARB
typedef void (*PFNGLGETNTEXIMAGEARBPROC_ALT)(GLenum,GLint,GLenum,GLenum,GLsizei,void *);
static inline void glGetnTexImageARB(GLenum target1,GLint level1,GLenum format1,GLenum type1,GLsizei bufSize1,void * img1)
{
	static PFNGLGETNTEXIMAGEARBPROC_ALT fn=(PFNGLGETNTEXIMAGEARBPROC_ALT)glaltGetProcAddressExtension("glGetnTexImageARB","GL_ARB_robustness");
	 fn(target1,level1,format1,type1,bufSize1,img1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetnUniformdvARB
#define GL_ALT_FUNDEF_GetnUniformdvARB
typedef void (*PFNGLGETNUNIFORMDVARBPROC_ALT)(GLuint,GLint,GLsizei,GLdouble *);
static inline void glGetnUniformdvARB(GLuint program1,GLint location1,GLsizei bufSize1,GLdouble * params1)
{
	static PFNGLGETNUNIFORMDVARBPROC_ALT fn=(PFNGLGETNUNIFORMDVARBPROC_ALT)glaltGetProcAddressExtension("glGetnUniformdvARB","GL_ARB_robustness");
	 fn(program1,location1,bufSize1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetnUniformfvARB
#define GL_ALT_FUNDEF_GetnUniformfvARB
typedef void (*PFNGLGETNUNIFORMFVARBPROC_ALT)(GLuint,GLint,GLsizei,GLfloat *);
static inline void glGetnUniformfvARB(GLuint program1,GLint location1,GLsizei bufSize1,GLfloat * params1)
{
	static PFNGLGETNUNIFORMFVARBPROC_ALT fn=(PFNGLGETNUNIFORMFVARBPROC_ALT)glaltGetProcAddressExtension("glGetnUniformfvARB","GL_ARB_robustness");
	 fn(program1,location1,bufSize1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetnUniformivARB
#define GL_ALT_FUNDEF_GetnUniformivARB
typedef void (*PFNGLGETNUNIFORMIVARBPROC_ALT)(GLuint,GLint,GLsizei,GLint *);
static inline void glGetnUniformivARB(GLuint program1,GLint location1,GLsizei bufSize1,GLint * params1)
{
	static PFNGLGETNUNIFORMIVARBPROC_ALT fn=(PFNGLGETNUNIFORMIVARBPROC_ALT)glaltGetProcAddressExtension("glGetnUniformivARB","GL_ARB_robustness");
	 fn(program1,location1,bufSize1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetnUniformuivARB
#define GL_ALT_FUNDEF_GetnUniformuivARB
typedef void (*PFNGLGETNUNIFORMUIVARBPROC_ALT)(GLuint,GLint,GLsizei,GLuint *);
static inline void glGetnUniformuivARB(GLuint program1,GLint location1,GLsizei bufSize1,GLuint * params1)
{
	static PFNGLGETNUNIFORMUIVARBPROC_ALT fn=(PFNGLGETNUNIFORMUIVARBPROC_ALT)glaltGetProcAddressExtension("glGetnUniformuivARB","GL_ARB_robustness");
	 fn(program1,location1,bufSize1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ReadnPixelsARB
#define GL_ALT_FUNDEF_ReadnPixelsARB
typedef void (*PFNGLREADNPIXELSARBPROC_ALT)(GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,GLsizei,void *);
static inline void glReadnPixelsARB(GLint x1,GLint y1,GLsizei width1,GLsizei height1,GLenum format1,GLenum type1,GLsizei bufSize1,void * data1)
{
	static PFNGLREADNPIXELSARBPROC_ALT fn=(PFNGLREADNPIXELSARBPROC_ALT)glaltGetProcAddressExtension("glReadnPixelsARB","GL_ARB_robustness");
	 fn(x1,y1,width1,height1,format1,type1,bufSize1,data1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_ARB_robustness_isolation
#define GL_ARB_robustness_isolation
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_sample_shading
#define GL_ARB_sample_shading
#ifndef GL_SAMPLE_SHADING_ARB
#define GL_SAMPLE_SHADING_ARB 0x8C36
#endif //GL_SAMPLE_SHADING_ARB
#ifndef GL_MIN_SAMPLE_SHADING_VALUE_ARB
#define GL_MIN_SAMPLE_SHADING_VALUE_ARB 0x8C37
#endif //GL_MIN_SAMPLE_SHADING_VALUE_ARB
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_MinSampleShadingARB
#define GL_ALT_FUNDEF_MinSampleShadingARB
typedef void (*PFNGLMINSAMPLESHADINGARBPROC_ALT)(GLfloat);
static inline void glMinSampleShadingARB(GLfloat value1)
{
	static PFNGLMINSAMPLESHADINGARBPROC_ALT fn=(PFNGLMINSAMPLESHADINGARBPROC_ALT)glaltGetProcAddressExtension("glMinSampleShadingARB","GL_ARB_sample_shading");
	 fn(value1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_ARB_sampler_objects
#define GL_ARB_sampler_objects
#ifndef GL_SAMPLER_BINDING
#define GL_SAMPLER_BINDING 0x8919
#endif //GL_SAMPLER_BINDING
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BindSampler
#define GL_ALT_FUNDEF_BindSampler
typedef void (*PFNGLBINDSAMPLERPROC_ALT)(GLuint,GLuint);
static inline void glBindSampler(GLuint unit1,GLuint sampler1)
{
	static PFNGLBINDSAMPLERPROC_ALT fn=(PFNGLBINDSAMPLERPROC_ALT)glaltGetProcAddressExtension("glBindSampler","GL_ARB_sampler_objects");
	 fn(unit1,sampler1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DeleteSamplers
#define GL_ALT_FUNDEF_DeleteSamplers
typedef void (*PFNGLDELETESAMPLERSPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteSamplers(GLsizei count1,const GLuint * samplers1)
{
	static PFNGLDELETESAMPLERSPROC_ALT fn=(PFNGLDELETESAMPLERSPROC_ALT)glaltGetProcAddressExtension("glDeleteSamplers","GL_ARB_sampler_objects");
	 fn(count1,samplers1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GenSamplers
#define GL_ALT_FUNDEF_GenSamplers
typedef void (*PFNGLGENSAMPLERSPROC_ALT)(GLsizei,GLuint *);
static inline void glGenSamplers(GLsizei count1,GLuint * samplers1)
{
	static PFNGLGENSAMPLERSPROC_ALT fn=(PFNGLGENSAMPLERSPROC_ALT)glaltGetProcAddressExtension("glGenSamplers","GL_ARB_sampler_objects");
	 fn(count1,samplers1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetSamplerParameterIiv
#define GL_ALT_FUNDEF_GetSamplerParameterIiv
typedef void (*PFNGLGETSAMPLERPARAMETERIIVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetSamplerParameterIiv(GLuint sampler1,GLenum pname1,GLint * params1)
{
	static PFNGLGETSAMPLERPARAMETERIIVPROC_ALT fn=(PFNGLGETSAMPLERPARAMETERIIVPROC_ALT)glaltGetProcAddressExtension("glGetSamplerParameterIiv","GL_ARB_sampler_objects");
	 fn(sampler1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetSamplerParameterIuiv
#define GL_ALT_FUNDEF_GetSamplerParameterIuiv
typedef void (*PFNGLGETSAMPLERPARAMETERIUIVPROC_ALT)(GLuint,GLenum,GLuint *);
static inline void glGetSamplerParameterIuiv(GLuint sampler1,GLenum pname1,GLuint * params1)
{
	static PFNGLGETSAMPLERPARAMETERIUIVPROC_ALT fn=(PFNGLGETSAMPLERPARAMETERIUIVPROC_ALT)glaltGetProcAddressExtension("glGetSamplerParameterIuiv","GL_ARB_sampler_objects");
	 fn(sampler1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetSamplerParameterfv
#define GL_ALT_FUNDEF_GetSamplerParameterfv
typedef void (*PFNGLGETSAMPLERPARAMETERFVPROC_ALT)(GLuint,GLenum,GLfloat *);
static inline void glGetSamplerParameterfv(GLuint sampler1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETSAMPLERPARAMETERFVPROC_ALT fn=(PFNGLGETSAMPLERPARAMETERFVPROC_ALT)glaltGetProcAddressExtension("glGetSamplerParameterfv","GL_ARB_sampler_objects");
	 fn(sampler1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetSamplerParameteriv
#define GL_ALT_FUNDEF_GetSamplerParameteriv
typedef void (*PFNGLGETSAMPLERPARAMETERIVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetSamplerParameteriv(GLuint sampler1,GLenum pname1,GLint * params1)
{
	static PFNGLGETSAMPLERPARAMETERIVPROC_ALT fn=(PFNGLGETSAMPLERPARAMETERIVPROC_ALT)glaltGetProcAddressExtension("glGetSamplerParameteriv","GL_ARB_sampler_objects");
	 fn(sampler1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IsSampler
#define GL_ALT_FUNDEF_IsSampler
typedef GLboolean (*PFNGLISSAMPLERPROC_ALT)(GLuint);
static inline GLboolean glIsSampler(GLuint sampler1)
{
	static PFNGLISSAMPLERPROC_ALT fn=(PFNGLISSAMPLERPROC_ALT)glaltGetProcAddressExtension("glIsSampler","GL_ARB_sampler_objects");
	return fn(sampler1);
}
#endif

#ifndef	GL_ALT_FUNDEF_SamplerParameterIiv
#define GL_ALT_FUNDEF_SamplerParameterIiv
typedef void (*PFNGLSAMPLERPARAMETERIIVPROC_ALT)(GLuint,GLenum,const GLint *);
static inline void glSamplerParameterIiv(GLuint sampler1,GLenum pname1,const GLint * param1)
{
	static PFNGLSAMPLERPARAMETERIIVPROC_ALT fn=(PFNGLSAMPLERPARAMETERIIVPROC_ALT)glaltGetProcAddressExtension("glSamplerParameterIiv","GL_ARB_sampler_objects");
	 fn(sampler1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_SamplerParameterIuiv
#define GL_ALT_FUNDEF_SamplerParameterIuiv
typedef void (*PFNGLSAMPLERPARAMETERIUIVPROC_ALT)(GLuint,GLenum,const GLuint *);
static inline void glSamplerParameterIuiv(GLuint sampler1,GLenum pname1,const GLuint * param1)
{
	static PFNGLSAMPLERPARAMETERIUIVPROC_ALT fn=(PFNGLSAMPLERPARAMETERIUIVPROC_ALT)glaltGetProcAddressExtension("glSamplerParameterIuiv","GL_ARB_sampler_objects");
	 fn(sampler1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_SamplerParameterf
#define GL_ALT_FUNDEF_SamplerParameterf
typedef void (*PFNGLSAMPLERPARAMETERFPROC_ALT)(GLuint,GLenum,GLfloat);
static inline void glSamplerParameterf(GLuint sampler1,GLenum pname1,GLfloat param1)
{
	static PFNGLSAMPLERPARAMETERFPROC_ALT fn=(PFNGLSAMPLERPARAMETERFPROC_ALT)glaltGetProcAddressExtension("glSamplerParameterf","GL_ARB_sampler_objects");
	 fn(sampler1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_SamplerParameterfv
#define GL_ALT_FUNDEF_SamplerParameterfv
typedef void (*PFNGLSAMPLERPARAMETERFVPROC_ALT)(GLuint,GLenum,const GLfloat *);
static inline void glSamplerParameterfv(GLuint sampler1,GLenum pname1,const GLfloat * param1)
{
	static PFNGLSAMPLERPARAMETERFVPROC_ALT fn=(PFNGLSAMPLERPARAMETERFVPROC_ALT)glaltGetProcAddressExtension("glSamplerParameterfv","GL_ARB_sampler_objects");
	 fn(sampler1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_SamplerParameteri
#define GL_ALT_FUNDEF_SamplerParameteri
typedef void (*PFNGLSAMPLERPARAMETERIPROC_ALT)(GLuint,GLenum,GLint);
static inline void glSamplerParameteri(GLuint sampler1,GLenum pname1,GLint param1)
{
	static PFNGLSAMPLERPARAMETERIPROC_ALT fn=(PFNGLSAMPLERPARAMETERIPROC_ALT)glaltGetProcAddressExtension("glSamplerParameteri","GL_ARB_sampler_objects");
	 fn(sampler1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_SamplerParameteriv
#define GL_ALT_FUNDEF_SamplerParameteriv
typedef void (*PFNGLSAMPLERPARAMETERIVPROC_ALT)(GLuint,GLenum,const GLint *);
static inline void glSamplerParameteriv(GLuint sampler1,GLenum pname1,const GLint * param1)
{
	static PFNGLSAMPLERPARAMETERIVPROC_ALT fn=(PFNGLSAMPLERPARAMETERIVPROC_ALT)glaltGetProcAddressExtension("glSamplerParameteriv","GL_ARB_sampler_objects");
	 fn(sampler1,pname1,param1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_seamless_cube_map
#define GL_ARB_seamless_cube_map
#ifndef GL_TEXTURE_CUBE_MAP_SEAMLESS
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#endif //GL_TEXTURE_CUBE_MAP_SEAMLESS
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_seamless_cubemap_per_texture
#define GL_ARB_seamless_cubemap_per_texture
#ifndef GL_TEXTURE_CUBE_MAP_SEAMLESS
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#endif //GL_TEXTURE_CUBE_MAP_SEAMLESS
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_separate_shader_objects
#define GL_ARB_separate_shader_objects
#ifndef GL_VERTEX_SHADER_BIT
#define GL_VERTEX_SHADER_BIT 0x00000001
#endif //GL_VERTEX_SHADER_BIT
#ifndef GL_FRAGMENT_SHADER_BIT
#define GL_FRAGMENT_SHADER_BIT 0x00000002
#endif //GL_FRAGMENT_SHADER_BIT
#ifndef GL_GEOMETRY_SHADER_BIT
#define GL_GEOMETRY_SHADER_BIT 0x00000004
#endif //GL_GEOMETRY_SHADER_BIT
#ifndef GL_TESS_CONTROL_SHADER_BIT
#define GL_TESS_CONTROL_SHADER_BIT 0x00000008
#endif //GL_TESS_CONTROL_SHADER_BIT
#ifndef GL_TESS_EVALUATION_SHADER_BIT
#define GL_TESS_EVALUATION_SHADER_BIT 0x00000010
#endif //GL_TESS_EVALUATION_SHADER_BIT
#ifndef GL_PROGRAM_SEPARABLE
#define GL_PROGRAM_SEPARABLE 0x8258
#endif //GL_PROGRAM_SEPARABLE
#ifndef GL_ACTIVE_PROGRAM
#define GL_ACTIVE_PROGRAM 0x8259
#endif //GL_ACTIVE_PROGRAM
#ifndef GL_PROGRAM_PIPELINE_BINDING
#define GL_PROGRAM_PIPELINE_BINDING 0x825A
#endif //GL_PROGRAM_PIPELINE_BINDING
#ifndef GL_ALL_SHADER_BITS
#define GL_ALL_SHADER_BITS 0xFFFFFFFF
#endif //GL_ALL_SHADER_BITS
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ActiveShaderProgram
#define GL_ALT_FUNDEF_ActiveShaderProgram
typedef void (*PFNGLACTIVESHADERPROGRAMPROC_ALT)(GLuint,GLuint);
static inline void glActiveShaderProgram(GLuint pipeline1,GLuint program1)
{
	static PFNGLACTIVESHADERPROGRAMPROC_ALT fn=(PFNGLACTIVESHADERPROGRAMPROC_ALT)glaltGetProcAddressExtension("glActiveShaderProgram","GL_ARB_separate_shader_objects");
	 fn(pipeline1,program1);
}
#endif

#ifndef	GL_ALT_FUNDEF_BindProgramPipeline
#define GL_ALT_FUNDEF_BindProgramPipeline
typedef void (*PFNGLBINDPROGRAMPIPELINEPROC_ALT)(GLuint);
static inline void glBindProgramPipeline(GLuint pipeline1)
{
	static PFNGLBINDPROGRAMPIPELINEPROC_ALT fn=(PFNGLBINDPROGRAMPIPELINEPROC_ALT)glaltGetProcAddressExtension("glBindProgramPipeline","GL_ARB_separate_shader_objects");
	 fn(pipeline1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CreateShaderProgramv
#define GL_ALT_FUNDEF_CreateShaderProgramv
typedef GLuint (*PFNGLCREATESHADERPROGRAMVPROC_ALT)(GLenum,GLsizei,const GLchar *const*);
static inline GLuint glCreateShaderProgramv(GLenum type1,GLsizei count1,const GLchar *const* strings1)
{
	static PFNGLCREATESHADERPROGRAMVPROC_ALT fn=(PFNGLCREATESHADERPROGRAMVPROC_ALT)glaltGetProcAddressExtension("glCreateShaderProgramv","GL_ARB_separate_shader_objects");
	return fn(type1,count1,strings1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DeleteProgramPipelines
#define GL_ALT_FUNDEF_DeleteProgramPipelines
typedef void (*PFNGLDELETEPROGRAMPIPELINESPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteProgramPipelines(GLsizei n1,const GLuint * pipelines1)
{
	static PFNGLDELETEPROGRAMPIPELINESPROC_ALT fn=(PFNGLDELETEPROGRAMPIPELINESPROC_ALT)glaltGetProcAddressExtension("glDeleteProgramPipelines","GL_ARB_separate_shader_objects");
	 fn(n1,pipelines1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GenProgramPipelines
#define GL_ALT_FUNDEF_GenProgramPipelines
typedef void (*PFNGLGENPROGRAMPIPELINESPROC_ALT)(GLsizei,GLuint *);
static inline void glGenProgramPipelines(GLsizei n1,GLuint * pipelines1)
{
	static PFNGLGENPROGRAMPIPELINESPROC_ALT fn=(PFNGLGENPROGRAMPIPELINESPROC_ALT)glaltGetProcAddressExtension("glGenProgramPipelines","GL_ARB_separate_shader_objects");
	 fn(n1,pipelines1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetProgramPipelineInfoLog
#define GL_ALT_FUNDEF_GetProgramPipelineInfoLog
typedef void (*PFNGLGETPROGRAMPIPELINEINFOLOGPROC_ALT)(GLuint,GLsizei,GLsizei *,GLchar *);
static inline void glGetProgramPipelineInfoLog(GLuint pipeline1,GLsizei bufSize1,GLsizei * length1,GLchar * infoLog1)
{
	static PFNGLGETPROGRAMPIPELINEINFOLOGPROC_ALT fn=(PFNGLGETPROGRAMPIPELINEINFOLOGPROC_ALT)glaltGetProcAddressExtension("glGetProgramPipelineInfoLog","GL_ARB_separate_shader_objects");
	 fn(pipeline1,bufSize1,length1,infoLog1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetProgramPipelineiv
#define GL_ALT_FUNDEF_GetProgramPipelineiv
typedef void (*PFNGLGETPROGRAMPIPELINEIVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetProgramPipelineiv(GLuint pipeline1,GLenum pname1,GLint * params1)
{
	static PFNGLGETPROGRAMPIPELINEIVPROC_ALT fn=(PFNGLGETPROGRAMPIPELINEIVPROC_ALT)glaltGetProcAddressExtension("glGetProgramPipelineiv","GL_ARB_separate_shader_objects");
	 fn(pipeline1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IsProgramPipeline
#define GL_ALT_FUNDEF_IsProgramPipeline
typedef GLboolean (*PFNGLISPROGRAMPIPELINEPROC_ALT)(GLuint);
static inline GLboolean glIsProgramPipeline(GLuint pipeline1)
{
	static PFNGLISPROGRAMPIPELINEPROC_ALT fn=(PFNGLISPROGRAMPIPELINEPROC_ALT)glaltGetProcAddressExtension("glIsProgramPipeline","GL_ARB_separate_shader_objects");
	return fn(pipeline1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform1d
#define GL_ALT_FUNDEF_ProgramUniform1d
typedef void (*PFNGLPROGRAMUNIFORM1DPROC_ALT)(GLuint,GLint,GLdouble);
static inline void glProgramUniform1d(GLuint program1,GLint location1,GLdouble v01)
{
	static PFNGLPROGRAMUNIFORM1DPROC_ALT fn=(PFNGLPROGRAMUNIFORM1DPROC_ALT)glaltGetProcAddressExtension("glProgramUniform1d","GL_ARB_separate_shader_objects");
	 fn(program1,location1,v01);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform1dv
#define GL_ALT_FUNDEF_ProgramUniform1dv
typedef void (*PFNGLPROGRAMUNIFORM1DVPROC_ALT)(GLuint,GLint,GLsizei,const GLdouble *);
static inline void glProgramUniform1dv(GLuint program1,GLint location1,GLsizei count1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORM1DVPROC_ALT fn=(PFNGLPROGRAMUNIFORM1DVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform1dv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform1f
#define GL_ALT_FUNDEF_ProgramUniform1f
typedef void (*PFNGLPROGRAMUNIFORM1FPROC_ALT)(GLuint,GLint,GLfloat);
static inline void glProgramUniform1f(GLuint program1,GLint location1,GLfloat v01)
{
	static PFNGLPROGRAMUNIFORM1FPROC_ALT fn=(PFNGLPROGRAMUNIFORM1FPROC_ALT)glaltGetProcAddressExtension("glProgramUniform1f","GL_ARB_separate_shader_objects");
	 fn(program1,location1,v01);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform1fv
#define GL_ALT_FUNDEF_ProgramUniform1fv
typedef void (*PFNGLPROGRAMUNIFORM1FVPROC_ALT)(GLuint,GLint,GLsizei,const GLfloat *);
static inline void glProgramUniform1fv(GLuint program1,GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORM1FVPROC_ALT fn=(PFNGLPROGRAMUNIFORM1FVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform1fv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform1i
#define GL_ALT_FUNDEF_ProgramUniform1i
typedef void (*PFNGLPROGRAMUNIFORM1IPROC_ALT)(GLuint,GLint,GLint);
static inline void glProgramUniform1i(GLuint program1,GLint location1,GLint v01)
{
	static PFNGLPROGRAMUNIFORM1IPROC_ALT fn=(PFNGLPROGRAMUNIFORM1IPROC_ALT)glaltGetProcAddressExtension("glProgramUniform1i","GL_ARB_separate_shader_objects");
	 fn(program1,location1,v01);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform1iv
#define GL_ALT_FUNDEF_ProgramUniform1iv
typedef void (*PFNGLPROGRAMUNIFORM1IVPROC_ALT)(GLuint,GLint,GLsizei,const GLint *);
static inline void glProgramUniform1iv(GLuint program1,GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLPROGRAMUNIFORM1IVPROC_ALT fn=(PFNGLPROGRAMUNIFORM1IVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform1iv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform1ui
#define GL_ALT_FUNDEF_ProgramUniform1ui
typedef void (*PFNGLPROGRAMUNIFORM1UIPROC_ALT)(GLuint,GLint,GLuint);
static inline void glProgramUniform1ui(GLuint program1,GLint location1,GLuint v01)
{
	static PFNGLPROGRAMUNIFORM1UIPROC_ALT fn=(PFNGLPROGRAMUNIFORM1UIPROC_ALT)glaltGetProcAddressExtension("glProgramUniform1ui","GL_ARB_separate_shader_objects");
	 fn(program1,location1,v01);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform1uiv
#define GL_ALT_FUNDEF_ProgramUniform1uiv
typedef void (*PFNGLPROGRAMUNIFORM1UIVPROC_ALT)(GLuint,GLint,GLsizei,const GLuint *);
static inline void glProgramUniform1uiv(GLuint program1,GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLPROGRAMUNIFORM1UIVPROC_ALT fn=(PFNGLPROGRAMUNIFORM1UIVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform1uiv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform2d
#define GL_ALT_FUNDEF_ProgramUniform2d
typedef void (*PFNGLPROGRAMUNIFORM2DPROC_ALT)(GLuint,GLint,GLdouble,GLdouble);
static inline void glProgramUniform2d(GLuint program1,GLint location1,GLdouble v01,GLdouble v11)
{
	static PFNGLPROGRAMUNIFORM2DPROC_ALT fn=(PFNGLPROGRAMUNIFORM2DPROC_ALT)glaltGetProcAddressExtension("glProgramUniform2d","GL_ARB_separate_shader_objects");
	 fn(program1,location1,v01,v11);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform2dv
#define GL_ALT_FUNDEF_ProgramUniform2dv
typedef void (*PFNGLPROGRAMUNIFORM2DVPROC_ALT)(GLuint,GLint,GLsizei,const GLdouble *);
static inline void glProgramUniform2dv(GLuint program1,GLint location1,GLsizei count1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORM2DVPROC_ALT fn=(PFNGLPROGRAMUNIFORM2DVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform2dv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform2f
#define GL_ALT_FUNDEF_ProgramUniform2f
typedef void (*PFNGLPROGRAMUNIFORM2FPROC_ALT)(GLuint,GLint,GLfloat,GLfloat);
static inline void glProgramUniform2f(GLuint program1,GLint location1,GLfloat v01,GLfloat v11)
{
	static PFNGLPROGRAMUNIFORM2FPROC_ALT fn=(PFNGLPROGRAMUNIFORM2FPROC_ALT)glaltGetProcAddressExtension("glProgramUniform2f","GL_ARB_separate_shader_objects");
	 fn(program1,location1,v01,v11);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform2fv
#define GL_ALT_FUNDEF_ProgramUniform2fv
typedef void (*PFNGLPROGRAMUNIFORM2FVPROC_ALT)(GLuint,GLint,GLsizei,const GLfloat *);
static inline void glProgramUniform2fv(GLuint program1,GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORM2FVPROC_ALT fn=(PFNGLPROGRAMUNIFORM2FVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform2fv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform2i
#define GL_ALT_FUNDEF_ProgramUniform2i
typedef void (*PFNGLPROGRAMUNIFORM2IPROC_ALT)(GLuint,GLint,GLint,GLint);
static inline void glProgramUniform2i(GLuint program1,GLint location1,GLint v01,GLint v11)
{
	static PFNGLPROGRAMUNIFORM2IPROC_ALT fn=(PFNGLPROGRAMUNIFORM2IPROC_ALT)glaltGetProcAddressExtension("glProgramUniform2i","GL_ARB_separate_shader_objects");
	 fn(program1,location1,v01,v11);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform2iv
#define GL_ALT_FUNDEF_ProgramUniform2iv
typedef void (*PFNGLPROGRAMUNIFORM2IVPROC_ALT)(GLuint,GLint,GLsizei,const GLint *);
static inline void glProgramUniform2iv(GLuint program1,GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLPROGRAMUNIFORM2IVPROC_ALT fn=(PFNGLPROGRAMUNIFORM2IVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform2iv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform2ui
#define GL_ALT_FUNDEF_ProgramUniform2ui
typedef void (*PFNGLPROGRAMUNIFORM2UIPROC_ALT)(GLuint,GLint,GLuint,GLuint);
static inline void glProgramUniform2ui(GLuint program1,GLint location1,GLuint v01,GLuint v11)
{
	static PFNGLPROGRAMUNIFORM2UIPROC_ALT fn=(PFNGLPROGRAMUNIFORM2UIPROC_ALT)glaltGetProcAddressExtension("glProgramUniform2ui","GL_ARB_separate_shader_objects");
	 fn(program1,location1,v01,v11);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform2uiv
#define GL_ALT_FUNDEF_ProgramUniform2uiv
typedef void (*PFNGLPROGRAMUNIFORM2UIVPROC_ALT)(GLuint,GLint,GLsizei,const GLuint *);
static inline void glProgramUniform2uiv(GLuint program1,GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLPROGRAMUNIFORM2UIVPROC_ALT fn=(PFNGLPROGRAMUNIFORM2UIVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform2uiv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform3d
#define GL_ALT_FUNDEF_ProgramUniform3d
typedef void (*PFNGLPROGRAMUNIFORM3DPROC_ALT)(GLuint,GLint,GLdouble,GLdouble,GLdouble);
static inline void glProgramUniform3d(GLuint program1,GLint location1,GLdouble v01,GLdouble v11,GLdouble v21)
{
	static PFNGLPROGRAMUNIFORM3DPROC_ALT fn=(PFNGLPROGRAMUNIFORM3DPROC_ALT)glaltGetProcAddressExtension("glProgramUniform3d","GL_ARB_separate_shader_objects");
	 fn(program1,location1,v01,v11,v21);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform3dv
#define GL_ALT_FUNDEF_ProgramUniform3dv
typedef void (*PFNGLPROGRAMUNIFORM3DVPROC_ALT)(GLuint,GLint,GLsizei,const GLdouble *);
static inline void glProgramUniform3dv(GLuint program1,GLint location1,GLsizei count1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORM3DVPROC_ALT fn=(PFNGLPROGRAMUNIFORM3DVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform3dv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform3f
#define GL_ALT_FUNDEF_ProgramUniform3f
typedef void (*PFNGLPROGRAMUNIFORM3FPROC_ALT)(GLuint,GLint,GLfloat,GLfloat,GLfloat);
static inline void glProgramUniform3f(GLuint program1,GLint location1,GLfloat v01,GLfloat v11,GLfloat v21)
{
	static PFNGLPROGRAMUNIFORM3FPROC_ALT fn=(PFNGLPROGRAMUNIFORM3FPROC_ALT)glaltGetProcAddressExtension("glProgramUniform3f","GL_ARB_separate_shader_objects");
	 fn(program1,location1,v01,v11,v21);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform3fv
#define GL_ALT_FUNDEF_ProgramUniform3fv
typedef void (*PFNGLPROGRAMUNIFORM3FVPROC_ALT)(GLuint,GLint,GLsizei,const GLfloat *);
static inline void glProgramUniform3fv(GLuint program1,GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORM3FVPROC_ALT fn=(PFNGLPROGRAMUNIFORM3FVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform3fv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform3i
#define GL_ALT_FUNDEF_ProgramUniform3i
typedef void (*PFNGLPROGRAMUNIFORM3IPROC_ALT)(GLuint,GLint,GLint,GLint,GLint);
static inline void glProgramUniform3i(GLuint program1,GLint location1,GLint v01,GLint v11,GLint v21)
{
	static PFNGLPROGRAMUNIFORM3IPROC_ALT fn=(PFNGLPROGRAMUNIFORM3IPROC_ALT)glaltGetProcAddressExtension("glProgramUniform3i","GL_ARB_separate_shader_objects");
	 fn(program1,location1,v01,v11,v21);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform3iv
#define GL_ALT_FUNDEF_ProgramUniform3iv
typedef void (*PFNGLPROGRAMUNIFORM3IVPROC_ALT)(GLuint,GLint,GLsizei,const GLint *);
static inline void glProgramUniform3iv(GLuint program1,GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLPROGRAMUNIFORM3IVPROC_ALT fn=(PFNGLPROGRAMUNIFORM3IVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform3iv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform3ui
#define GL_ALT_FUNDEF_ProgramUniform3ui
typedef void (*PFNGLPROGRAMUNIFORM3UIPROC_ALT)(GLuint,GLint,GLuint,GLuint,GLuint);
static inline void glProgramUniform3ui(GLuint program1,GLint location1,GLuint v01,GLuint v11,GLuint v21)
{
	static PFNGLPROGRAMUNIFORM3UIPROC_ALT fn=(PFNGLPROGRAMUNIFORM3UIPROC_ALT)glaltGetProcAddressExtension("glProgramUniform3ui","GL_ARB_separate_shader_objects");
	 fn(program1,location1,v01,v11,v21);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform3uiv
#define GL_ALT_FUNDEF_ProgramUniform3uiv
typedef void (*PFNGLPROGRAMUNIFORM3UIVPROC_ALT)(GLuint,GLint,GLsizei,const GLuint *);
static inline void glProgramUniform3uiv(GLuint program1,GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLPROGRAMUNIFORM3UIVPROC_ALT fn=(PFNGLPROGRAMUNIFORM3UIVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform3uiv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform4d
#define GL_ALT_FUNDEF_ProgramUniform4d
typedef void (*PFNGLPROGRAMUNIFORM4DPROC_ALT)(GLuint,GLint,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void glProgramUniform4d(GLuint program1,GLint location1,GLdouble v01,GLdouble v11,GLdouble v21,GLdouble v31)
{
	static PFNGLPROGRAMUNIFORM4DPROC_ALT fn=(PFNGLPROGRAMUNIFORM4DPROC_ALT)glaltGetProcAddressExtension("glProgramUniform4d","GL_ARB_separate_shader_objects");
	 fn(program1,location1,v01,v11,v21,v31);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform4dv
#define GL_ALT_FUNDEF_ProgramUniform4dv
typedef void (*PFNGLPROGRAMUNIFORM4DVPROC_ALT)(GLuint,GLint,GLsizei,const GLdouble *);
static inline void glProgramUniform4dv(GLuint program1,GLint location1,GLsizei count1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORM4DVPROC_ALT fn=(PFNGLPROGRAMUNIFORM4DVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform4dv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform4f
#define GL_ALT_FUNDEF_ProgramUniform4f
typedef void (*PFNGLPROGRAMUNIFORM4FPROC_ALT)(GLuint,GLint,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glProgramUniform4f(GLuint program1,GLint location1,GLfloat v01,GLfloat v11,GLfloat v21,GLfloat v31)
{
	static PFNGLPROGRAMUNIFORM4FPROC_ALT fn=(PFNGLPROGRAMUNIFORM4FPROC_ALT)glaltGetProcAddressExtension("glProgramUniform4f","GL_ARB_separate_shader_objects");
	 fn(program1,location1,v01,v11,v21,v31);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform4fv
#define GL_ALT_FUNDEF_ProgramUniform4fv
typedef void (*PFNGLPROGRAMUNIFORM4FVPROC_ALT)(GLuint,GLint,GLsizei,const GLfloat *);
static inline void glProgramUniform4fv(GLuint program1,GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORM4FVPROC_ALT fn=(PFNGLPROGRAMUNIFORM4FVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform4fv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform4i
#define GL_ALT_FUNDEF_ProgramUniform4i
typedef void (*PFNGLPROGRAMUNIFORM4IPROC_ALT)(GLuint,GLint,GLint,GLint,GLint,GLint);
static inline void glProgramUniform4i(GLuint program1,GLint location1,GLint v01,GLint v11,GLint v21,GLint v31)
{
	static PFNGLPROGRAMUNIFORM4IPROC_ALT fn=(PFNGLPROGRAMUNIFORM4IPROC_ALT)glaltGetProcAddressExtension("glProgramUniform4i","GL_ARB_separate_shader_objects");
	 fn(program1,location1,v01,v11,v21,v31);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform4iv
#define GL_ALT_FUNDEF_ProgramUniform4iv
typedef void (*PFNGLPROGRAMUNIFORM4IVPROC_ALT)(GLuint,GLint,GLsizei,const GLint *);
static inline void glProgramUniform4iv(GLuint program1,GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLPROGRAMUNIFORM4IVPROC_ALT fn=(PFNGLPROGRAMUNIFORM4IVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform4iv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform4ui
#define GL_ALT_FUNDEF_ProgramUniform4ui
typedef void (*PFNGLPROGRAMUNIFORM4UIPROC_ALT)(GLuint,GLint,GLuint,GLuint,GLuint,GLuint);
static inline void glProgramUniform4ui(GLuint program1,GLint location1,GLuint v01,GLuint v11,GLuint v21,GLuint v31)
{
	static PFNGLPROGRAMUNIFORM4UIPROC_ALT fn=(PFNGLPROGRAMUNIFORM4UIPROC_ALT)glaltGetProcAddressExtension("glProgramUniform4ui","GL_ARB_separate_shader_objects");
	 fn(program1,location1,v01,v11,v21,v31);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform4uiv
#define GL_ALT_FUNDEF_ProgramUniform4uiv
typedef void (*PFNGLPROGRAMUNIFORM4UIVPROC_ALT)(GLuint,GLint,GLsizei,const GLuint *);
static inline void glProgramUniform4uiv(GLuint program1,GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLPROGRAMUNIFORM4UIVPROC_ALT fn=(PFNGLPROGRAMUNIFORM4UIVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform4uiv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix2dv
#define GL_ALT_FUNDEF_ProgramUniformMatrix2dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2DVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glProgramUniformMatrix2dv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX2DVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX2DVPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix2dv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix2fv
#define GL_ALT_FUNDEF_ProgramUniformMatrix2fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2FVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix2fv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX2FVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX2FVPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix2fv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix2x3dv
#define GL_ALT_FUNDEF_ProgramUniformMatrix2x3dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glProgramUniformMatrix2x3dv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix2x3dv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix2x3fv
#define GL_ALT_FUNDEF_ProgramUniformMatrix2x3fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix2x3fv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix2x3fv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix2x4dv
#define GL_ALT_FUNDEF_ProgramUniformMatrix2x4dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glProgramUniformMatrix2x4dv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix2x4dv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix2x4fv
#define GL_ALT_FUNDEF_ProgramUniformMatrix2x4fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix2x4fv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix2x4fv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix3dv
#define GL_ALT_FUNDEF_ProgramUniformMatrix3dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3DVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glProgramUniformMatrix3dv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX3DVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX3DVPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix3dv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix3fv
#define GL_ALT_FUNDEF_ProgramUniformMatrix3fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3FVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix3fv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX3FVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX3FVPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix3fv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix3x2dv
#define GL_ALT_FUNDEF_ProgramUniformMatrix3x2dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glProgramUniformMatrix3x2dv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix3x2dv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix3x2fv
#define GL_ALT_FUNDEF_ProgramUniformMatrix3x2fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix3x2fv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix3x2fv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix3x4dv
#define GL_ALT_FUNDEF_ProgramUniformMatrix3x4dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glProgramUniformMatrix3x4dv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix3x4dv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix3x4fv
#define GL_ALT_FUNDEF_ProgramUniformMatrix3x4fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix3x4fv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix3x4fv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix4dv
#define GL_ALT_FUNDEF_ProgramUniformMatrix4dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4DVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glProgramUniformMatrix4dv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX4DVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX4DVPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix4dv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix4fv
#define GL_ALT_FUNDEF_ProgramUniformMatrix4fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4FVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix4fv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX4FVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX4FVPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix4fv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix4x2dv
#define GL_ALT_FUNDEF_ProgramUniformMatrix4x2dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glProgramUniformMatrix4x2dv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix4x2dv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix4x2fv
#define GL_ALT_FUNDEF_ProgramUniformMatrix4x2fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix4x2fv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix4x2fv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix4x3dv
#define GL_ALT_FUNDEF_ProgramUniformMatrix4x3dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glProgramUniformMatrix4x3dv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix4x3dv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix4x3fv
#define GL_ALT_FUNDEF_ProgramUniformMatrix4x3fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix4x3fv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix4x3fv","GL_ARB_separate_shader_objects");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_UseProgramStages
#define GL_ALT_FUNDEF_UseProgramStages
typedef void (*PFNGLUSEPROGRAMSTAGESPROC_ALT)(GLuint,GLbitfield,GLuint);
static inline void glUseProgramStages(GLuint pipeline1,GLbitfield stages1,GLuint program1)
{
	static PFNGLUSEPROGRAMSTAGESPROC_ALT fn=(PFNGLUSEPROGRAMSTAGESPROC_ALT)glaltGetProcAddressExtension("glUseProgramStages","GL_ARB_separate_shader_objects");
	 fn(pipeline1,stages1,program1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ValidateProgramPipeline
#define GL_ALT_FUNDEF_ValidateProgramPipeline
typedef void (*PFNGLVALIDATEPROGRAMPIPELINEPROC_ALT)(GLuint);
static inline void glValidateProgramPipeline(GLuint pipeline1)
{
	static PFNGLVALIDATEPROGRAMPIPELINEPROC_ALT fn=(PFNGLVALIDATEPROGRAMPIPELINEPROC_ALT)glaltGetProcAddressExtension("glValidateProgramPipeline","GL_ARB_separate_shader_objects");
	 fn(pipeline1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_shader_atomic_counters
#define GL_ARB_shader_atomic_counters
#ifndef GL_ATOMIC_COUNTER_BUFFER
#define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#endif //GL_ATOMIC_COUNTER_BUFFER
#ifndef GL_ATOMIC_COUNTER_BUFFER_BINDING
#define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#endif //GL_ATOMIC_COUNTER_BUFFER_BINDING
#ifndef GL_ATOMIC_COUNTER_BUFFER_START
#define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#endif //GL_ATOMIC_COUNTER_BUFFER_START
#ifndef GL_ATOMIC_COUNTER_BUFFER_SIZE
#define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#endif //GL_ATOMIC_COUNTER_BUFFER_SIZE
#ifndef GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#endif //GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#endif //GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#endif //GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#endif //GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#endif //GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#endif //GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#endif //GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#endif //GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#endif //GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#endif //GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#endif //GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#endif //GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#endif //GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#endif //GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTERS
#define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#endif //GL_MAX_VERTEX_ATOMIC_COUNTERS
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#endif //GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#endif //GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#endif //GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#endif //GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTERS
#define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#endif //GL_MAX_COMBINED_ATOMIC_COUNTERS
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#endif //GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#ifndef GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#endif //GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#ifndef GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#endif //GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#ifndef GL_UNSIGNED_INT_ATOMIC_COUNTER
#define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#endif //GL_UNSIGNED_INT_ATOMIC_COUNTER
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#endif //GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetActiveAtomicCounterBufferiv
#define GL_ALT_FUNDEF_GetActiveAtomicCounterBufferiv
typedef void (*PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC_ALT)(GLuint,GLuint,GLenum,GLint *);
static inline void glGetActiveAtomicCounterBufferiv(GLuint program1,GLuint bufferIndex1,GLenum pname1,GLint * params1)
{
	static PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC_ALT fn=(PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC_ALT)glaltGetProcAddressExtension("glGetActiveAtomicCounterBufferiv","GL_ARB_shader_atomic_counters");
	 fn(program1,bufferIndex1,pname1,params1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_shader_bit_encoding
#define GL_ARB_shader_bit_encoding
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_shader_draw_parameters
#define GL_ARB_shader_draw_parameters
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_shader_group_vote
#define GL_ARB_shader_group_vote
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_shader_image_load_store
#define GL_ARB_shader_image_load_store
#ifndef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#endif //GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#ifndef GL_ELEMENT_ARRAY_BARRIER_BIT
#define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#endif //GL_ELEMENT_ARRAY_BARRIER_BIT
#ifndef GL_UNIFORM_BARRIER_BIT
#define GL_UNIFORM_BARRIER_BIT 0x00000004
#endif //GL_UNIFORM_BARRIER_BIT
#ifndef GL_TEXTURE_FETCH_BARRIER_BIT
#define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#endif //GL_TEXTURE_FETCH_BARRIER_BIT
#ifndef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#endif //GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#ifndef GL_COMMAND_BARRIER_BIT
#define GL_COMMAND_BARRIER_BIT 0x00000040
#endif //GL_COMMAND_BARRIER_BIT
#ifndef GL_PIXEL_BUFFER_BARRIER_BIT
#define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#endif //GL_PIXEL_BUFFER_BARRIER_BIT
#ifndef GL_TEXTURE_UPDATE_BARRIER_BIT
#define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#endif //GL_TEXTURE_UPDATE_BARRIER_BIT
#ifndef GL_BUFFER_UPDATE_BARRIER_BIT
#define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#endif //GL_BUFFER_UPDATE_BARRIER_BIT
#ifndef GL_FRAMEBUFFER_BARRIER_BIT
#define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#endif //GL_FRAMEBUFFER_BARRIER_BIT
#ifndef GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#endif //GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#ifndef GL_ATOMIC_COUNTER_BARRIER_BIT
#define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#endif //GL_ATOMIC_COUNTER_BARRIER_BIT
#ifndef GL_MAX_IMAGE_UNITS
#define GL_MAX_IMAGE_UNITS 0x8F38
#endif //GL_MAX_IMAGE_UNITS
#ifndef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#endif //GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#ifndef GL_IMAGE_BINDING_NAME
#define GL_IMAGE_BINDING_NAME 0x8F3A
#endif //GL_IMAGE_BINDING_NAME
#ifndef GL_IMAGE_BINDING_LEVEL
#define GL_IMAGE_BINDING_LEVEL 0x8F3B
#endif //GL_IMAGE_BINDING_LEVEL
#ifndef GL_IMAGE_BINDING_LAYERED
#define GL_IMAGE_BINDING_LAYERED 0x8F3C
#endif //GL_IMAGE_BINDING_LAYERED
#ifndef GL_IMAGE_BINDING_LAYER
#define GL_IMAGE_BINDING_LAYER 0x8F3D
#endif //GL_IMAGE_BINDING_LAYER
#ifndef GL_IMAGE_BINDING_ACCESS
#define GL_IMAGE_BINDING_ACCESS 0x8F3E
#endif //GL_IMAGE_BINDING_ACCESS
#ifndef GL_IMAGE_1D
#define GL_IMAGE_1D 0x904C
#endif //GL_IMAGE_1D
#ifndef GL_IMAGE_2D
#define GL_IMAGE_2D 0x904D
#endif //GL_IMAGE_2D
#ifndef GL_IMAGE_3D
#define GL_IMAGE_3D 0x904E
#endif //GL_IMAGE_3D
#ifndef GL_IMAGE_2D_RECT
#define GL_IMAGE_2D_RECT 0x904F
#endif //GL_IMAGE_2D_RECT
#ifndef GL_IMAGE_CUBE
#define GL_IMAGE_CUBE 0x9050
#endif //GL_IMAGE_CUBE
#ifndef GL_IMAGE_BUFFER
#define GL_IMAGE_BUFFER 0x9051
#endif //GL_IMAGE_BUFFER
#ifndef GL_IMAGE_1D_ARRAY
#define GL_IMAGE_1D_ARRAY 0x9052
#endif //GL_IMAGE_1D_ARRAY
#ifndef GL_IMAGE_2D_ARRAY
#define GL_IMAGE_2D_ARRAY 0x9053
#endif //GL_IMAGE_2D_ARRAY
#ifndef GL_IMAGE_CUBE_MAP_ARRAY
#define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#endif //GL_IMAGE_CUBE_MAP_ARRAY
#ifndef GL_IMAGE_2D_MULTISAMPLE
#define GL_IMAGE_2D_MULTISAMPLE 0x9055
#endif //GL_IMAGE_2D_MULTISAMPLE
#ifndef GL_IMAGE_2D_MULTISAMPLE_ARRAY
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#endif //GL_IMAGE_2D_MULTISAMPLE_ARRAY
#ifndef GL_INT_IMAGE_1D
#define GL_INT_IMAGE_1D 0x9057
#endif //GL_INT_IMAGE_1D
#ifndef GL_INT_IMAGE_2D
#define GL_INT_IMAGE_2D 0x9058
#endif //GL_INT_IMAGE_2D
#ifndef GL_INT_IMAGE_3D
#define GL_INT_IMAGE_3D 0x9059
#endif //GL_INT_IMAGE_3D
#ifndef GL_INT_IMAGE_2D_RECT
#define GL_INT_IMAGE_2D_RECT 0x905A
#endif //GL_INT_IMAGE_2D_RECT
#ifndef GL_INT_IMAGE_CUBE
#define GL_INT_IMAGE_CUBE 0x905B
#endif //GL_INT_IMAGE_CUBE
#ifndef GL_INT_IMAGE_BUFFER
#define GL_INT_IMAGE_BUFFER 0x905C
#endif //GL_INT_IMAGE_BUFFER
#ifndef GL_INT_IMAGE_1D_ARRAY
#define GL_INT_IMAGE_1D_ARRAY 0x905D
#endif //GL_INT_IMAGE_1D_ARRAY
#ifndef GL_INT_IMAGE_2D_ARRAY
#define GL_INT_IMAGE_2D_ARRAY 0x905E
#endif //GL_INT_IMAGE_2D_ARRAY
#ifndef GL_INT_IMAGE_CUBE_MAP_ARRAY
#define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#endif //GL_INT_IMAGE_CUBE_MAP_ARRAY
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE
#define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#endif //GL_INT_IMAGE_2D_MULTISAMPLE
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#endif //GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#ifndef GL_UNSIGNED_INT_IMAGE_1D
#define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#endif //GL_UNSIGNED_INT_IMAGE_1D
#ifndef GL_UNSIGNED_INT_IMAGE_2D
#define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#endif //GL_UNSIGNED_INT_IMAGE_2D
#ifndef GL_UNSIGNED_INT_IMAGE_3D
#define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#endif //GL_UNSIGNED_INT_IMAGE_3D
#ifndef GL_UNSIGNED_INT_IMAGE_2D_RECT
#define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#endif //GL_UNSIGNED_INT_IMAGE_2D_RECT
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE
#define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#endif //GL_UNSIGNED_INT_IMAGE_CUBE
#ifndef GL_UNSIGNED_INT_IMAGE_BUFFER
#define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#endif //GL_UNSIGNED_INT_IMAGE_BUFFER
#ifndef GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#endif //GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#ifndef GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#endif //GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#endif //GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#endif //GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#endif //GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#ifndef GL_MAX_IMAGE_SAMPLES
#define GL_MAX_IMAGE_SAMPLES 0x906D
#endif //GL_MAX_IMAGE_SAMPLES
#ifndef GL_IMAGE_BINDING_FORMAT
#define GL_IMAGE_BINDING_FORMAT 0x906E
#endif //GL_IMAGE_BINDING_FORMAT
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#endif //GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#endif //GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#endif //GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#ifndef GL_MAX_VERTEX_IMAGE_UNIFORMS
#define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#endif //GL_MAX_VERTEX_IMAGE_UNIFORMS
#ifndef GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#endif //GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#ifndef GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#endif //GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#ifndef GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#endif //GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#ifndef GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#endif //GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#ifndef GL_MAX_COMBINED_IMAGE_UNIFORMS
#define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#endif //GL_MAX_COMBINED_IMAGE_UNIFORMS
#ifndef GL_ALL_BARRIER_BITS
#define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#endif //GL_ALL_BARRIER_BITS
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BindImageTexture
#define GL_ALT_FUNDEF_BindImageTexture
typedef void (*PFNGLBINDIMAGETEXTUREPROC_ALT)(GLuint,GLuint,GLint,GLboolean,GLint,GLenum,GLenum);
static inline void glBindImageTexture(GLuint unit1,GLuint texture1,GLint level1,GLboolean layered1,GLint layer1,GLenum access1,GLenum format1)
{
	static PFNGLBINDIMAGETEXTUREPROC_ALT fn=(PFNGLBINDIMAGETEXTUREPROC_ALT)glaltGetProcAddressExtension("glBindImageTexture","GL_ARB_shader_image_load_store");
	 fn(unit1,texture1,level1,layered1,layer1,access1,format1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MemoryBarrier
#define GL_ALT_FUNDEF_MemoryBarrier
typedef void (*PFNGLMEMORYBARRIERPROC_ALT)(GLbitfield);
static inline void glMemoryBarrier(GLbitfield barriers1)
{
	static PFNGLMEMORYBARRIERPROC_ALT fn=(PFNGLMEMORYBARRIERPROC_ALT)glaltGetProcAddressExtension("glMemoryBarrier","GL_ARB_shader_image_load_store");
	 fn(barriers1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_shader_image_size
#define GL_ARB_shader_image_size
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_shader_objects
#define GL_ARB_shader_objects
#ifndef GL_PROGRAM_OBJECT_ARB
#define GL_PROGRAM_OBJECT_ARB 0x8B40
#endif //GL_PROGRAM_OBJECT_ARB
#ifndef GL_SHADER_OBJECT_ARB
#define GL_SHADER_OBJECT_ARB 0x8B48
#endif //GL_SHADER_OBJECT_ARB
#ifndef GL_OBJECT_TYPE_ARB
#define GL_OBJECT_TYPE_ARB 0x8B4E
#endif //GL_OBJECT_TYPE_ARB
#ifndef GL_OBJECT_SUBTYPE_ARB
#define GL_OBJECT_SUBTYPE_ARB 0x8B4F
#endif //GL_OBJECT_SUBTYPE_ARB
#ifndef GL_FLOAT_VEC2_ARB
#define GL_FLOAT_VEC2_ARB 0x8B50
#endif //GL_FLOAT_VEC2_ARB
#ifndef GL_FLOAT_VEC3_ARB
#define GL_FLOAT_VEC3_ARB 0x8B51
#endif //GL_FLOAT_VEC3_ARB
#ifndef GL_FLOAT_VEC4_ARB
#define GL_FLOAT_VEC4_ARB 0x8B52
#endif //GL_FLOAT_VEC4_ARB
#ifndef GL_INT_VEC2_ARB
#define GL_INT_VEC2_ARB 0x8B53
#endif //GL_INT_VEC2_ARB
#ifndef GL_INT_VEC3_ARB
#define GL_INT_VEC3_ARB 0x8B54
#endif //GL_INT_VEC3_ARB
#ifndef GL_INT_VEC4_ARB
#define GL_INT_VEC4_ARB 0x8B55
#endif //GL_INT_VEC4_ARB
#ifndef GL_BOOL_ARB
#define GL_BOOL_ARB 0x8B56
#endif //GL_BOOL_ARB
#ifndef GL_BOOL_VEC2_ARB
#define GL_BOOL_VEC2_ARB 0x8B57
#endif //GL_BOOL_VEC2_ARB
#ifndef GL_BOOL_VEC3_ARB
#define GL_BOOL_VEC3_ARB 0x8B58
#endif //GL_BOOL_VEC3_ARB
#ifndef GL_BOOL_VEC4_ARB
#define GL_BOOL_VEC4_ARB 0x8B59
#endif //GL_BOOL_VEC4_ARB
#ifndef GL_FLOAT_MAT2_ARB
#define GL_FLOAT_MAT2_ARB 0x8B5A
#endif //GL_FLOAT_MAT2_ARB
#ifndef GL_FLOAT_MAT3_ARB
#define GL_FLOAT_MAT3_ARB 0x8B5B
#endif //GL_FLOAT_MAT3_ARB
#ifndef GL_FLOAT_MAT4_ARB
#define GL_FLOAT_MAT4_ARB 0x8B5C
#endif //GL_FLOAT_MAT4_ARB
#ifndef GL_SAMPLER_1D_ARB
#define GL_SAMPLER_1D_ARB 0x8B5D
#endif //GL_SAMPLER_1D_ARB
#ifndef GL_SAMPLER_2D_ARB
#define GL_SAMPLER_2D_ARB 0x8B5E
#endif //GL_SAMPLER_2D_ARB
#ifndef GL_SAMPLER_3D_ARB
#define GL_SAMPLER_3D_ARB 0x8B5F
#endif //GL_SAMPLER_3D_ARB
#ifndef GL_SAMPLER_CUBE_ARB
#define GL_SAMPLER_CUBE_ARB 0x8B60
#endif //GL_SAMPLER_CUBE_ARB
#ifndef GL_SAMPLER_1D_SHADOW_ARB
#define GL_SAMPLER_1D_SHADOW_ARB 0x8B61
#endif //GL_SAMPLER_1D_SHADOW_ARB
#ifndef GL_SAMPLER_2D_SHADOW_ARB
#define GL_SAMPLER_2D_SHADOW_ARB 0x8B62
#endif //GL_SAMPLER_2D_SHADOW_ARB
#ifndef GL_SAMPLER_2D_RECT_ARB
#define GL_SAMPLER_2D_RECT_ARB 0x8B63
#endif //GL_SAMPLER_2D_RECT_ARB
#ifndef GL_SAMPLER_2D_RECT_SHADOW_ARB
#define GL_SAMPLER_2D_RECT_SHADOW_ARB 0x8B64
#endif //GL_SAMPLER_2D_RECT_SHADOW_ARB
#ifndef GL_OBJECT_DELETE_STATUS_ARB
#define GL_OBJECT_DELETE_STATUS_ARB 0x8B80
#endif //GL_OBJECT_DELETE_STATUS_ARB
#ifndef GL_OBJECT_COMPILE_STATUS_ARB
#define GL_OBJECT_COMPILE_STATUS_ARB 0x8B81
#endif //GL_OBJECT_COMPILE_STATUS_ARB
#ifndef GL_OBJECT_LINK_STATUS_ARB
#define GL_OBJECT_LINK_STATUS_ARB 0x8B82
#endif //GL_OBJECT_LINK_STATUS_ARB
#ifndef GL_OBJECT_VALIDATE_STATUS_ARB
#define GL_OBJECT_VALIDATE_STATUS_ARB 0x8B83
#endif //GL_OBJECT_VALIDATE_STATUS_ARB
#ifndef GL_OBJECT_INFO_LOG_LENGTH_ARB
#define GL_OBJECT_INFO_LOG_LENGTH_ARB 0x8B84
#endif //GL_OBJECT_INFO_LOG_LENGTH_ARB
#ifndef GL_OBJECT_ATTACHED_OBJECTS_ARB
#define GL_OBJECT_ATTACHED_OBJECTS_ARB 0x8B85
#endif //GL_OBJECT_ATTACHED_OBJECTS_ARB
#ifndef GL_OBJECT_ACTIVE_UNIFORMS_ARB
#define GL_OBJECT_ACTIVE_UNIFORMS_ARB 0x8B86
#endif //GL_OBJECT_ACTIVE_UNIFORMS_ARB
#ifndef GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB
#define GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB 0x8B87
#endif //GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB
#ifndef GL_OBJECT_SHADER_SOURCE_LENGTH_ARB
#define GL_OBJECT_SHADER_SOURCE_LENGTH_ARB 0x8B88
#endif //GL_OBJECT_SHADER_SOURCE_LENGTH_ARB
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_AttachObjectARB
#define GL_ALT_FUNDEF_AttachObjectARB
typedef void (*PFNGLATTACHOBJECTARBPROC_ALT)(GLhandleARB,GLhandleARB);
static inline void glAttachObjectARB(GLhandleARB containerObj1,GLhandleARB obj1)
{
	static PFNGLATTACHOBJECTARBPROC_ALT fn=(PFNGLATTACHOBJECTARBPROC_ALT)glaltGetProcAddressExtension("glAttachObjectARB","GL_ARB_shader_objects");
	 fn(containerObj1,obj1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_CompileShaderARB
#define GL_ALT_FUNDEF_CompileShaderARB
typedef void (*PFNGLCOMPILESHADERARBPROC_ALT)(GLhandleARB);
static inline void glCompileShaderARB(GLhandleARB shaderObj1)
{
	static PFNGLCOMPILESHADERARBPROC_ALT fn=(PFNGLCOMPILESHADERARBPROC_ALT)glaltGetProcAddressExtension("glCompileShaderARB","GL_ARB_shader_objects");
	 fn(shaderObj1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_CreateProgramObjectARB
#define GL_ALT_FUNDEF_CreateProgramObjectARB
typedef GLhandleARB (*PFNGLCREATEPROGRAMOBJECTARBPROC_ALT)();
static inline GLhandleARB glCreateProgramObjectARB()
{
	static PFNGLCREATEPROGRAMOBJECTARBPROC_ALT fn=(PFNGLCREATEPROGRAMOBJECTARBPROC_ALT)glaltGetProcAddressExtension("glCreateProgramObjectARB","GL_ARB_shader_objects");
	return fn();
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_CreateShaderObjectARB
#define GL_ALT_FUNDEF_CreateShaderObjectARB
typedef GLhandleARB (*PFNGLCREATESHADEROBJECTARBPROC_ALT)(GLenum);
static inline GLhandleARB glCreateShaderObjectARB(GLenum shaderType1)
{
	static PFNGLCREATESHADEROBJECTARBPROC_ALT fn=(PFNGLCREATESHADEROBJECTARBPROC_ALT)glaltGetProcAddressExtension("glCreateShaderObjectARB","GL_ARB_shader_objects");
	return fn(shaderType1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_DeleteObjectARB
#define GL_ALT_FUNDEF_DeleteObjectARB
typedef void (*PFNGLDELETEOBJECTARBPROC_ALT)(GLhandleARB);
static inline void glDeleteObjectARB(GLhandleARB obj1)
{
	static PFNGLDELETEOBJECTARBPROC_ALT fn=(PFNGLDELETEOBJECTARBPROC_ALT)glaltGetProcAddressExtension("glDeleteObjectARB","GL_ARB_shader_objects");
	 fn(obj1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DetachObjectARB
#define GL_ALT_FUNDEF_DetachObjectARB
typedef void (*PFNGLDETACHOBJECTARBPROC_ALT)(GLhandleARB,GLhandleARB);
static inline void glDetachObjectARB(GLhandleARB containerObj1,GLhandleARB attachedObj1)
{
	static PFNGLDETACHOBJECTARBPROC_ALT fn=(PFNGLDETACHOBJECTARBPROC_ALT)glaltGetProcAddressExtension("glDetachObjectARB","GL_ARB_shader_objects");
	 fn(containerObj1,attachedObj1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetActiveUniformARB
#define GL_ALT_FUNDEF_GetActiveUniformARB
typedef void (*PFNGLGETACTIVEUNIFORMARBPROC_ALT)(GLhandleARB,GLuint,GLsizei,GLsizei *,GLint *,GLenum *,GLcharARB *);
static inline void glGetActiveUniformARB(GLhandleARB programObj1,GLuint index1,GLsizei maxLength1,GLsizei * length1,GLint * size1,GLenum * type1,GLcharARB * name1)
{
	static PFNGLGETACTIVEUNIFORMARBPROC_ALT fn=(PFNGLGETACTIVEUNIFORMARBPROC_ALT)glaltGetProcAddressExtension("glGetActiveUniformARB","GL_ARB_shader_objects");
	 fn(programObj1,index1,maxLength1,length1,size1,type1,name1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetAttachedObjectsARB
#define GL_ALT_FUNDEF_GetAttachedObjectsARB
typedef void (*PFNGLGETATTACHEDOBJECTSARBPROC_ALT)(GLhandleARB,GLsizei,GLsizei *,GLhandleARB *);
static inline void glGetAttachedObjectsARB(GLhandleARB containerObj1,GLsizei maxCount1,GLsizei * count1,GLhandleARB * obj1)
{
	static PFNGLGETATTACHEDOBJECTSARBPROC_ALT fn=(PFNGLGETATTACHEDOBJECTSARBPROC_ALT)glaltGetProcAddressExtension("glGetAttachedObjectsARB","GL_ARB_shader_objects");
	 fn(containerObj1,maxCount1,count1,obj1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetHandleARB
#define GL_ALT_FUNDEF_GetHandleARB
typedef GLhandleARB (*PFNGLGETHANDLEARBPROC_ALT)(GLenum);
static inline GLhandleARB glGetHandleARB(GLenum pname1)
{
	static PFNGLGETHANDLEARBPROC_ALT fn=(PFNGLGETHANDLEARBPROC_ALT)glaltGetProcAddressExtension("glGetHandleARB","GL_ARB_shader_objects");
	return fn(pname1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetInfoLogARB
#define GL_ALT_FUNDEF_GetInfoLogARB
typedef void (*PFNGLGETINFOLOGARBPROC_ALT)(GLhandleARB,GLsizei,GLsizei *,GLcharARB *);
static inline void glGetInfoLogARB(GLhandleARB obj1,GLsizei maxLength1,GLsizei * length1,GLcharARB * infoLog1)
{
	static PFNGLGETINFOLOGARBPROC_ALT fn=(PFNGLGETINFOLOGARBPROC_ALT)glaltGetProcAddressExtension("glGetInfoLogARB","GL_ARB_shader_objects");
	 fn(obj1,maxLength1,length1,infoLog1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetObjectParameterfvARB
#define GL_ALT_FUNDEF_GetObjectParameterfvARB
typedef void (*PFNGLGETOBJECTPARAMETERFVARBPROC_ALT)(GLhandleARB,GLenum,GLfloat *);
static inline void glGetObjectParameterfvARB(GLhandleARB obj1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETOBJECTPARAMETERFVARBPROC_ALT fn=(PFNGLGETOBJECTPARAMETERFVARBPROC_ALT)glaltGetProcAddressExtension("glGetObjectParameterfvARB","GL_ARB_shader_objects");
	 fn(obj1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetObjectParameterivARB
#define GL_ALT_FUNDEF_GetObjectParameterivARB
typedef void (*PFNGLGETOBJECTPARAMETERIVARBPROC_ALT)(GLhandleARB,GLenum,GLint *);
static inline void glGetObjectParameterivARB(GLhandleARB obj1,GLenum pname1,GLint * params1)
{
	static PFNGLGETOBJECTPARAMETERIVARBPROC_ALT fn=(PFNGLGETOBJECTPARAMETERIVARBPROC_ALT)glaltGetProcAddressExtension("glGetObjectParameterivARB","GL_ARB_shader_objects");
	 fn(obj1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetShaderSourceARB
#define GL_ALT_FUNDEF_GetShaderSourceARB
typedef void (*PFNGLGETSHADERSOURCEARBPROC_ALT)(GLhandleARB,GLsizei,GLsizei *,GLcharARB *);
static inline void glGetShaderSourceARB(GLhandleARB obj1,GLsizei maxLength1,GLsizei * length1,GLcharARB * source1)
{
	static PFNGLGETSHADERSOURCEARBPROC_ALT fn=(PFNGLGETSHADERSOURCEARBPROC_ALT)glaltGetProcAddressExtension("glGetShaderSourceARB","GL_ARB_shader_objects");
	 fn(obj1,maxLength1,length1,source1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetUniformLocationARB
#define GL_ALT_FUNDEF_GetUniformLocationARB
typedef GLint (*PFNGLGETUNIFORMLOCATIONARBPROC_ALT)(GLhandleARB,const GLcharARB *);
static inline GLint glGetUniformLocationARB(GLhandleARB programObj1,const GLcharARB * name1)
{
	static PFNGLGETUNIFORMLOCATIONARBPROC_ALT fn=(PFNGLGETUNIFORMLOCATIONARBPROC_ALT)glaltGetProcAddressExtension("glGetUniformLocationARB","GL_ARB_shader_objects");
	return fn(programObj1,name1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetUniformfvARB
#define GL_ALT_FUNDEF_GetUniformfvARB
typedef void (*PFNGLGETUNIFORMFVARBPROC_ALT)(GLhandleARB,GLint,GLfloat *);
static inline void glGetUniformfvARB(GLhandleARB programObj1,GLint location1,GLfloat * params1)
{
	static PFNGLGETUNIFORMFVARBPROC_ALT fn=(PFNGLGETUNIFORMFVARBPROC_ALT)glaltGetProcAddressExtension("glGetUniformfvARB","GL_ARB_shader_objects");
	 fn(programObj1,location1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetUniformivARB
#define GL_ALT_FUNDEF_GetUniformivARB
typedef void (*PFNGLGETUNIFORMIVARBPROC_ALT)(GLhandleARB,GLint,GLint *);
static inline void glGetUniformivARB(GLhandleARB programObj1,GLint location1,GLint * params1)
{
	static PFNGLGETUNIFORMIVARBPROC_ALT fn=(PFNGLGETUNIFORMIVARBPROC_ALT)glaltGetProcAddressExtension("glGetUniformivARB","GL_ARB_shader_objects");
	 fn(programObj1,location1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_LinkProgramARB
#define GL_ALT_FUNDEF_LinkProgramARB
typedef void (*PFNGLLINKPROGRAMARBPROC_ALT)(GLhandleARB);
static inline void glLinkProgramARB(GLhandleARB programObj1)
{
	static PFNGLLINKPROGRAMARBPROC_ALT fn=(PFNGLLINKPROGRAMARBPROC_ALT)glaltGetProcAddressExtension("glLinkProgramARB","GL_ARB_shader_objects");
	 fn(programObj1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ShaderSourceARB
#define GL_ALT_FUNDEF_ShaderSourceARB
typedef void (*PFNGLSHADERSOURCEARBPROC_ALT)(GLhandleARB,GLsizei,const GLcharARB **,const GLint *);
static inline void glShaderSourceARB(GLhandleARB shaderObj1,GLsizei count1,const GLcharARB ** string1,const GLint * length1)
{
	static PFNGLSHADERSOURCEARBPROC_ALT fn=(PFNGLSHADERSOURCEARBPROC_ALT)glaltGetProcAddressExtension("glShaderSourceARB","GL_ARB_shader_objects");
	 fn(shaderObj1,count1,string1,length1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_Uniform1fARB
#define GL_ALT_FUNDEF_Uniform1fARB
typedef void (*PFNGLUNIFORM1FARBPROC_ALT)(GLint,GLfloat);
static inline void glUniform1fARB(GLint location1,GLfloat v01)
{
	static PFNGLUNIFORM1FARBPROC_ALT fn=(PFNGLUNIFORM1FARBPROC_ALT)glaltGetProcAddressExtension("glUniform1fARB","GL_ARB_shader_objects");
	 fn(location1,v01);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_Uniform1fvARB
#define GL_ALT_FUNDEF_Uniform1fvARB
typedef void (*PFNGLUNIFORM1FVARBPROC_ALT)(GLint,GLsizei,const GLfloat *);
static inline void glUniform1fvARB(GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLUNIFORM1FVARBPROC_ALT fn=(PFNGLUNIFORM1FVARBPROC_ALT)glaltGetProcAddressExtension("glUniform1fvARB","GL_ARB_shader_objects");
	 fn(location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_Uniform1iARB
#define GL_ALT_FUNDEF_Uniform1iARB
typedef void (*PFNGLUNIFORM1IARBPROC_ALT)(GLint,GLint);
static inline void glUniform1iARB(GLint location1,GLint v01)
{
	static PFNGLUNIFORM1IARBPROC_ALT fn=(PFNGLUNIFORM1IARBPROC_ALT)glaltGetProcAddressExtension("glUniform1iARB","GL_ARB_shader_objects");
	 fn(location1,v01);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_Uniform1ivARB
#define GL_ALT_FUNDEF_Uniform1ivARB
typedef void (*PFNGLUNIFORM1IVARBPROC_ALT)(GLint,GLsizei,const GLint *);
static inline void glUniform1ivARB(GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLUNIFORM1IVARBPROC_ALT fn=(PFNGLUNIFORM1IVARBPROC_ALT)glaltGetProcAddressExtension("glUniform1ivARB","GL_ARB_shader_objects");
	 fn(location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_Uniform2fARB
#define GL_ALT_FUNDEF_Uniform2fARB
typedef void (*PFNGLUNIFORM2FARBPROC_ALT)(GLint,GLfloat,GLfloat);
static inline void glUniform2fARB(GLint location1,GLfloat v01,GLfloat v11)
{
	static PFNGLUNIFORM2FARBPROC_ALT fn=(PFNGLUNIFORM2FARBPROC_ALT)glaltGetProcAddressExtension("glUniform2fARB","GL_ARB_shader_objects");
	 fn(location1,v01,v11);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_Uniform2fvARB
#define GL_ALT_FUNDEF_Uniform2fvARB
typedef void (*PFNGLUNIFORM2FVARBPROC_ALT)(GLint,GLsizei,const GLfloat *);
static inline void glUniform2fvARB(GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLUNIFORM2FVARBPROC_ALT fn=(PFNGLUNIFORM2FVARBPROC_ALT)glaltGetProcAddressExtension("glUniform2fvARB","GL_ARB_shader_objects");
	 fn(location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_Uniform2iARB
#define GL_ALT_FUNDEF_Uniform2iARB
typedef void (*PFNGLUNIFORM2IARBPROC_ALT)(GLint,GLint,GLint);
static inline void glUniform2iARB(GLint location1,GLint v01,GLint v11)
{
	static PFNGLUNIFORM2IARBPROC_ALT fn=(PFNGLUNIFORM2IARBPROC_ALT)glaltGetProcAddressExtension("glUniform2iARB","GL_ARB_shader_objects");
	 fn(location1,v01,v11);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_Uniform2ivARB
#define GL_ALT_FUNDEF_Uniform2ivARB
typedef void (*PFNGLUNIFORM2IVARBPROC_ALT)(GLint,GLsizei,const GLint *);
static inline void glUniform2ivARB(GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLUNIFORM2IVARBPROC_ALT fn=(PFNGLUNIFORM2IVARBPROC_ALT)glaltGetProcAddressExtension("glUniform2ivARB","GL_ARB_shader_objects");
	 fn(location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_Uniform3fARB
#define GL_ALT_FUNDEF_Uniform3fARB
typedef void (*PFNGLUNIFORM3FARBPROC_ALT)(GLint,GLfloat,GLfloat,GLfloat);
static inline void glUniform3fARB(GLint location1,GLfloat v01,GLfloat v11,GLfloat v21)
{
	static PFNGLUNIFORM3FARBPROC_ALT fn=(PFNGLUNIFORM3FARBPROC_ALT)glaltGetProcAddressExtension("glUniform3fARB","GL_ARB_shader_objects");
	 fn(location1,v01,v11,v21);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_Uniform3fvARB
#define GL_ALT_FUNDEF_Uniform3fvARB
typedef void (*PFNGLUNIFORM3FVARBPROC_ALT)(GLint,GLsizei,const GLfloat *);
static inline void glUniform3fvARB(GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLUNIFORM3FVARBPROC_ALT fn=(PFNGLUNIFORM3FVARBPROC_ALT)glaltGetProcAddressExtension("glUniform3fvARB","GL_ARB_shader_objects");
	 fn(location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_Uniform3iARB
#define GL_ALT_FUNDEF_Uniform3iARB
typedef void (*PFNGLUNIFORM3IARBPROC_ALT)(GLint,GLint,GLint,GLint);
static inline void glUniform3iARB(GLint location1,GLint v01,GLint v11,GLint v21)
{
	static PFNGLUNIFORM3IARBPROC_ALT fn=(PFNGLUNIFORM3IARBPROC_ALT)glaltGetProcAddressExtension("glUniform3iARB","GL_ARB_shader_objects");
	 fn(location1,v01,v11,v21);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_Uniform3ivARB
#define GL_ALT_FUNDEF_Uniform3ivARB
typedef void (*PFNGLUNIFORM3IVARBPROC_ALT)(GLint,GLsizei,const GLint *);
static inline void glUniform3ivARB(GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLUNIFORM3IVARBPROC_ALT fn=(PFNGLUNIFORM3IVARBPROC_ALT)glaltGetProcAddressExtension("glUniform3ivARB","GL_ARB_shader_objects");
	 fn(location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_Uniform4fARB
#define GL_ALT_FUNDEF_Uniform4fARB
typedef void (*PFNGLUNIFORM4FARBPROC_ALT)(GLint,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glUniform4fARB(GLint location1,GLfloat v01,GLfloat v11,GLfloat v21,GLfloat v31)
{
	static PFNGLUNIFORM4FARBPROC_ALT fn=(PFNGLUNIFORM4FARBPROC_ALT)glaltGetProcAddressExtension("glUniform4fARB","GL_ARB_shader_objects");
	 fn(location1,v01,v11,v21,v31);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_Uniform4fvARB
#define GL_ALT_FUNDEF_Uniform4fvARB
typedef void (*PFNGLUNIFORM4FVARBPROC_ALT)(GLint,GLsizei,const GLfloat *);
static inline void glUniform4fvARB(GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLUNIFORM4FVARBPROC_ALT fn=(PFNGLUNIFORM4FVARBPROC_ALT)glaltGetProcAddressExtension("glUniform4fvARB","GL_ARB_shader_objects");
	 fn(location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_Uniform4iARB
#define GL_ALT_FUNDEF_Uniform4iARB
typedef void (*PFNGLUNIFORM4IARBPROC_ALT)(GLint,GLint,GLint,GLint,GLint);
static inline void glUniform4iARB(GLint location1,GLint v01,GLint v11,GLint v21,GLint v31)
{
	static PFNGLUNIFORM4IARBPROC_ALT fn=(PFNGLUNIFORM4IARBPROC_ALT)glaltGetProcAddressExtension("glUniform4iARB","GL_ARB_shader_objects");
	 fn(location1,v01,v11,v21,v31);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_Uniform4ivARB
#define GL_ALT_FUNDEF_Uniform4ivARB
typedef void (*PFNGLUNIFORM4IVARBPROC_ALT)(GLint,GLsizei,const GLint *);
static inline void glUniform4ivARB(GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLUNIFORM4IVARBPROC_ALT fn=(PFNGLUNIFORM4IVARBPROC_ALT)glaltGetProcAddressExtension("glUniform4ivARB","GL_ARB_shader_objects");
	 fn(location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_UniformMatrix2fvARB
#define GL_ALT_FUNDEF_UniformMatrix2fvARB
typedef void (*PFNGLUNIFORMMATRIX2FVARBPROC_ALT)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glUniformMatrix2fvARB(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX2FVARBPROC_ALT fn=(PFNGLUNIFORMMATRIX2FVARBPROC_ALT)glaltGetProcAddressExtension("glUniformMatrix2fvARB","GL_ARB_shader_objects");
	 fn(location1,count1,transpose1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_UniformMatrix3fvARB
#define GL_ALT_FUNDEF_UniformMatrix3fvARB
typedef void (*PFNGLUNIFORMMATRIX3FVARBPROC_ALT)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glUniformMatrix3fvARB(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX3FVARBPROC_ALT fn=(PFNGLUNIFORMMATRIX3FVARBPROC_ALT)glaltGetProcAddressExtension("glUniformMatrix3fvARB","GL_ARB_shader_objects");
	 fn(location1,count1,transpose1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_UniformMatrix4fvARB
#define GL_ALT_FUNDEF_UniformMatrix4fvARB
typedef void (*PFNGLUNIFORMMATRIX4FVARBPROC_ALT)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glUniformMatrix4fvARB(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX4FVARBPROC_ALT fn=(PFNGLUNIFORMMATRIX4FVARBPROC_ALT)glaltGetProcAddressExtension("glUniformMatrix4fvARB","GL_ARB_shader_objects");
	 fn(location1,count1,transpose1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_UseProgramObjectARB
#define GL_ALT_FUNDEF_UseProgramObjectARB
typedef void (*PFNGLUSEPROGRAMOBJECTARBPROC_ALT)(GLhandleARB);
static inline void glUseProgramObjectARB(GLhandleARB programObj1)
{
	static PFNGLUSEPROGRAMOBJECTARBPROC_ALT fn=(PFNGLUSEPROGRAMOBJECTARBPROC_ALT)glaltGetProcAddressExtension("glUseProgramObjectARB","GL_ARB_shader_objects");
	 fn(programObj1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ValidateProgramARB
#define GL_ALT_FUNDEF_ValidateProgramARB
typedef void (*PFNGLVALIDATEPROGRAMARBPROC_ALT)(GLhandleARB);
static inline void glValidateProgramARB(GLhandleARB programObj1)
{
	static PFNGLVALIDATEPROGRAMARBPROC_ALT fn=(PFNGLVALIDATEPROGRAMARBPROC_ALT)glaltGetProcAddressExtension("glValidateProgramARB","GL_ARB_shader_objects");
	 fn(programObj1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_ARB_shader_precision
#define GL_ARB_shader_precision
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_shader_stencil_export
#define GL_ARB_shader_stencil_export
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_shader_storage_buffer_object
#define GL_ARB_shader_storage_buffer_object
#ifndef GL_SHADER_STORAGE_BARRIER_BIT
#define GL_SHADER_STORAGE_BARRIER_BIT 0x00002000
#endif //GL_SHADER_STORAGE_BARRIER_BIT
#ifndef GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES
#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39
#endif //GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES
#ifndef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#endif //GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#ifndef GL_SHADER_STORAGE_BUFFER
#define GL_SHADER_STORAGE_BUFFER 0x90D2
#endif //GL_SHADER_STORAGE_BUFFER
#ifndef GL_SHADER_STORAGE_BUFFER_BINDING
#define GL_SHADER_STORAGE_BUFFER_BINDING 0x90D3
#endif //GL_SHADER_STORAGE_BUFFER_BINDING
#ifndef GL_SHADER_STORAGE_BUFFER_START
#define GL_SHADER_STORAGE_BUFFER_START 0x90D4
#endif //GL_SHADER_STORAGE_BUFFER_START
#ifndef GL_SHADER_STORAGE_BUFFER_SIZE
#define GL_SHADER_STORAGE_BUFFER_SIZE 0x90D5
#endif //GL_SHADER_STORAGE_BUFFER_SIZE
#ifndef GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS
#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0x90D6
#endif //GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS
#ifndef GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0x90D7
#endif //GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS
#ifndef GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8
#endif //GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS
#ifndef GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9
#endif //GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS
#ifndef GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS
#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0x90DA
#endif //GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS
#ifndef GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS
#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0x90DB
#endif //GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS
#ifndef GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS
#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0x90DC
#endif //GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS
#ifndef GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS
#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0x90DD
#endif //GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS
#ifndef GL_MAX_SHADER_STORAGE_BLOCK_SIZE
#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE 0x90DE
#endif //GL_MAX_SHADER_STORAGE_BLOCK_SIZE
#ifndef GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT
#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF
#endif //GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ShaderStorageBlockBinding
#define GL_ALT_FUNDEF_ShaderStorageBlockBinding
typedef void (*PFNGLSHADERSTORAGEBLOCKBINDINGPROC_ALT)(GLuint,GLuint,GLuint);
static inline void glShaderStorageBlockBinding(GLuint program1,GLuint storageBlockIndex1,GLuint storageBlockBinding1)
{
	static PFNGLSHADERSTORAGEBLOCKBINDINGPROC_ALT fn=(PFNGLSHADERSTORAGEBLOCKBINDINGPROC_ALT)glaltGetProcAddressExtension("glShaderStorageBlockBinding","GL_ARB_shader_storage_buffer_object");
	 fn(program1,storageBlockIndex1,storageBlockBinding1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_shader_subroutine
#define GL_ARB_shader_subroutine
#ifndef GL_UNIFORM_SIZE
#define GL_UNIFORM_SIZE 0x8A38
#endif //GL_UNIFORM_SIZE
#ifndef GL_UNIFORM_NAME_LENGTH
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif //GL_UNIFORM_NAME_LENGTH
#ifndef GL_ACTIVE_SUBROUTINES
#define GL_ACTIVE_SUBROUTINES 0x8DE5
#endif //GL_ACTIVE_SUBROUTINES
#ifndef GL_ACTIVE_SUBROUTINE_UNIFORMS
#define GL_ACTIVE_SUBROUTINE_UNIFORMS 0x8DE6
#endif //GL_ACTIVE_SUBROUTINE_UNIFORMS
#ifndef GL_MAX_SUBROUTINES
#define GL_MAX_SUBROUTINES 0x8DE7
#endif //GL_MAX_SUBROUTINES
#ifndef GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
#endif //GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS
#ifndef GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
#endif //GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS
#ifndef GL_ACTIVE_SUBROUTINE_MAX_LENGTH
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0x8E48
#endif //GL_ACTIVE_SUBROUTINE_MAX_LENGTH
#ifndef GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
#endif //GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH
#ifndef GL_NUM_COMPATIBLE_SUBROUTINES
#define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A
#endif //GL_NUM_COMPATIBLE_SUBROUTINES
#ifndef GL_COMPATIBLE_SUBROUTINES
#define GL_COMPATIBLE_SUBROUTINES 0x8E4B
#endif //GL_COMPATIBLE_SUBROUTINES
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetActiveSubroutineName
#define GL_ALT_FUNDEF_GetActiveSubroutineName
typedef void (*PFNGLGETACTIVESUBROUTINENAMEPROC_ALT)(GLuint,GLenum,GLuint,GLsizei,GLsizei *,GLchar *);
static inline void glGetActiveSubroutineName(GLuint program1,GLenum shadertype1,GLuint index1,GLsizei bufsize1,GLsizei * length1,GLchar * name1)
{
	static PFNGLGETACTIVESUBROUTINENAMEPROC_ALT fn=(PFNGLGETACTIVESUBROUTINENAMEPROC_ALT)glaltGetProcAddressExtension("glGetActiveSubroutineName","GL_ARB_shader_subroutine");
	 fn(program1,shadertype1,index1,bufsize1,length1,name1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetActiveSubroutineUniformName
#define GL_ALT_FUNDEF_GetActiveSubroutineUniformName
typedef void (*PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC_ALT)(GLuint,GLenum,GLuint,GLsizei,GLsizei *,GLchar *);
static inline void glGetActiveSubroutineUniformName(GLuint program1,GLenum shadertype1,GLuint index1,GLsizei bufsize1,GLsizei * length1,GLchar * name1)
{
	static PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC_ALT fn=(PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC_ALT)glaltGetProcAddressExtension("glGetActiveSubroutineUniformName","GL_ARB_shader_subroutine");
	 fn(program1,shadertype1,index1,bufsize1,length1,name1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetActiveSubroutineUniformiv
#define GL_ALT_FUNDEF_GetActiveSubroutineUniformiv
typedef void (*PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC_ALT)(GLuint,GLenum,GLuint,GLenum,GLint *);
static inline void glGetActiveSubroutineUniformiv(GLuint program1,GLenum shadertype1,GLuint index1,GLenum pname1,GLint * values1)
{
	static PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC_ALT fn=(PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC_ALT)glaltGetProcAddressExtension("glGetActiveSubroutineUniformiv","GL_ARB_shader_subroutine");
	 fn(program1,shadertype1,index1,pname1,values1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetProgramStageiv
#define GL_ALT_FUNDEF_GetProgramStageiv
typedef void (*PFNGLGETPROGRAMSTAGEIVPROC_ALT)(GLuint,GLenum,GLenum,GLint *);
static inline void glGetProgramStageiv(GLuint program1,GLenum shadertype1,GLenum pname1,GLint * values1)
{
	static PFNGLGETPROGRAMSTAGEIVPROC_ALT fn=(PFNGLGETPROGRAMSTAGEIVPROC_ALT)glaltGetProcAddressExtension("glGetProgramStageiv","GL_ARB_shader_subroutine");
	 fn(program1,shadertype1,pname1,values1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetSubroutineIndex
#define GL_ALT_FUNDEF_GetSubroutineIndex
typedef GLuint (*PFNGLGETSUBROUTINEINDEXPROC_ALT)(GLuint,GLenum,const GLchar *);
static inline GLuint glGetSubroutineIndex(GLuint program1,GLenum shadertype1,const GLchar * name1)
{
	static PFNGLGETSUBROUTINEINDEXPROC_ALT fn=(PFNGLGETSUBROUTINEINDEXPROC_ALT)glaltGetProcAddressExtension("glGetSubroutineIndex","GL_ARB_shader_subroutine");
	return fn(program1,shadertype1,name1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetSubroutineUniformLocation
#define GL_ALT_FUNDEF_GetSubroutineUniformLocation
typedef GLint (*PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC_ALT)(GLuint,GLenum,const GLchar *);
static inline GLint glGetSubroutineUniformLocation(GLuint program1,GLenum shadertype1,const GLchar * name1)
{
	static PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC_ALT fn=(PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC_ALT)glaltGetProcAddressExtension("glGetSubroutineUniformLocation","GL_ARB_shader_subroutine");
	return fn(program1,shadertype1,name1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetUniformSubroutineuiv
#define GL_ALT_FUNDEF_GetUniformSubroutineuiv
typedef void (*PFNGLGETUNIFORMSUBROUTINEUIVPROC_ALT)(GLenum,GLint,GLuint *);
static inline void glGetUniformSubroutineuiv(GLenum shadertype1,GLint location1,GLuint * params1)
{
	static PFNGLGETUNIFORMSUBROUTINEUIVPROC_ALT fn=(PFNGLGETUNIFORMSUBROUTINEUIVPROC_ALT)glaltGetProcAddressExtension("glGetUniformSubroutineuiv","GL_ARB_shader_subroutine");
	 fn(shadertype1,location1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_UniformSubroutinesuiv
#define GL_ALT_FUNDEF_UniformSubroutinesuiv
typedef void (*PFNGLUNIFORMSUBROUTINESUIVPROC_ALT)(GLenum,GLsizei,const GLuint *);
static inline void glUniformSubroutinesuiv(GLenum shadertype1,GLsizei count1,const GLuint * indices1)
{
	static PFNGLUNIFORMSUBROUTINESUIVPROC_ALT fn=(PFNGLUNIFORMSUBROUTINESUIVPROC_ALT)glaltGetProcAddressExtension("glUniformSubroutinesuiv","GL_ARB_shader_subroutine");
	 fn(shadertype1,count1,indices1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_shader_texture_image_samples
#define GL_ARB_shader_texture_image_samples
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_shader_texture_lod
#define GL_ARB_shader_texture_lod
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_shading_language_100
#define GL_ARB_shading_language_100
#ifndef GL_SHADING_LANGUAGE_VERSION_ARB
#define GL_SHADING_LANGUAGE_VERSION_ARB 0x8B8C
#endif //GL_SHADING_LANGUAGE_VERSION_ARB
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_shading_language_420pack
#define GL_ARB_shading_language_420pack
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_shading_language_include
#define GL_ARB_shading_language_include
#ifndef GL_SHADER_INCLUDE_ARB
#define GL_SHADER_INCLUDE_ARB 0x8DAE
#endif //GL_SHADER_INCLUDE_ARB
#ifndef GL_NAMED_STRING_LENGTH_ARB
#define GL_NAMED_STRING_LENGTH_ARB 0x8DE9
#endif //GL_NAMED_STRING_LENGTH_ARB
#ifndef GL_NAMED_STRING_TYPE_ARB
#define GL_NAMED_STRING_TYPE_ARB 0x8DEA
#endif //GL_NAMED_STRING_TYPE_ARB
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_CompileShaderIncludeARB
#define GL_ALT_FUNDEF_CompileShaderIncludeARB
typedef void (*PFNGLCOMPILESHADERINCLUDEARBPROC_ALT)(GLuint,GLsizei,const GLchar *const*,const GLint *);
static inline void glCompileShaderIncludeARB(GLuint shader1,GLsizei count1,const GLchar *const* path1,const GLint * length1)
{
	static PFNGLCOMPILESHADERINCLUDEARBPROC_ALT fn=(PFNGLCOMPILESHADERINCLUDEARBPROC_ALT)glaltGetProcAddressExtension("glCompileShaderIncludeARB","GL_ARB_shading_language_include");
	 fn(shader1,count1,path1,length1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DeleteNamedStringARB
#define GL_ALT_FUNDEF_DeleteNamedStringARB
typedef void (*PFNGLDELETENAMEDSTRINGARBPROC_ALT)(GLint,const GLchar *);
static inline void glDeleteNamedStringARB(GLint namelen1,const GLchar * name1)
{
	static PFNGLDELETENAMEDSTRINGARBPROC_ALT fn=(PFNGLDELETENAMEDSTRINGARBPROC_ALT)glaltGetProcAddressExtension("glDeleteNamedStringARB","GL_ARB_shading_language_include");
	 fn(namelen1,name1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetNamedStringARB
#define GL_ALT_FUNDEF_GetNamedStringARB
typedef void (*PFNGLGETNAMEDSTRINGARBPROC_ALT)(GLint,const GLchar *,GLsizei,GLint *,GLchar *);
static inline void glGetNamedStringARB(GLint namelen1,const GLchar * name1,GLsizei bufSize1,GLint * stringlen1,GLchar * string1)
{
	static PFNGLGETNAMEDSTRINGARBPROC_ALT fn=(PFNGLGETNAMEDSTRINGARBPROC_ALT)glaltGetProcAddressExtension("glGetNamedStringARB","GL_ARB_shading_language_include");
	 fn(namelen1,name1,bufSize1,stringlen1,string1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetNamedStringivARB
#define GL_ALT_FUNDEF_GetNamedStringivARB
typedef void (*PFNGLGETNAMEDSTRINGIVARBPROC_ALT)(GLint,const GLchar *,GLenum,GLint *);
static inline void glGetNamedStringivARB(GLint namelen1,const GLchar * name1,GLenum pname1,GLint * params1)
{
	static PFNGLGETNAMEDSTRINGIVARBPROC_ALT fn=(PFNGLGETNAMEDSTRINGIVARBPROC_ALT)glaltGetProcAddressExtension("glGetNamedStringivARB","GL_ARB_shading_language_include");
	 fn(namelen1,name1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IsNamedStringARB
#define GL_ALT_FUNDEF_IsNamedStringARB
typedef GLboolean (*PFNGLISNAMEDSTRINGARBPROC_ALT)(GLint,const GLchar *);
static inline GLboolean glIsNamedStringARB(GLint namelen1,const GLchar * name1)
{
	static PFNGLISNAMEDSTRINGARBPROC_ALT fn=(PFNGLISNAMEDSTRINGARBPROC_ALT)glaltGetProcAddressExtension("glIsNamedStringARB","GL_ARB_shading_language_include");
	return fn(namelen1,name1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedStringARB
#define GL_ALT_FUNDEF_NamedStringARB
typedef void (*PFNGLNAMEDSTRINGARBPROC_ALT)(GLenum,GLint,const GLchar *,GLint,const GLchar *);
static inline void glNamedStringARB(GLenum type1,GLint namelen1,const GLchar * name1,GLint stringlen1,const GLchar * string1)
{
	static PFNGLNAMEDSTRINGARBPROC_ALT fn=(PFNGLNAMEDSTRINGARBPROC_ALT)glaltGetProcAddressExtension("glNamedStringARB","GL_ARB_shading_language_include");
	 fn(type1,namelen1,name1,stringlen1,string1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_shading_language_packing
#define GL_ARB_shading_language_packing
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_shadow
#define GL_ARB_shadow
#ifndef GL_TEXTURE_COMPARE_MODE_ARB
#define GL_TEXTURE_COMPARE_MODE_ARB 0x884C
#endif //GL_TEXTURE_COMPARE_MODE_ARB
#ifndef GL_TEXTURE_COMPARE_FUNC_ARB
#define GL_TEXTURE_COMPARE_FUNC_ARB 0x884D
#endif //GL_TEXTURE_COMPARE_FUNC_ARB
#ifndef GL_COMPARE_R_TO_TEXTURE_ARB
#define GL_COMPARE_R_TO_TEXTURE_ARB 0x884E
#endif //GL_COMPARE_R_TO_TEXTURE_ARB
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_shadow_ambient
#define GL_ARB_shadow_ambient
#ifndef GL_TEXTURE_COMPARE_FAIL_VALUE_ARB
#define GL_TEXTURE_COMPARE_FAIL_VALUE_ARB 0x80BF
#endif //GL_TEXTURE_COMPARE_FAIL_VALUE_ARB
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_sparse_buffer
#define GL_ARB_sparse_buffer
#ifndef GL_SPARSE_STORAGE_BIT_ARB
#define GL_SPARSE_STORAGE_BIT_ARB 0x0400
#endif //GL_SPARSE_STORAGE_BIT_ARB
#ifndef GL_SPARSE_BUFFER_PAGE_SIZE_ARB
#define GL_SPARSE_BUFFER_PAGE_SIZE_ARB 0x82F8
#endif //GL_SPARSE_BUFFER_PAGE_SIZE_ARB
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BufferPageCommitmentARB
#define GL_ALT_FUNDEF_BufferPageCommitmentARB
typedef void (*PFNGLBUFFERPAGECOMMITMENTARBPROC_ALT)(GLenum,GLintptr,GLsizeiptr,GLboolean);
static inline void glBufferPageCommitmentARB(GLenum target1,GLintptr offset1,GLsizeiptr size1,GLboolean commit1)
{
	static PFNGLBUFFERPAGECOMMITMENTARBPROC_ALT fn=(PFNGLBUFFERPAGECOMMITMENTARBPROC_ALT)glaltGetProcAddressExtension("glBufferPageCommitmentARB","GL_ARB_sparse_buffer");
	 fn(target1,offset1,size1,commit1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedBufferPageCommitmentARB
#define GL_ALT_FUNDEF_NamedBufferPageCommitmentARB
typedef void (*PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC_ALT)(GLuint,GLintptr,GLsizeiptr,GLboolean);
static inline void glNamedBufferPageCommitmentARB(GLuint buffer1,GLintptr offset1,GLsizeiptr size1,GLboolean commit1)
{
	static PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC_ALT fn=(PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC_ALT)glaltGetProcAddressExtension("glNamedBufferPageCommitmentARB","GL_ARB_sparse_buffer");
	 fn(buffer1,offset1,size1,commit1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedBufferPageCommitmentEXT
#define GL_ALT_FUNDEF_NamedBufferPageCommitmentEXT
typedef void (*PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC_ALT)(GLuint,GLintptr,GLsizeiptr,GLboolean);
static inline void glNamedBufferPageCommitmentEXT(GLuint buffer1,GLintptr offset1,GLsizeiptr size1,GLboolean commit1)
{
	static PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC_ALT fn=(PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC_ALT)glaltGetProcAddressExtension("glNamedBufferPageCommitmentEXT","GL_ARB_sparse_buffer");
	 fn(buffer1,offset1,size1,commit1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_sparse_texture
#define GL_ARB_sparse_texture
#ifndef GL_VIRTUAL_PAGE_SIZE_X_ARB
#define GL_VIRTUAL_PAGE_SIZE_X_ARB 0x9195
#endif //GL_VIRTUAL_PAGE_SIZE_X_ARB
#ifndef GL_VIRTUAL_PAGE_SIZE_Y_ARB
#define GL_VIRTUAL_PAGE_SIZE_Y_ARB 0x9196
#endif //GL_VIRTUAL_PAGE_SIZE_Y_ARB
#ifndef GL_VIRTUAL_PAGE_SIZE_Z_ARB
#define GL_VIRTUAL_PAGE_SIZE_Z_ARB 0x9197
#endif //GL_VIRTUAL_PAGE_SIZE_Z_ARB
#ifndef GL_MAX_SPARSE_TEXTURE_SIZE_ARB
#define GL_MAX_SPARSE_TEXTURE_SIZE_ARB 0x9198
#endif //GL_MAX_SPARSE_TEXTURE_SIZE_ARB
#ifndef GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB 0x9199
#endif //GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB
#ifndef GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB 0x919A
#endif //GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB
#ifndef GL_TEXTURE_SPARSE_ARB
#define GL_TEXTURE_SPARSE_ARB 0x91A6
#endif //GL_TEXTURE_SPARSE_ARB
#ifndef GL_VIRTUAL_PAGE_SIZE_INDEX_ARB
#define GL_VIRTUAL_PAGE_SIZE_INDEX_ARB 0x91A7
#endif //GL_VIRTUAL_PAGE_SIZE_INDEX_ARB
#ifndef GL_NUM_VIRTUAL_PAGE_SIZES_ARB
#define GL_NUM_VIRTUAL_PAGE_SIZES_ARB 0x91A8
#endif //GL_NUM_VIRTUAL_PAGE_SIZES_ARB
#ifndef GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB
#define GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB 0x91A9
#endif //GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB
#ifndef GL_NUM_SPARSE_LEVELS_ARB
#define GL_NUM_SPARSE_LEVELS_ARB 0x91AA
#endif //GL_NUM_SPARSE_LEVELS_ARB
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_TexPageCommitmentARB
#define GL_ALT_FUNDEF_TexPageCommitmentARB
typedef void (*PFNGLTEXPAGECOMMITMENTARBPROC_ALT)(GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLboolean);
static inline void glTexPageCommitmentARB(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLsizei width1,GLsizei height1,GLsizei depth1,GLboolean resident1)
{
	static PFNGLTEXPAGECOMMITMENTARBPROC_ALT fn=(PFNGLTEXPAGECOMMITMENTARBPROC_ALT)glaltGetProcAddressExtension("glTexPageCommitmentARB","GL_ARB_sparse_texture");
	 fn(target1,level1,xoffset1,yoffset1,zoffset1,width1,height1,depth1,resident1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_stencil_texturing
#define GL_ARB_stencil_texturing
#ifndef GL_DEPTH_STENCIL_TEXTURE_MODE
#define GL_DEPTH_STENCIL_TEXTURE_MODE 0x90EA
#endif //GL_DEPTH_STENCIL_TEXTURE_MODE
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_sync
#define GL_ARB_sync
#ifndef GL_SYNC_FLUSH_COMMANDS_BIT
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#endif //GL_SYNC_FLUSH_COMMANDS_BIT
#ifndef GL_MAX_SERVER_WAIT_TIMEOUT
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#endif //GL_MAX_SERVER_WAIT_TIMEOUT
#ifndef GL_OBJECT_TYPE
#define GL_OBJECT_TYPE 0x9112
#endif //GL_OBJECT_TYPE
#ifndef GL_SYNC_CONDITION
#define GL_SYNC_CONDITION 0x9113
#endif //GL_SYNC_CONDITION
#ifndef GL_SYNC_STATUS
#define GL_SYNC_STATUS 0x9114
#endif //GL_SYNC_STATUS
#ifndef GL_SYNC_FLAGS
#define GL_SYNC_FLAGS 0x9115
#endif //GL_SYNC_FLAGS
#ifndef GL_SYNC_FENCE
#define GL_SYNC_FENCE 0x9116
#endif //GL_SYNC_FENCE
#ifndef GL_SYNC_GPU_COMMANDS_COMPLETE
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#endif //GL_SYNC_GPU_COMMANDS_COMPLETE
#ifndef GL_UNSIGNALED
#define GL_UNSIGNALED 0x9118
#endif //GL_UNSIGNALED
#ifndef GL_SIGNALED
#define GL_SIGNALED 0x9119
#endif //GL_SIGNALED
#ifndef GL_ALREADY_SIGNALED
#define GL_ALREADY_SIGNALED 0x911A
#endif //GL_ALREADY_SIGNALED
#ifndef GL_TIMEOUT_EXPIRED
#define GL_TIMEOUT_EXPIRED 0x911B
#endif //GL_TIMEOUT_EXPIRED
#ifndef GL_CONDITION_SATISFIED
#define GL_CONDITION_SATISFIED 0x911C
#endif //GL_CONDITION_SATISFIED
#ifndef GL_WAIT_FAILED
#define GL_WAIT_FAILED 0x911D
#endif //GL_WAIT_FAILED
#ifndef GL_TIMEOUT_IGNORED
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFF
#endif //GL_TIMEOUT_IGNORED
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ClientWaitSync
#define GL_ALT_FUNDEF_ClientWaitSync
typedef GLenum (*PFNGLCLIENTWAITSYNCPROC_ALT)(GLsync,GLbitfield,GLuint64);
static inline GLenum glClientWaitSync(GLsync sync1,GLbitfield flags1,GLuint64 timeout1)
{
	static PFNGLCLIENTWAITSYNCPROC_ALT fn=(PFNGLCLIENTWAITSYNCPROC_ALT)glaltGetProcAddressExtension("glClientWaitSync","GL_ARB_sync");
	return fn(sync1,flags1,timeout1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DeleteSync
#define GL_ALT_FUNDEF_DeleteSync
typedef void (*PFNGLDELETESYNCPROC_ALT)(GLsync);
static inline void glDeleteSync(GLsync sync1)
{
	static PFNGLDELETESYNCPROC_ALT fn=(PFNGLDELETESYNCPROC_ALT)glaltGetProcAddressExtension("glDeleteSync","GL_ARB_sync");
	 fn(sync1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FenceSync
#define GL_ALT_FUNDEF_FenceSync
typedef GLsync (*PFNGLFENCESYNCPROC_ALT)(GLenum,GLbitfield);
static inline GLsync glFenceSync(GLenum condition1,GLbitfield flags1)
{
	static PFNGLFENCESYNCPROC_ALT fn=(PFNGLFENCESYNCPROC_ALT)glaltGetProcAddressExtension("glFenceSync","GL_ARB_sync");
	return fn(condition1,flags1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetInteger64v
#define GL_ALT_FUNDEF_GetInteger64v
typedef void (*PFNGLGETINTEGER64VPROC_ALT)(GLenum,GLint64 *);
static inline void glGetInteger64v(GLenum pname1,GLint64 * data1)
{
	static PFNGLGETINTEGER64VPROC_ALT fn=(PFNGLGETINTEGER64VPROC_ALT)glaltGetProcAddressExtension("glGetInteger64v","GL_ARB_sync");
	 fn(pname1,data1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetSynciv
#define GL_ALT_FUNDEF_GetSynciv
typedef void (*PFNGLGETSYNCIVPROC_ALT)(GLsync,GLenum,GLsizei,GLsizei *,GLint *);
static inline void glGetSynciv(GLsync sync1,GLenum pname1,GLsizei bufSize1,GLsizei * length1,GLint * values1)
{
	static PFNGLGETSYNCIVPROC_ALT fn=(PFNGLGETSYNCIVPROC_ALT)glaltGetProcAddressExtension("glGetSynciv","GL_ARB_sync");
	 fn(sync1,pname1,bufSize1,length1,values1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IsSync
#define GL_ALT_FUNDEF_IsSync
typedef GLboolean (*PFNGLISSYNCPROC_ALT)(GLsync);
static inline GLboolean glIsSync(GLsync sync1)
{
	static PFNGLISSYNCPROC_ALT fn=(PFNGLISSYNCPROC_ALT)glaltGetProcAddressExtension("glIsSync","GL_ARB_sync");
	return fn(sync1);
}
#endif

#ifndef	GL_ALT_FUNDEF_WaitSync
#define GL_ALT_FUNDEF_WaitSync
typedef void (*PFNGLWAITSYNCPROC_ALT)(GLsync,GLbitfield,GLuint64);
static inline void glWaitSync(GLsync sync1,GLbitfield flags1,GLuint64 timeout1)
{
	static PFNGLWAITSYNCPROC_ALT fn=(PFNGLWAITSYNCPROC_ALT)glaltGetProcAddressExtension("glWaitSync","GL_ARB_sync");
	 fn(sync1,flags1,timeout1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_tessellation_shader
#define GL_ARB_tessellation_shader
#ifndef GL_TRIANGLES
#define GL_TRIANGLES 0x0004
#endif //GL_TRIANGLES
#ifndef GL_QUADS
#define GL_QUADS 0x0007
#endif //GL_QUADS
#ifndef GL_PATCHES
#define GL_PATCHES 0x000E
#endif //GL_PATCHES
#ifndef GL_EQUAL
#define GL_EQUAL 0x0202
#endif //GL_EQUAL
#ifndef GL_CW
#define GL_CW 0x0900
#endif //GL_CW
#ifndef GL_CCW
#define GL_CCW 0x0901
#endif //GL_CCW
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
#endif //GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
#endif //GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER
#ifndef GL_MAX_TESS_CONTROL_INPUT_COMPONENTS
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#endif //GL_MAX_TESS_CONTROL_INPUT_COMPONENTS
#ifndef GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#endif //GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS
#ifndef GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#endif //GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS
#ifndef GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#endif //GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS
#ifndef GL_PATCH_VERTICES
#define GL_PATCH_VERTICES 0x8E72
#endif //GL_PATCH_VERTICES
#ifndef GL_PATCH_DEFAULT_INNER_LEVEL
#define GL_PATCH_DEFAULT_INNER_LEVEL 0x8E73
#endif //GL_PATCH_DEFAULT_INNER_LEVEL
#ifndef GL_PATCH_DEFAULT_OUTER_LEVEL
#define GL_PATCH_DEFAULT_OUTER_LEVEL 0x8E74
#endif //GL_PATCH_DEFAULT_OUTER_LEVEL
#ifndef GL_TESS_CONTROL_OUTPUT_VERTICES
#define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75
#endif //GL_TESS_CONTROL_OUTPUT_VERTICES
#ifndef GL_TESS_GEN_MODE
#define GL_TESS_GEN_MODE 0x8E76
#endif //GL_TESS_GEN_MODE
#ifndef GL_TESS_GEN_SPACING
#define GL_TESS_GEN_SPACING 0x8E77
#endif //GL_TESS_GEN_SPACING
#ifndef GL_TESS_GEN_VERTEX_ORDER
#define GL_TESS_GEN_VERTEX_ORDER 0x8E78
#endif //GL_TESS_GEN_VERTEX_ORDER
#ifndef GL_TESS_GEN_POINT_MODE
#define GL_TESS_GEN_POINT_MODE 0x8E79
#endif //GL_TESS_GEN_POINT_MODE
#ifndef GL_ISOLINES
#define GL_ISOLINES 0x8E7A
#endif //GL_ISOLINES
#ifndef GL_FRACTIONAL_ODD
#define GL_FRACTIONAL_ODD 0x8E7B
#endif //GL_FRACTIONAL_ODD
#ifndef GL_FRACTIONAL_EVEN
#define GL_FRACTIONAL_EVEN 0x8E7C
#endif //GL_FRACTIONAL_EVEN
#ifndef GL_MAX_PATCH_VERTICES
#define GL_MAX_PATCH_VERTICES 0x8E7D
#endif //GL_MAX_PATCH_VERTICES
#ifndef GL_MAX_TESS_GEN_LEVEL
#define GL_MAX_TESS_GEN_LEVEL 0x8E7E
#endif //GL_MAX_TESS_GEN_LEVEL
#ifndef GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#endif //GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS
#ifndef GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#endif //GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS
#ifndef GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#endif //GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS
#ifndef GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#endif //GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS
#ifndef GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#endif //GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS
#ifndef GL_MAX_TESS_PATCH_COMPONENTS
#define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84
#endif //GL_MAX_TESS_PATCH_COMPONENTS
#ifndef GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#endif //GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS
#ifndef GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#endif //GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS
#ifndef GL_TESS_EVALUATION_SHADER
#define GL_TESS_EVALUATION_SHADER 0x8E87
#endif //GL_TESS_EVALUATION_SHADER
#ifndef GL_TESS_CONTROL_SHADER
#define GL_TESS_CONTROL_SHADER 0x8E88
#endif //GL_TESS_CONTROL_SHADER
#ifndef GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#endif //GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS
#ifndef GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#endif //GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_PatchParameterfv
#define GL_ALT_FUNDEF_PatchParameterfv
typedef void (*PFNGLPATCHPARAMETERFVPROC_ALT)(GLenum,const GLfloat *);
static inline void glPatchParameterfv(GLenum pname1,const GLfloat * values1)
{
	static PFNGLPATCHPARAMETERFVPROC_ALT fn=(PFNGLPATCHPARAMETERFVPROC_ALT)glaltGetProcAddressExtension("glPatchParameterfv","GL_ARB_tessellation_shader");
	 fn(pname1,values1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PatchParameteri
#define GL_ALT_FUNDEF_PatchParameteri
typedef void (*PFNGLPATCHPARAMETERIPROC_ALT)(GLenum,GLint);
static inline void glPatchParameteri(GLenum pname1,GLint value1)
{
	static PFNGLPATCHPARAMETERIPROC_ALT fn=(PFNGLPATCHPARAMETERIPROC_ALT)glaltGetProcAddressExtension("glPatchParameteri","GL_ARB_tessellation_shader");
	 fn(pname1,value1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_texture_barrier
#define GL_ARB_texture_barrier
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_TextureBarrier
#define GL_ALT_FUNDEF_TextureBarrier
typedef void (*PFNGLTEXTUREBARRIERPROC_ALT)();
static inline void glTextureBarrier()
{
	static PFNGLTEXTUREBARRIERPROC_ALT fn=(PFNGLTEXTUREBARRIERPROC_ALT)glaltGetProcAddressExtension("glTextureBarrier","GL_ARB_texture_barrier");
	 fn();
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_texture_border_clamp
#define GL_ARB_texture_border_clamp
#ifndef GL_CLAMP_TO_BORDER_ARB
#define GL_CLAMP_TO_BORDER_ARB 0x812D
#endif //GL_CLAMP_TO_BORDER_ARB
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_texture_buffer_object
#define GL_ARB_texture_buffer_object
#ifndef GL_TEXTURE_BUFFER_ARB
#define GL_TEXTURE_BUFFER_ARB 0x8C2A
#endif //GL_TEXTURE_BUFFER_ARB
#ifndef GL_MAX_TEXTURE_BUFFER_SIZE_ARB
#define GL_MAX_TEXTURE_BUFFER_SIZE_ARB 0x8C2B
#endif //GL_MAX_TEXTURE_BUFFER_SIZE_ARB
#ifndef GL_TEXTURE_BINDING_BUFFER_ARB
#define GL_TEXTURE_BINDING_BUFFER_ARB 0x8C2C
#endif //GL_TEXTURE_BINDING_BUFFER_ARB
#ifndef GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB 0x8C2D
#endif //GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB
#ifndef GL_TEXTURE_BUFFER_FORMAT_ARB
#define GL_TEXTURE_BUFFER_FORMAT_ARB 0x8C2E
#endif //GL_TEXTURE_BUFFER_FORMAT_ARB
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_TexBufferARB
#define GL_ALT_FUNDEF_TexBufferARB
typedef void (*PFNGLTEXBUFFERARBPROC_ALT)(GLenum,GLenum,GLuint);
static inline void glTexBufferARB(GLenum target1,GLenum internalformat1,GLuint buffer1)
{
	static PFNGLTEXBUFFERARBPROC_ALT fn=(PFNGLTEXBUFFERARBPROC_ALT)glaltGetProcAddressExtension("glTexBufferARB","GL_ARB_texture_buffer_object");
	 fn(target1,internalformat1,buffer1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_ARB_texture_buffer_object_rgb32
#define GL_ARB_texture_buffer_object_rgb32
#ifndef GL_RGB32F
#define GL_RGB32F 0x8815
#endif //GL_RGB32F
#ifndef GL_RGB32UI
#define GL_RGB32UI 0x8D71
#endif //GL_RGB32UI
#ifndef GL_RGB32I
#define GL_RGB32I 0x8D83
#endif //GL_RGB32I
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_texture_buffer_range
#define GL_ARB_texture_buffer_range
#ifndef GL_TEXTURE_BUFFER_OFFSET
#define GL_TEXTURE_BUFFER_OFFSET 0x919D
#endif //GL_TEXTURE_BUFFER_OFFSET
#ifndef GL_TEXTURE_BUFFER_SIZE
#define GL_TEXTURE_BUFFER_SIZE 0x919E
#endif //GL_TEXTURE_BUFFER_SIZE
#ifndef GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0x919F
#endif //GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_TexBufferRange
#define GL_ALT_FUNDEF_TexBufferRange
typedef void (*PFNGLTEXBUFFERRANGEPROC_ALT)(GLenum,GLenum,GLuint,GLintptr,GLsizeiptr);
static inline void glTexBufferRange(GLenum target1,GLenum internalformat1,GLuint buffer1,GLintptr offset1,GLsizeiptr size1)
{
	static PFNGLTEXBUFFERRANGEPROC_ALT fn=(PFNGLTEXBUFFERRANGEPROC_ALT)glaltGetProcAddressExtension("glTexBufferRange","GL_ARB_texture_buffer_range");
	 fn(target1,internalformat1,buffer1,offset1,size1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_texture_compression
#define GL_ARB_texture_compression
#ifndef GL_COMPRESSED_ALPHA_ARB
#define GL_COMPRESSED_ALPHA_ARB 0x84E9
#endif //GL_COMPRESSED_ALPHA_ARB
#ifndef GL_COMPRESSED_LUMINANCE_ARB
#define GL_COMPRESSED_LUMINANCE_ARB 0x84EA
#endif //GL_COMPRESSED_LUMINANCE_ARB
#ifndef GL_COMPRESSED_LUMINANCE_ALPHA_ARB
#define GL_COMPRESSED_LUMINANCE_ALPHA_ARB 0x84EB
#endif //GL_COMPRESSED_LUMINANCE_ALPHA_ARB
#ifndef GL_COMPRESSED_INTENSITY_ARB
#define GL_COMPRESSED_INTENSITY_ARB 0x84EC
#endif //GL_COMPRESSED_INTENSITY_ARB
#ifndef GL_COMPRESSED_RGB_ARB
#define GL_COMPRESSED_RGB_ARB 0x84ED
#endif //GL_COMPRESSED_RGB_ARB
#ifndef GL_COMPRESSED_RGBA_ARB
#define GL_COMPRESSED_RGBA_ARB 0x84EE
#endif //GL_COMPRESSED_RGBA_ARB
#ifndef GL_TEXTURE_COMPRESSION_HINT_ARB
#define GL_TEXTURE_COMPRESSION_HINT_ARB 0x84EF
#endif //GL_TEXTURE_COMPRESSION_HINT_ARB
#ifndef GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB 0x86A0
#endif //GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
#ifndef GL_TEXTURE_COMPRESSED_ARB
#define GL_TEXTURE_COMPRESSED_ARB 0x86A1
#endif //GL_TEXTURE_COMPRESSED_ARB
#ifndef GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A2
#endif //GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB
#ifndef GL_COMPRESSED_TEXTURE_FORMATS_ARB
#define GL_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A3
#endif //GL_COMPRESSED_TEXTURE_FORMATS_ARB
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_CompressedTexImage1DARB
#define GL_ALT_FUNDEF_CompressedTexImage1DARB
typedef void (*PFNGLCOMPRESSEDTEXIMAGE1DARBPROC_ALT)(GLenum,GLint,GLenum,GLsizei,GLint,GLsizei,const void *);
static inline void glCompressedTexImage1DARB(GLenum target1,GLint level1,GLenum internalformat1,GLsizei width1,GLint border1,GLsizei imageSize1,const void * data1)
{
	static PFNGLCOMPRESSEDTEXIMAGE1DARBPROC_ALT fn=(PFNGLCOMPRESSEDTEXIMAGE1DARBPROC_ALT)glaltGetProcAddressExtension("glCompressedTexImage1DARB","GL_ARB_texture_compression");
	 fn(target1,level1,internalformat1,width1,border1,imageSize1,data1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_CompressedTexImage2DARB
#define GL_ALT_FUNDEF_CompressedTexImage2DARB
typedef void (*PFNGLCOMPRESSEDTEXIMAGE2DARBPROC_ALT)(GLenum,GLint,GLenum,GLsizei,GLsizei,GLint,GLsizei,const void *);
static inline void glCompressedTexImage2DARB(GLenum target1,GLint level1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLint border1,GLsizei imageSize1,const void * data1)
{
	static PFNGLCOMPRESSEDTEXIMAGE2DARBPROC_ALT fn=(PFNGLCOMPRESSEDTEXIMAGE2DARBPROC_ALT)glaltGetProcAddressExtension("glCompressedTexImage2DARB","GL_ARB_texture_compression");
	 fn(target1,level1,internalformat1,width1,height1,border1,imageSize1,data1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_CompressedTexImage3DARB
#define GL_ALT_FUNDEF_CompressedTexImage3DARB
typedef void (*PFNGLCOMPRESSEDTEXIMAGE3DARBPROC_ALT)(GLenum,GLint,GLenum,GLsizei,GLsizei,GLsizei,GLint,GLsizei,const void *);
static inline void glCompressedTexImage3DARB(GLenum target1,GLint level1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLint border1,GLsizei imageSize1,const void * data1)
{
	static PFNGLCOMPRESSEDTEXIMAGE3DARBPROC_ALT fn=(PFNGLCOMPRESSEDTEXIMAGE3DARBPROC_ALT)glaltGetProcAddressExtension("glCompressedTexImage3DARB","GL_ARB_texture_compression");
	 fn(target1,level1,internalformat1,width1,height1,depth1,border1,imageSize1,data1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_CompressedTexSubImage1DARB
#define GL_ALT_FUNDEF_CompressedTexSubImage1DARB
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC_ALT)(GLenum,GLint,GLint,GLsizei,GLenum,GLsizei,const void *);
static inline void glCompressedTexSubImage1DARB(GLenum target1,GLint level1,GLint xoffset1,GLsizei width1,GLenum format1,GLsizei imageSize1,const void * data1)
{
	static PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC_ALT fn=(PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC_ALT)glaltGetProcAddressExtension("glCompressedTexSubImage1DARB","GL_ARB_texture_compression");
	 fn(target1,level1,xoffset1,width1,format1,imageSize1,data1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_CompressedTexSubImage2DARB
#define GL_ALT_FUNDEF_CompressedTexSubImage2DARB
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC_ALT)(GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLsizei,const void *);
static inline void glCompressedTexSubImage2DARB(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLsizei width1,GLsizei height1,GLenum format1,GLsizei imageSize1,const void * data1)
{
	static PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC_ALT fn=(PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC_ALT)glaltGetProcAddressExtension("glCompressedTexSubImage2DARB","GL_ARB_texture_compression");
	 fn(target1,level1,xoffset1,yoffset1,width1,height1,format1,imageSize1,data1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_CompressedTexSubImage3DARB
#define GL_ALT_FUNDEF_CompressedTexSubImage3DARB
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC_ALT)(GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLsizei,const void *);
static inline void glCompressedTexSubImage3DARB(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLsizei width1,GLsizei height1,GLsizei depth1,GLenum format1,GLsizei imageSize1,const void * data1)
{
	static PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC_ALT fn=(PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC_ALT)glaltGetProcAddressExtension("glCompressedTexSubImage3DARB","GL_ARB_texture_compression");
	 fn(target1,level1,xoffset1,yoffset1,zoffset1,width1,height1,depth1,format1,imageSize1,data1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetCompressedTexImageARB
#define GL_ALT_FUNDEF_GetCompressedTexImageARB
typedef void (*PFNGLGETCOMPRESSEDTEXIMAGEARBPROC_ALT)(GLenum,GLint,void *);
static inline void glGetCompressedTexImageARB(GLenum target1,GLint level1,void * img1)
{
	static PFNGLGETCOMPRESSEDTEXIMAGEARBPROC_ALT fn=(PFNGLGETCOMPRESSEDTEXIMAGEARBPROC_ALT)glaltGetProcAddressExtension("glGetCompressedTexImageARB","GL_ARB_texture_compression");
	 fn(target1,level1,img1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_ARB_texture_compression_bptc
#define GL_ARB_texture_compression_bptc
#ifndef GL_COMPRESSED_RGBA_BPTC_UNORM_ARB
#define GL_COMPRESSED_RGBA_BPTC_UNORM_ARB 0x8E8C
#endif //GL_COMPRESSED_RGBA_BPTC_UNORM_ARB
#ifndef GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB 0x8E8D
#endif //GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB
#ifndef GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB 0x8E8E
#endif //GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB
#ifndef GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB 0x8E8F
#endif //GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_texture_compression_rgtc
#define GL_ARB_texture_compression_rgtc
#ifndef GL_COMPRESSED_RED_RGTC1
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#endif //GL_COMPRESSED_RED_RGTC1
#ifndef GL_COMPRESSED_SIGNED_RED_RGTC1
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#endif //GL_COMPRESSED_SIGNED_RED_RGTC1
#ifndef GL_COMPRESSED_RG_RGTC2
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#endif //GL_COMPRESSED_RG_RGTC2
#ifndef GL_COMPRESSED_SIGNED_RG_RGTC2
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#endif //GL_COMPRESSED_SIGNED_RG_RGTC2
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_texture_cube_map
#define GL_ARB_texture_cube_map
#ifndef GL_NORMAL_MAP_ARB
#define GL_NORMAL_MAP_ARB 0x8511
#endif //GL_NORMAL_MAP_ARB
#ifndef GL_REFLECTION_MAP_ARB
#define GL_REFLECTION_MAP_ARB 0x8512
#endif //GL_REFLECTION_MAP_ARB
#ifndef GL_TEXTURE_CUBE_MAP_ARB
#define GL_TEXTURE_CUBE_MAP_ARB 0x8513
#endif //GL_TEXTURE_CUBE_MAP_ARB
#ifndef GL_TEXTURE_BINDING_CUBE_MAP_ARB
#define GL_TEXTURE_BINDING_CUBE_MAP_ARB 0x8514
#endif //GL_TEXTURE_BINDING_CUBE_MAP_ARB
#ifndef GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB 0x8515
#endif //GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB
#ifndef GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB 0x8516
#endif //GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
#ifndef GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB 0x8517
#endif //GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
#ifndef GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB 0x8518
#endif //GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
#ifndef GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB 0x8519
#endif //GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
#ifndef GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB 0x851A
#endif //GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
#ifndef GL_PROXY_TEXTURE_CUBE_MAP_ARB
#define GL_PROXY_TEXTURE_CUBE_MAP_ARB 0x851B
#endif //GL_PROXY_TEXTURE_CUBE_MAP_ARB
#ifndef GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB 0x851C
#endif //GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_texture_cube_map_array
#define GL_ARB_texture_cube_map_array
#ifndef GL_TEXTURE_CUBE_MAP_ARRAY_ARB
#define GL_TEXTURE_CUBE_MAP_ARRAY_ARB 0x9009
#endif //GL_TEXTURE_CUBE_MAP_ARRAY_ARB
#ifndef GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB 0x900A
#endif //GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB
#ifndef GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB 0x900B
#endif //GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB
#ifndef GL_SAMPLER_CUBE_MAP_ARRAY_ARB
#define GL_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900C
#endif //GL_SAMPLER_CUBE_MAP_ARRAY_ARB
#ifndef GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB 0x900D
#endif //GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB
#ifndef GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900E
#endif //GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
#ifndef GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900F
#endif //GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_texture_env_add
#define GL_ARB_texture_env_add
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_texture_env_combine
#define GL_ARB_texture_env_combine
#ifndef GL_SUBTRACT_ARB
#define GL_SUBTRACT_ARB 0x84E7
#endif //GL_SUBTRACT_ARB
#ifndef GL_COMBINE_ARB
#define GL_COMBINE_ARB 0x8570
#endif //GL_COMBINE_ARB
#ifndef GL_COMBINE_RGB_ARB
#define GL_COMBINE_RGB_ARB 0x8571
#endif //GL_COMBINE_RGB_ARB
#ifndef GL_COMBINE_ALPHA_ARB
#define GL_COMBINE_ALPHA_ARB 0x8572
#endif //GL_COMBINE_ALPHA_ARB
#ifndef GL_RGB_SCALE_ARB
#define GL_RGB_SCALE_ARB 0x8573
#endif //GL_RGB_SCALE_ARB
#ifndef GL_ADD_SIGNED_ARB
#define GL_ADD_SIGNED_ARB 0x8574
#endif //GL_ADD_SIGNED_ARB
#ifndef GL_INTERPOLATE_ARB
#define GL_INTERPOLATE_ARB 0x8575
#endif //GL_INTERPOLATE_ARB
#ifndef GL_CONSTANT_ARB
#define GL_CONSTANT_ARB 0x8576
#endif //GL_CONSTANT_ARB
#ifndef GL_PRIMARY_COLOR_ARB
#define GL_PRIMARY_COLOR_ARB 0x8577
#endif //GL_PRIMARY_COLOR_ARB
#ifndef GL_PREVIOUS_ARB
#define GL_PREVIOUS_ARB 0x8578
#endif //GL_PREVIOUS_ARB
#ifndef GL_SOURCE0_RGB_ARB
#define GL_SOURCE0_RGB_ARB 0x8580
#endif //GL_SOURCE0_RGB_ARB
#ifndef GL_SOURCE1_RGB_ARB
#define GL_SOURCE1_RGB_ARB 0x8581
#endif //GL_SOURCE1_RGB_ARB
#ifndef GL_SOURCE2_RGB_ARB
#define GL_SOURCE2_RGB_ARB 0x8582
#endif //GL_SOURCE2_RGB_ARB
#ifndef GL_SOURCE0_ALPHA_ARB
#define GL_SOURCE0_ALPHA_ARB 0x8588
#endif //GL_SOURCE0_ALPHA_ARB
#ifndef GL_SOURCE1_ALPHA_ARB
#define GL_SOURCE1_ALPHA_ARB 0x8589
#endif //GL_SOURCE1_ALPHA_ARB
#ifndef GL_SOURCE2_ALPHA_ARB
#define GL_SOURCE2_ALPHA_ARB 0x858A
#endif //GL_SOURCE2_ALPHA_ARB
#ifndef GL_OPERAND0_RGB_ARB
#define GL_OPERAND0_RGB_ARB 0x8590
#endif //GL_OPERAND0_RGB_ARB
#ifndef GL_OPERAND1_RGB_ARB
#define GL_OPERAND1_RGB_ARB 0x8591
#endif //GL_OPERAND1_RGB_ARB
#ifndef GL_OPERAND2_RGB_ARB
#define GL_OPERAND2_RGB_ARB 0x8592
#endif //GL_OPERAND2_RGB_ARB
#ifndef GL_OPERAND0_ALPHA_ARB
#define GL_OPERAND0_ALPHA_ARB 0x8598
#endif //GL_OPERAND0_ALPHA_ARB
#ifndef GL_OPERAND1_ALPHA_ARB
#define GL_OPERAND1_ALPHA_ARB 0x8599
#endif //GL_OPERAND1_ALPHA_ARB
#ifndef GL_OPERAND2_ALPHA_ARB
#define GL_OPERAND2_ALPHA_ARB 0x859A
#endif //GL_OPERAND2_ALPHA_ARB
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_texture_env_crossbar
#define GL_ARB_texture_env_crossbar
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_texture_env_dot3
#define GL_ARB_texture_env_dot3
#ifndef GL_DOT3_RGB_ARB
#define GL_DOT3_RGB_ARB 0x86AE
#endif //GL_DOT3_RGB_ARB
#ifndef GL_DOT3_RGBA_ARB
#define GL_DOT3_RGBA_ARB 0x86AF
#endif //GL_DOT3_RGBA_ARB
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_texture_float
#define GL_ARB_texture_float
#ifndef GL_RGBA32F_ARB
#define GL_RGBA32F_ARB 0x8814
#endif //GL_RGBA32F_ARB
#ifndef GL_RGB32F_ARB
#define GL_RGB32F_ARB 0x8815
#endif //GL_RGB32F_ARB
#ifndef GL_ALPHA32F_ARB
#define GL_ALPHA32F_ARB 0x8816
#endif //GL_ALPHA32F_ARB
#ifndef GL_INTENSITY32F_ARB
#define GL_INTENSITY32F_ARB 0x8817
#endif //GL_INTENSITY32F_ARB
#ifndef GL_LUMINANCE32F_ARB
#define GL_LUMINANCE32F_ARB 0x8818
#endif //GL_LUMINANCE32F_ARB
#ifndef GL_LUMINANCE_ALPHA32F_ARB
#define GL_LUMINANCE_ALPHA32F_ARB 0x8819
#endif //GL_LUMINANCE_ALPHA32F_ARB
#ifndef GL_RGBA16F_ARB
#define GL_RGBA16F_ARB 0x881A
#endif //GL_RGBA16F_ARB
#ifndef GL_RGB16F_ARB
#define GL_RGB16F_ARB 0x881B
#endif //GL_RGB16F_ARB
#ifndef GL_ALPHA16F_ARB
#define GL_ALPHA16F_ARB 0x881C
#endif //GL_ALPHA16F_ARB
#ifndef GL_INTENSITY16F_ARB
#define GL_INTENSITY16F_ARB 0x881D
#endif //GL_INTENSITY16F_ARB
#ifndef GL_LUMINANCE16F_ARB
#define GL_LUMINANCE16F_ARB 0x881E
#endif //GL_LUMINANCE16F_ARB
#ifndef GL_LUMINANCE_ALPHA16F_ARB
#define GL_LUMINANCE_ALPHA16F_ARB 0x881F
#endif //GL_LUMINANCE_ALPHA16F_ARB
#ifndef GL_TEXTURE_RED_TYPE_ARB
#define GL_TEXTURE_RED_TYPE_ARB 0x8C10
#endif //GL_TEXTURE_RED_TYPE_ARB
#ifndef GL_TEXTURE_GREEN_TYPE_ARB
#define GL_TEXTURE_GREEN_TYPE_ARB 0x8C11
#endif //GL_TEXTURE_GREEN_TYPE_ARB
#ifndef GL_TEXTURE_BLUE_TYPE_ARB
#define GL_TEXTURE_BLUE_TYPE_ARB 0x8C12
#endif //GL_TEXTURE_BLUE_TYPE_ARB
#ifndef GL_TEXTURE_ALPHA_TYPE_ARB
#define GL_TEXTURE_ALPHA_TYPE_ARB 0x8C13
#endif //GL_TEXTURE_ALPHA_TYPE_ARB
#ifndef GL_TEXTURE_LUMINANCE_TYPE_ARB
#define GL_TEXTURE_LUMINANCE_TYPE_ARB 0x8C14
#endif //GL_TEXTURE_LUMINANCE_TYPE_ARB
#ifndef GL_TEXTURE_INTENSITY_TYPE_ARB
#define GL_TEXTURE_INTENSITY_TYPE_ARB 0x8C15
#endif //GL_TEXTURE_INTENSITY_TYPE_ARB
#ifndef GL_TEXTURE_DEPTH_TYPE_ARB
#define GL_TEXTURE_DEPTH_TYPE_ARB 0x8C16
#endif //GL_TEXTURE_DEPTH_TYPE_ARB
#ifndef GL_UNSIGNED_NORMALIZED_ARB
#define GL_UNSIGNED_NORMALIZED_ARB 0x8C17
#endif //GL_UNSIGNED_NORMALIZED_ARB
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_texture_gather
#define GL_ARB_texture_gather
#ifndef GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5E
#endif //GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
#ifndef GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5F
#endif //GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
#ifndef GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB
#define GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB 0x8F9F
#endif //GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_texture_mirror_clamp_to_edge
#define GL_ARB_texture_mirror_clamp_to_edge
#ifndef GL_MIRROR_CLAMP_TO_EDGE
#define GL_MIRROR_CLAMP_TO_EDGE 0x8743
#endif //GL_MIRROR_CLAMP_TO_EDGE
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_texture_mirrored_repeat
#define GL_ARB_texture_mirrored_repeat
#ifndef GL_MIRRORED_REPEAT_ARB
#define GL_MIRRORED_REPEAT_ARB 0x8370
#endif //GL_MIRRORED_REPEAT_ARB
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_texture_multisample
#define GL_ARB_texture_multisample
#ifndef GL_SAMPLE_POSITION
#define GL_SAMPLE_POSITION 0x8E50
#endif //GL_SAMPLE_POSITION
#ifndef GL_SAMPLE_MASK
#define GL_SAMPLE_MASK 0x8E51
#endif //GL_SAMPLE_MASK
#ifndef GL_SAMPLE_MASK_VALUE
#define GL_SAMPLE_MASK_VALUE 0x8E52
#endif //GL_SAMPLE_MASK_VALUE
#ifndef GL_MAX_SAMPLE_MASK_WORDS
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#endif //GL_MAX_SAMPLE_MASK_WORDS
#ifndef GL_TEXTURE_2D_MULTISAMPLE
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#endif //GL_TEXTURE_2D_MULTISAMPLE
#ifndef GL_PROXY_TEXTURE_2D_MULTISAMPLE
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
#endif //GL_PROXY_TEXTURE_2D_MULTISAMPLE
#ifndef GL_TEXTURE_2D_MULTISAMPLE_ARRAY
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#endif //GL_TEXTURE_2D_MULTISAMPLE_ARRAY
#ifndef GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#endif //GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
#ifndef GL_TEXTURE_BINDING_2D_MULTISAMPLE
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#endif //GL_TEXTURE_BINDING_2D_MULTISAMPLE
#ifndef GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#endif //GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
#ifndef GL_TEXTURE_SAMPLES
#define GL_TEXTURE_SAMPLES 0x9106
#endif //GL_TEXTURE_SAMPLES
#ifndef GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#endif //GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
#ifndef GL_SAMPLER_2D_MULTISAMPLE
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#endif //GL_SAMPLER_2D_MULTISAMPLE
#ifndef GL_INT_SAMPLER_2D_MULTISAMPLE
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#endif //GL_INT_SAMPLER_2D_MULTISAMPLE
#ifndef GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#endif //GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
#ifndef GL_SAMPLER_2D_MULTISAMPLE_ARRAY
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#endif //GL_SAMPLER_2D_MULTISAMPLE_ARRAY
#ifndef GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#endif //GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
#ifndef GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#endif //GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
#ifndef GL_MAX_COLOR_TEXTURE_SAMPLES
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#endif //GL_MAX_COLOR_TEXTURE_SAMPLES
#ifndef GL_MAX_DEPTH_TEXTURE_SAMPLES
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#endif //GL_MAX_DEPTH_TEXTURE_SAMPLES
#ifndef GL_MAX_INTEGER_SAMPLES
#define GL_MAX_INTEGER_SAMPLES 0x9110
#endif //GL_MAX_INTEGER_SAMPLES
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetMultisamplefv
#define GL_ALT_FUNDEF_GetMultisamplefv
typedef void (*PFNGLGETMULTISAMPLEFVPROC_ALT)(GLenum,GLuint,GLfloat *);
static inline void glGetMultisamplefv(GLenum pname1,GLuint index1,GLfloat * val1)
{
	static PFNGLGETMULTISAMPLEFVPROC_ALT fn=(PFNGLGETMULTISAMPLEFVPROC_ALT)glaltGetProcAddressExtension("glGetMultisamplefv","GL_ARB_texture_multisample");
	 fn(pname1,index1,val1);
}
#endif

#ifndef	GL_ALT_FUNDEF_SampleMaski
#define GL_ALT_FUNDEF_SampleMaski
typedef void (*PFNGLSAMPLEMASKIPROC_ALT)(GLuint,GLbitfield);
static inline void glSampleMaski(GLuint maskNumber1,GLbitfield mask1)
{
	static PFNGLSAMPLEMASKIPROC_ALT fn=(PFNGLSAMPLEMASKIPROC_ALT)glaltGetProcAddressExtension("glSampleMaski","GL_ARB_texture_multisample");
	 fn(maskNumber1,mask1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexImage2DMultisample
#define GL_ALT_FUNDEF_TexImage2DMultisample
typedef void (*PFNGLTEXIMAGE2DMULTISAMPLEPROC_ALT)(GLenum,GLsizei,GLenum,GLsizei,GLsizei,GLboolean);
static inline void glTexImage2DMultisample(GLenum target1,GLsizei samples1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLboolean fixedsamplelocations1)
{
	static PFNGLTEXIMAGE2DMULTISAMPLEPROC_ALT fn=(PFNGLTEXIMAGE2DMULTISAMPLEPROC_ALT)glaltGetProcAddressExtension("glTexImage2DMultisample","GL_ARB_texture_multisample");
	 fn(target1,samples1,internalformat1,width1,height1,fixedsamplelocations1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexImage3DMultisample
#define GL_ALT_FUNDEF_TexImage3DMultisample
typedef void (*PFNGLTEXIMAGE3DMULTISAMPLEPROC_ALT)(GLenum,GLsizei,GLenum,GLsizei,GLsizei,GLsizei,GLboolean);
static inline void glTexImage3DMultisample(GLenum target1,GLsizei samples1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLboolean fixedsamplelocations1)
{
	static PFNGLTEXIMAGE3DMULTISAMPLEPROC_ALT fn=(PFNGLTEXIMAGE3DMULTISAMPLEPROC_ALT)glaltGetProcAddressExtension("glTexImage3DMultisample","GL_ARB_texture_multisample");
	 fn(target1,samples1,internalformat1,width1,height1,depth1,fixedsamplelocations1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_texture_non_power_of_two
#define GL_ARB_texture_non_power_of_two
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_texture_query_levels
#define GL_ARB_texture_query_levels
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_texture_query_lod
#define GL_ARB_texture_query_lod
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_texture_rectangle
#define GL_ARB_texture_rectangle
#ifndef GL_TEXTURE_RECTANGLE_ARB
#define GL_TEXTURE_RECTANGLE_ARB 0x84F5
#endif //GL_TEXTURE_RECTANGLE_ARB
#ifndef GL_TEXTURE_BINDING_RECTANGLE_ARB
#define GL_TEXTURE_BINDING_RECTANGLE_ARB 0x84F6
#endif //GL_TEXTURE_BINDING_RECTANGLE_ARB
#ifndef GL_PROXY_TEXTURE_RECTANGLE_ARB
#define GL_PROXY_TEXTURE_RECTANGLE_ARB 0x84F7
#endif //GL_PROXY_TEXTURE_RECTANGLE_ARB
#ifndef GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB
#define GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB 0x84F8
#endif //GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_texture_rg
#define GL_ARB_texture_rg
#ifndef GL_RG
#define GL_RG 0x8227
#endif //GL_RG
#ifndef GL_RG_INTEGER
#define GL_RG_INTEGER 0x8228
#endif //GL_RG_INTEGER
#ifndef GL_R8
#define GL_R8 0x8229
#endif //GL_R8
#ifndef GL_R16
#define GL_R16 0x822A
#endif //GL_R16
#ifndef GL_RG8
#define GL_RG8 0x822B
#endif //GL_RG8
#ifndef GL_RG16
#define GL_RG16 0x822C
#endif //GL_RG16
#ifndef GL_R16F
#define GL_R16F 0x822D
#endif //GL_R16F
#ifndef GL_R32F
#define GL_R32F 0x822E
#endif //GL_R32F
#ifndef GL_RG16F
#define GL_RG16F 0x822F
#endif //GL_RG16F
#ifndef GL_RG32F
#define GL_RG32F 0x8230
#endif //GL_RG32F
#ifndef GL_R8I
#define GL_R8I 0x8231
#endif //GL_R8I
#ifndef GL_R8UI
#define GL_R8UI 0x8232
#endif //GL_R8UI
#ifndef GL_R16I
#define GL_R16I 0x8233
#endif //GL_R16I
#ifndef GL_R16UI
#define GL_R16UI 0x8234
#endif //GL_R16UI
#ifndef GL_R32I
#define GL_R32I 0x8235
#endif //GL_R32I
#ifndef GL_R32UI
#define GL_R32UI 0x8236
#endif //GL_R32UI
#ifndef GL_RG8I
#define GL_RG8I 0x8237
#endif //GL_RG8I
#ifndef GL_RG8UI
#define GL_RG8UI 0x8238
#endif //GL_RG8UI
#ifndef GL_RG16I
#define GL_RG16I 0x8239
#endif //GL_RG16I
#ifndef GL_RG16UI
#define GL_RG16UI 0x823A
#endif //GL_RG16UI
#ifndef GL_RG32I
#define GL_RG32I 0x823B
#endif //GL_RG32I
#ifndef GL_RG32UI
#define GL_RG32UI 0x823C
#endif //GL_RG32UI
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_texture_rgb10_a2ui
#define GL_ARB_texture_rgb10_a2ui
#ifndef GL_RGB10_A2UI
#define GL_RGB10_A2UI 0x906F
#endif //GL_RGB10_A2UI
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_texture_stencil8
#define GL_ARB_texture_stencil8
#ifndef GL_STENCIL_INDEX
#define GL_STENCIL_INDEX 0x1901
#endif //GL_STENCIL_INDEX
#ifndef GL_STENCIL_INDEX8
#define GL_STENCIL_INDEX8 0x8D48
#endif //GL_STENCIL_INDEX8
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_texture_storage
#define GL_ARB_texture_storage
#ifndef GL_TEXTURE_IMMUTABLE_FORMAT
#define GL_TEXTURE_IMMUTABLE_FORMAT 0x912F
#endif //GL_TEXTURE_IMMUTABLE_FORMAT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_TexStorage1D
#define GL_ALT_FUNDEF_TexStorage1D
typedef void (*PFNGLTEXSTORAGE1DPROC_ALT)(GLenum,GLsizei,GLenum,GLsizei);
static inline void glTexStorage1D(GLenum target1,GLsizei levels1,GLenum internalformat1,GLsizei width1)
{
	static PFNGLTEXSTORAGE1DPROC_ALT fn=(PFNGLTEXSTORAGE1DPROC_ALT)glaltGetProcAddressExtension("glTexStorage1D","GL_ARB_texture_storage");
	 fn(target1,levels1,internalformat1,width1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexStorage2D
#define GL_ALT_FUNDEF_TexStorage2D
typedef void (*PFNGLTEXSTORAGE2DPROC_ALT)(GLenum,GLsizei,GLenum,GLsizei,GLsizei);
static inline void glTexStorage2D(GLenum target1,GLsizei levels1,GLenum internalformat1,GLsizei width1,GLsizei height1)
{
	static PFNGLTEXSTORAGE2DPROC_ALT fn=(PFNGLTEXSTORAGE2DPROC_ALT)glaltGetProcAddressExtension("glTexStorage2D","GL_ARB_texture_storage");
	 fn(target1,levels1,internalformat1,width1,height1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexStorage3D
#define GL_ALT_FUNDEF_TexStorage3D
typedef void (*PFNGLTEXSTORAGE3DPROC_ALT)(GLenum,GLsizei,GLenum,GLsizei,GLsizei,GLsizei);
static inline void glTexStorage3D(GLenum target1,GLsizei levels1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1)
{
	static PFNGLTEXSTORAGE3DPROC_ALT fn=(PFNGLTEXSTORAGE3DPROC_ALT)glaltGetProcAddressExtension("glTexStorage3D","GL_ARB_texture_storage");
	 fn(target1,levels1,internalformat1,width1,height1,depth1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_texture_storage_multisample
#define GL_ARB_texture_storage_multisample
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_TexStorage2DMultisample
#define GL_ALT_FUNDEF_TexStorage2DMultisample
typedef void (*PFNGLTEXSTORAGE2DMULTISAMPLEPROC_ALT)(GLenum,GLsizei,GLenum,GLsizei,GLsizei,GLboolean);
static inline void glTexStorage2DMultisample(GLenum target1,GLsizei samples1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLboolean fixedsamplelocations1)
{
	static PFNGLTEXSTORAGE2DMULTISAMPLEPROC_ALT fn=(PFNGLTEXSTORAGE2DMULTISAMPLEPROC_ALT)glaltGetProcAddressExtension("glTexStorage2DMultisample","GL_ARB_texture_storage_multisample");
	 fn(target1,samples1,internalformat1,width1,height1,fixedsamplelocations1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexStorage3DMultisample
#define GL_ALT_FUNDEF_TexStorage3DMultisample
typedef void (*PFNGLTEXSTORAGE3DMULTISAMPLEPROC_ALT)(GLenum,GLsizei,GLenum,GLsizei,GLsizei,GLsizei,GLboolean);
static inline void glTexStorage3DMultisample(GLenum target1,GLsizei samples1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLboolean fixedsamplelocations1)
{
	static PFNGLTEXSTORAGE3DMULTISAMPLEPROC_ALT fn=(PFNGLTEXSTORAGE3DMULTISAMPLEPROC_ALT)glaltGetProcAddressExtension("glTexStorage3DMultisample","GL_ARB_texture_storage_multisample");
	 fn(target1,samples1,internalformat1,width1,height1,depth1,fixedsamplelocations1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_texture_swizzle
#define GL_ARB_texture_swizzle
#ifndef GL_TEXTURE_SWIZZLE_R
#define GL_TEXTURE_SWIZZLE_R 0x8E42
#endif //GL_TEXTURE_SWIZZLE_R
#ifndef GL_TEXTURE_SWIZZLE_G
#define GL_TEXTURE_SWIZZLE_G 0x8E43
#endif //GL_TEXTURE_SWIZZLE_G
#ifndef GL_TEXTURE_SWIZZLE_B
#define GL_TEXTURE_SWIZZLE_B 0x8E44
#endif //GL_TEXTURE_SWIZZLE_B
#ifndef GL_TEXTURE_SWIZZLE_A
#define GL_TEXTURE_SWIZZLE_A 0x8E45
#endif //GL_TEXTURE_SWIZZLE_A
#ifndef GL_TEXTURE_SWIZZLE_RGBA
#define GL_TEXTURE_SWIZZLE_RGBA 0x8E46
#endif //GL_TEXTURE_SWIZZLE_RGBA
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_texture_view
#define GL_ARB_texture_view
#ifndef GL_TEXTURE_VIEW_MIN_LEVEL
#define GL_TEXTURE_VIEW_MIN_LEVEL 0x82DB
#endif //GL_TEXTURE_VIEW_MIN_LEVEL
#ifndef GL_TEXTURE_VIEW_NUM_LEVELS
#define GL_TEXTURE_VIEW_NUM_LEVELS 0x82DC
#endif //GL_TEXTURE_VIEW_NUM_LEVELS
#ifndef GL_TEXTURE_VIEW_MIN_LAYER
#define GL_TEXTURE_VIEW_MIN_LAYER 0x82DD
#endif //GL_TEXTURE_VIEW_MIN_LAYER
#ifndef GL_TEXTURE_VIEW_NUM_LAYERS
#define GL_TEXTURE_VIEW_NUM_LAYERS 0x82DE
#endif //GL_TEXTURE_VIEW_NUM_LAYERS
#ifndef GL_TEXTURE_IMMUTABLE_LEVELS
#define GL_TEXTURE_IMMUTABLE_LEVELS 0x82DF
#endif //GL_TEXTURE_IMMUTABLE_LEVELS
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_TextureView
#define GL_ALT_FUNDEF_TextureView
typedef void (*PFNGLTEXTUREVIEWPROC_ALT)(GLuint,GLenum,GLuint,GLenum,GLuint,GLuint,GLuint,GLuint);
static inline void glTextureView(GLuint texture1,GLenum target1,GLuint origtexture1,GLenum internalformat1,GLuint minlevel1,GLuint numlevels1,GLuint minlayer1,GLuint numlayers1)
{
	static PFNGLTEXTUREVIEWPROC_ALT fn=(PFNGLTEXTUREVIEWPROC_ALT)glaltGetProcAddressExtension("glTextureView","GL_ARB_texture_view");
	 fn(texture1,target1,origtexture1,internalformat1,minlevel1,numlevels1,minlayer1,numlayers1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_timer_query
#define GL_ARB_timer_query
#ifndef GL_TIME_ELAPSED
#define GL_TIME_ELAPSED 0x88BF
#endif //GL_TIME_ELAPSED
#ifndef GL_TIMESTAMP
#define GL_TIMESTAMP 0x8E28
#endif //GL_TIMESTAMP
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetQueryObjecti64v
#define GL_ALT_FUNDEF_GetQueryObjecti64v
typedef void (*PFNGLGETQUERYOBJECTI64VPROC_ALT)(GLuint,GLenum,GLint64 *);
static inline void glGetQueryObjecti64v(GLuint id1,GLenum pname1,GLint64 * params1)
{
	static PFNGLGETQUERYOBJECTI64VPROC_ALT fn=(PFNGLGETQUERYOBJECTI64VPROC_ALT)glaltGetProcAddressExtension("glGetQueryObjecti64v","GL_ARB_timer_query");
	 fn(id1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetQueryObjectui64v
#define GL_ALT_FUNDEF_GetQueryObjectui64v
typedef void (*PFNGLGETQUERYOBJECTUI64VPROC_ALT)(GLuint,GLenum,GLuint64 *);
static inline void glGetQueryObjectui64v(GLuint id1,GLenum pname1,GLuint64 * params1)
{
	static PFNGLGETQUERYOBJECTUI64VPROC_ALT fn=(PFNGLGETQUERYOBJECTUI64VPROC_ALT)glaltGetProcAddressExtension("glGetQueryObjectui64v","GL_ARB_timer_query");
	 fn(id1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_QueryCounter
#define GL_ALT_FUNDEF_QueryCounter
typedef void (*PFNGLQUERYCOUNTERPROC_ALT)(GLuint,GLenum);
static inline void glQueryCounter(GLuint id1,GLenum target1)
{
	static PFNGLQUERYCOUNTERPROC_ALT fn=(PFNGLQUERYCOUNTERPROC_ALT)glaltGetProcAddressExtension("glQueryCounter","GL_ARB_timer_query");
	 fn(id1,target1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_transform_feedback2
#define GL_ARB_transform_feedback2
#ifndef GL_TRANSFORM_FEEDBACK
#define GL_TRANSFORM_FEEDBACK 0x8E22
#endif //GL_TRANSFORM_FEEDBACK
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED
#ifndef GL_TRANSFORM_FEEDBACK_PAUSED
#define GL_TRANSFORM_FEEDBACK_PAUSED 0x8E23
#endif //GL_TRANSFORM_FEEDBACK_PAUSED
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE
#ifndef GL_TRANSFORM_FEEDBACK_ACTIVE
#define GL_TRANSFORM_FEEDBACK_ACTIVE 0x8E24
#endif //GL_TRANSFORM_FEEDBACK_ACTIVE
#ifndef GL_TRANSFORM_FEEDBACK_BINDING
#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
#endif //GL_TRANSFORM_FEEDBACK_BINDING
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BindTransformFeedback
#define GL_ALT_FUNDEF_BindTransformFeedback
typedef void (*PFNGLBINDTRANSFORMFEEDBACKPROC_ALT)(GLenum,GLuint);
static inline void glBindTransformFeedback(GLenum target1,GLuint id1)
{
	static PFNGLBINDTRANSFORMFEEDBACKPROC_ALT fn=(PFNGLBINDTRANSFORMFEEDBACKPROC_ALT)glaltGetProcAddressExtension("glBindTransformFeedback","GL_ARB_transform_feedback2");
	 fn(target1,id1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DeleteTransformFeedbacks
#define GL_ALT_FUNDEF_DeleteTransformFeedbacks
typedef void (*PFNGLDELETETRANSFORMFEEDBACKSPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteTransformFeedbacks(GLsizei n1,const GLuint * ids1)
{
	static PFNGLDELETETRANSFORMFEEDBACKSPROC_ALT fn=(PFNGLDELETETRANSFORMFEEDBACKSPROC_ALT)glaltGetProcAddressExtension("glDeleteTransformFeedbacks","GL_ARB_transform_feedback2");
	 fn(n1,ids1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DrawTransformFeedback
#define GL_ALT_FUNDEF_DrawTransformFeedback
typedef void (*PFNGLDRAWTRANSFORMFEEDBACKPROC_ALT)(GLenum,GLuint);
static inline void glDrawTransformFeedback(GLenum mode1,GLuint id1)
{
	static PFNGLDRAWTRANSFORMFEEDBACKPROC_ALT fn=(PFNGLDRAWTRANSFORMFEEDBACKPROC_ALT)glaltGetProcAddressExtension("glDrawTransformFeedback","GL_ARB_transform_feedback2");
	 fn(mode1,id1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GenTransformFeedbacks
#define GL_ALT_FUNDEF_GenTransformFeedbacks
typedef void (*PFNGLGENTRANSFORMFEEDBACKSPROC_ALT)(GLsizei,GLuint *);
static inline void glGenTransformFeedbacks(GLsizei n1,GLuint * ids1)
{
	static PFNGLGENTRANSFORMFEEDBACKSPROC_ALT fn=(PFNGLGENTRANSFORMFEEDBACKSPROC_ALT)glaltGetProcAddressExtension("glGenTransformFeedbacks","GL_ARB_transform_feedback2");
	 fn(n1,ids1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IsTransformFeedback
#define GL_ALT_FUNDEF_IsTransformFeedback
typedef GLboolean (*PFNGLISTRANSFORMFEEDBACKPROC_ALT)(GLuint);
static inline GLboolean glIsTransformFeedback(GLuint id1)
{
	static PFNGLISTRANSFORMFEEDBACKPROC_ALT fn=(PFNGLISTRANSFORMFEEDBACKPROC_ALT)glaltGetProcAddressExtension("glIsTransformFeedback","GL_ARB_transform_feedback2");
	return fn(id1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PauseTransformFeedback
#define GL_ALT_FUNDEF_PauseTransformFeedback
typedef void (*PFNGLPAUSETRANSFORMFEEDBACKPROC_ALT)();
static inline void glPauseTransformFeedback()
{
	static PFNGLPAUSETRANSFORMFEEDBACKPROC_ALT fn=(PFNGLPAUSETRANSFORMFEEDBACKPROC_ALT)glaltGetProcAddressExtension("glPauseTransformFeedback","GL_ARB_transform_feedback2");
	 fn();
}
#endif

#ifndef	GL_ALT_FUNDEF_ResumeTransformFeedback
#define GL_ALT_FUNDEF_ResumeTransformFeedback
typedef void (*PFNGLRESUMETRANSFORMFEEDBACKPROC_ALT)();
static inline void glResumeTransformFeedback()
{
	static PFNGLRESUMETRANSFORMFEEDBACKPROC_ALT fn=(PFNGLRESUMETRANSFORMFEEDBACKPROC_ALT)glaltGetProcAddressExtension("glResumeTransformFeedback","GL_ARB_transform_feedback2");
	 fn();
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_transform_feedback3
#define GL_ARB_transform_feedback3
#ifndef GL_MAX_TRANSFORM_FEEDBACK_BUFFERS
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
#endif //GL_MAX_TRANSFORM_FEEDBACK_BUFFERS
#ifndef GL_MAX_VERTEX_STREAMS
#define GL_MAX_VERTEX_STREAMS 0x8E71
#endif //GL_MAX_VERTEX_STREAMS
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BeginQueryIndexed
#define GL_ALT_FUNDEF_BeginQueryIndexed
typedef void (*PFNGLBEGINQUERYINDEXEDPROC_ALT)(GLenum,GLuint,GLuint);
static inline void glBeginQueryIndexed(GLenum target1,GLuint index1,GLuint id1)
{
	static PFNGLBEGINQUERYINDEXEDPROC_ALT fn=(PFNGLBEGINQUERYINDEXEDPROC_ALT)glaltGetProcAddressExtension("glBeginQueryIndexed","GL_ARB_transform_feedback3");
	 fn(target1,index1,id1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DrawTransformFeedbackStream
#define GL_ALT_FUNDEF_DrawTransformFeedbackStream
typedef void (*PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC_ALT)(GLenum,GLuint,GLuint);
static inline void glDrawTransformFeedbackStream(GLenum mode1,GLuint id1,GLuint stream1)
{
	static PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC_ALT fn=(PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC_ALT)glaltGetProcAddressExtension("glDrawTransformFeedbackStream","GL_ARB_transform_feedback3");
	 fn(mode1,id1,stream1);
}
#endif

#ifndef	GL_ALT_FUNDEF_EndQueryIndexed
#define GL_ALT_FUNDEF_EndQueryIndexed
typedef void (*PFNGLENDQUERYINDEXEDPROC_ALT)(GLenum,GLuint);
static inline void glEndQueryIndexed(GLenum target1,GLuint index1)
{
	static PFNGLENDQUERYINDEXEDPROC_ALT fn=(PFNGLENDQUERYINDEXEDPROC_ALT)glaltGetProcAddressExtension("glEndQueryIndexed","GL_ARB_transform_feedback3");
	 fn(target1,index1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetQueryIndexediv
#define GL_ALT_FUNDEF_GetQueryIndexediv
typedef void (*PFNGLGETQUERYINDEXEDIVPROC_ALT)(GLenum,GLuint,GLenum,GLint *);
static inline void glGetQueryIndexediv(GLenum target1,GLuint index1,GLenum pname1,GLint * params1)
{
	static PFNGLGETQUERYINDEXEDIVPROC_ALT fn=(PFNGLGETQUERYINDEXEDIVPROC_ALT)glaltGetProcAddressExtension("glGetQueryIndexediv","GL_ARB_transform_feedback3");
	 fn(target1,index1,pname1,params1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_transform_feedback_instanced
#define GL_ARB_transform_feedback_instanced
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_DrawTransformFeedbackInstanced
#define GL_ALT_FUNDEF_DrawTransformFeedbackInstanced
typedef void (*PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC_ALT)(GLenum,GLuint,GLsizei);
static inline void glDrawTransformFeedbackInstanced(GLenum mode1,GLuint id1,GLsizei instancecount1)
{
	static PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC_ALT fn=(PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC_ALT)glaltGetProcAddressExtension("glDrawTransformFeedbackInstanced","GL_ARB_transform_feedback_instanced");
	 fn(mode1,id1,instancecount1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DrawTransformFeedbackStreamInstanced
#define GL_ALT_FUNDEF_DrawTransformFeedbackStreamInstanced
typedef void (*PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC_ALT)(GLenum,GLuint,GLuint,GLsizei);
static inline void glDrawTransformFeedbackStreamInstanced(GLenum mode1,GLuint id1,GLuint stream1,GLsizei instancecount1)
{
	static PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC_ALT fn=(PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC_ALT)glaltGetProcAddressExtension("glDrawTransformFeedbackStreamInstanced","GL_ARB_transform_feedback_instanced");
	 fn(mode1,id1,stream1,instancecount1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_transform_feedback_overflow_query
#define GL_ARB_transform_feedback_overflow_query
#ifndef GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB
#define GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB 0x82EC
#endif //GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB
#ifndef GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB
#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB 0x82ED
#endif //GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_transpose_matrix
#define GL_ARB_transpose_matrix
#ifndef GL_TRANSPOSE_MODELVIEW_MATRIX_ARB
#define GL_TRANSPOSE_MODELVIEW_MATRIX_ARB 0x84E3
#endif //GL_TRANSPOSE_MODELVIEW_MATRIX_ARB
#ifndef GL_TRANSPOSE_PROJECTION_MATRIX_ARB
#define GL_TRANSPOSE_PROJECTION_MATRIX_ARB 0x84E4
#endif //GL_TRANSPOSE_PROJECTION_MATRIX_ARB
#ifndef GL_TRANSPOSE_TEXTURE_MATRIX_ARB
#define GL_TRANSPOSE_TEXTURE_MATRIX_ARB 0x84E5
#endif //GL_TRANSPOSE_TEXTURE_MATRIX_ARB
#ifndef GL_TRANSPOSE_COLOR_MATRIX_ARB
#define GL_TRANSPOSE_COLOR_MATRIX_ARB 0x84E6
#endif //GL_TRANSPOSE_COLOR_MATRIX_ARB
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_LoadTransposeMatrixdARB
#define GL_ALT_FUNDEF_LoadTransposeMatrixdARB
typedef void (*PFNGLLOADTRANSPOSEMATRIXDARBPROC_ALT)(const GLdouble *);
static inline void glLoadTransposeMatrixdARB(const GLdouble * m1)
{
	static PFNGLLOADTRANSPOSEMATRIXDARBPROC_ALT fn=(PFNGLLOADTRANSPOSEMATRIXDARBPROC_ALT)glaltGetProcAddressExtension("glLoadTransposeMatrixdARB","GL_ARB_transpose_matrix");
	 fn(m1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_LoadTransposeMatrixfARB
#define GL_ALT_FUNDEF_LoadTransposeMatrixfARB
typedef void (*PFNGLLOADTRANSPOSEMATRIXFARBPROC_ALT)(const GLfloat *);
static inline void glLoadTransposeMatrixfARB(const GLfloat * m1)
{
	static PFNGLLOADTRANSPOSEMATRIXFARBPROC_ALT fn=(PFNGLLOADTRANSPOSEMATRIXFARBPROC_ALT)glaltGetProcAddressExtension("glLoadTransposeMatrixfARB","GL_ARB_transpose_matrix");
	 fn(m1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultTransposeMatrixdARB
#define GL_ALT_FUNDEF_MultTransposeMatrixdARB
typedef void (*PFNGLMULTTRANSPOSEMATRIXDARBPROC_ALT)(const GLdouble *);
static inline void glMultTransposeMatrixdARB(const GLdouble * m1)
{
	static PFNGLMULTTRANSPOSEMATRIXDARBPROC_ALT fn=(PFNGLMULTTRANSPOSEMATRIXDARBPROC_ALT)glaltGetProcAddressExtension("glMultTransposeMatrixdARB","GL_ARB_transpose_matrix");
	 fn(m1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultTransposeMatrixfARB
#define GL_ALT_FUNDEF_MultTransposeMatrixfARB
typedef void (*PFNGLMULTTRANSPOSEMATRIXFARBPROC_ALT)(const GLfloat *);
static inline void glMultTransposeMatrixfARB(const GLfloat * m1)
{
	static PFNGLMULTTRANSPOSEMATRIXFARBPROC_ALT fn=(PFNGLMULTTRANSPOSEMATRIXFARBPROC_ALT)glaltGetProcAddressExtension("glMultTransposeMatrixfARB","GL_ARB_transpose_matrix");
	 fn(m1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_ARB_uniform_buffer_object
#define GL_ARB_uniform_buffer_object
#ifndef GL_UNIFORM_BUFFER
#define GL_UNIFORM_BUFFER 0x8A11
#endif //GL_UNIFORM_BUFFER
#ifndef GL_UNIFORM_BUFFER_BINDING
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#endif //GL_UNIFORM_BUFFER_BINDING
#ifndef GL_UNIFORM_BUFFER_START
#define GL_UNIFORM_BUFFER_START 0x8A29
#endif //GL_UNIFORM_BUFFER_START
#ifndef GL_UNIFORM_BUFFER_SIZE
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#endif //GL_UNIFORM_BUFFER_SIZE
#ifndef GL_MAX_VERTEX_UNIFORM_BLOCKS
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#endif //GL_MAX_VERTEX_UNIFORM_BLOCKS
#ifndef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#endif //GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#ifndef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#endif //GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#ifndef GL_MAX_COMBINED_UNIFORM_BLOCKS
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#endif //GL_MAX_COMBINED_UNIFORM_BLOCKS
#ifndef GL_MAX_UNIFORM_BUFFER_BINDINGS
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#endif //GL_MAX_UNIFORM_BUFFER_BINDINGS
#ifndef GL_MAX_UNIFORM_BLOCK_SIZE
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#endif //GL_MAX_UNIFORM_BLOCK_SIZE
#ifndef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#endif //GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#ifndef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#endif //GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#ifndef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#endif //GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#ifndef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#endif //GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#ifndef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#endif //GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#ifndef GL_ACTIVE_UNIFORM_BLOCKS
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#endif //GL_ACTIVE_UNIFORM_BLOCKS
#ifndef GL_UNIFORM_TYPE
#define GL_UNIFORM_TYPE 0x8A37
#endif //GL_UNIFORM_TYPE
#ifndef GL_UNIFORM_SIZE
#define GL_UNIFORM_SIZE 0x8A38
#endif //GL_UNIFORM_SIZE
#ifndef GL_UNIFORM_NAME_LENGTH
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif //GL_UNIFORM_NAME_LENGTH
#ifndef GL_UNIFORM_BLOCK_INDEX
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#endif //GL_UNIFORM_BLOCK_INDEX
#ifndef GL_UNIFORM_OFFSET
#define GL_UNIFORM_OFFSET 0x8A3B
#endif //GL_UNIFORM_OFFSET
#ifndef GL_UNIFORM_ARRAY_STRIDE
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#endif //GL_UNIFORM_ARRAY_STRIDE
#ifndef GL_UNIFORM_MATRIX_STRIDE
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#endif //GL_UNIFORM_MATRIX_STRIDE
#ifndef GL_UNIFORM_IS_ROW_MAJOR
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#endif //GL_UNIFORM_IS_ROW_MAJOR
#ifndef GL_UNIFORM_BLOCK_BINDING
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#endif //GL_UNIFORM_BLOCK_BINDING
#ifndef GL_UNIFORM_BLOCK_DATA_SIZE
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#endif //GL_UNIFORM_BLOCK_DATA_SIZE
#ifndef GL_UNIFORM_BLOCK_NAME_LENGTH
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#endif //GL_UNIFORM_BLOCK_NAME_LENGTH
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#endif //GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#endif //GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#endif //GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#endif //GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#endif //GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#ifndef GL_INVALID_INDEX
#define GL_INVALID_INDEX 0xFFFFFFFF
#endif //GL_INVALID_INDEX
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetActiveUniformBlockName
#define GL_ALT_FUNDEF_GetActiveUniformBlockName
typedef void (*PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC_ALT)(GLuint,GLuint,GLsizei,GLsizei *,GLchar *);
static inline void glGetActiveUniformBlockName(GLuint program1,GLuint uniformBlockIndex1,GLsizei bufSize1,GLsizei * length1,GLchar * uniformBlockName1)
{
	static PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC_ALT fn=(PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC_ALT)glaltGetProcAddressExtension("glGetActiveUniformBlockName","GL_ARB_uniform_buffer_object");
	 fn(program1,uniformBlockIndex1,bufSize1,length1,uniformBlockName1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetActiveUniformBlockiv
#define GL_ALT_FUNDEF_GetActiveUniformBlockiv
typedef void (*PFNGLGETACTIVEUNIFORMBLOCKIVPROC_ALT)(GLuint,GLuint,GLenum,GLint *);
static inline void glGetActiveUniformBlockiv(GLuint program1,GLuint uniformBlockIndex1,GLenum pname1,GLint * params1)
{
	static PFNGLGETACTIVEUNIFORMBLOCKIVPROC_ALT fn=(PFNGLGETACTIVEUNIFORMBLOCKIVPROC_ALT)glaltGetProcAddressExtension("glGetActiveUniformBlockiv","GL_ARB_uniform_buffer_object");
	 fn(program1,uniformBlockIndex1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetActiveUniformName
#define GL_ALT_FUNDEF_GetActiveUniformName
typedef void (*PFNGLGETACTIVEUNIFORMNAMEPROC_ALT)(GLuint,GLuint,GLsizei,GLsizei *,GLchar *);
static inline void glGetActiveUniformName(GLuint program1,GLuint uniformIndex1,GLsizei bufSize1,GLsizei * length1,GLchar * uniformName1)
{
	static PFNGLGETACTIVEUNIFORMNAMEPROC_ALT fn=(PFNGLGETACTIVEUNIFORMNAMEPROC_ALT)glaltGetProcAddressExtension("glGetActiveUniformName","GL_ARB_uniform_buffer_object");
	 fn(program1,uniformIndex1,bufSize1,length1,uniformName1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetActiveUniformsiv
#define GL_ALT_FUNDEF_GetActiveUniformsiv
typedef void (*PFNGLGETACTIVEUNIFORMSIVPROC_ALT)(GLuint,GLsizei,const GLuint *,GLenum,GLint *);
static inline void glGetActiveUniformsiv(GLuint program1,GLsizei uniformCount1,const GLuint * uniformIndices1,GLenum pname1,GLint * params1)
{
	static PFNGLGETACTIVEUNIFORMSIVPROC_ALT fn=(PFNGLGETACTIVEUNIFORMSIVPROC_ALT)glaltGetProcAddressExtension("glGetActiveUniformsiv","GL_ARB_uniform_buffer_object");
	 fn(program1,uniformCount1,uniformIndices1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetUniformBlockIndex
#define GL_ALT_FUNDEF_GetUniformBlockIndex
typedef GLuint (*PFNGLGETUNIFORMBLOCKINDEXPROC_ALT)(GLuint,const GLchar *);
static inline GLuint glGetUniformBlockIndex(GLuint program1,const GLchar * uniformBlockName1)
{
	static PFNGLGETUNIFORMBLOCKINDEXPROC_ALT fn=(PFNGLGETUNIFORMBLOCKINDEXPROC_ALT)glaltGetProcAddressExtension("glGetUniformBlockIndex","GL_ARB_uniform_buffer_object");
	return fn(program1,uniformBlockName1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetUniformIndices
#define GL_ALT_FUNDEF_GetUniformIndices
typedef void (*PFNGLGETUNIFORMINDICESPROC_ALT)(GLuint,GLsizei,const GLchar *const*,GLuint *);
static inline void glGetUniformIndices(GLuint program1,GLsizei uniformCount1,const GLchar *const* uniformNames1,GLuint * uniformIndices1)
{
	static PFNGLGETUNIFORMINDICESPROC_ALT fn=(PFNGLGETUNIFORMINDICESPROC_ALT)glaltGetProcAddressExtension("glGetUniformIndices","GL_ARB_uniform_buffer_object");
	 fn(program1,uniformCount1,uniformNames1,uniformIndices1);
}
#endif

#ifndef	GL_ALT_FUNDEF_UniformBlockBinding
#define GL_ALT_FUNDEF_UniformBlockBinding
typedef void (*PFNGLUNIFORMBLOCKBINDINGPROC_ALT)(GLuint,GLuint,GLuint);
static inline void glUniformBlockBinding(GLuint program1,GLuint uniformBlockIndex1,GLuint uniformBlockBinding1)
{
	static PFNGLUNIFORMBLOCKBINDINGPROC_ALT fn=(PFNGLUNIFORMBLOCKBINDINGPROC_ALT)glaltGetProcAddressExtension("glUniformBlockBinding","GL_ARB_uniform_buffer_object");
	 fn(program1,uniformBlockIndex1,uniformBlockBinding1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_vertex_array_bgra
#define GL_ARB_vertex_array_bgra
#ifndef GL_BGRA
#define GL_BGRA 0x80E1
#endif //GL_BGRA
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_vertex_array_object
#define GL_ARB_vertex_array_object
#ifndef GL_VERTEX_ARRAY_BINDING
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#endif //GL_VERTEX_ARRAY_BINDING
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BindVertexArray
#define GL_ALT_FUNDEF_BindVertexArray
typedef void (*PFNGLBINDVERTEXARRAYPROC_ALT)(GLuint);
static inline void glBindVertexArray(GLuint array1)
{
	static PFNGLBINDVERTEXARRAYPROC_ALT fn=(PFNGLBINDVERTEXARRAYPROC_ALT)glaltGetProcAddressExtension("glBindVertexArray","GL_ARB_vertex_array_object");
	 fn(array1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DeleteVertexArrays
#define GL_ALT_FUNDEF_DeleteVertexArrays
typedef void (*PFNGLDELETEVERTEXARRAYSPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteVertexArrays(GLsizei n1,const GLuint * arrays1)
{
	static PFNGLDELETEVERTEXARRAYSPROC_ALT fn=(PFNGLDELETEVERTEXARRAYSPROC_ALT)glaltGetProcAddressExtension("glDeleteVertexArrays","GL_ARB_vertex_array_object");
	 fn(n1,arrays1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GenVertexArrays
#define GL_ALT_FUNDEF_GenVertexArrays
typedef void (*PFNGLGENVERTEXARRAYSPROC_ALT)(GLsizei,GLuint *);
static inline void glGenVertexArrays(GLsizei n1,GLuint * arrays1)
{
	static PFNGLGENVERTEXARRAYSPROC_ALT fn=(PFNGLGENVERTEXARRAYSPROC_ALT)glaltGetProcAddressExtension("glGenVertexArrays","GL_ARB_vertex_array_object");
	 fn(n1,arrays1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IsVertexArray
#define GL_ALT_FUNDEF_IsVertexArray
typedef GLboolean (*PFNGLISVERTEXARRAYPROC_ALT)(GLuint);
static inline GLboolean glIsVertexArray(GLuint array1)
{
	static PFNGLISVERTEXARRAYPROC_ALT fn=(PFNGLISVERTEXARRAYPROC_ALT)glaltGetProcAddressExtension("glIsVertexArray","GL_ARB_vertex_array_object");
	return fn(array1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_vertex_attrib_64bit
#define GL_ARB_vertex_attrib_64bit
#ifndef GL_RGB32I
#define GL_RGB32I 0x8D83
#endif //GL_RGB32I
#ifndef GL_DOUBLE_MAT2
#define GL_DOUBLE_MAT2 0x8F46
#endif //GL_DOUBLE_MAT2
#ifndef GL_DOUBLE_MAT3
#define GL_DOUBLE_MAT3 0x8F47
#endif //GL_DOUBLE_MAT3
#ifndef GL_DOUBLE_MAT4
#define GL_DOUBLE_MAT4 0x8F48
#endif //GL_DOUBLE_MAT4
#ifndef GL_DOUBLE_MAT2x3
#define GL_DOUBLE_MAT2x3 0x8F49
#endif //GL_DOUBLE_MAT2x3
#ifndef GL_DOUBLE_MAT2x4
#define GL_DOUBLE_MAT2x4 0x8F4A
#endif //GL_DOUBLE_MAT2x4
#ifndef GL_DOUBLE_MAT3x2
#define GL_DOUBLE_MAT3x2 0x8F4B
#endif //GL_DOUBLE_MAT3x2
#ifndef GL_DOUBLE_MAT3x4
#define GL_DOUBLE_MAT3x4 0x8F4C
#endif //GL_DOUBLE_MAT3x4
#ifndef GL_DOUBLE_MAT4x2
#define GL_DOUBLE_MAT4x2 0x8F4D
#endif //GL_DOUBLE_MAT4x2
#ifndef GL_DOUBLE_MAT4x3
#define GL_DOUBLE_MAT4x3 0x8F4E
#endif //GL_DOUBLE_MAT4x3
#ifndef GL_DOUBLE_VEC2
#define GL_DOUBLE_VEC2 0x8FFC
#endif //GL_DOUBLE_VEC2
#ifndef GL_DOUBLE_VEC3
#define GL_DOUBLE_VEC3 0x8FFD
#endif //GL_DOUBLE_VEC3
#ifndef GL_DOUBLE_VEC4
#define GL_DOUBLE_VEC4 0x8FFE
#endif //GL_DOUBLE_VEC4
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetVertexAttribLdv
#define GL_ALT_FUNDEF_GetVertexAttribLdv
typedef void (*PFNGLGETVERTEXATTRIBLDVPROC_ALT)(GLuint,GLenum,GLdouble *);
static inline void glGetVertexAttribLdv(GLuint index1,GLenum pname1,GLdouble * params1)
{
	static PFNGLGETVERTEXATTRIBLDVPROC_ALT fn=(PFNGLGETVERTEXATTRIBLDVPROC_ALT)glaltGetProcAddressExtension("glGetVertexAttribLdv","GL_ARB_vertex_attrib_64bit");
	 fn(index1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribL1d
#define GL_ALT_FUNDEF_VertexAttribL1d
typedef void (*PFNGLVERTEXATTRIBL1DPROC_ALT)(GLuint,GLdouble);
static inline void glVertexAttribL1d(GLuint index1,GLdouble x1)
{
	static PFNGLVERTEXATTRIBL1DPROC_ALT fn=(PFNGLVERTEXATTRIBL1DPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL1d","GL_ARB_vertex_attrib_64bit");
	 fn(index1,x1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribL1dv
#define GL_ALT_FUNDEF_VertexAttribL1dv
typedef void (*PFNGLVERTEXATTRIBL1DVPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttribL1dv(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIBL1DVPROC_ALT fn=(PFNGLVERTEXATTRIBL1DVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL1dv","GL_ARB_vertex_attrib_64bit");
	 fn(index1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribL2d
#define GL_ALT_FUNDEF_VertexAttribL2d
typedef void (*PFNGLVERTEXATTRIBL2DPROC_ALT)(GLuint,GLdouble,GLdouble);
static inline void glVertexAttribL2d(GLuint index1,GLdouble x1,GLdouble y1)
{
	static PFNGLVERTEXATTRIBL2DPROC_ALT fn=(PFNGLVERTEXATTRIBL2DPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL2d","GL_ARB_vertex_attrib_64bit");
	 fn(index1,x1,y1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribL2dv
#define GL_ALT_FUNDEF_VertexAttribL2dv
typedef void (*PFNGLVERTEXATTRIBL2DVPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttribL2dv(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIBL2DVPROC_ALT fn=(PFNGLVERTEXATTRIBL2DVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL2dv","GL_ARB_vertex_attrib_64bit");
	 fn(index1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribL3d
#define GL_ALT_FUNDEF_VertexAttribL3d
typedef void (*PFNGLVERTEXATTRIBL3DPROC_ALT)(GLuint,GLdouble,GLdouble,GLdouble);
static inline void glVertexAttribL3d(GLuint index1,GLdouble x1,GLdouble y1,GLdouble z1)
{
	static PFNGLVERTEXATTRIBL3DPROC_ALT fn=(PFNGLVERTEXATTRIBL3DPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL3d","GL_ARB_vertex_attrib_64bit");
	 fn(index1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribL3dv
#define GL_ALT_FUNDEF_VertexAttribL3dv
typedef void (*PFNGLVERTEXATTRIBL3DVPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttribL3dv(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIBL3DVPROC_ALT fn=(PFNGLVERTEXATTRIBL3DVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL3dv","GL_ARB_vertex_attrib_64bit");
	 fn(index1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribL4d
#define GL_ALT_FUNDEF_VertexAttribL4d
typedef void (*PFNGLVERTEXATTRIBL4DPROC_ALT)(GLuint,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void glVertexAttribL4d(GLuint index1,GLdouble x1,GLdouble y1,GLdouble z1,GLdouble w1)
{
	static PFNGLVERTEXATTRIBL4DPROC_ALT fn=(PFNGLVERTEXATTRIBL4DPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL4d","GL_ARB_vertex_attrib_64bit");
	 fn(index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribL4dv
#define GL_ALT_FUNDEF_VertexAttribL4dv
typedef void (*PFNGLVERTEXATTRIBL4DVPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttribL4dv(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIBL4DVPROC_ALT fn=(PFNGLVERTEXATTRIBL4DVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL4dv","GL_ARB_vertex_attrib_64bit");
	 fn(index1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribLPointer
#define GL_ALT_FUNDEF_VertexAttribLPointer
typedef void (*PFNGLVERTEXATTRIBLPOINTERPROC_ALT)(GLuint,GLint,GLenum,GLsizei,const void *);
static inline void glVertexAttribLPointer(GLuint index1,GLint size1,GLenum type1,GLsizei stride1,const void * pointer1)
{
	static PFNGLVERTEXATTRIBLPOINTERPROC_ALT fn=(PFNGLVERTEXATTRIBLPOINTERPROC_ALT)glaltGetProcAddressExtension("glVertexAttribLPointer","GL_ARB_vertex_attrib_64bit");
	 fn(index1,size1,type1,stride1,pointer1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_vertex_attrib_binding
#define GL_ARB_vertex_attrib_binding
#ifndef GL_VERTEX_ATTRIB_BINDING
#define GL_VERTEX_ATTRIB_BINDING 0x82D4
#endif //GL_VERTEX_ATTRIB_BINDING
#ifndef GL_VERTEX_ATTRIB_RELATIVE_OFFSET
#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D5
#endif //GL_VERTEX_ATTRIB_RELATIVE_OFFSET
#ifndef GL_VERTEX_BINDING_DIVISOR
#define GL_VERTEX_BINDING_DIVISOR 0x82D6
#endif //GL_VERTEX_BINDING_DIVISOR
#ifndef GL_VERTEX_BINDING_OFFSET
#define GL_VERTEX_BINDING_OFFSET 0x82D7
#endif //GL_VERTEX_BINDING_OFFSET
#ifndef GL_VERTEX_BINDING_STRIDE
#define GL_VERTEX_BINDING_STRIDE 0x82D8
#endif //GL_VERTEX_BINDING_STRIDE
#ifndef GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET
#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D9
#endif //GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET
#ifndef GL_MAX_VERTEX_ATTRIB_BINDINGS
#define GL_MAX_VERTEX_ATTRIB_BINDINGS 0x82DA
#endif //GL_MAX_VERTEX_ATTRIB_BINDINGS
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BindVertexBuffer
#define GL_ALT_FUNDEF_BindVertexBuffer
typedef void (*PFNGLBINDVERTEXBUFFERPROC_ALT)(GLuint,GLuint,GLintptr,GLsizei);
static inline void glBindVertexBuffer(GLuint bindingindex1,GLuint buffer1,GLintptr offset1,GLsizei stride1)
{
	static PFNGLBINDVERTEXBUFFERPROC_ALT fn=(PFNGLBINDVERTEXBUFFERPROC_ALT)glaltGetProcAddressExtension("glBindVertexBuffer","GL_ARB_vertex_attrib_binding");
	 fn(bindingindex1,buffer1,offset1,stride1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribBinding
#define GL_ALT_FUNDEF_VertexAttribBinding
typedef void (*PFNGLVERTEXATTRIBBINDINGPROC_ALT)(GLuint,GLuint);
static inline void glVertexAttribBinding(GLuint attribindex1,GLuint bindingindex1)
{
	static PFNGLVERTEXATTRIBBINDINGPROC_ALT fn=(PFNGLVERTEXATTRIBBINDINGPROC_ALT)glaltGetProcAddressExtension("glVertexAttribBinding","GL_ARB_vertex_attrib_binding");
	 fn(attribindex1,bindingindex1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribFormat
#define GL_ALT_FUNDEF_VertexAttribFormat
typedef void (*PFNGLVERTEXATTRIBFORMATPROC_ALT)(GLuint,GLint,GLenum,GLboolean,GLuint);
static inline void glVertexAttribFormat(GLuint attribindex1,GLint size1,GLenum type1,GLboolean normalized1,GLuint relativeoffset1)
{
	static PFNGLVERTEXATTRIBFORMATPROC_ALT fn=(PFNGLVERTEXATTRIBFORMATPROC_ALT)glaltGetProcAddressExtension("glVertexAttribFormat","GL_ARB_vertex_attrib_binding");
	 fn(attribindex1,size1,type1,normalized1,relativeoffset1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribIFormat
#define GL_ALT_FUNDEF_VertexAttribIFormat
typedef void (*PFNGLVERTEXATTRIBIFORMATPROC_ALT)(GLuint,GLint,GLenum,GLuint);
static inline void glVertexAttribIFormat(GLuint attribindex1,GLint size1,GLenum type1,GLuint relativeoffset1)
{
	static PFNGLVERTEXATTRIBIFORMATPROC_ALT fn=(PFNGLVERTEXATTRIBIFORMATPROC_ALT)glaltGetProcAddressExtension("glVertexAttribIFormat","GL_ARB_vertex_attrib_binding");
	 fn(attribindex1,size1,type1,relativeoffset1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribLFormat
#define GL_ALT_FUNDEF_VertexAttribLFormat
typedef void (*PFNGLVERTEXATTRIBLFORMATPROC_ALT)(GLuint,GLint,GLenum,GLuint);
static inline void glVertexAttribLFormat(GLuint attribindex1,GLint size1,GLenum type1,GLuint relativeoffset1)
{
	static PFNGLVERTEXATTRIBLFORMATPROC_ALT fn=(PFNGLVERTEXATTRIBLFORMATPROC_ALT)glaltGetProcAddressExtension("glVertexAttribLFormat","GL_ARB_vertex_attrib_binding");
	 fn(attribindex1,size1,type1,relativeoffset1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexBindingDivisor
#define GL_ALT_FUNDEF_VertexBindingDivisor
typedef void (*PFNGLVERTEXBINDINGDIVISORPROC_ALT)(GLuint,GLuint);
static inline void glVertexBindingDivisor(GLuint bindingindex1,GLuint divisor1)
{
	static PFNGLVERTEXBINDINGDIVISORPROC_ALT fn=(PFNGLVERTEXBINDINGDIVISORPROC_ALT)glaltGetProcAddressExtension("glVertexBindingDivisor","GL_ARB_vertex_attrib_binding");
	 fn(bindingindex1,divisor1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_vertex_blend
#define GL_ARB_vertex_blend
#ifndef GL_MODELVIEW0_ARB
#define GL_MODELVIEW0_ARB 0x1700
#endif //GL_MODELVIEW0_ARB
#ifndef GL_MODELVIEW1_ARB
#define GL_MODELVIEW1_ARB 0x850A
#endif //GL_MODELVIEW1_ARB
#ifndef GL_MAX_VERTEX_UNITS_ARB
#define GL_MAX_VERTEX_UNITS_ARB 0x86A4
#endif //GL_MAX_VERTEX_UNITS_ARB
#ifndef GL_ACTIVE_VERTEX_UNITS_ARB
#define GL_ACTIVE_VERTEX_UNITS_ARB 0x86A5
#endif //GL_ACTIVE_VERTEX_UNITS_ARB
#ifndef GL_WEIGHT_SUM_UNITY_ARB
#define GL_WEIGHT_SUM_UNITY_ARB 0x86A6
#endif //GL_WEIGHT_SUM_UNITY_ARB
#ifndef GL_VERTEX_BLEND_ARB
#define GL_VERTEX_BLEND_ARB 0x86A7
#endif //GL_VERTEX_BLEND_ARB
#ifndef GL_CURRENT_WEIGHT_ARB
#define GL_CURRENT_WEIGHT_ARB 0x86A8
#endif //GL_CURRENT_WEIGHT_ARB
#ifndef GL_WEIGHT_ARRAY_TYPE_ARB
#define GL_WEIGHT_ARRAY_TYPE_ARB 0x86A9
#endif //GL_WEIGHT_ARRAY_TYPE_ARB
#ifndef GL_WEIGHT_ARRAY_STRIDE_ARB
#define GL_WEIGHT_ARRAY_STRIDE_ARB 0x86AA
#endif //GL_WEIGHT_ARRAY_STRIDE_ARB
#ifndef GL_WEIGHT_ARRAY_SIZE_ARB
#define GL_WEIGHT_ARRAY_SIZE_ARB 0x86AB
#endif //GL_WEIGHT_ARRAY_SIZE_ARB
#ifndef GL_WEIGHT_ARRAY_POINTER_ARB
#define GL_WEIGHT_ARRAY_POINTER_ARB 0x86AC
#endif //GL_WEIGHT_ARRAY_POINTER_ARB
#ifndef GL_WEIGHT_ARRAY_ARB
#define GL_WEIGHT_ARRAY_ARB 0x86AD
#endif //GL_WEIGHT_ARRAY_ARB
#ifndef GL_MODELVIEW2_ARB
#define GL_MODELVIEW2_ARB 0x8722
#endif //GL_MODELVIEW2_ARB
#ifndef GL_MODELVIEW3_ARB
#define GL_MODELVIEW3_ARB 0x8723
#endif //GL_MODELVIEW3_ARB
#ifndef GL_MODELVIEW4_ARB
#define GL_MODELVIEW4_ARB 0x8724
#endif //GL_MODELVIEW4_ARB
#ifndef GL_MODELVIEW5_ARB
#define GL_MODELVIEW5_ARB 0x8725
#endif //GL_MODELVIEW5_ARB
#ifndef GL_MODELVIEW6_ARB
#define GL_MODELVIEW6_ARB 0x8726
#endif //GL_MODELVIEW6_ARB
#ifndef GL_MODELVIEW7_ARB
#define GL_MODELVIEW7_ARB 0x8727
#endif //GL_MODELVIEW7_ARB
#ifndef GL_MODELVIEW8_ARB
#define GL_MODELVIEW8_ARB 0x8728
#endif //GL_MODELVIEW8_ARB
#ifndef GL_MODELVIEW9_ARB
#define GL_MODELVIEW9_ARB 0x8729
#endif //GL_MODELVIEW9_ARB
#ifndef GL_MODELVIEW10_ARB
#define GL_MODELVIEW10_ARB 0x872A
#endif //GL_MODELVIEW10_ARB
#ifndef GL_MODELVIEW11_ARB
#define GL_MODELVIEW11_ARB 0x872B
#endif //GL_MODELVIEW11_ARB
#ifndef GL_MODELVIEW12_ARB
#define GL_MODELVIEW12_ARB 0x872C
#endif //GL_MODELVIEW12_ARB
#ifndef GL_MODELVIEW13_ARB
#define GL_MODELVIEW13_ARB 0x872D
#endif //GL_MODELVIEW13_ARB
#ifndef GL_MODELVIEW14_ARB
#define GL_MODELVIEW14_ARB 0x872E
#endif //GL_MODELVIEW14_ARB
#ifndef GL_MODELVIEW15_ARB
#define GL_MODELVIEW15_ARB 0x872F
#endif //GL_MODELVIEW15_ARB
#ifndef GL_MODELVIEW16_ARB
#define GL_MODELVIEW16_ARB 0x8730
#endif //GL_MODELVIEW16_ARB
#ifndef GL_MODELVIEW17_ARB
#define GL_MODELVIEW17_ARB 0x8731
#endif //GL_MODELVIEW17_ARB
#ifndef GL_MODELVIEW18_ARB
#define GL_MODELVIEW18_ARB 0x8732
#endif //GL_MODELVIEW18_ARB
#ifndef GL_MODELVIEW19_ARB
#define GL_MODELVIEW19_ARB 0x8733
#endif //GL_MODELVIEW19_ARB
#ifndef GL_MODELVIEW20_ARB
#define GL_MODELVIEW20_ARB 0x8734
#endif //GL_MODELVIEW20_ARB
#ifndef GL_MODELVIEW21_ARB
#define GL_MODELVIEW21_ARB 0x8735
#endif //GL_MODELVIEW21_ARB
#ifndef GL_MODELVIEW22_ARB
#define GL_MODELVIEW22_ARB 0x8736
#endif //GL_MODELVIEW22_ARB
#ifndef GL_MODELVIEW23_ARB
#define GL_MODELVIEW23_ARB 0x8737
#endif //GL_MODELVIEW23_ARB
#ifndef GL_MODELVIEW24_ARB
#define GL_MODELVIEW24_ARB 0x8738
#endif //GL_MODELVIEW24_ARB
#ifndef GL_MODELVIEW25_ARB
#define GL_MODELVIEW25_ARB 0x8739
#endif //GL_MODELVIEW25_ARB
#ifndef GL_MODELVIEW26_ARB
#define GL_MODELVIEW26_ARB 0x873A
#endif //GL_MODELVIEW26_ARB
#ifndef GL_MODELVIEW27_ARB
#define GL_MODELVIEW27_ARB 0x873B
#endif //GL_MODELVIEW27_ARB
#ifndef GL_MODELVIEW28_ARB
#define GL_MODELVIEW28_ARB 0x873C
#endif //GL_MODELVIEW28_ARB
#ifndef GL_MODELVIEW29_ARB
#define GL_MODELVIEW29_ARB 0x873D
#endif //GL_MODELVIEW29_ARB
#ifndef GL_MODELVIEW30_ARB
#define GL_MODELVIEW30_ARB 0x873E
#endif //GL_MODELVIEW30_ARB
#ifndef GL_MODELVIEW31_ARB
#define GL_MODELVIEW31_ARB 0x873F
#endif //GL_MODELVIEW31_ARB
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_VertexBlendARB
#define GL_ALT_FUNDEF_VertexBlendARB
typedef void (*PFNGLVERTEXBLENDARBPROC_ALT)(GLint);
static inline void glVertexBlendARB(GLint count1)
{
	static PFNGLVERTEXBLENDARBPROC_ALT fn=(PFNGLVERTEXBLENDARBPROC_ALT)glaltGetProcAddressExtension("glVertexBlendARB","GL_ARB_vertex_blend");
	 fn(count1);
}
#endif

#ifndef	GL_ALT_FUNDEF_WeightPointerARB
#define GL_ALT_FUNDEF_WeightPointerARB
typedef void (*PFNGLWEIGHTPOINTERARBPROC_ALT)(GLint,GLenum,GLsizei,const void *);
static inline void glWeightPointerARB(GLint size1,GLenum type1,GLsizei stride1,const void * pointer1)
{
	static PFNGLWEIGHTPOINTERARBPROC_ALT fn=(PFNGLWEIGHTPOINTERARBPROC_ALT)glaltGetProcAddressExtension("glWeightPointerARB","GL_ARB_vertex_blend");
	 fn(size1,type1,stride1,pointer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_WeightbvARB
#define GL_ALT_FUNDEF_WeightbvARB
typedef void (*PFNGLWEIGHTBVARBPROC_ALT)(GLint,const GLbyte *);
static inline void glWeightbvARB(GLint size1,const GLbyte * weights1)
{
	static PFNGLWEIGHTBVARBPROC_ALT fn=(PFNGLWEIGHTBVARBPROC_ALT)glaltGetProcAddressExtension("glWeightbvARB","GL_ARB_vertex_blend");
	 fn(size1,weights1);
}
#endif

#ifndef	GL_ALT_FUNDEF_WeightdvARB
#define GL_ALT_FUNDEF_WeightdvARB
typedef void (*PFNGLWEIGHTDVARBPROC_ALT)(GLint,const GLdouble *);
static inline void glWeightdvARB(GLint size1,const GLdouble * weights1)
{
	static PFNGLWEIGHTDVARBPROC_ALT fn=(PFNGLWEIGHTDVARBPROC_ALT)glaltGetProcAddressExtension("glWeightdvARB","GL_ARB_vertex_blend");
	 fn(size1,weights1);
}
#endif

#ifndef	GL_ALT_FUNDEF_WeightfvARB
#define GL_ALT_FUNDEF_WeightfvARB
typedef void (*PFNGLWEIGHTFVARBPROC_ALT)(GLint,const GLfloat *);
static inline void glWeightfvARB(GLint size1,const GLfloat * weights1)
{
	static PFNGLWEIGHTFVARBPROC_ALT fn=(PFNGLWEIGHTFVARBPROC_ALT)glaltGetProcAddressExtension("glWeightfvARB","GL_ARB_vertex_blend");
	 fn(size1,weights1);
}
#endif

#ifndef	GL_ALT_FUNDEF_WeightivARB
#define GL_ALT_FUNDEF_WeightivARB
typedef void (*PFNGLWEIGHTIVARBPROC_ALT)(GLint,const GLint *);
static inline void glWeightivARB(GLint size1,const GLint * weights1)
{
	static PFNGLWEIGHTIVARBPROC_ALT fn=(PFNGLWEIGHTIVARBPROC_ALT)glaltGetProcAddressExtension("glWeightivARB","GL_ARB_vertex_blend");
	 fn(size1,weights1);
}
#endif

#ifndef	GL_ALT_FUNDEF_WeightsvARB
#define GL_ALT_FUNDEF_WeightsvARB
typedef void (*PFNGLWEIGHTSVARBPROC_ALT)(GLint,const GLshort *);
static inline void glWeightsvARB(GLint size1,const GLshort * weights1)
{
	static PFNGLWEIGHTSVARBPROC_ALT fn=(PFNGLWEIGHTSVARBPROC_ALT)glaltGetProcAddressExtension("glWeightsvARB","GL_ARB_vertex_blend");
	 fn(size1,weights1);
}
#endif

#ifndef	GL_ALT_FUNDEF_WeightubvARB
#define GL_ALT_FUNDEF_WeightubvARB
typedef void (*PFNGLWEIGHTUBVARBPROC_ALT)(GLint,const GLubyte *);
static inline void glWeightubvARB(GLint size1,const GLubyte * weights1)
{
	static PFNGLWEIGHTUBVARBPROC_ALT fn=(PFNGLWEIGHTUBVARBPROC_ALT)glaltGetProcAddressExtension("glWeightubvARB","GL_ARB_vertex_blend");
	 fn(size1,weights1);
}
#endif

#ifndef	GL_ALT_FUNDEF_WeightuivARB
#define GL_ALT_FUNDEF_WeightuivARB
typedef void (*PFNGLWEIGHTUIVARBPROC_ALT)(GLint,const GLuint *);
static inline void glWeightuivARB(GLint size1,const GLuint * weights1)
{
	static PFNGLWEIGHTUIVARBPROC_ALT fn=(PFNGLWEIGHTUIVARBPROC_ALT)glaltGetProcAddressExtension("glWeightuivARB","GL_ARB_vertex_blend");
	 fn(size1,weights1);
}
#endif

#ifndef	GL_ALT_FUNDEF_WeightusvARB
#define GL_ALT_FUNDEF_WeightusvARB
typedef void (*PFNGLWEIGHTUSVARBPROC_ALT)(GLint,const GLushort *);
static inline void glWeightusvARB(GLint size1,const GLushort * weights1)
{
	static PFNGLWEIGHTUSVARBPROC_ALT fn=(PFNGLWEIGHTUSVARBPROC_ALT)glaltGetProcAddressExtension("glWeightusvARB","GL_ARB_vertex_blend");
	 fn(size1,weights1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_vertex_buffer_object
#define GL_ARB_vertex_buffer_object
#ifndef GL_BUFFER_SIZE_ARB
#define GL_BUFFER_SIZE_ARB 0x8764
#endif //GL_BUFFER_SIZE_ARB
#ifndef GL_BUFFER_USAGE_ARB
#define GL_BUFFER_USAGE_ARB 0x8765
#endif //GL_BUFFER_USAGE_ARB
#ifndef GL_ARRAY_BUFFER_ARB
#define GL_ARRAY_BUFFER_ARB 0x8892
#endif //GL_ARRAY_BUFFER_ARB
#ifndef GL_ELEMENT_ARRAY_BUFFER_ARB
#define GL_ELEMENT_ARRAY_BUFFER_ARB 0x8893
#endif //GL_ELEMENT_ARRAY_BUFFER_ARB
#ifndef GL_ARRAY_BUFFER_BINDING_ARB
#define GL_ARRAY_BUFFER_BINDING_ARB 0x8894
#endif //GL_ARRAY_BUFFER_BINDING_ARB
#ifndef GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB
#define GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB 0x8895
#endif //GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB
#ifndef GL_VERTEX_ARRAY_BUFFER_BINDING_ARB
#define GL_VERTEX_ARRAY_BUFFER_BINDING_ARB 0x8896
#endif //GL_VERTEX_ARRAY_BUFFER_BINDING_ARB
#ifndef GL_NORMAL_ARRAY_BUFFER_BINDING_ARB
#define GL_NORMAL_ARRAY_BUFFER_BINDING_ARB 0x8897
#endif //GL_NORMAL_ARRAY_BUFFER_BINDING_ARB
#ifndef GL_COLOR_ARRAY_BUFFER_BINDING_ARB
#define GL_COLOR_ARRAY_BUFFER_BINDING_ARB 0x8898
#endif //GL_COLOR_ARRAY_BUFFER_BINDING_ARB
#ifndef GL_INDEX_ARRAY_BUFFER_BINDING_ARB
#define GL_INDEX_ARRAY_BUFFER_BINDING_ARB 0x8899
#endif //GL_INDEX_ARRAY_BUFFER_BINDING_ARB
#ifndef GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB 0x889A
#endif //GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB
#ifndef GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB 0x889B
#endif //GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB
#ifndef GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB 0x889C
#endif //GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB
#ifndef GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB 0x889D
#endif //GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB
#ifndef GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB
#define GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB 0x889E
#endif //GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB
#ifndef GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB 0x889F
#endif //GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB
#ifndef GL_READ_ONLY_ARB
#define GL_READ_ONLY_ARB 0x88B8
#endif //GL_READ_ONLY_ARB
#ifndef GL_WRITE_ONLY_ARB
#define GL_WRITE_ONLY_ARB 0x88B9
#endif //GL_WRITE_ONLY_ARB
#ifndef GL_READ_WRITE_ARB
#define GL_READ_WRITE_ARB 0x88BA
#endif //GL_READ_WRITE_ARB
#ifndef GL_BUFFER_ACCESS_ARB
#define GL_BUFFER_ACCESS_ARB 0x88BB
#endif //GL_BUFFER_ACCESS_ARB
#ifndef GL_BUFFER_MAPPED_ARB
#define GL_BUFFER_MAPPED_ARB 0x88BC
#endif //GL_BUFFER_MAPPED_ARB
#ifndef GL_BUFFER_MAP_POINTER_ARB
#define GL_BUFFER_MAP_POINTER_ARB 0x88BD
#endif //GL_BUFFER_MAP_POINTER_ARB
#ifndef GL_STREAM_DRAW_ARB
#define GL_STREAM_DRAW_ARB 0x88E0
#endif //GL_STREAM_DRAW_ARB
#ifndef GL_STREAM_READ_ARB
#define GL_STREAM_READ_ARB 0x88E1
#endif //GL_STREAM_READ_ARB
#ifndef GL_STREAM_COPY_ARB
#define GL_STREAM_COPY_ARB 0x88E2
#endif //GL_STREAM_COPY_ARB
#ifndef GL_STATIC_DRAW_ARB
#define GL_STATIC_DRAW_ARB 0x88E4
#endif //GL_STATIC_DRAW_ARB
#ifndef GL_STATIC_READ_ARB
#define GL_STATIC_READ_ARB 0x88E5
#endif //GL_STATIC_READ_ARB
#ifndef GL_STATIC_COPY_ARB
#define GL_STATIC_COPY_ARB 0x88E6
#endif //GL_STATIC_COPY_ARB
#ifndef GL_DYNAMIC_DRAW_ARB
#define GL_DYNAMIC_DRAW_ARB 0x88E8
#endif //GL_DYNAMIC_DRAW_ARB
#ifndef GL_DYNAMIC_READ_ARB
#define GL_DYNAMIC_READ_ARB 0x88E9
#endif //GL_DYNAMIC_READ_ARB
#ifndef GL_DYNAMIC_COPY_ARB
#define GL_DYNAMIC_COPY_ARB 0x88EA
#endif //GL_DYNAMIC_COPY_ARB
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BindBufferARB
#define GL_ALT_FUNDEF_BindBufferARB
typedef void (*PFNGLBINDBUFFERARBPROC_ALT)(GLenum,GLuint);
static inline void glBindBufferARB(GLenum target1,GLuint buffer1)
{
	static PFNGLBINDBUFFERARBPROC_ALT fn=(PFNGLBINDBUFFERARBPROC_ALT)glaltGetProcAddressExtension("glBindBufferARB","GL_ARB_vertex_buffer_object");
	 fn(target1,buffer1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_BufferDataARB
#define GL_ALT_FUNDEF_BufferDataARB
typedef void (*PFNGLBUFFERDATAARBPROC_ALT)(GLenum,GLsizeiptrARB,const void *,GLenum);
static inline void glBufferDataARB(GLenum target1,GLsizeiptrARB size1,const void * data1,GLenum usage1)
{
	static PFNGLBUFFERDATAARBPROC_ALT fn=(PFNGLBUFFERDATAARBPROC_ALT)glaltGetProcAddressExtension("glBufferDataARB","GL_ARB_vertex_buffer_object");
	 fn(target1,size1,data1,usage1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_BufferSubDataARB
#define GL_ALT_FUNDEF_BufferSubDataARB
typedef void (*PFNGLBUFFERSUBDATAARBPROC_ALT)(GLenum,GLintptrARB,GLsizeiptrARB,const void *);
static inline void glBufferSubDataARB(GLenum target1,GLintptrARB offset1,GLsizeiptrARB size1,const void * data1)
{
	static PFNGLBUFFERSUBDATAARBPROC_ALT fn=(PFNGLBUFFERSUBDATAARBPROC_ALT)glaltGetProcAddressExtension("glBufferSubDataARB","GL_ARB_vertex_buffer_object");
	 fn(target1,offset1,size1,data1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_DeleteBuffersARB
#define GL_ALT_FUNDEF_DeleteBuffersARB
typedef void (*PFNGLDELETEBUFFERSARBPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteBuffersARB(GLsizei n1,const GLuint * buffers1)
{
	static PFNGLDELETEBUFFERSARBPROC_ALT fn=(PFNGLDELETEBUFFERSARBPROC_ALT)glaltGetProcAddressExtension("glDeleteBuffersARB","GL_ARB_vertex_buffer_object");
	 fn(n1,buffers1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GenBuffersARB
#define GL_ALT_FUNDEF_GenBuffersARB
typedef void (*PFNGLGENBUFFERSARBPROC_ALT)(GLsizei,GLuint *);
static inline void glGenBuffersARB(GLsizei n1,GLuint * buffers1)
{
	static PFNGLGENBUFFERSARBPROC_ALT fn=(PFNGLGENBUFFERSARBPROC_ALT)glaltGetProcAddressExtension("glGenBuffersARB","GL_ARB_vertex_buffer_object");
	 fn(n1,buffers1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetBufferParameterivARB
#define GL_ALT_FUNDEF_GetBufferParameterivARB
typedef void (*PFNGLGETBUFFERPARAMETERIVARBPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetBufferParameterivARB(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETBUFFERPARAMETERIVARBPROC_ALT fn=(PFNGLGETBUFFERPARAMETERIVARBPROC_ALT)glaltGetProcAddressExtension("glGetBufferParameterivARB","GL_ARB_vertex_buffer_object");
	 fn(target1,pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetBufferPointervARB
#define GL_ALT_FUNDEF_GetBufferPointervARB
typedef void (*PFNGLGETBUFFERPOINTERVARBPROC_ALT)(GLenum,GLenum,void **);
static inline void glGetBufferPointervARB(GLenum target1,GLenum pname1,void ** params1)
{
	static PFNGLGETBUFFERPOINTERVARBPROC_ALT fn=(PFNGLGETBUFFERPOINTERVARBPROC_ALT)glaltGetProcAddressExtension("glGetBufferPointervARB","GL_ARB_vertex_buffer_object");
	 fn(target1,pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetBufferSubDataARB
#define GL_ALT_FUNDEF_GetBufferSubDataARB
typedef void (*PFNGLGETBUFFERSUBDATAARBPROC_ALT)(GLenum,GLintptrARB,GLsizeiptrARB,void *);
static inline void glGetBufferSubDataARB(GLenum target1,GLintptrARB offset1,GLsizeiptrARB size1,void * data1)
{
	static PFNGLGETBUFFERSUBDATAARBPROC_ALT fn=(PFNGLGETBUFFERSUBDATAARBPROC_ALT)glaltGetProcAddressExtension("glGetBufferSubDataARB","GL_ARB_vertex_buffer_object");
	 fn(target1,offset1,size1,data1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_IsBufferARB
#define GL_ALT_FUNDEF_IsBufferARB
typedef GLboolean (*PFNGLISBUFFERARBPROC_ALT)(GLuint);
static inline GLboolean glIsBufferARB(GLuint buffer1)
{
	static PFNGLISBUFFERARBPROC_ALT fn=(PFNGLISBUFFERARBPROC_ALT)glaltGetProcAddressExtension("glIsBufferARB","GL_ARB_vertex_buffer_object");
	return fn(buffer1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MapBufferARB
#define GL_ALT_FUNDEF_MapBufferARB
typedef void * (*PFNGLMAPBUFFERARBPROC_ALT)(GLenum,GLenum);
static inline void * glMapBufferARB(GLenum target1,GLenum access1)
{
	static PFNGLMAPBUFFERARBPROC_ALT fn=(PFNGLMAPBUFFERARBPROC_ALT)glaltGetProcAddressExtension("glMapBufferARB","GL_ARB_vertex_buffer_object");
	return fn(target1,access1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_UnmapBufferARB
#define GL_ALT_FUNDEF_UnmapBufferARB
typedef GLboolean (*PFNGLUNMAPBUFFERARBPROC_ALT)(GLenum);
static inline GLboolean glUnmapBufferARB(GLenum target1)
{
	static PFNGLUNMAPBUFFERARBPROC_ALT fn=(PFNGLUNMAPBUFFERARBPROC_ALT)glaltGetProcAddressExtension("glUnmapBufferARB","GL_ARB_vertex_buffer_object");
	return fn(target1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_ARB_vertex_program
#define GL_ARB_vertex_program
#ifndef GL_COLOR_SUM_ARB
#define GL_COLOR_SUM_ARB 0x8458
#endif //GL_COLOR_SUM_ARB
#ifndef GL_VERTEX_PROGRAM_ARB
#define GL_VERTEX_PROGRAM_ARB 0x8620
#endif //GL_VERTEX_PROGRAM_ARB
#ifndef GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB 0x8622
#endif //GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
#ifndef GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
#define GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB 0x8623
#endif //GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
#ifndef GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB 0x8624
#endif //GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
#ifndef GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
#define GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB 0x8625
#endif //GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
#ifndef GL_CURRENT_VERTEX_ATTRIB_ARB
#define GL_CURRENT_VERTEX_ATTRIB_ARB 0x8626
#endif //GL_CURRENT_VERTEX_ATTRIB_ARB
#ifndef GL_PROGRAM_LENGTH_ARB
#define GL_PROGRAM_LENGTH_ARB 0x8627
#endif //GL_PROGRAM_LENGTH_ARB
#ifndef GL_PROGRAM_STRING_ARB
#define GL_PROGRAM_STRING_ARB 0x8628
#endif //GL_PROGRAM_STRING_ARB
#ifndef GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
#define GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB 0x862E
#endif //GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
#ifndef GL_MAX_PROGRAM_MATRICES_ARB
#define GL_MAX_PROGRAM_MATRICES_ARB 0x862F
#endif //GL_MAX_PROGRAM_MATRICES_ARB
#ifndef GL_CURRENT_MATRIX_STACK_DEPTH_ARB
#define GL_CURRENT_MATRIX_STACK_DEPTH_ARB 0x8640
#endif //GL_CURRENT_MATRIX_STACK_DEPTH_ARB
#ifndef GL_CURRENT_MATRIX_ARB
#define GL_CURRENT_MATRIX_ARB 0x8641
#endif //GL_CURRENT_MATRIX_ARB
#ifndef GL_VERTEX_PROGRAM_POINT_SIZE_ARB
#define GL_VERTEX_PROGRAM_POINT_SIZE_ARB 0x8642
#endif //GL_VERTEX_PROGRAM_POINT_SIZE_ARB
#ifndef GL_VERTEX_PROGRAM_TWO_SIDE_ARB
#define GL_VERTEX_PROGRAM_TWO_SIDE_ARB 0x8643
#endif //GL_VERTEX_PROGRAM_TWO_SIDE_ARB
#ifndef GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
#define GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB 0x8645
#endif //GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
#ifndef GL_PROGRAM_ERROR_POSITION_ARB
#define GL_PROGRAM_ERROR_POSITION_ARB 0x864B
#endif //GL_PROGRAM_ERROR_POSITION_ARB
#ifndef GL_PROGRAM_BINDING_ARB
#define GL_PROGRAM_BINDING_ARB 0x8677
#endif //GL_PROGRAM_BINDING_ARB
#ifndef GL_MAX_VERTEX_ATTRIBS_ARB
#define GL_MAX_VERTEX_ATTRIBS_ARB 0x8869
#endif //GL_MAX_VERTEX_ATTRIBS_ARB
#ifndef GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB 0x886A
#endif //GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
#ifndef GL_PROGRAM_ERROR_STRING_ARB
#define GL_PROGRAM_ERROR_STRING_ARB 0x8874
#endif //GL_PROGRAM_ERROR_STRING_ARB
#ifndef GL_PROGRAM_FORMAT_ASCII_ARB
#define GL_PROGRAM_FORMAT_ASCII_ARB 0x8875
#endif //GL_PROGRAM_FORMAT_ASCII_ARB
#ifndef GL_PROGRAM_FORMAT_ARB
#define GL_PROGRAM_FORMAT_ARB 0x8876
#endif //GL_PROGRAM_FORMAT_ARB
#ifndef GL_PROGRAM_INSTRUCTIONS_ARB
#define GL_PROGRAM_INSTRUCTIONS_ARB 0x88A0
#endif //GL_PROGRAM_INSTRUCTIONS_ARB
#ifndef GL_MAX_PROGRAM_INSTRUCTIONS_ARB
#define GL_MAX_PROGRAM_INSTRUCTIONS_ARB 0x88A1
#endif //GL_MAX_PROGRAM_INSTRUCTIONS_ARB
#ifndef GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
#define GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A2
#endif //GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
#ifndef GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
#define GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A3
#endif //GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
#ifndef GL_PROGRAM_TEMPORARIES_ARB
#define GL_PROGRAM_TEMPORARIES_ARB 0x88A4
#endif //GL_PROGRAM_TEMPORARIES_ARB
#ifndef GL_MAX_PROGRAM_TEMPORARIES_ARB
#define GL_MAX_PROGRAM_TEMPORARIES_ARB 0x88A5
#endif //GL_MAX_PROGRAM_TEMPORARIES_ARB
#ifndef GL_PROGRAM_NATIVE_TEMPORARIES_ARB
#define GL_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A6
#endif //GL_PROGRAM_NATIVE_TEMPORARIES_ARB
#ifndef GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
#define GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A7
#endif //GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
#ifndef GL_PROGRAM_PARAMETERS_ARB
#define GL_PROGRAM_PARAMETERS_ARB 0x88A8
#endif //GL_PROGRAM_PARAMETERS_ARB
#ifndef GL_MAX_PROGRAM_PARAMETERS_ARB
#define GL_MAX_PROGRAM_PARAMETERS_ARB 0x88A9
#endif //GL_MAX_PROGRAM_PARAMETERS_ARB
#ifndef GL_PROGRAM_NATIVE_PARAMETERS_ARB
#define GL_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AA
#endif //GL_PROGRAM_NATIVE_PARAMETERS_ARB
#ifndef GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
#define GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AB
#endif //GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
#ifndef GL_PROGRAM_ATTRIBS_ARB
#define GL_PROGRAM_ATTRIBS_ARB 0x88AC
#endif //GL_PROGRAM_ATTRIBS_ARB
#ifndef GL_MAX_PROGRAM_ATTRIBS_ARB
#define GL_MAX_PROGRAM_ATTRIBS_ARB 0x88AD
#endif //GL_MAX_PROGRAM_ATTRIBS_ARB
#ifndef GL_PROGRAM_NATIVE_ATTRIBS_ARB
#define GL_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AE
#endif //GL_PROGRAM_NATIVE_ATTRIBS_ARB
#ifndef GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
#define GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AF
#endif //GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
#ifndef GL_PROGRAM_ADDRESS_REGISTERS_ARB
#define GL_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B0
#endif //GL_PROGRAM_ADDRESS_REGISTERS_ARB
#ifndef GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
#define GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B1
#endif //GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
#ifndef GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
#define GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B2
#endif //GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
#ifndef GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
#define GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B3
#endif //GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
#ifndef GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
#define GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB 0x88B4
#endif //GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
#ifndef GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
#define GL_MAX_PROGRAM_ENV_PARAMETERS_ARB 0x88B5
#endif //GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
#ifndef GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
#define GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB 0x88B6
#endif //GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
#ifndef GL_TRANSPOSE_CURRENT_MATRIX_ARB
#define GL_TRANSPOSE_CURRENT_MATRIX_ARB 0x88B7
#endif //GL_TRANSPOSE_CURRENT_MATRIX_ARB
#ifndef GL_MATRIX0_ARB
#define GL_MATRIX0_ARB 0x88C0
#endif //GL_MATRIX0_ARB
#ifndef GL_MATRIX1_ARB
#define GL_MATRIX1_ARB 0x88C1
#endif //GL_MATRIX1_ARB
#ifndef GL_MATRIX2_ARB
#define GL_MATRIX2_ARB 0x88C2
#endif //GL_MATRIX2_ARB
#ifndef GL_MATRIX3_ARB
#define GL_MATRIX3_ARB 0x88C3
#endif //GL_MATRIX3_ARB
#ifndef GL_MATRIX4_ARB
#define GL_MATRIX4_ARB 0x88C4
#endif //GL_MATRIX4_ARB
#ifndef GL_MATRIX5_ARB
#define GL_MATRIX5_ARB 0x88C5
#endif //GL_MATRIX5_ARB
#ifndef GL_MATRIX6_ARB
#define GL_MATRIX6_ARB 0x88C6
#endif //GL_MATRIX6_ARB
#ifndef GL_MATRIX7_ARB
#define GL_MATRIX7_ARB 0x88C7
#endif //GL_MATRIX7_ARB
#ifndef GL_MATRIX8_ARB
#define GL_MATRIX8_ARB 0x88C8
#endif //GL_MATRIX8_ARB
#ifndef GL_MATRIX9_ARB
#define GL_MATRIX9_ARB 0x88C9
#endif //GL_MATRIX9_ARB
#ifndef GL_MATRIX10_ARB
#define GL_MATRIX10_ARB 0x88CA
#endif //GL_MATRIX10_ARB
#ifndef GL_MATRIX11_ARB
#define GL_MATRIX11_ARB 0x88CB
#endif //GL_MATRIX11_ARB
#ifndef GL_MATRIX12_ARB
#define GL_MATRIX12_ARB 0x88CC
#endif //GL_MATRIX12_ARB
#ifndef GL_MATRIX13_ARB
#define GL_MATRIX13_ARB 0x88CD
#endif //GL_MATRIX13_ARB
#ifndef GL_MATRIX14_ARB
#define GL_MATRIX14_ARB 0x88CE
#endif //GL_MATRIX14_ARB
#ifndef GL_MATRIX15_ARB
#define GL_MATRIX15_ARB 0x88CF
#endif //GL_MATRIX15_ARB
#ifndef GL_MATRIX16_ARB
#define GL_MATRIX16_ARB 0x88D0
#endif //GL_MATRIX16_ARB
#ifndef GL_MATRIX17_ARB
#define GL_MATRIX17_ARB 0x88D1
#endif //GL_MATRIX17_ARB
#ifndef GL_MATRIX18_ARB
#define GL_MATRIX18_ARB 0x88D2
#endif //GL_MATRIX18_ARB
#ifndef GL_MATRIX19_ARB
#define GL_MATRIX19_ARB 0x88D3
#endif //GL_MATRIX19_ARB
#ifndef GL_MATRIX20_ARB
#define GL_MATRIX20_ARB 0x88D4
#endif //GL_MATRIX20_ARB
#ifndef GL_MATRIX21_ARB
#define GL_MATRIX21_ARB 0x88D5
#endif //GL_MATRIX21_ARB
#ifndef GL_MATRIX22_ARB
#define GL_MATRIX22_ARB 0x88D6
#endif //GL_MATRIX22_ARB
#ifndef GL_MATRIX23_ARB
#define GL_MATRIX23_ARB 0x88D7
#endif //GL_MATRIX23_ARB
#ifndef GL_MATRIX24_ARB
#define GL_MATRIX24_ARB 0x88D8
#endif //GL_MATRIX24_ARB
#ifndef GL_MATRIX25_ARB
#define GL_MATRIX25_ARB 0x88D9
#endif //GL_MATRIX25_ARB
#ifndef GL_MATRIX26_ARB
#define GL_MATRIX26_ARB 0x88DA
#endif //GL_MATRIX26_ARB
#ifndef GL_MATRIX27_ARB
#define GL_MATRIX27_ARB 0x88DB
#endif //GL_MATRIX27_ARB
#ifndef GL_MATRIX28_ARB
#define GL_MATRIX28_ARB 0x88DC
#endif //GL_MATRIX28_ARB
#ifndef GL_MATRIX29_ARB
#define GL_MATRIX29_ARB 0x88DD
#endif //GL_MATRIX29_ARB
#ifndef GL_MATRIX30_ARB
#define GL_MATRIX30_ARB 0x88DE
#endif //GL_MATRIX30_ARB
#ifndef GL_MATRIX31_ARB
#define GL_MATRIX31_ARB 0x88DF
#endif //GL_MATRIX31_ARB
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BindProgramARB
#define GL_ALT_FUNDEF_BindProgramARB
typedef void (*PFNGLBINDPROGRAMARBPROC_ALT)(GLenum,GLuint);
static inline void glBindProgramARB(GLenum target1,GLuint program1)
{
	static PFNGLBINDPROGRAMARBPROC_ALT fn=(PFNGLBINDPROGRAMARBPROC_ALT)glaltGetProcAddressExtension("glBindProgramARB","GL_ARB_vertex_program");
	 fn(target1,program1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DeleteProgramsARB
#define GL_ALT_FUNDEF_DeleteProgramsARB
typedef void (*PFNGLDELETEPROGRAMSARBPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteProgramsARB(GLsizei n1,const GLuint * programs1)
{
	static PFNGLDELETEPROGRAMSARBPROC_ALT fn=(PFNGLDELETEPROGRAMSARBPROC_ALT)glaltGetProcAddressExtension("glDeleteProgramsARB","GL_ARB_vertex_program");
	 fn(n1,programs1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DisableVertexAttribArrayARB
#define GL_ALT_FUNDEF_DisableVertexAttribArrayARB
typedef void (*PFNGLDISABLEVERTEXATTRIBARRAYARBPROC_ALT)(GLuint);
static inline void glDisableVertexAttribArrayARB(GLuint index1)
{
	static PFNGLDISABLEVERTEXATTRIBARRAYARBPROC_ALT fn=(PFNGLDISABLEVERTEXATTRIBARRAYARBPROC_ALT)glaltGetProcAddressExtension("glDisableVertexAttribArrayARB","GL_ARB_vertex_program");
	 fn(index1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_EnableVertexAttribArrayARB
#define GL_ALT_FUNDEF_EnableVertexAttribArrayARB
typedef void (*PFNGLENABLEVERTEXATTRIBARRAYARBPROC_ALT)(GLuint);
static inline void glEnableVertexAttribArrayARB(GLuint index1)
{
	static PFNGLENABLEVERTEXATTRIBARRAYARBPROC_ALT fn=(PFNGLENABLEVERTEXATTRIBARRAYARBPROC_ALT)glaltGetProcAddressExtension("glEnableVertexAttribArrayARB","GL_ARB_vertex_program");
	 fn(index1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GenProgramsARB
#define GL_ALT_FUNDEF_GenProgramsARB
typedef void (*PFNGLGENPROGRAMSARBPROC_ALT)(GLsizei,GLuint *);
static inline void glGenProgramsARB(GLsizei n1,GLuint * programs1)
{
	static PFNGLGENPROGRAMSARBPROC_ALT fn=(PFNGLGENPROGRAMSARBPROC_ALT)glaltGetProcAddressExtension("glGenProgramsARB","GL_ARB_vertex_program");
	 fn(n1,programs1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetProgramEnvParameterdvARB
#define GL_ALT_FUNDEF_GetProgramEnvParameterdvARB
typedef void (*PFNGLGETPROGRAMENVPARAMETERDVARBPROC_ALT)(GLenum,GLuint,GLdouble *);
static inline void glGetProgramEnvParameterdvARB(GLenum target1,GLuint index1,GLdouble * params1)
{
	static PFNGLGETPROGRAMENVPARAMETERDVARBPROC_ALT fn=(PFNGLGETPROGRAMENVPARAMETERDVARBPROC_ALT)glaltGetProcAddressExtension("glGetProgramEnvParameterdvARB","GL_ARB_vertex_program");
	 fn(target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetProgramEnvParameterfvARB
#define GL_ALT_FUNDEF_GetProgramEnvParameterfvARB
typedef void (*PFNGLGETPROGRAMENVPARAMETERFVARBPROC_ALT)(GLenum,GLuint,GLfloat *);
static inline void glGetProgramEnvParameterfvARB(GLenum target1,GLuint index1,GLfloat * params1)
{
	static PFNGLGETPROGRAMENVPARAMETERFVARBPROC_ALT fn=(PFNGLGETPROGRAMENVPARAMETERFVARBPROC_ALT)glaltGetProcAddressExtension("glGetProgramEnvParameterfvARB","GL_ARB_vertex_program");
	 fn(target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetProgramLocalParameterdvARB
#define GL_ALT_FUNDEF_GetProgramLocalParameterdvARB
typedef void (*PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC_ALT)(GLenum,GLuint,GLdouble *);
static inline void glGetProgramLocalParameterdvARB(GLenum target1,GLuint index1,GLdouble * params1)
{
	static PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC_ALT fn=(PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC_ALT)glaltGetProcAddressExtension("glGetProgramLocalParameterdvARB","GL_ARB_vertex_program");
	 fn(target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetProgramLocalParameterfvARB
#define GL_ALT_FUNDEF_GetProgramLocalParameterfvARB
typedef void (*PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC_ALT)(GLenum,GLuint,GLfloat *);
static inline void glGetProgramLocalParameterfvARB(GLenum target1,GLuint index1,GLfloat * params1)
{
	static PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC_ALT fn=(PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC_ALT)glaltGetProcAddressExtension("glGetProgramLocalParameterfvARB","GL_ARB_vertex_program");
	 fn(target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetProgramStringARB
#define GL_ALT_FUNDEF_GetProgramStringARB
typedef void (*PFNGLGETPROGRAMSTRINGARBPROC_ALT)(GLenum,GLenum,void *);
static inline void glGetProgramStringARB(GLenum target1,GLenum pname1,void * string1)
{
	static PFNGLGETPROGRAMSTRINGARBPROC_ALT fn=(PFNGLGETPROGRAMSTRINGARBPROC_ALT)glaltGetProcAddressExtension("glGetProgramStringARB","GL_ARB_vertex_program");
	 fn(target1,pname1,string1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetProgramivARB
#define GL_ALT_FUNDEF_GetProgramivARB
typedef void (*PFNGLGETPROGRAMIVARBPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetProgramivARB(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETPROGRAMIVARBPROC_ALT fn=(PFNGLGETPROGRAMIVARBPROC_ALT)glaltGetProcAddressExtension("glGetProgramivARB","GL_ARB_vertex_program");
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetVertexAttribPointervARB
#define GL_ALT_FUNDEF_GetVertexAttribPointervARB
typedef void (*PFNGLGETVERTEXATTRIBPOINTERVARBPROC_ALT)(GLuint,GLenum,void **);
static inline void glGetVertexAttribPointervARB(GLuint index1,GLenum pname1,void ** pointer1)
{
	static PFNGLGETVERTEXATTRIBPOINTERVARBPROC_ALT fn=(PFNGLGETVERTEXATTRIBPOINTERVARBPROC_ALT)glaltGetProcAddressExtension("glGetVertexAttribPointervARB","GL_ARB_vertex_program");
	 fn(index1,pname1,pointer1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetVertexAttribdvARB
#define GL_ALT_FUNDEF_GetVertexAttribdvARB
typedef void (*PFNGLGETVERTEXATTRIBDVARBPROC_ALT)(GLuint,GLenum,GLdouble *);
static inline void glGetVertexAttribdvARB(GLuint index1,GLenum pname1,GLdouble * params1)
{
	static PFNGLGETVERTEXATTRIBDVARBPROC_ALT fn=(PFNGLGETVERTEXATTRIBDVARBPROC_ALT)glaltGetProcAddressExtension("glGetVertexAttribdvARB","GL_ARB_vertex_program");
	 fn(index1,pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetVertexAttribfvARB
#define GL_ALT_FUNDEF_GetVertexAttribfvARB
typedef void (*PFNGLGETVERTEXATTRIBFVARBPROC_ALT)(GLuint,GLenum,GLfloat *);
static inline void glGetVertexAttribfvARB(GLuint index1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETVERTEXATTRIBFVARBPROC_ALT fn=(PFNGLGETVERTEXATTRIBFVARBPROC_ALT)glaltGetProcAddressExtension("glGetVertexAttribfvARB","GL_ARB_vertex_program");
	 fn(index1,pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetVertexAttribivARB
#define GL_ALT_FUNDEF_GetVertexAttribivARB
typedef void (*PFNGLGETVERTEXATTRIBIVARBPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetVertexAttribivARB(GLuint index1,GLenum pname1,GLint * params1)
{
	static PFNGLGETVERTEXATTRIBIVARBPROC_ALT fn=(PFNGLGETVERTEXATTRIBIVARBPROC_ALT)glaltGetProcAddressExtension("glGetVertexAttribivARB","GL_ARB_vertex_program");
	 fn(index1,pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_IsProgramARB
#define GL_ALT_FUNDEF_IsProgramARB
typedef GLboolean (*PFNGLISPROGRAMARBPROC_ALT)(GLuint);
static inline GLboolean glIsProgramARB(GLuint program1)
{
	static PFNGLISPROGRAMARBPROC_ALT fn=(PFNGLISPROGRAMARBPROC_ALT)glaltGetProcAddressExtension("glIsProgramARB","GL_ARB_vertex_program");
	return fn(program1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramEnvParameter4dARB
#define GL_ALT_FUNDEF_ProgramEnvParameter4dARB
typedef void (*PFNGLPROGRAMENVPARAMETER4DARBPROC_ALT)(GLenum,GLuint,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void glProgramEnvParameter4dARB(GLenum target1,GLuint index1,GLdouble x1,GLdouble y1,GLdouble z1,GLdouble w1)
{
	static PFNGLPROGRAMENVPARAMETER4DARBPROC_ALT fn=(PFNGLPROGRAMENVPARAMETER4DARBPROC_ALT)glaltGetProcAddressExtension("glProgramEnvParameter4dARB","GL_ARB_vertex_program");
	 fn(target1,index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramEnvParameter4dvARB
#define GL_ALT_FUNDEF_ProgramEnvParameter4dvARB
typedef void (*PFNGLPROGRAMENVPARAMETER4DVARBPROC_ALT)(GLenum,GLuint,const GLdouble *);
static inline void glProgramEnvParameter4dvARB(GLenum target1,GLuint index1,const GLdouble * params1)
{
	static PFNGLPROGRAMENVPARAMETER4DVARBPROC_ALT fn=(PFNGLPROGRAMENVPARAMETER4DVARBPROC_ALT)glaltGetProcAddressExtension("glProgramEnvParameter4dvARB","GL_ARB_vertex_program");
	 fn(target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramEnvParameter4fARB
#define GL_ALT_FUNDEF_ProgramEnvParameter4fARB
typedef void (*PFNGLPROGRAMENVPARAMETER4FARBPROC_ALT)(GLenum,GLuint,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glProgramEnvParameter4fARB(GLenum target1,GLuint index1,GLfloat x1,GLfloat y1,GLfloat z1,GLfloat w1)
{
	static PFNGLPROGRAMENVPARAMETER4FARBPROC_ALT fn=(PFNGLPROGRAMENVPARAMETER4FARBPROC_ALT)glaltGetProcAddressExtension("glProgramEnvParameter4fARB","GL_ARB_vertex_program");
	 fn(target1,index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramEnvParameter4fvARB
#define GL_ALT_FUNDEF_ProgramEnvParameter4fvARB
typedef void (*PFNGLPROGRAMENVPARAMETER4FVARBPROC_ALT)(GLenum,GLuint,const GLfloat *);
static inline void glProgramEnvParameter4fvARB(GLenum target1,GLuint index1,const GLfloat * params1)
{
	static PFNGLPROGRAMENVPARAMETER4FVARBPROC_ALT fn=(PFNGLPROGRAMENVPARAMETER4FVARBPROC_ALT)glaltGetProcAddressExtension("glProgramEnvParameter4fvARB","GL_ARB_vertex_program");
	 fn(target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramLocalParameter4dARB
#define GL_ALT_FUNDEF_ProgramLocalParameter4dARB
typedef void (*PFNGLPROGRAMLOCALPARAMETER4DARBPROC_ALT)(GLenum,GLuint,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void glProgramLocalParameter4dARB(GLenum target1,GLuint index1,GLdouble x1,GLdouble y1,GLdouble z1,GLdouble w1)
{
	static PFNGLPROGRAMLOCALPARAMETER4DARBPROC_ALT fn=(PFNGLPROGRAMLOCALPARAMETER4DARBPROC_ALT)glaltGetProcAddressExtension("glProgramLocalParameter4dARB","GL_ARB_vertex_program");
	 fn(target1,index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramLocalParameter4dvARB
#define GL_ALT_FUNDEF_ProgramLocalParameter4dvARB
typedef void (*PFNGLPROGRAMLOCALPARAMETER4DVARBPROC_ALT)(GLenum,GLuint,const GLdouble *);
static inline void glProgramLocalParameter4dvARB(GLenum target1,GLuint index1,const GLdouble * params1)
{
	static PFNGLPROGRAMLOCALPARAMETER4DVARBPROC_ALT fn=(PFNGLPROGRAMLOCALPARAMETER4DVARBPROC_ALT)glaltGetProcAddressExtension("glProgramLocalParameter4dvARB","GL_ARB_vertex_program");
	 fn(target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramLocalParameter4fARB
#define GL_ALT_FUNDEF_ProgramLocalParameter4fARB
typedef void (*PFNGLPROGRAMLOCALPARAMETER4FARBPROC_ALT)(GLenum,GLuint,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glProgramLocalParameter4fARB(GLenum target1,GLuint index1,GLfloat x1,GLfloat y1,GLfloat z1,GLfloat w1)
{
	static PFNGLPROGRAMLOCALPARAMETER4FARBPROC_ALT fn=(PFNGLPROGRAMLOCALPARAMETER4FARBPROC_ALT)glaltGetProcAddressExtension("glProgramLocalParameter4fARB","GL_ARB_vertex_program");
	 fn(target1,index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramLocalParameter4fvARB
#define GL_ALT_FUNDEF_ProgramLocalParameter4fvARB
typedef void (*PFNGLPROGRAMLOCALPARAMETER4FVARBPROC_ALT)(GLenum,GLuint,const GLfloat *);
static inline void glProgramLocalParameter4fvARB(GLenum target1,GLuint index1,const GLfloat * params1)
{
	static PFNGLPROGRAMLOCALPARAMETER4FVARBPROC_ALT fn=(PFNGLPROGRAMLOCALPARAMETER4FVARBPROC_ALT)glaltGetProcAddressExtension("glProgramLocalParameter4fvARB","GL_ARB_vertex_program");
	 fn(target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramStringARB
#define GL_ALT_FUNDEF_ProgramStringARB
typedef void (*PFNGLPROGRAMSTRINGARBPROC_ALT)(GLenum,GLenum,GLsizei,const void *);
static inline void glProgramStringARB(GLenum target1,GLenum format1,GLsizei len1,const void * string1)
{
	static PFNGLPROGRAMSTRINGARBPROC_ALT fn=(PFNGLPROGRAMSTRINGARBPROC_ALT)glaltGetProcAddressExtension("glProgramStringARB","GL_ARB_vertex_program");
	 fn(target1,format1,len1,string1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttrib1dARB
#define GL_ALT_FUNDEF_VertexAttrib1dARB
typedef void (*PFNGLVERTEXATTRIB1DARBPROC_ALT)(GLuint,GLdouble);
static inline void glVertexAttrib1dARB(GLuint index1,GLdouble x1)
{
	static PFNGLVERTEXATTRIB1DARBPROC_ALT fn=(PFNGLVERTEXATTRIB1DARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib1dARB","GL_ARB_vertex_program");
	 fn(index1,x1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib1dvARB
#define GL_ALT_FUNDEF_VertexAttrib1dvARB
typedef void (*PFNGLVERTEXATTRIB1DVARBPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttrib1dvARB(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIB1DVARBPROC_ALT fn=(PFNGLVERTEXATTRIB1DVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib1dvARB","GL_ARB_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib1fARB
#define GL_ALT_FUNDEF_VertexAttrib1fARB
typedef void (*PFNGLVERTEXATTRIB1FARBPROC_ALT)(GLuint,GLfloat);
static inline void glVertexAttrib1fARB(GLuint index1,GLfloat x1)
{
	static PFNGLVERTEXATTRIB1FARBPROC_ALT fn=(PFNGLVERTEXATTRIB1FARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib1fARB","GL_ARB_vertex_program");
	 fn(index1,x1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib1fvARB
#define GL_ALT_FUNDEF_VertexAttrib1fvARB
typedef void (*PFNGLVERTEXATTRIB1FVARBPROC_ALT)(GLuint,const GLfloat *);
static inline void glVertexAttrib1fvARB(GLuint index1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIB1FVARBPROC_ALT fn=(PFNGLVERTEXATTRIB1FVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib1fvARB","GL_ARB_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib1sARB
#define GL_ALT_FUNDEF_VertexAttrib1sARB
typedef void (*PFNGLVERTEXATTRIB1SARBPROC_ALT)(GLuint,GLshort);
static inline void glVertexAttrib1sARB(GLuint index1,GLshort x1)
{
	static PFNGLVERTEXATTRIB1SARBPROC_ALT fn=(PFNGLVERTEXATTRIB1SARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib1sARB","GL_ARB_vertex_program");
	 fn(index1,x1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib1svARB
#define GL_ALT_FUNDEF_VertexAttrib1svARB
typedef void (*PFNGLVERTEXATTRIB1SVARBPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttrib1svARB(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIB1SVARBPROC_ALT fn=(PFNGLVERTEXATTRIB1SVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib1svARB","GL_ARB_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib2dARB
#define GL_ALT_FUNDEF_VertexAttrib2dARB
typedef void (*PFNGLVERTEXATTRIB2DARBPROC_ALT)(GLuint,GLdouble,GLdouble);
static inline void glVertexAttrib2dARB(GLuint index1,GLdouble x1,GLdouble y1)
{
	static PFNGLVERTEXATTRIB2DARBPROC_ALT fn=(PFNGLVERTEXATTRIB2DARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib2dARB","GL_ARB_vertex_program");
	 fn(index1,x1,y1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib2dvARB
#define GL_ALT_FUNDEF_VertexAttrib2dvARB
typedef void (*PFNGLVERTEXATTRIB2DVARBPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttrib2dvARB(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIB2DVARBPROC_ALT fn=(PFNGLVERTEXATTRIB2DVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib2dvARB","GL_ARB_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib2fARB
#define GL_ALT_FUNDEF_VertexAttrib2fARB
typedef void (*PFNGLVERTEXATTRIB2FARBPROC_ALT)(GLuint,GLfloat,GLfloat);
static inline void glVertexAttrib2fARB(GLuint index1,GLfloat x1,GLfloat y1)
{
	static PFNGLVERTEXATTRIB2FARBPROC_ALT fn=(PFNGLVERTEXATTRIB2FARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib2fARB","GL_ARB_vertex_program");
	 fn(index1,x1,y1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib2fvARB
#define GL_ALT_FUNDEF_VertexAttrib2fvARB
typedef void (*PFNGLVERTEXATTRIB2FVARBPROC_ALT)(GLuint,const GLfloat *);
static inline void glVertexAttrib2fvARB(GLuint index1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIB2FVARBPROC_ALT fn=(PFNGLVERTEXATTRIB2FVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib2fvARB","GL_ARB_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib2sARB
#define GL_ALT_FUNDEF_VertexAttrib2sARB
typedef void (*PFNGLVERTEXATTRIB2SARBPROC_ALT)(GLuint,GLshort,GLshort);
static inline void glVertexAttrib2sARB(GLuint index1,GLshort x1,GLshort y1)
{
	static PFNGLVERTEXATTRIB2SARBPROC_ALT fn=(PFNGLVERTEXATTRIB2SARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib2sARB","GL_ARB_vertex_program");
	 fn(index1,x1,y1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib2svARB
#define GL_ALT_FUNDEF_VertexAttrib2svARB
typedef void (*PFNGLVERTEXATTRIB2SVARBPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttrib2svARB(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIB2SVARBPROC_ALT fn=(PFNGLVERTEXATTRIB2SVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib2svARB","GL_ARB_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib3dARB
#define GL_ALT_FUNDEF_VertexAttrib3dARB
typedef void (*PFNGLVERTEXATTRIB3DARBPROC_ALT)(GLuint,GLdouble,GLdouble,GLdouble);
static inline void glVertexAttrib3dARB(GLuint index1,GLdouble x1,GLdouble y1,GLdouble z1)
{
	static PFNGLVERTEXATTRIB3DARBPROC_ALT fn=(PFNGLVERTEXATTRIB3DARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib3dARB","GL_ARB_vertex_program");
	 fn(index1,x1,y1,z1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib3dvARB
#define GL_ALT_FUNDEF_VertexAttrib3dvARB
typedef void (*PFNGLVERTEXATTRIB3DVARBPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttrib3dvARB(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIB3DVARBPROC_ALT fn=(PFNGLVERTEXATTRIB3DVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib3dvARB","GL_ARB_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib3fARB
#define GL_ALT_FUNDEF_VertexAttrib3fARB
typedef void (*PFNGLVERTEXATTRIB3FARBPROC_ALT)(GLuint,GLfloat,GLfloat,GLfloat);
static inline void glVertexAttrib3fARB(GLuint index1,GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLVERTEXATTRIB3FARBPROC_ALT fn=(PFNGLVERTEXATTRIB3FARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib3fARB","GL_ARB_vertex_program");
	 fn(index1,x1,y1,z1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib3fvARB
#define GL_ALT_FUNDEF_VertexAttrib3fvARB
typedef void (*PFNGLVERTEXATTRIB3FVARBPROC_ALT)(GLuint,const GLfloat *);
static inline void glVertexAttrib3fvARB(GLuint index1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIB3FVARBPROC_ALT fn=(PFNGLVERTEXATTRIB3FVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib3fvARB","GL_ARB_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib3sARB
#define GL_ALT_FUNDEF_VertexAttrib3sARB
typedef void (*PFNGLVERTEXATTRIB3SARBPROC_ALT)(GLuint,GLshort,GLshort,GLshort);
static inline void glVertexAttrib3sARB(GLuint index1,GLshort x1,GLshort y1,GLshort z1)
{
	static PFNGLVERTEXATTRIB3SARBPROC_ALT fn=(PFNGLVERTEXATTRIB3SARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib3sARB","GL_ARB_vertex_program");
	 fn(index1,x1,y1,z1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib3svARB
#define GL_ALT_FUNDEF_VertexAttrib3svARB
typedef void (*PFNGLVERTEXATTRIB3SVARBPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttrib3svARB(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIB3SVARBPROC_ALT fn=(PFNGLVERTEXATTRIB3SVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib3svARB","GL_ARB_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4NbvARB
#define GL_ALT_FUNDEF_VertexAttrib4NbvARB
typedef void (*PFNGLVERTEXATTRIB4NBVARBPROC_ALT)(GLuint,const GLbyte *);
static inline void glVertexAttrib4NbvARB(GLuint index1,const GLbyte * v1)
{
	static PFNGLVERTEXATTRIB4NBVARBPROC_ALT fn=(PFNGLVERTEXATTRIB4NBVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4NbvARB","GL_ARB_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4NivARB
#define GL_ALT_FUNDEF_VertexAttrib4NivARB
typedef void (*PFNGLVERTEXATTRIB4NIVARBPROC_ALT)(GLuint,const GLint *);
static inline void glVertexAttrib4NivARB(GLuint index1,const GLint * v1)
{
	static PFNGLVERTEXATTRIB4NIVARBPROC_ALT fn=(PFNGLVERTEXATTRIB4NIVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4NivARB","GL_ARB_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4NsvARB
#define GL_ALT_FUNDEF_VertexAttrib4NsvARB
typedef void (*PFNGLVERTEXATTRIB4NSVARBPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttrib4NsvARB(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIB4NSVARBPROC_ALT fn=(PFNGLVERTEXATTRIB4NSVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4NsvARB","GL_ARB_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4NubARB
#define GL_ALT_FUNDEF_VertexAttrib4NubARB
typedef void (*PFNGLVERTEXATTRIB4NUBARBPROC_ALT)(GLuint,GLubyte,GLubyte,GLubyte,GLubyte);
static inline void glVertexAttrib4NubARB(GLuint index1,GLubyte x1,GLubyte y1,GLubyte z1,GLubyte w1)
{
	static PFNGLVERTEXATTRIB4NUBARBPROC_ALT fn=(PFNGLVERTEXATTRIB4NUBARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4NubARB","GL_ARB_vertex_program");
	 fn(index1,x1,y1,z1,w1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4NubvARB
#define GL_ALT_FUNDEF_VertexAttrib4NubvARB
typedef void (*PFNGLVERTEXATTRIB4NUBVARBPROC_ALT)(GLuint,const GLubyte *);
static inline void glVertexAttrib4NubvARB(GLuint index1,const GLubyte * v1)
{
	static PFNGLVERTEXATTRIB4NUBVARBPROC_ALT fn=(PFNGLVERTEXATTRIB4NUBVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4NubvARB","GL_ARB_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4NuivARB
#define GL_ALT_FUNDEF_VertexAttrib4NuivARB
typedef void (*PFNGLVERTEXATTRIB4NUIVARBPROC_ALT)(GLuint,const GLuint *);
static inline void glVertexAttrib4NuivARB(GLuint index1,const GLuint * v1)
{
	static PFNGLVERTEXATTRIB4NUIVARBPROC_ALT fn=(PFNGLVERTEXATTRIB4NUIVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4NuivARB","GL_ARB_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4NusvARB
#define GL_ALT_FUNDEF_VertexAttrib4NusvARB
typedef void (*PFNGLVERTEXATTRIB4NUSVARBPROC_ALT)(GLuint,const GLushort *);
static inline void glVertexAttrib4NusvARB(GLuint index1,const GLushort * v1)
{
	static PFNGLVERTEXATTRIB4NUSVARBPROC_ALT fn=(PFNGLVERTEXATTRIB4NUSVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4NusvARB","GL_ARB_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4bvARB
#define GL_ALT_FUNDEF_VertexAttrib4bvARB
typedef void (*PFNGLVERTEXATTRIB4BVARBPROC_ALT)(GLuint,const GLbyte *);
static inline void glVertexAttrib4bvARB(GLuint index1,const GLbyte * v1)
{
	static PFNGLVERTEXATTRIB4BVARBPROC_ALT fn=(PFNGLVERTEXATTRIB4BVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4bvARB","GL_ARB_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4dARB
#define GL_ALT_FUNDEF_VertexAttrib4dARB
typedef void (*PFNGLVERTEXATTRIB4DARBPROC_ALT)(GLuint,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void glVertexAttrib4dARB(GLuint index1,GLdouble x1,GLdouble y1,GLdouble z1,GLdouble w1)
{
	static PFNGLVERTEXATTRIB4DARBPROC_ALT fn=(PFNGLVERTEXATTRIB4DARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4dARB","GL_ARB_vertex_program");
	 fn(index1,x1,y1,z1,w1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4dvARB
#define GL_ALT_FUNDEF_VertexAttrib4dvARB
typedef void (*PFNGLVERTEXATTRIB4DVARBPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttrib4dvARB(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIB4DVARBPROC_ALT fn=(PFNGLVERTEXATTRIB4DVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4dvARB","GL_ARB_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4fARB
#define GL_ALT_FUNDEF_VertexAttrib4fARB
typedef void (*PFNGLVERTEXATTRIB4FARBPROC_ALT)(GLuint,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glVertexAttrib4fARB(GLuint index1,GLfloat x1,GLfloat y1,GLfloat z1,GLfloat w1)
{
	static PFNGLVERTEXATTRIB4FARBPROC_ALT fn=(PFNGLVERTEXATTRIB4FARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4fARB","GL_ARB_vertex_program");
	 fn(index1,x1,y1,z1,w1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4fvARB
#define GL_ALT_FUNDEF_VertexAttrib4fvARB
typedef void (*PFNGLVERTEXATTRIB4FVARBPROC_ALT)(GLuint,const GLfloat *);
static inline void glVertexAttrib4fvARB(GLuint index1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIB4FVARBPROC_ALT fn=(PFNGLVERTEXATTRIB4FVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4fvARB","GL_ARB_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4ivARB
#define GL_ALT_FUNDEF_VertexAttrib4ivARB
typedef void (*PFNGLVERTEXATTRIB4IVARBPROC_ALT)(GLuint,const GLint *);
static inline void glVertexAttrib4ivARB(GLuint index1,const GLint * v1)
{
	static PFNGLVERTEXATTRIB4IVARBPROC_ALT fn=(PFNGLVERTEXATTRIB4IVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4ivARB","GL_ARB_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4sARB
#define GL_ALT_FUNDEF_VertexAttrib4sARB
typedef void (*PFNGLVERTEXATTRIB4SARBPROC_ALT)(GLuint,GLshort,GLshort,GLshort,GLshort);
static inline void glVertexAttrib4sARB(GLuint index1,GLshort x1,GLshort y1,GLshort z1,GLshort w1)
{
	static PFNGLVERTEXATTRIB4SARBPROC_ALT fn=(PFNGLVERTEXATTRIB4SARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4sARB","GL_ARB_vertex_program");
	 fn(index1,x1,y1,z1,w1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4svARB
#define GL_ALT_FUNDEF_VertexAttrib4svARB
typedef void (*PFNGLVERTEXATTRIB4SVARBPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttrib4svARB(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIB4SVARBPROC_ALT fn=(PFNGLVERTEXATTRIB4SVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4svARB","GL_ARB_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4ubvARB
#define GL_ALT_FUNDEF_VertexAttrib4ubvARB
typedef void (*PFNGLVERTEXATTRIB4UBVARBPROC_ALT)(GLuint,const GLubyte *);
static inline void glVertexAttrib4ubvARB(GLuint index1,const GLubyte * v1)
{
	static PFNGLVERTEXATTRIB4UBVARBPROC_ALT fn=(PFNGLVERTEXATTRIB4UBVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4ubvARB","GL_ARB_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4uivARB
#define GL_ALT_FUNDEF_VertexAttrib4uivARB
typedef void (*PFNGLVERTEXATTRIB4UIVARBPROC_ALT)(GLuint,const GLuint *);
static inline void glVertexAttrib4uivARB(GLuint index1,const GLuint * v1)
{
	static PFNGLVERTEXATTRIB4UIVARBPROC_ALT fn=(PFNGLVERTEXATTRIB4UIVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4uivARB","GL_ARB_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4usvARB
#define GL_ALT_FUNDEF_VertexAttrib4usvARB
typedef void (*PFNGLVERTEXATTRIB4USVARBPROC_ALT)(GLuint,const GLushort *);
static inline void glVertexAttrib4usvARB(GLuint index1,const GLushort * v1)
{
	static PFNGLVERTEXATTRIB4USVARBPROC_ALT fn=(PFNGLVERTEXATTRIB4USVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4usvARB","GL_ARB_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribPointerARB
#define GL_ALT_FUNDEF_VertexAttribPointerARB
typedef void (*PFNGLVERTEXATTRIBPOINTERARBPROC_ALT)(GLuint,GLint,GLenum,GLboolean,GLsizei,const void *);
static inline void glVertexAttribPointerARB(GLuint index1,GLint size1,GLenum type1,GLboolean normalized1,GLsizei stride1,const void * pointer1)
{
	static PFNGLVERTEXATTRIBPOINTERARBPROC_ALT fn=(PFNGLVERTEXATTRIBPOINTERARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttribPointerARB","GL_ARB_vertex_program");
	 fn(index1,size1,type1,normalized1,stride1,pointer1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_ARB_vertex_shader
#define GL_ARB_vertex_shader
#ifndef GL_FLOAT
#define GL_FLOAT 0x1406
#endif //GL_FLOAT
#ifndef GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB 0x8622
#endif //GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
#ifndef GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
#define GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB 0x8623
#endif //GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
#ifndef GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB 0x8624
#endif //GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
#ifndef GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
#define GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB 0x8625
#endif //GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
#ifndef GL_CURRENT_VERTEX_ATTRIB_ARB
#define GL_CURRENT_VERTEX_ATTRIB_ARB 0x8626
#endif //GL_CURRENT_VERTEX_ATTRIB_ARB
#ifndef GL_VERTEX_PROGRAM_POINT_SIZE_ARB
#define GL_VERTEX_PROGRAM_POINT_SIZE_ARB 0x8642
#endif //GL_VERTEX_PROGRAM_POINT_SIZE_ARB
#ifndef GL_VERTEX_PROGRAM_TWO_SIDE_ARB
#define GL_VERTEX_PROGRAM_TWO_SIDE_ARB 0x8643
#endif //GL_VERTEX_PROGRAM_TWO_SIDE_ARB
#ifndef GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
#define GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB 0x8645
#endif //GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
#ifndef GL_MAX_VERTEX_ATTRIBS_ARB
#define GL_MAX_VERTEX_ATTRIBS_ARB 0x8869
#endif //GL_MAX_VERTEX_ATTRIBS_ARB
#ifndef GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB 0x886A
#endif //GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
#ifndef GL_MAX_TEXTURE_COORDS_ARB
#define GL_MAX_TEXTURE_COORDS_ARB 0x8871
#endif //GL_MAX_TEXTURE_COORDS_ARB
#ifndef GL_MAX_TEXTURE_IMAGE_UNITS_ARB
#define GL_MAX_TEXTURE_IMAGE_UNITS_ARB 0x8872
#endif //GL_MAX_TEXTURE_IMAGE_UNITS_ARB
#ifndef GL_VERTEX_SHADER_ARB
#define GL_VERTEX_SHADER_ARB 0x8B31
#endif //GL_VERTEX_SHADER_ARB
#ifndef GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB 0x8B4A
#endif //GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
#ifndef GL_MAX_VARYING_FLOATS_ARB
#define GL_MAX_VARYING_FLOATS_ARB 0x8B4B
#endif //GL_MAX_VARYING_FLOATS_ARB
#ifndef GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB 0x8B4C
#endif //GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
#ifndef GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB 0x8B4D
#endif //GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB
#ifndef GL_FLOAT_VEC2_ARB
#define GL_FLOAT_VEC2_ARB 0x8B50
#endif //GL_FLOAT_VEC2_ARB
#ifndef GL_FLOAT_VEC3_ARB
#define GL_FLOAT_VEC3_ARB 0x8B51
#endif //GL_FLOAT_VEC3_ARB
#ifndef GL_FLOAT_VEC4_ARB
#define GL_FLOAT_VEC4_ARB 0x8B52
#endif //GL_FLOAT_VEC4_ARB
#ifndef GL_FLOAT_MAT2_ARB
#define GL_FLOAT_MAT2_ARB 0x8B5A
#endif //GL_FLOAT_MAT2_ARB
#ifndef GL_FLOAT_MAT3_ARB
#define GL_FLOAT_MAT3_ARB 0x8B5B
#endif //GL_FLOAT_MAT3_ARB
#ifndef GL_FLOAT_MAT4_ARB
#define GL_FLOAT_MAT4_ARB 0x8B5C
#endif //GL_FLOAT_MAT4_ARB
#ifndef GL_OBJECT_ACTIVE_ATTRIBUTES_ARB
#define GL_OBJECT_ACTIVE_ATTRIBUTES_ARB 0x8B89
#endif //GL_OBJECT_ACTIVE_ATTRIBUTES_ARB
#ifndef GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB
#define GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB 0x8B8A
#endif //GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BindAttribLocationARB
#define GL_ALT_FUNDEF_BindAttribLocationARB
typedef void (*PFNGLBINDATTRIBLOCATIONARBPROC_ALT)(GLhandleARB,GLuint,const GLcharARB *);
static inline void glBindAttribLocationARB(GLhandleARB programObj1,GLuint index1,const GLcharARB * name1)
{
	static PFNGLBINDATTRIBLOCATIONARBPROC_ALT fn=(PFNGLBINDATTRIBLOCATIONARBPROC_ALT)glaltGetProcAddressExtension("glBindAttribLocationARB","GL_ARB_vertex_shader");
	 fn(programObj1,index1,name1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_DisableVertexAttribArrayARB
#define GL_ALT_FUNDEF_DisableVertexAttribArrayARB
typedef void (*PFNGLDISABLEVERTEXATTRIBARRAYARBPROC_ALT)(GLuint);
static inline void glDisableVertexAttribArrayARB(GLuint index1)
{
	static PFNGLDISABLEVERTEXATTRIBARRAYARBPROC_ALT fn=(PFNGLDISABLEVERTEXATTRIBARRAYARBPROC_ALT)glaltGetProcAddressExtension("glDisableVertexAttribArrayARB","GL_ARB_vertex_shader");
	 fn(index1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_EnableVertexAttribArrayARB
#define GL_ALT_FUNDEF_EnableVertexAttribArrayARB
typedef void (*PFNGLENABLEVERTEXATTRIBARRAYARBPROC_ALT)(GLuint);
static inline void glEnableVertexAttribArrayARB(GLuint index1)
{
	static PFNGLENABLEVERTEXATTRIBARRAYARBPROC_ALT fn=(PFNGLENABLEVERTEXATTRIBARRAYARBPROC_ALT)glaltGetProcAddressExtension("glEnableVertexAttribArrayARB","GL_ARB_vertex_shader");
	 fn(index1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetActiveAttribARB
#define GL_ALT_FUNDEF_GetActiveAttribARB
typedef void (*PFNGLGETACTIVEATTRIBARBPROC_ALT)(GLhandleARB,GLuint,GLsizei,GLsizei *,GLint *,GLenum *,GLcharARB *);
static inline void glGetActiveAttribARB(GLhandleARB programObj1,GLuint index1,GLsizei maxLength1,GLsizei * length1,GLint * size1,GLenum * type1,GLcharARB * name1)
{
	static PFNGLGETACTIVEATTRIBARBPROC_ALT fn=(PFNGLGETACTIVEATTRIBARBPROC_ALT)glaltGetProcAddressExtension("glGetActiveAttribARB","GL_ARB_vertex_shader");
	 fn(programObj1,index1,maxLength1,length1,size1,type1,name1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetAttribLocationARB
#define GL_ALT_FUNDEF_GetAttribLocationARB
typedef GLint (*PFNGLGETATTRIBLOCATIONARBPROC_ALT)(GLhandleARB,const GLcharARB *);
static inline GLint glGetAttribLocationARB(GLhandleARB programObj1,const GLcharARB * name1)
{
	static PFNGLGETATTRIBLOCATIONARBPROC_ALT fn=(PFNGLGETATTRIBLOCATIONARBPROC_ALT)glaltGetProcAddressExtension("glGetAttribLocationARB","GL_ARB_vertex_shader");
	return fn(programObj1,name1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetVertexAttribPointervARB
#define GL_ALT_FUNDEF_GetVertexAttribPointervARB
typedef void (*PFNGLGETVERTEXATTRIBPOINTERVARBPROC_ALT)(GLuint,GLenum,void **);
static inline void glGetVertexAttribPointervARB(GLuint index1,GLenum pname1,void ** pointer1)
{
	static PFNGLGETVERTEXATTRIBPOINTERVARBPROC_ALT fn=(PFNGLGETVERTEXATTRIBPOINTERVARBPROC_ALT)glaltGetProcAddressExtension("glGetVertexAttribPointervARB","GL_ARB_vertex_shader");
	 fn(index1,pname1,pointer1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetVertexAttribdvARB
#define GL_ALT_FUNDEF_GetVertexAttribdvARB
typedef void (*PFNGLGETVERTEXATTRIBDVARBPROC_ALT)(GLuint,GLenum,GLdouble *);
static inline void glGetVertexAttribdvARB(GLuint index1,GLenum pname1,GLdouble * params1)
{
	static PFNGLGETVERTEXATTRIBDVARBPROC_ALT fn=(PFNGLGETVERTEXATTRIBDVARBPROC_ALT)glaltGetProcAddressExtension("glGetVertexAttribdvARB","GL_ARB_vertex_shader");
	 fn(index1,pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetVertexAttribfvARB
#define GL_ALT_FUNDEF_GetVertexAttribfvARB
typedef void (*PFNGLGETVERTEXATTRIBFVARBPROC_ALT)(GLuint,GLenum,GLfloat *);
static inline void glGetVertexAttribfvARB(GLuint index1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETVERTEXATTRIBFVARBPROC_ALT fn=(PFNGLGETVERTEXATTRIBFVARBPROC_ALT)glaltGetProcAddressExtension("glGetVertexAttribfvARB","GL_ARB_vertex_shader");
	 fn(index1,pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetVertexAttribivARB
#define GL_ALT_FUNDEF_GetVertexAttribivARB
typedef void (*PFNGLGETVERTEXATTRIBIVARBPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetVertexAttribivARB(GLuint index1,GLenum pname1,GLint * params1)
{
	static PFNGLGETVERTEXATTRIBIVARBPROC_ALT fn=(PFNGLGETVERTEXATTRIBIVARBPROC_ALT)glaltGetProcAddressExtension("glGetVertexAttribivARB","GL_ARB_vertex_shader");
	 fn(index1,pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib1dARB
#define GL_ALT_FUNDEF_VertexAttrib1dARB
typedef void (*PFNGLVERTEXATTRIB1DARBPROC_ALT)(GLuint,GLdouble);
static inline void glVertexAttrib1dARB(GLuint index1,GLdouble x1)
{
	static PFNGLVERTEXATTRIB1DARBPROC_ALT fn=(PFNGLVERTEXATTRIB1DARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib1dARB","GL_ARB_vertex_shader");
	 fn(index1,x1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib1dvARB
#define GL_ALT_FUNDEF_VertexAttrib1dvARB
typedef void (*PFNGLVERTEXATTRIB1DVARBPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttrib1dvARB(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIB1DVARBPROC_ALT fn=(PFNGLVERTEXATTRIB1DVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib1dvARB","GL_ARB_vertex_shader");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib1fARB
#define GL_ALT_FUNDEF_VertexAttrib1fARB
typedef void (*PFNGLVERTEXATTRIB1FARBPROC_ALT)(GLuint,GLfloat);
static inline void glVertexAttrib1fARB(GLuint index1,GLfloat x1)
{
	static PFNGLVERTEXATTRIB1FARBPROC_ALT fn=(PFNGLVERTEXATTRIB1FARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib1fARB","GL_ARB_vertex_shader");
	 fn(index1,x1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib1fvARB
#define GL_ALT_FUNDEF_VertexAttrib1fvARB
typedef void (*PFNGLVERTEXATTRIB1FVARBPROC_ALT)(GLuint,const GLfloat *);
static inline void glVertexAttrib1fvARB(GLuint index1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIB1FVARBPROC_ALT fn=(PFNGLVERTEXATTRIB1FVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib1fvARB","GL_ARB_vertex_shader");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib1sARB
#define GL_ALT_FUNDEF_VertexAttrib1sARB
typedef void (*PFNGLVERTEXATTRIB1SARBPROC_ALT)(GLuint,GLshort);
static inline void glVertexAttrib1sARB(GLuint index1,GLshort x1)
{
	static PFNGLVERTEXATTRIB1SARBPROC_ALT fn=(PFNGLVERTEXATTRIB1SARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib1sARB","GL_ARB_vertex_shader");
	 fn(index1,x1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib1svARB
#define GL_ALT_FUNDEF_VertexAttrib1svARB
typedef void (*PFNGLVERTEXATTRIB1SVARBPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttrib1svARB(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIB1SVARBPROC_ALT fn=(PFNGLVERTEXATTRIB1SVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib1svARB","GL_ARB_vertex_shader");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib2dARB
#define GL_ALT_FUNDEF_VertexAttrib2dARB
typedef void (*PFNGLVERTEXATTRIB2DARBPROC_ALT)(GLuint,GLdouble,GLdouble);
static inline void glVertexAttrib2dARB(GLuint index1,GLdouble x1,GLdouble y1)
{
	static PFNGLVERTEXATTRIB2DARBPROC_ALT fn=(PFNGLVERTEXATTRIB2DARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib2dARB","GL_ARB_vertex_shader");
	 fn(index1,x1,y1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib2dvARB
#define GL_ALT_FUNDEF_VertexAttrib2dvARB
typedef void (*PFNGLVERTEXATTRIB2DVARBPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttrib2dvARB(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIB2DVARBPROC_ALT fn=(PFNGLVERTEXATTRIB2DVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib2dvARB","GL_ARB_vertex_shader");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib2fARB
#define GL_ALT_FUNDEF_VertexAttrib2fARB
typedef void (*PFNGLVERTEXATTRIB2FARBPROC_ALT)(GLuint,GLfloat,GLfloat);
static inline void glVertexAttrib2fARB(GLuint index1,GLfloat x1,GLfloat y1)
{
	static PFNGLVERTEXATTRIB2FARBPROC_ALT fn=(PFNGLVERTEXATTRIB2FARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib2fARB","GL_ARB_vertex_shader");
	 fn(index1,x1,y1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib2fvARB
#define GL_ALT_FUNDEF_VertexAttrib2fvARB
typedef void (*PFNGLVERTEXATTRIB2FVARBPROC_ALT)(GLuint,const GLfloat *);
static inline void glVertexAttrib2fvARB(GLuint index1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIB2FVARBPROC_ALT fn=(PFNGLVERTEXATTRIB2FVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib2fvARB","GL_ARB_vertex_shader");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib2sARB
#define GL_ALT_FUNDEF_VertexAttrib2sARB
typedef void (*PFNGLVERTEXATTRIB2SARBPROC_ALT)(GLuint,GLshort,GLshort);
static inline void glVertexAttrib2sARB(GLuint index1,GLshort x1,GLshort y1)
{
	static PFNGLVERTEXATTRIB2SARBPROC_ALT fn=(PFNGLVERTEXATTRIB2SARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib2sARB","GL_ARB_vertex_shader");
	 fn(index1,x1,y1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib2svARB
#define GL_ALT_FUNDEF_VertexAttrib2svARB
typedef void (*PFNGLVERTEXATTRIB2SVARBPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttrib2svARB(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIB2SVARBPROC_ALT fn=(PFNGLVERTEXATTRIB2SVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib2svARB","GL_ARB_vertex_shader");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib3dARB
#define GL_ALT_FUNDEF_VertexAttrib3dARB
typedef void (*PFNGLVERTEXATTRIB3DARBPROC_ALT)(GLuint,GLdouble,GLdouble,GLdouble);
static inline void glVertexAttrib3dARB(GLuint index1,GLdouble x1,GLdouble y1,GLdouble z1)
{
	static PFNGLVERTEXATTRIB3DARBPROC_ALT fn=(PFNGLVERTEXATTRIB3DARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib3dARB","GL_ARB_vertex_shader");
	 fn(index1,x1,y1,z1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib3dvARB
#define GL_ALT_FUNDEF_VertexAttrib3dvARB
typedef void (*PFNGLVERTEXATTRIB3DVARBPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttrib3dvARB(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIB3DVARBPROC_ALT fn=(PFNGLVERTEXATTRIB3DVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib3dvARB","GL_ARB_vertex_shader");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib3fARB
#define GL_ALT_FUNDEF_VertexAttrib3fARB
typedef void (*PFNGLVERTEXATTRIB3FARBPROC_ALT)(GLuint,GLfloat,GLfloat,GLfloat);
static inline void glVertexAttrib3fARB(GLuint index1,GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLVERTEXATTRIB3FARBPROC_ALT fn=(PFNGLVERTEXATTRIB3FARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib3fARB","GL_ARB_vertex_shader");
	 fn(index1,x1,y1,z1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib3fvARB
#define GL_ALT_FUNDEF_VertexAttrib3fvARB
typedef void (*PFNGLVERTEXATTRIB3FVARBPROC_ALT)(GLuint,const GLfloat *);
static inline void glVertexAttrib3fvARB(GLuint index1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIB3FVARBPROC_ALT fn=(PFNGLVERTEXATTRIB3FVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib3fvARB","GL_ARB_vertex_shader");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib3sARB
#define GL_ALT_FUNDEF_VertexAttrib3sARB
typedef void (*PFNGLVERTEXATTRIB3SARBPROC_ALT)(GLuint,GLshort,GLshort,GLshort);
static inline void glVertexAttrib3sARB(GLuint index1,GLshort x1,GLshort y1,GLshort z1)
{
	static PFNGLVERTEXATTRIB3SARBPROC_ALT fn=(PFNGLVERTEXATTRIB3SARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib3sARB","GL_ARB_vertex_shader");
	 fn(index1,x1,y1,z1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib3svARB
#define GL_ALT_FUNDEF_VertexAttrib3svARB
typedef void (*PFNGLVERTEXATTRIB3SVARBPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttrib3svARB(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIB3SVARBPROC_ALT fn=(PFNGLVERTEXATTRIB3SVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib3svARB","GL_ARB_vertex_shader");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4NbvARB
#define GL_ALT_FUNDEF_VertexAttrib4NbvARB
typedef void (*PFNGLVERTEXATTRIB4NBVARBPROC_ALT)(GLuint,const GLbyte *);
static inline void glVertexAttrib4NbvARB(GLuint index1,const GLbyte * v1)
{
	static PFNGLVERTEXATTRIB4NBVARBPROC_ALT fn=(PFNGLVERTEXATTRIB4NBVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4NbvARB","GL_ARB_vertex_shader");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4NivARB
#define GL_ALT_FUNDEF_VertexAttrib4NivARB
typedef void (*PFNGLVERTEXATTRIB4NIVARBPROC_ALT)(GLuint,const GLint *);
static inline void glVertexAttrib4NivARB(GLuint index1,const GLint * v1)
{
	static PFNGLVERTEXATTRIB4NIVARBPROC_ALT fn=(PFNGLVERTEXATTRIB4NIVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4NivARB","GL_ARB_vertex_shader");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4NsvARB
#define GL_ALT_FUNDEF_VertexAttrib4NsvARB
typedef void (*PFNGLVERTEXATTRIB4NSVARBPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttrib4NsvARB(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIB4NSVARBPROC_ALT fn=(PFNGLVERTEXATTRIB4NSVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4NsvARB","GL_ARB_vertex_shader");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4NubARB
#define GL_ALT_FUNDEF_VertexAttrib4NubARB
typedef void (*PFNGLVERTEXATTRIB4NUBARBPROC_ALT)(GLuint,GLubyte,GLubyte,GLubyte,GLubyte);
static inline void glVertexAttrib4NubARB(GLuint index1,GLubyte x1,GLubyte y1,GLubyte z1,GLubyte w1)
{
	static PFNGLVERTEXATTRIB4NUBARBPROC_ALT fn=(PFNGLVERTEXATTRIB4NUBARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4NubARB","GL_ARB_vertex_shader");
	 fn(index1,x1,y1,z1,w1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4NubvARB
#define GL_ALT_FUNDEF_VertexAttrib4NubvARB
typedef void (*PFNGLVERTEXATTRIB4NUBVARBPROC_ALT)(GLuint,const GLubyte *);
static inline void glVertexAttrib4NubvARB(GLuint index1,const GLubyte * v1)
{
	static PFNGLVERTEXATTRIB4NUBVARBPROC_ALT fn=(PFNGLVERTEXATTRIB4NUBVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4NubvARB","GL_ARB_vertex_shader");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4NuivARB
#define GL_ALT_FUNDEF_VertexAttrib4NuivARB
typedef void (*PFNGLVERTEXATTRIB4NUIVARBPROC_ALT)(GLuint,const GLuint *);
static inline void glVertexAttrib4NuivARB(GLuint index1,const GLuint * v1)
{
	static PFNGLVERTEXATTRIB4NUIVARBPROC_ALT fn=(PFNGLVERTEXATTRIB4NUIVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4NuivARB","GL_ARB_vertex_shader");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4NusvARB
#define GL_ALT_FUNDEF_VertexAttrib4NusvARB
typedef void (*PFNGLVERTEXATTRIB4NUSVARBPROC_ALT)(GLuint,const GLushort *);
static inline void glVertexAttrib4NusvARB(GLuint index1,const GLushort * v1)
{
	static PFNGLVERTEXATTRIB4NUSVARBPROC_ALT fn=(PFNGLVERTEXATTRIB4NUSVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4NusvARB","GL_ARB_vertex_shader");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4bvARB
#define GL_ALT_FUNDEF_VertexAttrib4bvARB
typedef void (*PFNGLVERTEXATTRIB4BVARBPROC_ALT)(GLuint,const GLbyte *);
static inline void glVertexAttrib4bvARB(GLuint index1,const GLbyte * v1)
{
	static PFNGLVERTEXATTRIB4BVARBPROC_ALT fn=(PFNGLVERTEXATTRIB4BVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4bvARB","GL_ARB_vertex_shader");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4dARB
#define GL_ALT_FUNDEF_VertexAttrib4dARB
typedef void (*PFNGLVERTEXATTRIB4DARBPROC_ALT)(GLuint,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void glVertexAttrib4dARB(GLuint index1,GLdouble x1,GLdouble y1,GLdouble z1,GLdouble w1)
{
	static PFNGLVERTEXATTRIB4DARBPROC_ALT fn=(PFNGLVERTEXATTRIB4DARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4dARB","GL_ARB_vertex_shader");
	 fn(index1,x1,y1,z1,w1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4dvARB
#define GL_ALT_FUNDEF_VertexAttrib4dvARB
typedef void (*PFNGLVERTEXATTRIB4DVARBPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttrib4dvARB(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIB4DVARBPROC_ALT fn=(PFNGLVERTEXATTRIB4DVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4dvARB","GL_ARB_vertex_shader");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4fARB
#define GL_ALT_FUNDEF_VertexAttrib4fARB
typedef void (*PFNGLVERTEXATTRIB4FARBPROC_ALT)(GLuint,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glVertexAttrib4fARB(GLuint index1,GLfloat x1,GLfloat y1,GLfloat z1,GLfloat w1)
{
	static PFNGLVERTEXATTRIB4FARBPROC_ALT fn=(PFNGLVERTEXATTRIB4FARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4fARB","GL_ARB_vertex_shader");
	 fn(index1,x1,y1,z1,w1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4fvARB
#define GL_ALT_FUNDEF_VertexAttrib4fvARB
typedef void (*PFNGLVERTEXATTRIB4FVARBPROC_ALT)(GLuint,const GLfloat *);
static inline void glVertexAttrib4fvARB(GLuint index1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIB4FVARBPROC_ALT fn=(PFNGLVERTEXATTRIB4FVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4fvARB","GL_ARB_vertex_shader");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4ivARB
#define GL_ALT_FUNDEF_VertexAttrib4ivARB
typedef void (*PFNGLVERTEXATTRIB4IVARBPROC_ALT)(GLuint,const GLint *);
static inline void glVertexAttrib4ivARB(GLuint index1,const GLint * v1)
{
	static PFNGLVERTEXATTRIB4IVARBPROC_ALT fn=(PFNGLVERTEXATTRIB4IVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4ivARB","GL_ARB_vertex_shader");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4sARB
#define GL_ALT_FUNDEF_VertexAttrib4sARB
typedef void (*PFNGLVERTEXATTRIB4SARBPROC_ALT)(GLuint,GLshort,GLshort,GLshort,GLshort);
static inline void glVertexAttrib4sARB(GLuint index1,GLshort x1,GLshort y1,GLshort z1,GLshort w1)
{
	static PFNGLVERTEXATTRIB4SARBPROC_ALT fn=(PFNGLVERTEXATTRIB4SARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4sARB","GL_ARB_vertex_shader");
	 fn(index1,x1,y1,z1,w1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4svARB
#define GL_ALT_FUNDEF_VertexAttrib4svARB
typedef void (*PFNGLVERTEXATTRIB4SVARBPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttrib4svARB(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIB4SVARBPROC_ALT fn=(PFNGLVERTEXATTRIB4SVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4svARB","GL_ARB_vertex_shader");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4ubvARB
#define GL_ALT_FUNDEF_VertexAttrib4ubvARB
typedef void (*PFNGLVERTEXATTRIB4UBVARBPROC_ALT)(GLuint,const GLubyte *);
static inline void glVertexAttrib4ubvARB(GLuint index1,const GLubyte * v1)
{
	static PFNGLVERTEXATTRIB4UBVARBPROC_ALT fn=(PFNGLVERTEXATTRIB4UBVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4ubvARB","GL_ARB_vertex_shader");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4uivARB
#define GL_ALT_FUNDEF_VertexAttrib4uivARB
typedef void (*PFNGLVERTEXATTRIB4UIVARBPROC_ALT)(GLuint,const GLuint *);
static inline void glVertexAttrib4uivARB(GLuint index1,const GLuint * v1)
{
	static PFNGLVERTEXATTRIB4UIVARBPROC_ALT fn=(PFNGLVERTEXATTRIB4UIVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4uivARB","GL_ARB_vertex_shader");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4usvARB
#define GL_ALT_FUNDEF_VertexAttrib4usvARB
typedef void (*PFNGLVERTEXATTRIB4USVARBPROC_ALT)(GLuint,const GLushort *);
static inline void glVertexAttrib4usvARB(GLuint index1,const GLushort * v1)
{
	static PFNGLVERTEXATTRIB4USVARBPROC_ALT fn=(PFNGLVERTEXATTRIB4USVARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4usvARB","GL_ARB_vertex_shader");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribPointerARB
#define GL_ALT_FUNDEF_VertexAttribPointerARB
typedef void (*PFNGLVERTEXATTRIBPOINTERARBPROC_ALT)(GLuint,GLint,GLenum,GLboolean,GLsizei,const void *);
static inline void glVertexAttribPointerARB(GLuint index1,GLint size1,GLenum type1,GLboolean normalized1,GLsizei stride1,const void * pointer1)
{
	static PFNGLVERTEXATTRIBPOINTERARBPROC_ALT fn=(PFNGLVERTEXATTRIBPOINTERARBPROC_ALT)glaltGetProcAddressExtension("glVertexAttribPointerARB","GL_ARB_vertex_shader");
	 fn(index1,size1,type1,normalized1,stride1,pointer1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_ARB_vertex_type_10f_11f_11f_rev
#define GL_ARB_vertex_type_10f_11f_11f_rev
#ifndef GL_UNSIGNED_INT_10F_11F_11F_REV
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#endif //GL_UNSIGNED_INT_10F_11F_11F_REV
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ARB_vertex_type_2_10_10_10_rev
#define GL_ARB_vertex_type_2_10_10_10_rev
#ifndef GL_UNSIGNED_INT_2_10_10_10_REV
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#endif //GL_UNSIGNED_INT_2_10_10_10_REV
#ifndef GL_INT_2_10_10_10_REV
#define GL_INT_2_10_10_10_REV 0x8D9F
#endif //GL_INT_2_10_10_10_REV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_VertexAttribP1ui
#define GL_ALT_FUNDEF_VertexAttribP1ui
typedef void (*PFNGLVERTEXATTRIBP1UIPROC_ALT)(GLuint,GLenum,GLboolean,GLuint);
static inline void glVertexAttribP1ui(GLuint index1,GLenum type1,GLboolean normalized1,GLuint value1)
{
	static PFNGLVERTEXATTRIBP1UIPROC_ALT fn=(PFNGLVERTEXATTRIBP1UIPROC_ALT)glaltGetProcAddressExtension("glVertexAttribP1ui","GL_ARB_vertex_type_2_10_10_10_rev");
	 fn(index1,type1,normalized1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribP1uiv
#define GL_ALT_FUNDEF_VertexAttribP1uiv
typedef void (*PFNGLVERTEXATTRIBP1UIVPROC_ALT)(GLuint,GLenum,GLboolean,const GLuint *);
static inline void glVertexAttribP1uiv(GLuint index1,GLenum type1,GLboolean normalized1,const GLuint * value1)
{
	static PFNGLVERTEXATTRIBP1UIVPROC_ALT fn=(PFNGLVERTEXATTRIBP1UIVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribP1uiv","GL_ARB_vertex_type_2_10_10_10_rev");
	 fn(index1,type1,normalized1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribP2ui
#define GL_ALT_FUNDEF_VertexAttribP2ui
typedef void (*PFNGLVERTEXATTRIBP2UIPROC_ALT)(GLuint,GLenum,GLboolean,GLuint);
static inline void glVertexAttribP2ui(GLuint index1,GLenum type1,GLboolean normalized1,GLuint value1)
{
	static PFNGLVERTEXATTRIBP2UIPROC_ALT fn=(PFNGLVERTEXATTRIBP2UIPROC_ALT)glaltGetProcAddressExtension("glVertexAttribP2ui","GL_ARB_vertex_type_2_10_10_10_rev");
	 fn(index1,type1,normalized1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribP2uiv
#define GL_ALT_FUNDEF_VertexAttribP2uiv
typedef void (*PFNGLVERTEXATTRIBP2UIVPROC_ALT)(GLuint,GLenum,GLboolean,const GLuint *);
static inline void glVertexAttribP2uiv(GLuint index1,GLenum type1,GLboolean normalized1,const GLuint * value1)
{
	static PFNGLVERTEXATTRIBP2UIVPROC_ALT fn=(PFNGLVERTEXATTRIBP2UIVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribP2uiv","GL_ARB_vertex_type_2_10_10_10_rev");
	 fn(index1,type1,normalized1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribP3ui
#define GL_ALT_FUNDEF_VertexAttribP3ui
typedef void (*PFNGLVERTEXATTRIBP3UIPROC_ALT)(GLuint,GLenum,GLboolean,GLuint);
static inline void glVertexAttribP3ui(GLuint index1,GLenum type1,GLboolean normalized1,GLuint value1)
{
	static PFNGLVERTEXATTRIBP3UIPROC_ALT fn=(PFNGLVERTEXATTRIBP3UIPROC_ALT)glaltGetProcAddressExtension("glVertexAttribP3ui","GL_ARB_vertex_type_2_10_10_10_rev");
	 fn(index1,type1,normalized1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribP3uiv
#define GL_ALT_FUNDEF_VertexAttribP3uiv
typedef void (*PFNGLVERTEXATTRIBP3UIVPROC_ALT)(GLuint,GLenum,GLboolean,const GLuint *);
static inline void glVertexAttribP3uiv(GLuint index1,GLenum type1,GLboolean normalized1,const GLuint * value1)
{
	static PFNGLVERTEXATTRIBP3UIVPROC_ALT fn=(PFNGLVERTEXATTRIBP3UIVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribP3uiv","GL_ARB_vertex_type_2_10_10_10_rev");
	 fn(index1,type1,normalized1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribP4ui
#define GL_ALT_FUNDEF_VertexAttribP4ui
typedef void (*PFNGLVERTEXATTRIBP4UIPROC_ALT)(GLuint,GLenum,GLboolean,GLuint);
static inline void glVertexAttribP4ui(GLuint index1,GLenum type1,GLboolean normalized1,GLuint value1)
{
	static PFNGLVERTEXATTRIBP4UIPROC_ALT fn=(PFNGLVERTEXATTRIBP4UIPROC_ALT)glaltGetProcAddressExtension("glVertexAttribP4ui","GL_ARB_vertex_type_2_10_10_10_rev");
	 fn(index1,type1,normalized1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribP4uiv
#define GL_ALT_FUNDEF_VertexAttribP4uiv
typedef void (*PFNGLVERTEXATTRIBP4UIVPROC_ALT)(GLuint,GLenum,GLboolean,const GLuint *);
static inline void glVertexAttribP4uiv(GLuint index1,GLenum type1,GLboolean normalized1,const GLuint * value1)
{
	static PFNGLVERTEXATTRIBP4UIVPROC_ALT fn=(PFNGLVERTEXATTRIBP4UIVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribP4uiv","GL_ARB_vertex_type_2_10_10_10_rev");
	 fn(index1,type1,normalized1,value1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_viewport_array
#define GL_ARB_viewport_array
#ifndef GL_DEPTH_RANGE
#define GL_DEPTH_RANGE 0x0B70
#endif //GL_DEPTH_RANGE
#ifndef GL_VIEWPORT
#define GL_VIEWPORT 0x0BA2
#endif //GL_VIEWPORT
#ifndef GL_SCISSOR_BOX
#define GL_SCISSOR_BOX 0x0C10
#endif //GL_SCISSOR_BOX
#ifndef GL_SCISSOR_TEST
#define GL_SCISSOR_TEST 0x0C11
#endif //GL_SCISSOR_TEST
#ifndef GL_MAX_VIEWPORTS
#define GL_MAX_VIEWPORTS 0x825B
#endif //GL_MAX_VIEWPORTS
#ifndef GL_VIEWPORT_SUBPIXEL_BITS
#define GL_VIEWPORT_SUBPIXEL_BITS 0x825C
#endif //GL_VIEWPORT_SUBPIXEL_BITS
#ifndef GL_VIEWPORT_BOUNDS_RANGE
#define GL_VIEWPORT_BOUNDS_RANGE 0x825D
#endif //GL_VIEWPORT_BOUNDS_RANGE
#ifndef GL_LAYER_PROVOKING_VERTEX
#define GL_LAYER_PROVOKING_VERTEX 0x825E
#endif //GL_LAYER_PROVOKING_VERTEX
#ifndef GL_VIEWPORT_INDEX_PROVOKING_VERTEX
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
#endif //GL_VIEWPORT_INDEX_PROVOKING_VERTEX
#ifndef GL_UNDEFINED_VERTEX
#define GL_UNDEFINED_VERTEX 0x8260
#endif //GL_UNDEFINED_VERTEX
#ifndef GL_FIRST_VERTEX_CONVENTION
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#endif //GL_FIRST_VERTEX_CONVENTION
#ifndef GL_LAST_VERTEX_CONVENTION
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#endif //GL_LAST_VERTEX_CONVENTION
#ifndef GL_PROVOKING_VERTEX
#define GL_PROVOKING_VERTEX 0x8E4F
#endif //GL_PROVOKING_VERTEX
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_DepthRangeArrayv
#define GL_ALT_FUNDEF_DepthRangeArrayv
typedef void (*PFNGLDEPTHRANGEARRAYVPROC_ALT)(GLuint,GLsizei,const GLdouble *);
static inline void glDepthRangeArrayv(GLuint first1,GLsizei count1,const GLdouble * v1)
{
	static PFNGLDEPTHRANGEARRAYVPROC_ALT fn=(PFNGLDEPTHRANGEARRAYVPROC_ALT)glaltGetProcAddressExtension("glDepthRangeArrayv","GL_ARB_viewport_array");
	 fn(first1,count1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DepthRangeIndexed
#define GL_ALT_FUNDEF_DepthRangeIndexed
typedef void (*PFNGLDEPTHRANGEINDEXEDPROC_ALT)(GLuint,GLdouble,GLdouble);
static inline void glDepthRangeIndexed(GLuint index1,GLdouble n1,GLdouble f1)
{
	static PFNGLDEPTHRANGEINDEXEDPROC_ALT fn=(PFNGLDEPTHRANGEINDEXEDPROC_ALT)glaltGetProcAddressExtension("glDepthRangeIndexed","GL_ARB_viewport_array");
	 fn(index1,n1,f1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetDoublei_v
#define GL_ALT_FUNDEF_GetDoublei_v
typedef void (*PFNGLGETDOUBLEI_VPROC_ALT)(GLenum,GLuint,GLdouble *);
static inline void glGetDoublei_v(GLenum target1,GLuint index1,GLdouble * data1)
{
	static PFNGLGETDOUBLEI_VPROC_ALT fn=(PFNGLGETDOUBLEI_VPROC_ALT)glaltGetProcAddressExtension("glGetDoublei_v","GL_ARB_viewport_array");
	 fn(target1,index1,data1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetFloati_v
#define GL_ALT_FUNDEF_GetFloati_v
typedef void (*PFNGLGETFLOATI_VPROC_ALT)(GLenum,GLuint,GLfloat *);
static inline void glGetFloati_v(GLenum target1,GLuint index1,GLfloat * data1)
{
	static PFNGLGETFLOATI_VPROC_ALT fn=(PFNGLGETFLOATI_VPROC_ALT)glaltGetProcAddressExtension("glGetFloati_v","GL_ARB_viewport_array");
	 fn(target1,index1,data1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ScissorArrayv
#define GL_ALT_FUNDEF_ScissorArrayv
typedef void (*PFNGLSCISSORARRAYVPROC_ALT)(GLuint,GLsizei,const GLint *);
static inline void glScissorArrayv(GLuint first1,GLsizei count1,const GLint * v1)
{
	static PFNGLSCISSORARRAYVPROC_ALT fn=(PFNGLSCISSORARRAYVPROC_ALT)glaltGetProcAddressExtension("glScissorArrayv","GL_ARB_viewport_array");
	 fn(first1,count1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ScissorIndexed
#define GL_ALT_FUNDEF_ScissorIndexed
typedef void (*PFNGLSCISSORINDEXEDPROC_ALT)(GLuint,GLint,GLint,GLsizei,GLsizei);
static inline void glScissorIndexed(GLuint index1,GLint left1,GLint bottom1,GLsizei width1,GLsizei height1)
{
	static PFNGLSCISSORINDEXEDPROC_ALT fn=(PFNGLSCISSORINDEXEDPROC_ALT)glaltGetProcAddressExtension("glScissorIndexed","GL_ARB_viewport_array");
	 fn(index1,left1,bottom1,width1,height1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ScissorIndexedv
#define GL_ALT_FUNDEF_ScissorIndexedv
typedef void (*PFNGLSCISSORINDEXEDVPROC_ALT)(GLuint,const GLint *);
static inline void glScissorIndexedv(GLuint index1,const GLint * v1)
{
	static PFNGLSCISSORINDEXEDVPROC_ALT fn=(PFNGLSCISSORINDEXEDVPROC_ALT)glaltGetProcAddressExtension("glScissorIndexedv","GL_ARB_viewport_array");
	 fn(index1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ViewportArrayv
#define GL_ALT_FUNDEF_ViewportArrayv
typedef void (*PFNGLVIEWPORTARRAYVPROC_ALT)(GLuint,GLsizei,const GLfloat *);
static inline void glViewportArrayv(GLuint first1,GLsizei count1,const GLfloat * v1)
{
	static PFNGLVIEWPORTARRAYVPROC_ALT fn=(PFNGLVIEWPORTARRAYVPROC_ALT)glaltGetProcAddressExtension("glViewportArrayv","GL_ARB_viewport_array");
	 fn(first1,count1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ViewportIndexedf
#define GL_ALT_FUNDEF_ViewportIndexedf
typedef void (*PFNGLVIEWPORTINDEXEDFPROC_ALT)(GLuint,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glViewportIndexedf(GLuint index1,GLfloat x1,GLfloat y1,GLfloat w1,GLfloat h1)
{
	static PFNGLVIEWPORTINDEXEDFPROC_ALT fn=(PFNGLVIEWPORTINDEXEDFPROC_ALT)glaltGetProcAddressExtension("glViewportIndexedf","GL_ARB_viewport_array");
	 fn(index1,x1,y1,w1,h1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ViewportIndexedfv
#define GL_ALT_FUNDEF_ViewportIndexedfv
typedef void (*PFNGLVIEWPORTINDEXEDFVPROC_ALT)(GLuint,const GLfloat *);
static inline void glViewportIndexedfv(GLuint index1,const GLfloat * v1)
{
	static PFNGLVIEWPORTINDEXEDFVPROC_ALT fn=(PFNGLVIEWPORTINDEXEDFVPROC_ALT)glaltGetProcAddressExtension("glViewportIndexedfv","GL_ARB_viewport_array");
	 fn(index1,v1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ARB_window_pos
#define GL_ARB_window_pos
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_WindowPos2dARB
#define GL_ALT_FUNDEF_WindowPos2dARB
typedef void (*PFNGLWINDOWPOS2DARBPROC_ALT)(GLdouble,GLdouble);
static inline void glWindowPos2dARB(GLdouble x1,GLdouble y1)
{
	static PFNGLWINDOWPOS2DARBPROC_ALT fn=(PFNGLWINDOWPOS2DARBPROC_ALT)glaltGetProcAddressExtension("glWindowPos2dARB","GL_ARB_window_pos");
	 fn(x1,y1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_WindowPos2dvARB
#define GL_ALT_FUNDEF_WindowPos2dvARB
typedef void (*PFNGLWINDOWPOS2DVARBPROC_ALT)(const GLdouble *);
static inline void glWindowPos2dvARB(const GLdouble * v1)
{
	static PFNGLWINDOWPOS2DVARBPROC_ALT fn=(PFNGLWINDOWPOS2DVARBPROC_ALT)glaltGetProcAddressExtension("glWindowPos2dvARB","GL_ARB_window_pos");
	 fn(v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_WindowPos2fARB
#define GL_ALT_FUNDEF_WindowPos2fARB
typedef void (*PFNGLWINDOWPOS2FARBPROC_ALT)(GLfloat,GLfloat);
static inline void glWindowPos2fARB(GLfloat x1,GLfloat y1)
{
	static PFNGLWINDOWPOS2FARBPROC_ALT fn=(PFNGLWINDOWPOS2FARBPROC_ALT)glaltGetProcAddressExtension("glWindowPos2fARB","GL_ARB_window_pos");
	 fn(x1,y1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_WindowPos2fvARB
#define GL_ALT_FUNDEF_WindowPos2fvARB
typedef void (*PFNGLWINDOWPOS2FVARBPROC_ALT)(const GLfloat *);
static inline void glWindowPos2fvARB(const GLfloat * v1)
{
	static PFNGLWINDOWPOS2FVARBPROC_ALT fn=(PFNGLWINDOWPOS2FVARBPROC_ALT)glaltGetProcAddressExtension("glWindowPos2fvARB","GL_ARB_window_pos");
	 fn(v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_WindowPos2iARB
#define GL_ALT_FUNDEF_WindowPos2iARB
typedef void (*PFNGLWINDOWPOS2IARBPROC_ALT)(GLint,GLint);
static inline void glWindowPos2iARB(GLint x1,GLint y1)
{
	static PFNGLWINDOWPOS2IARBPROC_ALT fn=(PFNGLWINDOWPOS2IARBPROC_ALT)glaltGetProcAddressExtension("glWindowPos2iARB","GL_ARB_window_pos");
	 fn(x1,y1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_WindowPos2ivARB
#define GL_ALT_FUNDEF_WindowPos2ivARB
typedef void (*PFNGLWINDOWPOS2IVARBPROC_ALT)(const GLint *);
static inline void glWindowPos2ivARB(const GLint * v1)
{
	static PFNGLWINDOWPOS2IVARBPROC_ALT fn=(PFNGLWINDOWPOS2IVARBPROC_ALT)glaltGetProcAddressExtension("glWindowPos2ivARB","GL_ARB_window_pos");
	 fn(v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_WindowPos2sARB
#define GL_ALT_FUNDEF_WindowPos2sARB
typedef void (*PFNGLWINDOWPOS2SARBPROC_ALT)(GLshort,GLshort);
static inline void glWindowPos2sARB(GLshort x1,GLshort y1)
{
	static PFNGLWINDOWPOS2SARBPROC_ALT fn=(PFNGLWINDOWPOS2SARBPROC_ALT)glaltGetProcAddressExtension("glWindowPos2sARB","GL_ARB_window_pos");
	 fn(x1,y1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_WindowPos2svARB
#define GL_ALT_FUNDEF_WindowPos2svARB
typedef void (*PFNGLWINDOWPOS2SVARBPROC_ALT)(const GLshort *);
static inline void glWindowPos2svARB(const GLshort * v1)
{
	static PFNGLWINDOWPOS2SVARBPROC_ALT fn=(PFNGLWINDOWPOS2SVARBPROC_ALT)glaltGetProcAddressExtension("glWindowPos2svARB","GL_ARB_window_pos");
	 fn(v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_WindowPos3dARB
#define GL_ALT_FUNDEF_WindowPos3dARB
typedef void (*PFNGLWINDOWPOS3DARBPROC_ALT)(GLdouble,GLdouble,GLdouble);
static inline void glWindowPos3dARB(GLdouble x1,GLdouble y1,GLdouble z1)
{
	static PFNGLWINDOWPOS3DARBPROC_ALT fn=(PFNGLWINDOWPOS3DARBPROC_ALT)glaltGetProcAddressExtension("glWindowPos3dARB","GL_ARB_window_pos");
	 fn(x1,y1,z1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_WindowPos3dvARB
#define GL_ALT_FUNDEF_WindowPos3dvARB
typedef void (*PFNGLWINDOWPOS3DVARBPROC_ALT)(const GLdouble *);
static inline void glWindowPos3dvARB(const GLdouble * v1)
{
	static PFNGLWINDOWPOS3DVARBPROC_ALT fn=(PFNGLWINDOWPOS3DVARBPROC_ALT)glaltGetProcAddressExtension("glWindowPos3dvARB","GL_ARB_window_pos");
	 fn(v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_WindowPos3fARB
#define GL_ALT_FUNDEF_WindowPos3fARB
typedef void (*PFNGLWINDOWPOS3FARBPROC_ALT)(GLfloat,GLfloat,GLfloat);
static inline void glWindowPos3fARB(GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLWINDOWPOS3FARBPROC_ALT fn=(PFNGLWINDOWPOS3FARBPROC_ALT)glaltGetProcAddressExtension("glWindowPos3fARB","GL_ARB_window_pos");
	 fn(x1,y1,z1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_WindowPos3fvARB
#define GL_ALT_FUNDEF_WindowPos3fvARB
typedef void (*PFNGLWINDOWPOS3FVARBPROC_ALT)(const GLfloat *);
static inline void glWindowPos3fvARB(const GLfloat * v1)
{
	static PFNGLWINDOWPOS3FVARBPROC_ALT fn=(PFNGLWINDOWPOS3FVARBPROC_ALT)glaltGetProcAddressExtension("glWindowPos3fvARB","GL_ARB_window_pos");
	 fn(v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_WindowPos3iARB
#define GL_ALT_FUNDEF_WindowPos3iARB
typedef void (*PFNGLWINDOWPOS3IARBPROC_ALT)(GLint,GLint,GLint);
static inline void glWindowPos3iARB(GLint x1,GLint y1,GLint z1)
{
	static PFNGLWINDOWPOS3IARBPROC_ALT fn=(PFNGLWINDOWPOS3IARBPROC_ALT)glaltGetProcAddressExtension("glWindowPos3iARB","GL_ARB_window_pos");
	 fn(x1,y1,z1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_WindowPos3ivARB
#define GL_ALT_FUNDEF_WindowPos3ivARB
typedef void (*PFNGLWINDOWPOS3IVARBPROC_ALT)(const GLint *);
static inline void glWindowPos3ivARB(const GLint * v1)
{
	static PFNGLWINDOWPOS3IVARBPROC_ALT fn=(PFNGLWINDOWPOS3IVARBPROC_ALT)glaltGetProcAddressExtension("glWindowPos3ivARB","GL_ARB_window_pos");
	 fn(v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_WindowPos3sARB
#define GL_ALT_FUNDEF_WindowPos3sARB
typedef void (*PFNGLWINDOWPOS3SARBPROC_ALT)(GLshort,GLshort,GLshort);
static inline void glWindowPos3sARB(GLshort x1,GLshort y1,GLshort z1)
{
	static PFNGLWINDOWPOS3SARBPROC_ALT fn=(PFNGLWINDOWPOS3SARBPROC_ALT)glaltGetProcAddressExtension("glWindowPos3sARB","GL_ARB_window_pos");
	 fn(x1,y1,z1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_WindowPos3svARB
#define GL_ALT_FUNDEF_WindowPos3svARB
typedef void (*PFNGLWINDOWPOS3SVARBPROC_ALT)(const GLshort *);
static inline void glWindowPos3svARB(const GLshort * v1)
{
	static PFNGLWINDOWPOS3SVARBPROC_ALT fn=(PFNGLWINDOWPOS3SVARBPROC_ALT)glaltGetProcAddressExtension("glWindowPos3svARB","GL_ARB_window_pos");
	 fn(v1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_ATI_draw_buffers
#define GL_ATI_draw_buffers
#ifndef GL_MAX_DRAW_BUFFERS_ATI
#define GL_MAX_DRAW_BUFFERS_ATI 0x8824
#endif //GL_MAX_DRAW_BUFFERS_ATI
#ifndef GL_DRAW_BUFFER0_ATI
#define GL_DRAW_BUFFER0_ATI 0x8825
#endif //GL_DRAW_BUFFER0_ATI
#ifndef GL_DRAW_BUFFER1_ATI
#define GL_DRAW_BUFFER1_ATI 0x8826
#endif //GL_DRAW_BUFFER1_ATI
#ifndef GL_DRAW_BUFFER2_ATI
#define GL_DRAW_BUFFER2_ATI 0x8827
#endif //GL_DRAW_BUFFER2_ATI
#ifndef GL_DRAW_BUFFER3_ATI
#define GL_DRAW_BUFFER3_ATI 0x8828
#endif //GL_DRAW_BUFFER3_ATI
#ifndef GL_DRAW_BUFFER4_ATI
#define GL_DRAW_BUFFER4_ATI 0x8829
#endif //GL_DRAW_BUFFER4_ATI
#ifndef GL_DRAW_BUFFER5_ATI
#define GL_DRAW_BUFFER5_ATI 0x882A
#endif //GL_DRAW_BUFFER5_ATI
#ifndef GL_DRAW_BUFFER6_ATI
#define GL_DRAW_BUFFER6_ATI 0x882B
#endif //GL_DRAW_BUFFER6_ATI
#ifndef GL_DRAW_BUFFER7_ATI
#define GL_DRAW_BUFFER7_ATI 0x882C
#endif //GL_DRAW_BUFFER7_ATI
#ifndef GL_DRAW_BUFFER8_ATI
#define GL_DRAW_BUFFER8_ATI 0x882D
#endif //GL_DRAW_BUFFER8_ATI
#ifndef GL_DRAW_BUFFER9_ATI
#define GL_DRAW_BUFFER9_ATI 0x882E
#endif //GL_DRAW_BUFFER9_ATI
#ifndef GL_DRAW_BUFFER10_ATI
#define GL_DRAW_BUFFER10_ATI 0x882F
#endif //GL_DRAW_BUFFER10_ATI
#ifndef GL_DRAW_BUFFER11_ATI
#define GL_DRAW_BUFFER11_ATI 0x8830
#endif //GL_DRAW_BUFFER11_ATI
#ifndef GL_DRAW_BUFFER12_ATI
#define GL_DRAW_BUFFER12_ATI 0x8831
#endif //GL_DRAW_BUFFER12_ATI
#ifndef GL_DRAW_BUFFER13_ATI
#define GL_DRAW_BUFFER13_ATI 0x8832
#endif //GL_DRAW_BUFFER13_ATI
#ifndef GL_DRAW_BUFFER14_ATI
#define GL_DRAW_BUFFER14_ATI 0x8833
#endif //GL_DRAW_BUFFER14_ATI
#ifndef GL_DRAW_BUFFER15_ATI
#define GL_DRAW_BUFFER15_ATI 0x8834
#endif //GL_DRAW_BUFFER15_ATI
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_DrawBuffersATI
#define GL_ALT_FUNDEF_DrawBuffersATI
typedef void (*PFNGLDRAWBUFFERSATIPROC_ALT)(GLsizei,const GLenum *);
static inline void glDrawBuffersATI(GLsizei n1,const GLenum * bufs1)
{
	static PFNGLDRAWBUFFERSATIPROC_ALT fn=(PFNGLDRAWBUFFERSATIPROC_ALT)glaltGetProcAddressExtension("glDrawBuffersATI","GL_ATI_draw_buffers");
	 fn(n1,bufs1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_ATI_element_array
#define GL_ATI_element_array
#ifndef GL_ELEMENT_ARRAY_ATI
#define GL_ELEMENT_ARRAY_ATI 0x8768
#endif //GL_ELEMENT_ARRAY_ATI
#ifndef GL_ELEMENT_ARRAY_TYPE_ATI
#define GL_ELEMENT_ARRAY_TYPE_ATI 0x8769
#endif //GL_ELEMENT_ARRAY_TYPE_ATI
#ifndef GL_ELEMENT_ARRAY_POINTER_ATI
#define GL_ELEMENT_ARRAY_POINTER_ATI 0x876A
#endif //GL_ELEMENT_ARRAY_POINTER_ATI
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_DrawElementArrayATI
#define GL_ALT_FUNDEF_DrawElementArrayATI
typedef void (*PFNGLDRAWELEMENTARRAYATIPROC_ALT)(GLenum,GLsizei);
static inline void glDrawElementArrayATI(GLenum mode1,GLsizei count1)
{
	static PFNGLDRAWELEMENTARRAYATIPROC_ALT fn=(PFNGLDRAWELEMENTARRAYATIPROC_ALT)glaltGetProcAddressExtension("glDrawElementArrayATI","GL_ATI_element_array");
	 fn(mode1,count1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DrawRangeElementArrayATI
#define GL_ALT_FUNDEF_DrawRangeElementArrayATI
typedef void (*PFNGLDRAWRANGEELEMENTARRAYATIPROC_ALT)(GLenum,GLuint,GLuint,GLsizei);
static inline void glDrawRangeElementArrayATI(GLenum mode1,GLuint start1,GLuint end1,GLsizei count1)
{
	static PFNGLDRAWRANGEELEMENTARRAYATIPROC_ALT fn=(PFNGLDRAWRANGEELEMENTARRAYATIPROC_ALT)glaltGetProcAddressExtension("glDrawRangeElementArrayATI","GL_ATI_element_array");
	 fn(mode1,start1,end1,count1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ElementPointerATI
#define GL_ALT_FUNDEF_ElementPointerATI
typedef void (*PFNGLELEMENTPOINTERATIPROC_ALT)(GLenum,const void *);
static inline void glElementPointerATI(GLenum type1,const void * pointer1)
{
	static PFNGLELEMENTPOINTERATIPROC_ALT fn=(PFNGLELEMENTPOINTERATIPROC_ALT)glaltGetProcAddressExtension("glElementPointerATI","GL_ATI_element_array");
	 fn(type1,pointer1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ATI_envmap_bumpmap
#define GL_ATI_envmap_bumpmap
#ifndef GL_BUMP_ROT_MATRIX_ATI
#define GL_BUMP_ROT_MATRIX_ATI 0x8775
#endif //GL_BUMP_ROT_MATRIX_ATI
#ifndef GL_BUMP_ROT_MATRIX_SIZE_ATI
#define GL_BUMP_ROT_MATRIX_SIZE_ATI 0x8776
#endif //GL_BUMP_ROT_MATRIX_SIZE_ATI
#ifndef GL_BUMP_NUM_TEX_UNITS_ATI
#define GL_BUMP_NUM_TEX_UNITS_ATI 0x8777
#endif //GL_BUMP_NUM_TEX_UNITS_ATI
#ifndef GL_BUMP_TEX_UNITS_ATI
#define GL_BUMP_TEX_UNITS_ATI 0x8778
#endif //GL_BUMP_TEX_UNITS_ATI
#ifndef GL_DUDV_ATI
#define GL_DUDV_ATI 0x8779
#endif //GL_DUDV_ATI
#ifndef GL_DU8DV8_ATI
#define GL_DU8DV8_ATI 0x877A
#endif //GL_DU8DV8_ATI
#ifndef GL_BUMP_ENVMAP_ATI
#define GL_BUMP_ENVMAP_ATI 0x877B
#endif //GL_BUMP_ENVMAP_ATI
#ifndef GL_BUMP_TARGET_ATI
#define GL_BUMP_TARGET_ATI 0x877C
#endif //GL_BUMP_TARGET_ATI
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetTexBumpParameterfvATI
#define GL_ALT_FUNDEF_GetTexBumpParameterfvATI
typedef void (*PFNGLGETTEXBUMPPARAMETERFVATIPROC_ALT)(GLenum,GLfloat *);
static inline void glGetTexBumpParameterfvATI(GLenum pname1,GLfloat * param1)
{
	static PFNGLGETTEXBUMPPARAMETERFVATIPROC_ALT fn=(PFNGLGETTEXBUMPPARAMETERFVATIPROC_ALT)glaltGetProcAddressExtension("glGetTexBumpParameterfvATI","GL_ATI_envmap_bumpmap");
	 fn(pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetTexBumpParameterivATI
#define GL_ALT_FUNDEF_GetTexBumpParameterivATI
typedef void (*PFNGLGETTEXBUMPPARAMETERIVATIPROC_ALT)(GLenum,GLint *);
static inline void glGetTexBumpParameterivATI(GLenum pname1,GLint * param1)
{
	static PFNGLGETTEXBUMPPARAMETERIVATIPROC_ALT fn=(PFNGLGETTEXBUMPPARAMETERIVATIPROC_ALT)glaltGetProcAddressExtension("glGetTexBumpParameterivATI","GL_ATI_envmap_bumpmap");
	 fn(pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexBumpParameterfvATI
#define GL_ALT_FUNDEF_TexBumpParameterfvATI
typedef void (*PFNGLTEXBUMPPARAMETERFVATIPROC_ALT)(GLenum,const GLfloat *);
static inline void glTexBumpParameterfvATI(GLenum pname1,const GLfloat * param1)
{
	static PFNGLTEXBUMPPARAMETERFVATIPROC_ALT fn=(PFNGLTEXBUMPPARAMETERFVATIPROC_ALT)glaltGetProcAddressExtension("glTexBumpParameterfvATI","GL_ATI_envmap_bumpmap");
	 fn(pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexBumpParameterivATI
#define GL_ALT_FUNDEF_TexBumpParameterivATI
typedef void (*PFNGLTEXBUMPPARAMETERIVATIPROC_ALT)(GLenum,const GLint *);
static inline void glTexBumpParameterivATI(GLenum pname1,const GLint * param1)
{
	static PFNGLTEXBUMPPARAMETERIVATIPROC_ALT fn=(PFNGLTEXBUMPPARAMETERIVATIPROC_ALT)glaltGetProcAddressExtension("glTexBumpParameterivATI","GL_ATI_envmap_bumpmap");
	 fn(pname1,param1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ATI_fragment_shader
#define GL_ATI_fragment_shader
#ifndef GL_RED_BIT_ATI
#define GL_RED_BIT_ATI 0x00000001
#endif //GL_RED_BIT_ATI
#ifndef GL_2X_BIT_ATI
#define GL_2X_BIT_ATI 0x00000001
#endif //GL_2X_BIT_ATI
#ifndef GL_GREEN_BIT_ATI
#define GL_GREEN_BIT_ATI 0x00000002
#endif //GL_GREEN_BIT_ATI
#ifndef GL_COMP_BIT_ATI
#define GL_COMP_BIT_ATI 0x00000002
#endif //GL_COMP_BIT_ATI
#ifndef GL_4X_BIT_ATI
#define GL_4X_BIT_ATI 0x00000002
#endif //GL_4X_BIT_ATI
#ifndef GL_8X_BIT_ATI
#define GL_8X_BIT_ATI 0x00000004
#endif //GL_8X_BIT_ATI
#ifndef GL_NEGATE_BIT_ATI
#define GL_NEGATE_BIT_ATI 0x00000004
#endif //GL_NEGATE_BIT_ATI
#ifndef GL_BLUE_BIT_ATI
#define GL_BLUE_BIT_ATI 0x00000004
#endif //GL_BLUE_BIT_ATI
#ifndef GL_HALF_BIT_ATI
#define GL_HALF_BIT_ATI 0x00000008
#endif //GL_HALF_BIT_ATI
#ifndef GL_BIAS_BIT_ATI
#define GL_BIAS_BIT_ATI 0x00000008
#endif //GL_BIAS_BIT_ATI
#ifndef GL_QUARTER_BIT_ATI
#define GL_QUARTER_BIT_ATI 0x00000010
#endif //GL_QUARTER_BIT_ATI
#ifndef GL_EIGHTH_BIT_ATI
#define GL_EIGHTH_BIT_ATI 0x00000020
#endif //GL_EIGHTH_BIT_ATI
#ifndef GL_SATURATE_BIT_ATI
#define GL_SATURATE_BIT_ATI 0x00000040
#endif //GL_SATURATE_BIT_ATI
#ifndef GL_FRAGMENT_SHADER_ATI
#define GL_FRAGMENT_SHADER_ATI 0x8920
#endif //GL_FRAGMENT_SHADER_ATI
#ifndef GL_REG_0_ATI
#define GL_REG_0_ATI 0x8921
#endif //GL_REG_0_ATI
#ifndef GL_REG_1_ATI
#define GL_REG_1_ATI 0x8922
#endif //GL_REG_1_ATI
#ifndef GL_REG_2_ATI
#define GL_REG_2_ATI 0x8923
#endif //GL_REG_2_ATI
#ifndef GL_REG_3_ATI
#define GL_REG_3_ATI 0x8924
#endif //GL_REG_3_ATI
#ifndef GL_REG_4_ATI
#define GL_REG_4_ATI 0x8925
#endif //GL_REG_4_ATI
#ifndef GL_REG_5_ATI
#define GL_REG_5_ATI 0x8926
#endif //GL_REG_5_ATI
#ifndef GL_REG_6_ATI
#define GL_REG_6_ATI 0x8927
#endif //GL_REG_6_ATI
#ifndef GL_REG_7_ATI
#define GL_REG_7_ATI 0x8928
#endif //GL_REG_7_ATI
#ifndef GL_REG_8_ATI
#define GL_REG_8_ATI 0x8929
#endif //GL_REG_8_ATI
#ifndef GL_REG_9_ATI
#define GL_REG_9_ATI 0x892A
#endif //GL_REG_9_ATI
#ifndef GL_REG_10_ATI
#define GL_REG_10_ATI 0x892B
#endif //GL_REG_10_ATI
#ifndef GL_REG_11_ATI
#define GL_REG_11_ATI 0x892C
#endif //GL_REG_11_ATI
#ifndef GL_REG_12_ATI
#define GL_REG_12_ATI 0x892D
#endif //GL_REG_12_ATI
#ifndef GL_REG_13_ATI
#define GL_REG_13_ATI 0x892E
#endif //GL_REG_13_ATI
#ifndef GL_REG_14_ATI
#define GL_REG_14_ATI 0x892F
#endif //GL_REG_14_ATI
#ifndef GL_REG_15_ATI
#define GL_REG_15_ATI 0x8930
#endif //GL_REG_15_ATI
#ifndef GL_REG_16_ATI
#define GL_REG_16_ATI 0x8931
#endif //GL_REG_16_ATI
#ifndef GL_REG_17_ATI
#define GL_REG_17_ATI 0x8932
#endif //GL_REG_17_ATI
#ifndef GL_REG_18_ATI
#define GL_REG_18_ATI 0x8933
#endif //GL_REG_18_ATI
#ifndef GL_REG_19_ATI
#define GL_REG_19_ATI 0x8934
#endif //GL_REG_19_ATI
#ifndef GL_REG_20_ATI
#define GL_REG_20_ATI 0x8935
#endif //GL_REG_20_ATI
#ifndef GL_REG_21_ATI
#define GL_REG_21_ATI 0x8936
#endif //GL_REG_21_ATI
#ifndef GL_REG_22_ATI
#define GL_REG_22_ATI 0x8937
#endif //GL_REG_22_ATI
#ifndef GL_REG_23_ATI
#define GL_REG_23_ATI 0x8938
#endif //GL_REG_23_ATI
#ifndef GL_REG_24_ATI
#define GL_REG_24_ATI 0x8939
#endif //GL_REG_24_ATI
#ifndef GL_REG_25_ATI
#define GL_REG_25_ATI 0x893A
#endif //GL_REG_25_ATI
#ifndef GL_REG_26_ATI
#define GL_REG_26_ATI 0x893B
#endif //GL_REG_26_ATI
#ifndef GL_REG_27_ATI
#define GL_REG_27_ATI 0x893C
#endif //GL_REG_27_ATI
#ifndef GL_REG_28_ATI
#define GL_REG_28_ATI 0x893D
#endif //GL_REG_28_ATI
#ifndef GL_REG_29_ATI
#define GL_REG_29_ATI 0x893E
#endif //GL_REG_29_ATI
#ifndef GL_REG_30_ATI
#define GL_REG_30_ATI 0x893F
#endif //GL_REG_30_ATI
#ifndef GL_REG_31_ATI
#define GL_REG_31_ATI 0x8940
#endif //GL_REG_31_ATI
#ifndef GL_CON_0_ATI
#define GL_CON_0_ATI 0x8941
#endif //GL_CON_0_ATI
#ifndef GL_CON_1_ATI
#define GL_CON_1_ATI 0x8942
#endif //GL_CON_1_ATI
#ifndef GL_CON_2_ATI
#define GL_CON_2_ATI 0x8943
#endif //GL_CON_2_ATI
#ifndef GL_CON_3_ATI
#define GL_CON_3_ATI 0x8944
#endif //GL_CON_3_ATI
#ifndef GL_CON_4_ATI
#define GL_CON_4_ATI 0x8945
#endif //GL_CON_4_ATI
#ifndef GL_CON_5_ATI
#define GL_CON_5_ATI 0x8946
#endif //GL_CON_5_ATI
#ifndef GL_CON_6_ATI
#define GL_CON_6_ATI 0x8947
#endif //GL_CON_6_ATI
#ifndef GL_CON_7_ATI
#define GL_CON_7_ATI 0x8948
#endif //GL_CON_7_ATI
#ifndef GL_CON_8_ATI
#define GL_CON_8_ATI 0x8949
#endif //GL_CON_8_ATI
#ifndef GL_CON_9_ATI
#define GL_CON_9_ATI 0x894A
#endif //GL_CON_9_ATI
#ifndef GL_CON_10_ATI
#define GL_CON_10_ATI 0x894B
#endif //GL_CON_10_ATI
#ifndef GL_CON_11_ATI
#define GL_CON_11_ATI 0x894C
#endif //GL_CON_11_ATI
#ifndef GL_CON_12_ATI
#define GL_CON_12_ATI 0x894D
#endif //GL_CON_12_ATI
#ifndef GL_CON_13_ATI
#define GL_CON_13_ATI 0x894E
#endif //GL_CON_13_ATI
#ifndef GL_CON_14_ATI
#define GL_CON_14_ATI 0x894F
#endif //GL_CON_14_ATI
#ifndef GL_CON_15_ATI
#define GL_CON_15_ATI 0x8950
#endif //GL_CON_15_ATI
#ifndef GL_CON_16_ATI
#define GL_CON_16_ATI 0x8951
#endif //GL_CON_16_ATI
#ifndef GL_CON_17_ATI
#define GL_CON_17_ATI 0x8952
#endif //GL_CON_17_ATI
#ifndef GL_CON_18_ATI
#define GL_CON_18_ATI 0x8953
#endif //GL_CON_18_ATI
#ifndef GL_CON_19_ATI
#define GL_CON_19_ATI 0x8954
#endif //GL_CON_19_ATI
#ifndef GL_CON_20_ATI
#define GL_CON_20_ATI 0x8955
#endif //GL_CON_20_ATI
#ifndef GL_CON_21_ATI
#define GL_CON_21_ATI 0x8956
#endif //GL_CON_21_ATI
#ifndef GL_CON_22_ATI
#define GL_CON_22_ATI 0x8957
#endif //GL_CON_22_ATI
#ifndef GL_CON_23_ATI
#define GL_CON_23_ATI 0x8958
#endif //GL_CON_23_ATI
#ifndef GL_CON_24_ATI
#define GL_CON_24_ATI 0x8959
#endif //GL_CON_24_ATI
#ifndef GL_CON_25_ATI
#define GL_CON_25_ATI 0x895A
#endif //GL_CON_25_ATI
#ifndef GL_CON_26_ATI
#define GL_CON_26_ATI 0x895B
#endif //GL_CON_26_ATI
#ifndef GL_CON_27_ATI
#define GL_CON_27_ATI 0x895C
#endif //GL_CON_27_ATI
#ifndef GL_CON_28_ATI
#define GL_CON_28_ATI 0x895D
#endif //GL_CON_28_ATI
#ifndef GL_CON_29_ATI
#define GL_CON_29_ATI 0x895E
#endif //GL_CON_29_ATI
#ifndef GL_CON_30_ATI
#define GL_CON_30_ATI 0x895F
#endif //GL_CON_30_ATI
#ifndef GL_CON_31_ATI
#define GL_CON_31_ATI 0x8960
#endif //GL_CON_31_ATI
#ifndef GL_MOV_ATI
#define GL_MOV_ATI 0x8961
#endif //GL_MOV_ATI
#ifndef GL_ADD_ATI
#define GL_ADD_ATI 0x8963
#endif //GL_ADD_ATI
#ifndef GL_MUL_ATI
#define GL_MUL_ATI 0x8964
#endif //GL_MUL_ATI
#ifndef GL_SUB_ATI
#define GL_SUB_ATI 0x8965
#endif //GL_SUB_ATI
#ifndef GL_DOT3_ATI
#define GL_DOT3_ATI 0x8966
#endif //GL_DOT3_ATI
#ifndef GL_DOT4_ATI
#define GL_DOT4_ATI 0x8967
#endif //GL_DOT4_ATI
#ifndef GL_MAD_ATI
#define GL_MAD_ATI 0x8968
#endif //GL_MAD_ATI
#ifndef GL_LERP_ATI
#define GL_LERP_ATI 0x8969
#endif //GL_LERP_ATI
#ifndef GL_CND_ATI
#define GL_CND_ATI 0x896A
#endif //GL_CND_ATI
#ifndef GL_CND0_ATI
#define GL_CND0_ATI 0x896B
#endif //GL_CND0_ATI
#ifndef GL_DOT2_ADD_ATI
#define GL_DOT2_ADD_ATI 0x896C
#endif //GL_DOT2_ADD_ATI
#ifndef GL_SECONDARY_INTERPOLATOR_ATI
#define GL_SECONDARY_INTERPOLATOR_ATI 0x896D
#endif //GL_SECONDARY_INTERPOLATOR_ATI
#ifndef GL_NUM_FRAGMENT_REGISTERS_ATI
#define GL_NUM_FRAGMENT_REGISTERS_ATI 0x896E
#endif //GL_NUM_FRAGMENT_REGISTERS_ATI
#ifndef GL_NUM_FRAGMENT_CONSTANTS_ATI
#define GL_NUM_FRAGMENT_CONSTANTS_ATI 0x896F
#endif //GL_NUM_FRAGMENT_CONSTANTS_ATI
#ifndef GL_NUM_PASSES_ATI
#define GL_NUM_PASSES_ATI 0x8970
#endif //GL_NUM_PASSES_ATI
#ifndef GL_NUM_INSTRUCTIONS_PER_PASS_ATI
#define GL_NUM_INSTRUCTIONS_PER_PASS_ATI 0x8971
#endif //GL_NUM_INSTRUCTIONS_PER_PASS_ATI
#ifndef GL_NUM_INSTRUCTIONS_TOTAL_ATI
#define GL_NUM_INSTRUCTIONS_TOTAL_ATI 0x8972
#endif //GL_NUM_INSTRUCTIONS_TOTAL_ATI
#ifndef GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI
#define GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI 0x8973
#endif //GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI
#ifndef GL_NUM_LOOPBACK_COMPONENTS_ATI
#define GL_NUM_LOOPBACK_COMPONENTS_ATI 0x8974
#endif //GL_NUM_LOOPBACK_COMPONENTS_ATI
#ifndef GL_COLOR_ALPHA_PAIRING_ATI
#define GL_COLOR_ALPHA_PAIRING_ATI 0x8975
#endif //GL_COLOR_ALPHA_PAIRING_ATI
#ifndef GL_SWIZZLE_STR_ATI
#define GL_SWIZZLE_STR_ATI 0x8976
#endif //GL_SWIZZLE_STR_ATI
#ifndef GL_SWIZZLE_STQ_ATI
#define GL_SWIZZLE_STQ_ATI 0x8977
#endif //GL_SWIZZLE_STQ_ATI
#ifndef GL_SWIZZLE_STR_DR_ATI
#define GL_SWIZZLE_STR_DR_ATI 0x8978
#endif //GL_SWIZZLE_STR_DR_ATI
#ifndef GL_SWIZZLE_STQ_DQ_ATI
#define GL_SWIZZLE_STQ_DQ_ATI 0x8979
#endif //GL_SWIZZLE_STQ_DQ_ATI
#ifndef GL_SWIZZLE_STRQ_ATI
#define GL_SWIZZLE_STRQ_ATI 0x897A
#endif //GL_SWIZZLE_STRQ_ATI
#ifndef GL_SWIZZLE_STRQ_DQ_ATI
#define GL_SWIZZLE_STRQ_DQ_ATI 0x897B
#endif //GL_SWIZZLE_STRQ_DQ_ATI
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_AlphaFragmentOp1ATI
#define GL_ALT_FUNDEF_AlphaFragmentOp1ATI
typedef void (*PFNGLALPHAFRAGMENTOP1ATIPROC_ALT)(GLenum,GLuint,GLuint,GLuint,GLuint,GLuint);
static inline void glAlphaFragmentOp1ATI(GLenum op1,GLuint dst1,GLuint dstMod1,GLuint arg11,GLuint arg1Rep1,GLuint arg1Mod1)
{
	static PFNGLALPHAFRAGMENTOP1ATIPROC_ALT fn=(PFNGLALPHAFRAGMENTOP1ATIPROC_ALT)glaltGetProcAddressExtension("glAlphaFragmentOp1ATI","GL_ATI_fragment_shader");
	 fn(op1,dst1,dstMod1,arg11,arg1Rep1,arg1Mod1);
}
#endif

#ifndef	GL_ALT_FUNDEF_AlphaFragmentOp2ATI
#define GL_ALT_FUNDEF_AlphaFragmentOp2ATI
typedef void (*PFNGLALPHAFRAGMENTOP2ATIPROC_ALT)(GLenum,GLuint,GLuint,GLuint,GLuint,GLuint,GLuint,GLuint,GLuint);
static inline void glAlphaFragmentOp2ATI(GLenum op1,GLuint dst1,GLuint dstMod1,GLuint arg11,GLuint arg1Rep1,GLuint arg1Mod1,GLuint arg21,GLuint arg2Rep1,GLuint arg2Mod1)
{
	static PFNGLALPHAFRAGMENTOP2ATIPROC_ALT fn=(PFNGLALPHAFRAGMENTOP2ATIPROC_ALT)glaltGetProcAddressExtension("glAlphaFragmentOp2ATI","GL_ATI_fragment_shader");
	 fn(op1,dst1,dstMod1,arg11,arg1Rep1,arg1Mod1,arg21,arg2Rep1,arg2Mod1);
}
#endif

#ifndef	GL_ALT_FUNDEF_AlphaFragmentOp3ATI
#define GL_ALT_FUNDEF_AlphaFragmentOp3ATI
typedef void (*PFNGLALPHAFRAGMENTOP3ATIPROC_ALT)(GLenum,GLuint,GLuint,GLuint,GLuint,GLuint,GLuint,GLuint,GLuint,GLuint,GLuint,GLuint);
static inline void glAlphaFragmentOp3ATI(GLenum op1,GLuint dst1,GLuint dstMod1,GLuint arg11,GLuint arg1Rep1,GLuint arg1Mod1,GLuint arg21,GLuint arg2Rep1,GLuint arg2Mod1,GLuint arg31,GLuint arg3Rep1,GLuint arg3Mod1)
{
	static PFNGLALPHAFRAGMENTOP3ATIPROC_ALT fn=(PFNGLALPHAFRAGMENTOP3ATIPROC_ALT)glaltGetProcAddressExtension("glAlphaFragmentOp3ATI","GL_ATI_fragment_shader");
	 fn(op1,dst1,dstMod1,arg11,arg1Rep1,arg1Mod1,arg21,arg2Rep1,arg2Mod1,arg31,arg3Rep1,arg3Mod1);
}
#endif

#ifndef	GL_ALT_FUNDEF_BeginFragmentShaderATI
#define GL_ALT_FUNDEF_BeginFragmentShaderATI
typedef void (*PFNGLBEGINFRAGMENTSHADERATIPROC_ALT)();
static inline void glBeginFragmentShaderATI()
{
	static PFNGLBEGINFRAGMENTSHADERATIPROC_ALT fn=(PFNGLBEGINFRAGMENTSHADERATIPROC_ALT)glaltGetProcAddressExtension("glBeginFragmentShaderATI","GL_ATI_fragment_shader");
	 fn();
}
#endif

#ifndef	GL_ALT_FUNDEF_BindFragmentShaderATI
#define GL_ALT_FUNDEF_BindFragmentShaderATI
typedef void (*PFNGLBINDFRAGMENTSHADERATIPROC_ALT)(GLuint);
static inline void glBindFragmentShaderATI(GLuint id1)
{
	static PFNGLBINDFRAGMENTSHADERATIPROC_ALT fn=(PFNGLBINDFRAGMENTSHADERATIPROC_ALT)glaltGetProcAddressExtension("glBindFragmentShaderATI","GL_ATI_fragment_shader");
	 fn(id1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ColorFragmentOp1ATI
#define GL_ALT_FUNDEF_ColorFragmentOp1ATI
typedef void (*PFNGLCOLORFRAGMENTOP1ATIPROC_ALT)(GLenum,GLuint,GLuint,GLuint,GLuint,GLuint,GLuint);
static inline void glColorFragmentOp1ATI(GLenum op1,GLuint dst1,GLuint dstMask1,GLuint dstMod1,GLuint arg11,GLuint arg1Rep1,GLuint arg1Mod1)
{
	static PFNGLCOLORFRAGMENTOP1ATIPROC_ALT fn=(PFNGLCOLORFRAGMENTOP1ATIPROC_ALT)glaltGetProcAddressExtension("glColorFragmentOp1ATI","GL_ATI_fragment_shader");
	 fn(op1,dst1,dstMask1,dstMod1,arg11,arg1Rep1,arg1Mod1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ColorFragmentOp2ATI
#define GL_ALT_FUNDEF_ColorFragmentOp2ATI
typedef void (*PFNGLCOLORFRAGMENTOP2ATIPROC_ALT)(GLenum,GLuint,GLuint,GLuint,GLuint,GLuint,GLuint,GLuint,GLuint,GLuint);
static inline void glColorFragmentOp2ATI(GLenum op1,GLuint dst1,GLuint dstMask1,GLuint dstMod1,GLuint arg11,GLuint arg1Rep1,GLuint arg1Mod1,GLuint arg21,GLuint arg2Rep1,GLuint arg2Mod1)
{
	static PFNGLCOLORFRAGMENTOP2ATIPROC_ALT fn=(PFNGLCOLORFRAGMENTOP2ATIPROC_ALT)glaltGetProcAddressExtension("glColorFragmentOp2ATI","GL_ATI_fragment_shader");
	 fn(op1,dst1,dstMask1,dstMod1,arg11,arg1Rep1,arg1Mod1,arg21,arg2Rep1,arg2Mod1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ColorFragmentOp3ATI
#define GL_ALT_FUNDEF_ColorFragmentOp3ATI
typedef void (*PFNGLCOLORFRAGMENTOP3ATIPROC_ALT)(GLenum,GLuint,GLuint,GLuint,GLuint,GLuint,GLuint,GLuint,GLuint,GLuint,GLuint,GLuint,GLuint);
static inline void glColorFragmentOp3ATI(GLenum op1,GLuint dst1,GLuint dstMask1,GLuint dstMod1,GLuint arg11,GLuint arg1Rep1,GLuint arg1Mod1,GLuint arg21,GLuint arg2Rep1,GLuint arg2Mod1,GLuint arg31,GLuint arg3Rep1,GLuint arg3Mod1)
{
	static PFNGLCOLORFRAGMENTOP3ATIPROC_ALT fn=(PFNGLCOLORFRAGMENTOP3ATIPROC_ALT)glaltGetProcAddressExtension("glColorFragmentOp3ATI","GL_ATI_fragment_shader");
	 fn(op1,dst1,dstMask1,dstMod1,arg11,arg1Rep1,arg1Mod1,arg21,arg2Rep1,arg2Mod1,arg31,arg3Rep1,arg3Mod1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DeleteFragmentShaderATI
#define GL_ALT_FUNDEF_DeleteFragmentShaderATI
typedef void (*PFNGLDELETEFRAGMENTSHADERATIPROC_ALT)(GLuint);
static inline void glDeleteFragmentShaderATI(GLuint id1)
{
	static PFNGLDELETEFRAGMENTSHADERATIPROC_ALT fn=(PFNGLDELETEFRAGMENTSHADERATIPROC_ALT)glaltGetProcAddressExtension("glDeleteFragmentShaderATI","GL_ATI_fragment_shader");
	 fn(id1);
}
#endif

#ifndef	GL_ALT_FUNDEF_EndFragmentShaderATI
#define GL_ALT_FUNDEF_EndFragmentShaderATI
typedef void (*PFNGLENDFRAGMENTSHADERATIPROC_ALT)();
static inline void glEndFragmentShaderATI()
{
	static PFNGLENDFRAGMENTSHADERATIPROC_ALT fn=(PFNGLENDFRAGMENTSHADERATIPROC_ALT)glaltGetProcAddressExtension("glEndFragmentShaderATI","GL_ATI_fragment_shader");
	 fn();
}
#endif

#ifndef	GL_ALT_FUNDEF_GenFragmentShadersATI
#define GL_ALT_FUNDEF_GenFragmentShadersATI
typedef GLuint (*PFNGLGENFRAGMENTSHADERSATIPROC_ALT)(GLuint);
static inline GLuint glGenFragmentShadersATI(GLuint range1)
{
	static PFNGLGENFRAGMENTSHADERSATIPROC_ALT fn=(PFNGLGENFRAGMENTSHADERSATIPROC_ALT)glaltGetProcAddressExtension("glGenFragmentShadersATI","GL_ATI_fragment_shader");
	return fn(range1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PassTexCoordATI
#define GL_ALT_FUNDEF_PassTexCoordATI
typedef void (*PFNGLPASSTEXCOORDATIPROC_ALT)(GLuint,GLuint,GLenum);
static inline void glPassTexCoordATI(GLuint dst1,GLuint coord1,GLenum swizzle1)
{
	static PFNGLPASSTEXCOORDATIPROC_ALT fn=(PFNGLPASSTEXCOORDATIPROC_ALT)glaltGetProcAddressExtension("glPassTexCoordATI","GL_ATI_fragment_shader");
	 fn(dst1,coord1,swizzle1);
}
#endif

#ifndef	GL_ALT_FUNDEF_SampleMapATI
#define GL_ALT_FUNDEF_SampleMapATI
typedef void (*PFNGLSAMPLEMAPATIPROC_ALT)(GLuint,GLuint,GLenum);
static inline void glSampleMapATI(GLuint dst1,GLuint interp1,GLenum swizzle1)
{
	static PFNGLSAMPLEMAPATIPROC_ALT fn=(PFNGLSAMPLEMAPATIPROC_ALT)glaltGetProcAddressExtension("glSampleMapATI","GL_ATI_fragment_shader");
	 fn(dst1,interp1,swizzle1);
}
#endif

#ifndef	GL_ALT_FUNDEF_SetFragmentShaderConstantATI
#define GL_ALT_FUNDEF_SetFragmentShaderConstantATI
typedef void (*PFNGLSETFRAGMENTSHADERCONSTANTATIPROC_ALT)(GLuint,const GLfloat *);
static inline void glSetFragmentShaderConstantATI(GLuint dst1,const GLfloat * value1)
{
	static PFNGLSETFRAGMENTSHADERCONSTANTATIPROC_ALT fn=(PFNGLSETFRAGMENTSHADERCONSTANTATIPROC_ALT)glaltGetProcAddressExtension("glSetFragmentShaderConstantATI","GL_ATI_fragment_shader");
	 fn(dst1,value1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ATI_map_object_buffer
#define GL_ATI_map_object_buffer
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_MapObjectBufferATI
#define GL_ALT_FUNDEF_MapObjectBufferATI
typedef void * (*PFNGLMAPOBJECTBUFFERATIPROC_ALT)(GLuint);
static inline void * glMapObjectBufferATI(GLuint buffer1)
{
	static PFNGLMAPOBJECTBUFFERATIPROC_ALT fn=(PFNGLMAPOBJECTBUFFERATIPROC_ALT)glaltGetProcAddressExtension("glMapObjectBufferATI","GL_ATI_map_object_buffer");
	return fn(buffer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_UnmapObjectBufferATI
#define GL_ALT_FUNDEF_UnmapObjectBufferATI
typedef void (*PFNGLUNMAPOBJECTBUFFERATIPROC_ALT)(GLuint);
static inline void glUnmapObjectBufferATI(GLuint buffer1)
{
	static PFNGLUNMAPOBJECTBUFFERATIPROC_ALT fn=(PFNGLUNMAPOBJECTBUFFERATIPROC_ALT)glaltGetProcAddressExtension("glUnmapObjectBufferATI","GL_ATI_map_object_buffer");
	 fn(buffer1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ATI_meminfo
#define GL_ATI_meminfo
#ifndef GL_VBO_FREE_MEMORY_ATI
#define GL_VBO_FREE_MEMORY_ATI 0x87FB
#endif //GL_VBO_FREE_MEMORY_ATI
#ifndef GL_TEXTURE_FREE_MEMORY_ATI
#define GL_TEXTURE_FREE_MEMORY_ATI 0x87FC
#endif //GL_TEXTURE_FREE_MEMORY_ATI
#ifndef GL_RENDERBUFFER_FREE_MEMORY_ATI
#define GL_RENDERBUFFER_FREE_MEMORY_ATI 0x87FD
#endif //GL_RENDERBUFFER_FREE_MEMORY_ATI
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ATI_pixel_format_float
#define GL_ATI_pixel_format_float
#ifndef GL_RGBA_FLOAT_MODE_ATI
#define GL_RGBA_FLOAT_MODE_ATI 0x8820
#endif //GL_RGBA_FLOAT_MODE_ATI
#ifndef GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI
#define GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI 0x8835
#endif //GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ATI_pn_triangles
#define GL_ATI_pn_triangles
#ifndef GL_PN_TRIANGLES_ATI
#define GL_PN_TRIANGLES_ATI 0x87F0
#endif //GL_PN_TRIANGLES_ATI
#ifndef GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI
#define GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F1
#endif //GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI
#ifndef GL_PN_TRIANGLES_POINT_MODE_ATI
#define GL_PN_TRIANGLES_POINT_MODE_ATI 0x87F2
#endif //GL_PN_TRIANGLES_POINT_MODE_ATI
#ifndef GL_PN_TRIANGLES_NORMAL_MODE_ATI
#define GL_PN_TRIANGLES_NORMAL_MODE_ATI 0x87F3
#endif //GL_PN_TRIANGLES_NORMAL_MODE_ATI
#ifndef GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI
#define GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F4
#endif //GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI
#ifndef GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI
#define GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI 0x87F5
#endif //GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI
#ifndef GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI
#define GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI 0x87F6
#endif //GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI
#ifndef GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI
#define GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI 0x87F7
#endif //GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI
#ifndef GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI
#define GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI 0x87F8
#endif //GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_PNTrianglesfATI
#define GL_ALT_FUNDEF_PNTrianglesfATI
typedef void (*PFNGLPNTRIANGLESFATIPROC_ALT)(GLenum,GLfloat);
static inline void glPNTrianglesfATI(GLenum pname1,GLfloat param1)
{
	static PFNGLPNTRIANGLESFATIPROC_ALT fn=(PFNGLPNTRIANGLESFATIPROC_ALT)glaltGetProcAddressExtension("glPNTrianglesfATI","GL_ATI_pn_triangles");
	 fn(pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PNTrianglesiATI
#define GL_ALT_FUNDEF_PNTrianglesiATI
typedef void (*PFNGLPNTRIANGLESIATIPROC_ALT)(GLenum,GLint);
static inline void glPNTrianglesiATI(GLenum pname1,GLint param1)
{
	static PFNGLPNTRIANGLESIATIPROC_ALT fn=(PFNGLPNTRIANGLESIATIPROC_ALT)glaltGetProcAddressExtension("glPNTrianglesiATI","GL_ATI_pn_triangles");
	 fn(pname1,param1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ATI_separate_stencil
#define GL_ATI_separate_stencil
#ifndef GL_STENCIL_BACK_FUNC_ATI
#define GL_STENCIL_BACK_FUNC_ATI 0x8800
#endif //GL_STENCIL_BACK_FUNC_ATI
#ifndef GL_STENCIL_BACK_FAIL_ATI
#define GL_STENCIL_BACK_FAIL_ATI 0x8801
#endif //GL_STENCIL_BACK_FAIL_ATI
#ifndef GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI 0x8802
#endif //GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI
#ifndef GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI
#define GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI 0x8803
#endif //GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_StencilFuncSeparateATI
#define GL_ALT_FUNDEF_StencilFuncSeparateATI
typedef void (*PFNGLSTENCILFUNCSEPARATEATIPROC_ALT)(GLenum,GLenum,GLint,GLuint);
static inline void glStencilFuncSeparateATI(GLenum frontfunc1,GLenum backfunc1,GLint ref1,GLuint mask1)
{
	static PFNGLSTENCILFUNCSEPARATEATIPROC_ALT fn=(PFNGLSTENCILFUNCSEPARATEATIPROC_ALT)glaltGetProcAddressExtension("glStencilFuncSeparateATI","GL_ATI_separate_stencil");
	 fn(frontfunc1,backfunc1,ref1,mask1);
}
#endif

#ifndef	GL_ALT_FUNDEF_StencilOpSeparateATI
#define GL_ALT_FUNDEF_StencilOpSeparateATI
typedef void (*PFNGLSTENCILOPSEPARATEATIPROC_ALT)(GLenum,GLenum,GLenum,GLenum);
static inline void glStencilOpSeparateATI(GLenum face1,GLenum sfail1,GLenum dpfail1,GLenum dppass1)
{
	static PFNGLSTENCILOPSEPARATEATIPROC_ALT fn=(PFNGLSTENCILOPSEPARATEATIPROC_ALT)glaltGetProcAddressExtension("glStencilOpSeparateATI","GL_ATI_separate_stencil");
	 fn(face1,sfail1,dpfail1,dppass1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_ATI_text_fragment_shader
#define GL_ATI_text_fragment_shader
#ifndef GL_TEXT_FRAGMENT_SHADER_ATI
#define GL_TEXT_FRAGMENT_SHADER_ATI 0x8200
#endif //GL_TEXT_FRAGMENT_SHADER_ATI
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ATI_texture_env_combine3
#define GL_ATI_texture_env_combine3
#ifndef GL_MODULATE_ADD_ATI
#define GL_MODULATE_ADD_ATI 0x8744
#endif //GL_MODULATE_ADD_ATI
#ifndef GL_MODULATE_SIGNED_ADD_ATI
#define GL_MODULATE_SIGNED_ADD_ATI 0x8745
#endif //GL_MODULATE_SIGNED_ADD_ATI
#ifndef GL_MODULATE_SUBTRACT_ATI
#define GL_MODULATE_SUBTRACT_ATI 0x8746
#endif //GL_MODULATE_SUBTRACT_ATI
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ATI_texture_float
#define GL_ATI_texture_float
#ifndef GL_RGBA_FLOAT32_ATI
#define GL_RGBA_FLOAT32_ATI 0x8814
#endif //GL_RGBA_FLOAT32_ATI
#ifndef GL_RGB_FLOAT32_ATI
#define GL_RGB_FLOAT32_ATI 0x8815
#endif //GL_RGB_FLOAT32_ATI
#ifndef GL_ALPHA_FLOAT32_ATI
#define GL_ALPHA_FLOAT32_ATI 0x8816
#endif //GL_ALPHA_FLOAT32_ATI
#ifndef GL_INTENSITY_FLOAT32_ATI
#define GL_INTENSITY_FLOAT32_ATI 0x8817
#endif //GL_INTENSITY_FLOAT32_ATI
#ifndef GL_LUMINANCE_FLOAT32_ATI
#define GL_LUMINANCE_FLOAT32_ATI 0x8818
#endif //GL_LUMINANCE_FLOAT32_ATI
#ifndef GL_LUMINANCE_ALPHA_FLOAT32_ATI
#define GL_LUMINANCE_ALPHA_FLOAT32_ATI 0x8819
#endif //GL_LUMINANCE_ALPHA_FLOAT32_ATI
#ifndef GL_RGBA_FLOAT16_ATI
#define GL_RGBA_FLOAT16_ATI 0x881A
#endif //GL_RGBA_FLOAT16_ATI
#ifndef GL_RGB_FLOAT16_ATI
#define GL_RGB_FLOAT16_ATI 0x881B
#endif //GL_RGB_FLOAT16_ATI
#ifndef GL_ALPHA_FLOAT16_ATI
#define GL_ALPHA_FLOAT16_ATI 0x881C
#endif //GL_ALPHA_FLOAT16_ATI
#ifndef GL_INTENSITY_FLOAT16_ATI
#define GL_INTENSITY_FLOAT16_ATI 0x881D
#endif //GL_INTENSITY_FLOAT16_ATI
#ifndef GL_LUMINANCE_FLOAT16_ATI
#define GL_LUMINANCE_FLOAT16_ATI 0x881E
#endif //GL_LUMINANCE_FLOAT16_ATI
#ifndef GL_LUMINANCE_ALPHA_FLOAT16_ATI
#define GL_LUMINANCE_ALPHA_FLOAT16_ATI 0x881F
#endif //GL_LUMINANCE_ALPHA_FLOAT16_ATI
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ATI_texture_mirror_once
#define GL_ATI_texture_mirror_once
#ifndef GL_MIRROR_CLAMP_ATI
#define GL_MIRROR_CLAMP_ATI 0x8742
#endif //GL_MIRROR_CLAMP_ATI
#ifndef GL_MIRROR_CLAMP_TO_EDGE_ATI
#define GL_MIRROR_CLAMP_TO_EDGE_ATI 0x8743
#endif //GL_MIRROR_CLAMP_TO_EDGE_ATI
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_ATI_vertex_array_object
#define GL_ATI_vertex_array_object
#ifndef GL_STATIC_ATI
#define GL_STATIC_ATI 0x8760
#endif //GL_STATIC_ATI
#ifndef GL_DYNAMIC_ATI
#define GL_DYNAMIC_ATI 0x8761
#endif //GL_DYNAMIC_ATI
#ifndef GL_PRESERVE_ATI
#define GL_PRESERVE_ATI 0x8762
#endif //GL_PRESERVE_ATI
#ifndef GL_DISCARD_ATI
#define GL_DISCARD_ATI 0x8763
#endif //GL_DISCARD_ATI
#ifndef GL_OBJECT_BUFFER_SIZE_ATI
#define GL_OBJECT_BUFFER_SIZE_ATI 0x8764
#endif //GL_OBJECT_BUFFER_SIZE_ATI
#ifndef GL_OBJECT_BUFFER_USAGE_ATI
#define GL_OBJECT_BUFFER_USAGE_ATI 0x8765
#endif //GL_OBJECT_BUFFER_USAGE_ATI
#ifndef GL_ARRAY_OBJECT_BUFFER_ATI
#define GL_ARRAY_OBJECT_BUFFER_ATI 0x8766
#endif //GL_ARRAY_OBJECT_BUFFER_ATI
#ifndef GL_ARRAY_OBJECT_OFFSET_ATI
#define GL_ARRAY_OBJECT_OFFSET_ATI 0x8767
#endif //GL_ARRAY_OBJECT_OFFSET_ATI
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ArrayObjectATI
#define GL_ALT_FUNDEF_ArrayObjectATI
typedef void (*PFNGLARRAYOBJECTATIPROC_ALT)(GLenum,GLint,GLenum,GLsizei,GLuint,GLuint);
static inline void glArrayObjectATI(GLenum array1,GLint size1,GLenum type1,GLsizei stride1,GLuint buffer1,GLuint offset1)
{
	static PFNGLARRAYOBJECTATIPROC_ALT fn=(PFNGLARRAYOBJECTATIPROC_ALT)glaltGetProcAddressExtension("glArrayObjectATI","GL_ATI_vertex_array_object");
	 fn(array1,size1,type1,stride1,buffer1,offset1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FreeObjectBufferATI
#define GL_ALT_FUNDEF_FreeObjectBufferATI
typedef void (*PFNGLFREEOBJECTBUFFERATIPROC_ALT)(GLuint);
static inline void glFreeObjectBufferATI(GLuint buffer1)
{
	static PFNGLFREEOBJECTBUFFERATIPROC_ALT fn=(PFNGLFREEOBJECTBUFFERATIPROC_ALT)glaltGetProcAddressExtension("glFreeObjectBufferATI","GL_ATI_vertex_array_object");
	 fn(buffer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetArrayObjectfvATI
#define GL_ALT_FUNDEF_GetArrayObjectfvATI
typedef void (*PFNGLGETARRAYOBJECTFVATIPROC_ALT)(GLenum,GLenum,GLfloat *);
static inline void glGetArrayObjectfvATI(GLenum array1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETARRAYOBJECTFVATIPROC_ALT fn=(PFNGLGETARRAYOBJECTFVATIPROC_ALT)glaltGetProcAddressExtension("glGetArrayObjectfvATI","GL_ATI_vertex_array_object");
	 fn(array1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetArrayObjectivATI
#define GL_ALT_FUNDEF_GetArrayObjectivATI
typedef void (*PFNGLGETARRAYOBJECTIVATIPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetArrayObjectivATI(GLenum array1,GLenum pname1,GLint * params1)
{
	static PFNGLGETARRAYOBJECTIVATIPROC_ALT fn=(PFNGLGETARRAYOBJECTIVATIPROC_ALT)glaltGetProcAddressExtension("glGetArrayObjectivATI","GL_ATI_vertex_array_object");
	 fn(array1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetObjectBufferfvATI
#define GL_ALT_FUNDEF_GetObjectBufferfvATI
typedef void (*PFNGLGETOBJECTBUFFERFVATIPROC_ALT)(GLuint,GLenum,GLfloat *);
static inline void glGetObjectBufferfvATI(GLuint buffer1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETOBJECTBUFFERFVATIPROC_ALT fn=(PFNGLGETOBJECTBUFFERFVATIPROC_ALT)glaltGetProcAddressExtension("glGetObjectBufferfvATI","GL_ATI_vertex_array_object");
	 fn(buffer1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetObjectBufferivATI
#define GL_ALT_FUNDEF_GetObjectBufferivATI
typedef void (*PFNGLGETOBJECTBUFFERIVATIPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetObjectBufferivATI(GLuint buffer1,GLenum pname1,GLint * params1)
{
	static PFNGLGETOBJECTBUFFERIVATIPROC_ALT fn=(PFNGLGETOBJECTBUFFERIVATIPROC_ALT)glaltGetProcAddressExtension("glGetObjectBufferivATI","GL_ATI_vertex_array_object");
	 fn(buffer1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetVariantArrayObjectfvATI
#define GL_ALT_FUNDEF_GetVariantArrayObjectfvATI
typedef void (*PFNGLGETVARIANTARRAYOBJECTFVATIPROC_ALT)(GLuint,GLenum,GLfloat *);
static inline void glGetVariantArrayObjectfvATI(GLuint id1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETVARIANTARRAYOBJECTFVATIPROC_ALT fn=(PFNGLGETVARIANTARRAYOBJECTFVATIPROC_ALT)glaltGetProcAddressExtension("glGetVariantArrayObjectfvATI","GL_ATI_vertex_array_object");
	 fn(id1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetVariantArrayObjectivATI
#define GL_ALT_FUNDEF_GetVariantArrayObjectivATI
typedef void (*PFNGLGETVARIANTARRAYOBJECTIVATIPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetVariantArrayObjectivATI(GLuint id1,GLenum pname1,GLint * params1)
{
	static PFNGLGETVARIANTARRAYOBJECTIVATIPROC_ALT fn=(PFNGLGETVARIANTARRAYOBJECTIVATIPROC_ALT)glaltGetProcAddressExtension("glGetVariantArrayObjectivATI","GL_ATI_vertex_array_object");
	 fn(id1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IsObjectBufferATI
#define GL_ALT_FUNDEF_IsObjectBufferATI
typedef GLboolean (*PFNGLISOBJECTBUFFERATIPROC_ALT)(GLuint);
static inline GLboolean glIsObjectBufferATI(GLuint buffer1)
{
	static PFNGLISOBJECTBUFFERATIPROC_ALT fn=(PFNGLISOBJECTBUFFERATIPROC_ALT)glaltGetProcAddressExtension("glIsObjectBufferATI","GL_ATI_vertex_array_object");
	return fn(buffer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NewObjectBufferATI
#define GL_ALT_FUNDEF_NewObjectBufferATI
typedef GLuint (*PFNGLNEWOBJECTBUFFERATIPROC_ALT)(GLsizei,const void *,GLenum);
static inline GLuint glNewObjectBufferATI(GLsizei size1,const void * pointer1,GLenum usage1)
{
	static PFNGLNEWOBJECTBUFFERATIPROC_ALT fn=(PFNGLNEWOBJECTBUFFERATIPROC_ALT)glaltGetProcAddressExtension("glNewObjectBufferATI","GL_ATI_vertex_array_object");
	return fn(size1,pointer1,usage1);
}
#endif

#ifndef	GL_ALT_FUNDEF_UpdateObjectBufferATI
#define GL_ALT_FUNDEF_UpdateObjectBufferATI
typedef void (*PFNGLUPDATEOBJECTBUFFERATIPROC_ALT)(GLuint,GLuint,GLsizei,const void *,GLenum);
static inline void glUpdateObjectBufferATI(GLuint buffer1,GLuint offset1,GLsizei size1,const void * pointer1,GLenum preserve1)
{
	static PFNGLUPDATEOBJECTBUFFERATIPROC_ALT fn=(PFNGLUPDATEOBJECTBUFFERATIPROC_ALT)glaltGetProcAddressExtension("glUpdateObjectBufferATI","GL_ATI_vertex_array_object");
	 fn(buffer1,offset1,size1,pointer1,preserve1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VariantArrayObjectATI
#define GL_ALT_FUNDEF_VariantArrayObjectATI
typedef void (*PFNGLVARIANTARRAYOBJECTATIPROC_ALT)(GLuint,GLenum,GLsizei,GLuint,GLuint);
static inline void glVariantArrayObjectATI(GLuint id1,GLenum type1,GLsizei stride1,GLuint buffer1,GLuint offset1)
{
	static PFNGLVARIANTARRAYOBJECTATIPROC_ALT fn=(PFNGLVARIANTARRAYOBJECTATIPROC_ALT)glaltGetProcAddressExtension("glVariantArrayObjectATI","GL_ATI_vertex_array_object");
	 fn(id1,type1,stride1,buffer1,offset1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ATI_vertex_attrib_array_object
#define GL_ATI_vertex_attrib_array_object
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetVertexAttribArrayObjectfvATI
#define GL_ALT_FUNDEF_GetVertexAttribArrayObjectfvATI
typedef void (*PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC_ALT)(GLuint,GLenum,GLfloat *);
static inline void glGetVertexAttribArrayObjectfvATI(GLuint index1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC_ALT fn=(PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC_ALT)glaltGetProcAddressExtension("glGetVertexAttribArrayObjectfvATI","GL_ATI_vertex_attrib_array_object");
	 fn(index1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetVertexAttribArrayObjectivATI
#define GL_ALT_FUNDEF_GetVertexAttribArrayObjectivATI
typedef void (*PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetVertexAttribArrayObjectivATI(GLuint index1,GLenum pname1,GLint * params1)
{
	static PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC_ALT fn=(PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC_ALT)glaltGetProcAddressExtension("glGetVertexAttribArrayObjectivATI","GL_ATI_vertex_attrib_array_object");
	 fn(index1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribArrayObjectATI
#define GL_ALT_FUNDEF_VertexAttribArrayObjectATI
typedef void (*PFNGLVERTEXATTRIBARRAYOBJECTATIPROC_ALT)(GLuint,GLint,GLenum,GLboolean,GLsizei,GLuint,GLuint);
static inline void glVertexAttribArrayObjectATI(GLuint index1,GLint size1,GLenum type1,GLboolean normalized1,GLsizei stride1,GLuint buffer1,GLuint offset1)
{
	static PFNGLVERTEXATTRIBARRAYOBJECTATIPROC_ALT fn=(PFNGLVERTEXATTRIBARRAYOBJECTATIPROC_ALT)glaltGetProcAddressExtension("glVertexAttribArrayObjectATI","GL_ATI_vertex_attrib_array_object");
	 fn(index1,size1,type1,normalized1,stride1,buffer1,offset1);
}
#endif
CGUARDEND

#endif

#ifndef GL_ATI_vertex_streams
#define GL_ATI_vertex_streams
#ifndef GL_MAX_VERTEX_STREAMS_ATI
#define GL_MAX_VERTEX_STREAMS_ATI 0x876B
#endif //GL_MAX_VERTEX_STREAMS_ATI
#ifndef GL_VERTEX_STREAM0_ATI
#define GL_VERTEX_STREAM0_ATI 0x876C
#endif //GL_VERTEX_STREAM0_ATI
#ifndef GL_VERTEX_STREAM1_ATI
#define GL_VERTEX_STREAM1_ATI 0x876D
#endif //GL_VERTEX_STREAM1_ATI
#ifndef GL_VERTEX_STREAM2_ATI
#define GL_VERTEX_STREAM2_ATI 0x876E
#endif //GL_VERTEX_STREAM2_ATI
#ifndef GL_VERTEX_STREAM3_ATI
#define GL_VERTEX_STREAM3_ATI 0x876F
#endif //GL_VERTEX_STREAM3_ATI
#ifndef GL_VERTEX_STREAM4_ATI
#define GL_VERTEX_STREAM4_ATI 0x8770
#endif //GL_VERTEX_STREAM4_ATI
#ifndef GL_VERTEX_STREAM5_ATI
#define GL_VERTEX_STREAM5_ATI 0x8771
#endif //GL_VERTEX_STREAM5_ATI
#ifndef GL_VERTEX_STREAM6_ATI
#define GL_VERTEX_STREAM6_ATI 0x8772
#endif //GL_VERTEX_STREAM6_ATI
#ifndef GL_VERTEX_STREAM7_ATI
#define GL_VERTEX_STREAM7_ATI 0x8773
#endif //GL_VERTEX_STREAM7_ATI
#ifndef GL_VERTEX_SOURCE_ATI
#define GL_VERTEX_SOURCE_ATI 0x8774
#endif //GL_VERTEX_SOURCE_ATI
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ClientActiveVertexStreamATI
#define GL_ALT_FUNDEF_ClientActiveVertexStreamATI
typedef void (*PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC_ALT)(GLenum);
static inline void glClientActiveVertexStreamATI(GLenum stream1)
{
	static PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC_ALT fn=(PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC_ALT)glaltGetProcAddressExtension("glClientActiveVertexStreamATI","GL_ATI_vertex_streams");
	 fn(stream1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NormalStream3bATI
#define GL_ALT_FUNDEF_NormalStream3bATI
typedef void (*PFNGLNORMALSTREAM3BATIPROC_ALT)(GLenum,GLbyte,GLbyte,GLbyte);
static inline void glNormalStream3bATI(GLenum stream1,GLbyte nx1,GLbyte ny1,GLbyte nz1)
{
	static PFNGLNORMALSTREAM3BATIPROC_ALT fn=(PFNGLNORMALSTREAM3BATIPROC_ALT)glaltGetProcAddressExtension("glNormalStream3bATI","GL_ATI_vertex_streams");
	 fn(stream1,nx1,ny1,nz1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NormalStream3bvATI
#define GL_ALT_FUNDEF_NormalStream3bvATI
typedef void (*PFNGLNORMALSTREAM3BVATIPROC_ALT)(GLenum,const GLbyte *);
static inline void glNormalStream3bvATI(GLenum stream1,const GLbyte * coords1)
{
	static PFNGLNORMALSTREAM3BVATIPROC_ALT fn=(PFNGLNORMALSTREAM3BVATIPROC_ALT)glaltGetProcAddressExtension("glNormalStream3bvATI","GL_ATI_vertex_streams");
	 fn(stream1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NormalStream3dATI
#define GL_ALT_FUNDEF_NormalStream3dATI
typedef void (*PFNGLNORMALSTREAM3DATIPROC_ALT)(GLenum,GLdouble,GLdouble,GLdouble);
static inline void glNormalStream3dATI(GLenum stream1,GLdouble nx1,GLdouble ny1,GLdouble nz1)
{
	static PFNGLNORMALSTREAM3DATIPROC_ALT fn=(PFNGLNORMALSTREAM3DATIPROC_ALT)glaltGetProcAddressExtension("glNormalStream3dATI","GL_ATI_vertex_streams");
	 fn(stream1,nx1,ny1,nz1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NormalStream3dvATI
#define GL_ALT_FUNDEF_NormalStream3dvATI
typedef void (*PFNGLNORMALSTREAM3DVATIPROC_ALT)(GLenum,const GLdouble *);
static inline void glNormalStream3dvATI(GLenum stream1,const GLdouble * coords1)
{
	static PFNGLNORMALSTREAM3DVATIPROC_ALT fn=(PFNGLNORMALSTREAM3DVATIPROC_ALT)glaltGetProcAddressExtension("glNormalStream3dvATI","GL_ATI_vertex_streams");
	 fn(stream1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NormalStream3fATI
#define GL_ALT_FUNDEF_NormalStream3fATI
typedef void (*PFNGLNORMALSTREAM3FATIPROC_ALT)(GLenum,GLfloat,GLfloat,GLfloat);
static inline void glNormalStream3fATI(GLenum stream1,GLfloat nx1,GLfloat ny1,GLfloat nz1)
{
	static PFNGLNORMALSTREAM3FATIPROC_ALT fn=(PFNGLNORMALSTREAM3FATIPROC_ALT)glaltGetProcAddressExtension("glNormalStream3fATI","GL_ATI_vertex_streams");
	 fn(stream1,nx1,ny1,nz1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NormalStream3fvATI
#define GL_ALT_FUNDEF_NormalStream3fvATI
typedef void (*PFNGLNORMALSTREAM3FVATIPROC_ALT)(GLenum,const GLfloat *);
static inline void glNormalStream3fvATI(GLenum stream1,const GLfloat * coords1)
{
	static PFNGLNORMALSTREAM3FVATIPROC_ALT fn=(PFNGLNORMALSTREAM3FVATIPROC_ALT)glaltGetProcAddressExtension("glNormalStream3fvATI","GL_ATI_vertex_streams");
	 fn(stream1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NormalStream3iATI
#define GL_ALT_FUNDEF_NormalStream3iATI
typedef void (*PFNGLNORMALSTREAM3IATIPROC_ALT)(GLenum,GLint,GLint,GLint);
static inline void glNormalStream3iATI(GLenum stream1,GLint nx1,GLint ny1,GLint nz1)
{
	static PFNGLNORMALSTREAM3IATIPROC_ALT fn=(PFNGLNORMALSTREAM3IATIPROC_ALT)glaltGetProcAddressExtension("glNormalStream3iATI","GL_ATI_vertex_streams");
	 fn(stream1,nx1,ny1,nz1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NormalStream3ivATI
#define GL_ALT_FUNDEF_NormalStream3ivATI
typedef void (*PFNGLNORMALSTREAM3IVATIPROC_ALT)(GLenum,const GLint *);
static inline void glNormalStream3ivATI(GLenum stream1,const GLint * coords1)
{
	static PFNGLNORMALSTREAM3IVATIPROC_ALT fn=(PFNGLNORMALSTREAM3IVATIPROC_ALT)glaltGetProcAddressExtension("glNormalStream3ivATI","GL_ATI_vertex_streams");
	 fn(stream1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NormalStream3sATI
#define GL_ALT_FUNDEF_NormalStream3sATI
typedef void (*PFNGLNORMALSTREAM3SATIPROC_ALT)(GLenum,GLshort,GLshort,GLshort);
static inline void glNormalStream3sATI(GLenum stream1,GLshort nx1,GLshort ny1,GLshort nz1)
{
	static PFNGLNORMALSTREAM3SATIPROC_ALT fn=(PFNGLNORMALSTREAM3SATIPROC_ALT)glaltGetProcAddressExtension("glNormalStream3sATI","GL_ATI_vertex_streams");
	 fn(stream1,nx1,ny1,nz1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NormalStream3svATI
#define GL_ALT_FUNDEF_NormalStream3svATI
typedef void (*PFNGLNORMALSTREAM3SVATIPROC_ALT)(GLenum,const GLshort *);
static inline void glNormalStream3svATI(GLenum stream1,const GLshort * coords1)
{
	static PFNGLNORMALSTREAM3SVATIPROC_ALT fn=(PFNGLNORMALSTREAM3SVATIPROC_ALT)glaltGetProcAddressExtension("glNormalStream3svATI","GL_ATI_vertex_streams");
	 fn(stream1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexBlendEnvfATI
#define GL_ALT_FUNDEF_VertexBlendEnvfATI
typedef void (*PFNGLVERTEXBLENDENVFATIPROC_ALT)(GLenum,GLfloat);
static inline void glVertexBlendEnvfATI(GLenum pname1,GLfloat param1)
{
	static PFNGLVERTEXBLENDENVFATIPROC_ALT fn=(PFNGLVERTEXBLENDENVFATIPROC_ALT)glaltGetProcAddressExtension("glVertexBlendEnvfATI","GL_ATI_vertex_streams");
	 fn(pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexBlendEnviATI
#define GL_ALT_FUNDEF_VertexBlendEnviATI
typedef void (*PFNGLVERTEXBLENDENVIATIPROC_ALT)(GLenum,GLint);
static inline void glVertexBlendEnviATI(GLenum pname1,GLint param1)
{
	static PFNGLVERTEXBLENDENVIATIPROC_ALT fn=(PFNGLVERTEXBLENDENVIATIPROC_ALT)glaltGetProcAddressExtension("glVertexBlendEnviATI","GL_ATI_vertex_streams");
	 fn(pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream1dATI
#define GL_ALT_FUNDEF_VertexStream1dATI
typedef void (*PFNGLVERTEXSTREAM1DATIPROC_ALT)(GLenum,GLdouble);
static inline void glVertexStream1dATI(GLenum stream1,GLdouble x1)
{
	static PFNGLVERTEXSTREAM1DATIPROC_ALT fn=(PFNGLVERTEXSTREAM1DATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream1dATI","GL_ATI_vertex_streams");
	 fn(stream1,x1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream1dvATI
#define GL_ALT_FUNDEF_VertexStream1dvATI
typedef void (*PFNGLVERTEXSTREAM1DVATIPROC_ALT)(GLenum,const GLdouble *);
static inline void glVertexStream1dvATI(GLenum stream1,const GLdouble * coords1)
{
	static PFNGLVERTEXSTREAM1DVATIPROC_ALT fn=(PFNGLVERTEXSTREAM1DVATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream1dvATI","GL_ATI_vertex_streams");
	 fn(stream1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream1fATI
#define GL_ALT_FUNDEF_VertexStream1fATI
typedef void (*PFNGLVERTEXSTREAM1FATIPROC_ALT)(GLenum,GLfloat);
static inline void glVertexStream1fATI(GLenum stream1,GLfloat x1)
{
	static PFNGLVERTEXSTREAM1FATIPROC_ALT fn=(PFNGLVERTEXSTREAM1FATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream1fATI","GL_ATI_vertex_streams");
	 fn(stream1,x1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream1fvATI
#define GL_ALT_FUNDEF_VertexStream1fvATI
typedef void (*PFNGLVERTEXSTREAM1FVATIPROC_ALT)(GLenum,const GLfloat *);
static inline void glVertexStream1fvATI(GLenum stream1,const GLfloat * coords1)
{
	static PFNGLVERTEXSTREAM1FVATIPROC_ALT fn=(PFNGLVERTEXSTREAM1FVATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream1fvATI","GL_ATI_vertex_streams");
	 fn(stream1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream1iATI
#define GL_ALT_FUNDEF_VertexStream1iATI
typedef void (*PFNGLVERTEXSTREAM1IATIPROC_ALT)(GLenum,GLint);
static inline void glVertexStream1iATI(GLenum stream1,GLint x1)
{
	static PFNGLVERTEXSTREAM1IATIPROC_ALT fn=(PFNGLVERTEXSTREAM1IATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream1iATI","GL_ATI_vertex_streams");
	 fn(stream1,x1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream1ivATI
#define GL_ALT_FUNDEF_VertexStream1ivATI
typedef void (*PFNGLVERTEXSTREAM1IVATIPROC_ALT)(GLenum,const GLint *);
static inline void glVertexStream1ivATI(GLenum stream1,const GLint * coords1)
{
	static PFNGLVERTEXSTREAM1IVATIPROC_ALT fn=(PFNGLVERTEXSTREAM1IVATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream1ivATI","GL_ATI_vertex_streams");
	 fn(stream1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream1sATI
#define GL_ALT_FUNDEF_VertexStream1sATI
typedef void (*PFNGLVERTEXSTREAM1SATIPROC_ALT)(GLenum,GLshort);
static inline void glVertexStream1sATI(GLenum stream1,GLshort x1)
{
	static PFNGLVERTEXSTREAM1SATIPROC_ALT fn=(PFNGLVERTEXSTREAM1SATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream1sATI","GL_ATI_vertex_streams");
	 fn(stream1,x1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream1svATI
#define GL_ALT_FUNDEF_VertexStream1svATI
typedef void (*PFNGLVERTEXSTREAM1SVATIPROC_ALT)(GLenum,const GLshort *);
static inline void glVertexStream1svATI(GLenum stream1,const GLshort * coords1)
{
	static PFNGLVERTEXSTREAM1SVATIPROC_ALT fn=(PFNGLVERTEXSTREAM1SVATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream1svATI","GL_ATI_vertex_streams");
	 fn(stream1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream2dATI
#define GL_ALT_FUNDEF_VertexStream2dATI
typedef void (*PFNGLVERTEXSTREAM2DATIPROC_ALT)(GLenum,GLdouble,GLdouble);
static inline void glVertexStream2dATI(GLenum stream1,GLdouble x1,GLdouble y1)
{
	static PFNGLVERTEXSTREAM2DATIPROC_ALT fn=(PFNGLVERTEXSTREAM2DATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream2dATI","GL_ATI_vertex_streams");
	 fn(stream1,x1,y1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream2dvATI
#define GL_ALT_FUNDEF_VertexStream2dvATI
typedef void (*PFNGLVERTEXSTREAM2DVATIPROC_ALT)(GLenum,const GLdouble *);
static inline void glVertexStream2dvATI(GLenum stream1,const GLdouble * coords1)
{
	static PFNGLVERTEXSTREAM2DVATIPROC_ALT fn=(PFNGLVERTEXSTREAM2DVATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream2dvATI","GL_ATI_vertex_streams");
	 fn(stream1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream2fATI
#define GL_ALT_FUNDEF_VertexStream2fATI
typedef void (*PFNGLVERTEXSTREAM2FATIPROC_ALT)(GLenum,GLfloat,GLfloat);
static inline void glVertexStream2fATI(GLenum stream1,GLfloat x1,GLfloat y1)
{
	static PFNGLVERTEXSTREAM2FATIPROC_ALT fn=(PFNGLVERTEXSTREAM2FATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream2fATI","GL_ATI_vertex_streams");
	 fn(stream1,x1,y1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream2fvATI
#define GL_ALT_FUNDEF_VertexStream2fvATI
typedef void (*PFNGLVERTEXSTREAM2FVATIPROC_ALT)(GLenum,const GLfloat *);
static inline void glVertexStream2fvATI(GLenum stream1,const GLfloat * coords1)
{
	static PFNGLVERTEXSTREAM2FVATIPROC_ALT fn=(PFNGLVERTEXSTREAM2FVATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream2fvATI","GL_ATI_vertex_streams");
	 fn(stream1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream2iATI
#define GL_ALT_FUNDEF_VertexStream2iATI
typedef void (*PFNGLVERTEXSTREAM2IATIPROC_ALT)(GLenum,GLint,GLint);
static inline void glVertexStream2iATI(GLenum stream1,GLint x1,GLint y1)
{
	static PFNGLVERTEXSTREAM2IATIPROC_ALT fn=(PFNGLVERTEXSTREAM2IATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream2iATI","GL_ATI_vertex_streams");
	 fn(stream1,x1,y1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream2ivATI
#define GL_ALT_FUNDEF_VertexStream2ivATI
typedef void (*PFNGLVERTEXSTREAM2IVATIPROC_ALT)(GLenum,const GLint *);
static inline void glVertexStream2ivATI(GLenum stream1,const GLint * coords1)
{
	static PFNGLVERTEXSTREAM2IVATIPROC_ALT fn=(PFNGLVERTEXSTREAM2IVATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream2ivATI","GL_ATI_vertex_streams");
	 fn(stream1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream2sATI
#define GL_ALT_FUNDEF_VertexStream2sATI
typedef void (*PFNGLVERTEXSTREAM2SATIPROC_ALT)(GLenum,GLshort,GLshort);
static inline void glVertexStream2sATI(GLenum stream1,GLshort x1,GLshort y1)
{
	static PFNGLVERTEXSTREAM2SATIPROC_ALT fn=(PFNGLVERTEXSTREAM2SATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream2sATI","GL_ATI_vertex_streams");
	 fn(stream1,x1,y1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream2svATI
#define GL_ALT_FUNDEF_VertexStream2svATI
typedef void (*PFNGLVERTEXSTREAM2SVATIPROC_ALT)(GLenum,const GLshort *);
static inline void glVertexStream2svATI(GLenum stream1,const GLshort * coords1)
{
	static PFNGLVERTEXSTREAM2SVATIPROC_ALT fn=(PFNGLVERTEXSTREAM2SVATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream2svATI","GL_ATI_vertex_streams");
	 fn(stream1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream3dATI
#define GL_ALT_FUNDEF_VertexStream3dATI
typedef void (*PFNGLVERTEXSTREAM3DATIPROC_ALT)(GLenum,GLdouble,GLdouble,GLdouble);
static inline void glVertexStream3dATI(GLenum stream1,GLdouble x1,GLdouble y1,GLdouble z1)
{
	static PFNGLVERTEXSTREAM3DATIPROC_ALT fn=(PFNGLVERTEXSTREAM3DATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream3dATI","GL_ATI_vertex_streams");
	 fn(stream1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream3dvATI
#define GL_ALT_FUNDEF_VertexStream3dvATI
typedef void (*PFNGLVERTEXSTREAM3DVATIPROC_ALT)(GLenum,const GLdouble *);
static inline void glVertexStream3dvATI(GLenum stream1,const GLdouble * coords1)
{
	static PFNGLVERTEXSTREAM3DVATIPROC_ALT fn=(PFNGLVERTEXSTREAM3DVATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream3dvATI","GL_ATI_vertex_streams");
	 fn(stream1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream3fATI
#define GL_ALT_FUNDEF_VertexStream3fATI
typedef void (*PFNGLVERTEXSTREAM3FATIPROC_ALT)(GLenum,GLfloat,GLfloat,GLfloat);
static inline void glVertexStream3fATI(GLenum stream1,GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLVERTEXSTREAM3FATIPROC_ALT fn=(PFNGLVERTEXSTREAM3FATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream3fATI","GL_ATI_vertex_streams");
	 fn(stream1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream3fvATI
#define GL_ALT_FUNDEF_VertexStream3fvATI
typedef void (*PFNGLVERTEXSTREAM3FVATIPROC_ALT)(GLenum,const GLfloat *);
static inline void glVertexStream3fvATI(GLenum stream1,const GLfloat * coords1)
{
	static PFNGLVERTEXSTREAM3FVATIPROC_ALT fn=(PFNGLVERTEXSTREAM3FVATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream3fvATI","GL_ATI_vertex_streams");
	 fn(stream1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream3iATI
#define GL_ALT_FUNDEF_VertexStream3iATI
typedef void (*PFNGLVERTEXSTREAM3IATIPROC_ALT)(GLenum,GLint,GLint,GLint);
static inline void glVertexStream3iATI(GLenum stream1,GLint x1,GLint y1,GLint z1)
{
	static PFNGLVERTEXSTREAM3IATIPROC_ALT fn=(PFNGLVERTEXSTREAM3IATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream3iATI","GL_ATI_vertex_streams");
	 fn(stream1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream3ivATI
#define GL_ALT_FUNDEF_VertexStream3ivATI
typedef void (*PFNGLVERTEXSTREAM3IVATIPROC_ALT)(GLenum,const GLint *);
static inline void glVertexStream3ivATI(GLenum stream1,const GLint * coords1)
{
	static PFNGLVERTEXSTREAM3IVATIPROC_ALT fn=(PFNGLVERTEXSTREAM3IVATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream3ivATI","GL_ATI_vertex_streams");
	 fn(stream1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream3sATI
#define GL_ALT_FUNDEF_VertexStream3sATI
typedef void (*PFNGLVERTEXSTREAM3SATIPROC_ALT)(GLenum,GLshort,GLshort,GLshort);
static inline void glVertexStream3sATI(GLenum stream1,GLshort x1,GLshort y1,GLshort z1)
{
	static PFNGLVERTEXSTREAM3SATIPROC_ALT fn=(PFNGLVERTEXSTREAM3SATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream3sATI","GL_ATI_vertex_streams");
	 fn(stream1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream3svATI
#define GL_ALT_FUNDEF_VertexStream3svATI
typedef void (*PFNGLVERTEXSTREAM3SVATIPROC_ALT)(GLenum,const GLshort *);
static inline void glVertexStream3svATI(GLenum stream1,const GLshort * coords1)
{
	static PFNGLVERTEXSTREAM3SVATIPROC_ALT fn=(PFNGLVERTEXSTREAM3SVATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream3svATI","GL_ATI_vertex_streams");
	 fn(stream1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream4dATI
#define GL_ALT_FUNDEF_VertexStream4dATI
typedef void (*PFNGLVERTEXSTREAM4DATIPROC_ALT)(GLenum,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void glVertexStream4dATI(GLenum stream1,GLdouble x1,GLdouble y1,GLdouble z1,GLdouble w1)
{
	static PFNGLVERTEXSTREAM4DATIPROC_ALT fn=(PFNGLVERTEXSTREAM4DATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream4dATI","GL_ATI_vertex_streams");
	 fn(stream1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream4dvATI
#define GL_ALT_FUNDEF_VertexStream4dvATI
typedef void (*PFNGLVERTEXSTREAM4DVATIPROC_ALT)(GLenum,const GLdouble *);
static inline void glVertexStream4dvATI(GLenum stream1,const GLdouble * coords1)
{
	static PFNGLVERTEXSTREAM4DVATIPROC_ALT fn=(PFNGLVERTEXSTREAM4DVATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream4dvATI","GL_ATI_vertex_streams");
	 fn(stream1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream4fATI
#define GL_ALT_FUNDEF_VertexStream4fATI
typedef void (*PFNGLVERTEXSTREAM4FATIPROC_ALT)(GLenum,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glVertexStream4fATI(GLenum stream1,GLfloat x1,GLfloat y1,GLfloat z1,GLfloat w1)
{
	static PFNGLVERTEXSTREAM4FATIPROC_ALT fn=(PFNGLVERTEXSTREAM4FATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream4fATI","GL_ATI_vertex_streams");
	 fn(stream1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream4fvATI
#define GL_ALT_FUNDEF_VertexStream4fvATI
typedef void (*PFNGLVERTEXSTREAM4FVATIPROC_ALT)(GLenum,const GLfloat *);
static inline void glVertexStream4fvATI(GLenum stream1,const GLfloat * coords1)
{
	static PFNGLVERTEXSTREAM4FVATIPROC_ALT fn=(PFNGLVERTEXSTREAM4FVATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream4fvATI","GL_ATI_vertex_streams");
	 fn(stream1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream4iATI
#define GL_ALT_FUNDEF_VertexStream4iATI
typedef void (*PFNGLVERTEXSTREAM4IATIPROC_ALT)(GLenum,GLint,GLint,GLint,GLint);
static inline void glVertexStream4iATI(GLenum stream1,GLint x1,GLint y1,GLint z1,GLint w1)
{
	static PFNGLVERTEXSTREAM4IATIPROC_ALT fn=(PFNGLVERTEXSTREAM4IATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream4iATI","GL_ATI_vertex_streams");
	 fn(stream1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream4ivATI
#define GL_ALT_FUNDEF_VertexStream4ivATI
typedef void (*PFNGLVERTEXSTREAM4IVATIPROC_ALT)(GLenum,const GLint *);
static inline void glVertexStream4ivATI(GLenum stream1,const GLint * coords1)
{
	static PFNGLVERTEXSTREAM4IVATIPROC_ALT fn=(PFNGLVERTEXSTREAM4IVATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream4ivATI","GL_ATI_vertex_streams");
	 fn(stream1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream4sATI
#define GL_ALT_FUNDEF_VertexStream4sATI
typedef void (*PFNGLVERTEXSTREAM4SATIPROC_ALT)(GLenum,GLshort,GLshort,GLshort,GLshort);
static inline void glVertexStream4sATI(GLenum stream1,GLshort x1,GLshort y1,GLshort z1,GLshort w1)
{
	static PFNGLVERTEXSTREAM4SATIPROC_ALT fn=(PFNGLVERTEXSTREAM4SATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream4sATI","GL_ATI_vertex_streams");
	 fn(stream1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexStream4svATI
#define GL_ALT_FUNDEF_VertexStream4svATI
typedef void (*PFNGLVERTEXSTREAM4SVATIPROC_ALT)(GLenum,const GLshort *);
static inline void glVertexStream4svATI(GLenum stream1,const GLshort * coords1)
{
	static PFNGLVERTEXSTREAM4SVATIPROC_ALT fn=(PFNGLVERTEXSTREAM4SVATIPROC_ALT)glaltGetProcAddressExtension("glVertexStream4svATI","GL_ATI_vertex_streams");
	 fn(stream1,coords1);
}
#endif
CGUARDEND

#endif

#ifndef GL_EXT_422_pixels
#define GL_EXT_422_pixels
#ifndef GL_422_EXT
#define GL_422_EXT 0x80CC
#endif //GL_422_EXT
#ifndef GL_422_REV_EXT
#define GL_422_REV_EXT 0x80CD
#endif //GL_422_REV_EXT
#ifndef GL_422_AVERAGE_EXT
#define GL_422_AVERAGE_EXT 0x80CE
#endif //GL_422_AVERAGE_EXT
#ifndef GL_422_REV_AVERAGE_EXT
#define GL_422_REV_AVERAGE_EXT 0x80CF
#endif //GL_422_REV_AVERAGE_EXT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_abgr
#define GL_EXT_abgr
#ifndef GL_ABGR_EXT
#define GL_ABGR_EXT 0x8000
#endif //GL_ABGR_EXT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_bgra
#define GL_EXT_bgra
#ifndef GL_BGR_EXT
#define GL_BGR_EXT 0x80E0
#endif //GL_BGR_EXT
#ifndef GL_BGRA_EXT
#define GL_BGRA_EXT 0x80E1
#endif //GL_BGRA_EXT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_bindable_uniform
#define GL_EXT_bindable_uniform
#ifndef GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT
#define GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT 0x8DE2
#endif //GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT
#ifndef GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT
#define GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT 0x8DE3
#endif //GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT
#ifndef GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT
#define GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT 0x8DE4
#endif //GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT
#ifndef GL_MAX_BINDABLE_UNIFORM_SIZE_EXT
#define GL_MAX_BINDABLE_UNIFORM_SIZE_EXT 0x8DED
#endif //GL_MAX_BINDABLE_UNIFORM_SIZE_EXT
#ifndef GL_UNIFORM_BUFFER_EXT
#define GL_UNIFORM_BUFFER_EXT 0x8DEE
#endif //GL_UNIFORM_BUFFER_EXT
#ifndef GL_UNIFORM_BUFFER_BINDING_EXT
#define GL_UNIFORM_BUFFER_BINDING_EXT 0x8DEF
#endif //GL_UNIFORM_BUFFER_BINDING_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetUniformBufferSizeEXT
#define GL_ALT_FUNDEF_GetUniformBufferSizeEXT
typedef GLint (*PFNGLGETUNIFORMBUFFERSIZEEXTPROC_ALT)(GLuint,GLint);
static inline GLint glGetUniformBufferSizeEXT(GLuint program1,GLint location1)
{
	static PFNGLGETUNIFORMBUFFERSIZEEXTPROC_ALT fn=(PFNGLGETUNIFORMBUFFERSIZEEXTPROC_ALT)glaltGetProcAddressExtension("glGetUniformBufferSizeEXT","GL_EXT_bindable_uniform");
	return fn(program1,location1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetUniformOffsetEXT
#define GL_ALT_FUNDEF_GetUniformOffsetEXT
typedef GLintptr (*PFNGLGETUNIFORMOFFSETEXTPROC_ALT)(GLuint,GLint);
static inline GLintptr glGetUniformOffsetEXT(GLuint program1,GLint location1)
{
	static PFNGLGETUNIFORMOFFSETEXTPROC_ALT fn=(PFNGLGETUNIFORMOFFSETEXTPROC_ALT)glaltGetProcAddressExtension("glGetUniformOffsetEXT","GL_EXT_bindable_uniform");
	return fn(program1,location1);
}
#endif

#ifndef	GL_ALT_FUNDEF_UniformBufferEXT
#define GL_ALT_FUNDEF_UniformBufferEXT
typedef void (*PFNGLUNIFORMBUFFEREXTPROC_ALT)(GLuint,GLint,GLuint);
static inline void glUniformBufferEXT(GLuint program1,GLint location1,GLuint buffer1)
{
	static PFNGLUNIFORMBUFFEREXTPROC_ALT fn=(PFNGLUNIFORMBUFFEREXTPROC_ALT)glaltGetProcAddressExtension("glUniformBufferEXT","GL_EXT_bindable_uniform");
	 fn(program1,location1,buffer1);
}
#endif
CGUARDEND

#endif

#ifndef GL_EXT_blend_color
#define GL_EXT_blend_color
#ifndef GL_CONSTANT_COLOR_EXT
#define GL_CONSTANT_COLOR_EXT 0x8001
#endif //GL_CONSTANT_COLOR_EXT
#ifndef GL_ONE_MINUS_CONSTANT_COLOR_EXT
#define GL_ONE_MINUS_CONSTANT_COLOR_EXT 0x8002
#endif //GL_ONE_MINUS_CONSTANT_COLOR_EXT
#ifndef GL_CONSTANT_ALPHA_EXT
#define GL_CONSTANT_ALPHA_EXT 0x8003
#endif //GL_CONSTANT_ALPHA_EXT
#ifndef GL_ONE_MINUS_CONSTANT_ALPHA_EXT
#define GL_ONE_MINUS_CONSTANT_ALPHA_EXT 0x8004
#endif //GL_ONE_MINUS_CONSTANT_ALPHA_EXT
#ifndef GL_BLEND_COLOR_EXT
#define GL_BLEND_COLOR_EXT 0x8005
#endif //GL_BLEND_COLOR_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BlendColorEXT
#define GL_ALT_FUNDEF_BlendColorEXT
typedef void (*PFNGLBLENDCOLOREXTPROC_ALT)(GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glBlendColorEXT(GLfloat red1,GLfloat green1,GLfloat blue1,GLfloat alpha1)
{
	static PFNGLBLENDCOLOREXTPROC_ALT fn=(PFNGLBLENDCOLOREXTPROC_ALT)glaltGetProcAddressExtension("glBlendColorEXT","GL_EXT_blend_color");
	 fn(red1,green1,blue1,alpha1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_blend_equation_separate
#define GL_EXT_blend_equation_separate
#ifndef GL_BLEND_EQUATION_RGB_EXT
#define GL_BLEND_EQUATION_RGB_EXT 0x8009
#endif //GL_BLEND_EQUATION_RGB_EXT
#ifndef GL_BLEND_EQUATION_ALPHA_EXT
#define GL_BLEND_EQUATION_ALPHA_EXT 0x883D
#endif //GL_BLEND_EQUATION_ALPHA_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BlendEquationSeparateEXT
#define GL_ALT_FUNDEF_BlendEquationSeparateEXT
typedef void (*PFNGLBLENDEQUATIONSEPARATEEXTPROC_ALT)(GLenum,GLenum);
static inline void glBlendEquationSeparateEXT(GLenum modeRGB1,GLenum modeAlpha1)
{
	static PFNGLBLENDEQUATIONSEPARATEEXTPROC_ALT fn=(PFNGLBLENDEQUATIONSEPARATEEXTPROC_ALT)glaltGetProcAddressExtension("glBlendEquationSeparateEXT","GL_EXT_blend_equation_separate");
	 fn(modeRGB1,modeAlpha1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_blend_func_separate
#define GL_EXT_blend_func_separate
#ifndef GL_BLEND_DST_RGB_EXT
#define GL_BLEND_DST_RGB_EXT 0x80C8
#endif //GL_BLEND_DST_RGB_EXT
#ifndef GL_BLEND_SRC_RGB_EXT
#define GL_BLEND_SRC_RGB_EXT 0x80C9
#endif //GL_BLEND_SRC_RGB_EXT
#ifndef GL_BLEND_DST_ALPHA_EXT
#define GL_BLEND_DST_ALPHA_EXT 0x80CA
#endif //GL_BLEND_DST_ALPHA_EXT
#ifndef GL_BLEND_SRC_ALPHA_EXT
#define GL_BLEND_SRC_ALPHA_EXT 0x80CB
#endif //GL_BLEND_SRC_ALPHA_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BlendFuncSeparateEXT
#define GL_ALT_FUNDEF_BlendFuncSeparateEXT
typedef void (*PFNGLBLENDFUNCSEPARATEEXTPROC_ALT)(GLenum,GLenum,GLenum,GLenum);
static inline void glBlendFuncSeparateEXT(GLenum sfactorRGB1,GLenum dfactorRGB1,GLenum sfactorAlpha1,GLenum dfactorAlpha1)
{
	static PFNGLBLENDFUNCSEPARATEEXTPROC_ALT fn=(PFNGLBLENDFUNCSEPARATEEXTPROC_ALT)glaltGetProcAddressExtension("glBlendFuncSeparateEXT","GL_EXT_blend_func_separate");
	 fn(sfactorRGB1,dfactorRGB1,sfactorAlpha1,dfactorAlpha1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_blend_logic_op
#define GL_EXT_blend_logic_op
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_blend_minmax
#define GL_EXT_blend_minmax
#ifndef GL_FUNC_ADD_EXT
#define GL_FUNC_ADD_EXT 0x8006
#endif //GL_FUNC_ADD_EXT
#ifndef GL_MIN_EXT
#define GL_MIN_EXT 0x8007
#endif //GL_MIN_EXT
#ifndef GL_MAX_EXT
#define GL_MAX_EXT 0x8008
#endif //GL_MAX_EXT
#ifndef GL_BLEND_EQUATION_EXT
#define GL_BLEND_EQUATION_EXT 0x8009
#endif //GL_BLEND_EQUATION_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BlendEquationEXT
#define GL_ALT_FUNDEF_BlendEquationEXT
typedef void (*PFNGLBLENDEQUATIONEXTPROC_ALT)(GLenum);
static inline void glBlendEquationEXT(GLenum mode1)
{
	static PFNGLBLENDEQUATIONEXTPROC_ALT fn=(PFNGLBLENDEQUATIONEXTPROC_ALT)glaltGetProcAddressExtension("glBlendEquationEXT","GL_EXT_blend_minmax");
	 fn(mode1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_blend_subtract
#define GL_EXT_blend_subtract
#ifndef GL_FUNC_SUBTRACT_EXT
#define GL_FUNC_SUBTRACT_EXT 0x800A
#endif //GL_FUNC_SUBTRACT_EXT
#ifndef GL_FUNC_REVERSE_SUBTRACT_EXT
#define GL_FUNC_REVERSE_SUBTRACT_EXT 0x800B
#endif //GL_FUNC_REVERSE_SUBTRACT_EXT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_clip_volume_hint
#define GL_EXT_clip_volume_hint
#ifndef GL_CLIP_VOLUME_CLIPPING_HINT_EXT
#define GL_CLIP_VOLUME_CLIPPING_HINT_EXT 0x80F0
#endif //GL_CLIP_VOLUME_CLIPPING_HINT_EXT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_cmyka
#define GL_EXT_cmyka
#ifndef GL_CMYK_EXT
#define GL_CMYK_EXT 0x800C
#endif //GL_CMYK_EXT
#ifndef GL_CMYKA_EXT
#define GL_CMYKA_EXT 0x800D
#endif //GL_CMYKA_EXT
#ifndef GL_PACK_CMYK_HINT_EXT
#define GL_PACK_CMYK_HINT_EXT 0x800E
#endif //GL_PACK_CMYK_HINT_EXT
#ifndef GL_UNPACK_CMYK_HINT_EXT
#define GL_UNPACK_CMYK_HINT_EXT 0x800F
#endif //GL_UNPACK_CMYK_HINT_EXT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_color_subtable
#define GL_EXT_color_subtable
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ColorSubTableEXT
#define GL_ALT_FUNDEF_ColorSubTableEXT
typedef void (*PFNGLCOLORSUBTABLEEXTPROC_ALT)(GLenum,GLsizei,GLsizei,GLenum,GLenum,const void *);
static inline void glColorSubTableEXT(GLenum target1,GLsizei start1,GLsizei count1,GLenum format1,GLenum type1,const void * data1)
{
	static PFNGLCOLORSUBTABLEEXTPROC_ALT fn=(PFNGLCOLORSUBTABLEEXTPROC_ALT)glaltGetProcAddressExtension("glColorSubTableEXT","GL_EXT_color_subtable");
	 fn(target1,start1,count1,format1,type1,data1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_CopyColorSubTableEXT
#define GL_ALT_FUNDEF_CopyColorSubTableEXT
typedef void (*PFNGLCOPYCOLORSUBTABLEEXTPROC_ALT)(GLenum,GLsizei,GLint,GLint,GLsizei);
static inline void glCopyColorSubTableEXT(GLenum target1,GLsizei start1,GLint x1,GLint y1,GLsizei width1)
{
	static PFNGLCOPYCOLORSUBTABLEEXTPROC_ALT fn=(PFNGLCOPYCOLORSUBTABLEEXTPROC_ALT)glaltGetProcAddressExtension("glCopyColorSubTableEXT","GL_EXT_color_subtable");
	 fn(target1,start1,x1,y1,width1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_compiled_vertex_array
#define GL_EXT_compiled_vertex_array
#ifndef GL_ARRAY_ELEMENT_LOCK_FIRST_EXT
#define GL_ARRAY_ELEMENT_LOCK_FIRST_EXT 0x81A8
#endif //GL_ARRAY_ELEMENT_LOCK_FIRST_EXT
#ifndef GL_ARRAY_ELEMENT_LOCK_COUNT_EXT
#define GL_ARRAY_ELEMENT_LOCK_COUNT_EXT 0x81A9
#endif //GL_ARRAY_ELEMENT_LOCK_COUNT_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_LockArraysEXT
#define GL_ALT_FUNDEF_LockArraysEXT
typedef void (*PFNGLLOCKARRAYSEXTPROC_ALT)(GLint,GLsizei);
static inline void glLockArraysEXT(GLint first1,GLsizei count1)
{
	static PFNGLLOCKARRAYSEXTPROC_ALT fn=(PFNGLLOCKARRAYSEXTPROC_ALT)glaltGetProcAddressExtension("glLockArraysEXT","GL_EXT_compiled_vertex_array");
	 fn(first1,count1);
}
#endif

#ifndef	GL_ALT_FUNDEF_UnlockArraysEXT
#define GL_ALT_FUNDEF_UnlockArraysEXT
typedef void (*PFNGLUNLOCKARRAYSEXTPROC_ALT)();
static inline void glUnlockArraysEXT()
{
	static PFNGLUNLOCKARRAYSEXTPROC_ALT fn=(PFNGLUNLOCKARRAYSEXTPROC_ALT)glaltGetProcAddressExtension("glUnlockArraysEXT","GL_EXT_compiled_vertex_array");
	 fn();
}
#endif
CGUARDEND

#endif

#ifndef GL_EXT_convolution
#define GL_EXT_convolution
#ifndef GL_CONVOLUTION_1D_EXT
#define GL_CONVOLUTION_1D_EXT 0x8010
#endif //GL_CONVOLUTION_1D_EXT
#ifndef GL_CONVOLUTION_2D_EXT
#define GL_CONVOLUTION_2D_EXT 0x8011
#endif //GL_CONVOLUTION_2D_EXT
#ifndef GL_SEPARABLE_2D_EXT
#define GL_SEPARABLE_2D_EXT 0x8012
#endif //GL_SEPARABLE_2D_EXT
#ifndef GL_CONVOLUTION_BORDER_MODE_EXT
#define GL_CONVOLUTION_BORDER_MODE_EXT 0x8013
#endif //GL_CONVOLUTION_BORDER_MODE_EXT
#ifndef GL_CONVOLUTION_FILTER_SCALE_EXT
#define GL_CONVOLUTION_FILTER_SCALE_EXT 0x8014
#endif //GL_CONVOLUTION_FILTER_SCALE_EXT
#ifndef GL_CONVOLUTION_FILTER_BIAS_EXT
#define GL_CONVOLUTION_FILTER_BIAS_EXT 0x8015
#endif //GL_CONVOLUTION_FILTER_BIAS_EXT
#ifndef GL_REDUCE_EXT
#define GL_REDUCE_EXT 0x8016
#endif //GL_REDUCE_EXT
#ifndef GL_CONVOLUTION_FORMAT_EXT
#define GL_CONVOLUTION_FORMAT_EXT 0x8017
#endif //GL_CONVOLUTION_FORMAT_EXT
#ifndef GL_CONVOLUTION_WIDTH_EXT
#define GL_CONVOLUTION_WIDTH_EXT 0x8018
#endif //GL_CONVOLUTION_WIDTH_EXT
#ifndef GL_CONVOLUTION_HEIGHT_EXT
#define GL_CONVOLUTION_HEIGHT_EXT 0x8019
#endif //GL_CONVOLUTION_HEIGHT_EXT
#ifndef GL_MAX_CONVOLUTION_WIDTH_EXT
#define GL_MAX_CONVOLUTION_WIDTH_EXT 0x801A
#endif //GL_MAX_CONVOLUTION_WIDTH_EXT
#ifndef GL_MAX_CONVOLUTION_HEIGHT_EXT
#define GL_MAX_CONVOLUTION_HEIGHT_EXT 0x801B
#endif //GL_MAX_CONVOLUTION_HEIGHT_EXT
#ifndef GL_POST_CONVOLUTION_RED_SCALE_EXT
#define GL_POST_CONVOLUTION_RED_SCALE_EXT 0x801C
#endif //GL_POST_CONVOLUTION_RED_SCALE_EXT
#ifndef GL_POST_CONVOLUTION_GREEN_SCALE_EXT
#define GL_POST_CONVOLUTION_GREEN_SCALE_EXT 0x801D
#endif //GL_POST_CONVOLUTION_GREEN_SCALE_EXT
#ifndef GL_POST_CONVOLUTION_BLUE_SCALE_EXT
#define GL_POST_CONVOLUTION_BLUE_SCALE_EXT 0x801E
#endif //GL_POST_CONVOLUTION_BLUE_SCALE_EXT
#ifndef GL_POST_CONVOLUTION_ALPHA_SCALE_EXT
#define GL_POST_CONVOLUTION_ALPHA_SCALE_EXT 0x801F
#endif //GL_POST_CONVOLUTION_ALPHA_SCALE_EXT
#ifndef GL_POST_CONVOLUTION_RED_BIAS_EXT
#define GL_POST_CONVOLUTION_RED_BIAS_EXT 0x8020
#endif //GL_POST_CONVOLUTION_RED_BIAS_EXT
#ifndef GL_POST_CONVOLUTION_GREEN_BIAS_EXT
#define GL_POST_CONVOLUTION_GREEN_BIAS_EXT 0x8021
#endif //GL_POST_CONVOLUTION_GREEN_BIAS_EXT
#ifndef GL_POST_CONVOLUTION_BLUE_BIAS_EXT
#define GL_POST_CONVOLUTION_BLUE_BIAS_EXT 0x8022
#endif //GL_POST_CONVOLUTION_BLUE_BIAS_EXT
#ifndef GL_POST_CONVOLUTION_ALPHA_BIAS_EXT
#define GL_POST_CONVOLUTION_ALPHA_BIAS_EXT 0x8023
#endif //GL_POST_CONVOLUTION_ALPHA_BIAS_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ConvolutionFilter1DEXT
#define GL_ALT_FUNDEF_ConvolutionFilter1DEXT
typedef void (*PFNGLCONVOLUTIONFILTER1DEXTPROC_ALT)(GLenum,GLenum,GLsizei,GLenum,GLenum,const void *);
static inline void glConvolutionFilter1DEXT(GLenum target1,GLenum internalformat1,GLsizei width1,GLenum format1,GLenum type1,const void * image1)
{
	static PFNGLCONVOLUTIONFILTER1DEXTPROC_ALT fn=(PFNGLCONVOLUTIONFILTER1DEXTPROC_ALT)glaltGetProcAddressExtension("glConvolutionFilter1DEXT","GL_EXT_convolution");
	 fn(target1,internalformat1,width1,format1,type1,image1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ConvolutionFilter2DEXT
#define GL_ALT_FUNDEF_ConvolutionFilter2DEXT
typedef void (*PFNGLCONVOLUTIONFILTER2DEXTPROC_ALT)(GLenum,GLenum,GLsizei,GLsizei,GLenum,GLenum,const void *);
static inline void glConvolutionFilter2DEXT(GLenum target1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLenum format1,GLenum type1,const void * image1)
{
	static PFNGLCONVOLUTIONFILTER2DEXTPROC_ALT fn=(PFNGLCONVOLUTIONFILTER2DEXTPROC_ALT)glaltGetProcAddressExtension("glConvolutionFilter2DEXT","GL_EXT_convolution");
	 fn(target1,internalformat1,width1,height1,format1,type1,image1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ConvolutionParameterfEXT
#define GL_ALT_FUNDEF_ConvolutionParameterfEXT
typedef void (*PFNGLCONVOLUTIONPARAMETERFEXTPROC_ALT)(GLenum,GLenum,GLfloat);
static inline void glConvolutionParameterfEXT(GLenum target1,GLenum pname1,GLfloat params1)
{
	static PFNGLCONVOLUTIONPARAMETERFEXTPROC_ALT fn=(PFNGLCONVOLUTIONPARAMETERFEXTPROC_ALT)glaltGetProcAddressExtension("glConvolutionParameterfEXT","GL_EXT_convolution");
	 fn(target1,pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ConvolutionParameterfvEXT
#define GL_ALT_FUNDEF_ConvolutionParameterfvEXT
typedef void (*PFNGLCONVOLUTIONPARAMETERFVEXTPROC_ALT)(GLenum,GLenum,const GLfloat *);
static inline void glConvolutionParameterfvEXT(GLenum target1,GLenum pname1,const GLfloat * params1)
{
	static PFNGLCONVOLUTIONPARAMETERFVEXTPROC_ALT fn=(PFNGLCONVOLUTIONPARAMETERFVEXTPROC_ALT)glaltGetProcAddressExtension("glConvolutionParameterfvEXT","GL_EXT_convolution");
	 fn(target1,pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ConvolutionParameteriEXT
#define GL_ALT_FUNDEF_ConvolutionParameteriEXT
typedef void (*PFNGLCONVOLUTIONPARAMETERIEXTPROC_ALT)(GLenum,GLenum,GLint);
static inline void glConvolutionParameteriEXT(GLenum target1,GLenum pname1,GLint params1)
{
	static PFNGLCONVOLUTIONPARAMETERIEXTPROC_ALT fn=(PFNGLCONVOLUTIONPARAMETERIEXTPROC_ALT)glaltGetProcAddressExtension("glConvolutionParameteriEXT","GL_EXT_convolution");
	 fn(target1,pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ConvolutionParameterivEXT
#define GL_ALT_FUNDEF_ConvolutionParameterivEXT
typedef void (*PFNGLCONVOLUTIONPARAMETERIVEXTPROC_ALT)(GLenum,GLenum,const GLint *);
static inline void glConvolutionParameterivEXT(GLenum target1,GLenum pname1,const GLint * params1)
{
	static PFNGLCONVOLUTIONPARAMETERIVEXTPROC_ALT fn=(PFNGLCONVOLUTIONPARAMETERIVEXTPROC_ALT)glaltGetProcAddressExtension("glConvolutionParameterivEXT","GL_EXT_convolution");
	 fn(target1,pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_CopyConvolutionFilter1DEXT
#define GL_ALT_FUNDEF_CopyConvolutionFilter1DEXT
typedef void (*PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC_ALT)(GLenum,GLenum,GLint,GLint,GLsizei);
static inline void glCopyConvolutionFilter1DEXT(GLenum target1,GLenum internalformat1,GLint x1,GLint y1,GLsizei width1)
{
	static PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC_ALT fn=(PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC_ALT)glaltGetProcAddressExtension("glCopyConvolutionFilter1DEXT","GL_EXT_convolution");
	 fn(target1,internalformat1,x1,y1,width1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_CopyConvolutionFilter2DEXT
#define GL_ALT_FUNDEF_CopyConvolutionFilter2DEXT
typedef void (*PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC_ALT)(GLenum,GLenum,GLint,GLint,GLsizei,GLsizei);
static inline void glCopyConvolutionFilter2DEXT(GLenum target1,GLenum internalformat1,GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
	static PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC_ALT fn=(PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC_ALT)glaltGetProcAddressExtension("glCopyConvolutionFilter2DEXT","GL_EXT_convolution");
	 fn(target1,internalformat1,x1,y1,width1,height1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetConvolutionFilterEXT
#define GL_ALT_FUNDEF_GetConvolutionFilterEXT
typedef void (*PFNGLGETCONVOLUTIONFILTEREXTPROC_ALT)(GLenum,GLenum,GLenum,void *);
static inline void glGetConvolutionFilterEXT(GLenum target1,GLenum format1,GLenum type1,void * image1)
{
	static PFNGLGETCONVOLUTIONFILTEREXTPROC_ALT fn=(PFNGLGETCONVOLUTIONFILTEREXTPROC_ALT)glaltGetProcAddressExtension("glGetConvolutionFilterEXT","GL_EXT_convolution");
	 fn(target1,format1,type1,image1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetConvolutionParameterfvEXT
#define GL_ALT_FUNDEF_GetConvolutionParameterfvEXT
typedef void (*PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC_ALT)(GLenum,GLenum,GLfloat *);
static inline void glGetConvolutionParameterfvEXT(GLenum target1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC_ALT fn=(PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC_ALT)glaltGetProcAddressExtension("glGetConvolutionParameterfvEXT","GL_EXT_convolution");
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetConvolutionParameterivEXT
#define GL_ALT_FUNDEF_GetConvolutionParameterivEXT
typedef void (*PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetConvolutionParameterivEXT(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC_ALT fn=(PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC_ALT)glaltGetProcAddressExtension("glGetConvolutionParameterivEXT","GL_EXT_convolution");
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetSeparableFilterEXT
#define GL_ALT_FUNDEF_GetSeparableFilterEXT
typedef void (*PFNGLGETSEPARABLEFILTEREXTPROC_ALT)(GLenum,GLenum,GLenum,void *,void *,void *);
static inline void glGetSeparableFilterEXT(GLenum target1,GLenum format1,GLenum type1,void * row1,void * column1,void * span1)
{
	static PFNGLGETSEPARABLEFILTEREXTPROC_ALT fn=(PFNGLGETSEPARABLEFILTEREXTPROC_ALT)glaltGetProcAddressExtension("glGetSeparableFilterEXT","GL_EXT_convolution");
	 fn(target1,format1,type1,row1,column1,span1);
}
#endif

#ifndef	GL_ALT_FUNDEF_SeparableFilter2DEXT
#define GL_ALT_FUNDEF_SeparableFilter2DEXT
typedef void (*PFNGLSEPARABLEFILTER2DEXTPROC_ALT)(GLenum,GLenum,GLsizei,GLsizei,GLenum,GLenum,const void *,const void *);
static inline void glSeparableFilter2DEXT(GLenum target1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLenum format1,GLenum type1,const void * row1,const void * column1)
{
	static PFNGLSEPARABLEFILTER2DEXTPROC_ALT fn=(PFNGLSEPARABLEFILTER2DEXTPROC_ALT)glaltGetProcAddressExtension("glSeparableFilter2DEXT","GL_EXT_convolution");
	 fn(target1,internalformat1,width1,height1,format1,type1,row1,column1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_coordinate_frame
#define GL_EXT_coordinate_frame
#ifndef GL_TANGENT_ARRAY_EXT
#define GL_TANGENT_ARRAY_EXT 0x8439
#endif //GL_TANGENT_ARRAY_EXT
#ifndef GL_BINORMAL_ARRAY_EXT
#define GL_BINORMAL_ARRAY_EXT 0x843A
#endif //GL_BINORMAL_ARRAY_EXT
#ifndef GL_CURRENT_TANGENT_EXT
#define GL_CURRENT_TANGENT_EXT 0x843B
#endif //GL_CURRENT_TANGENT_EXT
#ifndef GL_CURRENT_BINORMAL_EXT
#define GL_CURRENT_BINORMAL_EXT 0x843C
#endif //GL_CURRENT_BINORMAL_EXT
#ifndef GL_TANGENT_ARRAY_TYPE_EXT
#define GL_TANGENT_ARRAY_TYPE_EXT 0x843E
#endif //GL_TANGENT_ARRAY_TYPE_EXT
#ifndef GL_TANGENT_ARRAY_STRIDE_EXT
#define GL_TANGENT_ARRAY_STRIDE_EXT 0x843F
#endif //GL_TANGENT_ARRAY_STRIDE_EXT
#ifndef GL_BINORMAL_ARRAY_TYPE_EXT
#define GL_BINORMAL_ARRAY_TYPE_EXT 0x8440
#endif //GL_BINORMAL_ARRAY_TYPE_EXT
#ifndef GL_BINORMAL_ARRAY_STRIDE_EXT
#define GL_BINORMAL_ARRAY_STRIDE_EXT 0x8441
#endif //GL_BINORMAL_ARRAY_STRIDE_EXT
#ifndef GL_TANGENT_ARRAY_POINTER_EXT
#define GL_TANGENT_ARRAY_POINTER_EXT 0x8442
#endif //GL_TANGENT_ARRAY_POINTER_EXT
#ifndef GL_BINORMAL_ARRAY_POINTER_EXT
#define GL_BINORMAL_ARRAY_POINTER_EXT 0x8443
#endif //GL_BINORMAL_ARRAY_POINTER_EXT
#ifndef GL_MAP1_TANGENT_EXT
#define GL_MAP1_TANGENT_EXT 0x8444
#endif //GL_MAP1_TANGENT_EXT
#ifndef GL_MAP2_TANGENT_EXT
#define GL_MAP2_TANGENT_EXT 0x8445
#endif //GL_MAP2_TANGENT_EXT
#ifndef GL_MAP1_BINORMAL_EXT
#define GL_MAP1_BINORMAL_EXT 0x8446
#endif //GL_MAP1_BINORMAL_EXT
#ifndef GL_MAP2_BINORMAL_EXT
#define GL_MAP2_BINORMAL_EXT 0x8447
#endif //GL_MAP2_BINORMAL_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_Binormal3bEXT
#define GL_ALT_FUNDEF_Binormal3bEXT
typedef void (*PFNGLBINORMAL3BEXTPROC_ALT)(GLbyte,GLbyte,GLbyte);
static inline void glBinormal3bEXT(GLbyte bx1,GLbyte by1,GLbyte bz1)
{
	static PFNGLBINORMAL3BEXTPROC_ALT fn=(PFNGLBINORMAL3BEXTPROC_ALT)glaltGetProcAddressExtension("glBinormal3bEXT","GL_EXT_coordinate_frame");
	 fn(bx1,by1,bz1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Binormal3bvEXT
#define GL_ALT_FUNDEF_Binormal3bvEXT
typedef void (*PFNGLBINORMAL3BVEXTPROC_ALT)(const GLbyte *);
static inline void glBinormal3bvEXT(const GLbyte * v1)
{
	static PFNGLBINORMAL3BVEXTPROC_ALT fn=(PFNGLBINORMAL3BVEXTPROC_ALT)glaltGetProcAddressExtension("glBinormal3bvEXT","GL_EXT_coordinate_frame");
	 fn(v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Binormal3dEXT
#define GL_ALT_FUNDEF_Binormal3dEXT
typedef void (*PFNGLBINORMAL3DEXTPROC_ALT)(GLdouble,GLdouble,GLdouble);
static inline void glBinormal3dEXT(GLdouble bx1,GLdouble by1,GLdouble bz1)
{
	static PFNGLBINORMAL3DEXTPROC_ALT fn=(PFNGLBINORMAL3DEXTPROC_ALT)glaltGetProcAddressExtension("glBinormal3dEXT","GL_EXT_coordinate_frame");
	 fn(bx1,by1,bz1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Binormal3dvEXT
#define GL_ALT_FUNDEF_Binormal3dvEXT
typedef void (*PFNGLBINORMAL3DVEXTPROC_ALT)(const GLdouble *);
static inline void glBinormal3dvEXT(const GLdouble * v1)
{
	static PFNGLBINORMAL3DVEXTPROC_ALT fn=(PFNGLBINORMAL3DVEXTPROC_ALT)glaltGetProcAddressExtension("glBinormal3dvEXT","GL_EXT_coordinate_frame");
	 fn(v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Binormal3fEXT
#define GL_ALT_FUNDEF_Binormal3fEXT
typedef void (*PFNGLBINORMAL3FEXTPROC_ALT)(GLfloat,GLfloat,GLfloat);
static inline void glBinormal3fEXT(GLfloat bx1,GLfloat by1,GLfloat bz1)
{
	static PFNGLBINORMAL3FEXTPROC_ALT fn=(PFNGLBINORMAL3FEXTPROC_ALT)glaltGetProcAddressExtension("glBinormal3fEXT","GL_EXT_coordinate_frame");
	 fn(bx1,by1,bz1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Binormal3fvEXT
#define GL_ALT_FUNDEF_Binormal3fvEXT
typedef void (*PFNGLBINORMAL3FVEXTPROC_ALT)(const GLfloat *);
static inline void glBinormal3fvEXT(const GLfloat * v1)
{
	static PFNGLBINORMAL3FVEXTPROC_ALT fn=(PFNGLBINORMAL3FVEXTPROC_ALT)glaltGetProcAddressExtension("glBinormal3fvEXT","GL_EXT_coordinate_frame");
	 fn(v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Binormal3iEXT
#define GL_ALT_FUNDEF_Binormal3iEXT
typedef void (*PFNGLBINORMAL3IEXTPROC_ALT)(GLint,GLint,GLint);
static inline void glBinormal3iEXT(GLint bx1,GLint by1,GLint bz1)
{
	static PFNGLBINORMAL3IEXTPROC_ALT fn=(PFNGLBINORMAL3IEXTPROC_ALT)glaltGetProcAddressExtension("glBinormal3iEXT","GL_EXT_coordinate_frame");
	 fn(bx1,by1,bz1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Binormal3ivEXT
#define GL_ALT_FUNDEF_Binormal3ivEXT
typedef void (*PFNGLBINORMAL3IVEXTPROC_ALT)(const GLint *);
static inline void glBinormal3ivEXT(const GLint * v1)
{
	static PFNGLBINORMAL3IVEXTPROC_ALT fn=(PFNGLBINORMAL3IVEXTPROC_ALT)glaltGetProcAddressExtension("glBinormal3ivEXT","GL_EXT_coordinate_frame");
	 fn(v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Binormal3sEXT
#define GL_ALT_FUNDEF_Binormal3sEXT
typedef void (*PFNGLBINORMAL3SEXTPROC_ALT)(GLshort,GLshort,GLshort);
static inline void glBinormal3sEXT(GLshort bx1,GLshort by1,GLshort bz1)
{
	static PFNGLBINORMAL3SEXTPROC_ALT fn=(PFNGLBINORMAL3SEXTPROC_ALT)glaltGetProcAddressExtension("glBinormal3sEXT","GL_EXT_coordinate_frame");
	 fn(bx1,by1,bz1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Binormal3svEXT
#define GL_ALT_FUNDEF_Binormal3svEXT
typedef void (*PFNGLBINORMAL3SVEXTPROC_ALT)(const GLshort *);
static inline void glBinormal3svEXT(const GLshort * v1)
{
	static PFNGLBINORMAL3SVEXTPROC_ALT fn=(PFNGLBINORMAL3SVEXTPROC_ALT)glaltGetProcAddressExtension("glBinormal3svEXT","GL_EXT_coordinate_frame");
	 fn(v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_BinormalPointerEXT
#define GL_ALT_FUNDEF_BinormalPointerEXT
typedef void (*PFNGLBINORMALPOINTEREXTPROC_ALT)(GLenum,GLsizei,const void *);
static inline void glBinormalPointerEXT(GLenum type1,GLsizei stride1,const void * pointer1)
{
	static PFNGLBINORMALPOINTEREXTPROC_ALT fn=(PFNGLBINORMALPOINTEREXTPROC_ALT)glaltGetProcAddressExtension("glBinormalPointerEXT","GL_EXT_coordinate_frame");
	 fn(type1,stride1,pointer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Tangent3bEXT
#define GL_ALT_FUNDEF_Tangent3bEXT
typedef void (*PFNGLTANGENT3BEXTPROC_ALT)(GLbyte,GLbyte,GLbyte);
static inline void glTangent3bEXT(GLbyte tx1,GLbyte ty1,GLbyte tz1)
{
	static PFNGLTANGENT3BEXTPROC_ALT fn=(PFNGLTANGENT3BEXTPROC_ALT)glaltGetProcAddressExtension("glTangent3bEXT","GL_EXT_coordinate_frame");
	 fn(tx1,ty1,tz1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Tangent3bvEXT
#define GL_ALT_FUNDEF_Tangent3bvEXT
typedef void (*PFNGLTANGENT3BVEXTPROC_ALT)(const GLbyte *);
static inline void glTangent3bvEXT(const GLbyte * v1)
{
	static PFNGLTANGENT3BVEXTPROC_ALT fn=(PFNGLTANGENT3BVEXTPROC_ALT)glaltGetProcAddressExtension("glTangent3bvEXT","GL_EXT_coordinate_frame");
	 fn(v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Tangent3dEXT
#define GL_ALT_FUNDEF_Tangent3dEXT
typedef void (*PFNGLTANGENT3DEXTPROC_ALT)(GLdouble,GLdouble,GLdouble);
static inline void glTangent3dEXT(GLdouble tx1,GLdouble ty1,GLdouble tz1)
{
	static PFNGLTANGENT3DEXTPROC_ALT fn=(PFNGLTANGENT3DEXTPROC_ALT)glaltGetProcAddressExtension("glTangent3dEXT","GL_EXT_coordinate_frame");
	 fn(tx1,ty1,tz1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Tangent3dvEXT
#define GL_ALT_FUNDEF_Tangent3dvEXT
typedef void (*PFNGLTANGENT3DVEXTPROC_ALT)(const GLdouble *);
static inline void glTangent3dvEXT(const GLdouble * v1)
{
	static PFNGLTANGENT3DVEXTPROC_ALT fn=(PFNGLTANGENT3DVEXTPROC_ALT)glaltGetProcAddressExtension("glTangent3dvEXT","GL_EXT_coordinate_frame");
	 fn(v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Tangent3fEXT
#define GL_ALT_FUNDEF_Tangent3fEXT
typedef void (*PFNGLTANGENT3FEXTPROC_ALT)(GLfloat,GLfloat,GLfloat);
static inline void glTangent3fEXT(GLfloat tx1,GLfloat ty1,GLfloat tz1)
{
	static PFNGLTANGENT3FEXTPROC_ALT fn=(PFNGLTANGENT3FEXTPROC_ALT)glaltGetProcAddressExtension("glTangent3fEXT","GL_EXT_coordinate_frame");
	 fn(tx1,ty1,tz1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Tangent3fvEXT
#define GL_ALT_FUNDEF_Tangent3fvEXT
typedef void (*PFNGLTANGENT3FVEXTPROC_ALT)(const GLfloat *);
static inline void glTangent3fvEXT(const GLfloat * v1)
{
	static PFNGLTANGENT3FVEXTPROC_ALT fn=(PFNGLTANGENT3FVEXTPROC_ALT)glaltGetProcAddressExtension("glTangent3fvEXT","GL_EXT_coordinate_frame");
	 fn(v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Tangent3iEXT
#define GL_ALT_FUNDEF_Tangent3iEXT
typedef void (*PFNGLTANGENT3IEXTPROC_ALT)(GLint,GLint,GLint);
static inline void glTangent3iEXT(GLint tx1,GLint ty1,GLint tz1)
{
	static PFNGLTANGENT3IEXTPROC_ALT fn=(PFNGLTANGENT3IEXTPROC_ALT)glaltGetProcAddressExtension("glTangent3iEXT","GL_EXT_coordinate_frame");
	 fn(tx1,ty1,tz1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Tangent3ivEXT
#define GL_ALT_FUNDEF_Tangent3ivEXT
typedef void (*PFNGLTANGENT3IVEXTPROC_ALT)(const GLint *);
static inline void glTangent3ivEXT(const GLint * v1)
{
	static PFNGLTANGENT3IVEXTPROC_ALT fn=(PFNGLTANGENT3IVEXTPROC_ALT)glaltGetProcAddressExtension("glTangent3ivEXT","GL_EXT_coordinate_frame");
	 fn(v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Tangent3sEXT
#define GL_ALT_FUNDEF_Tangent3sEXT
typedef void (*PFNGLTANGENT3SEXTPROC_ALT)(GLshort,GLshort,GLshort);
static inline void glTangent3sEXT(GLshort tx1,GLshort ty1,GLshort tz1)
{
	static PFNGLTANGENT3SEXTPROC_ALT fn=(PFNGLTANGENT3SEXTPROC_ALT)glaltGetProcAddressExtension("glTangent3sEXT","GL_EXT_coordinate_frame");
	 fn(tx1,ty1,tz1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Tangent3svEXT
#define GL_ALT_FUNDEF_Tangent3svEXT
typedef void (*PFNGLTANGENT3SVEXTPROC_ALT)(const GLshort *);
static inline void glTangent3svEXT(const GLshort * v1)
{
	static PFNGLTANGENT3SVEXTPROC_ALT fn=(PFNGLTANGENT3SVEXTPROC_ALT)glaltGetProcAddressExtension("glTangent3svEXT","GL_EXT_coordinate_frame");
	 fn(v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TangentPointerEXT
#define GL_ALT_FUNDEF_TangentPointerEXT
typedef void (*PFNGLTANGENTPOINTEREXTPROC_ALT)(GLenum,GLsizei,const void *);
static inline void glTangentPointerEXT(GLenum type1,GLsizei stride1,const void * pointer1)
{
	static PFNGLTANGENTPOINTEREXTPROC_ALT fn=(PFNGLTANGENTPOINTEREXTPROC_ALT)glaltGetProcAddressExtension("glTangentPointerEXT","GL_EXT_coordinate_frame");
	 fn(type1,stride1,pointer1);
}
#endif
CGUARDEND

#endif

#ifndef GL_EXT_copy_texture
#define GL_EXT_copy_texture
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_CopyTexImage1DEXT
#define GL_ALT_FUNDEF_CopyTexImage1DEXT
typedef void (*PFNGLCOPYTEXIMAGE1DEXTPROC_ALT)(GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLint);
static inline void glCopyTexImage1DEXT(GLenum target1,GLint level1,GLenum internalformat1,GLint x1,GLint y1,GLsizei width1,GLint border1)
{
	static PFNGLCOPYTEXIMAGE1DEXTPROC_ALT fn=(PFNGLCOPYTEXIMAGE1DEXTPROC_ALT)glaltGetProcAddressExtension("glCopyTexImage1DEXT","GL_EXT_copy_texture");
	 fn(target1,level1,internalformat1,x1,y1,width1,border1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_CopyTexImage2DEXT
#define GL_ALT_FUNDEF_CopyTexImage2DEXT
typedef void (*PFNGLCOPYTEXIMAGE2DEXTPROC_ALT)(GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLsizei,GLint);
static inline void glCopyTexImage2DEXT(GLenum target1,GLint level1,GLenum internalformat1,GLint x1,GLint y1,GLsizei width1,GLsizei height1,GLint border1)
{
	static PFNGLCOPYTEXIMAGE2DEXTPROC_ALT fn=(PFNGLCOPYTEXIMAGE2DEXTPROC_ALT)glaltGetProcAddressExtension("glCopyTexImage2DEXT","GL_EXT_copy_texture");
	 fn(target1,level1,internalformat1,x1,y1,width1,height1,border1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_CopyTexSubImage1DEXT
#define GL_ALT_FUNDEF_CopyTexSubImage1DEXT
typedef void (*PFNGLCOPYTEXSUBIMAGE1DEXTPROC_ALT)(GLenum,GLint,GLint,GLint,GLint,GLsizei);
static inline void glCopyTexSubImage1DEXT(GLenum target1,GLint level1,GLint xoffset1,GLint x1,GLint y1,GLsizei width1)
{
	static PFNGLCOPYTEXSUBIMAGE1DEXTPROC_ALT fn=(PFNGLCOPYTEXSUBIMAGE1DEXTPROC_ALT)glaltGetProcAddressExtension("glCopyTexSubImage1DEXT","GL_EXT_copy_texture");
	 fn(target1,level1,xoffset1,x1,y1,width1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_CopyTexSubImage2DEXT
#define GL_ALT_FUNDEF_CopyTexSubImage2DEXT
typedef void (*PFNGLCOPYTEXSUBIMAGE2DEXTPROC_ALT)(GLenum,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
static inline void glCopyTexSubImage2DEXT(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
	static PFNGLCOPYTEXSUBIMAGE2DEXTPROC_ALT fn=(PFNGLCOPYTEXSUBIMAGE2DEXTPROC_ALT)glaltGetProcAddressExtension("glCopyTexSubImage2DEXT","GL_EXT_copy_texture");
	 fn(target1,level1,xoffset1,yoffset1,x1,y1,width1,height1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_CopyTexSubImage3DEXT
#define GL_ALT_FUNDEF_CopyTexSubImage3DEXT
typedef void (*PFNGLCOPYTEXSUBIMAGE3DEXTPROC_ALT)(GLenum,GLint,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
static inline void glCopyTexSubImage3DEXT(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
	static PFNGLCOPYTEXSUBIMAGE3DEXTPROC_ALT fn=(PFNGLCOPYTEXSUBIMAGE3DEXTPROC_ALT)glaltGetProcAddressExtension("glCopyTexSubImage3DEXT","GL_EXT_copy_texture");
	 fn(target1,level1,xoffset1,yoffset1,zoffset1,x1,y1,width1,height1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_cull_vertex
#define GL_EXT_cull_vertex
#ifndef GL_CULL_VERTEX_EXT
#define GL_CULL_VERTEX_EXT 0x81AA
#endif //GL_CULL_VERTEX_EXT
#ifndef GL_CULL_VERTEX_EYE_POSITION_EXT
#define GL_CULL_VERTEX_EYE_POSITION_EXT 0x81AB
#endif //GL_CULL_VERTEX_EYE_POSITION_EXT
#ifndef GL_CULL_VERTEX_OBJECT_POSITION_EXT
#define GL_CULL_VERTEX_OBJECT_POSITION_EXT 0x81AC
#endif //GL_CULL_VERTEX_OBJECT_POSITION_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_CullParameterdvEXT
#define GL_ALT_FUNDEF_CullParameterdvEXT
typedef void (*PFNGLCULLPARAMETERDVEXTPROC_ALT)(GLenum,GLdouble *);
static inline void glCullParameterdvEXT(GLenum pname1,GLdouble * params1)
{
	static PFNGLCULLPARAMETERDVEXTPROC_ALT fn=(PFNGLCULLPARAMETERDVEXTPROC_ALT)glaltGetProcAddressExtension("glCullParameterdvEXT","GL_EXT_cull_vertex");
	 fn(pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CullParameterfvEXT
#define GL_ALT_FUNDEF_CullParameterfvEXT
typedef void (*PFNGLCULLPARAMETERFVEXTPROC_ALT)(GLenum,GLfloat *);
static inline void glCullParameterfvEXT(GLenum pname1,GLfloat * params1)
{
	static PFNGLCULLPARAMETERFVEXTPROC_ALT fn=(PFNGLCULLPARAMETERFVEXTPROC_ALT)glaltGetProcAddressExtension("glCullParameterfvEXT","GL_EXT_cull_vertex");
	 fn(pname1,params1);
}
#endif
CGUARDEND

#endif

#ifndef GL_EXT_debug_label
#define GL_EXT_debug_label
#ifndef GL_SAMPLER
#define GL_SAMPLER 0x82E6
#endif //GL_SAMPLER
#ifndef GL_PROGRAM_PIPELINE_OBJECT_EXT
#define GL_PROGRAM_PIPELINE_OBJECT_EXT 0x8A4F
#endif //GL_PROGRAM_PIPELINE_OBJECT_EXT
#ifndef GL_PROGRAM_OBJECT_EXT
#define GL_PROGRAM_OBJECT_EXT 0x8B40
#endif //GL_PROGRAM_OBJECT_EXT
#ifndef GL_SHADER_OBJECT_EXT
#define GL_SHADER_OBJECT_EXT 0x8B48
#endif //GL_SHADER_OBJECT_EXT
#ifndef GL_TRANSFORM_FEEDBACK
#define GL_TRANSFORM_FEEDBACK 0x8E22
#endif //GL_TRANSFORM_FEEDBACK
#ifndef GL_BUFFER_OBJECT_EXT
#define GL_BUFFER_OBJECT_EXT 0x9151
#endif //GL_BUFFER_OBJECT_EXT
#ifndef GL_QUERY_OBJECT_EXT
#define GL_QUERY_OBJECT_EXT 0x9153
#endif //GL_QUERY_OBJECT_EXT
#ifndef GL_VERTEX_ARRAY_OBJECT_EXT
#define GL_VERTEX_ARRAY_OBJECT_EXT 0x9154
#endif //GL_VERTEX_ARRAY_OBJECT_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetObjectLabelEXT
#define GL_ALT_FUNDEF_GetObjectLabelEXT
typedef void (*PFNGLGETOBJECTLABELEXTPROC_ALT)(GLenum,GLuint,GLsizei,GLsizei *,GLchar *);
static inline void glGetObjectLabelEXT(GLenum type1,GLuint object1,GLsizei bufSize1,GLsizei * length1,GLchar * label1)
{
	static PFNGLGETOBJECTLABELEXTPROC_ALT fn=(PFNGLGETOBJECTLABELEXTPROC_ALT)glaltGetProcAddressExtension("glGetObjectLabelEXT","GL_EXT_debug_label");
	 fn(type1,object1,bufSize1,length1,label1);
}
#endif

#ifndef	GL_ALT_FUNDEF_LabelObjectEXT
#define GL_ALT_FUNDEF_LabelObjectEXT
typedef void (*PFNGLLABELOBJECTEXTPROC_ALT)(GLenum,GLuint,GLsizei,const GLchar *);
static inline void glLabelObjectEXT(GLenum type1,GLuint object1,GLsizei length1,const GLchar * label1)
{
	static PFNGLLABELOBJECTEXTPROC_ALT fn=(PFNGLLABELOBJECTEXTPROC_ALT)glaltGetProcAddressExtension("glLabelObjectEXT","GL_EXT_debug_label");
	 fn(type1,object1,length1,label1);
}
#endif
CGUARDEND

#endif

#ifndef GL_EXT_debug_marker
#define GL_EXT_debug_marker
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_InsertEventMarkerEXT
#define GL_ALT_FUNDEF_InsertEventMarkerEXT
typedef void (*PFNGLINSERTEVENTMARKEREXTPROC_ALT)(GLsizei,const GLchar *);
static inline void glInsertEventMarkerEXT(GLsizei length1,const GLchar * marker1)
{
	static PFNGLINSERTEVENTMARKEREXTPROC_ALT fn=(PFNGLINSERTEVENTMARKEREXTPROC_ALT)glaltGetProcAddressExtension("glInsertEventMarkerEXT","GL_EXT_debug_marker");
	 fn(length1,marker1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PopGroupMarkerEXT
#define GL_ALT_FUNDEF_PopGroupMarkerEXT
typedef void (*PFNGLPOPGROUPMARKEREXTPROC_ALT)();
static inline void glPopGroupMarkerEXT()
{
	static PFNGLPOPGROUPMARKEREXTPROC_ALT fn=(PFNGLPOPGROUPMARKEREXTPROC_ALT)glaltGetProcAddressExtension("glPopGroupMarkerEXT","GL_EXT_debug_marker");
	 fn();
}
#endif

#ifndef	GL_ALT_FUNDEF_PushGroupMarkerEXT
#define GL_ALT_FUNDEF_PushGroupMarkerEXT
typedef void (*PFNGLPUSHGROUPMARKEREXTPROC_ALT)(GLsizei,const GLchar *);
static inline void glPushGroupMarkerEXT(GLsizei length1,const GLchar * marker1)
{
	static PFNGLPUSHGROUPMARKEREXTPROC_ALT fn=(PFNGLPUSHGROUPMARKEREXTPROC_ALT)glaltGetProcAddressExtension("glPushGroupMarkerEXT","GL_EXT_debug_marker");
	 fn(length1,marker1);
}
#endif
CGUARDEND

#endif

#ifndef GL_EXT_depth_bounds_test
#define GL_EXT_depth_bounds_test
#ifndef GL_DEPTH_BOUNDS_TEST_EXT
#define GL_DEPTH_BOUNDS_TEST_EXT 0x8890
#endif //GL_DEPTH_BOUNDS_TEST_EXT
#ifndef GL_DEPTH_BOUNDS_EXT
#define GL_DEPTH_BOUNDS_EXT 0x8891
#endif //GL_DEPTH_BOUNDS_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_DepthBoundsEXT
#define GL_ALT_FUNDEF_DepthBoundsEXT
typedef void (*PFNGLDEPTHBOUNDSEXTPROC_ALT)(GLclampd,GLclampd);
static inline void glDepthBoundsEXT(GLclampd zmin1,GLclampd zmax1)
{
	static PFNGLDEPTHBOUNDSEXTPROC_ALT fn=(PFNGLDEPTHBOUNDSEXTPROC_ALT)glaltGetProcAddressExtension("glDepthBoundsEXT","GL_EXT_depth_bounds_test");
	 fn(zmin1,zmax1);
}
#endif
CGUARDEND

#endif

#ifndef GL_EXT_direct_state_access
#define GL_EXT_direct_state_access
#ifndef GL_PROGRAM_MATRIX_EXT
#define GL_PROGRAM_MATRIX_EXT 0x8E2D
#endif //GL_PROGRAM_MATRIX_EXT
#ifndef GL_TRANSPOSE_PROGRAM_MATRIX_EXT
#define GL_TRANSPOSE_PROGRAM_MATRIX_EXT 0x8E2E
#endif //GL_TRANSPOSE_PROGRAM_MATRIX_EXT
#ifndef GL_PROGRAM_MATRIX_STACK_DEPTH_EXT
#define GL_PROGRAM_MATRIX_STACK_DEPTH_EXT 0x8E2F
#endif //GL_PROGRAM_MATRIX_STACK_DEPTH_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BindMultiTextureEXT
#define GL_ALT_FUNDEF_BindMultiTextureEXT
typedef void (*PFNGLBINDMULTITEXTUREEXTPROC_ALT)(GLenum,GLenum,GLuint);
static inline void glBindMultiTextureEXT(GLenum texunit1,GLenum target1,GLuint texture1)
{
	static PFNGLBINDMULTITEXTUREEXTPROC_ALT fn=(PFNGLBINDMULTITEXTUREEXTPROC_ALT)glaltGetProcAddressExtension("glBindMultiTextureEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,texture1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CheckNamedFramebufferStatusEXT
#define GL_ALT_FUNDEF_CheckNamedFramebufferStatusEXT
typedef GLenum (*PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC_ALT)(GLuint,GLenum);
static inline GLenum glCheckNamedFramebufferStatusEXT(GLuint framebuffer1,GLenum target1)
{
	static PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC_ALT fn=(PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC_ALT)glaltGetProcAddressExtension("glCheckNamedFramebufferStatusEXT","GL_EXT_direct_state_access");
	return fn(framebuffer1,target1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ClearNamedBufferDataEXT
#define GL_ALT_FUNDEF_ClearNamedBufferDataEXT
typedef void (*PFNGLCLEARNAMEDBUFFERDATAEXTPROC_ALT)(GLuint,GLenum,GLenum,GLenum,const void *);
static inline void glClearNamedBufferDataEXT(GLuint buffer1,GLenum internalformat1,GLenum format1,GLenum type1,const void * data1)
{
	static PFNGLCLEARNAMEDBUFFERDATAEXTPROC_ALT fn=(PFNGLCLEARNAMEDBUFFERDATAEXTPROC_ALT)glaltGetProcAddressExtension("glClearNamedBufferDataEXT","GL_EXT_direct_state_access");
	 fn(buffer1,internalformat1,format1,type1,data1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ClearNamedBufferSubDataEXT
#define GL_ALT_FUNDEF_ClearNamedBufferSubDataEXT
typedef void (*PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC_ALT)(GLuint,GLenum,GLsizeiptr,GLsizeiptr,GLenum,GLenum,const void *);
static inline void glClearNamedBufferSubDataEXT(GLuint buffer1,GLenum internalformat1,GLsizeiptr offset1,GLsizeiptr size1,GLenum format1,GLenum type1,const void * data1)
{
	static PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC_ALT fn=(PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC_ALT)glaltGetProcAddressExtension("glClearNamedBufferSubDataEXT","GL_EXT_direct_state_access");
	 fn(buffer1,internalformat1,offset1,size1,format1,type1,data1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ClientAttribDefaultEXT
#define GL_ALT_FUNDEF_ClientAttribDefaultEXT
typedef void (*PFNGLCLIENTATTRIBDEFAULTEXTPROC_ALT)(GLbitfield);
static inline void glClientAttribDefaultEXT(GLbitfield mask1)
{
	static PFNGLCLIENTATTRIBDEFAULTEXTPROC_ALT fn=(PFNGLCLIENTATTRIBDEFAULTEXTPROC_ALT)glaltGetProcAddressExtension("glClientAttribDefaultEXT","GL_EXT_direct_state_access");
	 fn(mask1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CompressedMultiTexImage1DEXT
#define GL_ALT_FUNDEF_CompressedMultiTexImage1DEXT
typedef void (*PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC_ALT)(GLenum,GLenum,GLint,GLenum,GLsizei,GLint,GLsizei,const void *);
static inline void glCompressedMultiTexImage1DEXT(GLenum texunit1,GLenum target1,GLint level1,GLenum internalformat1,GLsizei width1,GLint border1,GLsizei imageSize1,const void * bits1)
{
	static PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC_ALT fn=(PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC_ALT)glaltGetProcAddressExtension("glCompressedMultiTexImage1DEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,level1,internalformat1,width1,border1,imageSize1,bits1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CompressedMultiTexImage2DEXT
#define GL_ALT_FUNDEF_CompressedMultiTexImage2DEXT
typedef void (*PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC_ALT)(GLenum,GLenum,GLint,GLenum,GLsizei,GLsizei,GLint,GLsizei,const void *);
static inline void glCompressedMultiTexImage2DEXT(GLenum texunit1,GLenum target1,GLint level1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLint border1,GLsizei imageSize1,const void * bits1)
{
	static PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC_ALT fn=(PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC_ALT)glaltGetProcAddressExtension("glCompressedMultiTexImage2DEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,level1,internalformat1,width1,height1,border1,imageSize1,bits1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CompressedMultiTexImage3DEXT
#define GL_ALT_FUNDEF_CompressedMultiTexImage3DEXT
typedef void (*PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC_ALT)(GLenum,GLenum,GLint,GLenum,GLsizei,GLsizei,GLsizei,GLint,GLsizei,const void *);
static inline void glCompressedMultiTexImage3DEXT(GLenum texunit1,GLenum target1,GLint level1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLint border1,GLsizei imageSize1,const void * bits1)
{
	static PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC_ALT fn=(PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC_ALT)glaltGetProcAddressExtension("glCompressedMultiTexImage3DEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,level1,internalformat1,width1,height1,depth1,border1,imageSize1,bits1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CompressedMultiTexSubImage1DEXT
#define GL_ALT_FUNDEF_CompressedMultiTexSubImage1DEXT
typedef void (*PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC_ALT)(GLenum,GLenum,GLint,GLint,GLsizei,GLenum,GLsizei,const void *);
static inline void glCompressedMultiTexSubImage1DEXT(GLenum texunit1,GLenum target1,GLint level1,GLint xoffset1,GLsizei width1,GLenum format1,GLsizei imageSize1,const void * bits1)
{
	static PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC_ALT fn=(PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC_ALT)glaltGetProcAddressExtension("glCompressedMultiTexSubImage1DEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,level1,xoffset1,width1,format1,imageSize1,bits1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CompressedMultiTexSubImage2DEXT
#define GL_ALT_FUNDEF_CompressedMultiTexSubImage2DEXT
typedef void (*PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC_ALT)(GLenum,GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLsizei,const void *);
static inline void glCompressedMultiTexSubImage2DEXT(GLenum texunit1,GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLsizei width1,GLsizei height1,GLenum format1,GLsizei imageSize1,const void * bits1)
{
	static PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC_ALT fn=(PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC_ALT)glaltGetProcAddressExtension("glCompressedMultiTexSubImage2DEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,level1,xoffset1,yoffset1,width1,height1,format1,imageSize1,bits1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CompressedMultiTexSubImage3DEXT
#define GL_ALT_FUNDEF_CompressedMultiTexSubImage3DEXT
typedef void (*PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC_ALT)(GLenum,GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLsizei,const void *);
static inline void glCompressedMultiTexSubImage3DEXT(GLenum texunit1,GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLsizei width1,GLsizei height1,GLsizei depth1,GLenum format1,GLsizei imageSize1,const void * bits1)
{
	static PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC_ALT fn=(PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC_ALT)glaltGetProcAddressExtension("glCompressedMultiTexSubImage3DEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,level1,xoffset1,yoffset1,zoffset1,width1,height1,depth1,format1,imageSize1,bits1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CompressedTextureImage1DEXT
#define GL_ALT_FUNDEF_CompressedTextureImage1DEXT
typedef void (*PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC_ALT)(GLuint,GLenum,GLint,GLenum,GLsizei,GLint,GLsizei,const void *);
static inline void glCompressedTextureImage1DEXT(GLuint texture1,GLenum target1,GLint level1,GLenum internalformat1,GLsizei width1,GLint border1,GLsizei imageSize1,const void * bits1)
{
	static PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC_ALT fn=(PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC_ALT)glaltGetProcAddressExtension("glCompressedTextureImage1DEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,level1,internalformat1,width1,border1,imageSize1,bits1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CompressedTextureImage2DEXT
#define GL_ALT_FUNDEF_CompressedTextureImage2DEXT
typedef void (*PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC_ALT)(GLuint,GLenum,GLint,GLenum,GLsizei,GLsizei,GLint,GLsizei,const void *);
static inline void glCompressedTextureImage2DEXT(GLuint texture1,GLenum target1,GLint level1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLint border1,GLsizei imageSize1,const void * bits1)
{
	static PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC_ALT fn=(PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC_ALT)glaltGetProcAddressExtension("glCompressedTextureImage2DEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,level1,internalformat1,width1,height1,border1,imageSize1,bits1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CompressedTextureImage3DEXT
#define GL_ALT_FUNDEF_CompressedTextureImage3DEXT
typedef void (*PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC_ALT)(GLuint,GLenum,GLint,GLenum,GLsizei,GLsizei,GLsizei,GLint,GLsizei,const void *);
static inline void glCompressedTextureImage3DEXT(GLuint texture1,GLenum target1,GLint level1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLint border1,GLsizei imageSize1,const void * bits1)
{
	static PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC_ALT fn=(PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC_ALT)glaltGetProcAddressExtension("glCompressedTextureImage3DEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,level1,internalformat1,width1,height1,depth1,border1,imageSize1,bits1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CompressedTextureSubImage1DEXT
#define GL_ALT_FUNDEF_CompressedTextureSubImage1DEXT
typedef void (*PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC_ALT)(GLuint,GLenum,GLint,GLint,GLsizei,GLenum,GLsizei,const void *);
static inline void glCompressedTextureSubImage1DEXT(GLuint texture1,GLenum target1,GLint level1,GLint xoffset1,GLsizei width1,GLenum format1,GLsizei imageSize1,const void * bits1)
{
	static PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC_ALT fn=(PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC_ALT)glaltGetProcAddressExtension("glCompressedTextureSubImage1DEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,level1,xoffset1,width1,format1,imageSize1,bits1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CompressedTextureSubImage2DEXT
#define GL_ALT_FUNDEF_CompressedTextureSubImage2DEXT
typedef void (*PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC_ALT)(GLuint,GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLsizei,const void *);
static inline void glCompressedTextureSubImage2DEXT(GLuint texture1,GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLsizei width1,GLsizei height1,GLenum format1,GLsizei imageSize1,const void * bits1)
{
	static PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC_ALT fn=(PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC_ALT)glaltGetProcAddressExtension("glCompressedTextureSubImage2DEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,level1,xoffset1,yoffset1,width1,height1,format1,imageSize1,bits1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CompressedTextureSubImage3DEXT
#define GL_ALT_FUNDEF_CompressedTextureSubImage3DEXT
typedef void (*PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC_ALT)(GLuint,GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLsizei,const void *);
static inline void glCompressedTextureSubImage3DEXT(GLuint texture1,GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLsizei width1,GLsizei height1,GLsizei depth1,GLenum format1,GLsizei imageSize1,const void * bits1)
{
	static PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC_ALT fn=(PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC_ALT)glaltGetProcAddressExtension("glCompressedTextureSubImage3DEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,level1,xoffset1,yoffset1,zoffset1,width1,height1,depth1,format1,imageSize1,bits1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CopyMultiTexImage1DEXT
#define GL_ALT_FUNDEF_CopyMultiTexImage1DEXT
typedef void (*PFNGLCOPYMULTITEXIMAGE1DEXTPROC_ALT)(GLenum,GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLint);
static inline void glCopyMultiTexImage1DEXT(GLenum texunit1,GLenum target1,GLint level1,GLenum internalformat1,GLint x1,GLint y1,GLsizei width1,GLint border1)
{
	static PFNGLCOPYMULTITEXIMAGE1DEXTPROC_ALT fn=(PFNGLCOPYMULTITEXIMAGE1DEXTPROC_ALT)glaltGetProcAddressExtension("glCopyMultiTexImage1DEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,level1,internalformat1,x1,y1,width1,border1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CopyMultiTexImage2DEXT
#define GL_ALT_FUNDEF_CopyMultiTexImage2DEXT
typedef void (*PFNGLCOPYMULTITEXIMAGE2DEXTPROC_ALT)(GLenum,GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLsizei,GLint);
static inline void glCopyMultiTexImage2DEXT(GLenum texunit1,GLenum target1,GLint level1,GLenum internalformat1,GLint x1,GLint y1,GLsizei width1,GLsizei height1,GLint border1)
{
	static PFNGLCOPYMULTITEXIMAGE2DEXTPROC_ALT fn=(PFNGLCOPYMULTITEXIMAGE2DEXTPROC_ALT)glaltGetProcAddressExtension("glCopyMultiTexImage2DEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,level1,internalformat1,x1,y1,width1,height1,border1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CopyMultiTexSubImage1DEXT
#define GL_ALT_FUNDEF_CopyMultiTexSubImage1DEXT
typedef void (*PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC_ALT)(GLenum,GLenum,GLint,GLint,GLint,GLint,GLsizei);
static inline void glCopyMultiTexSubImage1DEXT(GLenum texunit1,GLenum target1,GLint level1,GLint xoffset1,GLint x1,GLint y1,GLsizei width1)
{
	static PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC_ALT fn=(PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC_ALT)glaltGetProcAddressExtension("glCopyMultiTexSubImage1DEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,level1,xoffset1,x1,y1,width1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CopyMultiTexSubImage2DEXT
#define GL_ALT_FUNDEF_CopyMultiTexSubImage2DEXT
typedef void (*PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC_ALT)(GLenum,GLenum,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
static inline void glCopyMultiTexSubImage2DEXT(GLenum texunit1,GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
	static PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC_ALT fn=(PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC_ALT)glaltGetProcAddressExtension("glCopyMultiTexSubImage2DEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,level1,xoffset1,yoffset1,x1,y1,width1,height1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CopyMultiTexSubImage3DEXT
#define GL_ALT_FUNDEF_CopyMultiTexSubImage3DEXT
typedef void (*PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC_ALT)(GLenum,GLenum,GLint,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
static inline void glCopyMultiTexSubImage3DEXT(GLenum texunit1,GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
	static PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC_ALT fn=(PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC_ALT)glaltGetProcAddressExtension("glCopyMultiTexSubImage3DEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,level1,xoffset1,yoffset1,zoffset1,x1,y1,width1,height1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CopyTextureImage1DEXT
#define GL_ALT_FUNDEF_CopyTextureImage1DEXT
typedef void (*PFNGLCOPYTEXTUREIMAGE1DEXTPROC_ALT)(GLuint,GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLint);
static inline void glCopyTextureImage1DEXT(GLuint texture1,GLenum target1,GLint level1,GLenum internalformat1,GLint x1,GLint y1,GLsizei width1,GLint border1)
{
	static PFNGLCOPYTEXTUREIMAGE1DEXTPROC_ALT fn=(PFNGLCOPYTEXTUREIMAGE1DEXTPROC_ALT)glaltGetProcAddressExtension("glCopyTextureImage1DEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,level1,internalformat1,x1,y1,width1,border1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CopyTextureImage2DEXT
#define GL_ALT_FUNDEF_CopyTextureImage2DEXT
typedef void (*PFNGLCOPYTEXTUREIMAGE2DEXTPROC_ALT)(GLuint,GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLsizei,GLint);
static inline void glCopyTextureImage2DEXT(GLuint texture1,GLenum target1,GLint level1,GLenum internalformat1,GLint x1,GLint y1,GLsizei width1,GLsizei height1,GLint border1)
{
	static PFNGLCOPYTEXTUREIMAGE2DEXTPROC_ALT fn=(PFNGLCOPYTEXTUREIMAGE2DEXTPROC_ALT)glaltGetProcAddressExtension("glCopyTextureImage2DEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,level1,internalformat1,x1,y1,width1,height1,border1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CopyTextureSubImage1DEXT
#define GL_ALT_FUNDEF_CopyTextureSubImage1DEXT
typedef void (*PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC_ALT)(GLuint,GLenum,GLint,GLint,GLint,GLint,GLsizei);
static inline void glCopyTextureSubImage1DEXT(GLuint texture1,GLenum target1,GLint level1,GLint xoffset1,GLint x1,GLint y1,GLsizei width1)
{
	static PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC_ALT fn=(PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC_ALT)glaltGetProcAddressExtension("glCopyTextureSubImage1DEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,level1,xoffset1,x1,y1,width1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CopyTextureSubImage2DEXT
#define GL_ALT_FUNDEF_CopyTextureSubImage2DEXT
typedef void (*PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC_ALT)(GLuint,GLenum,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
static inline void glCopyTextureSubImage2DEXT(GLuint texture1,GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
	static PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC_ALT fn=(PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC_ALT)glaltGetProcAddressExtension("glCopyTextureSubImage2DEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,level1,xoffset1,yoffset1,x1,y1,width1,height1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CopyTextureSubImage3DEXT
#define GL_ALT_FUNDEF_CopyTextureSubImage3DEXT
typedef void (*PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC_ALT)(GLuint,GLenum,GLint,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
static inline void glCopyTextureSubImage3DEXT(GLuint texture1,GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
	static PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC_ALT fn=(PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC_ALT)glaltGetProcAddressExtension("glCopyTextureSubImage3DEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,level1,xoffset1,yoffset1,zoffset1,x1,y1,width1,height1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DisableClientStateIndexedEXT
#define GL_ALT_FUNDEF_DisableClientStateIndexedEXT
typedef void (*PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC_ALT)(GLenum,GLuint);
static inline void glDisableClientStateIndexedEXT(GLenum array1,GLuint index1)
{
	static PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC_ALT fn=(PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC_ALT)glaltGetProcAddressExtension("glDisableClientStateIndexedEXT","GL_EXT_direct_state_access");
	 fn(array1,index1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DisableClientStateiEXT
#define GL_ALT_FUNDEF_DisableClientStateiEXT
typedef void (*PFNGLDISABLECLIENTSTATEIEXTPROC_ALT)(GLenum,GLuint);
static inline void glDisableClientStateiEXT(GLenum array1,GLuint index1)
{
	static PFNGLDISABLECLIENTSTATEIEXTPROC_ALT fn=(PFNGLDISABLECLIENTSTATEIEXTPROC_ALT)glaltGetProcAddressExtension("glDisableClientStateiEXT","GL_EXT_direct_state_access");
	 fn(array1,index1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DisableIndexedEXT
#define GL_ALT_FUNDEF_DisableIndexedEXT
typedef void (*PFNGLDISABLEINDEXEDEXTPROC_ALT)(GLenum,GLuint);
static inline void glDisableIndexedEXT(GLenum target1,GLuint index1)
{
	static PFNGLDISABLEINDEXEDEXTPROC_ALT fn=(PFNGLDISABLEINDEXEDEXTPROC_ALT)glaltGetProcAddressExtension("glDisableIndexedEXT","GL_EXT_direct_state_access");
	 fn(target1,index1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_DisableVertexArrayAttribEXT
#define GL_ALT_FUNDEF_DisableVertexArrayAttribEXT
typedef void (*PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC_ALT)(GLuint,GLuint);
static inline void glDisableVertexArrayAttribEXT(GLuint vaobj1,GLuint index1)
{
	static PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC_ALT fn=(PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC_ALT)glaltGetProcAddressExtension("glDisableVertexArrayAttribEXT","GL_EXT_direct_state_access");
	 fn(vaobj1,index1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DisableVertexArrayEXT
#define GL_ALT_FUNDEF_DisableVertexArrayEXT
typedef void (*PFNGLDISABLEVERTEXARRAYEXTPROC_ALT)(GLuint,GLenum);
static inline void glDisableVertexArrayEXT(GLuint vaobj1,GLenum array1)
{
	static PFNGLDISABLEVERTEXARRAYEXTPROC_ALT fn=(PFNGLDISABLEVERTEXARRAYEXTPROC_ALT)glaltGetProcAddressExtension("glDisableVertexArrayEXT","GL_EXT_direct_state_access");
	 fn(vaobj1,array1);
}
#endif

#ifndef	GL_ALT_FUNDEF_EnableClientStateIndexedEXT
#define GL_ALT_FUNDEF_EnableClientStateIndexedEXT
typedef void (*PFNGLENABLECLIENTSTATEINDEXEDEXTPROC_ALT)(GLenum,GLuint);
static inline void glEnableClientStateIndexedEXT(GLenum array1,GLuint index1)
{
	static PFNGLENABLECLIENTSTATEINDEXEDEXTPROC_ALT fn=(PFNGLENABLECLIENTSTATEINDEXEDEXTPROC_ALT)glaltGetProcAddressExtension("glEnableClientStateIndexedEXT","GL_EXT_direct_state_access");
	 fn(array1,index1);
}
#endif

#ifndef	GL_ALT_FUNDEF_EnableClientStateiEXT
#define GL_ALT_FUNDEF_EnableClientStateiEXT
typedef void (*PFNGLENABLECLIENTSTATEIEXTPROC_ALT)(GLenum,GLuint);
static inline void glEnableClientStateiEXT(GLenum array1,GLuint index1)
{
	static PFNGLENABLECLIENTSTATEIEXTPROC_ALT fn=(PFNGLENABLECLIENTSTATEIEXTPROC_ALT)glaltGetProcAddressExtension("glEnableClientStateiEXT","GL_EXT_direct_state_access");
	 fn(array1,index1);
}
#endif

#ifndef	GL_ALT_FUNDEF_EnableIndexedEXT
#define GL_ALT_FUNDEF_EnableIndexedEXT
typedef void (*PFNGLENABLEINDEXEDEXTPROC_ALT)(GLenum,GLuint);
static inline void glEnableIndexedEXT(GLenum target1,GLuint index1)
{
	static PFNGLENABLEINDEXEDEXTPROC_ALT fn=(PFNGLENABLEINDEXEDEXTPROC_ALT)glaltGetProcAddressExtension("glEnableIndexedEXT","GL_EXT_direct_state_access");
	 fn(target1,index1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_EnableVertexArrayAttribEXT
#define GL_ALT_FUNDEF_EnableVertexArrayAttribEXT
typedef void (*PFNGLENABLEVERTEXARRAYATTRIBEXTPROC_ALT)(GLuint,GLuint);
static inline void glEnableVertexArrayAttribEXT(GLuint vaobj1,GLuint index1)
{
	static PFNGLENABLEVERTEXARRAYATTRIBEXTPROC_ALT fn=(PFNGLENABLEVERTEXARRAYATTRIBEXTPROC_ALT)glaltGetProcAddressExtension("glEnableVertexArrayAttribEXT","GL_EXT_direct_state_access");
	 fn(vaobj1,index1);
}
#endif

#ifndef	GL_ALT_FUNDEF_EnableVertexArrayEXT
#define GL_ALT_FUNDEF_EnableVertexArrayEXT
typedef void (*PFNGLENABLEVERTEXARRAYEXTPROC_ALT)(GLuint,GLenum);
static inline void glEnableVertexArrayEXT(GLuint vaobj1,GLenum array1)
{
	static PFNGLENABLEVERTEXARRAYEXTPROC_ALT fn=(PFNGLENABLEVERTEXARRAYEXTPROC_ALT)glaltGetProcAddressExtension("glEnableVertexArrayEXT","GL_EXT_direct_state_access");
	 fn(vaobj1,array1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FlushMappedNamedBufferRangeEXT
#define GL_ALT_FUNDEF_FlushMappedNamedBufferRangeEXT
typedef void (*PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC_ALT)(GLuint,GLintptr,GLsizeiptr);
static inline void glFlushMappedNamedBufferRangeEXT(GLuint buffer1,GLintptr offset1,GLsizeiptr length1)
{
	static PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC_ALT fn=(PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC_ALT)glaltGetProcAddressExtension("glFlushMappedNamedBufferRangeEXT","GL_EXT_direct_state_access");
	 fn(buffer1,offset1,length1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FramebufferDrawBufferEXT
#define GL_ALT_FUNDEF_FramebufferDrawBufferEXT
typedef void (*PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC_ALT)(GLuint,GLenum);
static inline void glFramebufferDrawBufferEXT(GLuint framebuffer1,GLenum mode1)
{
	static PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC_ALT fn=(PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC_ALT)glaltGetProcAddressExtension("glFramebufferDrawBufferEXT","GL_EXT_direct_state_access");
	 fn(framebuffer1,mode1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FramebufferDrawBuffersEXT
#define GL_ALT_FUNDEF_FramebufferDrawBuffersEXT
typedef void (*PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC_ALT)(GLuint,GLsizei,const GLenum *);
static inline void glFramebufferDrawBuffersEXT(GLuint framebuffer1,GLsizei n1,const GLenum * bufs1)
{
	static PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC_ALT fn=(PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC_ALT)glaltGetProcAddressExtension("glFramebufferDrawBuffersEXT","GL_EXT_direct_state_access");
	 fn(framebuffer1,n1,bufs1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FramebufferReadBufferEXT
#define GL_ALT_FUNDEF_FramebufferReadBufferEXT
typedef void (*PFNGLFRAMEBUFFERREADBUFFEREXTPROC_ALT)(GLuint,GLenum);
static inline void glFramebufferReadBufferEXT(GLuint framebuffer1,GLenum mode1)
{
	static PFNGLFRAMEBUFFERREADBUFFEREXTPROC_ALT fn=(PFNGLFRAMEBUFFERREADBUFFEREXTPROC_ALT)glaltGetProcAddressExtension("glFramebufferReadBufferEXT","GL_EXT_direct_state_access");
	 fn(framebuffer1,mode1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GenerateMultiTexMipmapEXT
#define GL_ALT_FUNDEF_GenerateMultiTexMipmapEXT
typedef void (*PFNGLGENERATEMULTITEXMIPMAPEXTPROC_ALT)(GLenum,GLenum);
static inline void glGenerateMultiTexMipmapEXT(GLenum texunit1,GLenum target1)
{
	static PFNGLGENERATEMULTITEXMIPMAPEXTPROC_ALT fn=(PFNGLGENERATEMULTITEXMIPMAPEXTPROC_ALT)glaltGetProcAddressExtension("glGenerateMultiTexMipmapEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GenerateTextureMipmapEXT
#define GL_ALT_FUNDEF_GenerateTextureMipmapEXT
typedef void (*PFNGLGENERATETEXTUREMIPMAPEXTPROC_ALT)(GLuint,GLenum);
static inline void glGenerateTextureMipmapEXT(GLuint texture1,GLenum target1)
{
	static PFNGLGENERATETEXTUREMIPMAPEXTPROC_ALT fn=(PFNGLGENERATETEXTUREMIPMAPEXTPROC_ALT)glaltGetProcAddressExtension("glGenerateTextureMipmapEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetBooleanIndexedvEXT
#define GL_ALT_FUNDEF_GetBooleanIndexedvEXT
typedef void (*PFNGLGETBOOLEANINDEXEDVEXTPROC_ALT)(GLenum,GLuint,GLboolean *);
static inline void glGetBooleanIndexedvEXT(GLenum target1,GLuint index1,GLboolean * data1)
{
	static PFNGLGETBOOLEANINDEXEDVEXTPROC_ALT fn=(PFNGLGETBOOLEANINDEXEDVEXTPROC_ALT)glaltGetProcAddressExtension("glGetBooleanIndexedvEXT","GL_EXT_direct_state_access");
	 fn(target1,index1,data1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetCompressedMultiTexImageEXT
#define GL_ALT_FUNDEF_GetCompressedMultiTexImageEXT
typedef void (*PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC_ALT)(GLenum,GLenum,GLint,void *);
static inline void glGetCompressedMultiTexImageEXT(GLenum texunit1,GLenum target1,GLint lod1,void * img1)
{
	static PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC_ALT fn=(PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC_ALT)glaltGetProcAddressExtension("glGetCompressedMultiTexImageEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,lod1,img1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetCompressedTextureImageEXT
#define GL_ALT_FUNDEF_GetCompressedTextureImageEXT
typedef void (*PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC_ALT)(GLuint,GLenum,GLint,void *);
static inline void glGetCompressedTextureImageEXT(GLuint texture1,GLenum target1,GLint lod1,void * img1)
{
	static PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC_ALT fn=(PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC_ALT)glaltGetProcAddressExtension("glGetCompressedTextureImageEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,lod1,img1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetDoubleIndexedvEXT
#define GL_ALT_FUNDEF_GetDoubleIndexedvEXT
typedef void (*PFNGLGETDOUBLEINDEXEDVEXTPROC_ALT)(GLenum,GLuint,GLdouble *);
static inline void glGetDoubleIndexedvEXT(GLenum target1,GLuint index1,GLdouble * data1)
{
	static PFNGLGETDOUBLEINDEXEDVEXTPROC_ALT fn=(PFNGLGETDOUBLEINDEXEDVEXTPROC_ALT)glaltGetProcAddressExtension("glGetDoubleIndexedvEXT","GL_EXT_direct_state_access");
	 fn(target1,index1,data1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetDoublei_vEXT
#define GL_ALT_FUNDEF_GetDoublei_vEXT
typedef void (*PFNGLGETDOUBLEI_VEXTPROC_ALT)(GLenum,GLuint,GLdouble *);
static inline void glGetDoublei_vEXT(GLenum pname1,GLuint index1,GLdouble * params1)
{
	static PFNGLGETDOUBLEI_VEXTPROC_ALT fn=(PFNGLGETDOUBLEI_VEXTPROC_ALT)glaltGetProcAddressExtension("glGetDoublei_vEXT","GL_EXT_direct_state_access");
	 fn(pname1,index1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetFloatIndexedvEXT
#define GL_ALT_FUNDEF_GetFloatIndexedvEXT
typedef void (*PFNGLGETFLOATINDEXEDVEXTPROC_ALT)(GLenum,GLuint,GLfloat *);
static inline void glGetFloatIndexedvEXT(GLenum target1,GLuint index1,GLfloat * data1)
{
	static PFNGLGETFLOATINDEXEDVEXTPROC_ALT fn=(PFNGLGETFLOATINDEXEDVEXTPROC_ALT)glaltGetProcAddressExtension("glGetFloatIndexedvEXT","GL_EXT_direct_state_access");
	 fn(target1,index1,data1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetFloati_vEXT
#define GL_ALT_FUNDEF_GetFloati_vEXT
typedef void (*PFNGLGETFLOATI_VEXTPROC_ALT)(GLenum,GLuint,GLfloat *);
static inline void glGetFloati_vEXT(GLenum pname1,GLuint index1,GLfloat * params1)
{
	static PFNGLGETFLOATI_VEXTPROC_ALT fn=(PFNGLGETFLOATI_VEXTPROC_ALT)glaltGetProcAddressExtension("glGetFloati_vEXT","GL_EXT_direct_state_access");
	 fn(pname1,index1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetFramebufferParameterivEXT
#define GL_ALT_FUNDEF_GetFramebufferParameterivEXT
typedef void (*PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetFramebufferParameterivEXT(GLuint framebuffer1,GLenum pname1,GLint * params1)
{
	static PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC_ALT fn=(PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC_ALT)glaltGetProcAddressExtension("glGetFramebufferParameterivEXT","GL_EXT_direct_state_access");
	 fn(framebuffer1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetIntegerIndexedvEXT
#define GL_ALT_FUNDEF_GetIntegerIndexedvEXT
typedef void (*PFNGLGETINTEGERINDEXEDVEXTPROC_ALT)(GLenum,GLuint,GLint *);
static inline void glGetIntegerIndexedvEXT(GLenum target1,GLuint index1,GLint * data1)
{
	static PFNGLGETINTEGERINDEXEDVEXTPROC_ALT fn=(PFNGLGETINTEGERINDEXEDVEXTPROC_ALT)glaltGetProcAddressExtension("glGetIntegerIndexedvEXT","GL_EXT_direct_state_access");
	 fn(target1,index1,data1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetMultiTexEnvfvEXT
#define GL_ALT_FUNDEF_GetMultiTexEnvfvEXT
typedef void (*PFNGLGETMULTITEXENVFVEXTPROC_ALT)(GLenum,GLenum,GLenum,GLfloat *);
static inline void glGetMultiTexEnvfvEXT(GLenum texunit1,GLenum target1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETMULTITEXENVFVEXTPROC_ALT fn=(PFNGLGETMULTITEXENVFVEXTPROC_ALT)glaltGetProcAddressExtension("glGetMultiTexEnvfvEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetMultiTexEnvivEXT
#define GL_ALT_FUNDEF_GetMultiTexEnvivEXT
typedef void (*PFNGLGETMULTITEXENVIVEXTPROC_ALT)(GLenum,GLenum,GLenum,GLint *);
static inline void glGetMultiTexEnvivEXT(GLenum texunit1,GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETMULTITEXENVIVEXTPROC_ALT fn=(PFNGLGETMULTITEXENVIVEXTPROC_ALT)glaltGetProcAddressExtension("glGetMultiTexEnvivEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetMultiTexGendvEXT
#define GL_ALT_FUNDEF_GetMultiTexGendvEXT
typedef void (*PFNGLGETMULTITEXGENDVEXTPROC_ALT)(GLenum,GLenum,GLenum,GLdouble *);
static inline void glGetMultiTexGendvEXT(GLenum texunit1,GLenum coord1,GLenum pname1,GLdouble * params1)
{
	static PFNGLGETMULTITEXGENDVEXTPROC_ALT fn=(PFNGLGETMULTITEXGENDVEXTPROC_ALT)glaltGetProcAddressExtension("glGetMultiTexGendvEXT","GL_EXT_direct_state_access");
	 fn(texunit1,coord1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetMultiTexGenfvEXT
#define GL_ALT_FUNDEF_GetMultiTexGenfvEXT
typedef void (*PFNGLGETMULTITEXGENFVEXTPROC_ALT)(GLenum,GLenum,GLenum,GLfloat *);
static inline void glGetMultiTexGenfvEXT(GLenum texunit1,GLenum coord1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETMULTITEXGENFVEXTPROC_ALT fn=(PFNGLGETMULTITEXGENFVEXTPROC_ALT)glaltGetProcAddressExtension("glGetMultiTexGenfvEXT","GL_EXT_direct_state_access");
	 fn(texunit1,coord1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetMultiTexGenivEXT
#define GL_ALT_FUNDEF_GetMultiTexGenivEXT
typedef void (*PFNGLGETMULTITEXGENIVEXTPROC_ALT)(GLenum,GLenum,GLenum,GLint *);
static inline void glGetMultiTexGenivEXT(GLenum texunit1,GLenum coord1,GLenum pname1,GLint * params1)
{
	static PFNGLGETMULTITEXGENIVEXTPROC_ALT fn=(PFNGLGETMULTITEXGENIVEXTPROC_ALT)glaltGetProcAddressExtension("glGetMultiTexGenivEXT","GL_EXT_direct_state_access");
	 fn(texunit1,coord1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetMultiTexImageEXT
#define GL_ALT_FUNDEF_GetMultiTexImageEXT
typedef void (*PFNGLGETMULTITEXIMAGEEXTPROC_ALT)(GLenum,GLenum,GLint,GLenum,GLenum,void *);
static inline void glGetMultiTexImageEXT(GLenum texunit1,GLenum target1,GLint level1,GLenum format1,GLenum type1,void * pixels1)
{
	static PFNGLGETMULTITEXIMAGEEXTPROC_ALT fn=(PFNGLGETMULTITEXIMAGEEXTPROC_ALT)glaltGetProcAddressExtension("glGetMultiTexImageEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,level1,format1,type1,pixels1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetMultiTexLevelParameterfvEXT
#define GL_ALT_FUNDEF_GetMultiTexLevelParameterfvEXT
typedef void (*PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC_ALT)(GLenum,GLenum,GLint,GLenum,GLfloat *);
static inline void glGetMultiTexLevelParameterfvEXT(GLenum texunit1,GLenum target1,GLint level1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC_ALT fn=(PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC_ALT)glaltGetProcAddressExtension("glGetMultiTexLevelParameterfvEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,level1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetMultiTexLevelParameterivEXT
#define GL_ALT_FUNDEF_GetMultiTexLevelParameterivEXT
typedef void (*PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC_ALT)(GLenum,GLenum,GLint,GLenum,GLint *);
static inline void glGetMultiTexLevelParameterivEXT(GLenum texunit1,GLenum target1,GLint level1,GLenum pname1,GLint * params1)
{
	static PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC_ALT fn=(PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC_ALT)glaltGetProcAddressExtension("glGetMultiTexLevelParameterivEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,level1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetMultiTexParameterIivEXT
#define GL_ALT_FUNDEF_GetMultiTexParameterIivEXT
typedef void (*PFNGLGETMULTITEXPARAMETERIIVEXTPROC_ALT)(GLenum,GLenum,GLenum,GLint *);
static inline void glGetMultiTexParameterIivEXT(GLenum texunit1,GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETMULTITEXPARAMETERIIVEXTPROC_ALT fn=(PFNGLGETMULTITEXPARAMETERIIVEXTPROC_ALT)glaltGetProcAddressExtension("glGetMultiTexParameterIivEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetMultiTexParameterIuivEXT
#define GL_ALT_FUNDEF_GetMultiTexParameterIuivEXT
typedef void (*PFNGLGETMULTITEXPARAMETERIUIVEXTPROC_ALT)(GLenum,GLenum,GLenum,GLuint *);
static inline void glGetMultiTexParameterIuivEXT(GLenum texunit1,GLenum target1,GLenum pname1,GLuint * params1)
{
	static PFNGLGETMULTITEXPARAMETERIUIVEXTPROC_ALT fn=(PFNGLGETMULTITEXPARAMETERIUIVEXTPROC_ALT)glaltGetProcAddressExtension("glGetMultiTexParameterIuivEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetMultiTexParameterfvEXT
#define GL_ALT_FUNDEF_GetMultiTexParameterfvEXT
typedef void (*PFNGLGETMULTITEXPARAMETERFVEXTPROC_ALT)(GLenum,GLenum,GLenum,GLfloat *);
static inline void glGetMultiTexParameterfvEXT(GLenum texunit1,GLenum target1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETMULTITEXPARAMETERFVEXTPROC_ALT fn=(PFNGLGETMULTITEXPARAMETERFVEXTPROC_ALT)glaltGetProcAddressExtension("glGetMultiTexParameterfvEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetMultiTexParameterivEXT
#define GL_ALT_FUNDEF_GetMultiTexParameterivEXT
typedef void (*PFNGLGETMULTITEXPARAMETERIVEXTPROC_ALT)(GLenum,GLenum,GLenum,GLint *);
static inline void glGetMultiTexParameterivEXT(GLenum texunit1,GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETMULTITEXPARAMETERIVEXTPROC_ALT fn=(PFNGLGETMULTITEXPARAMETERIVEXTPROC_ALT)glaltGetProcAddressExtension("glGetMultiTexParameterivEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetNamedBufferParameterivEXT
#define GL_ALT_FUNDEF_GetNamedBufferParameterivEXT
typedef void (*PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetNamedBufferParameterivEXT(GLuint buffer1,GLenum pname1,GLint * params1)
{
	static PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC_ALT fn=(PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC_ALT)glaltGetProcAddressExtension("glGetNamedBufferParameterivEXT","GL_EXT_direct_state_access");
	 fn(buffer1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetNamedBufferPointervEXT
#define GL_ALT_FUNDEF_GetNamedBufferPointervEXT
typedef void (*PFNGLGETNAMEDBUFFERPOINTERVEXTPROC_ALT)(GLuint,GLenum,void **);
static inline void glGetNamedBufferPointervEXT(GLuint buffer1,GLenum pname1,void ** params1)
{
	static PFNGLGETNAMEDBUFFERPOINTERVEXTPROC_ALT fn=(PFNGLGETNAMEDBUFFERPOINTERVEXTPROC_ALT)glaltGetProcAddressExtension("glGetNamedBufferPointervEXT","GL_EXT_direct_state_access");
	 fn(buffer1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetNamedBufferSubDataEXT
#define GL_ALT_FUNDEF_GetNamedBufferSubDataEXT
typedef void (*PFNGLGETNAMEDBUFFERSUBDATAEXTPROC_ALT)(GLuint,GLintptr,GLsizeiptr,void *);
static inline void glGetNamedBufferSubDataEXT(GLuint buffer1,GLintptr offset1,GLsizeiptr size1,void * data1)
{
	static PFNGLGETNAMEDBUFFERSUBDATAEXTPROC_ALT fn=(PFNGLGETNAMEDBUFFERSUBDATAEXTPROC_ALT)glaltGetProcAddressExtension("glGetNamedBufferSubDataEXT","GL_EXT_direct_state_access");
	 fn(buffer1,offset1,size1,data1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetNamedFramebufferAttachmentParameterivEXT
#define GL_ALT_FUNDEF_GetNamedFramebufferAttachmentParameterivEXT
typedef void (*PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC_ALT)(GLuint,GLenum,GLenum,GLint *);
static inline void glGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer1,GLenum attachment1,GLenum pname1,GLint * params1)
{
	static PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC_ALT fn=(PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC_ALT)glaltGetProcAddressExtension("glGetNamedFramebufferAttachmentParameterivEXT","GL_EXT_direct_state_access");
	 fn(framebuffer1,attachment1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetNamedFramebufferParameterivEXT
#define GL_ALT_FUNDEF_GetNamedFramebufferParameterivEXT
typedef void (*PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetNamedFramebufferParameterivEXT(GLuint framebuffer1,GLenum pname1,GLint * params1)
{
	static PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC_ALT fn=(PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC_ALT)glaltGetProcAddressExtension("glGetNamedFramebufferParameterivEXT","GL_EXT_direct_state_access");
	 fn(framebuffer1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetNamedProgramLocalParameterIivEXT
#define GL_ALT_FUNDEF_GetNamedProgramLocalParameterIivEXT
typedef void (*PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC_ALT)(GLuint,GLenum,GLuint,GLint *);
static inline void glGetNamedProgramLocalParameterIivEXT(GLuint program1,GLenum target1,GLuint index1,GLint * params1)
{
	static PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC_ALT fn=(PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC_ALT)glaltGetProcAddressExtension("glGetNamedProgramLocalParameterIivEXT","GL_EXT_direct_state_access");
	 fn(program1,target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetNamedProgramLocalParameterIuivEXT
#define GL_ALT_FUNDEF_GetNamedProgramLocalParameterIuivEXT
typedef void (*PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC_ALT)(GLuint,GLenum,GLuint,GLuint *);
static inline void glGetNamedProgramLocalParameterIuivEXT(GLuint program1,GLenum target1,GLuint index1,GLuint * params1)
{
	static PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC_ALT fn=(PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC_ALT)glaltGetProcAddressExtension("glGetNamedProgramLocalParameterIuivEXT","GL_EXT_direct_state_access");
	 fn(program1,target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetNamedProgramLocalParameterdvEXT
#define GL_ALT_FUNDEF_GetNamedProgramLocalParameterdvEXT
typedef void (*PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC_ALT)(GLuint,GLenum,GLuint,GLdouble *);
static inline void glGetNamedProgramLocalParameterdvEXT(GLuint program1,GLenum target1,GLuint index1,GLdouble * params1)
{
	static PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC_ALT fn=(PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC_ALT)glaltGetProcAddressExtension("glGetNamedProgramLocalParameterdvEXT","GL_EXT_direct_state_access");
	 fn(program1,target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetNamedProgramLocalParameterfvEXT
#define GL_ALT_FUNDEF_GetNamedProgramLocalParameterfvEXT
typedef void (*PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC_ALT)(GLuint,GLenum,GLuint,GLfloat *);
static inline void glGetNamedProgramLocalParameterfvEXT(GLuint program1,GLenum target1,GLuint index1,GLfloat * params1)
{
	static PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC_ALT fn=(PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC_ALT)glaltGetProcAddressExtension("glGetNamedProgramLocalParameterfvEXT","GL_EXT_direct_state_access");
	 fn(program1,target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetNamedProgramStringEXT
#define GL_ALT_FUNDEF_GetNamedProgramStringEXT
typedef void (*PFNGLGETNAMEDPROGRAMSTRINGEXTPROC_ALT)(GLuint,GLenum,GLenum,void *);
static inline void glGetNamedProgramStringEXT(GLuint program1,GLenum target1,GLenum pname1,void * string1)
{
	static PFNGLGETNAMEDPROGRAMSTRINGEXTPROC_ALT fn=(PFNGLGETNAMEDPROGRAMSTRINGEXTPROC_ALT)glaltGetProcAddressExtension("glGetNamedProgramStringEXT","GL_EXT_direct_state_access");
	 fn(program1,target1,pname1,string1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetNamedProgramivEXT
#define GL_ALT_FUNDEF_GetNamedProgramivEXT
typedef void (*PFNGLGETNAMEDPROGRAMIVEXTPROC_ALT)(GLuint,GLenum,GLenum,GLint *);
static inline void glGetNamedProgramivEXT(GLuint program1,GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETNAMEDPROGRAMIVEXTPROC_ALT fn=(PFNGLGETNAMEDPROGRAMIVEXTPROC_ALT)glaltGetProcAddressExtension("glGetNamedProgramivEXT","GL_EXT_direct_state_access");
	 fn(program1,target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetNamedRenderbufferParameterivEXT
#define GL_ALT_FUNDEF_GetNamedRenderbufferParameterivEXT
typedef void (*PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetNamedRenderbufferParameterivEXT(GLuint renderbuffer1,GLenum pname1,GLint * params1)
{
	static PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC_ALT fn=(PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC_ALT)glaltGetProcAddressExtension("glGetNamedRenderbufferParameterivEXT","GL_EXT_direct_state_access");
	 fn(renderbuffer1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetPointerIndexedvEXT
#define GL_ALT_FUNDEF_GetPointerIndexedvEXT
typedef void (*PFNGLGETPOINTERINDEXEDVEXTPROC_ALT)(GLenum,GLuint,void **);
static inline void glGetPointerIndexedvEXT(GLenum target1,GLuint index1,void ** data1)
{
	static PFNGLGETPOINTERINDEXEDVEXTPROC_ALT fn=(PFNGLGETPOINTERINDEXEDVEXTPROC_ALT)glaltGetProcAddressExtension("glGetPointerIndexedvEXT","GL_EXT_direct_state_access");
	 fn(target1,index1,data1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetPointeri_vEXT
#define GL_ALT_FUNDEF_GetPointeri_vEXT
typedef void (*PFNGLGETPOINTERI_VEXTPROC_ALT)(GLenum,GLuint,void **);
static inline void glGetPointeri_vEXT(GLenum pname1,GLuint index1,void ** params1)
{
	static PFNGLGETPOINTERI_VEXTPROC_ALT fn=(PFNGLGETPOINTERI_VEXTPROC_ALT)glaltGetProcAddressExtension("glGetPointeri_vEXT","GL_EXT_direct_state_access");
	 fn(pname1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetTextureImageEXT
#define GL_ALT_FUNDEF_GetTextureImageEXT
typedef void (*PFNGLGETTEXTUREIMAGEEXTPROC_ALT)(GLuint,GLenum,GLint,GLenum,GLenum,void *);
static inline void glGetTextureImageEXT(GLuint texture1,GLenum target1,GLint level1,GLenum format1,GLenum type1,void * pixels1)
{
	static PFNGLGETTEXTUREIMAGEEXTPROC_ALT fn=(PFNGLGETTEXTUREIMAGEEXTPROC_ALT)glaltGetProcAddressExtension("glGetTextureImageEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,level1,format1,type1,pixels1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetTextureLevelParameterfvEXT
#define GL_ALT_FUNDEF_GetTextureLevelParameterfvEXT
typedef void (*PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC_ALT)(GLuint,GLenum,GLint,GLenum,GLfloat *);
static inline void glGetTextureLevelParameterfvEXT(GLuint texture1,GLenum target1,GLint level1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC_ALT fn=(PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC_ALT)glaltGetProcAddressExtension("glGetTextureLevelParameterfvEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,level1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetTextureLevelParameterivEXT
#define GL_ALT_FUNDEF_GetTextureLevelParameterivEXT
typedef void (*PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC_ALT)(GLuint,GLenum,GLint,GLenum,GLint *);
static inline void glGetTextureLevelParameterivEXT(GLuint texture1,GLenum target1,GLint level1,GLenum pname1,GLint * params1)
{
	static PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC_ALT fn=(PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC_ALT)glaltGetProcAddressExtension("glGetTextureLevelParameterivEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,level1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetTextureParameterIivEXT
#define GL_ALT_FUNDEF_GetTextureParameterIivEXT
typedef void (*PFNGLGETTEXTUREPARAMETERIIVEXTPROC_ALT)(GLuint,GLenum,GLenum,GLint *);
static inline void glGetTextureParameterIivEXT(GLuint texture1,GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETTEXTUREPARAMETERIIVEXTPROC_ALT fn=(PFNGLGETTEXTUREPARAMETERIIVEXTPROC_ALT)glaltGetProcAddressExtension("glGetTextureParameterIivEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetTextureParameterIuivEXT
#define GL_ALT_FUNDEF_GetTextureParameterIuivEXT
typedef void (*PFNGLGETTEXTUREPARAMETERIUIVEXTPROC_ALT)(GLuint,GLenum,GLenum,GLuint *);
static inline void glGetTextureParameterIuivEXT(GLuint texture1,GLenum target1,GLenum pname1,GLuint * params1)
{
	static PFNGLGETTEXTUREPARAMETERIUIVEXTPROC_ALT fn=(PFNGLGETTEXTUREPARAMETERIUIVEXTPROC_ALT)glaltGetProcAddressExtension("glGetTextureParameterIuivEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetTextureParameterfvEXT
#define GL_ALT_FUNDEF_GetTextureParameterfvEXT
typedef void (*PFNGLGETTEXTUREPARAMETERFVEXTPROC_ALT)(GLuint,GLenum,GLenum,GLfloat *);
static inline void glGetTextureParameterfvEXT(GLuint texture1,GLenum target1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETTEXTUREPARAMETERFVEXTPROC_ALT fn=(PFNGLGETTEXTUREPARAMETERFVEXTPROC_ALT)glaltGetProcAddressExtension("glGetTextureParameterfvEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetTextureParameterivEXT
#define GL_ALT_FUNDEF_GetTextureParameterivEXT
typedef void (*PFNGLGETTEXTUREPARAMETERIVEXTPROC_ALT)(GLuint,GLenum,GLenum,GLint *);
static inline void glGetTextureParameterivEXT(GLuint texture1,GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETTEXTUREPARAMETERIVEXTPROC_ALT fn=(PFNGLGETTEXTUREPARAMETERIVEXTPROC_ALT)glaltGetProcAddressExtension("glGetTextureParameterivEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetVertexArrayIntegeri_vEXT
#define GL_ALT_FUNDEF_GetVertexArrayIntegeri_vEXT
typedef void (*PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC_ALT)(GLuint,GLuint,GLenum,GLint *);
static inline void glGetVertexArrayIntegeri_vEXT(GLuint vaobj1,GLuint index1,GLenum pname1,GLint * param1)
{
	static PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC_ALT fn=(PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC_ALT)glaltGetProcAddressExtension("glGetVertexArrayIntegeri_vEXT","GL_EXT_direct_state_access");
	 fn(vaobj1,index1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetVertexArrayIntegervEXT
#define GL_ALT_FUNDEF_GetVertexArrayIntegervEXT
typedef void (*PFNGLGETVERTEXARRAYINTEGERVEXTPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetVertexArrayIntegervEXT(GLuint vaobj1,GLenum pname1,GLint * param1)
{
	static PFNGLGETVERTEXARRAYINTEGERVEXTPROC_ALT fn=(PFNGLGETVERTEXARRAYINTEGERVEXTPROC_ALT)glaltGetProcAddressExtension("glGetVertexArrayIntegervEXT","GL_EXT_direct_state_access");
	 fn(vaobj1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetVertexArrayPointeri_vEXT
#define GL_ALT_FUNDEF_GetVertexArrayPointeri_vEXT
typedef void (*PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC_ALT)(GLuint,GLuint,GLenum,void **);
static inline void glGetVertexArrayPointeri_vEXT(GLuint vaobj1,GLuint index1,GLenum pname1,void ** param1)
{
	static PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC_ALT fn=(PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC_ALT)glaltGetProcAddressExtension("glGetVertexArrayPointeri_vEXT","GL_EXT_direct_state_access");
	 fn(vaobj1,index1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetVertexArrayPointervEXT
#define GL_ALT_FUNDEF_GetVertexArrayPointervEXT
typedef void (*PFNGLGETVERTEXARRAYPOINTERVEXTPROC_ALT)(GLuint,GLenum,void **);
static inline void glGetVertexArrayPointervEXT(GLuint vaobj1,GLenum pname1,void ** param1)
{
	static PFNGLGETVERTEXARRAYPOINTERVEXTPROC_ALT fn=(PFNGLGETVERTEXARRAYPOINTERVEXTPROC_ALT)glaltGetProcAddressExtension("glGetVertexArrayPointervEXT","GL_EXT_direct_state_access");
	 fn(vaobj1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IsEnabledIndexedEXT
#define GL_ALT_FUNDEF_IsEnabledIndexedEXT
typedef GLboolean (*PFNGLISENABLEDINDEXEDEXTPROC_ALT)(GLenum,GLuint);
static inline GLboolean glIsEnabledIndexedEXT(GLenum target1,GLuint index1)
{
	static PFNGLISENABLEDINDEXEDEXTPROC_ALT fn=(PFNGLISENABLEDINDEXEDEXTPROC_ALT)glaltGetProcAddressExtension("glIsEnabledIndexedEXT","GL_EXT_direct_state_access");
	return fn(target1,index1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MapNamedBufferEXT
#define GL_ALT_FUNDEF_MapNamedBufferEXT
typedef void * (*PFNGLMAPNAMEDBUFFEREXTPROC_ALT)(GLuint,GLenum);
static inline void * glMapNamedBufferEXT(GLuint buffer1,GLenum access1)
{
	static PFNGLMAPNAMEDBUFFEREXTPROC_ALT fn=(PFNGLMAPNAMEDBUFFEREXTPROC_ALT)glaltGetProcAddressExtension("glMapNamedBufferEXT","GL_EXT_direct_state_access");
	return fn(buffer1,access1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MapNamedBufferRangeEXT
#define GL_ALT_FUNDEF_MapNamedBufferRangeEXT
typedef void * (*PFNGLMAPNAMEDBUFFERRANGEEXTPROC_ALT)(GLuint,GLintptr,GLsizeiptr,GLbitfield);
static inline void * glMapNamedBufferRangeEXT(GLuint buffer1,GLintptr offset1,GLsizeiptr length1,GLbitfield access1)
{
	static PFNGLMAPNAMEDBUFFERRANGEEXTPROC_ALT fn=(PFNGLMAPNAMEDBUFFERRANGEEXTPROC_ALT)glaltGetProcAddressExtension("glMapNamedBufferRangeEXT","GL_EXT_direct_state_access");
	return fn(buffer1,offset1,length1,access1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MatrixFrustumEXT
#define GL_ALT_FUNDEF_MatrixFrustumEXT
typedef void (*PFNGLMATRIXFRUSTUMEXTPROC_ALT)(GLenum,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void glMatrixFrustumEXT(GLenum mode1,GLdouble left1,GLdouble right1,GLdouble bottom1,GLdouble top1,GLdouble zNear1,GLdouble zFar1)
{
	static PFNGLMATRIXFRUSTUMEXTPROC_ALT fn=(PFNGLMATRIXFRUSTUMEXTPROC_ALT)glaltGetProcAddressExtension("glMatrixFrustumEXT","GL_EXT_direct_state_access");
	 fn(mode1,left1,right1,bottom1,top1,zNear1,zFar1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MatrixLoadIdentityEXT
#define GL_ALT_FUNDEF_MatrixLoadIdentityEXT
typedef void (*PFNGLMATRIXLOADIDENTITYEXTPROC_ALT)(GLenum);
static inline void glMatrixLoadIdentityEXT(GLenum mode1)
{
	static PFNGLMATRIXLOADIDENTITYEXTPROC_ALT fn=(PFNGLMATRIXLOADIDENTITYEXTPROC_ALT)glaltGetProcAddressExtension("glMatrixLoadIdentityEXT","GL_EXT_direct_state_access");
	 fn(mode1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MatrixLoadTransposedEXT
#define GL_ALT_FUNDEF_MatrixLoadTransposedEXT
typedef void (*PFNGLMATRIXLOADTRANSPOSEDEXTPROC_ALT)(GLenum,const GLdouble *);
static inline void glMatrixLoadTransposedEXT(GLenum mode1,const GLdouble * m1)
{
	static PFNGLMATRIXLOADTRANSPOSEDEXTPROC_ALT fn=(PFNGLMATRIXLOADTRANSPOSEDEXTPROC_ALT)glaltGetProcAddressExtension("glMatrixLoadTransposedEXT","GL_EXT_direct_state_access");
	 fn(mode1,m1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MatrixLoadTransposefEXT
#define GL_ALT_FUNDEF_MatrixLoadTransposefEXT
typedef void (*PFNGLMATRIXLOADTRANSPOSEFEXTPROC_ALT)(GLenum,const GLfloat *);
static inline void glMatrixLoadTransposefEXT(GLenum mode1,const GLfloat * m1)
{
	static PFNGLMATRIXLOADTRANSPOSEFEXTPROC_ALT fn=(PFNGLMATRIXLOADTRANSPOSEFEXTPROC_ALT)glaltGetProcAddressExtension("glMatrixLoadTransposefEXT","GL_EXT_direct_state_access");
	 fn(mode1,m1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MatrixLoaddEXT
#define GL_ALT_FUNDEF_MatrixLoaddEXT
typedef void (*PFNGLMATRIXLOADDEXTPROC_ALT)(GLenum,const GLdouble *);
static inline void glMatrixLoaddEXT(GLenum mode1,const GLdouble * m1)
{
	static PFNGLMATRIXLOADDEXTPROC_ALT fn=(PFNGLMATRIXLOADDEXTPROC_ALT)glaltGetProcAddressExtension("glMatrixLoaddEXT","GL_EXT_direct_state_access");
	 fn(mode1,m1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MatrixLoadfEXT
#define GL_ALT_FUNDEF_MatrixLoadfEXT
typedef void (*PFNGLMATRIXLOADFEXTPROC_ALT)(GLenum,const GLfloat *);
static inline void glMatrixLoadfEXT(GLenum mode1,const GLfloat * m1)
{
	static PFNGLMATRIXLOADFEXTPROC_ALT fn=(PFNGLMATRIXLOADFEXTPROC_ALT)glaltGetProcAddressExtension("glMatrixLoadfEXT","GL_EXT_direct_state_access");
	 fn(mode1,m1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MatrixMultTransposedEXT
#define GL_ALT_FUNDEF_MatrixMultTransposedEXT
typedef void (*PFNGLMATRIXMULTTRANSPOSEDEXTPROC_ALT)(GLenum,const GLdouble *);
static inline void glMatrixMultTransposedEXT(GLenum mode1,const GLdouble * m1)
{
	static PFNGLMATRIXMULTTRANSPOSEDEXTPROC_ALT fn=(PFNGLMATRIXMULTTRANSPOSEDEXTPROC_ALT)glaltGetProcAddressExtension("glMatrixMultTransposedEXT","GL_EXT_direct_state_access");
	 fn(mode1,m1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MatrixMultTransposefEXT
#define GL_ALT_FUNDEF_MatrixMultTransposefEXT
typedef void (*PFNGLMATRIXMULTTRANSPOSEFEXTPROC_ALT)(GLenum,const GLfloat *);
static inline void glMatrixMultTransposefEXT(GLenum mode1,const GLfloat * m1)
{
	static PFNGLMATRIXMULTTRANSPOSEFEXTPROC_ALT fn=(PFNGLMATRIXMULTTRANSPOSEFEXTPROC_ALT)glaltGetProcAddressExtension("glMatrixMultTransposefEXT","GL_EXT_direct_state_access");
	 fn(mode1,m1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MatrixMultdEXT
#define GL_ALT_FUNDEF_MatrixMultdEXT
typedef void (*PFNGLMATRIXMULTDEXTPROC_ALT)(GLenum,const GLdouble *);
static inline void glMatrixMultdEXT(GLenum mode1,const GLdouble * m1)
{
	static PFNGLMATRIXMULTDEXTPROC_ALT fn=(PFNGLMATRIXMULTDEXTPROC_ALT)glaltGetProcAddressExtension("glMatrixMultdEXT","GL_EXT_direct_state_access");
	 fn(mode1,m1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MatrixMultfEXT
#define GL_ALT_FUNDEF_MatrixMultfEXT
typedef void (*PFNGLMATRIXMULTFEXTPROC_ALT)(GLenum,const GLfloat *);
static inline void glMatrixMultfEXT(GLenum mode1,const GLfloat * m1)
{
	static PFNGLMATRIXMULTFEXTPROC_ALT fn=(PFNGLMATRIXMULTFEXTPROC_ALT)glaltGetProcAddressExtension("glMatrixMultfEXT","GL_EXT_direct_state_access");
	 fn(mode1,m1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MatrixOrthoEXT
#define GL_ALT_FUNDEF_MatrixOrthoEXT
typedef void (*PFNGLMATRIXORTHOEXTPROC_ALT)(GLenum,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void glMatrixOrthoEXT(GLenum mode1,GLdouble left1,GLdouble right1,GLdouble bottom1,GLdouble top1,GLdouble zNear1,GLdouble zFar1)
{
	static PFNGLMATRIXORTHOEXTPROC_ALT fn=(PFNGLMATRIXORTHOEXTPROC_ALT)glaltGetProcAddressExtension("glMatrixOrthoEXT","GL_EXT_direct_state_access");
	 fn(mode1,left1,right1,bottom1,top1,zNear1,zFar1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MatrixPopEXT
#define GL_ALT_FUNDEF_MatrixPopEXT
typedef void (*PFNGLMATRIXPOPEXTPROC_ALT)(GLenum);
static inline void glMatrixPopEXT(GLenum mode1)
{
	static PFNGLMATRIXPOPEXTPROC_ALT fn=(PFNGLMATRIXPOPEXTPROC_ALT)glaltGetProcAddressExtension("glMatrixPopEXT","GL_EXT_direct_state_access");
	 fn(mode1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MatrixPushEXT
#define GL_ALT_FUNDEF_MatrixPushEXT
typedef void (*PFNGLMATRIXPUSHEXTPROC_ALT)(GLenum);
static inline void glMatrixPushEXT(GLenum mode1)
{
	static PFNGLMATRIXPUSHEXTPROC_ALT fn=(PFNGLMATRIXPUSHEXTPROC_ALT)glaltGetProcAddressExtension("glMatrixPushEXT","GL_EXT_direct_state_access");
	 fn(mode1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MatrixRotatedEXT
#define GL_ALT_FUNDEF_MatrixRotatedEXT
typedef void (*PFNGLMATRIXROTATEDEXTPROC_ALT)(GLenum,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void glMatrixRotatedEXT(GLenum mode1,GLdouble angle1,GLdouble x1,GLdouble y1,GLdouble z1)
{
	static PFNGLMATRIXROTATEDEXTPROC_ALT fn=(PFNGLMATRIXROTATEDEXTPROC_ALT)glaltGetProcAddressExtension("glMatrixRotatedEXT","GL_EXT_direct_state_access");
	 fn(mode1,angle1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MatrixRotatefEXT
#define GL_ALT_FUNDEF_MatrixRotatefEXT
typedef void (*PFNGLMATRIXROTATEFEXTPROC_ALT)(GLenum,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glMatrixRotatefEXT(GLenum mode1,GLfloat angle1,GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLMATRIXROTATEFEXTPROC_ALT fn=(PFNGLMATRIXROTATEFEXTPROC_ALT)glaltGetProcAddressExtension("glMatrixRotatefEXT","GL_EXT_direct_state_access");
	 fn(mode1,angle1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MatrixScaledEXT
#define GL_ALT_FUNDEF_MatrixScaledEXT
typedef void (*PFNGLMATRIXSCALEDEXTPROC_ALT)(GLenum,GLdouble,GLdouble,GLdouble);
static inline void glMatrixScaledEXT(GLenum mode1,GLdouble x1,GLdouble y1,GLdouble z1)
{
	static PFNGLMATRIXSCALEDEXTPROC_ALT fn=(PFNGLMATRIXSCALEDEXTPROC_ALT)glaltGetProcAddressExtension("glMatrixScaledEXT","GL_EXT_direct_state_access");
	 fn(mode1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MatrixScalefEXT
#define GL_ALT_FUNDEF_MatrixScalefEXT
typedef void (*PFNGLMATRIXSCALEFEXTPROC_ALT)(GLenum,GLfloat,GLfloat,GLfloat);
static inline void glMatrixScalefEXT(GLenum mode1,GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLMATRIXSCALEFEXTPROC_ALT fn=(PFNGLMATRIXSCALEFEXTPROC_ALT)glaltGetProcAddressExtension("glMatrixScalefEXT","GL_EXT_direct_state_access");
	 fn(mode1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MatrixTranslatedEXT
#define GL_ALT_FUNDEF_MatrixTranslatedEXT
typedef void (*PFNGLMATRIXTRANSLATEDEXTPROC_ALT)(GLenum,GLdouble,GLdouble,GLdouble);
static inline void glMatrixTranslatedEXT(GLenum mode1,GLdouble x1,GLdouble y1,GLdouble z1)
{
	static PFNGLMATRIXTRANSLATEDEXTPROC_ALT fn=(PFNGLMATRIXTRANSLATEDEXTPROC_ALT)glaltGetProcAddressExtension("glMatrixTranslatedEXT","GL_EXT_direct_state_access");
	 fn(mode1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MatrixTranslatefEXT
#define GL_ALT_FUNDEF_MatrixTranslatefEXT
typedef void (*PFNGLMATRIXTRANSLATEFEXTPROC_ALT)(GLenum,GLfloat,GLfloat,GLfloat);
static inline void glMatrixTranslatefEXT(GLenum mode1,GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLMATRIXTRANSLATEFEXTPROC_ALT fn=(PFNGLMATRIXTRANSLATEFEXTPROC_ALT)glaltGetProcAddressExtension("glMatrixTranslatefEXT","GL_EXT_direct_state_access");
	 fn(mode1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexBufferEXT
#define GL_ALT_FUNDEF_MultiTexBufferEXT
typedef void (*PFNGLMULTITEXBUFFEREXTPROC_ALT)(GLenum,GLenum,GLenum,GLuint);
static inline void glMultiTexBufferEXT(GLenum texunit1,GLenum target1,GLenum internalformat1,GLuint buffer1)
{
	static PFNGLMULTITEXBUFFEREXTPROC_ALT fn=(PFNGLMULTITEXBUFFEREXTPROC_ALT)glaltGetProcAddressExtension("glMultiTexBufferEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,internalformat1,buffer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexCoordPointerEXT
#define GL_ALT_FUNDEF_MultiTexCoordPointerEXT
typedef void (*PFNGLMULTITEXCOORDPOINTEREXTPROC_ALT)(GLenum,GLint,GLenum,GLsizei,const void *);
static inline void glMultiTexCoordPointerEXT(GLenum texunit1,GLint size1,GLenum type1,GLsizei stride1,const void * pointer1)
{
	static PFNGLMULTITEXCOORDPOINTEREXTPROC_ALT fn=(PFNGLMULTITEXCOORDPOINTEREXTPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoordPointerEXT","GL_EXT_direct_state_access");
	 fn(texunit1,size1,type1,stride1,pointer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexEnvfEXT
#define GL_ALT_FUNDEF_MultiTexEnvfEXT
typedef void (*PFNGLMULTITEXENVFEXTPROC_ALT)(GLenum,GLenum,GLenum,GLfloat);
static inline void glMultiTexEnvfEXT(GLenum texunit1,GLenum target1,GLenum pname1,GLfloat param1)
{
	static PFNGLMULTITEXENVFEXTPROC_ALT fn=(PFNGLMULTITEXENVFEXTPROC_ALT)glaltGetProcAddressExtension("glMultiTexEnvfEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexEnvfvEXT
#define GL_ALT_FUNDEF_MultiTexEnvfvEXT
typedef void (*PFNGLMULTITEXENVFVEXTPROC_ALT)(GLenum,GLenum,GLenum,const GLfloat *);
static inline void glMultiTexEnvfvEXT(GLenum texunit1,GLenum target1,GLenum pname1,const GLfloat * params1)
{
	static PFNGLMULTITEXENVFVEXTPROC_ALT fn=(PFNGLMULTITEXENVFVEXTPROC_ALT)glaltGetProcAddressExtension("glMultiTexEnvfvEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexEnviEXT
#define GL_ALT_FUNDEF_MultiTexEnviEXT
typedef void (*PFNGLMULTITEXENVIEXTPROC_ALT)(GLenum,GLenum,GLenum,GLint);
static inline void glMultiTexEnviEXT(GLenum texunit1,GLenum target1,GLenum pname1,GLint param1)
{
	static PFNGLMULTITEXENVIEXTPROC_ALT fn=(PFNGLMULTITEXENVIEXTPROC_ALT)glaltGetProcAddressExtension("glMultiTexEnviEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexEnvivEXT
#define GL_ALT_FUNDEF_MultiTexEnvivEXT
typedef void (*PFNGLMULTITEXENVIVEXTPROC_ALT)(GLenum,GLenum,GLenum,const GLint *);
static inline void glMultiTexEnvivEXT(GLenum texunit1,GLenum target1,GLenum pname1,const GLint * params1)
{
	static PFNGLMULTITEXENVIVEXTPROC_ALT fn=(PFNGLMULTITEXENVIVEXTPROC_ALT)glaltGetProcAddressExtension("glMultiTexEnvivEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexGendEXT
#define GL_ALT_FUNDEF_MultiTexGendEXT
typedef void (*PFNGLMULTITEXGENDEXTPROC_ALT)(GLenum,GLenum,GLenum,GLdouble);
static inline void glMultiTexGendEXT(GLenum texunit1,GLenum coord1,GLenum pname1,GLdouble param1)
{
	static PFNGLMULTITEXGENDEXTPROC_ALT fn=(PFNGLMULTITEXGENDEXTPROC_ALT)glaltGetProcAddressExtension("glMultiTexGendEXT","GL_EXT_direct_state_access");
	 fn(texunit1,coord1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexGendvEXT
#define GL_ALT_FUNDEF_MultiTexGendvEXT
typedef void (*PFNGLMULTITEXGENDVEXTPROC_ALT)(GLenum,GLenum,GLenum,const GLdouble *);
static inline void glMultiTexGendvEXT(GLenum texunit1,GLenum coord1,GLenum pname1,const GLdouble * params1)
{
	static PFNGLMULTITEXGENDVEXTPROC_ALT fn=(PFNGLMULTITEXGENDVEXTPROC_ALT)glaltGetProcAddressExtension("glMultiTexGendvEXT","GL_EXT_direct_state_access");
	 fn(texunit1,coord1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexGenfEXT
#define GL_ALT_FUNDEF_MultiTexGenfEXT
typedef void (*PFNGLMULTITEXGENFEXTPROC_ALT)(GLenum,GLenum,GLenum,GLfloat);
static inline void glMultiTexGenfEXT(GLenum texunit1,GLenum coord1,GLenum pname1,GLfloat param1)
{
	static PFNGLMULTITEXGENFEXTPROC_ALT fn=(PFNGLMULTITEXGENFEXTPROC_ALT)glaltGetProcAddressExtension("glMultiTexGenfEXT","GL_EXT_direct_state_access");
	 fn(texunit1,coord1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexGenfvEXT
#define GL_ALT_FUNDEF_MultiTexGenfvEXT
typedef void (*PFNGLMULTITEXGENFVEXTPROC_ALT)(GLenum,GLenum,GLenum,const GLfloat *);
static inline void glMultiTexGenfvEXT(GLenum texunit1,GLenum coord1,GLenum pname1,const GLfloat * params1)
{
	static PFNGLMULTITEXGENFVEXTPROC_ALT fn=(PFNGLMULTITEXGENFVEXTPROC_ALT)glaltGetProcAddressExtension("glMultiTexGenfvEXT","GL_EXT_direct_state_access");
	 fn(texunit1,coord1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexGeniEXT
#define GL_ALT_FUNDEF_MultiTexGeniEXT
typedef void (*PFNGLMULTITEXGENIEXTPROC_ALT)(GLenum,GLenum,GLenum,GLint);
static inline void glMultiTexGeniEXT(GLenum texunit1,GLenum coord1,GLenum pname1,GLint param1)
{
	static PFNGLMULTITEXGENIEXTPROC_ALT fn=(PFNGLMULTITEXGENIEXTPROC_ALT)glaltGetProcAddressExtension("glMultiTexGeniEXT","GL_EXT_direct_state_access");
	 fn(texunit1,coord1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexGenivEXT
#define GL_ALT_FUNDEF_MultiTexGenivEXT
typedef void (*PFNGLMULTITEXGENIVEXTPROC_ALT)(GLenum,GLenum,GLenum,const GLint *);
static inline void glMultiTexGenivEXT(GLenum texunit1,GLenum coord1,GLenum pname1,const GLint * params1)
{
	static PFNGLMULTITEXGENIVEXTPROC_ALT fn=(PFNGLMULTITEXGENIVEXTPROC_ALT)glaltGetProcAddressExtension("glMultiTexGenivEXT","GL_EXT_direct_state_access");
	 fn(texunit1,coord1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexImage1DEXT
#define GL_ALT_FUNDEF_MultiTexImage1DEXT
typedef void (*PFNGLMULTITEXIMAGE1DEXTPROC_ALT)(GLenum,GLenum,GLint,GLint,GLsizei,GLint,GLenum,GLenum,const void *);
static inline void glMultiTexImage1DEXT(GLenum texunit1,GLenum target1,GLint level1,GLint internalformat1,GLsizei width1,GLint border1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLMULTITEXIMAGE1DEXTPROC_ALT fn=(PFNGLMULTITEXIMAGE1DEXTPROC_ALT)glaltGetProcAddressExtension("glMultiTexImage1DEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,level1,internalformat1,width1,border1,format1,type1,pixels1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexImage2DEXT
#define GL_ALT_FUNDEF_MultiTexImage2DEXT
typedef void (*PFNGLMULTITEXIMAGE2DEXTPROC_ALT)(GLenum,GLenum,GLint,GLint,GLsizei,GLsizei,GLint,GLenum,GLenum,const void *);
static inline void glMultiTexImage2DEXT(GLenum texunit1,GLenum target1,GLint level1,GLint internalformat1,GLsizei width1,GLsizei height1,GLint border1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLMULTITEXIMAGE2DEXTPROC_ALT fn=(PFNGLMULTITEXIMAGE2DEXTPROC_ALT)glaltGetProcAddressExtension("glMultiTexImage2DEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,level1,internalformat1,width1,height1,border1,format1,type1,pixels1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexImage3DEXT
#define GL_ALT_FUNDEF_MultiTexImage3DEXT
typedef void (*PFNGLMULTITEXIMAGE3DEXTPROC_ALT)(GLenum,GLenum,GLint,GLint,GLsizei,GLsizei,GLsizei,GLint,GLenum,GLenum,const void *);
static inline void glMultiTexImage3DEXT(GLenum texunit1,GLenum target1,GLint level1,GLint internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLint border1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLMULTITEXIMAGE3DEXTPROC_ALT fn=(PFNGLMULTITEXIMAGE3DEXTPROC_ALT)glaltGetProcAddressExtension("glMultiTexImage3DEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,level1,internalformat1,width1,height1,depth1,border1,format1,type1,pixels1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexParameterIivEXT
#define GL_ALT_FUNDEF_MultiTexParameterIivEXT
typedef void (*PFNGLMULTITEXPARAMETERIIVEXTPROC_ALT)(GLenum,GLenum,GLenum,const GLint *);
static inline void glMultiTexParameterIivEXT(GLenum texunit1,GLenum target1,GLenum pname1,const GLint * params1)
{
	static PFNGLMULTITEXPARAMETERIIVEXTPROC_ALT fn=(PFNGLMULTITEXPARAMETERIIVEXTPROC_ALT)glaltGetProcAddressExtension("glMultiTexParameterIivEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexParameterIuivEXT
#define GL_ALT_FUNDEF_MultiTexParameterIuivEXT
typedef void (*PFNGLMULTITEXPARAMETERIUIVEXTPROC_ALT)(GLenum,GLenum,GLenum,const GLuint *);
static inline void glMultiTexParameterIuivEXT(GLenum texunit1,GLenum target1,GLenum pname1,const GLuint * params1)
{
	static PFNGLMULTITEXPARAMETERIUIVEXTPROC_ALT fn=(PFNGLMULTITEXPARAMETERIUIVEXTPROC_ALT)glaltGetProcAddressExtension("glMultiTexParameterIuivEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexParameterfEXT
#define GL_ALT_FUNDEF_MultiTexParameterfEXT
typedef void (*PFNGLMULTITEXPARAMETERFEXTPROC_ALT)(GLenum,GLenum,GLenum,GLfloat);
static inline void glMultiTexParameterfEXT(GLenum texunit1,GLenum target1,GLenum pname1,GLfloat param1)
{
	static PFNGLMULTITEXPARAMETERFEXTPROC_ALT fn=(PFNGLMULTITEXPARAMETERFEXTPROC_ALT)glaltGetProcAddressExtension("glMultiTexParameterfEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexParameterfvEXT
#define GL_ALT_FUNDEF_MultiTexParameterfvEXT
typedef void (*PFNGLMULTITEXPARAMETERFVEXTPROC_ALT)(GLenum,GLenum,GLenum,const GLfloat *);
static inline void glMultiTexParameterfvEXT(GLenum texunit1,GLenum target1,GLenum pname1,const GLfloat * params1)
{
	static PFNGLMULTITEXPARAMETERFVEXTPROC_ALT fn=(PFNGLMULTITEXPARAMETERFVEXTPROC_ALT)glaltGetProcAddressExtension("glMultiTexParameterfvEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexParameteriEXT
#define GL_ALT_FUNDEF_MultiTexParameteriEXT
typedef void (*PFNGLMULTITEXPARAMETERIEXTPROC_ALT)(GLenum,GLenum,GLenum,GLint);
static inline void glMultiTexParameteriEXT(GLenum texunit1,GLenum target1,GLenum pname1,GLint param1)
{
	static PFNGLMULTITEXPARAMETERIEXTPROC_ALT fn=(PFNGLMULTITEXPARAMETERIEXTPROC_ALT)glaltGetProcAddressExtension("glMultiTexParameteriEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexParameterivEXT
#define GL_ALT_FUNDEF_MultiTexParameterivEXT
typedef void (*PFNGLMULTITEXPARAMETERIVEXTPROC_ALT)(GLenum,GLenum,GLenum,const GLint *);
static inline void glMultiTexParameterivEXT(GLenum texunit1,GLenum target1,GLenum pname1,const GLint * params1)
{
	static PFNGLMULTITEXPARAMETERIVEXTPROC_ALT fn=(PFNGLMULTITEXPARAMETERIVEXTPROC_ALT)glaltGetProcAddressExtension("glMultiTexParameterivEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexRenderbufferEXT
#define GL_ALT_FUNDEF_MultiTexRenderbufferEXT
typedef void (*PFNGLMULTITEXRENDERBUFFEREXTPROC_ALT)(GLenum,GLenum,GLuint);
static inline void glMultiTexRenderbufferEXT(GLenum texunit1,GLenum target1,GLuint renderbuffer1)
{
	static PFNGLMULTITEXRENDERBUFFEREXTPROC_ALT fn=(PFNGLMULTITEXRENDERBUFFEREXTPROC_ALT)glaltGetProcAddressExtension("glMultiTexRenderbufferEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,renderbuffer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexSubImage1DEXT
#define GL_ALT_FUNDEF_MultiTexSubImage1DEXT
typedef void (*PFNGLMULTITEXSUBIMAGE1DEXTPROC_ALT)(GLenum,GLenum,GLint,GLint,GLsizei,GLenum,GLenum,const void *);
static inline void glMultiTexSubImage1DEXT(GLenum texunit1,GLenum target1,GLint level1,GLint xoffset1,GLsizei width1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLMULTITEXSUBIMAGE1DEXTPROC_ALT fn=(PFNGLMULTITEXSUBIMAGE1DEXTPROC_ALT)glaltGetProcAddressExtension("glMultiTexSubImage1DEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,level1,xoffset1,width1,format1,type1,pixels1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexSubImage2DEXT
#define GL_ALT_FUNDEF_MultiTexSubImage2DEXT
typedef void (*PFNGLMULTITEXSUBIMAGE2DEXTPROC_ALT)(GLenum,GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,const void *);
static inline void glMultiTexSubImage2DEXT(GLenum texunit1,GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLsizei width1,GLsizei height1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLMULTITEXSUBIMAGE2DEXTPROC_ALT fn=(PFNGLMULTITEXSUBIMAGE2DEXTPROC_ALT)glaltGetProcAddressExtension("glMultiTexSubImage2DEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,level1,xoffset1,yoffset1,width1,height1,format1,type1,pixels1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexSubImage3DEXT
#define GL_ALT_FUNDEF_MultiTexSubImage3DEXT
typedef void (*PFNGLMULTITEXSUBIMAGE3DEXTPROC_ALT)(GLenum,GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,const void *);
static inline void glMultiTexSubImage3DEXT(GLenum texunit1,GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLsizei width1,GLsizei height1,GLsizei depth1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLMULTITEXSUBIMAGE3DEXTPROC_ALT fn=(PFNGLMULTITEXSUBIMAGE3DEXTPROC_ALT)glaltGetProcAddressExtension("glMultiTexSubImage3DEXT","GL_EXT_direct_state_access");
	 fn(texunit1,target1,level1,xoffset1,yoffset1,zoffset1,width1,height1,depth1,format1,type1,pixels1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedBufferDataEXT
#define GL_ALT_FUNDEF_NamedBufferDataEXT
typedef void (*PFNGLNAMEDBUFFERDATAEXTPROC_ALT)(GLuint,GLsizeiptr,const void *,GLenum);
static inline void glNamedBufferDataEXT(GLuint buffer1,GLsizeiptr size1,const void * data1,GLenum usage1)
{
	static PFNGLNAMEDBUFFERDATAEXTPROC_ALT fn=(PFNGLNAMEDBUFFERDATAEXTPROC_ALT)glaltGetProcAddressExtension("glNamedBufferDataEXT","GL_EXT_direct_state_access");
	 fn(buffer1,size1,data1,usage1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedBufferStorageEXT
#define GL_ALT_FUNDEF_NamedBufferStorageEXT
typedef void (*PFNGLNAMEDBUFFERSTORAGEEXTPROC_ALT)(GLuint,GLsizeiptr,const void *,GLbitfield);
static inline void glNamedBufferStorageEXT(GLuint buffer1,GLsizeiptr size1,const void * data1,GLbitfield flags1)
{
	static PFNGLNAMEDBUFFERSTORAGEEXTPROC_ALT fn=(PFNGLNAMEDBUFFERSTORAGEEXTPROC_ALT)glaltGetProcAddressExtension("glNamedBufferStorageEXT","GL_EXT_direct_state_access");
	 fn(buffer1,size1,data1,flags1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedBufferSubDataEXT
#define GL_ALT_FUNDEF_NamedBufferSubDataEXT
typedef void (*PFNGLNAMEDBUFFERSUBDATAEXTPROC_ALT)(GLuint,GLintptr,GLsizeiptr,const void *);
static inline void glNamedBufferSubDataEXT(GLuint buffer1,GLintptr offset1,GLsizeiptr size1,const void * data1)
{
	static PFNGLNAMEDBUFFERSUBDATAEXTPROC_ALT fn=(PFNGLNAMEDBUFFERSUBDATAEXTPROC_ALT)glaltGetProcAddressExtension("glNamedBufferSubDataEXT","GL_EXT_direct_state_access");
	 fn(buffer1,offset1,size1,data1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedCopyBufferSubDataEXT
#define GL_ALT_FUNDEF_NamedCopyBufferSubDataEXT
typedef void (*PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC_ALT)(GLuint,GLuint,GLintptr,GLintptr,GLsizeiptr);
static inline void glNamedCopyBufferSubDataEXT(GLuint readBuffer1,GLuint writeBuffer1,GLintptr readOffset1,GLintptr writeOffset1,GLsizeiptr size1)
{
	static PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC_ALT fn=(PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC_ALT)glaltGetProcAddressExtension("glNamedCopyBufferSubDataEXT","GL_EXT_direct_state_access");
	 fn(readBuffer1,writeBuffer1,readOffset1,writeOffset1,size1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedFramebufferParameteriEXT
#define GL_ALT_FUNDEF_NamedFramebufferParameteriEXT
typedef void (*PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC_ALT)(GLuint,GLenum,GLint);
static inline void glNamedFramebufferParameteriEXT(GLuint framebuffer1,GLenum pname1,GLint param1)
{
	static PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC_ALT fn=(PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC_ALT)glaltGetProcAddressExtension("glNamedFramebufferParameteriEXT","GL_EXT_direct_state_access");
	 fn(framebuffer1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedFramebufferRenderbufferEXT
#define GL_ALT_FUNDEF_NamedFramebufferRenderbufferEXT
typedef void (*PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC_ALT)(GLuint,GLenum,GLenum,GLuint);
static inline void glNamedFramebufferRenderbufferEXT(GLuint framebuffer1,GLenum attachment1,GLenum renderbuffertarget1,GLuint renderbuffer1)
{
	static PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC_ALT fn=(PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC_ALT)glaltGetProcAddressExtension("glNamedFramebufferRenderbufferEXT","GL_EXT_direct_state_access");
	 fn(framebuffer1,attachment1,renderbuffertarget1,renderbuffer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedFramebufferTexture1DEXT
#define GL_ALT_FUNDEF_NamedFramebufferTexture1DEXT
typedef void (*PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC_ALT)(GLuint,GLenum,GLenum,GLuint,GLint);
static inline void glNamedFramebufferTexture1DEXT(GLuint framebuffer1,GLenum attachment1,GLenum textarget1,GLuint texture1,GLint level1)
{
	static PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC_ALT fn=(PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC_ALT)glaltGetProcAddressExtension("glNamedFramebufferTexture1DEXT","GL_EXT_direct_state_access");
	 fn(framebuffer1,attachment1,textarget1,texture1,level1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedFramebufferTexture2DEXT
#define GL_ALT_FUNDEF_NamedFramebufferTexture2DEXT
typedef void (*PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC_ALT)(GLuint,GLenum,GLenum,GLuint,GLint);
static inline void glNamedFramebufferTexture2DEXT(GLuint framebuffer1,GLenum attachment1,GLenum textarget1,GLuint texture1,GLint level1)
{
	static PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC_ALT fn=(PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC_ALT)glaltGetProcAddressExtension("glNamedFramebufferTexture2DEXT","GL_EXT_direct_state_access");
	 fn(framebuffer1,attachment1,textarget1,texture1,level1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedFramebufferTexture3DEXT
#define GL_ALT_FUNDEF_NamedFramebufferTexture3DEXT
typedef void (*PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC_ALT)(GLuint,GLenum,GLenum,GLuint,GLint,GLint);
static inline void glNamedFramebufferTexture3DEXT(GLuint framebuffer1,GLenum attachment1,GLenum textarget1,GLuint texture1,GLint level1,GLint zoffset1)
{
	static PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC_ALT fn=(PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC_ALT)glaltGetProcAddressExtension("glNamedFramebufferTexture3DEXT","GL_EXT_direct_state_access");
	 fn(framebuffer1,attachment1,textarget1,texture1,level1,zoffset1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedFramebufferTextureEXT
#define GL_ALT_FUNDEF_NamedFramebufferTextureEXT
typedef void (*PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC_ALT)(GLuint,GLenum,GLuint,GLint);
static inline void glNamedFramebufferTextureEXT(GLuint framebuffer1,GLenum attachment1,GLuint texture1,GLint level1)
{
	static PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC_ALT fn=(PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC_ALT)glaltGetProcAddressExtension("glNamedFramebufferTextureEXT","GL_EXT_direct_state_access");
	 fn(framebuffer1,attachment1,texture1,level1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedFramebufferTextureFaceEXT
#define GL_ALT_FUNDEF_NamedFramebufferTextureFaceEXT
typedef void (*PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC_ALT)(GLuint,GLenum,GLuint,GLint,GLenum);
static inline void glNamedFramebufferTextureFaceEXT(GLuint framebuffer1,GLenum attachment1,GLuint texture1,GLint level1,GLenum face1)
{
	static PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC_ALT fn=(PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC_ALT)glaltGetProcAddressExtension("glNamedFramebufferTextureFaceEXT","GL_EXT_direct_state_access");
	 fn(framebuffer1,attachment1,texture1,level1,face1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedFramebufferTextureLayerEXT
#define GL_ALT_FUNDEF_NamedFramebufferTextureLayerEXT
typedef void (*PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC_ALT)(GLuint,GLenum,GLuint,GLint,GLint);
static inline void glNamedFramebufferTextureLayerEXT(GLuint framebuffer1,GLenum attachment1,GLuint texture1,GLint level1,GLint layer1)
{
	static PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC_ALT fn=(PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC_ALT)glaltGetProcAddressExtension("glNamedFramebufferTextureLayerEXT","GL_EXT_direct_state_access");
	 fn(framebuffer1,attachment1,texture1,level1,layer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedProgramLocalParameter4dEXT
#define GL_ALT_FUNDEF_NamedProgramLocalParameter4dEXT
typedef void (*PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC_ALT)(GLuint,GLenum,GLuint,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void glNamedProgramLocalParameter4dEXT(GLuint program1,GLenum target1,GLuint index1,GLdouble x1,GLdouble y1,GLdouble z1,GLdouble w1)
{
	static PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC_ALT fn=(PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC_ALT)glaltGetProcAddressExtension("glNamedProgramLocalParameter4dEXT","GL_EXT_direct_state_access");
	 fn(program1,target1,index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedProgramLocalParameter4dvEXT
#define GL_ALT_FUNDEF_NamedProgramLocalParameter4dvEXT
typedef void (*PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC_ALT)(GLuint,GLenum,GLuint,const GLdouble *);
static inline void glNamedProgramLocalParameter4dvEXT(GLuint program1,GLenum target1,GLuint index1,const GLdouble * params1)
{
	static PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC_ALT fn=(PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC_ALT)glaltGetProcAddressExtension("glNamedProgramLocalParameter4dvEXT","GL_EXT_direct_state_access");
	 fn(program1,target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedProgramLocalParameter4fEXT
#define GL_ALT_FUNDEF_NamedProgramLocalParameter4fEXT
typedef void (*PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC_ALT)(GLuint,GLenum,GLuint,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glNamedProgramLocalParameter4fEXT(GLuint program1,GLenum target1,GLuint index1,GLfloat x1,GLfloat y1,GLfloat z1,GLfloat w1)
{
	static PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC_ALT fn=(PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC_ALT)glaltGetProcAddressExtension("glNamedProgramLocalParameter4fEXT","GL_EXT_direct_state_access");
	 fn(program1,target1,index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedProgramLocalParameter4fvEXT
#define GL_ALT_FUNDEF_NamedProgramLocalParameter4fvEXT
typedef void (*PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC_ALT)(GLuint,GLenum,GLuint,const GLfloat *);
static inline void glNamedProgramLocalParameter4fvEXT(GLuint program1,GLenum target1,GLuint index1,const GLfloat * params1)
{
	static PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC_ALT fn=(PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC_ALT)glaltGetProcAddressExtension("glNamedProgramLocalParameter4fvEXT","GL_EXT_direct_state_access");
	 fn(program1,target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedProgramLocalParameterI4iEXT
#define GL_ALT_FUNDEF_NamedProgramLocalParameterI4iEXT
typedef void (*PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC_ALT)(GLuint,GLenum,GLuint,GLint,GLint,GLint,GLint);
static inline void glNamedProgramLocalParameterI4iEXT(GLuint program1,GLenum target1,GLuint index1,GLint x1,GLint y1,GLint z1,GLint w1)
{
	static PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC_ALT fn=(PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC_ALT)glaltGetProcAddressExtension("glNamedProgramLocalParameterI4iEXT","GL_EXT_direct_state_access");
	 fn(program1,target1,index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedProgramLocalParameterI4ivEXT
#define GL_ALT_FUNDEF_NamedProgramLocalParameterI4ivEXT
typedef void (*PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC_ALT)(GLuint,GLenum,GLuint,const GLint *);
static inline void glNamedProgramLocalParameterI4ivEXT(GLuint program1,GLenum target1,GLuint index1,const GLint * params1)
{
	static PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC_ALT fn=(PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC_ALT)glaltGetProcAddressExtension("glNamedProgramLocalParameterI4ivEXT","GL_EXT_direct_state_access");
	 fn(program1,target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedProgramLocalParameterI4uiEXT
#define GL_ALT_FUNDEF_NamedProgramLocalParameterI4uiEXT
typedef void (*PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC_ALT)(GLuint,GLenum,GLuint,GLuint,GLuint,GLuint,GLuint);
static inline void glNamedProgramLocalParameterI4uiEXT(GLuint program1,GLenum target1,GLuint index1,GLuint x1,GLuint y1,GLuint z1,GLuint w1)
{
	static PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC_ALT fn=(PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC_ALT)glaltGetProcAddressExtension("glNamedProgramLocalParameterI4uiEXT","GL_EXT_direct_state_access");
	 fn(program1,target1,index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedProgramLocalParameterI4uivEXT
#define GL_ALT_FUNDEF_NamedProgramLocalParameterI4uivEXT
typedef void (*PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC_ALT)(GLuint,GLenum,GLuint,const GLuint *);
static inline void glNamedProgramLocalParameterI4uivEXT(GLuint program1,GLenum target1,GLuint index1,const GLuint * params1)
{
	static PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC_ALT fn=(PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC_ALT)glaltGetProcAddressExtension("glNamedProgramLocalParameterI4uivEXT","GL_EXT_direct_state_access");
	 fn(program1,target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedProgramLocalParameters4fvEXT
#define GL_ALT_FUNDEF_NamedProgramLocalParameters4fvEXT
typedef void (*PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC_ALT)(GLuint,GLenum,GLuint,GLsizei,const GLfloat *);
static inline void glNamedProgramLocalParameters4fvEXT(GLuint program1,GLenum target1,GLuint index1,GLsizei count1,const GLfloat * params1)
{
	static PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC_ALT fn=(PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC_ALT)glaltGetProcAddressExtension("glNamedProgramLocalParameters4fvEXT","GL_EXT_direct_state_access");
	 fn(program1,target1,index1,count1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedProgramLocalParametersI4ivEXT
#define GL_ALT_FUNDEF_NamedProgramLocalParametersI4ivEXT
typedef void (*PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC_ALT)(GLuint,GLenum,GLuint,GLsizei,const GLint *);
static inline void glNamedProgramLocalParametersI4ivEXT(GLuint program1,GLenum target1,GLuint index1,GLsizei count1,const GLint * params1)
{
	static PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC_ALT fn=(PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC_ALT)glaltGetProcAddressExtension("glNamedProgramLocalParametersI4ivEXT","GL_EXT_direct_state_access");
	 fn(program1,target1,index1,count1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedProgramLocalParametersI4uivEXT
#define GL_ALT_FUNDEF_NamedProgramLocalParametersI4uivEXT
typedef void (*PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC_ALT)(GLuint,GLenum,GLuint,GLsizei,const GLuint *);
static inline void glNamedProgramLocalParametersI4uivEXT(GLuint program1,GLenum target1,GLuint index1,GLsizei count1,const GLuint * params1)
{
	static PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC_ALT fn=(PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC_ALT)glaltGetProcAddressExtension("glNamedProgramLocalParametersI4uivEXT","GL_EXT_direct_state_access");
	 fn(program1,target1,index1,count1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedProgramStringEXT
#define GL_ALT_FUNDEF_NamedProgramStringEXT
typedef void (*PFNGLNAMEDPROGRAMSTRINGEXTPROC_ALT)(GLuint,GLenum,GLenum,GLsizei,const void *);
static inline void glNamedProgramStringEXT(GLuint program1,GLenum target1,GLenum format1,GLsizei len1,const void * string1)
{
	static PFNGLNAMEDPROGRAMSTRINGEXTPROC_ALT fn=(PFNGLNAMEDPROGRAMSTRINGEXTPROC_ALT)glaltGetProcAddressExtension("glNamedProgramStringEXT","GL_EXT_direct_state_access");
	 fn(program1,target1,format1,len1,string1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedRenderbufferStorageEXT
#define GL_ALT_FUNDEF_NamedRenderbufferStorageEXT
typedef void (*PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC_ALT)(GLuint,GLenum,GLsizei,GLsizei);
static inline void glNamedRenderbufferStorageEXT(GLuint renderbuffer1,GLenum internalformat1,GLsizei width1,GLsizei height1)
{
	static PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC_ALT fn=(PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC_ALT)glaltGetProcAddressExtension("glNamedRenderbufferStorageEXT","GL_EXT_direct_state_access");
	 fn(renderbuffer1,internalformat1,width1,height1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedRenderbufferStorageMultisampleCoverageEXT
#define GL_ALT_FUNDEF_NamedRenderbufferStorageMultisampleCoverageEXT
typedef void (*PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC_ALT)(GLuint,GLsizei,GLsizei,GLenum,GLsizei,GLsizei);
static inline void glNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer1,GLsizei coverageSamples1,GLsizei colorSamples1,GLenum internalformat1,GLsizei width1,GLsizei height1)
{
	static PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC_ALT fn=(PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC_ALT)glaltGetProcAddressExtension("glNamedRenderbufferStorageMultisampleCoverageEXT","GL_EXT_direct_state_access");
	 fn(renderbuffer1,coverageSamples1,colorSamples1,internalformat1,width1,height1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NamedRenderbufferStorageMultisampleEXT
#define GL_ALT_FUNDEF_NamedRenderbufferStorageMultisampleEXT
typedef void (*PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC_ALT)(GLuint,GLsizei,GLenum,GLsizei,GLsizei);
static inline void glNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer1,GLsizei samples1,GLenum internalformat1,GLsizei width1,GLsizei height1)
{
	static PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC_ALT fn=(PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC_ALT)glaltGetProcAddressExtension("glNamedRenderbufferStorageMultisampleEXT","GL_EXT_direct_state_access");
	 fn(renderbuffer1,samples1,internalformat1,width1,height1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform1dEXT
#define GL_ALT_FUNDEF_ProgramUniform1dEXT
typedef void (*PFNGLPROGRAMUNIFORM1DEXTPROC_ALT)(GLuint,GLint,GLdouble);
static inline void glProgramUniform1dEXT(GLuint program1,GLint location1,GLdouble x1)
{
	static PFNGLPROGRAMUNIFORM1DEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM1DEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform1dEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,x1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform1dvEXT
#define GL_ALT_FUNDEF_ProgramUniform1dvEXT
typedef void (*PFNGLPROGRAMUNIFORM1DVEXTPROC_ALT)(GLuint,GLint,GLsizei,const GLdouble *);
static inline void glProgramUniform1dvEXT(GLuint program1,GLint location1,GLsizei count1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORM1DVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM1DVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform1dvEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform1fEXT
#define GL_ALT_FUNDEF_ProgramUniform1fEXT
typedef void (*PFNGLPROGRAMUNIFORM1FEXTPROC_ALT)(GLuint,GLint,GLfloat);
static inline void glProgramUniform1fEXT(GLuint program1,GLint location1,GLfloat v01)
{
	static PFNGLPROGRAMUNIFORM1FEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM1FEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform1fEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,v01);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform1fvEXT
#define GL_ALT_FUNDEF_ProgramUniform1fvEXT
typedef void (*PFNGLPROGRAMUNIFORM1FVEXTPROC_ALT)(GLuint,GLint,GLsizei,const GLfloat *);
static inline void glProgramUniform1fvEXT(GLuint program1,GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORM1FVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM1FVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform1fvEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform1iEXT
#define GL_ALT_FUNDEF_ProgramUniform1iEXT
typedef void (*PFNGLPROGRAMUNIFORM1IEXTPROC_ALT)(GLuint,GLint,GLint);
static inline void glProgramUniform1iEXT(GLuint program1,GLint location1,GLint v01)
{
	static PFNGLPROGRAMUNIFORM1IEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM1IEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform1iEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,v01);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform1ivEXT
#define GL_ALT_FUNDEF_ProgramUniform1ivEXT
typedef void (*PFNGLPROGRAMUNIFORM1IVEXTPROC_ALT)(GLuint,GLint,GLsizei,const GLint *);
static inline void glProgramUniform1ivEXT(GLuint program1,GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLPROGRAMUNIFORM1IVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM1IVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform1ivEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform1uiEXT
#define GL_ALT_FUNDEF_ProgramUniform1uiEXT
typedef void (*PFNGLPROGRAMUNIFORM1UIEXTPROC_ALT)(GLuint,GLint,GLuint);
static inline void glProgramUniform1uiEXT(GLuint program1,GLint location1,GLuint v01)
{
	static PFNGLPROGRAMUNIFORM1UIEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM1UIEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform1uiEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,v01);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform1uivEXT
#define GL_ALT_FUNDEF_ProgramUniform1uivEXT
typedef void (*PFNGLPROGRAMUNIFORM1UIVEXTPROC_ALT)(GLuint,GLint,GLsizei,const GLuint *);
static inline void glProgramUniform1uivEXT(GLuint program1,GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLPROGRAMUNIFORM1UIVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM1UIVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform1uivEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform2dEXT
#define GL_ALT_FUNDEF_ProgramUniform2dEXT
typedef void (*PFNGLPROGRAMUNIFORM2DEXTPROC_ALT)(GLuint,GLint,GLdouble,GLdouble);
static inline void glProgramUniform2dEXT(GLuint program1,GLint location1,GLdouble x1,GLdouble y1)
{
	static PFNGLPROGRAMUNIFORM2DEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM2DEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform2dEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,x1,y1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform2dvEXT
#define GL_ALT_FUNDEF_ProgramUniform2dvEXT
typedef void (*PFNGLPROGRAMUNIFORM2DVEXTPROC_ALT)(GLuint,GLint,GLsizei,const GLdouble *);
static inline void glProgramUniform2dvEXT(GLuint program1,GLint location1,GLsizei count1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORM2DVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM2DVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform2dvEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform2fEXT
#define GL_ALT_FUNDEF_ProgramUniform2fEXT
typedef void (*PFNGLPROGRAMUNIFORM2FEXTPROC_ALT)(GLuint,GLint,GLfloat,GLfloat);
static inline void glProgramUniform2fEXT(GLuint program1,GLint location1,GLfloat v01,GLfloat v11)
{
	static PFNGLPROGRAMUNIFORM2FEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM2FEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform2fEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,v01,v11);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform2fvEXT
#define GL_ALT_FUNDEF_ProgramUniform2fvEXT
typedef void (*PFNGLPROGRAMUNIFORM2FVEXTPROC_ALT)(GLuint,GLint,GLsizei,const GLfloat *);
static inline void glProgramUniform2fvEXT(GLuint program1,GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORM2FVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM2FVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform2fvEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform2iEXT
#define GL_ALT_FUNDEF_ProgramUniform2iEXT
typedef void (*PFNGLPROGRAMUNIFORM2IEXTPROC_ALT)(GLuint,GLint,GLint,GLint);
static inline void glProgramUniform2iEXT(GLuint program1,GLint location1,GLint v01,GLint v11)
{
	static PFNGLPROGRAMUNIFORM2IEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM2IEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform2iEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,v01,v11);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform2ivEXT
#define GL_ALT_FUNDEF_ProgramUniform2ivEXT
typedef void (*PFNGLPROGRAMUNIFORM2IVEXTPROC_ALT)(GLuint,GLint,GLsizei,const GLint *);
static inline void glProgramUniform2ivEXT(GLuint program1,GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLPROGRAMUNIFORM2IVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM2IVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform2ivEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform2uiEXT
#define GL_ALT_FUNDEF_ProgramUniform2uiEXT
typedef void (*PFNGLPROGRAMUNIFORM2UIEXTPROC_ALT)(GLuint,GLint,GLuint,GLuint);
static inline void glProgramUniform2uiEXT(GLuint program1,GLint location1,GLuint v01,GLuint v11)
{
	static PFNGLPROGRAMUNIFORM2UIEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM2UIEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform2uiEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,v01,v11);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform2uivEXT
#define GL_ALT_FUNDEF_ProgramUniform2uivEXT
typedef void (*PFNGLPROGRAMUNIFORM2UIVEXTPROC_ALT)(GLuint,GLint,GLsizei,const GLuint *);
static inline void glProgramUniform2uivEXT(GLuint program1,GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLPROGRAMUNIFORM2UIVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM2UIVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform2uivEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform3dEXT
#define GL_ALT_FUNDEF_ProgramUniform3dEXT
typedef void (*PFNGLPROGRAMUNIFORM3DEXTPROC_ALT)(GLuint,GLint,GLdouble,GLdouble,GLdouble);
static inline void glProgramUniform3dEXT(GLuint program1,GLint location1,GLdouble x1,GLdouble y1,GLdouble z1)
{
	static PFNGLPROGRAMUNIFORM3DEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM3DEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform3dEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform3dvEXT
#define GL_ALT_FUNDEF_ProgramUniform3dvEXT
typedef void (*PFNGLPROGRAMUNIFORM3DVEXTPROC_ALT)(GLuint,GLint,GLsizei,const GLdouble *);
static inline void glProgramUniform3dvEXT(GLuint program1,GLint location1,GLsizei count1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORM3DVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM3DVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform3dvEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform3fEXT
#define GL_ALT_FUNDEF_ProgramUniform3fEXT
typedef void (*PFNGLPROGRAMUNIFORM3FEXTPROC_ALT)(GLuint,GLint,GLfloat,GLfloat,GLfloat);
static inline void glProgramUniform3fEXT(GLuint program1,GLint location1,GLfloat v01,GLfloat v11,GLfloat v21)
{
	static PFNGLPROGRAMUNIFORM3FEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM3FEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform3fEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,v01,v11,v21);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform3fvEXT
#define GL_ALT_FUNDEF_ProgramUniform3fvEXT
typedef void (*PFNGLPROGRAMUNIFORM3FVEXTPROC_ALT)(GLuint,GLint,GLsizei,const GLfloat *);
static inline void glProgramUniform3fvEXT(GLuint program1,GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORM3FVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM3FVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform3fvEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform3iEXT
#define GL_ALT_FUNDEF_ProgramUniform3iEXT
typedef void (*PFNGLPROGRAMUNIFORM3IEXTPROC_ALT)(GLuint,GLint,GLint,GLint,GLint);
static inline void glProgramUniform3iEXT(GLuint program1,GLint location1,GLint v01,GLint v11,GLint v21)
{
	static PFNGLPROGRAMUNIFORM3IEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM3IEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform3iEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,v01,v11,v21);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform3ivEXT
#define GL_ALT_FUNDEF_ProgramUniform3ivEXT
typedef void (*PFNGLPROGRAMUNIFORM3IVEXTPROC_ALT)(GLuint,GLint,GLsizei,const GLint *);
static inline void glProgramUniform3ivEXT(GLuint program1,GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLPROGRAMUNIFORM3IVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM3IVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform3ivEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform3uiEXT
#define GL_ALT_FUNDEF_ProgramUniform3uiEXT
typedef void (*PFNGLPROGRAMUNIFORM3UIEXTPROC_ALT)(GLuint,GLint,GLuint,GLuint,GLuint);
static inline void glProgramUniform3uiEXT(GLuint program1,GLint location1,GLuint v01,GLuint v11,GLuint v21)
{
	static PFNGLPROGRAMUNIFORM3UIEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM3UIEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform3uiEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,v01,v11,v21);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform3uivEXT
#define GL_ALT_FUNDEF_ProgramUniform3uivEXT
typedef void (*PFNGLPROGRAMUNIFORM3UIVEXTPROC_ALT)(GLuint,GLint,GLsizei,const GLuint *);
static inline void glProgramUniform3uivEXT(GLuint program1,GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLPROGRAMUNIFORM3UIVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM3UIVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform3uivEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform4dEXT
#define GL_ALT_FUNDEF_ProgramUniform4dEXT
typedef void (*PFNGLPROGRAMUNIFORM4DEXTPROC_ALT)(GLuint,GLint,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void glProgramUniform4dEXT(GLuint program1,GLint location1,GLdouble x1,GLdouble y1,GLdouble z1,GLdouble w1)
{
	static PFNGLPROGRAMUNIFORM4DEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM4DEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform4dEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform4dvEXT
#define GL_ALT_FUNDEF_ProgramUniform4dvEXT
typedef void (*PFNGLPROGRAMUNIFORM4DVEXTPROC_ALT)(GLuint,GLint,GLsizei,const GLdouble *);
static inline void glProgramUniform4dvEXT(GLuint program1,GLint location1,GLsizei count1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORM4DVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM4DVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform4dvEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform4fEXT
#define GL_ALT_FUNDEF_ProgramUniform4fEXT
typedef void (*PFNGLPROGRAMUNIFORM4FEXTPROC_ALT)(GLuint,GLint,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glProgramUniform4fEXT(GLuint program1,GLint location1,GLfloat v01,GLfloat v11,GLfloat v21,GLfloat v31)
{
	static PFNGLPROGRAMUNIFORM4FEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM4FEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform4fEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,v01,v11,v21,v31);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform4fvEXT
#define GL_ALT_FUNDEF_ProgramUniform4fvEXT
typedef void (*PFNGLPROGRAMUNIFORM4FVEXTPROC_ALT)(GLuint,GLint,GLsizei,const GLfloat *);
static inline void glProgramUniform4fvEXT(GLuint program1,GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORM4FVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM4FVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform4fvEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform4iEXT
#define GL_ALT_FUNDEF_ProgramUniform4iEXT
typedef void (*PFNGLPROGRAMUNIFORM4IEXTPROC_ALT)(GLuint,GLint,GLint,GLint,GLint,GLint);
static inline void glProgramUniform4iEXT(GLuint program1,GLint location1,GLint v01,GLint v11,GLint v21,GLint v31)
{
	static PFNGLPROGRAMUNIFORM4IEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM4IEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform4iEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,v01,v11,v21,v31);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform4ivEXT
#define GL_ALT_FUNDEF_ProgramUniform4ivEXT
typedef void (*PFNGLPROGRAMUNIFORM4IVEXTPROC_ALT)(GLuint,GLint,GLsizei,const GLint *);
static inline void glProgramUniform4ivEXT(GLuint program1,GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLPROGRAMUNIFORM4IVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM4IVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform4ivEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform4uiEXT
#define GL_ALT_FUNDEF_ProgramUniform4uiEXT
typedef void (*PFNGLPROGRAMUNIFORM4UIEXTPROC_ALT)(GLuint,GLint,GLuint,GLuint,GLuint,GLuint);
static inline void glProgramUniform4uiEXT(GLuint program1,GLint location1,GLuint v01,GLuint v11,GLuint v21,GLuint v31)
{
	static PFNGLPROGRAMUNIFORM4UIEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM4UIEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform4uiEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,v01,v11,v21,v31);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform4uivEXT
#define GL_ALT_FUNDEF_ProgramUniform4uivEXT
typedef void (*PFNGLPROGRAMUNIFORM4UIVEXTPROC_ALT)(GLuint,GLint,GLsizei,const GLuint *);
static inline void glProgramUniform4uivEXT(GLuint program1,GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLPROGRAMUNIFORM4UIVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM4UIVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform4uivEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix2dvEXT
#define GL_ALT_FUNDEF_ProgramUniformMatrix2dvEXT
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glProgramUniformMatrix2dvEXT(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix2dvEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix2fvEXT
#define GL_ALT_FUNDEF_ProgramUniformMatrix2fvEXT
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix2fvEXT(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix2fvEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix2x3dvEXT
#define GL_ALT_FUNDEF_ProgramUniformMatrix2x3dvEXT
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glProgramUniformMatrix2x3dvEXT(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix2x3dvEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix2x3fvEXT
#define GL_ALT_FUNDEF_ProgramUniformMatrix2x3fvEXT
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix2x3fvEXT(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix2x3fvEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix2x4dvEXT
#define GL_ALT_FUNDEF_ProgramUniformMatrix2x4dvEXT
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glProgramUniformMatrix2x4dvEXT(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix2x4dvEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix2x4fvEXT
#define GL_ALT_FUNDEF_ProgramUniformMatrix2x4fvEXT
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix2x4fvEXT(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix2x4fvEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix3dvEXT
#define GL_ALT_FUNDEF_ProgramUniformMatrix3dvEXT
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glProgramUniformMatrix3dvEXT(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix3dvEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix3fvEXT
#define GL_ALT_FUNDEF_ProgramUniformMatrix3fvEXT
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix3fvEXT(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix3fvEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix3x2dvEXT
#define GL_ALT_FUNDEF_ProgramUniformMatrix3x2dvEXT
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glProgramUniformMatrix3x2dvEXT(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix3x2dvEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix3x2fvEXT
#define GL_ALT_FUNDEF_ProgramUniformMatrix3x2fvEXT
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix3x2fvEXT(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix3x2fvEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix3x4dvEXT
#define GL_ALT_FUNDEF_ProgramUniformMatrix3x4dvEXT
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glProgramUniformMatrix3x4dvEXT(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix3x4dvEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix3x4fvEXT
#define GL_ALT_FUNDEF_ProgramUniformMatrix3x4fvEXT
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix3x4fvEXT(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix3x4fvEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix4dvEXT
#define GL_ALT_FUNDEF_ProgramUniformMatrix4dvEXT
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glProgramUniformMatrix4dvEXT(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix4dvEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix4fvEXT
#define GL_ALT_FUNDEF_ProgramUniformMatrix4fvEXT
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix4fvEXT(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix4fvEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix4x2dvEXT
#define GL_ALT_FUNDEF_ProgramUniformMatrix4x2dvEXT
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glProgramUniformMatrix4x2dvEXT(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix4x2dvEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix4x2fvEXT
#define GL_ALT_FUNDEF_ProgramUniformMatrix4x2fvEXT
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix4x2fvEXT(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix4x2fvEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix4x3dvEXT
#define GL_ALT_FUNDEF_ProgramUniformMatrix4x3dvEXT
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glProgramUniformMatrix4x3dvEXT(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix4x3dvEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix4x3fvEXT
#define GL_ALT_FUNDEF_ProgramUniformMatrix4x3fvEXT
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix4x3fvEXT(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix4x3fvEXT","GL_EXT_direct_state_access");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_PushClientAttribDefaultEXT
#define GL_ALT_FUNDEF_PushClientAttribDefaultEXT
typedef void (*PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC_ALT)(GLbitfield);
static inline void glPushClientAttribDefaultEXT(GLbitfield mask1)
{
	static PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC_ALT fn=(PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC_ALT)glaltGetProcAddressExtension("glPushClientAttribDefaultEXT","GL_EXT_direct_state_access");
	 fn(mask1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureBufferEXT
#define GL_ALT_FUNDEF_TextureBufferEXT
typedef void (*PFNGLTEXTUREBUFFEREXTPROC_ALT)(GLuint,GLenum,GLenum,GLuint);
static inline void glTextureBufferEXT(GLuint texture1,GLenum target1,GLenum internalformat1,GLuint buffer1)
{
	static PFNGLTEXTUREBUFFEREXTPROC_ALT fn=(PFNGLTEXTUREBUFFEREXTPROC_ALT)glaltGetProcAddressExtension("glTextureBufferEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,internalformat1,buffer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureBufferRangeEXT
#define GL_ALT_FUNDEF_TextureBufferRangeEXT
typedef void (*PFNGLTEXTUREBUFFERRANGEEXTPROC_ALT)(GLuint,GLenum,GLenum,GLuint,GLintptr,GLsizeiptr);
static inline void glTextureBufferRangeEXT(GLuint texture1,GLenum target1,GLenum internalformat1,GLuint buffer1,GLintptr offset1,GLsizeiptr size1)
{
	static PFNGLTEXTUREBUFFERRANGEEXTPROC_ALT fn=(PFNGLTEXTUREBUFFERRANGEEXTPROC_ALT)glaltGetProcAddressExtension("glTextureBufferRangeEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,internalformat1,buffer1,offset1,size1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureImage1DEXT
#define GL_ALT_FUNDEF_TextureImage1DEXT
typedef void (*PFNGLTEXTUREIMAGE1DEXTPROC_ALT)(GLuint,GLenum,GLint,GLint,GLsizei,GLint,GLenum,GLenum,const void *);
static inline void glTextureImage1DEXT(GLuint texture1,GLenum target1,GLint level1,GLint internalformat1,GLsizei width1,GLint border1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXTUREIMAGE1DEXTPROC_ALT fn=(PFNGLTEXTUREIMAGE1DEXTPROC_ALT)glaltGetProcAddressExtension("glTextureImage1DEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,level1,internalformat1,width1,border1,format1,type1,pixels1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureImage2DEXT
#define GL_ALT_FUNDEF_TextureImage2DEXT
typedef void (*PFNGLTEXTUREIMAGE2DEXTPROC_ALT)(GLuint,GLenum,GLint,GLint,GLsizei,GLsizei,GLint,GLenum,GLenum,const void *);
static inline void glTextureImage2DEXT(GLuint texture1,GLenum target1,GLint level1,GLint internalformat1,GLsizei width1,GLsizei height1,GLint border1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXTUREIMAGE2DEXTPROC_ALT fn=(PFNGLTEXTUREIMAGE2DEXTPROC_ALT)glaltGetProcAddressExtension("glTextureImage2DEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,level1,internalformat1,width1,height1,border1,format1,type1,pixels1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureImage3DEXT
#define GL_ALT_FUNDEF_TextureImage3DEXT
typedef void (*PFNGLTEXTUREIMAGE3DEXTPROC_ALT)(GLuint,GLenum,GLint,GLint,GLsizei,GLsizei,GLsizei,GLint,GLenum,GLenum,const void *);
static inline void glTextureImage3DEXT(GLuint texture1,GLenum target1,GLint level1,GLint internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLint border1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXTUREIMAGE3DEXTPROC_ALT fn=(PFNGLTEXTUREIMAGE3DEXTPROC_ALT)glaltGetProcAddressExtension("glTextureImage3DEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,level1,internalformat1,width1,height1,depth1,border1,format1,type1,pixels1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexturePageCommitmentEXT
#define GL_ALT_FUNDEF_TexturePageCommitmentEXT
typedef void (*PFNGLTEXTUREPAGECOMMITMENTEXTPROC_ALT)(GLuint,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLboolean);
static inline void glTexturePageCommitmentEXT(GLuint texture1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLsizei width1,GLsizei height1,GLsizei depth1,GLboolean resident1)
{
	static PFNGLTEXTUREPAGECOMMITMENTEXTPROC_ALT fn=(PFNGLTEXTUREPAGECOMMITMENTEXTPROC_ALT)glaltGetProcAddressExtension("glTexturePageCommitmentEXT","GL_EXT_direct_state_access");
	 fn(texture1,level1,xoffset1,yoffset1,zoffset1,width1,height1,depth1,resident1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureParameterIivEXT
#define GL_ALT_FUNDEF_TextureParameterIivEXT
typedef void (*PFNGLTEXTUREPARAMETERIIVEXTPROC_ALT)(GLuint,GLenum,GLenum,const GLint *);
static inline void glTextureParameterIivEXT(GLuint texture1,GLenum target1,GLenum pname1,const GLint * params1)
{
	static PFNGLTEXTUREPARAMETERIIVEXTPROC_ALT fn=(PFNGLTEXTUREPARAMETERIIVEXTPROC_ALT)glaltGetProcAddressExtension("glTextureParameterIivEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureParameterIuivEXT
#define GL_ALT_FUNDEF_TextureParameterIuivEXT
typedef void (*PFNGLTEXTUREPARAMETERIUIVEXTPROC_ALT)(GLuint,GLenum,GLenum,const GLuint *);
static inline void glTextureParameterIuivEXT(GLuint texture1,GLenum target1,GLenum pname1,const GLuint * params1)
{
	static PFNGLTEXTUREPARAMETERIUIVEXTPROC_ALT fn=(PFNGLTEXTUREPARAMETERIUIVEXTPROC_ALT)glaltGetProcAddressExtension("glTextureParameterIuivEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureParameterfEXT
#define GL_ALT_FUNDEF_TextureParameterfEXT
typedef void (*PFNGLTEXTUREPARAMETERFEXTPROC_ALT)(GLuint,GLenum,GLenum,GLfloat);
static inline void glTextureParameterfEXT(GLuint texture1,GLenum target1,GLenum pname1,GLfloat param1)
{
	static PFNGLTEXTUREPARAMETERFEXTPROC_ALT fn=(PFNGLTEXTUREPARAMETERFEXTPROC_ALT)glaltGetProcAddressExtension("glTextureParameterfEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureParameterfvEXT
#define GL_ALT_FUNDEF_TextureParameterfvEXT
typedef void (*PFNGLTEXTUREPARAMETERFVEXTPROC_ALT)(GLuint,GLenum,GLenum,const GLfloat *);
static inline void glTextureParameterfvEXT(GLuint texture1,GLenum target1,GLenum pname1,const GLfloat * params1)
{
	static PFNGLTEXTUREPARAMETERFVEXTPROC_ALT fn=(PFNGLTEXTUREPARAMETERFVEXTPROC_ALT)glaltGetProcAddressExtension("glTextureParameterfvEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureParameteriEXT
#define GL_ALT_FUNDEF_TextureParameteriEXT
typedef void (*PFNGLTEXTUREPARAMETERIEXTPROC_ALT)(GLuint,GLenum,GLenum,GLint);
static inline void glTextureParameteriEXT(GLuint texture1,GLenum target1,GLenum pname1,GLint param1)
{
	static PFNGLTEXTUREPARAMETERIEXTPROC_ALT fn=(PFNGLTEXTUREPARAMETERIEXTPROC_ALT)glaltGetProcAddressExtension("glTextureParameteriEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureParameterivEXT
#define GL_ALT_FUNDEF_TextureParameterivEXT
typedef void (*PFNGLTEXTUREPARAMETERIVEXTPROC_ALT)(GLuint,GLenum,GLenum,const GLint *);
static inline void glTextureParameterivEXT(GLuint texture1,GLenum target1,GLenum pname1,const GLint * params1)
{
	static PFNGLTEXTUREPARAMETERIVEXTPROC_ALT fn=(PFNGLTEXTUREPARAMETERIVEXTPROC_ALT)glaltGetProcAddressExtension("glTextureParameterivEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureRenderbufferEXT
#define GL_ALT_FUNDEF_TextureRenderbufferEXT
typedef void (*PFNGLTEXTURERENDERBUFFEREXTPROC_ALT)(GLuint,GLenum,GLuint);
static inline void glTextureRenderbufferEXT(GLuint texture1,GLenum target1,GLuint renderbuffer1)
{
	static PFNGLTEXTURERENDERBUFFEREXTPROC_ALT fn=(PFNGLTEXTURERENDERBUFFEREXTPROC_ALT)glaltGetProcAddressExtension("glTextureRenderbufferEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,renderbuffer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureStorage1DEXT
#define GL_ALT_FUNDEF_TextureStorage1DEXT
typedef void (*PFNGLTEXTURESTORAGE1DEXTPROC_ALT)(GLuint,GLenum,GLsizei,GLenum,GLsizei);
static inline void glTextureStorage1DEXT(GLuint texture1,GLenum target1,GLsizei levels1,GLenum internalformat1,GLsizei width1)
{
	static PFNGLTEXTURESTORAGE1DEXTPROC_ALT fn=(PFNGLTEXTURESTORAGE1DEXTPROC_ALT)glaltGetProcAddressExtension("glTextureStorage1DEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,levels1,internalformat1,width1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureStorage2DEXT
#define GL_ALT_FUNDEF_TextureStorage2DEXT
typedef void (*PFNGLTEXTURESTORAGE2DEXTPROC_ALT)(GLuint,GLenum,GLsizei,GLenum,GLsizei,GLsizei);
static inline void glTextureStorage2DEXT(GLuint texture1,GLenum target1,GLsizei levels1,GLenum internalformat1,GLsizei width1,GLsizei height1)
{
	static PFNGLTEXTURESTORAGE2DEXTPROC_ALT fn=(PFNGLTEXTURESTORAGE2DEXTPROC_ALT)glaltGetProcAddressExtension("glTextureStorage2DEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,levels1,internalformat1,width1,height1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureStorage2DMultisampleEXT
#define GL_ALT_FUNDEF_TextureStorage2DMultisampleEXT
typedef void (*PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC_ALT)(GLuint,GLenum,GLsizei,GLenum,GLsizei,GLsizei,GLboolean);
static inline void glTextureStorage2DMultisampleEXT(GLuint texture1,GLenum target1,GLsizei samples1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLboolean fixedsamplelocations1)
{
	static PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC_ALT fn=(PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC_ALT)glaltGetProcAddressExtension("glTextureStorage2DMultisampleEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,samples1,internalformat1,width1,height1,fixedsamplelocations1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureStorage3DEXT
#define GL_ALT_FUNDEF_TextureStorage3DEXT
typedef void (*PFNGLTEXTURESTORAGE3DEXTPROC_ALT)(GLuint,GLenum,GLsizei,GLenum,GLsizei,GLsizei,GLsizei);
static inline void glTextureStorage3DEXT(GLuint texture1,GLenum target1,GLsizei levels1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1)
{
	static PFNGLTEXTURESTORAGE3DEXTPROC_ALT fn=(PFNGLTEXTURESTORAGE3DEXTPROC_ALT)glaltGetProcAddressExtension("glTextureStorage3DEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,levels1,internalformat1,width1,height1,depth1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureStorage3DMultisampleEXT
#define GL_ALT_FUNDEF_TextureStorage3DMultisampleEXT
typedef void (*PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC_ALT)(GLuint,GLenum,GLsizei,GLenum,GLsizei,GLsizei,GLsizei,GLboolean);
static inline void glTextureStorage3DMultisampleEXT(GLuint texture1,GLenum target1,GLsizei samples1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLboolean fixedsamplelocations1)
{
	static PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC_ALT fn=(PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC_ALT)glaltGetProcAddressExtension("glTextureStorage3DMultisampleEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,samples1,internalformat1,width1,height1,depth1,fixedsamplelocations1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureSubImage1DEXT
#define GL_ALT_FUNDEF_TextureSubImage1DEXT
typedef void (*PFNGLTEXTURESUBIMAGE1DEXTPROC_ALT)(GLuint,GLenum,GLint,GLint,GLsizei,GLenum,GLenum,const void *);
static inline void glTextureSubImage1DEXT(GLuint texture1,GLenum target1,GLint level1,GLint xoffset1,GLsizei width1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXTURESUBIMAGE1DEXTPROC_ALT fn=(PFNGLTEXTURESUBIMAGE1DEXTPROC_ALT)glaltGetProcAddressExtension("glTextureSubImage1DEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,level1,xoffset1,width1,format1,type1,pixels1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureSubImage2DEXT
#define GL_ALT_FUNDEF_TextureSubImage2DEXT
typedef void (*PFNGLTEXTURESUBIMAGE2DEXTPROC_ALT)(GLuint,GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,const void *);
static inline void glTextureSubImage2DEXT(GLuint texture1,GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLsizei width1,GLsizei height1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXTURESUBIMAGE2DEXTPROC_ALT fn=(PFNGLTEXTURESUBIMAGE2DEXTPROC_ALT)glaltGetProcAddressExtension("glTextureSubImage2DEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,level1,xoffset1,yoffset1,width1,height1,format1,type1,pixels1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureSubImage3DEXT
#define GL_ALT_FUNDEF_TextureSubImage3DEXT
typedef void (*PFNGLTEXTURESUBIMAGE3DEXTPROC_ALT)(GLuint,GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,const void *);
static inline void glTextureSubImage3DEXT(GLuint texture1,GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLsizei width1,GLsizei height1,GLsizei depth1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXTURESUBIMAGE3DEXTPROC_ALT fn=(PFNGLTEXTURESUBIMAGE3DEXTPROC_ALT)glaltGetProcAddressExtension("glTextureSubImage3DEXT","GL_EXT_direct_state_access");
	 fn(texture1,target1,level1,xoffset1,yoffset1,zoffset1,width1,height1,depth1,format1,type1,pixels1);
}
#endif

#ifndef	GL_ALT_FUNDEF_UnmapNamedBufferEXT
#define GL_ALT_FUNDEF_UnmapNamedBufferEXT
typedef GLboolean (*PFNGLUNMAPNAMEDBUFFEREXTPROC_ALT)(GLuint);
static inline GLboolean glUnmapNamedBufferEXT(GLuint buffer1)
{
	static PFNGLUNMAPNAMEDBUFFEREXTPROC_ALT fn=(PFNGLUNMAPNAMEDBUFFEREXTPROC_ALT)glaltGetProcAddressExtension("glUnmapNamedBufferEXT","GL_EXT_direct_state_access");
	return fn(buffer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexArrayBindVertexBufferEXT
#define GL_ALT_FUNDEF_VertexArrayBindVertexBufferEXT
typedef void (*PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC_ALT)(GLuint,GLuint,GLuint,GLintptr,GLsizei);
static inline void glVertexArrayBindVertexBufferEXT(GLuint vaobj1,GLuint bindingindex1,GLuint buffer1,GLintptr offset1,GLsizei stride1)
{
	static PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC_ALT fn=(PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC_ALT)glaltGetProcAddressExtension("glVertexArrayBindVertexBufferEXT","GL_EXT_direct_state_access");
	 fn(vaobj1,bindingindex1,buffer1,offset1,stride1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexArrayColorOffsetEXT
#define GL_ALT_FUNDEF_VertexArrayColorOffsetEXT
typedef void (*PFNGLVERTEXARRAYCOLOROFFSETEXTPROC_ALT)(GLuint,GLuint,GLint,GLenum,GLsizei,GLintptr);
static inline void glVertexArrayColorOffsetEXT(GLuint vaobj1,GLuint buffer1,GLint size1,GLenum type1,GLsizei stride1,GLintptr offset1)
{
	static PFNGLVERTEXARRAYCOLOROFFSETEXTPROC_ALT fn=(PFNGLVERTEXARRAYCOLOROFFSETEXTPROC_ALT)glaltGetProcAddressExtension("glVertexArrayColorOffsetEXT","GL_EXT_direct_state_access");
	 fn(vaobj1,buffer1,size1,type1,stride1,offset1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexArrayEdgeFlagOffsetEXT
#define GL_ALT_FUNDEF_VertexArrayEdgeFlagOffsetEXT
typedef void (*PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC_ALT)(GLuint,GLuint,GLsizei,GLintptr);
static inline void glVertexArrayEdgeFlagOffsetEXT(GLuint vaobj1,GLuint buffer1,GLsizei stride1,GLintptr offset1)
{
	static PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC_ALT fn=(PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC_ALT)glaltGetProcAddressExtension("glVertexArrayEdgeFlagOffsetEXT","GL_EXT_direct_state_access");
	 fn(vaobj1,buffer1,stride1,offset1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexArrayFogCoordOffsetEXT
#define GL_ALT_FUNDEF_VertexArrayFogCoordOffsetEXT
typedef void (*PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC_ALT)(GLuint,GLuint,GLenum,GLsizei,GLintptr);
static inline void glVertexArrayFogCoordOffsetEXT(GLuint vaobj1,GLuint buffer1,GLenum type1,GLsizei stride1,GLintptr offset1)
{
	static PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC_ALT fn=(PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC_ALT)glaltGetProcAddressExtension("glVertexArrayFogCoordOffsetEXT","GL_EXT_direct_state_access");
	 fn(vaobj1,buffer1,type1,stride1,offset1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexArrayIndexOffsetEXT
#define GL_ALT_FUNDEF_VertexArrayIndexOffsetEXT
typedef void (*PFNGLVERTEXARRAYINDEXOFFSETEXTPROC_ALT)(GLuint,GLuint,GLenum,GLsizei,GLintptr);
static inline void glVertexArrayIndexOffsetEXT(GLuint vaobj1,GLuint buffer1,GLenum type1,GLsizei stride1,GLintptr offset1)
{
	static PFNGLVERTEXARRAYINDEXOFFSETEXTPROC_ALT fn=(PFNGLVERTEXARRAYINDEXOFFSETEXTPROC_ALT)glaltGetProcAddressExtension("glVertexArrayIndexOffsetEXT","GL_EXT_direct_state_access");
	 fn(vaobj1,buffer1,type1,stride1,offset1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexArrayMultiTexCoordOffsetEXT
#define GL_ALT_FUNDEF_VertexArrayMultiTexCoordOffsetEXT
typedef void (*PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC_ALT)(GLuint,GLuint,GLenum,GLint,GLenum,GLsizei,GLintptr);
static inline void glVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj1,GLuint buffer1,GLenum texunit1,GLint size1,GLenum type1,GLsizei stride1,GLintptr offset1)
{
	static PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC_ALT fn=(PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC_ALT)glaltGetProcAddressExtension("glVertexArrayMultiTexCoordOffsetEXT","GL_EXT_direct_state_access");
	 fn(vaobj1,buffer1,texunit1,size1,type1,stride1,offset1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexArrayNormalOffsetEXT
#define GL_ALT_FUNDEF_VertexArrayNormalOffsetEXT
typedef void (*PFNGLVERTEXARRAYNORMALOFFSETEXTPROC_ALT)(GLuint,GLuint,GLenum,GLsizei,GLintptr);
static inline void glVertexArrayNormalOffsetEXT(GLuint vaobj1,GLuint buffer1,GLenum type1,GLsizei stride1,GLintptr offset1)
{
	static PFNGLVERTEXARRAYNORMALOFFSETEXTPROC_ALT fn=(PFNGLVERTEXARRAYNORMALOFFSETEXTPROC_ALT)glaltGetProcAddressExtension("glVertexArrayNormalOffsetEXT","GL_EXT_direct_state_access");
	 fn(vaobj1,buffer1,type1,stride1,offset1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexArraySecondaryColorOffsetEXT
#define GL_ALT_FUNDEF_VertexArraySecondaryColorOffsetEXT
typedef void (*PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC_ALT)(GLuint,GLuint,GLint,GLenum,GLsizei,GLintptr);
static inline void glVertexArraySecondaryColorOffsetEXT(GLuint vaobj1,GLuint buffer1,GLint size1,GLenum type1,GLsizei stride1,GLintptr offset1)
{
	static PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC_ALT fn=(PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC_ALT)glaltGetProcAddressExtension("glVertexArraySecondaryColorOffsetEXT","GL_EXT_direct_state_access");
	 fn(vaobj1,buffer1,size1,type1,stride1,offset1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexArrayTexCoordOffsetEXT
#define GL_ALT_FUNDEF_VertexArrayTexCoordOffsetEXT
typedef void (*PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC_ALT)(GLuint,GLuint,GLint,GLenum,GLsizei,GLintptr);
static inline void glVertexArrayTexCoordOffsetEXT(GLuint vaobj1,GLuint buffer1,GLint size1,GLenum type1,GLsizei stride1,GLintptr offset1)
{
	static PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC_ALT fn=(PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC_ALT)glaltGetProcAddressExtension("glVertexArrayTexCoordOffsetEXT","GL_EXT_direct_state_access");
	 fn(vaobj1,buffer1,size1,type1,stride1,offset1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexArrayVertexAttribBindingEXT
#define GL_ALT_FUNDEF_VertexArrayVertexAttribBindingEXT
typedef void (*PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC_ALT)(GLuint,GLuint,GLuint);
static inline void glVertexArrayVertexAttribBindingEXT(GLuint vaobj1,GLuint attribindex1,GLuint bindingindex1)
{
	static PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC_ALT fn=(PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC_ALT)glaltGetProcAddressExtension("glVertexArrayVertexAttribBindingEXT","GL_EXT_direct_state_access");
	 fn(vaobj1,attribindex1,bindingindex1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexArrayVertexAttribDivisorEXT
#define GL_ALT_FUNDEF_VertexArrayVertexAttribDivisorEXT
typedef void (*PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC_ALT)(GLuint,GLuint,GLuint);
static inline void glVertexArrayVertexAttribDivisorEXT(GLuint vaobj1,GLuint index1,GLuint divisor1)
{
	static PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC_ALT fn=(PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC_ALT)glaltGetProcAddressExtension("glVertexArrayVertexAttribDivisorEXT","GL_EXT_direct_state_access");
	 fn(vaobj1,index1,divisor1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexArrayVertexAttribFormatEXT
#define GL_ALT_FUNDEF_VertexArrayVertexAttribFormatEXT
typedef void (*PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC_ALT)(GLuint,GLuint,GLint,GLenum,GLboolean,GLuint);
static inline void glVertexArrayVertexAttribFormatEXT(GLuint vaobj1,GLuint attribindex1,GLint size1,GLenum type1,GLboolean normalized1,GLuint relativeoffset1)
{
	static PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC_ALT fn=(PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC_ALT)glaltGetProcAddressExtension("glVertexArrayVertexAttribFormatEXT","GL_EXT_direct_state_access");
	 fn(vaobj1,attribindex1,size1,type1,normalized1,relativeoffset1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexArrayVertexAttribIFormatEXT
#define GL_ALT_FUNDEF_VertexArrayVertexAttribIFormatEXT
typedef void (*PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC_ALT)(GLuint,GLuint,GLint,GLenum,GLuint);
static inline void glVertexArrayVertexAttribIFormatEXT(GLuint vaobj1,GLuint attribindex1,GLint size1,GLenum type1,GLuint relativeoffset1)
{
	static PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC_ALT fn=(PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC_ALT)glaltGetProcAddressExtension("glVertexArrayVertexAttribIFormatEXT","GL_EXT_direct_state_access");
	 fn(vaobj1,attribindex1,size1,type1,relativeoffset1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexArrayVertexAttribIOffsetEXT
#define GL_ALT_FUNDEF_VertexArrayVertexAttribIOffsetEXT
typedef void (*PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC_ALT)(GLuint,GLuint,GLuint,GLint,GLenum,GLsizei,GLintptr);
static inline void glVertexArrayVertexAttribIOffsetEXT(GLuint vaobj1,GLuint buffer1,GLuint index1,GLint size1,GLenum type1,GLsizei stride1,GLintptr offset1)
{
	static PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC_ALT fn=(PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC_ALT)glaltGetProcAddressExtension("glVertexArrayVertexAttribIOffsetEXT","GL_EXT_direct_state_access");
	 fn(vaobj1,buffer1,index1,size1,type1,stride1,offset1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexArrayVertexAttribLFormatEXT
#define GL_ALT_FUNDEF_VertexArrayVertexAttribLFormatEXT
typedef void (*PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC_ALT)(GLuint,GLuint,GLint,GLenum,GLuint);
static inline void glVertexArrayVertexAttribLFormatEXT(GLuint vaobj1,GLuint attribindex1,GLint size1,GLenum type1,GLuint relativeoffset1)
{
	static PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC_ALT fn=(PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC_ALT)glaltGetProcAddressExtension("glVertexArrayVertexAttribLFormatEXT","GL_EXT_direct_state_access");
	 fn(vaobj1,attribindex1,size1,type1,relativeoffset1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexArrayVertexAttribLOffsetEXT
#define GL_ALT_FUNDEF_VertexArrayVertexAttribLOffsetEXT
typedef void (*PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC_ALT)(GLuint,GLuint,GLuint,GLint,GLenum,GLsizei,GLintptr);
static inline void glVertexArrayVertexAttribLOffsetEXT(GLuint vaobj1,GLuint buffer1,GLuint index1,GLint size1,GLenum type1,GLsizei stride1,GLintptr offset1)
{
	static PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC_ALT fn=(PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC_ALT)glaltGetProcAddressExtension("glVertexArrayVertexAttribLOffsetEXT","GL_EXT_direct_state_access");
	 fn(vaobj1,buffer1,index1,size1,type1,stride1,offset1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexArrayVertexAttribOffsetEXT
#define GL_ALT_FUNDEF_VertexArrayVertexAttribOffsetEXT
typedef void (*PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC_ALT)(GLuint,GLuint,GLuint,GLint,GLenum,GLboolean,GLsizei,GLintptr);
static inline void glVertexArrayVertexAttribOffsetEXT(GLuint vaobj1,GLuint buffer1,GLuint index1,GLint size1,GLenum type1,GLboolean normalized1,GLsizei stride1,GLintptr offset1)
{
	static PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC_ALT fn=(PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC_ALT)glaltGetProcAddressExtension("glVertexArrayVertexAttribOffsetEXT","GL_EXT_direct_state_access");
	 fn(vaobj1,buffer1,index1,size1,type1,normalized1,stride1,offset1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexArrayVertexBindingDivisorEXT
#define GL_ALT_FUNDEF_VertexArrayVertexBindingDivisorEXT
typedef void (*PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC_ALT)(GLuint,GLuint,GLuint);
static inline void glVertexArrayVertexBindingDivisorEXT(GLuint vaobj1,GLuint bindingindex1,GLuint divisor1)
{
	static PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC_ALT fn=(PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC_ALT)glaltGetProcAddressExtension("glVertexArrayVertexBindingDivisorEXT","GL_EXT_direct_state_access");
	 fn(vaobj1,bindingindex1,divisor1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexArrayVertexOffsetEXT
#define GL_ALT_FUNDEF_VertexArrayVertexOffsetEXT
typedef void (*PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC_ALT)(GLuint,GLuint,GLint,GLenum,GLsizei,GLintptr);
static inline void glVertexArrayVertexOffsetEXT(GLuint vaobj1,GLuint buffer1,GLint size1,GLenum type1,GLsizei stride1,GLintptr offset1)
{
	static PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC_ALT fn=(PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC_ALT)glaltGetProcAddressExtension("glVertexArrayVertexOffsetEXT","GL_EXT_direct_state_access");
	 fn(vaobj1,buffer1,size1,type1,stride1,offset1);
}
#endif
CGUARDEND

#endif

#ifndef GL_EXT_draw_buffers2
#define GL_EXT_draw_buffers2
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ColorMaskIndexedEXT
#define GL_ALT_FUNDEF_ColorMaskIndexedEXT
typedef void (*PFNGLCOLORMASKINDEXEDEXTPROC_ALT)(GLuint,GLboolean,GLboolean,GLboolean,GLboolean);
static inline void glColorMaskIndexedEXT(GLuint index1,GLboolean r1,GLboolean g1,GLboolean b1,GLboolean a1)
{
	static PFNGLCOLORMASKINDEXEDEXTPROC_ALT fn=(PFNGLCOLORMASKINDEXEDEXTPROC_ALT)glaltGetProcAddressExtension("glColorMaskIndexedEXT","GL_EXT_draw_buffers2");
	 fn(index1,r1,g1,b1,a1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_DisableIndexedEXT
#define GL_ALT_FUNDEF_DisableIndexedEXT
typedef void (*PFNGLDISABLEINDEXEDEXTPROC_ALT)(GLenum,GLuint);
static inline void glDisableIndexedEXT(GLenum target1,GLuint index1)
{
	static PFNGLDISABLEINDEXEDEXTPROC_ALT fn=(PFNGLDISABLEINDEXEDEXTPROC_ALT)glaltGetProcAddressExtension("glDisableIndexedEXT","GL_EXT_draw_buffers2");
	 fn(target1,index1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_EnableIndexedEXT
#define GL_ALT_FUNDEF_EnableIndexedEXT
typedef void (*PFNGLENABLEINDEXEDEXTPROC_ALT)(GLenum,GLuint);
static inline void glEnableIndexedEXT(GLenum target1,GLuint index1)
{
	static PFNGLENABLEINDEXEDEXTPROC_ALT fn=(PFNGLENABLEINDEXEDEXTPROC_ALT)glaltGetProcAddressExtension("glEnableIndexedEXT","GL_EXT_draw_buffers2");
	 fn(target1,index1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetBooleanIndexedvEXT
#define GL_ALT_FUNDEF_GetBooleanIndexedvEXT
typedef void (*PFNGLGETBOOLEANINDEXEDVEXTPROC_ALT)(GLenum,GLuint,GLboolean *);
static inline void glGetBooleanIndexedvEXT(GLenum target1,GLuint index1,GLboolean * data1)
{
	static PFNGLGETBOOLEANINDEXEDVEXTPROC_ALT fn=(PFNGLGETBOOLEANINDEXEDVEXTPROC_ALT)glaltGetProcAddressExtension("glGetBooleanIndexedvEXT","GL_EXT_draw_buffers2");
	 fn(target1,index1,data1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetIntegerIndexedvEXT
#define GL_ALT_FUNDEF_GetIntegerIndexedvEXT
typedef void (*PFNGLGETINTEGERINDEXEDVEXTPROC_ALT)(GLenum,GLuint,GLint *);
static inline void glGetIntegerIndexedvEXT(GLenum target1,GLuint index1,GLint * data1)
{
	static PFNGLGETINTEGERINDEXEDVEXTPROC_ALT fn=(PFNGLGETINTEGERINDEXEDVEXTPROC_ALT)glaltGetProcAddressExtension("glGetIntegerIndexedvEXT","GL_EXT_draw_buffers2");
	 fn(target1,index1,data1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_IsEnabledIndexedEXT
#define GL_ALT_FUNDEF_IsEnabledIndexedEXT
typedef GLboolean (*PFNGLISENABLEDINDEXEDEXTPROC_ALT)(GLenum,GLuint);
static inline GLboolean glIsEnabledIndexedEXT(GLenum target1,GLuint index1)
{
	static PFNGLISENABLEDINDEXEDEXTPROC_ALT fn=(PFNGLISENABLEDINDEXEDEXTPROC_ALT)glaltGetProcAddressExtension("glIsEnabledIndexedEXT","GL_EXT_draw_buffers2");
	return fn(target1,index1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_draw_instanced
#define GL_EXT_draw_instanced
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_DrawArraysInstancedEXT
#define GL_ALT_FUNDEF_DrawArraysInstancedEXT
typedef void (*PFNGLDRAWARRAYSINSTANCEDEXTPROC_ALT)(GLenum,GLint,GLsizei,GLsizei);
static inline void glDrawArraysInstancedEXT(GLenum mode1,GLint start1,GLsizei count1,GLsizei primcount1)
{
	static PFNGLDRAWARRAYSINSTANCEDEXTPROC_ALT fn=(PFNGLDRAWARRAYSINSTANCEDEXTPROC_ALT)glaltGetProcAddressExtension("glDrawArraysInstancedEXT","GL_EXT_draw_instanced");
	 fn(mode1,start1,count1,primcount1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_DrawElementsInstancedEXT
#define GL_ALT_FUNDEF_DrawElementsInstancedEXT
typedef void (*PFNGLDRAWELEMENTSINSTANCEDEXTPROC_ALT)(GLenum,GLsizei,GLenum,const void *,GLsizei);
static inline void glDrawElementsInstancedEXT(GLenum mode1,GLsizei count1,GLenum type1,const void * indices1,GLsizei primcount1)
{
	static PFNGLDRAWELEMENTSINSTANCEDEXTPROC_ALT fn=(PFNGLDRAWELEMENTSINSTANCEDEXTPROC_ALT)glaltGetProcAddressExtension("glDrawElementsInstancedEXT","GL_EXT_draw_instanced");
	 fn(mode1,count1,type1,indices1,primcount1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_draw_range_elements
#define GL_EXT_draw_range_elements
#ifndef GL_MAX_ELEMENTS_VERTICES_EXT
#define GL_MAX_ELEMENTS_VERTICES_EXT 0x80E8
#endif //GL_MAX_ELEMENTS_VERTICES_EXT
#ifndef GL_MAX_ELEMENTS_INDICES_EXT
#define GL_MAX_ELEMENTS_INDICES_EXT 0x80E9
#endif //GL_MAX_ELEMENTS_INDICES_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_DrawRangeElementsEXT
#define GL_ALT_FUNDEF_DrawRangeElementsEXT
typedef void (*PFNGLDRAWRANGEELEMENTSEXTPROC_ALT)(GLenum,GLuint,GLuint,GLsizei,GLenum,const void *);
static inline void glDrawRangeElementsEXT(GLenum mode1,GLuint start1,GLuint end1,GLsizei count1,GLenum type1,const void * indices1)
{
	static PFNGLDRAWRANGEELEMENTSEXTPROC_ALT fn=(PFNGLDRAWRANGEELEMENTSEXTPROC_ALT)glaltGetProcAddressExtension("glDrawRangeElementsEXT","GL_EXT_draw_range_elements");
	 fn(mode1,start1,end1,count1,type1,indices1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_fog_coord
#define GL_EXT_fog_coord
#ifndef GL_FOG_COORDINATE_SOURCE_EXT
#define GL_FOG_COORDINATE_SOURCE_EXT 0x8450
#endif //GL_FOG_COORDINATE_SOURCE_EXT
#ifndef GL_FOG_COORDINATE_EXT
#define GL_FOG_COORDINATE_EXT 0x8451
#endif //GL_FOG_COORDINATE_EXT
#ifndef GL_FRAGMENT_DEPTH_EXT
#define GL_FRAGMENT_DEPTH_EXT 0x8452
#endif //GL_FRAGMENT_DEPTH_EXT
#ifndef GL_CURRENT_FOG_COORDINATE_EXT
#define GL_CURRENT_FOG_COORDINATE_EXT 0x8453
#endif //GL_CURRENT_FOG_COORDINATE_EXT
#ifndef GL_FOG_COORDINATE_ARRAY_TYPE_EXT
#define GL_FOG_COORDINATE_ARRAY_TYPE_EXT 0x8454
#endif //GL_FOG_COORDINATE_ARRAY_TYPE_EXT
#ifndef GL_FOG_COORDINATE_ARRAY_STRIDE_EXT
#define GL_FOG_COORDINATE_ARRAY_STRIDE_EXT 0x8455
#endif //GL_FOG_COORDINATE_ARRAY_STRIDE_EXT
#ifndef GL_FOG_COORDINATE_ARRAY_POINTER_EXT
#define GL_FOG_COORDINATE_ARRAY_POINTER_EXT 0x8456
#endif //GL_FOG_COORDINATE_ARRAY_POINTER_EXT
#ifndef GL_FOG_COORDINATE_ARRAY_EXT
#define GL_FOG_COORDINATE_ARRAY_EXT 0x8457
#endif //GL_FOG_COORDINATE_ARRAY_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_FogCoordPointerEXT
#define GL_ALT_FUNDEF_FogCoordPointerEXT
typedef void (*PFNGLFOGCOORDPOINTEREXTPROC_ALT)(GLenum,GLsizei,const void *);
static inline void glFogCoordPointerEXT(GLenum type1,GLsizei stride1,const void * pointer1)
{
	static PFNGLFOGCOORDPOINTEREXTPROC_ALT fn=(PFNGLFOGCOORDPOINTEREXTPROC_ALT)glaltGetProcAddressExtension("glFogCoordPointerEXT","GL_EXT_fog_coord");
	 fn(type1,stride1,pointer1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_FogCoorddEXT
#define GL_ALT_FUNDEF_FogCoorddEXT
typedef void (*PFNGLFOGCOORDDEXTPROC_ALT)(GLdouble);
static inline void glFogCoorddEXT(GLdouble coord1)
{
	static PFNGLFOGCOORDDEXTPROC_ALT fn=(PFNGLFOGCOORDDEXTPROC_ALT)glaltGetProcAddressExtension("glFogCoorddEXT","GL_EXT_fog_coord");
	 fn(coord1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_FogCoorddvEXT
#define GL_ALT_FUNDEF_FogCoorddvEXT
typedef void (*PFNGLFOGCOORDDVEXTPROC_ALT)(const GLdouble *);
static inline void glFogCoorddvEXT(const GLdouble * coord1)
{
	static PFNGLFOGCOORDDVEXTPROC_ALT fn=(PFNGLFOGCOORDDVEXTPROC_ALT)glaltGetProcAddressExtension("glFogCoorddvEXT","GL_EXT_fog_coord");
	 fn(coord1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_FogCoordfEXT
#define GL_ALT_FUNDEF_FogCoordfEXT
typedef void (*PFNGLFOGCOORDFEXTPROC_ALT)(GLfloat);
static inline void glFogCoordfEXT(GLfloat coord1)
{
	static PFNGLFOGCOORDFEXTPROC_ALT fn=(PFNGLFOGCOORDFEXTPROC_ALT)glaltGetProcAddressExtension("glFogCoordfEXT","GL_EXT_fog_coord");
	 fn(coord1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_FogCoordfvEXT
#define GL_ALT_FUNDEF_FogCoordfvEXT
typedef void (*PFNGLFOGCOORDFVEXTPROC_ALT)(const GLfloat *);
static inline void glFogCoordfvEXT(const GLfloat * coord1)
{
	static PFNGLFOGCOORDFVEXTPROC_ALT fn=(PFNGLFOGCOORDFVEXTPROC_ALT)glaltGetProcAddressExtension("glFogCoordfvEXT","GL_EXT_fog_coord");
	 fn(coord1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_framebuffer_blit
#define GL_EXT_framebuffer_blit
#ifndef GL_DRAW_FRAMEBUFFER_BINDING_EXT
#define GL_DRAW_FRAMEBUFFER_BINDING_EXT 0x8CA6
#endif //GL_DRAW_FRAMEBUFFER_BINDING_EXT
#ifndef GL_READ_FRAMEBUFFER_EXT
#define GL_READ_FRAMEBUFFER_EXT 0x8CA8
#endif //GL_READ_FRAMEBUFFER_EXT
#ifndef GL_DRAW_FRAMEBUFFER_EXT
#define GL_DRAW_FRAMEBUFFER_EXT 0x8CA9
#endif //GL_DRAW_FRAMEBUFFER_EXT
#ifndef GL_READ_FRAMEBUFFER_BINDING_EXT
#define GL_READ_FRAMEBUFFER_BINDING_EXT 0x8CAA
#endif //GL_READ_FRAMEBUFFER_BINDING_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BlitFramebufferEXT
#define GL_ALT_FUNDEF_BlitFramebufferEXT
typedef void (*PFNGLBLITFRAMEBUFFEREXTPROC_ALT)(GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLbitfield,GLenum);
static inline void glBlitFramebufferEXT(GLint srcX01,GLint srcY01,GLint srcX11,GLint srcY11,GLint dstX01,GLint dstY01,GLint dstX11,GLint dstY11,GLbitfield mask1,GLenum filter1)
{
	static PFNGLBLITFRAMEBUFFEREXTPROC_ALT fn=(PFNGLBLITFRAMEBUFFEREXTPROC_ALT)glaltGetProcAddressExtension("glBlitFramebufferEXT","GL_EXT_framebuffer_blit");
	 fn(srcX01,srcY01,srcX11,srcY11,dstX01,dstY01,dstX11,dstY11,mask1,filter1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_framebuffer_multisample
#define GL_EXT_framebuffer_multisample
#ifndef GL_RENDERBUFFER_SAMPLES_EXT
#define GL_RENDERBUFFER_SAMPLES_EXT 0x8CAB
#endif //GL_RENDERBUFFER_SAMPLES_EXT
#ifndef GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT 0x8D56
#endif //GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT
#ifndef GL_MAX_SAMPLES_EXT
#define GL_MAX_SAMPLES_EXT 0x8D57
#endif //GL_MAX_SAMPLES_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_RenderbufferStorageMultisampleEXT
#define GL_ALT_FUNDEF_RenderbufferStorageMultisampleEXT
typedef void (*PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC_ALT)(GLenum,GLsizei,GLenum,GLsizei,GLsizei);
static inline void glRenderbufferStorageMultisampleEXT(GLenum target1,GLsizei samples1,GLenum internalformat1,GLsizei width1,GLsizei height1)
{
	static PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC_ALT fn=(PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC_ALT)glaltGetProcAddressExtension("glRenderbufferStorageMultisampleEXT","GL_EXT_framebuffer_multisample");
	 fn(target1,samples1,internalformat1,width1,height1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_framebuffer_multisample_blit_scaled
#define GL_EXT_framebuffer_multisample_blit_scaled
#ifndef GL_SCALED_RESOLVE_FASTEST_EXT
#define GL_SCALED_RESOLVE_FASTEST_EXT 0x90BA
#endif //GL_SCALED_RESOLVE_FASTEST_EXT
#ifndef GL_SCALED_RESOLVE_NICEST_EXT
#define GL_SCALED_RESOLVE_NICEST_EXT 0x90BB
#endif //GL_SCALED_RESOLVE_NICEST_EXT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_framebuffer_object
#define GL_EXT_framebuffer_object
#ifndef GL_INVALID_FRAMEBUFFER_OPERATION_EXT
#define GL_INVALID_FRAMEBUFFER_OPERATION_EXT 0x0506
#endif //GL_INVALID_FRAMEBUFFER_OPERATION_EXT
#ifndef GL_MAX_RENDERBUFFER_SIZE_EXT
#define GL_MAX_RENDERBUFFER_SIZE_EXT 0x84E8
#endif //GL_MAX_RENDERBUFFER_SIZE_EXT
#ifndef GL_FRAMEBUFFER_BINDING_EXT
#define GL_FRAMEBUFFER_BINDING_EXT 0x8CA6
#endif //GL_FRAMEBUFFER_BINDING_EXT
#ifndef GL_RENDERBUFFER_BINDING_EXT
#define GL_RENDERBUFFER_BINDING_EXT 0x8CA7
#endif //GL_RENDERBUFFER_BINDING_EXT
#ifndef GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT 0x8CD0
#endif //GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT
#ifndef GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT 0x8CD1
#endif //GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT
#ifndef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT 0x8CD2
#endif //GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT
#ifndef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT 0x8CD3
#endif //GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT
#ifndef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT 0x8CD4
#endif //GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT
#ifndef GL_FRAMEBUFFER_COMPLETE_EXT
#define GL_FRAMEBUFFER_COMPLETE_EXT 0x8CD5
#endif //GL_FRAMEBUFFER_COMPLETE_EXT
#ifndef GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT 0x8CD6
#endif //GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT
#ifndef GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT 0x8CD7
#endif //GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT
#ifndef GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT 0x8CD9
#endif //GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT
#ifndef GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT
#define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT 0x8CDA
#endif //GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT
#ifndef GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT 0x8CDB
#endif //GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT
#ifndef GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT 0x8CDC
#endif //GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT
#ifndef GL_FRAMEBUFFER_UNSUPPORTED_EXT
#define GL_FRAMEBUFFER_UNSUPPORTED_EXT 0x8CDD
#endif //GL_FRAMEBUFFER_UNSUPPORTED_EXT
#ifndef GL_MAX_COLOR_ATTACHMENTS_EXT
#define GL_MAX_COLOR_ATTACHMENTS_EXT 0x8CDF
#endif //GL_MAX_COLOR_ATTACHMENTS_EXT
#ifndef GL_COLOR_ATTACHMENT0_EXT
#define GL_COLOR_ATTACHMENT0_EXT 0x8CE0
#endif //GL_COLOR_ATTACHMENT0_EXT
#ifndef GL_COLOR_ATTACHMENT1_EXT
#define GL_COLOR_ATTACHMENT1_EXT 0x8CE1
#endif //GL_COLOR_ATTACHMENT1_EXT
#ifndef GL_COLOR_ATTACHMENT2_EXT
#define GL_COLOR_ATTACHMENT2_EXT 0x8CE2
#endif //GL_COLOR_ATTACHMENT2_EXT
#ifndef GL_COLOR_ATTACHMENT3_EXT
#define GL_COLOR_ATTACHMENT3_EXT 0x8CE3
#endif //GL_COLOR_ATTACHMENT3_EXT
#ifndef GL_COLOR_ATTACHMENT4_EXT
#define GL_COLOR_ATTACHMENT4_EXT 0x8CE4
#endif //GL_COLOR_ATTACHMENT4_EXT
#ifndef GL_COLOR_ATTACHMENT5_EXT
#define GL_COLOR_ATTACHMENT5_EXT 0x8CE5
#endif //GL_COLOR_ATTACHMENT5_EXT
#ifndef GL_COLOR_ATTACHMENT6_EXT
#define GL_COLOR_ATTACHMENT6_EXT 0x8CE6
#endif //GL_COLOR_ATTACHMENT6_EXT
#ifndef GL_COLOR_ATTACHMENT7_EXT
#define GL_COLOR_ATTACHMENT7_EXT 0x8CE7
#endif //GL_COLOR_ATTACHMENT7_EXT
#ifndef GL_COLOR_ATTACHMENT8_EXT
#define GL_COLOR_ATTACHMENT8_EXT 0x8CE8
#endif //GL_COLOR_ATTACHMENT8_EXT
#ifndef GL_COLOR_ATTACHMENT9_EXT
#define GL_COLOR_ATTACHMENT9_EXT 0x8CE9
#endif //GL_COLOR_ATTACHMENT9_EXT
#ifndef GL_COLOR_ATTACHMENT10_EXT
#define GL_COLOR_ATTACHMENT10_EXT 0x8CEA
#endif //GL_COLOR_ATTACHMENT10_EXT
#ifndef GL_COLOR_ATTACHMENT11_EXT
#define GL_COLOR_ATTACHMENT11_EXT 0x8CEB
#endif //GL_COLOR_ATTACHMENT11_EXT
#ifndef GL_COLOR_ATTACHMENT12_EXT
#define GL_COLOR_ATTACHMENT12_EXT 0x8CEC
#endif //GL_COLOR_ATTACHMENT12_EXT
#ifndef GL_COLOR_ATTACHMENT13_EXT
#define GL_COLOR_ATTACHMENT13_EXT 0x8CED
#endif //GL_COLOR_ATTACHMENT13_EXT
#ifndef GL_COLOR_ATTACHMENT14_EXT
#define GL_COLOR_ATTACHMENT14_EXT 0x8CEE
#endif //GL_COLOR_ATTACHMENT14_EXT
#ifndef GL_COLOR_ATTACHMENT15_EXT
#define GL_COLOR_ATTACHMENT15_EXT 0x8CEF
#endif //GL_COLOR_ATTACHMENT15_EXT
#ifndef GL_DEPTH_ATTACHMENT_EXT
#define GL_DEPTH_ATTACHMENT_EXT 0x8D00
#endif //GL_DEPTH_ATTACHMENT_EXT
#ifndef GL_STENCIL_ATTACHMENT_EXT
#define GL_STENCIL_ATTACHMENT_EXT 0x8D20
#endif //GL_STENCIL_ATTACHMENT_EXT
#ifndef GL_FRAMEBUFFER_EXT
#define GL_FRAMEBUFFER_EXT 0x8D40
#endif //GL_FRAMEBUFFER_EXT
#ifndef GL_RENDERBUFFER_EXT
#define GL_RENDERBUFFER_EXT 0x8D41
#endif //GL_RENDERBUFFER_EXT
#ifndef GL_RENDERBUFFER_WIDTH_EXT
#define GL_RENDERBUFFER_WIDTH_EXT 0x8D42
#endif //GL_RENDERBUFFER_WIDTH_EXT
#ifndef GL_RENDERBUFFER_HEIGHT_EXT
#define GL_RENDERBUFFER_HEIGHT_EXT 0x8D43
#endif //GL_RENDERBUFFER_HEIGHT_EXT
#ifndef GL_RENDERBUFFER_INTERNAL_FORMAT_EXT
#define GL_RENDERBUFFER_INTERNAL_FORMAT_EXT 0x8D44
#endif //GL_RENDERBUFFER_INTERNAL_FORMAT_EXT
#ifndef GL_STENCIL_INDEX1_EXT
#define GL_STENCIL_INDEX1_EXT 0x8D46
#endif //GL_STENCIL_INDEX1_EXT
#ifndef GL_STENCIL_INDEX4_EXT
#define GL_STENCIL_INDEX4_EXT 0x8D47
#endif //GL_STENCIL_INDEX4_EXT
#ifndef GL_STENCIL_INDEX8_EXT
#define GL_STENCIL_INDEX8_EXT 0x8D48
#endif //GL_STENCIL_INDEX8_EXT
#ifndef GL_STENCIL_INDEX16_EXT
#define GL_STENCIL_INDEX16_EXT 0x8D49
#endif //GL_STENCIL_INDEX16_EXT
#ifndef GL_RENDERBUFFER_RED_SIZE_EXT
#define GL_RENDERBUFFER_RED_SIZE_EXT 0x8D50
#endif //GL_RENDERBUFFER_RED_SIZE_EXT
#ifndef GL_RENDERBUFFER_GREEN_SIZE_EXT
#define GL_RENDERBUFFER_GREEN_SIZE_EXT 0x8D51
#endif //GL_RENDERBUFFER_GREEN_SIZE_EXT
#ifndef GL_RENDERBUFFER_BLUE_SIZE_EXT
#define GL_RENDERBUFFER_BLUE_SIZE_EXT 0x8D52
#endif //GL_RENDERBUFFER_BLUE_SIZE_EXT
#ifndef GL_RENDERBUFFER_ALPHA_SIZE_EXT
#define GL_RENDERBUFFER_ALPHA_SIZE_EXT 0x8D53
#endif //GL_RENDERBUFFER_ALPHA_SIZE_EXT
#ifndef GL_RENDERBUFFER_DEPTH_SIZE_EXT
#define GL_RENDERBUFFER_DEPTH_SIZE_EXT 0x8D54
#endif //GL_RENDERBUFFER_DEPTH_SIZE_EXT
#ifndef GL_RENDERBUFFER_STENCIL_SIZE_EXT
#define GL_RENDERBUFFER_STENCIL_SIZE_EXT 0x8D55
#endif //GL_RENDERBUFFER_STENCIL_SIZE_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BindFramebufferEXT
#define GL_ALT_FUNDEF_BindFramebufferEXT
typedef void (*PFNGLBINDFRAMEBUFFEREXTPROC_ALT)(GLenum,GLuint);
static inline void glBindFramebufferEXT(GLenum target1,GLuint framebuffer1)
{
	static PFNGLBINDFRAMEBUFFEREXTPROC_ALT fn=(PFNGLBINDFRAMEBUFFEREXTPROC_ALT)glaltGetProcAddressExtension("glBindFramebufferEXT","GL_EXT_framebuffer_object");
	 fn(target1,framebuffer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_BindRenderbufferEXT
#define GL_ALT_FUNDEF_BindRenderbufferEXT
typedef void (*PFNGLBINDRENDERBUFFEREXTPROC_ALT)(GLenum,GLuint);
static inline void glBindRenderbufferEXT(GLenum target1,GLuint renderbuffer1)
{
	static PFNGLBINDRENDERBUFFEREXTPROC_ALT fn=(PFNGLBINDRENDERBUFFEREXTPROC_ALT)glaltGetProcAddressExtension("glBindRenderbufferEXT","GL_EXT_framebuffer_object");
	 fn(target1,renderbuffer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CheckFramebufferStatusEXT
#define GL_ALT_FUNDEF_CheckFramebufferStatusEXT
typedef GLenum (*PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC_ALT)(GLenum);
static inline GLenum glCheckFramebufferStatusEXT(GLenum target1)
{
	static PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC_ALT fn=(PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC_ALT)glaltGetProcAddressExtension("glCheckFramebufferStatusEXT","GL_EXT_framebuffer_object");
	return fn(target1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_DeleteFramebuffersEXT
#define GL_ALT_FUNDEF_DeleteFramebuffersEXT
typedef void (*PFNGLDELETEFRAMEBUFFERSEXTPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteFramebuffersEXT(GLsizei n1,const GLuint * framebuffers1)
{
	static PFNGLDELETEFRAMEBUFFERSEXTPROC_ALT fn=(PFNGLDELETEFRAMEBUFFERSEXTPROC_ALT)glaltGetProcAddressExtension("glDeleteFramebuffersEXT","GL_EXT_framebuffer_object");
	 fn(n1,framebuffers1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_DeleteRenderbuffersEXT
#define GL_ALT_FUNDEF_DeleteRenderbuffersEXT
typedef void (*PFNGLDELETERENDERBUFFERSEXTPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteRenderbuffersEXT(GLsizei n1,const GLuint * renderbuffers1)
{
	static PFNGLDELETERENDERBUFFERSEXTPROC_ALT fn=(PFNGLDELETERENDERBUFFERSEXTPROC_ALT)glaltGetProcAddressExtension("glDeleteRenderbuffersEXT","GL_EXT_framebuffer_object");
	 fn(n1,renderbuffers1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_FramebufferRenderbufferEXT
#define GL_ALT_FUNDEF_FramebufferRenderbufferEXT
typedef void (*PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC_ALT)(GLenum,GLenum,GLenum,GLuint);
static inline void glFramebufferRenderbufferEXT(GLenum target1,GLenum attachment1,GLenum renderbuffertarget1,GLuint renderbuffer1)
{
	static PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC_ALT fn=(PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC_ALT)glaltGetProcAddressExtension("glFramebufferRenderbufferEXT","GL_EXT_framebuffer_object");
	 fn(target1,attachment1,renderbuffertarget1,renderbuffer1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_FramebufferTexture1DEXT
#define GL_ALT_FUNDEF_FramebufferTexture1DEXT
typedef void (*PFNGLFRAMEBUFFERTEXTURE1DEXTPROC_ALT)(GLenum,GLenum,GLenum,GLuint,GLint);
static inline void glFramebufferTexture1DEXT(GLenum target1,GLenum attachment1,GLenum textarget1,GLuint texture1,GLint level1)
{
	static PFNGLFRAMEBUFFERTEXTURE1DEXTPROC_ALT fn=(PFNGLFRAMEBUFFERTEXTURE1DEXTPROC_ALT)glaltGetProcAddressExtension("glFramebufferTexture1DEXT","GL_EXT_framebuffer_object");
	 fn(target1,attachment1,textarget1,texture1,level1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_FramebufferTexture2DEXT
#define GL_ALT_FUNDEF_FramebufferTexture2DEXT
typedef void (*PFNGLFRAMEBUFFERTEXTURE2DEXTPROC_ALT)(GLenum,GLenum,GLenum,GLuint,GLint);
static inline void glFramebufferTexture2DEXT(GLenum target1,GLenum attachment1,GLenum textarget1,GLuint texture1,GLint level1)
{
	static PFNGLFRAMEBUFFERTEXTURE2DEXTPROC_ALT fn=(PFNGLFRAMEBUFFERTEXTURE2DEXTPROC_ALT)glaltGetProcAddressExtension("glFramebufferTexture2DEXT","GL_EXT_framebuffer_object");
	 fn(target1,attachment1,textarget1,texture1,level1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_FramebufferTexture3DEXT
#define GL_ALT_FUNDEF_FramebufferTexture3DEXT
typedef void (*PFNGLFRAMEBUFFERTEXTURE3DEXTPROC_ALT)(GLenum,GLenum,GLenum,GLuint,GLint,GLint);
static inline void glFramebufferTexture3DEXT(GLenum target1,GLenum attachment1,GLenum textarget1,GLuint texture1,GLint level1,GLint zoffset1)
{
	static PFNGLFRAMEBUFFERTEXTURE3DEXTPROC_ALT fn=(PFNGLFRAMEBUFFERTEXTURE3DEXTPROC_ALT)glaltGetProcAddressExtension("glFramebufferTexture3DEXT","GL_EXT_framebuffer_object");
	 fn(target1,attachment1,textarget1,texture1,level1,zoffset1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GenFramebuffersEXT
#define GL_ALT_FUNDEF_GenFramebuffersEXT
typedef void (*PFNGLGENFRAMEBUFFERSEXTPROC_ALT)(GLsizei,GLuint *);
static inline void glGenFramebuffersEXT(GLsizei n1,GLuint * framebuffers1)
{
	static PFNGLGENFRAMEBUFFERSEXTPROC_ALT fn=(PFNGLGENFRAMEBUFFERSEXTPROC_ALT)glaltGetProcAddressExtension("glGenFramebuffersEXT","GL_EXT_framebuffer_object");
	 fn(n1,framebuffers1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GenRenderbuffersEXT
#define GL_ALT_FUNDEF_GenRenderbuffersEXT
typedef void (*PFNGLGENRENDERBUFFERSEXTPROC_ALT)(GLsizei,GLuint *);
static inline void glGenRenderbuffersEXT(GLsizei n1,GLuint * renderbuffers1)
{
	static PFNGLGENRENDERBUFFERSEXTPROC_ALT fn=(PFNGLGENRENDERBUFFERSEXTPROC_ALT)glaltGetProcAddressExtension("glGenRenderbuffersEXT","GL_EXT_framebuffer_object");
	 fn(n1,renderbuffers1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GenerateMipmapEXT
#define GL_ALT_FUNDEF_GenerateMipmapEXT
typedef void (*PFNGLGENERATEMIPMAPEXTPROC_ALT)(GLenum);
static inline void glGenerateMipmapEXT(GLenum target1)
{
	static PFNGLGENERATEMIPMAPEXTPROC_ALT fn=(PFNGLGENERATEMIPMAPEXTPROC_ALT)glaltGetProcAddressExtension("glGenerateMipmapEXT","GL_EXT_framebuffer_object");
	 fn(target1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetFramebufferAttachmentParameterivEXT
#define GL_ALT_FUNDEF_GetFramebufferAttachmentParameterivEXT
typedef void (*PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC_ALT)(GLenum,GLenum,GLenum,GLint *);
static inline void glGetFramebufferAttachmentParameterivEXT(GLenum target1,GLenum attachment1,GLenum pname1,GLint * params1)
{
	static PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC_ALT fn=(PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC_ALT)glaltGetProcAddressExtension("glGetFramebufferAttachmentParameterivEXT","GL_EXT_framebuffer_object");
	 fn(target1,attachment1,pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetRenderbufferParameterivEXT
#define GL_ALT_FUNDEF_GetRenderbufferParameterivEXT
typedef void (*PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetRenderbufferParameterivEXT(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC_ALT fn=(PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC_ALT)glaltGetProcAddressExtension("glGetRenderbufferParameterivEXT","GL_EXT_framebuffer_object");
	 fn(target1,pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_IsFramebufferEXT
#define GL_ALT_FUNDEF_IsFramebufferEXT
typedef GLboolean (*PFNGLISFRAMEBUFFEREXTPROC_ALT)(GLuint);
static inline GLboolean glIsFramebufferEXT(GLuint framebuffer1)
{
	static PFNGLISFRAMEBUFFEREXTPROC_ALT fn=(PFNGLISFRAMEBUFFEREXTPROC_ALT)glaltGetProcAddressExtension("glIsFramebufferEXT","GL_EXT_framebuffer_object");
	return fn(framebuffer1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_IsRenderbufferEXT
#define GL_ALT_FUNDEF_IsRenderbufferEXT
typedef GLboolean (*PFNGLISRENDERBUFFEREXTPROC_ALT)(GLuint);
static inline GLboolean glIsRenderbufferEXT(GLuint renderbuffer1)
{
	static PFNGLISRENDERBUFFEREXTPROC_ALT fn=(PFNGLISRENDERBUFFEREXTPROC_ALT)glaltGetProcAddressExtension("glIsRenderbufferEXT","GL_EXT_framebuffer_object");
	return fn(renderbuffer1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_RenderbufferStorageEXT
#define GL_ALT_FUNDEF_RenderbufferStorageEXT
typedef void (*PFNGLRENDERBUFFERSTORAGEEXTPROC_ALT)(GLenum,GLenum,GLsizei,GLsizei);
static inline void glRenderbufferStorageEXT(GLenum target1,GLenum internalformat1,GLsizei width1,GLsizei height1)
{
	static PFNGLRENDERBUFFERSTORAGEEXTPROC_ALT fn=(PFNGLRENDERBUFFERSTORAGEEXTPROC_ALT)glaltGetProcAddressExtension("glRenderbufferStorageEXT","GL_EXT_framebuffer_object");
	 fn(target1,internalformat1,width1,height1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_framebuffer_sRGB
#define GL_EXT_framebuffer_sRGB
#ifndef GL_FRAMEBUFFER_SRGB_EXT
#define GL_FRAMEBUFFER_SRGB_EXT 0x8DB9
#endif //GL_FRAMEBUFFER_SRGB_EXT
#ifndef GL_FRAMEBUFFER_SRGB_CAPABLE_EXT
#define GL_FRAMEBUFFER_SRGB_CAPABLE_EXT 0x8DBA
#endif //GL_FRAMEBUFFER_SRGB_CAPABLE_EXT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_geometry_shader4
#define GL_EXT_geometry_shader4
#ifndef GL_LINES_ADJACENCY_EXT
#define GL_LINES_ADJACENCY_EXT 0x000A
#endif //GL_LINES_ADJACENCY_EXT
#ifndef GL_LINE_STRIP_ADJACENCY_EXT
#define GL_LINE_STRIP_ADJACENCY_EXT 0x000B
#endif //GL_LINE_STRIP_ADJACENCY_EXT
#ifndef GL_TRIANGLES_ADJACENCY_EXT
#define GL_TRIANGLES_ADJACENCY_EXT 0x000C
#endif //GL_TRIANGLES_ADJACENCY_EXT
#ifndef GL_TRIANGLE_STRIP_ADJACENCY_EXT
#define GL_TRIANGLE_STRIP_ADJACENCY_EXT 0x000D
#endif //GL_TRIANGLE_STRIP_ADJACENCY_EXT
#ifndef GL_PROGRAM_POINT_SIZE_EXT
#define GL_PROGRAM_POINT_SIZE_EXT 0x8642
#endif //GL_PROGRAM_POINT_SIZE_EXT
#ifndef GL_MAX_VARYING_COMPONENTS_EXT
#define GL_MAX_VARYING_COMPONENTS_EXT 0x8B4B
#endif //GL_MAX_VARYING_COMPONENTS_EXT
#ifndef GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT 0x8C29
#endif //GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT
#ifndef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT 0x8CD4
#endif //GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
#ifndef GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT 0x8DA7
#endif //GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT
#ifndef GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT 0x8DA8
#endif //GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT
#ifndef GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT 0x8DA9
#endif //GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT
#ifndef GL_GEOMETRY_SHADER_EXT
#define GL_GEOMETRY_SHADER_EXT 0x8DD9
#endif //GL_GEOMETRY_SHADER_EXT
#ifndef GL_GEOMETRY_VERTICES_OUT_EXT
#define GL_GEOMETRY_VERTICES_OUT_EXT 0x8DDA
#endif //GL_GEOMETRY_VERTICES_OUT_EXT
#ifndef GL_GEOMETRY_INPUT_TYPE_EXT
#define GL_GEOMETRY_INPUT_TYPE_EXT 0x8DDB
#endif //GL_GEOMETRY_INPUT_TYPE_EXT
#ifndef GL_GEOMETRY_OUTPUT_TYPE_EXT
#define GL_GEOMETRY_OUTPUT_TYPE_EXT 0x8DDC
#endif //GL_GEOMETRY_OUTPUT_TYPE_EXT
#ifndef GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT 0x8DDD
#endif //GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT
#ifndef GL_MAX_VERTEX_VARYING_COMPONENTS_EXT
#define GL_MAX_VERTEX_VARYING_COMPONENTS_EXT 0x8DDE
#endif //GL_MAX_VERTEX_VARYING_COMPONENTS_EXT
#ifndef GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT 0x8DDF
#endif //GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT
#ifndef GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT 0x8DE0
#endif //GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT
#ifndef GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT 0x8DE1
#endif //GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ProgramParameteriEXT
#define GL_ALT_FUNDEF_ProgramParameteriEXT
typedef void (*PFNGLPROGRAMPARAMETERIEXTPROC_ALT)(GLuint,GLenum,GLint);
static inline void glProgramParameteriEXT(GLuint program1,GLenum pname1,GLint value1)
{
	static PFNGLPROGRAMPARAMETERIEXTPROC_ALT fn=(PFNGLPROGRAMPARAMETERIEXTPROC_ALT)glaltGetProcAddressExtension("glProgramParameteriEXT","GL_EXT_geometry_shader4");
	 fn(program1,pname1,value1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_gpu_program_parameters
#define GL_EXT_gpu_program_parameters
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ProgramEnvParameters4fvEXT
#define GL_ALT_FUNDEF_ProgramEnvParameters4fvEXT
typedef void (*PFNGLPROGRAMENVPARAMETERS4FVEXTPROC_ALT)(GLenum,GLuint,GLsizei,const GLfloat *);
static inline void glProgramEnvParameters4fvEXT(GLenum target1,GLuint index1,GLsizei count1,const GLfloat * params1)
{
	static PFNGLPROGRAMENVPARAMETERS4FVEXTPROC_ALT fn=(PFNGLPROGRAMENVPARAMETERS4FVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramEnvParameters4fvEXT","GL_EXT_gpu_program_parameters");
	 fn(target1,index1,count1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramLocalParameters4fvEXT
#define GL_ALT_FUNDEF_ProgramLocalParameters4fvEXT
typedef void (*PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC_ALT)(GLenum,GLuint,GLsizei,const GLfloat *);
static inline void glProgramLocalParameters4fvEXT(GLenum target1,GLuint index1,GLsizei count1,const GLfloat * params1)
{
	static PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC_ALT fn=(PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramLocalParameters4fvEXT","GL_EXT_gpu_program_parameters");
	 fn(target1,index1,count1,params1);
}
#endif
CGUARDEND

#endif

#ifndef GL_EXT_gpu_shader4
#define GL_EXT_gpu_shader4
#ifndef GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT 0x88FD
#endif //GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT
#ifndef GL_MIN_PROGRAM_TEXEL_OFFSET_EXT
#define GL_MIN_PROGRAM_TEXEL_OFFSET_EXT 0x8904
#endif //GL_MIN_PROGRAM_TEXEL_OFFSET_EXT
#ifndef GL_MAX_PROGRAM_TEXEL_OFFSET_EXT
#define GL_MAX_PROGRAM_TEXEL_OFFSET_EXT 0x8905
#endif //GL_MAX_PROGRAM_TEXEL_OFFSET_EXT
#ifndef GL_SAMPLER_1D_ARRAY_EXT
#define GL_SAMPLER_1D_ARRAY_EXT 0x8DC0
#endif //GL_SAMPLER_1D_ARRAY_EXT
#ifndef GL_SAMPLER_2D_ARRAY_EXT
#define GL_SAMPLER_2D_ARRAY_EXT 0x8DC1
#endif //GL_SAMPLER_2D_ARRAY_EXT
#ifndef GL_SAMPLER_BUFFER_EXT
#define GL_SAMPLER_BUFFER_EXT 0x8DC2
#endif //GL_SAMPLER_BUFFER_EXT
#ifndef GL_SAMPLER_1D_ARRAY_SHADOW_EXT
#define GL_SAMPLER_1D_ARRAY_SHADOW_EXT 0x8DC3
#endif //GL_SAMPLER_1D_ARRAY_SHADOW_EXT
#ifndef GL_SAMPLER_2D_ARRAY_SHADOW_EXT
#define GL_SAMPLER_2D_ARRAY_SHADOW_EXT 0x8DC4
#endif //GL_SAMPLER_2D_ARRAY_SHADOW_EXT
#ifndef GL_SAMPLER_CUBE_SHADOW_EXT
#define GL_SAMPLER_CUBE_SHADOW_EXT 0x8DC5
#endif //GL_SAMPLER_CUBE_SHADOW_EXT
#ifndef GL_UNSIGNED_INT_VEC2_EXT
#define GL_UNSIGNED_INT_VEC2_EXT 0x8DC6
#endif //GL_UNSIGNED_INT_VEC2_EXT
#ifndef GL_UNSIGNED_INT_VEC3_EXT
#define GL_UNSIGNED_INT_VEC3_EXT 0x8DC7
#endif //GL_UNSIGNED_INT_VEC3_EXT
#ifndef GL_UNSIGNED_INT_VEC4_EXT
#define GL_UNSIGNED_INT_VEC4_EXT 0x8DC8
#endif //GL_UNSIGNED_INT_VEC4_EXT
#ifndef GL_INT_SAMPLER_1D_EXT
#define GL_INT_SAMPLER_1D_EXT 0x8DC9
#endif //GL_INT_SAMPLER_1D_EXT
#ifndef GL_INT_SAMPLER_2D_EXT
#define GL_INT_SAMPLER_2D_EXT 0x8DCA
#endif //GL_INT_SAMPLER_2D_EXT
#ifndef GL_INT_SAMPLER_3D_EXT
#define GL_INT_SAMPLER_3D_EXT 0x8DCB
#endif //GL_INT_SAMPLER_3D_EXT
#ifndef GL_INT_SAMPLER_CUBE_EXT
#define GL_INT_SAMPLER_CUBE_EXT 0x8DCC
#endif //GL_INT_SAMPLER_CUBE_EXT
#ifndef GL_INT_SAMPLER_2D_RECT_EXT
#define GL_INT_SAMPLER_2D_RECT_EXT 0x8DCD
#endif //GL_INT_SAMPLER_2D_RECT_EXT
#ifndef GL_INT_SAMPLER_1D_ARRAY_EXT
#define GL_INT_SAMPLER_1D_ARRAY_EXT 0x8DCE
#endif //GL_INT_SAMPLER_1D_ARRAY_EXT
#ifndef GL_INT_SAMPLER_2D_ARRAY_EXT
#define GL_INT_SAMPLER_2D_ARRAY_EXT 0x8DCF
#endif //GL_INT_SAMPLER_2D_ARRAY_EXT
#ifndef GL_INT_SAMPLER_BUFFER_EXT
#define GL_INT_SAMPLER_BUFFER_EXT 0x8DD0
#endif //GL_INT_SAMPLER_BUFFER_EXT
#ifndef GL_UNSIGNED_INT_SAMPLER_1D_EXT
#define GL_UNSIGNED_INT_SAMPLER_1D_EXT 0x8DD1
#endif //GL_UNSIGNED_INT_SAMPLER_1D_EXT
#ifndef GL_UNSIGNED_INT_SAMPLER_2D_EXT
#define GL_UNSIGNED_INT_SAMPLER_2D_EXT 0x8DD2
#endif //GL_UNSIGNED_INT_SAMPLER_2D_EXT
#ifndef GL_UNSIGNED_INT_SAMPLER_3D_EXT
#define GL_UNSIGNED_INT_SAMPLER_3D_EXT 0x8DD3
#endif //GL_UNSIGNED_INT_SAMPLER_3D_EXT
#ifndef GL_UNSIGNED_INT_SAMPLER_CUBE_EXT
#define GL_UNSIGNED_INT_SAMPLER_CUBE_EXT 0x8DD4
#endif //GL_UNSIGNED_INT_SAMPLER_CUBE_EXT
#ifndef GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT 0x8DD5
#endif //GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT
#ifndef GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT 0x8DD6
#endif //GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT
#ifndef GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT 0x8DD7
#endif //GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT
#ifndef GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT 0x8DD8
#endif //GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BindFragDataLocationEXT
#define GL_ALT_FUNDEF_BindFragDataLocationEXT
typedef void (*PFNGLBINDFRAGDATALOCATIONEXTPROC_ALT)(GLuint,GLuint,const GLchar *);
static inline void glBindFragDataLocationEXT(GLuint program1,GLuint color1,const GLchar * name1)
{
	static PFNGLBINDFRAGDATALOCATIONEXTPROC_ALT fn=(PFNGLBINDFRAGDATALOCATIONEXTPROC_ALT)glaltGetProcAddressExtension("glBindFragDataLocationEXT","GL_EXT_gpu_shader4");
	 fn(program1,color1,name1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetFragDataLocationEXT
#define GL_ALT_FUNDEF_GetFragDataLocationEXT
typedef GLint (*PFNGLGETFRAGDATALOCATIONEXTPROC_ALT)(GLuint,const GLchar *);
static inline GLint glGetFragDataLocationEXT(GLuint program1,const GLchar * name1)
{
	static PFNGLGETFRAGDATALOCATIONEXTPROC_ALT fn=(PFNGLGETFRAGDATALOCATIONEXTPROC_ALT)glaltGetProcAddressExtension("glGetFragDataLocationEXT","GL_EXT_gpu_shader4");
	return fn(program1,name1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetUniformuivEXT
#define GL_ALT_FUNDEF_GetUniformuivEXT
typedef void (*PFNGLGETUNIFORMUIVEXTPROC_ALT)(GLuint,GLint,GLuint *);
static inline void glGetUniformuivEXT(GLuint program1,GLint location1,GLuint * params1)
{
	static PFNGLGETUNIFORMUIVEXTPROC_ALT fn=(PFNGLGETUNIFORMUIVEXTPROC_ALT)glaltGetProcAddressExtension("glGetUniformuivEXT","GL_EXT_gpu_shader4");
	 fn(program1,location1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_Uniform1uiEXT
#define GL_ALT_FUNDEF_Uniform1uiEXT
typedef void (*PFNGLUNIFORM1UIEXTPROC_ALT)(GLint,GLuint);
static inline void glUniform1uiEXT(GLint location1,GLuint v01)
{
	static PFNGLUNIFORM1UIEXTPROC_ALT fn=(PFNGLUNIFORM1UIEXTPROC_ALT)glaltGetProcAddressExtension("glUniform1uiEXT","GL_EXT_gpu_shader4");
	 fn(location1,v01);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_Uniform1uivEXT
#define GL_ALT_FUNDEF_Uniform1uivEXT
typedef void (*PFNGLUNIFORM1UIVEXTPROC_ALT)(GLint,GLsizei,const GLuint *);
static inline void glUniform1uivEXT(GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLUNIFORM1UIVEXTPROC_ALT fn=(PFNGLUNIFORM1UIVEXTPROC_ALT)glaltGetProcAddressExtension("glUniform1uivEXT","GL_EXT_gpu_shader4");
	 fn(location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_Uniform2uiEXT
#define GL_ALT_FUNDEF_Uniform2uiEXT
typedef void (*PFNGLUNIFORM2UIEXTPROC_ALT)(GLint,GLuint,GLuint);
static inline void glUniform2uiEXT(GLint location1,GLuint v01,GLuint v11)
{
	static PFNGLUNIFORM2UIEXTPROC_ALT fn=(PFNGLUNIFORM2UIEXTPROC_ALT)glaltGetProcAddressExtension("glUniform2uiEXT","GL_EXT_gpu_shader4");
	 fn(location1,v01,v11);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_Uniform2uivEXT
#define GL_ALT_FUNDEF_Uniform2uivEXT
typedef void (*PFNGLUNIFORM2UIVEXTPROC_ALT)(GLint,GLsizei,const GLuint *);
static inline void glUniform2uivEXT(GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLUNIFORM2UIVEXTPROC_ALT fn=(PFNGLUNIFORM2UIVEXTPROC_ALT)glaltGetProcAddressExtension("glUniform2uivEXT","GL_EXT_gpu_shader4");
	 fn(location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_Uniform3uiEXT
#define GL_ALT_FUNDEF_Uniform3uiEXT
typedef void (*PFNGLUNIFORM3UIEXTPROC_ALT)(GLint,GLuint,GLuint,GLuint);
static inline void glUniform3uiEXT(GLint location1,GLuint v01,GLuint v11,GLuint v21)
{
	static PFNGLUNIFORM3UIEXTPROC_ALT fn=(PFNGLUNIFORM3UIEXTPROC_ALT)glaltGetProcAddressExtension("glUniform3uiEXT","GL_EXT_gpu_shader4");
	 fn(location1,v01,v11,v21);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_Uniform3uivEXT
#define GL_ALT_FUNDEF_Uniform3uivEXT
typedef void (*PFNGLUNIFORM3UIVEXTPROC_ALT)(GLint,GLsizei,const GLuint *);
static inline void glUniform3uivEXT(GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLUNIFORM3UIVEXTPROC_ALT fn=(PFNGLUNIFORM3UIVEXTPROC_ALT)glaltGetProcAddressExtension("glUniform3uivEXT","GL_EXT_gpu_shader4");
	 fn(location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_Uniform4uiEXT
#define GL_ALT_FUNDEF_Uniform4uiEXT
typedef void (*PFNGLUNIFORM4UIEXTPROC_ALT)(GLint,GLuint,GLuint,GLuint,GLuint);
static inline void glUniform4uiEXT(GLint location1,GLuint v01,GLuint v11,GLuint v21,GLuint v31)
{
	static PFNGLUNIFORM4UIEXTPROC_ALT fn=(PFNGLUNIFORM4UIEXTPROC_ALT)glaltGetProcAddressExtension("glUniform4uiEXT","GL_EXT_gpu_shader4");
	 fn(location1,v01,v11,v21,v31);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_Uniform4uivEXT
#define GL_ALT_FUNDEF_Uniform4uivEXT
typedef void (*PFNGLUNIFORM4UIVEXTPROC_ALT)(GLint,GLsizei,const GLuint *);
static inline void glUniform4uivEXT(GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLUNIFORM4UIVEXTPROC_ALT fn=(PFNGLUNIFORM4UIVEXTPROC_ALT)glaltGetProcAddressExtension("glUniform4uivEXT","GL_EXT_gpu_shader4");
	 fn(location1,count1,value1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_histogram
#define GL_EXT_histogram
#ifndef GL_HISTOGRAM_EXT
#define GL_HISTOGRAM_EXT 0x8024
#endif //GL_HISTOGRAM_EXT
#ifndef GL_PROXY_HISTOGRAM_EXT
#define GL_PROXY_HISTOGRAM_EXT 0x8025
#endif //GL_PROXY_HISTOGRAM_EXT
#ifndef GL_HISTOGRAM_WIDTH_EXT
#define GL_HISTOGRAM_WIDTH_EXT 0x8026
#endif //GL_HISTOGRAM_WIDTH_EXT
#ifndef GL_HISTOGRAM_FORMAT_EXT
#define GL_HISTOGRAM_FORMAT_EXT 0x8027
#endif //GL_HISTOGRAM_FORMAT_EXT
#ifndef GL_HISTOGRAM_RED_SIZE_EXT
#define GL_HISTOGRAM_RED_SIZE_EXT 0x8028
#endif //GL_HISTOGRAM_RED_SIZE_EXT
#ifndef GL_HISTOGRAM_GREEN_SIZE_EXT
#define GL_HISTOGRAM_GREEN_SIZE_EXT 0x8029
#endif //GL_HISTOGRAM_GREEN_SIZE_EXT
#ifndef GL_HISTOGRAM_BLUE_SIZE_EXT
#define GL_HISTOGRAM_BLUE_SIZE_EXT 0x802A
#endif //GL_HISTOGRAM_BLUE_SIZE_EXT
#ifndef GL_HISTOGRAM_ALPHA_SIZE_EXT
#define GL_HISTOGRAM_ALPHA_SIZE_EXT 0x802B
#endif //GL_HISTOGRAM_ALPHA_SIZE_EXT
#ifndef GL_HISTOGRAM_LUMINANCE_SIZE_EXT
#define GL_HISTOGRAM_LUMINANCE_SIZE_EXT 0x802C
#endif //GL_HISTOGRAM_LUMINANCE_SIZE_EXT
#ifndef GL_HISTOGRAM_SINK_EXT
#define GL_HISTOGRAM_SINK_EXT 0x802D
#endif //GL_HISTOGRAM_SINK_EXT
#ifndef GL_MINMAX_EXT
#define GL_MINMAX_EXT 0x802E
#endif //GL_MINMAX_EXT
#ifndef GL_MINMAX_FORMAT_EXT
#define GL_MINMAX_FORMAT_EXT 0x802F
#endif //GL_MINMAX_FORMAT_EXT
#ifndef GL_MINMAX_SINK_EXT
#define GL_MINMAX_SINK_EXT 0x8030
#endif //GL_MINMAX_SINK_EXT
#ifndef GL_TABLE_TOO_LARGE_EXT
#define GL_TABLE_TOO_LARGE_EXT 0x8031
#endif //GL_TABLE_TOO_LARGE_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetHistogramEXT
#define GL_ALT_FUNDEF_GetHistogramEXT
typedef void (*PFNGLGETHISTOGRAMEXTPROC_ALT)(GLenum,GLboolean,GLenum,GLenum,void *);
static inline void glGetHistogramEXT(GLenum target1,GLboolean reset1,GLenum format1,GLenum type1,void * values1)
{
	static PFNGLGETHISTOGRAMEXTPROC_ALT fn=(PFNGLGETHISTOGRAMEXTPROC_ALT)glaltGetProcAddressExtension("glGetHistogramEXT","GL_EXT_histogram");
	 fn(target1,reset1,format1,type1,values1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetHistogramParameterfvEXT
#define GL_ALT_FUNDEF_GetHistogramParameterfvEXT
typedef void (*PFNGLGETHISTOGRAMPARAMETERFVEXTPROC_ALT)(GLenum,GLenum,GLfloat *);
static inline void glGetHistogramParameterfvEXT(GLenum target1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETHISTOGRAMPARAMETERFVEXTPROC_ALT fn=(PFNGLGETHISTOGRAMPARAMETERFVEXTPROC_ALT)glaltGetProcAddressExtension("glGetHistogramParameterfvEXT","GL_EXT_histogram");
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetHistogramParameterivEXT
#define GL_ALT_FUNDEF_GetHistogramParameterivEXT
typedef void (*PFNGLGETHISTOGRAMPARAMETERIVEXTPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetHistogramParameterivEXT(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETHISTOGRAMPARAMETERIVEXTPROC_ALT fn=(PFNGLGETHISTOGRAMPARAMETERIVEXTPROC_ALT)glaltGetProcAddressExtension("glGetHistogramParameterivEXT","GL_EXT_histogram");
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetMinmaxEXT
#define GL_ALT_FUNDEF_GetMinmaxEXT
typedef void (*PFNGLGETMINMAXEXTPROC_ALT)(GLenum,GLboolean,GLenum,GLenum,void *);
static inline void glGetMinmaxEXT(GLenum target1,GLboolean reset1,GLenum format1,GLenum type1,void * values1)
{
	static PFNGLGETMINMAXEXTPROC_ALT fn=(PFNGLGETMINMAXEXTPROC_ALT)glaltGetProcAddressExtension("glGetMinmaxEXT","GL_EXT_histogram");
	 fn(target1,reset1,format1,type1,values1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetMinmaxParameterfvEXT
#define GL_ALT_FUNDEF_GetMinmaxParameterfvEXT
typedef void (*PFNGLGETMINMAXPARAMETERFVEXTPROC_ALT)(GLenum,GLenum,GLfloat *);
static inline void glGetMinmaxParameterfvEXT(GLenum target1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETMINMAXPARAMETERFVEXTPROC_ALT fn=(PFNGLGETMINMAXPARAMETERFVEXTPROC_ALT)glaltGetProcAddressExtension("glGetMinmaxParameterfvEXT","GL_EXT_histogram");
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetMinmaxParameterivEXT
#define GL_ALT_FUNDEF_GetMinmaxParameterivEXT
typedef void (*PFNGLGETMINMAXPARAMETERIVEXTPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetMinmaxParameterivEXT(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETMINMAXPARAMETERIVEXTPROC_ALT fn=(PFNGLGETMINMAXPARAMETERIVEXTPROC_ALT)glaltGetProcAddressExtension("glGetMinmaxParameterivEXT","GL_EXT_histogram");
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_HistogramEXT
#define GL_ALT_FUNDEF_HistogramEXT
typedef void (*PFNGLHISTOGRAMEXTPROC_ALT)(GLenum,GLsizei,GLenum,GLboolean);
static inline void glHistogramEXT(GLenum target1,GLsizei width1,GLenum internalformat1,GLboolean sink1)
{
	static PFNGLHISTOGRAMEXTPROC_ALT fn=(PFNGLHISTOGRAMEXTPROC_ALT)glaltGetProcAddressExtension("glHistogramEXT","GL_EXT_histogram");
	 fn(target1,width1,internalformat1,sink1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MinmaxEXT
#define GL_ALT_FUNDEF_MinmaxEXT
typedef void (*PFNGLMINMAXEXTPROC_ALT)(GLenum,GLenum,GLboolean);
static inline void glMinmaxEXT(GLenum target1,GLenum internalformat1,GLboolean sink1)
{
	static PFNGLMINMAXEXTPROC_ALT fn=(PFNGLMINMAXEXTPROC_ALT)glaltGetProcAddressExtension("glMinmaxEXT","GL_EXT_histogram");
	 fn(target1,internalformat1,sink1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ResetHistogramEXT
#define GL_ALT_FUNDEF_ResetHistogramEXT
typedef void (*PFNGLRESETHISTOGRAMEXTPROC_ALT)(GLenum);
static inline void glResetHistogramEXT(GLenum target1)
{
	static PFNGLRESETHISTOGRAMEXTPROC_ALT fn=(PFNGLRESETHISTOGRAMEXTPROC_ALT)glaltGetProcAddressExtension("glResetHistogramEXT","GL_EXT_histogram");
	 fn(target1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ResetMinmaxEXT
#define GL_ALT_FUNDEF_ResetMinmaxEXT
typedef void (*PFNGLRESETMINMAXEXTPROC_ALT)(GLenum);
static inline void glResetMinmaxEXT(GLenum target1)
{
	static PFNGLRESETMINMAXEXTPROC_ALT fn=(PFNGLRESETMINMAXEXTPROC_ALT)glaltGetProcAddressExtension("glResetMinmaxEXT","GL_EXT_histogram");
	 fn(target1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_index_array_formats
#define GL_EXT_index_array_formats
#ifndef GL_IUI_V2F_EXT
#define GL_IUI_V2F_EXT 0x81AD
#endif //GL_IUI_V2F_EXT
#ifndef GL_IUI_V3F_EXT
#define GL_IUI_V3F_EXT 0x81AE
#endif //GL_IUI_V3F_EXT
#ifndef GL_IUI_N3F_V2F_EXT
#define GL_IUI_N3F_V2F_EXT 0x81AF
#endif //GL_IUI_N3F_V2F_EXT
#ifndef GL_IUI_N3F_V3F_EXT
#define GL_IUI_N3F_V3F_EXT 0x81B0
#endif //GL_IUI_N3F_V3F_EXT
#ifndef GL_T2F_IUI_V2F_EXT
#define GL_T2F_IUI_V2F_EXT 0x81B1
#endif //GL_T2F_IUI_V2F_EXT
#ifndef GL_T2F_IUI_V3F_EXT
#define GL_T2F_IUI_V3F_EXT 0x81B2
#endif //GL_T2F_IUI_V3F_EXT
#ifndef GL_T2F_IUI_N3F_V2F_EXT
#define GL_T2F_IUI_N3F_V2F_EXT 0x81B3
#endif //GL_T2F_IUI_N3F_V2F_EXT
#ifndef GL_T2F_IUI_N3F_V3F_EXT
#define GL_T2F_IUI_N3F_V3F_EXT 0x81B4
#endif //GL_T2F_IUI_N3F_V3F_EXT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_index_func
#define GL_EXT_index_func
#ifndef GL_INDEX_TEST_EXT
#define GL_INDEX_TEST_EXT 0x81B5
#endif //GL_INDEX_TEST_EXT
#ifndef GL_INDEX_TEST_FUNC_EXT
#define GL_INDEX_TEST_FUNC_EXT 0x81B6
#endif //GL_INDEX_TEST_FUNC_EXT
#ifndef GL_INDEX_TEST_REF_EXT
#define GL_INDEX_TEST_REF_EXT 0x81B7
#endif //GL_INDEX_TEST_REF_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_IndexFuncEXT
#define GL_ALT_FUNDEF_IndexFuncEXT
typedef void (*PFNGLINDEXFUNCEXTPROC_ALT)(GLenum,GLclampf);
static inline void glIndexFuncEXT(GLenum func1,GLclampf ref1)
{
	static PFNGLINDEXFUNCEXTPROC_ALT fn=(PFNGLINDEXFUNCEXTPROC_ALT)glaltGetProcAddressExtension("glIndexFuncEXT","GL_EXT_index_func");
	 fn(func1,ref1);
}
#endif
CGUARDEND

#endif

#ifndef GL_EXT_index_material
#define GL_EXT_index_material
#ifndef GL_INDEX_MATERIAL_EXT
#define GL_INDEX_MATERIAL_EXT 0x81B8
#endif //GL_INDEX_MATERIAL_EXT
#ifndef GL_INDEX_MATERIAL_PARAMETER_EXT
#define GL_INDEX_MATERIAL_PARAMETER_EXT 0x81B9
#endif //GL_INDEX_MATERIAL_PARAMETER_EXT
#ifndef GL_INDEX_MATERIAL_FACE_EXT
#define GL_INDEX_MATERIAL_FACE_EXT 0x81BA
#endif //GL_INDEX_MATERIAL_FACE_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_IndexMaterialEXT
#define GL_ALT_FUNDEF_IndexMaterialEXT
typedef void (*PFNGLINDEXMATERIALEXTPROC_ALT)(GLenum,GLenum);
static inline void glIndexMaterialEXT(GLenum face1,GLenum mode1)
{
	static PFNGLINDEXMATERIALEXTPROC_ALT fn=(PFNGLINDEXMATERIALEXTPROC_ALT)glaltGetProcAddressExtension("glIndexMaterialEXT","GL_EXT_index_material");
	 fn(face1,mode1);
}
#endif
CGUARDEND

#endif

#ifndef GL_EXT_index_texture
#define GL_EXT_index_texture
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_light_texture
#define GL_EXT_light_texture
#ifndef GL_FRAGMENT_MATERIAL_EXT
#define GL_FRAGMENT_MATERIAL_EXT 0x8349
#endif //GL_FRAGMENT_MATERIAL_EXT
#ifndef GL_FRAGMENT_NORMAL_EXT
#define GL_FRAGMENT_NORMAL_EXT 0x834A
#endif //GL_FRAGMENT_NORMAL_EXT
#ifndef GL_FRAGMENT_COLOR_EXT
#define GL_FRAGMENT_COLOR_EXT 0x834C
#endif //GL_FRAGMENT_COLOR_EXT
#ifndef GL_ATTENUATION_EXT
#define GL_ATTENUATION_EXT 0x834D
#endif //GL_ATTENUATION_EXT
#ifndef GL_SHADOW_ATTENUATION_EXT
#define GL_SHADOW_ATTENUATION_EXT 0x834E
#endif //GL_SHADOW_ATTENUATION_EXT
#ifndef GL_TEXTURE_APPLICATION_MODE_EXT
#define GL_TEXTURE_APPLICATION_MODE_EXT 0x834F
#endif //GL_TEXTURE_APPLICATION_MODE_EXT
#ifndef GL_TEXTURE_LIGHT_EXT
#define GL_TEXTURE_LIGHT_EXT 0x8350
#endif //GL_TEXTURE_LIGHT_EXT
#ifndef GL_TEXTURE_MATERIAL_FACE_EXT
#define GL_TEXTURE_MATERIAL_FACE_EXT 0x8351
#endif //GL_TEXTURE_MATERIAL_FACE_EXT
#ifndef GL_TEXTURE_MATERIAL_PARAMETER_EXT
#define GL_TEXTURE_MATERIAL_PARAMETER_EXT 0x8352
#endif //GL_TEXTURE_MATERIAL_PARAMETER_EXT
#ifndef GL_FRAGMENT_DEPTH_EXT
#define GL_FRAGMENT_DEPTH_EXT 0x8452
#endif //GL_FRAGMENT_DEPTH_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ApplyTextureEXT
#define GL_ALT_FUNDEF_ApplyTextureEXT
typedef void (*PFNGLAPPLYTEXTUREEXTPROC_ALT)(GLenum);
static inline void glApplyTextureEXT(GLenum mode1)
{
	static PFNGLAPPLYTEXTUREEXTPROC_ALT fn=(PFNGLAPPLYTEXTUREEXTPROC_ALT)glaltGetProcAddressExtension("glApplyTextureEXT","GL_EXT_light_texture");
	 fn(mode1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureLightEXT
#define GL_ALT_FUNDEF_TextureLightEXT
typedef void (*PFNGLTEXTURELIGHTEXTPROC_ALT)(GLenum);
static inline void glTextureLightEXT(GLenum pname1)
{
	static PFNGLTEXTURELIGHTEXTPROC_ALT fn=(PFNGLTEXTURELIGHTEXTPROC_ALT)glaltGetProcAddressExtension("glTextureLightEXT","GL_EXT_light_texture");
	 fn(pname1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureMaterialEXT
#define GL_ALT_FUNDEF_TextureMaterialEXT
typedef void (*PFNGLTEXTUREMATERIALEXTPROC_ALT)(GLenum,GLenum);
static inline void glTextureMaterialEXT(GLenum face1,GLenum mode1)
{
	static PFNGLTEXTUREMATERIALEXTPROC_ALT fn=(PFNGLTEXTUREMATERIALEXTPROC_ALT)glaltGetProcAddressExtension("glTextureMaterialEXT","GL_EXT_light_texture");
	 fn(face1,mode1);
}
#endif
CGUARDEND

#endif

#ifndef GL_EXT_misc_attribute
#define GL_EXT_misc_attribute
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_multi_draw_arrays
#define GL_EXT_multi_draw_arrays
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_MultiDrawArraysEXT
#define GL_ALT_FUNDEF_MultiDrawArraysEXT
typedef void (*PFNGLMULTIDRAWARRAYSEXTPROC_ALT)(GLenum,const GLint *,const GLsizei *,GLsizei);
static inline void glMultiDrawArraysEXT(GLenum mode1,const GLint * first1,const GLsizei * count1,GLsizei primcount1)
{
	static PFNGLMULTIDRAWARRAYSEXTPROC_ALT fn=(PFNGLMULTIDRAWARRAYSEXTPROC_ALT)glaltGetProcAddressExtension("glMultiDrawArraysEXT","GL_EXT_multi_draw_arrays");
	 fn(mode1,first1,count1,primcount1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_MultiDrawElementsEXT
#define GL_ALT_FUNDEF_MultiDrawElementsEXT
typedef void (*PFNGLMULTIDRAWELEMENTSEXTPROC_ALT)(GLenum,const GLsizei *,GLenum,const void *const*,GLsizei);
static inline void glMultiDrawElementsEXT(GLenum mode1,const GLsizei * count1,GLenum type1,const void *const* indices1,GLsizei primcount1)
{
	static PFNGLMULTIDRAWELEMENTSEXTPROC_ALT fn=(PFNGLMULTIDRAWELEMENTSEXTPROC_ALT)glaltGetProcAddressExtension("glMultiDrawElementsEXT","GL_EXT_multi_draw_arrays");
	 fn(mode1,count1,type1,indices1,primcount1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_multisample
#define GL_EXT_multisample
#ifndef GL_MULTISAMPLE_BIT_EXT
#define GL_MULTISAMPLE_BIT_EXT 0x20000000
#endif //GL_MULTISAMPLE_BIT_EXT
#ifndef GL_MULTISAMPLE_EXT
#define GL_MULTISAMPLE_EXT 0x809D
#endif //GL_MULTISAMPLE_EXT
#ifndef GL_SAMPLE_ALPHA_TO_MASK_EXT
#define GL_SAMPLE_ALPHA_TO_MASK_EXT 0x809E
#endif //GL_SAMPLE_ALPHA_TO_MASK_EXT
#ifndef GL_SAMPLE_ALPHA_TO_ONE_EXT
#define GL_SAMPLE_ALPHA_TO_ONE_EXT 0x809F
#endif //GL_SAMPLE_ALPHA_TO_ONE_EXT
#ifndef GL_SAMPLE_MASK_EXT
#define GL_SAMPLE_MASK_EXT 0x80A0
#endif //GL_SAMPLE_MASK_EXT
#ifndef GL_1PASS_EXT
#define GL_1PASS_EXT 0x80A1
#endif //GL_1PASS_EXT
#ifndef GL_2PASS_0_EXT
#define GL_2PASS_0_EXT 0x80A2
#endif //GL_2PASS_0_EXT
#ifndef GL_2PASS_1_EXT
#define GL_2PASS_1_EXT 0x80A3
#endif //GL_2PASS_1_EXT
#ifndef GL_4PASS_0_EXT
#define GL_4PASS_0_EXT 0x80A4
#endif //GL_4PASS_0_EXT
#ifndef GL_4PASS_1_EXT
#define GL_4PASS_1_EXT 0x80A5
#endif //GL_4PASS_1_EXT
#ifndef GL_4PASS_2_EXT
#define GL_4PASS_2_EXT 0x80A6
#endif //GL_4PASS_2_EXT
#ifndef GL_4PASS_3_EXT
#define GL_4PASS_3_EXT 0x80A7
#endif //GL_4PASS_3_EXT
#ifndef GL_SAMPLE_BUFFERS_EXT
#define GL_SAMPLE_BUFFERS_EXT 0x80A8
#endif //GL_SAMPLE_BUFFERS_EXT
#ifndef GL_SAMPLES_EXT
#define GL_SAMPLES_EXT 0x80A9
#endif //GL_SAMPLES_EXT
#ifndef GL_SAMPLE_MASK_VALUE_EXT
#define GL_SAMPLE_MASK_VALUE_EXT 0x80AA
#endif //GL_SAMPLE_MASK_VALUE_EXT
#ifndef GL_SAMPLE_MASK_INVERT_EXT
#define GL_SAMPLE_MASK_INVERT_EXT 0x80AB
#endif //GL_SAMPLE_MASK_INVERT_EXT
#ifndef GL_SAMPLE_PATTERN_EXT
#define GL_SAMPLE_PATTERN_EXT 0x80AC
#endif //GL_SAMPLE_PATTERN_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_SampleMaskEXT
#define GL_ALT_FUNDEF_SampleMaskEXT
typedef void (*PFNGLSAMPLEMASKEXTPROC_ALT)(GLclampf,GLboolean);
static inline void glSampleMaskEXT(GLclampf value1,GLboolean invert1)
{
	static PFNGLSAMPLEMASKEXTPROC_ALT fn=(PFNGLSAMPLEMASKEXTPROC_ALT)glaltGetProcAddressExtension("glSampleMaskEXT","GL_EXT_multisample");
	 fn(value1,invert1);
}
#endif

#ifndef	GL_ALT_FUNDEF_SamplePatternEXT
#define GL_ALT_FUNDEF_SamplePatternEXT
typedef void (*PFNGLSAMPLEPATTERNEXTPROC_ALT)(GLenum);
static inline void glSamplePatternEXT(GLenum pattern1)
{
	static PFNGLSAMPLEPATTERNEXTPROC_ALT fn=(PFNGLSAMPLEPATTERNEXTPROC_ALT)glaltGetProcAddressExtension("glSamplePatternEXT","GL_EXT_multisample");
	 fn(pattern1);
}
#endif
CGUARDEND

#endif

#ifndef GL_EXT_packed_depth_stencil
#define GL_EXT_packed_depth_stencil
#ifndef GL_DEPTH_STENCIL_EXT
#define GL_DEPTH_STENCIL_EXT 0x84F9
#endif //GL_DEPTH_STENCIL_EXT
#ifndef GL_UNSIGNED_INT_24_8_EXT
#define GL_UNSIGNED_INT_24_8_EXT 0x84FA
#endif //GL_UNSIGNED_INT_24_8_EXT
#ifndef GL_DEPTH24_STENCIL8_EXT
#define GL_DEPTH24_STENCIL8_EXT 0x88F0
#endif //GL_DEPTH24_STENCIL8_EXT
#ifndef GL_TEXTURE_STENCIL_SIZE_EXT
#define GL_TEXTURE_STENCIL_SIZE_EXT 0x88F1
#endif //GL_TEXTURE_STENCIL_SIZE_EXT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_packed_float
#define GL_EXT_packed_float
#ifndef GL_R11F_G11F_B10F_EXT
#define GL_R11F_G11F_B10F_EXT 0x8C3A
#endif //GL_R11F_G11F_B10F_EXT
#ifndef GL_UNSIGNED_INT_10F_11F_11F_REV_EXT
#define GL_UNSIGNED_INT_10F_11F_11F_REV_EXT 0x8C3B
#endif //GL_UNSIGNED_INT_10F_11F_11F_REV_EXT
#ifndef GL_RGBA_SIGNED_COMPONENTS_EXT
#define GL_RGBA_SIGNED_COMPONENTS_EXT 0x8C3C
#endif //GL_RGBA_SIGNED_COMPONENTS_EXT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_packed_pixels
#define GL_EXT_packed_pixels
#ifndef GL_UNSIGNED_BYTE_3_3_2_EXT
#define GL_UNSIGNED_BYTE_3_3_2_EXT 0x8032
#endif //GL_UNSIGNED_BYTE_3_3_2_EXT
#ifndef GL_UNSIGNED_SHORT_4_4_4_4_EXT
#define GL_UNSIGNED_SHORT_4_4_4_4_EXT 0x8033
#endif //GL_UNSIGNED_SHORT_4_4_4_4_EXT
#ifndef GL_UNSIGNED_SHORT_5_5_5_1_EXT
#define GL_UNSIGNED_SHORT_5_5_5_1_EXT 0x8034
#endif //GL_UNSIGNED_SHORT_5_5_5_1_EXT
#ifndef GL_UNSIGNED_INT_8_8_8_8_EXT
#define GL_UNSIGNED_INT_8_8_8_8_EXT 0x8035
#endif //GL_UNSIGNED_INT_8_8_8_8_EXT
#ifndef GL_UNSIGNED_INT_10_10_10_2_EXT
#define GL_UNSIGNED_INT_10_10_10_2_EXT 0x8036
#endif //GL_UNSIGNED_INT_10_10_10_2_EXT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_paletted_texture
#define GL_EXT_paletted_texture
#ifndef GL_COLOR_INDEX1_EXT
#define GL_COLOR_INDEX1_EXT 0x80E2
#endif //GL_COLOR_INDEX1_EXT
#ifndef GL_COLOR_INDEX2_EXT
#define GL_COLOR_INDEX2_EXT 0x80E3
#endif //GL_COLOR_INDEX2_EXT
#ifndef GL_COLOR_INDEX4_EXT
#define GL_COLOR_INDEX4_EXT 0x80E4
#endif //GL_COLOR_INDEX4_EXT
#ifndef GL_COLOR_INDEX8_EXT
#define GL_COLOR_INDEX8_EXT 0x80E5
#endif //GL_COLOR_INDEX8_EXT
#ifndef GL_COLOR_INDEX12_EXT
#define GL_COLOR_INDEX12_EXT 0x80E6
#endif //GL_COLOR_INDEX12_EXT
#ifndef GL_COLOR_INDEX16_EXT
#define GL_COLOR_INDEX16_EXT 0x80E7
#endif //GL_COLOR_INDEX16_EXT
#ifndef GL_TEXTURE_INDEX_SIZE_EXT
#define GL_TEXTURE_INDEX_SIZE_EXT 0x80ED
#endif //GL_TEXTURE_INDEX_SIZE_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ColorTableEXT
#define GL_ALT_FUNDEF_ColorTableEXT
typedef void (*PFNGLCOLORTABLEEXTPROC_ALT)(GLenum,GLenum,GLsizei,GLenum,GLenum,const void *);
static inline void glColorTableEXT(GLenum target1,GLenum internalFormat1,GLsizei width1,GLenum format1,GLenum type1,const void * table1)
{
	static PFNGLCOLORTABLEEXTPROC_ALT fn=(PFNGLCOLORTABLEEXTPROC_ALT)glaltGetProcAddressExtension("glColorTableEXT","GL_EXT_paletted_texture");
	 fn(target1,internalFormat1,width1,format1,type1,table1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetColorTableEXT
#define GL_ALT_FUNDEF_GetColorTableEXT
typedef void (*PFNGLGETCOLORTABLEEXTPROC_ALT)(GLenum,GLenum,GLenum,void *);
static inline void glGetColorTableEXT(GLenum target1,GLenum format1,GLenum type1,void * data1)
{
	static PFNGLGETCOLORTABLEEXTPROC_ALT fn=(PFNGLGETCOLORTABLEEXTPROC_ALT)glaltGetProcAddressExtension("glGetColorTableEXT","GL_EXT_paletted_texture");
	 fn(target1,format1,type1,data1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetColorTableParameterfvEXT
#define GL_ALT_FUNDEF_GetColorTableParameterfvEXT
typedef void (*PFNGLGETCOLORTABLEPARAMETERFVEXTPROC_ALT)(GLenum,GLenum,GLfloat *);
static inline void glGetColorTableParameterfvEXT(GLenum target1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETCOLORTABLEPARAMETERFVEXTPROC_ALT fn=(PFNGLGETCOLORTABLEPARAMETERFVEXTPROC_ALT)glaltGetProcAddressExtension("glGetColorTableParameterfvEXT","GL_EXT_paletted_texture");
	 fn(target1,pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetColorTableParameterivEXT
#define GL_ALT_FUNDEF_GetColorTableParameterivEXT
typedef void (*PFNGLGETCOLORTABLEPARAMETERIVEXTPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetColorTableParameterivEXT(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETCOLORTABLEPARAMETERIVEXTPROC_ALT fn=(PFNGLGETCOLORTABLEPARAMETERIVEXTPROC_ALT)glaltGetProcAddressExtension("glGetColorTableParameterivEXT","GL_EXT_paletted_texture");
	 fn(target1,pname1,params1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_pixel_buffer_object
#define GL_EXT_pixel_buffer_object
#ifndef GL_PIXEL_PACK_BUFFER_EXT
#define GL_PIXEL_PACK_BUFFER_EXT 0x88EB
#endif //GL_PIXEL_PACK_BUFFER_EXT
#ifndef GL_PIXEL_UNPACK_BUFFER_EXT
#define GL_PIXEL_UNPACK_BUFFER_EXT 0x88EC
#endif //GL_PIXEL_UNPACK_BUFFER_EXT
#ifndef GL_PIXEL_PACK_BUFFER_BINDING_EXT
#define GL_PIXEL_PACK_BUFFER_BINDING_EXT 0x88ED
#endif //GL_PIXEL_PACK_BUFFER_BINDING_EXT
#ifndef GL_PIXEL_UNPACK_BUFFER_BINDING_EXT
#define GL_PIXEL_UNPACK_BUFFER_BINDING_EXT 0x88EF
#endif //GL_PIXEL_UNPACK_BUFFER_BINDING_EXT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_pixel_transform
#define GL_EXT_pixel_transform
#ifndef GL_PIXEL_TRANSFORM_2D_EXT
#define GL_PIXEL_TRANSFORM_2D_EXT 0x8330
#endif //GL_PIXEL_TRANSFORM_2D_EXT
#ifndef GL_PIXEL_MAG_FILTER_EXT
#define GL_PIXEL_MAG_FILTER_EXT 0x8331
#endif //GL_PIXEL_MAG_FILTER_EXT
#ifndef GL_PIXEL_MIN_FILTER_EXT
#define GL_PIXEL_MIN_FILTER_EXT 0x8332
#endif //GL_PIXEL_MIN_FILTER_EXT
#ifndef GL_PIXEL_CUBIC_WEIGHT_EXT
#define GL_PIXEL_CUBIC_WEIGHT_EXT 0x8333
#endif //GL_PIXEL_CUBIC_WEIGHT_EXT
#ifndef GL_CUBIC_EXT
#define GL_CUBIC_EXT 0x8334
#endif //GL_CUBIC_EXT
#ifndef GL_AVERAGE_EXT
#define GL_AVERAGE_EXT 0x8335
#endif //GL_AVERAGE_EXT
#ifndef GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
#define GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8336
#endif //GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
#ifndef GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
#define GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8337
#endif //GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
#ifndef GL_PIXEL_TRANSFORM_2D_MATRIX_EXT
#define GL_PIXEL_TRANSFORM_2D_MATRIX_EXT 0x8338
#endif //GL_PIXEL_TRANSFORM_2D_MATRIX_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetPixelTransformParameterfvEXT
#define GL_ALT_FUNDEF_GetPixelTransformParameterfvEXT
typedef void (*PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC_ALT)(GLenum,GLenum,GLfloat *);
static inline void glGetPixelTransformParameterfvEXT(GLenum target1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC_ALT fn=(PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC_ALT)glaltGetProcAddressExtension("glGetPixelTransformParameterfvEXT","GL_EXT_pixel_transform");
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetPixelTransformParameterivEXT
#define GL_ALT_FUNDEF_GetPixelTransformParameterivEXT
typedef void (*PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetPixelTransformParameterivEXT(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC_ALT fn=(PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC_ALT)glaltGetProcAddressExtension("glGetPixelTransformParameterivEXT","GL_EXT_pixel_transform");
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PixelTransformParameterfEXT
#define GL_ALT_FUNDEF_PixelTransformParameterfEXT
typedef void (*PFNGLPIXELTRANSFORMPARAMETERFEXTPROC_ALT)(GLenum,GLenum,GLfloat);
static inline void glPixelTransformParameterfEXT(GLenum target1,GLenum pname1,GLfloat param1)
{
	static PFNGLPIXELTRANSFORMPARAMETERFEXTPROC_ALT fn=(PFNGLPIXELTRANSFORMPARAMETERFEXTPROC_ALT)glaltGetProcAddressExtension("glPixelTransformParameterfEXT","GL_EXT_pixel_transform");
	 fn(target1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PixelTransformParameterfvEXT
#define GL_ALT_FUNDEF_PixelTransformParameterfvEXT
typedef void (*PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC_ALT)(GLenum,GLenum,const GLfloat *);
static inline void glPixelTransformParameterfvEXT(GLenum target1,GLenum pname1,const GLfloat * params1)
{
	static PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC_ALT fn=(PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC_ALT)glaltGetProcAddressExtension("glPixelTransformParameterfvEXT","GL_EXT_pixel_transform");
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PixelTransformParameteriEXT
#define GL_ALT_FUNDEF_PixelTransformParameteriEXT
typedef void (*PFNGLPIXELTRANSFORMPARAMETERIEXTPROC_ALT)(GLenum,GLenum,GLint);
static inline void glPixelTransformParameteriEXT(GLenum target1,GLenum pname1,GLint param1)
{
	static PFNGLPIXELTRANSFORMPARAMETERIEXTPROC_ALT fn=(PFNGLPIXELTRANSFORMPARAMETERIEXTPROC_ALT)glaltGetProcAddressExtension("glPixelTransformParameteriEXT","GL_EXT_pixel_transform");
	 fn(target1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PixelTransformParameterivEXT
#define GL_ALT_FUNDEF_PixelTransformParameterivEXT
typedef void (*PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC_ALT)(GLenum,GLenum,const GLint *);
static inline void glPixelTransformParameterivEXT(GLenum target1,GLenum pname1,const GLint * params1)
{
	static PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC_ALT fn=(PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC_ALT)glaltGetProcAddressExtension("glPixelTransformParameterivEXT","GL_EXT_pixel_transform");
	 fn(target1,pname1,params1);
}
#endif
CGUARDEND

#endif

#ifndef GL_EXT_pixel_transform_color_table
#define GL_EXT_pixel_transform_color_table
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_point_parameters
#define GL_EXT_point_parameters
#ifndef GL_POINT_SIZE_MIN_EXT
#define GL_POINT_SIZE_MIN_EXT 0x8126
#endif //GL_POINT_SIZE_MIN_EXT
#ifndef GL_POINT_SIZE_MAX_EXT
#define GL_POINT_SIZE_MAX_EXT 0x8127
#endif //GL_POINT_SIZE_MAX_EXT
#ifndef GL_POINT_FADE_THRESHOLD_SIZE_EXT
#define GL_POINT_FADE_THRESHOLD_SIZE_EXT 0x8128
#endif //GL_POINT_FADE_THRESHOLD_SIZE_EXT
#ifndef GL_DISTANCE_ATTENUATION_EXT
#define GL_DISTANCE_ATTENUATION_EXT 0x8129
#endif //GL_DISTANCE_ATTENUATION_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_PointParameterfEXT
#define GL_ALT_FUNDEF_PointParameterfEXT
typedef void (*PFNGLPOINTPARAMETERFEXTPROC_ALT)(GLenum,GLfloat);
static inline void glPointParameterfEXT(GLenum pname1,GLfloat param1)
{
	static PFNGLPOINTPARAMETERFEXTPROC_ALT fn=(PFNGLPOINTPARAMETERFEXTPROC_ALT)glaltGetProcAddressExtension("glPointParameterfEXT","GL_EXT_point_parameters");
	 fn(pname1,param1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_PointParameterfvEXT
#define GL_ALT_FUNDEF_PointParameterfvEXT
typedef void (*PFNGLPOINTPARAMETERFVEXTPROC_ALT)(GLenum,const GLfloat *);
static inline void glPointParameterfvEXT(GLenum pname1,const GLfloat * params1)
{
	static PFNGLPOINTPARAMETERFVEXTPROC_ALT fn=(PFNGLPOINTPARAMETERFVEXTPROC_ALT)glaltGetProcAddressExtension("glPointParameterfvEXT","GL_EXT_point_parameters");
	 fn(pname1,params1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_polygon_offset
#define GL_EXT_polygon_offset
#ifndef GL_POLYGON_OFFSET_EXT
#define GL_POLYGON_OFFSET_EXT 0x8037
#endif //GL_POLYGON_OFFSET_EXT
#ifndef GL_POLYGON_OFFSET_FACTOR_EXT
#define GL_POLYGON_OFFSET_FACTOR_EXT 0x8038
#endif //GL_POLYGON_OFFSET_FACTOR_EXT
#ifndef GL_POLYGON_OFFSET_BIAS_EXT
#define GL_POLYGON_OFFSET_BIAS_EXT 0x8039
#endif //GL_POLYGON_OFFSET_BIAS_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_PolygonOffsetEXT
#define GL_ALT_FUNDEF_PolygonOffsetEXT
typedef void (*PFNGLPOLYGONOFFSETEXTPROC_ALT)(GLfloat,GLfloat);
static inline void glPolygonOffsetEXT(GLfloat factor1,GLfloat bias1)
{
	static PFNGLPOLYGONOFFSETEXTPROC_ALT fn=(PFNGLPOLYGONOFFSETEXTPROC_ALT)glaltGetProcAddressExtension("glPolygonOffsetEXT","GL_EXT_polygon_offset");
	 fn(factor1,bias1);
}
#endif
CGUARDEND

#endif

#ifndef GL_EXT_polygon_offset_clamp
#define GL_EXT_polygon_offset_clamp
#ifndef GL_POLYGON_OFFSET_CLAMP_EXT
#define GL_POLYGON_OFFSET_CLAMP_EXT 0x8E1B
#endif //GL_POLYGON_OFFSET_CLAMP_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_PolygonOffsetClampEXT
#define GL_ALT_FUNDEF_PolygonOffsetClampEXT
typedef void (*PFNGLPOLYGONOFFSETCLAMPEXTPROC_ALT)(GLfloat,GLfloat,GLfloat);
static inline void glPolygonOffsetClampEXT(GLfloat factor1,GLfloat units1,GLfloat clamp1)
{
	static PFNGLPOLYGONOFFSETCLAMPEXTPROC_ALT fn=(PFNGLPOLYGONOFFSETCLAMPEXTPROC_ALT)glaltGetProcAddressExtension("glPolygonOffsetClampEXT","GL_EXT_polygon_offset_clamp");
	 fn(factor1,units1,clamp1);
}
#endif
CGUARDEND

#endif

#ifndef GL_EXT_provoking_vertex
#define GL_EXT_provoking_vertex
#ifndef GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT 0x8E4C
#endif //GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT
#ifndef GL_FIRST_VERTEX_CONVENTION_EXT
#define GL_FIRST_VERTEX_CONVENTION_EXT 0x8E4D
#endif //GL_FIRST_VERTEX_CONVENTION_EXT
#ifndef GL_LAST_VERTEX_CONVENTION_EXT
#define GL_LAST_VERTEX_CONVENTION_EXT 0x8E4E
#endif //GL_LAST_VERTEX_CONVENTION_EXT
#ifndef GL_PROVOKING_VERTEX_EXT
#define GL_PROVOKING_VERTEX_EXT 0x8E4F
#endif //GL_PROVOKING_VERTEX_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ProvokingVertexEXT
#define GL_ALT_FUNDEF_ProvokingVertexEXT
typedef void (*PFNGLPROVOKINGVERTEXEXTPROC_ALT)(GLenum);
static inline void glProvokingVertexEXT(GLenum mode1)
{
	static PFNGLPROVOKINGVERTEXEXTPROC_ALT fn=(PFNGLPROVOKINGVERTEXEXTPROC_ALT)glaltGetProcAddressExtension("glProvokingVertexEXT","GL_EXT_provoking_vertex");
	 fn(mode1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_rescale_normal
#define GL_EXT_rescale_normal
#ifndef GL_RESCALE_NORMAL_EXT
#define GL_RESCALE_NORMAL_EXT 0x803A
#endif //GL_RESCALE_NORMAL_EXT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_secondary_color
#define GL_EXT_secondary_color
#ifndef GL_COLOR_SUM_EXT
#define GL_COLOR_SUM_EXT 0x8458
#endif //GL_COLOR_SUM_EXT
#ifndef GL_CURRENT_SECONDARY_COLOR_EXT
#define GL_CURRENT_SECONDARY_COLOR_EXT 0x8459
#endif //GL_CURRENT_SECONDARY_COLOR_EXT
#ifndef GL_SECONDARY_COLOR_ARRAY_SIZE_EXT
#define GL_SECONDARY_COLOR_ARRAY_SIZE_EXT 0x845A
#endif //GL_SECONDARY_COLOR_ARRAY_SIZE_EXT
#ifndef GL_SECONDARY_COLOR_ARRAY_TYPE_EXT
#define GL_SECONDARY_COLOR_ARRAY_TYPE_EXT 0x845B
#endif //GL_SECONDARY_COLOR_ARRAY_TYPE_EXT
#ifndef GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT
#define GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT 0x845C
#endif //GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT
#ifndef GL_SECONDARY_COLOR_ARRAY_POINTER_EXT
#define GL_SECONDARY_COLOR_ARRAY_POINTER_EXT 0x845D
#endif //GL_SECONDARY_COLOR_ARRAY_POINTER_EXT
#ifndef GL_SECONDARY_COLOR_ARRAY_EXT
#define GL_SECONDARY_COLOR_ARRAY_EXT 0x845E
#endif //GL_SECONDARY_COLOR_ARRAY_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_SecondaryColor3bEXT
#define GL_ALT_FUNDEF_SecondaryColor3bEXT
typedef void (*PFNGLSECONDARYCOLOR3BEXTPROC_ALT)(GLbyte,GLbyte,GLbyte);
static inline void glSecondaryColor3bEXT(GLbyte red1,GLbyte green1,GLbyte blue1)
{
	static PFNGLSECONDARYCOLOR3BEXTPROC_ALT fn=(PFNGLSECONDARYCOLOR3BEXTPROC_ALT)glaltGetProcAddressExtension("glSecondaryColor3bEXT","GL_EXT_secondary_color");
	 fn(red1,green1,blue1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_SecondaryColor3bvEXT
#define GL_ALT_FUNDEF_SecondaryColor3bvEXT
typedef void (*PFNGLSECONDARYCOLOR3BVEXTPROC_ALT)(const GLbyte *);
static inline void glSecondaryColor3bvEXT(const GLbyte * v1)
{
	static PFNGLSECONDARYCOLOR3BVEXTPROC_ALT fn=(PFNGLSECONDARYCOLOR3BVEXTPROC_ALT)glaltGetProcAddressExtension("glSecondaryColor3bvEXT","GL_EXT_secondary_color");
	 fn(v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_SecondaryColor3dEXT
#define GL_ALT_FUNDEF_SecondaryColor3dEXT
typedef void (*PFNGLSECONDARYCOLOR3DEXTPROC_ALT)(GLdouble,GLdouble,GLdouble);
static inline void glSecondaryColor3dEXT(GLdouble red1,GLdouble green1,GLdouble blue1)
{
	static PFNGLSECONDARYCOLOR3DEXTPROC_ALT fn=(PFNGLSECONDARYCOLOR3DEXTPROC_ALT)glaltGetProcAddressExtension("glSecondaryColor3dEXT","GL_EXT_secondary_color");
	 fn(red1,green1,blue1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_SecondaryColor3dvEXT
#define GL_ALT_FUNDEF_SecondaryColor3dvEXT
typedef void (*PFNGLSECONDARYCOLOR3DVEXTPROC_ALT)(const GLdouble *);
static inline void glSecondaryColor3dvEXT(const GLdouble * v1)
{
	static PFNGLSECONDARYCOLOR3DVEXTPROC_ALT fn=(PFNGLSECONDARYCOLOR3DVEXTPROC_ALT)glaltGetProcAddressExtension("glSecondaryColor3dvEXT","GL_EXT_secondary_color");
	 fn(v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_SecondaryColor3fEXT
#define GL_ALT_FUNDEF_SecondaryColor3fEXT
typedef void (*PFNGLSECONDARYCOLOR3FEXTPROC_ALT)(GLfloat,GLfloat,GLfloat);
static inline void glSecondaryColor3fEXT(GLfloat red1,GLfloat green1,GLfloat blue1)
{
	static PFNGLSECONDARYCOLOR3FEXTPROC_ALT fn=(PFNGLSECONDARYCOLOR3FEXTPROC_ALT)glaltGetProcAddressExtension("glSecondaryColor3fEXT","GL_EXT_secondary_color");
	 fn(red1,green1,blue1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_SecondaryColor3fvEXT
#define GL_ALT_FUNDEF_SecondaryColor3fvEXT
typedef void (*PFNGLSECONDARYCOLOR3FVEXTPROC_ALT)(const GLfloat *);
static inline void glSecondaryColor3fvEXT(const GLfloat * v1)
{
	static PFNGLSECONDARYCOLOR3FVEXTPROC_ALT fn=(PFNGLSECONDARYCOLOR3FVEXTPROC_ALT)glaltGetProcAddressExtension("glSecondaryColor3fvEXT","GL_EXT_secondary_color");
	 fn(v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_SecondaryColor3iEXT
#define GL_ALT_FUNDEF_SecondaryColor3iEXT
typedef void (*PFNGLSECONDARYCOLOR3IEXTPROC_ALT)(GLint,GLint,GLint);
static inline void glSecondaryColor3iEXT(GLint red1,GLint green1,GLint blue1)
{
	static PFNGLSECONDARYCOLOR3IEXTPROC_ALT fn=(PFNGLSECONDARYCOLOR3IEXTPROC_ALT)glaltGetProcAddressExtension("glSecondaryColor3iEXT","GL_EXT_secondary_color");
	 fn(red1,green1,blue1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_SecondaryColor3ivEXT
#define GL_ALT_FUNDEF_SecondaryColor3ivEXT
typedef void (*PFNGLSECONDARYCOLOR3IVEXTPROC_ALT)(const GLint *);
static inline void glSecondaryColor3ivEXT(const GLint * v1)
{
	static PFNGLSECONDARYCOLOR3IVEXTPROC_ALT fn=(PFNGLSECONDARYCOLOR3IVEXTPROC_ALT)glaltGetProcAddressExtension("glSecondaryColor3ivEXT","GL_EXT_secondary_color");
	 fn(v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_SecondaryColor3sEXT
#define GL_ALT_FUNDEF_SecondaryColor3sEXT
typedef void (*PFNGLSECONDARYCOLOR3SEXTPROC_ALT)(GLshort,GLshort,GLshort);
static inline void glSecondaryColor3sEXT(GLshort red1,GLshort green1,GLshort blue1)
{
	static PFNGLSECONDARYCOLOR3SEXTPROC_ALT fn=(PFNGLSECONDARYCOLOR3SEXTPROC_ALT)glaltGetProcAddressExtension("glSecondaryColor3sEXT","GL_EXT_secondary_color");
	 fn(red1,green1,blue1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_SecondaryColor3svEXT
#define GL_ALT_FUNDEF_SecondaryColor3svEXT
typedef void (*PFNGLSECONDARYCOLOR3SVEXTPROC_ALT)(const GLshort *);
static inline void glSecondaryColor3svEXT(const GLshort * v1)
{
	static PFNGLSECONDARYCOLOR3SVEXTPROC_ALT fn=(PFNGLSECONDARYCOLOR3SVEXTPROC_ALT)glaltGetProcAddressExtension("glSecondaryColor3svEXT","GL_EXT_secondary_color");
	 fn(v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_SecondaryColor3ubEXT
#define GL_ALT_FUNDEF_SecondaryColor3ubEXT
typedef void (*PFNGLSECONDARYCOLOR3UBEXTPROC_ALT)(GLubyte,GLubyte,GLubyte);
static inline void glSecondaryColor3ubEXT(GLubyte red1,GLubyte green1,GLubyte blue1)
{
	static PFNGLSECONDARYCOLOR3UBEXTPROC_ALT fn=(PFNGLSECONDARYCOLOR3UBEXTPROC_ALT)glaltGetProcAddressExtension("glSecondaryColor3ubEXT","GL_EXT_secondary_color");
	 fn(red1,green1,blue1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_SecondaryColor3ubvEXT
#define GL_ALT_FUNDEF_SecondaryColor3ubvEXT
typedef void (*PFNGLSECONDARYCOLOR3UBVEXTPROC_ALT)(const GLubyte *);
static inline void glSecondaryColor3ubvEXT(const GLubyte * v1)
{
	static PFNGLSECONDARYCOLOR3UBVEXTPROC_ALT fn=(PFNGLSECONDARYCOLOR3UBVEXTPROC_ALT)glaltGetProcAddressExtension("glSecondaryColor3ubvEXT","GL_EXT_secondary_color");
	 fn(v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_SecondaryColor3uiEXT
#define GL_ALT_FUNDEF_SecondaryColor3uiEXT
typedef void (*PFNGLSECONDARYCOLOR3UIEXTPROC_ALT)(GLuint,GLuint,GLuint);
static inline void glSecondaryColor3uiEXT(GLuint red1,GLuint green1,GLuint blue1)
{
	static PFNGLSECONDARYCOLOR3UIEXTPROC_ALT fn=(PFNGLSECONDARYCOLOR3UIEXTPROC_ALT)glaltGetProcAddressExtension("glSecondaryColor3uiEXT","GL_EXT_secondary_color");
	 fn(red1,green1,blue1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_SecondaryColor3uivEXT
#define GL_ALT_FUNDEF_SecondaryColor3uivEXT
typedef void (*PFNGLSECONDARYCOLOR3UIVEXTPROC_ALT)(const GLuint *);
static inline void glSecondaryColor3uivEXT(const GLuint * v1)
{
	static PFNGLSECONDARYCOLOR3UIVEXTPROC_ALT fn=(PFNGLSECONDARYCOLOR3UIVEXTPROC_ALT)glaltGetProcAddressExtension("glSecondaryColor3uivEXT","GL_EXT_secondary_color");
	 fn(v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_SecondaryColor3usEXT
#define GL_ALT_FUNDEF_SecondaryColor3usEXT
typedef void (*PFNGLSECONDARYCOLOR3USEXTPROC_ALT)(GLushort,GLushort,GLushort);
static inline void glSecondaryColor3usEXT(GLushort red1,GLushort green1,GLushort blue1)
{
	static PFNGLSECONDARYCOLOR3USEXTPROC_ALT fn=(PFNGLSECONDARYCOLOR3USEXTPROC_ALT)glaltGetProcAddressExtension("glSecondaryColor3usEXT","GL_EXT_secondary_color");
	 fn(red1,green1,blue1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_SecondaryColor3usvEXT
#define GL_ALT_FUNDEF_SecondaryColor3usvEXT
typedef void (*PFNGLSECONDARYCOLOR3USVEXTPROC_ALT)(const GLushort *);
static inline void glSecondaryColor3usvEXT(const GLushort * v1)
{
	static PFNGLSECONDARYCOLOR3USVEXTPROC_ALT fn=(PFNGLSECONDARYCOLOR3USVEXTPROC_ALT)glaltGetProcAddressExtension("glSecondaryColor3usvEXT","GL_EXT_secondary_color");
	 fn(v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_SecondaryColorPointerEXT
#define GL_ALT_FUNDEF_SecondaryColorPointerEXT
typedef void (*PFNGLSECONDARYCOLORPOINTEREXTPROC_ALT)(GLint,GLenum,GLsizei,const void *);
static inline void glSecondaryColorPointerEXT(GLint size1,GLenum type1,GLsizei stride1,const void * pointer1)
{
	static PFNGLSECONDARYCOLORPOINTEREXTPROC_ALT fn=(PFNGLSECONDARYCOLORPOINTEREXTPROC_ALT)glaltGetProcAddressExtension("glSecondaryColorPointerEXT","GL_EXT_secondary_color");
	 fn(size1,type1,stride1,pointer1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_separate_shader_objects
#define GL_EXT_separate_shader_objects
#ifndef GL_VERTEX_SHADER_BIT_EXT
#define GL_VERTEX_SHADER_BIT_EXT 0x00000001
#endif //GL_VERTEX_SHADER_BIT_EXT
#ifndef GL_FRAGMENT_SHADER_BIT_EXT
#define GL_FRAGMENT_SHADER_BIT_EXT 0x00000002
#endif //GL_FRAGMENT_SHADER_BIT_EXT
#ifndef GL_PROGRAM_SEPARABLE_EXT
#define GL_PROGRAM_SEPARABLE_EXT 0x8258
#endif //GL_PROGRAM_SEPARABLE_EXT
#ifndef GL_PROGRAM_PIPELINE_BINDING_EXT
#define GL_PROGRAM_PIPELINE_BINDING_EXT 0x825A
#endif //GL_PROGRAM_PIPELINE_BINDING_EXT
#ifndef GL_ACTIVE_PROGRAM_EXT
#define GL_ACTIVE_PROGRAM_EXT 0x8B8D
#endif //GL_ACTIVE_PROGRAM_EXT
#ifndef GL_ALL_SHADER_BITS_EXT
#define GL_ALL_SHADER_BITS_EXT 0xFFFFFFFF
#endif //GL_ALL_SHADER_BITS_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ActiveProgramEXT
#define GL_ALT_FUNDEF_ActiveProgramEXT
typedef void (*PFNGLACTIVEPROGRAMEXTPROC_ALT)(GLuint);
static inline void glActiveProgramEXT(GLuint program1)
{
	static PFNGLACTIVEPROGRAMEXTPROC_ALT fn=(PFNGLACTIVEPROGRAMEXTPROC_ALT)glaltGetProcAddressExtension("glActiveProgramEXT","GL_EXT_separate_shader_objects");
	 fn(program1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ActiveShaderProgramEXT
#define GL_ALT_FUNDEF_ActiveShaderProgramEXT
typedef void (*PFNGLACTIVESHADERPROGRAMEXTPROC_ALT)(GLuint,GLuint);
static inline void glActiveShaderProgramEXT(GLuint pipeline1,GLuint program1)
{
	static PFNGLACTIVESHADERPROGRAMEXTPROC_ALT fn=(PFNGLACTIVESHADERPROGRAMEXTPROC_ALT)glaltGetProcAddressExtension("glActiveShaderProgramEXT","GL_EXT_separate_shader_objects");
	 fn(pipeline1,program1);
}
#endif

#ifndef	GL_ALT_FUNDEF_BindProgramPipelineEXT
#define GL_ALT_FUNDEF_BindProgramPipelineEXT
typedef void (*PFNGLBINDPROGRAMPIPELINEEXTPROC_ALT)(GLuint);
static inline void glBindProgramPipelineEXT(GLuint pipeline1)
{
	static PFNGLBINDPROGRAMPIPELINEEXTPROC_ALT fn=(PFNGLBINDPROGRAMPIPELINEEXTPROC_ALT)glaltGetProcAddressExtension("glBindProgramPipelineEXT","GL_EXT_separate_shader_objects");
	 fn(pipeline1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CreateShaderProgramEXT
#define GL_ALT_FUNDEF_CreateShaderProgramEXT
typedef GLuint (*PFNGLCREATESHADERPROGRAMEXTPROC_ALT)(GLenum,const GLchar *);
static inline GLuint glCreateShaderProgramEXT(GLenum type1,const GLchar * string1)
{
	static PFNGLCREATESHADERPROGRAMEXTPROC_ALT fn=(PFNGLCREATESHADERPROGRAMEXTPROC_ALT)glaltGetProcAddressExtension("glCreateShaderProgramEXT","GL_EXT_separate_shader_objects");
	return fn(type1,string1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CreateShaderProgramvEXT
#define GL_ALT_FUNDEF_CreateShaderProgramvEXT
typedef GLuint (*PFNGLCREATESHADERPROGRAMVEXTPROC_ALT)(GLenum,GLsizei,const GLchar **);
static inline GLuint glCreateShaderProgramvEXT(GLenum type1,GLsizei count1,const GLchar ** strings1)
{
	static PFNGLCREATESHADERPROGRAMVEXTPROC_ALT fn=(PFNGLCREATESHADERPROGRAMVEXTPROC_ALT)glaltGetProcAddressExtension("glCreateShaderProgramvEXT","GL_EXT_separate_shader_objects");
	return fn(type1,count1,strings1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DeleteProgramPipelinesEXT
#define GL_ALT_FUNDEF_DeleteProgramPipelinesEXT
typedef void (*PFNGLDELETEPROGRAMPIPELINESEXTPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteProgramPipelinesEXT(GLsizei n1,const GLuint * pipelines1)
{
	static PFNGLDELETEPROGRAMPIPELINESEXTPROC_ALT fn=(PFNGLDELETEPROGRAMPIPELINESEXTPROC_ALT)glaltGetProcAddressExtension("glDeleteProgramPipelinesEXT","GL_EXT_separate_shader_objects");
	 fn(n1,pipelines1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GenProgramPipelinesEXT
#define GL_ALT_FUNDEF_GenProgramPipelinesEXT
typedef void (*PFNGLGENPROGRAMPIPELINESEXTPROC_ALT)(GLsizei,GLuint *);
static inline void glGenProgramPipelinesEXT(GLsizei n1,GLuint * pipelines1)
{
	static PFNGLGENPROGRAMPIPELINESEXTPROC_ALT fn=(PFNGLGENPROGRAMPIPELINESEXTPROC_ALT)glaltGetProcAddressExtension("glGenProgramPipelinesEXT","GL_EXT_separate_shader_objects");
	 fn(n1,pipelines1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetProgramPipelineInfoLogEXT
#define GL_ALT_FUNDEF_GetProgramPipelineInfoLogEXT
typedef void (*PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC_ALT)(GLuint,GLsizei,GLsizei *,GLchar *);
static inline void glGetProgramPipelineInfoLogEXT(GLuint pipeline1,GLsizei bufSize1,GLsizei * length1,GLchar * infoLog1)
{
	static PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC_ALT fn=(PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC_ALT)glaltGetProcAddressExtension("glGetProgramPipelineInfoLogEXT","GL_EXT_separate_shader_objects");
	 fn(pipeline1,bufSize1,length1,infoLog1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetProgramPipelineivEXT
#define GL_ALT_FUNDEF_GetProgramPipelineivEXT
typedef void (*PFNGLGETPROGRAMPIPELINEIVEXTPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetProgramPipelineivEXT(GLuint pipeline1,GLenum pname1,GLint * params1)
{
	static PFNGLGETPROGRAMPIPELINEIVEXTPROC_ALT fn=(PFNGLGETPROGRAMPIPELINEIVEXTPROC_ALT)glaltGetProcAddressExtension("glGetProgramPipelineivEXT","GL_EXT_separate_shader_objects");
	 fn(pipeline1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IsProgramPipelineEXT
#define GL_ALT_FUNDEF_IsProgramPipelineEXT
typedef GLboolean (*PFNGLISPROGRAMPIPELINEEXTPROC_ALT)(GLuint);
static inline GLboolean glIsProgramPipelineEXT(GLuint pipeline1)
{
	static PFNGLISPROGRAMPIPELINEEXTPROC_ALT fn=(PFNGLISPROGRAMPIPELINEEXTPROC_ALT)glaltGetProcAddressExtension("glIsProgramPipelineEXT","GL_EXT_separate_shader_objects");
	return fn(pipeline1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramParameteriEXT
#define GL_ALT_FUNDEF_ProgramParameteriEXT
typedef void (*PFNGLPROGRAMPARAMETERIEXTPROC_ALT)(GLuint,GLenum,GLint);
static inline void glProgramParameteriEXT(GLuint program1,GLenum pname1,GLint value1)
{
	static PFNGLPROGRAMPARAMETERIEXTPROC_ALT fn=(PFNGLPROGRAMPARAMETERIEXTPROC_ALT)glaltGetProcAddressExtension("glProgramParameteriEXT","GL_EXT_separate_shader_objects");
	 fn(program1,pname1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform1fEXT
#define GL_ALT_FUNDEF_ProgramUniform1fEXT
typedef void (*PFNGLPROGRAMUNIFORM1FEXTPROC_ALT)(GLuint,GLint,GLfloat);
static inline void glProgramUniform1fEXT(GLuint program1,GLint location1,GLfloat v01)
{
	static PFNGLPROGRAMUNIFORM1FEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM1FEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform1fEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,v01);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform1fvEXT
#define GL_ALT_FUNDEF_ProgramUniform1fvEXT
typedef void (*PFNGLPROGRAMUNIFORM1FVEXTPROC_ALT)(GLuint,GLint,GLsizei,const GLfloat *);
static inline void glProgramUniform1fvEXT(GLuint program1,GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORM1FVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM1FVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform1fvEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform1iEXT
#define GL_ALT_FUNDEF_ProgramUniform1iEXT
typedef void (*PFNGLPROGRAMUNIFORM1IEXTPROC_ALT)(GLuint,GLint,GLint);
static inline void glProgramUniform1iEXT(GLuint program1,GLint location1,GLint v01)
{
	static PFNGLPROGRAMUNIFORM1IEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM1IEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform1iEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,v01);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform1ivEXT
#define GL_ALT_FUNDEF_ProgramUniform1ivEXT
typedef void (*PFNGLPROGRAMUNIFORM1IVEXTPROC_ALT)(GLuint,GLint,GLsizei,const GLint *);
static inline void glProgramUniform1ivEXT(GLuint program1,GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLPROGRAMUNIFORM1IVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM1IVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform1ivEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform1uiEXT
#define GL_ALT_FUNDEF_ProgramUniform1uiEXT
typedef void (*PFNGLPROGRAMUNIFORM1UIEXTPROC_ALT)(GLuint,GLint,GLuint);
static inline void glProgramUniform1uiEXT(GLuint program1,GLint location1,GLuint v01)
{
	static PFNGLPROGRAMUNIFORM1UIEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM1UIEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform1uiEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,v01);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform1uivEXT
#define GL_ALT_FUNDEF_ProgramUniform1uivEXT
typedef void (*PFNGLPROGRAMUNIFORM1UIVEXTPROC_ALT)(GLuint,GLint,GLsizei,const GLuint *);
static inline void glProgramUniform1uivEXT(GLuint program1,GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLPROGRAMUNIFORM1UIVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM1UIVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform1uivEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform2fEXT
#define GL_ALT_FUNDEF_ProgramUniform2fEXT
typedef void (*PFNGLPROGRAMUNIFORM2FEXTPROC_ALT)(GLuint,GLint,GLfloat,GLfloat);
static inline void glProgramUniform2fEXT(GLuint program1,GLint location1,GLfloat v01,GLfloat v11)
{
	static PFNGLPROGRAMUNIFORM2FEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM2FEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform2fEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,v01,v11);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform2fvEXT
#define GL_ALT_FUNDEF_ProgramUniform2fvEXT
typedef void (*PFNGLPROGRAMUNIFORM2FVEXTPROC_ALT)(GLuint,GLint,GLsizei,const GLfloat *);
static inline void glProgramUniform2fvEXT(GLuint program1,GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORM2FVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM2FVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform2fvEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform2iEXT
#define GL_ALT_FUNDEF_ProgramUniform2iEXT
typedef void (*PFNGLPROGRAMUNIFORM2IEXTPROC_ALT)(GLuint,GLint,GLint,GLint);
static inline void glProgramUniform2iEXT(GLuint program1,GLint location1,GLint v01,GLint v11)
{
	static PFNGLPROGRAMUNIFORM2IEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM2IEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform2iEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,v01,v11);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform2ivEXT
#define GL_ALT_FUNDEF_ProgramUniform2ivEXT
typedef void (*PFNGLPROGRAMUNIFORM2IVEXTPROC_ALT)(GLuint,GLint,GLsizei,const GLint *);
static inline void glProgramUniform2ivEXT(GLuint program1,GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLPROGRAMUNIFORM2IVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM2IVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform2ivEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform2uiEXT
#define GL_ALT_FUNDEF_ProgramUniform2uiEXT
typedef void (*PFNGLPROGRAMUNIFORM2UIEXTPROC_ALT)(GLuint,GLint,GLuint,GLuint);
static inline void glProgramUniform2uiEXT(GLuint program1,GLint location1,GLuint v01,GLuint v11)
{
	static PFNGLPROGRAMUNIFORM2UIEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM2UIEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform2uiEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,v01,v11);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform2uivEXT
#define GL_ALT_FUNDEF_ProgramUniform2uivEXT
typedef void (*PFNGLPROGRAMUNIFORM2UIVEXTPROC_ALT)(GLuint,GLint,GLsizei,const GLuint *);
static inline void glProgramUniform2uivEXT(GLuint program1,GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLPROGRAMUNIFORM2UIVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM2UIVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform2uivEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform3fEXT
#define GL_ALT_FUNDEF_ProgramUniform3fEXT
typedef void (*PFNGLPROGRAMUNIFORM3FEXTPROC_ALT)(GLuint,GLint,GLfloat,GLfloat,GLfloat);
static inline void glProgramUniform3fEXT(GLuint program1,GLint location1,GLfloat v01,GLfloat v11,GLfloat v21)
{
	static PFNGLPROGRAMUNIFORM3FEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM3FEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform3fEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,v01,v11,v21);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform3fvEXT
#define GL_ALT_FUNDEF_ProgramUniform3fvEXT
typedef void (*PFNGLPROGRAMUNIFORM3FVEXTPROC_ALT)(GLuint,GLint,GLsizei,const GLfloat *);
static inline void glProgramUniform3fvEXT(GLuint program1,GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORM3FVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM3FVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform3fvEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform3iEXT
#define GL_ALT_FUNDEF_ProgramUniform3iEXT
typedef void (*PFNGLPROGRAMUNIFORM3IEXTPROC_ALT)(GLuint,GLint,GLint,GLint,GLint);
static inline void glProgramUniform3iEXT(GLuint program1,GLint location1,GLint v01,GLint v11,GLint v21)
{
	static PFNGLPROGRAMUNIFORM3IEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM3IEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform3iEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,v01,v11,v21);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform3ivEXT
#define GL_ALT_FUNDEF_ProgramUniform3ivEXT
typedef void (*PFNGLPROGRAMUNIFORM3IVEXTPROC_ALT)(GLuint,GLint,GLsizei,const GLint *);
static inline void glProgramUniform3ivEXT(GLuint program1,GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLPROGRAMUNIFORM3IVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM3IVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform3ivEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform3uiEXT
#define GL_ALT_FUNDEF_ProgramUniform3uiEXT
typedef void (*PFNGLPROGRAMUNIFORM3UIEXTPROC_ALT)(GLuint,GLint,GLuint,GLuint,GLuint);
static inline void glProgramUniform3uiEXT(GLuint program1,GLint location1,GLuint v01,GLuint v11,GLuint v21)
{
	static PFNGLPROGRAMUNIFORM3UIEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM3UIEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform3uiEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,v01,v11,v21);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform3uivEXT
#define GL_ALT_FUNDEF_ProgramUniform3uivEXT
typedef void (*PFNGLPROGRAMUNIFORM3UIVEXTPROC_ALT)(GLuint,GLint,GLsizei,const GLuint *);
static inline void glProgramUniform3uivEXT(GLuint program1,GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLPROGRAMUNIFORM3UIVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM3UIVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform3uivEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform4fEXT
#define GL_ALT_FUNDEF_ProgramUniform4fEXT
typedef void (*PFNGLPROGRAMUNIFORM4FEXTPROC_ALT)(GLuint,GLint,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glProgramUniform4fEXT(GLuint program1,GLint location1,GLfloat v01,GLfloat v11,GLfloat v21,GLfloat v31)
{
	static PFNGLPROGRAMUNIFORM4FEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM4FEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform4fEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,v01,v11,v21,v31);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform4fvEXT
#define GL_ALT_FUNDEF_ProgramUniform4fvEXT
typedef void (*PFNGLPROGRAMUNIFORM4FVEXTPROC_ALT)(GLuint,GLint,GLsizei,const GLfloat *);
static inline void glProgramUniform4fvEXT(GLuint program1,GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORM4FVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM4FVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform4fvEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform4iEXT
#define GL_ALT_FUNDEF_ProgramUniform4iEXT
typedef void (*PFNGLPROGRAMUNIFORM4IEXTPROC_ALT)(GLuint,GLint,GLint,GLint,GLint,GLint);
static inline void glProgramUniform4iEXT(GLuint program1,GLint location1,GLint v01,GLint v11,GLint v21,GLint v31)
{
	static PFNGLPROGRAMUNIFORM4IEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM4IEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform4iEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,v01,v11,v21,v31);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform4ivEXT
#define GL_ALT_FUNDEF_ProgramUniform4ivEXT
typedef void (*PFNGLPROGRAMUNIFORM4IVEXTPROC_ALT)(GLuint,GLint,GLsizei,const GLint *);
static inline void glProgramUniform4ivEXT(GLuint program1,GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLPROGRAMUNIFORM4IVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM4IVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform4ivEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform4uiEXT
#define GL_ALT_FUNDEF_ProgramUniform4uiEXT
typedef void (*PFNGLPROGRAMUNIFORM4UIEXTPROC_ALT)(GLuint,GLint,GLuint,GLuint,GLuint,GLuint);
static inline void glProgramUniform4uiEXT(GLuint program1,GLint location1,GLuint v01,GLuint v11,GLuint v21,GLuint v31)
{
	static PFNGLPROGRAMUNIFORM4UIEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM4UIEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform4uiEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,v01,v11,v21,v31);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniform4uivEXT
#define GL_ALT_FUNDEF_ProgramUniform4uivEXT
typedef void (*PFNGLPROGRAMUNIFORM4UIVEXTPROC_ALT)(GLuint,GLint,GLsizei,const GLuint *);
static inline void glProgramUniform4uivEXT(GLuint program1,GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLPROGRAMUNIFORM4UIVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORM4UIVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniform4uivEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,count1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix2fvEXT
#define GL_ALT_FUNDEF_ProgramUniformMatrix2fvEXT
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix2fvEXT(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix2fvEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix2x3fvEXT
#define GL_ALT_FUNDEF_ProgramUniformMatrix2x3fvEXT
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix2x3fvEXT(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix2x3fvEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix2x4fvEXT
#define GL_ALT_FUNDEF_ProgramUniformMatrix2x4fvEXT
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix2x4fvEXT(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix2x4fvEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix3fvEXT
#define GL_ALT_FUNDEF_ProgramUniformMatrix3fvEXT
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix3fvEXT(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix3fvEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix3x2fvEXT
#define GL_ALT_FUNDEF_ProgramUniformMatrix3x2fvEXT
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix3x2fvEXT(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix3x2fvEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix3x4fvEXT
#define GL_ALT_FUNDEF_ProgramUniformMatrix3x4fvEXT
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix3x4fvEXT(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix3x4fvEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix4fvEXT
#define GL_ALT_FUNDEF_ProgramUniformMatrix4fvEXT
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix4fvEXT(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix4fvEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix4x2fvEXT
#define GL_ALT_FUNDEF_ProgramUniformMatrix4x2fvEXT
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix4x2fvEXT(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix4x2fvEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix4x3fvEXT
#define GL_ALT_FUNDEF_ProgramUniformMatrix4x3fvEXT
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix4x3fvEXT(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC_ALT)glaltGetProcAddressExtension("glProgramUniformMatrix4x3fvEXT","GL_EXT_separate_shader_objects");
	 fn(program1,location1,count1,transpose1,value1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_UseProgramStagesEXT
#define GL_ALT_FUNDEF_UseProgramStagesEXT
typedef void (*PFNGLUSEPROGRAMSTAGESEXTPROC_ALT)(GLuint,GLbitfield,GLuint);
static inline void glUseProgramStagesEXT(GLuint pipeline1,GLbitfield stages1,GLuint program1)
{
	static PFNGLUSEPROGRAMSTAGESEXTPROC_ALT fn=(PFNGLUSEPROGRAMSTAGESEXTPROC_ALT)glaltGetProcAddressExtension("glUseProgramStagesEXT","GL_EXT_separate_shader_objects");
	 fn(pipeline1,stages1,program1);
}
#endif

#ifndef	GL_ALT_FUNDEF_UseShaderProgramEXT
#define GL_ALT_FUNDEF_UseShaderProgramEXT
typedef void (*PFNGLUSESHADERPROGRAMEXTPROC_ALT)(GLenum,GLuint);
static inline void glUseShaderProgramEXT(GLenum type1,GLuint program1)
{
	static PFNGLUSESHADERPROGRAMEXTPROC_ALT fn=(PFNGLUSESHADERPROGRAMEXTPROC_ALT)glaltGetProcAddressExtension("glUseShaderProgramEXT","GL_EXT_separate_shader_objects");
	 fn(type1,program1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ValidateProgramPipelineEXT
#define GL_ALT_FUNDEF_ValidateProgramPipelineEXT
typedef void (*PFNGLVALIDATEPROGRAMPIPELINEEXTPROC_ALT)(GLuint);
static inline void glValidateProgramPipelineEXT(GLuint pipeline1)
{
	static PFNGLVALIDATEPROGRAMPIPELINEEXTPROC_ALT fn=(PFNGLVALIDATEPROGRAMPIPELINEEXTPROC_ALT)glaltGetProcAddressExtension("glValidateProgramPipelineEXT","GL_EXT_separate_shader_objects");
	 fn(pipeline1);
}
#endif
CGUARDEND

#endif

#ifndef GL_EXT_separate_specular_color
#define GL_EXT_separate_specular_color
#ifndef GL_LIGHT_MODEL_COLOR_CONTROL_EXT
#define GL_LIGHT_MODEL_COLOR_CONTROL_EXT 0x81F8
#endif //GL_LIGHT_MODEL_COLOR_CONTROL_EXT
#ifndef GL_SINGLE_COLOR_EXT
#define GL_SINGLE_COLOR_EXT 0x81F9
#endif //GL_SINGLE_COLOR_EXT
#ifndef GL_SEPARATE_SPECULAR_COLOR_EXT
#define GL_SEPARATE_SPECULAR_COLOR_EXT 0x81FA
#endif //GL_SEPARATE_SPECULAR_COLOR_EXT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_shader_image_load_formatted
#define GL_EXT_shader_image_load_formatted
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_shader_image_load_store
#define GL_EXT_shader_image_load_store
#ifndef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT 0x00000001
#endif //GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT
#ifndef GL_ELEMENT_ARRAY_BARRIER_BIT_EXT
#define GL_ELEMENT_ARRAY_BARRIER_BIT_EXT 0x00000002
#endif //GL_ELEMENT_ARRAY_BARRIER_BIT_EXT
#ifndef GL_UNIFORM_BARRIER_BIT_EXT
#define GL_UNIFORM_BARRIER_BIT_EXT 0x00000004
#endif //GL_UNIFORM_BARRIER_BIT_EXT
#ifndef GL_TEXTURE_FETCH_BARRIER_BIT_EXT
#define GL_TEXTURE_FETCH_BARRIER_BIT_EXT 0x00000008
#endif //GL_TEXTURE_FETCH_BARRIER_BIT_EXT
#ifndef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT 0x00000020
#endif //GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT
#ifndef GL_COMMAND_BARRIER_BIT_EXT
#define GL_COMMAND_BARRIER_BIT_EXT 0x00000040
#endif //GL_COMMAND_BARRIER_BIT_EXT
#ifndef GL_PIXEL_BUFFER_BARRIER_BIT_EXT
#define GL_PIXEL_BUFFER_BARRIER_BIT_EXT 0x00000080
#endif //GL_PIXEL_BUFFER_BARRIER_BIT_EXT
#ifndef GL_TEXTURE_UPDATE_BARRIER_BIT_EXT
#define GL_TEXTURE_UPDATE_BARRIER_BIT_EXT 0x00000100
#endif //GL_TEXTURE_UPDATE_BARRIER_BIT_EXT
#ifndef GL_BUFFER_UPDATE_BARRIER_BIT_EXT
#define GL_BUFFER_UPDATE_BARRIER_BIT_EXT 0x00000200
#endif //GL_BUFFER_UPDATE_BARRIER_BIT_EXT
#ifndef GL_FRAMEBUFFER_BARRIER_BIT_EXT
#define GL_FRAMEBUFFER_BARRIER_BIT_EXT 0x00000400
#endif //GL_FRAMEBUFFER_BARRIER_BIT_EXT
#ifndef GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT 0x00000800
#endif //GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT
#ifndef GL_ATOMIC_COUNTER_BARRIER_BIT_EXT
#define GL_ATOMIC_COUNTER_BARRIER_BIT_EXT 0x00001000
#endif //GL_ATOMIC_COUNTER_BARRIER_BIT_EXT
#ifndef GL_MAX_IMAGE_UNITS_EXT
#define GL_MAX_IMAGE_UNITS_EXT 0x8F38
#endif //GL_MAX_IMAGE_UNITS_EXT
#ifndef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT 0x8F39
#endif //GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT
#ifndef GL_IMAGE_BINDING_NAME_EXT
#define GL_IMAGE_BINDING_NAME_EXT 0x8F3A
#endif //GL_IMAGE_BINDING_NAME_EXT
#ifndef GL_IMAGE_BINDING_LEVEL_EXT
#define GL_IMAGE_BINDING_LEVEL_EXT 0x8F3B
#endif //GL_IMAGE_BINDING_LEVEL_EXT
#ifndef GL_IMAGE_BINDING_LAYERED_EXT
#define GL_IMAGE_BINDING_LAYERED_EXT 0x8F3C
#endif //GL_IMAGE_BINDING_LAYERED_EXT
#ifndef GL_IMAGE_BINDING_LAYER_EXT
#define GL_IMAGE_BINDING_LAYER_EXT 0x8F3D
#endif //GL_IMAGE_BINDING_LAYER_EXT
#ifndef GL_IMAGE_BINDING_ACCESS_EXT
#define GL_IMAGE_BINDING_ACCESS_EXT 0x8F3E
#endif //GL_IMAGE_BINDING_ACCESS_EXT
#ifndef GL_IMAGE_1D_EXT
#define GL_IMAGE_1D_EXT 0x904C
#endif //GL_IMAGE_1D_EXT
#ifndef GL_IMAGE_2D_EXT
#define GL_IMAGE_2D_EXT 0x904D
#endif //GL_IMAGE_2D_EXT
#ifndef GL_IMAGE_3D_EXT
#define GL_IMAGE_3D_EXT 0x904E
#endif //GL_IMAGE_3D_EXT
#ifndef GL_IMAGE_2D_RECT_EXT
#define GL_IMAGE_2D_RECT_EXT 0x904F
#endif //GL_IMAGE_2D_RECT_EXT
#ifndef GL_IMAGE_CUBE_EXT
#define GL_IMAGE_CUBE_EXT 0x9050
#endif //GL_IMAGE_CUBE_EXT
#ifndef GL_IMAGE_BUFFER_EXT
#define GL_IMAGE_BUFFER_EXT 0x9051
#endif //GL_IMAGE_BUFFER_EXT
#ifndef GL_IMAGE_1D_ARRAY_EXT
#define GL_IMAGE_1D_ARRAY_EXT 0x9052
#endif //GL_IMAGE_1D_ARRAY_EXT
#ifndef GL_IMAGE_2D_ARRAY_EXT
#define GL_IMAGE_2D_ARRAY_EXT 0x9053
#endif //GL_IMAGE_2D_ARRAY_EXT
#ifndef GL_IMAGE_CUBE_MAP_ARRAY_EXT
#define GL_IMAGE_CUBE_MAP_ARRAY_EXT 0x9054
#endif //GL_IMAGE_CUBE_MAP_ARRAY_EXT
#ifndef GL_IMAGE_2D_MULTISAMPLE_EXT
#define GL_IMAGE_2D_MULTISAMPLE_EXT 0x9055
#endif //GL_IMAGE_2D_MULTISAMPLE_EXT
#ifndef GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9056
#endif //GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
#ifndef GL_INT_IMAGE_1D_EXT
#define GL_INT_IMAGE_1D_EXT 0x9057
#endif //GL_INT_IMAGE_1D_EXT
#ifndef GL_INT_IMAGE_2D_EXT
#define GL_INT_IMAGE_2D_EXT 0x9058
#endif //GL_INT_IMAGE_2D_EXT
#ifndef GL_INT_IMAGE_3D_EXT
#define GL_INT_IMAGE_3D_EXT 0x9059
#endif //GL_INT_IMAGE_3D_EXT
#ifndef GL_INT_IMAGE_2D_RECT_EXT
#define GL_INT_IMAGE_2D_RECT_EXT 0x905A
#endif //GL_INT_IMAGE_2D_RECT_EXT
#ifndef GL_INT_IMAGE_CUBE_EXT
#define GL_INT_IMAGE_CUBE_EXT 0x905B
#endif //GL_INT_IMAGE_CUBE_EXT
#ifndef GL_INT_IMAGE_BUFFER_EXT
#define GL_INT_IMAGE_BUFFER_EXT 0x905C
#endif //GL_INT_IMAGE_BUFFER_EXT
#ifndef GL_INT_IMAGE_1D_ARRAY_EXT
#define GL_INT_IMAGE_1D_ARRAY_EXT 0x905D
#endif //GL_INT_IMAGE_1D_ARRAY_EXT
#ifndef GL_INT_IMAGE_2D_ARRAY_EXT
#define GL_INT_IMAGE_2D_ARRAY_EXT 0x905E
#endif //GL_INT_IMAGE_2D_ARRAY_EXT
#ifndef GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT
#define GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0x905F
#endif //GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE_EXT
#define GL_INT_IMAGE_2D_MULTISAMPLE_EXT 0x9060
#endif //GL_INT_IMAGE_2D_MULTISAMPLE_EXT
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9061
#endif //GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
#ifndef GL_UNSIGNED_INT_IMAGE_1D_EXT
#define GL_UNSIGNED_INT_IMAGE_1D_EXT 0x9062
#endif //GL_UNSIGNED_INT_IMAGE_1D_EXT
#ifndef GL_UNSIGNED_INT_IMAGE_2D_EXT
#define GL_UNSIGNED_INT_IMAGE_2D_EXT 0x9063
#endif //GL_UNSIGNED_INT_IMAGE_2D_EXT
#ifndef GL_UNSIGNED_INT_IMAGE_3D_EXT
#define GL_UNSIGNED_INT_IMAGE_3D_EXT 0x9064
#endif //GL_UNSIGNED_INT_IMAGE_3D_EXT
#ifndef GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT
#define GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT 0x9065
#endif //GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE_EXT
#define GL_UNSIGNED_INT_IMAGE_CUBE_EXT 0x9066
#endif //GL_UNSIGNED_INT_IMAGE_CUBE_EXT
#ifndef GL_UNSIGNED_INT_IMAGE_BUFFER_EXT
#define GL_UNSIGNED_INT_IMAGE_BUFFER_EXT 0x9067
#endif //GL_UNSIGNED_INT_IMAGE_BUFFER_EXT
#ifndef GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT 0x9068
#endif //GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT
#ifndef GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT 0x9069
#endif //GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0x906A
#endif //GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT 0x906B
#endif //GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x906C
#endif //GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
#ifndef GL_MAX_IMAGE_SAMPLES_EXT
#define GL_MAX_IMAGE_SAMPLES_EXT 0x906D
#endif //GL_MAX_IMAGE_SAMPLES_EXT
#ifndef GL_IMAGE_BINDING_FORMAT_EXT
#define GL_IMAGE_BINDING_FORMAT_EXT 0x906E
#endif //GL_IMAGE_BINDING_FORMAT_EXT
#ifndef GL_ALL_BARRIER_BITS_EXT
#define GL_ALL_BARRIER_BITS_EXT 0xFFFFFFFF
#endif //GL_ALL_BARRIER_BITS_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BindImageTextureEXT
#define GL_ALT_FUNDEF_BindImageTextureEXT
typedef void (*PFNGLBINDIMAGETEXTUREEXTPROC_ALT)(GLuint,GLuint,GLint,GLboolean,GLint,GLenum,GLint);
static inline void glBindImageTextureEXT(GLuint index1,GLuint texture1,GLint level1,GLboolean layered1,GLint layer1,GLenum access1,GLint format1)
{
	static PFNGLBINDIMAGETEXTUREEXTPROC_ALT fn=(PFNGLBINDIMAGETEXTUREEXTPROC_ALT)glaltGetProcAddressExtension("glBindImageTextureEXT","GL_EXT_shader_image_load_store");
	 fn(index1,texture1,level1,layered1,layer1,access1,format1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MemoryBarrierEXT
#define GL_ALT_FUNDEF_MemoryBarrierEXT
typedef void (*PFNGLMEMORYBARRIEREXTPROC_ALT)(GLbitfield);
static inline void glMemoryBarrierEXT(GLbitfield barriers1)
{
	static PFNGLMEMORYBARRIEREXTPROC_ALT fn=(PFNGLMEMORYBARRIEREXTPROC_ALT)glaltGetProcAddressExtension("glMemoryBarrierEXT","GL_EXT_shader_image_load_store");
	 fn(barriers1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_shader_integer_mix
#define GL_EXT_shader_integer_mix
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_shadow_funcs
#define GL_EXT_shadow_funcs
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_shared_texture_palette
#define GL_EXT_shared_texture_palette
#ifndef GL_SHARED_TEXTURE_PALETTE_EXT
#define GL_SHARED_TEXTURE_PALETTE_EXT 0x81FB
#endif //GL_SHARED_TEXTURE_PALETTE_EXT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_stencil_clear_tag
#define GL_EXT_stencil_clear_tag
#ifndef GL_STENCIL_TAG_BITS_EXT
#define GL_STENCIL_TAG_BITS_EXT 0x88F2
#endif //GL_STENCIL_TAG_BITS_EXT
#ifndef GL_STENCIL_CLEAR_TAG_VALUE_EXT
#define GL_STENCIL_CLEAR_TAG_VALUE_EXT 0x88F3
#endif //GL_STENCIL_CLEAR_TAG_VALUE_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_StencilClearTagEXT
#define GL_ALT_FUNDEF_StencilClearTagEXT
typedef void (*PFNGLSTENCILCLEARTAGEXTPROC_ALT)(GLsizei,GLuint);
static inline void glStencilClearTagEXT(GLsizei stencilTagBits1,GLuint stencilClearTag1)
{
	static PFNGLSTENCILCLEARTAGEXTPROC_ALT fn=(PFNGLSTENCILCLEARTAGEXTPROC_ALT)glaltGetProcAddressExtension("glStencilClearTagEXT","GL_EXT_stencil_clear_tag");
	 fn(stencilTagBits1,stencilClearTag1);
}
#endif
CGUARDEND

#endif

#ifndef GL_EXT_stencil_two_side
#define GL_EXT_stencil_two_side
#ifndef GL_STENCIL_TEST_TWO_SIDE_EXT
#define GL_STENCIL_TEST_TWO_SIDE_EXT 0x8910
#endif //GL_STENCIL_TEST_TWO_SIDE_EXT
#ifndef GL_ACTIVE_STENCIL_FACE_EXT
#define GL_ACTIVE_STENCIL_FACE_EXT 0x8911
#endif //GL_ACTIVE_STENCIL_FACE_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ActiveStencilFaceEXT
#define GL_ALT_FUNDEF_ActiveStencilFaceEXT
typedef void (*PFNGLACTIVESTENCILFACEEXTPROC_ALT)(GLenum);
static inline void glActiveStencilFaceEXT(GLenum face1)
{
	static PFNGLACTIVESTENCILFACEEXTPROC_ALT fn=(PFNGLACTIVESTENCILFACEEXTPROC_ALT)glaltGetProcAddressExtension("glActiveStencilFaceEXT","GL_EXT_stencil_two_side");
	 fn(face1);
}
#endif
CGUARDEND

#endif

#ifndef GL_EXT_stencil_wrap
#define GL_EXT_stencil_wrap
#ifndef GL_INCR_WRAP_EXT
#define GL_INCR_WRAP_EXT 0x8507
#endif //GL_INCR_WRAP_EXT
#ifndef GL_DECR_WRAP_EXT
#define GL_DECR_WRAP_EXT 0x8508
#endif //GL_DECR_WRAP_EXT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_subtexture
#define GL_EXT_subtexture
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_TexSubImage1DEXT
#define GL_ALT_FUNDEF_TexSubImage1DEXT
typedef void (*PFNGLTEXSUBIMAGE1DEXTPROC_ALT)(GLenum,GLint,GLint,GLsizei,GLenum,GLenum,const void *);
static inline void glTexSubImage1DEXT(GLenum target1,GLint level1,GLint xoffset1,GLsizei width1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXSUBIMAGE1DEXTPROC_ALT fn=(PFNGLTEXSUBIMAGE1DEXTPROC_ALT)glaltGetProcAddressExtension("glTexSubImage1DEXT","GL_EXT_subtexture");
	 fn(target1,level1,xoffset1,width1,format1,type1,pixels1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_TexSubImage2DEXT
#define GL_ALT_FUNDEF_TexSubImage2DEXT
typedef void (*PFNGLTEXSUBIMAGE2DEXTPROC_ALT)(GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,const void *);
static inline void glTexSubImage2DEXT(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLsizei width1,GLsizei height1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXSUBIMAGE2DEXTPROC_ALT fn=(PFNGLTEXSUBIMAGE2DEXTPROC_ALT)glaltGetProcAddressExtension("glTexSubImage2DEXT","GL_EXT_subtexture");
	 fn(target1,level1,xoffset1,yoffset1,width1,height1,format1,type1,pixels1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_texture
#define GL_EXT_texture
#ifndef GL_ALPHA4_EXT
#define GL_ALPHA4_EXT 0x803B
#endif //GL_ALPHA4_EXT
#ifndef GL_ALPHA8_EXT
#define GL_ALPHA8_EXT 0x803C
#endif //GL_ALPHA8_EXT
#ifndef GL_ALPHA12_EXT
#define GL_ALPHA12_EXT 0x803D
#endif //GL_ALPHA12_EXT
#ifndef GL_ALPHA16_EXT
#define GL_ALPHA16_EXT 0x803E
#endif //GL_ALPHA16_EXT
#ifndef GL_LUMINANCE4_EXT
#define GL_LUMINANCE4_EXT 0x803F
#endif //GL_LUMINANCE4_EXT
#ifndef GL_LUMINANCE8_EXT
#define GL_LUMINANCE8_EXT 0x8040
#endif //GL_LUMINANCE8_EXT
#ifndef GL_LUMINANCE12_EXT
#define GL_LUMINANCE12_EXT 0x8041
#endif //GL_LUMINANCE12_EXT
#ifndef GL_LUMINANCE16_EXT
#define GL_LUMINANCE16_EXT 0x8042
#endif //GL_LUMINANCE16_EXT
#ifndef GL_LUMINANCE4_ALPHA4_EXT
#define GL_LUMINANCE4_ALPHA4_EXT 0x8043
#endif //GL_LUMINANCE4_ALPHA4_EXT
#ifndef GL_LUMINANCE6_ALPHA2_EXT
#define GL_LUMINANCE6_ALPHA2_EXT 0x8044
#endif //GL_LUMINANCE6_ALPHA2_EXT
#ifndef GL_LUMINANCE8_ALPHA8_EXT
#define GL_LUMINANCE8_ALPHA8_EXT 0x8045
#endif //GL_LUMINANCE8_ALPHA8_EXT
#ifndef GL_LUMINANCE12_ALPHA4_EXT
#define GL_LUMINANCE12_ALPHA4_EXT 0x8046
#endif //GL_LUMINANCE12_ALPHA4_EXT
#ifndef GL_LUMINANCE12_ALPHA12_EXT
#define GL_LUMINANCE12_ALPHA12_EXT 0x8047
#endif //GL_LUMINANCE12_ALPHA12_EXT
#ifndef GL_LUMINANCE16_ALPHA16_EXT
#define GL_LUMINANCE16_ALPHA16_EXT 0x8048
#endif //GL_LUMINANCE16_ALPHA16_EXT
#ifndef GL_INTENSITY_EXT
#define GL_INTENSITY_EXT 0x8049
#endif //GL_INTENSITY_EXT
#ifndef GL_INTENSITY4_EXT
#define GL_INTENSITY4_EXT 0x804A
#endif //GL_INTENSITY4_EXT
#ifndef GL_INTENSITY8_EXT
#define GL_INTENSITY8_EXT 0x804B
#endif //GL_INTENSITY8_EXT
#ifndef GL_INTENSITY12_EXT
#define GL_INTENSITY12_EXT 0x804C
#endif //GL_INTENSITY12_EXT
#ifndef GL_INTENSITY16_EXT
#define GL_INTENSITY16_EXT 0x804D
#endif //GL_INTENSITY16_EXT
#ifndef GL_RGB2_EXT
#define GL_RGB2_EXT 0x804E
#endif //GL_RGB2_EXT
#ifndef GL_RGB4_EXT
#define GL_RGB4_EXT 0x804F
#endif //GL_RGB4_EXT
#ifndef GL_RGB5_EXT
#define GL_RGB5_EXT 0x8050
#endif //GL_RGB5_EXT
#ifndef GL_RGB8_EXT
#define GL_RGB8_EXT 0x8051
#endif //GL_RGB8_EXT
#ifndef GL_RGB10_EXT
#define GL_RGB10_EXT 0x8052
#endif //GL_RGB10_EXT
#ifndef GL_RGB12_EXT
#define GL_RGB12_EXT 0x8053
#endif //GL_RGB12_EXT
#ifndef GL_RGB16_EXT
#define GL_RGB16_EXT 0x8054
#endif //GL_RGB16_EXT
#ifndef GL_RGBA2_EXT
#define GL_RGBA2_EXT 0x8055
#endif //GL_RGBA2_EXT
#ifndef GL_RGBA4_EXT
#define GL_RGBA4_EXT 0x8056
#endif //GL_RGBA4_EXT
#ifndef GL_RGB5_A1_EXT
#define GL_RGB5_A1_EXT 0x8057
#endif //GL_RGB5_A1_EXT
#ifndef GL_RGBA8_EXT
#define GL_RGBA8_EXT 0x8058
#endif //GL_RGBA8_EXT
#ifndef GL_RGB10_A2_EXT
#define GL_RGB10_A2_EXT 0x8059
#endif //GL_RGB10_A2_EXT
#ifndef GL_RGBA12_EXT
#define GL_RGBA12_EXT 0x805A
#endif //GL_RGBA12_EXT
#ifndef GL_RGBA16_EXT
#define GL_RGBA16_EXT 0x805B
#endif //GL_RGBA16_EXT
#ifndef GL_TEXTURE_RED_SIZE_EXT
#define GL_TEXTURE_RED_SIZE_EXT 0x805C
#endif //GL_TEXTURE_RED_SIZE_EXT
#ifndef GL_TEXTURE_GREEN_SIZE_EXT
#define GL_TEXTURE_GREEN_SIZE_EXT 0x805D
#endif //GL_TEXTURE_GREEN_SIZE_EXT
#ifndef GL_TEXTURE_BLUE_SIZE_EXT
#define GL_TEXTURE_BLUE_SIZE_EXT 0x805E
#endif //GL_TEXTURE_BLUE_SIZE_EXT
#ifndef GL_TEXTURE_ALPHA_SIZE_EXT
#define GL_TEXTURE_ALPHA_SIZE_EXT 0x805F
#endif //GL_TEXTURE_ALPHA_SIZE_EXT
#ifndef GL_TEXTURE_LUMINANCE_SIZE_EXT
#define GL_TEXTURE_LUMINANCE_SIZE_EXT 0x8060
#endif //GL_TEXTURE_LUMINANCE_SIZE_EXT
#ifndef GL_TEXTURE_INTENSITY_SIZE_EXT
#define GL_TEXTURE_INTENSITY_SIZE_EXT 0x8061
#endif //GL_TEXTURE_INTENSITY_SIZE_EXT
#ifndef GL_REPLACE_EXT
#define GL_REPLACE_EXT 0x8062
#endif //GL_REPLACE_EXT
#ifndef GL_PROXY_TEXTURE_1D_EXT
#define GL_PROXY_TEXTURE_1D_EXT 0x8063
#endif //GL_PROXY_TEXTURE_1D_EXT
#ifndef GL_PROXY_TEXTURE_2D_EXT
#define GL_PROXY_TEXTURE_2D_EXT 0x8064
#endif //GL_PROXY_TEXTURE_2D_EXT
#ifndef GL_TEXTURE_TOO_LARGE_EXT
#define GL_TEXTURE_TOO_LARGE_EXT 0x8065
#endif //GL_TEXTURE_TOO_LARGE_EXT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_texture3D
#define GL_EXT_texture3D
#ifndef GL_PACK_SKIP_IMAGES_EXT
#define GL_PACK_SKIP_IMAGES_EXT 0x806B
#endif //GL_PACK_SKIP_IMAGES_EXT
#ifndef GL_PACK_IMAGE_HEIGHT_EXT
#define GL_PACK_IMAGE_HEIGHT_EXT 0x806C
#endif //GL_PACK_IMAGE_HEIGHT_EXT
#ifndef GL_UNPACK_SKIP_IMAGES_EXT
#define GL_UNPACK_SKIP_IMAGES_EXT 0x806D
#endif //GL_UNPACK_SKIP_IMAGES_EXT
#ifndef GL_UNPACK_IMAGE_HEIGHT_EXT
#define GL_UNPACK_IMAGE_HEIGHT_EXT 0x806E
#endif //GL_UNPACK_IMAGE_HEIGHT_EXT
#ifndef GL_TEXTURE_3D_EXT
#define GL_TEXTURE_3D_EXT 0x806F
#endif //GL_TEXTURE_3D_EXT
#ifndef GL_PROXY_TEXTURE_3D_EXT
#define GL_PROXY_TEXTURE_3D_EXT 0x8070
#endif //GL_PROXY_TEXTURE_3D_EXT
#ifndef GL_TEXTURE_DEPTH_EXT
#define GL_TEXTURE_DEPTH_EXT 0x8071
#endif //GL_TEXTURE_DEPTH_EXT
#ifndef GL_TEXTURE_WRAP_R_EXT
#define GL_TEXTURE_WRAP_R_EXT 0x8072
#endif //GL_TEXTURE_WRAP_R_EXT
#ifndef GL_MAX_3D_TEXTURE_SIZE_EXT
#define GL_MAX_3D_TEXTURE_SIZE_EXT 0x8073
#endif //GL_MAX_3D_TEXTURE_SIZE_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_TexImage3DEXT
#define GL_ALT_FUNDEF_TexImage3DEXT
typedef void (*PFNGLTEXIMAGE3DEXTPROC_ALT)(GLenum,GLint,GLenum,GLsizei,GLsizei,GLsizei,GLint,GLenum,GLenum,const void *);
static inline void glTexImage3DEXT(GLenum target1,GLint level1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLint border1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXIMAGE3DEXTPROC_ALT fn=(PFNGLTEXIMAGE3DEXTPROC_ALT)glaltGetProcAddressExtension("glTexImage3DEXT","GL_EXT_texture3D");
	 fn(target1,level1,internalformat1,width1,height1,depth1,border1,format1,type1,pixels1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_TexSubImage3DEXT
#define GL_ALT_FUNDEF_TexSubImage3DEXT
typedef void (*PFNGLTEXSUBIMAGE3DEXTPROC_ALT)(GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,const void *);
static inline void glTexSubImage3DEXT(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLsizei width1,GLsizei height1,GLsizei depth1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXSUBIMAGE3DEXTPROC_ALT fn=(PFNGLTEXSUBIMAGE3DEXTPROC_ALT)glaltGetProcAddressExtension("glTexSubImage3DEXT","GL_EXT_texture3D");
	 fn(target1,level1,xoffset1,yoffset1,zoffset1,width1,height1,depth1,format1,type1,pixels1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_texture_array
#define GL_EXT_texture_array
#ifndef GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT
#define GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT 0x884E
#endif //GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT
#ifndef GL_MAX_ARRAY_TEXTURE_LAYERS_EXT
#define GL_MAX_ARRAY_TEXTURE_LAYERS_EXT 0x88FF
#endif //GL_MAX_ARRAY_TEXTURE_LAYERS_EXT
#ifndef GL_TEXTURE_1D_ARRAY_EXT
#define GL_TEXTURE_1D_ARRAY_EXT 0x8C18
#endif //GL_TEXTURE_1D_ARRAY_EXT
#ifndef GL_PROXY_TEXTURE_1D_ARRAY_EXT
#define GL_PROXY_TEXTURE_1D_ARRAY_EXT 0x8C19
#endif //GL_PROXY_TEXTURE_1D_ARRAY_EXT
#ifndef GL_TEXTURE_2D_ARRAY_EXT
#define GL_TEXTURE_2D_ARRAY_EXT 0x8C1A
#endif //GL_TEXTURE_2D_ARRAY_EXT
#ifndef GL_PROXY_TEXTURE_2D_ARRAY_EXT
#define GL_PROXY_TEXTURE_2D_ARRAY_EXT 0x8C1B
#endif //GL_PROXY_TEXTURE_2D_ARRAY_EXT
#ifndef GL_TEXTURE_BINDING_1D_ARRAY_EXT
#define GL_TEXTURE_BINDING_1D_ARRAY_EXT 0x8C1C
#endif //GL_TEXTURE_BINDING_1D_ARRAY_EXT
#ifndef GL_TEXTURE_BINDING_2D_ARRAY_EXT
#define GL_TEXTURE_BINDING_2D_ARRAY_EXT 0x8C1D
#endif //GL_TEXTURE_BINDING_2D_ARRAY_EXT
#ifndef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT 0x8CD4
#endif //GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_FramebufferTextureLayerEXT
#define GL_ALT_FUNDEF_FramebufferTextureLayerEXT
typedef void (*PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC_ALT)(GLenum,GLenum,GLuint,GLint,GLint);
static inline void glFramebufferTextureLayerEXT(GLenum target1,GLenum attachment1,GLuint texture1,GLint level1,GLint layer1)
{
	static PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC_ALT fn=(PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC_ALT)glaltGetProcAddressExtension("glFramebufferTextureLayerEXT","GL_EXT_texture_array");
	 fn(target1,attachment1,texture1,level1,layer1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_texture_buffer_object
#define GL_EXT_texture_buffer_object
#ifndef GL_TEXTURE_BUFFER_EXT
#define GL_TEXTURE_BUFFER_EXT 0x8C2A
#endif //GL_TEXTURE_BUFFER_EXT
#ifndef GL_MAX_TEXTURE_BUFFER_SIZE_EXT
#define GL_MAX_TEXTURE_BUFFER_SIZE_EXT 0x8C2B
#endif //GL_MAX_TEXTURE_BUFFER_SIZE_EXT
#ifndef GL_TEXTURE_BINDING_BUFFER_EXT
#define GL_TEXTURE_BINDING_BUFFER_EXT 0x8C2C
#endif //GL_TEXTURE_BINDING_BUFFER_EXT
#ifndef GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT 0x8C2D
#endif //GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT
#ifndef GL_TEXTURE_BUFFER_FORMAT_EXT
#define GL_TEXTURE_BUFFER_FORMAT_EXT 0x8C2E
#endif //GL_TEXTURE_BUFFER_FORMAT_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_TexBufferEXT
#define GL_ALT_FUNDEF_TexBufferEXT
typedef void (*PFNGLTEXBUFFEREXTPROC_ALT)(GLenum,GLenum,GLuint);
static inline void glTexBufferEXT(GLenum target1,GLenum internalformat1,GLuint buffer1)
{
	static PFNGLTEXBUFFEREXTPROC_ALT fn=(PFNGLTEXBUFFEREXTPROC_ALT)glaltGetProcAddressExtension("glTexBufferEXT","GL_EXT_texture_buffer_object");
	 fn(target1,internalformat1,buffer1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_texture_compression_latc
#define GL_EXT_texture_compression_latc
#ifndef GL_COMPRESSED_LUMINANCE_LATC1_EXT
#define GL_COMPRESSED_LUMINANCE_LATC1_EXT 0x8C70
#endif //GL_COMPRESSED_LUMINANCE_LATC1_EXT
#ifndef GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT
#define GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT 0x8C71
#endif //GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT
#ifndef GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT
#define GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT 0x8C72
#endif //GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT
#ifndef GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT
#define GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT 0x8C73
#endif //GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_texture_compression_rgtc
#define GL_EXT_texture_compression_rgtc
#ifndef GL_COMPRESSED_RED_RGTC1_EXT
#define GL_COMPRESSED_RED_RGTC1_EXT 0x8DBB
#endif //GL_COMPRESSED_RED_RGTC1_EXT
#ifndef GL_COMPRESSED_SIGNED_RED_RGTC1_EXT
#define GL_COMPRESSED_SIGNED_RED_RGTC1_EXT 0x8DBC
#endif //GL_COMPRESSED_SIGNED_RED_RGTC1_EXT
#ifndef GL_COMPRESSED_RED_GREEN_RGTC2_EXT
#define GL_COMPRESSED_RED_GREEN_RGTC2_EXT 0x8DBD
#endif //GL_COMPRESSED_RED_GREEN_RGTC2_EXT
#ifndef GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT
#define GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT 0x8DBE
#endif //GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_texture_compression_s3tc
#define GL_EXT_texture_compression_s3tc
#ifndef GL_COMPRESSED_RGB_S3TC_DXT1_EXT
#define GL_COMPRESSED_RGB_S3TC_DXT1_EXT 0x83F0
#endif //GL_COMPRESSED_RGB_S3TC_DXT1_EXT
#ifndef GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
#define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT 0x83F1
#endif //GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
#ifndef GL_COMPRESSED_RGBA_S3TC_DXT3_EXT
#define GL_COMPRESSED_RGBA_S3TC_DXT3_EXT 0x83F2
#endif //GL_COMPRESSED_RGBA_S3TC_DXT3_EXT
#ifndef GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
#define GL_COMPRESSED_RGBA_S3TC_DXT5_EXT 0x83F3
#endif //GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_texture_cube_map
#define GL_EXT_texture_cube_map
#ifndef GL_NORMAL_MAP_EXT
#define GL_NORMAL_MAP_EXT 0x8511
#endif //GL_NORMAL_MAP_EXT
#ifndef GL_REFLECTION_MAP_EXT
#define GL_REFLECTION_MAP_EXT 0x8512
#endif //GL_REFLECTION_MAP_EXT
#ifndef GL_TEXTURE_CUBE_MAP_EXT
#define GL_TEXTURE_CUBE_MAP_EXT 0x8513
#endif //GL_TEXTURE_CUBE_MAP_EXT
#ifndef GL_TEXTURE_BINDING_CUBE_MAP_EXT
#define GL_TEXTURE_BINDING_CUBE_MAP_EXT 0x8514
#endif //GL_TEXTURE_BINDING_CUBE_MAP_EXT
#ifndef GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT 0x8515
#endif //GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT
#ifndef GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT 0x8516
#endif //GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT
#ifndef GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT 0x8517
#endif //GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT
#ifndef GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT 0x8518
#endif //GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT
#ifndef GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT 0x8519
#endif //GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT
#ifndef GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT 0x851A
#endif //GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT
#ifndef GL_PROXY_TEXTURE_CUBE_MAP_EXT
#define GL_PROXY_TEXTURE_CUBE_MAP_EXT 0x851B
#endif //GL_PROXY_TEXTURE_CUBE_MAP_EXT
#ifndef GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT 0x851C
#endif //GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_texture_env_add
#define GL_EXT_texture_env_add
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_texture_env_combine
#define GL_EXT_texture_env_combine
#ifndef GL_COMBINE_EXT
#define GL_COMBINE_EXT 0x8570
#endif //GL_COMBINE_EXT
#ifndef GL_COMBINE_RGB_EXT
#define GL_COMBINE_RGB_EXT 0x8571
#endif //GL_COMBINE_RGB_EXT
#ifndef GL_COMBINE_ALPHA_EXT
#define GL_COMBINE_ALPHA_EXT 0x8572
#endif //GL_COMBINE_ALPHA_EXT
#ifndef GL_RGB_SCALE_EXT
#define GL_RGB_SCALE_EXT 0x8573
#endif //GL_RGB_SCALE_EXT
#ifndef GL_ADD_SIGNED_EXT
#define GL_ADD_SIGNED_EXT 0x8574
#endif //GL_ADD_SIGNED_EXT
#ifndef GL_INTERPOLATE_EXT
#define GL_INTERPOLATE_EXT 0x8575
#endif //GL_INTERPOLATE_EXT
#ifndef GL_CONSTANT_EXT
#define GL_CONSTANT_EXT 0x8576
#endif //GL_CONSTANT_EXT
#ifndef GL_PRIMARY_COLOR_EXT
#define GL_PRIMARY_COLOR_EXT 0x8577
#endif //GL_PRIMARY_COLOR_EXT
#ifndef GL_PREVIOUS_EXT
#define GL_PREVIOUS_EXT 0x8578
#endif //GL_PREVIOUS_EXT
#ifndef GL_SOURCE0_RGB_EXT
#define GL_SOURCE0_RGB_EXT 0x8580
#endif //GL_SOURCE0_RGB_EXT
#ifndef GL_SOURCE1_RGB_EXT
#define GL_SOURCE1_RGB_EXT 0x8581
#endif //GL_SOURCE1_RGB_EXT
#ifndef GL_SOURCE2_RGB_EXT
#define GL_SOURCE2_RGB_EXT 0x8582
#endif //GL_SOURCE2_RGB_EXT
#ifndef GL_SOURCE0_ALPHA_EXT
#define GL_SOURCE0_ALPHA_EXT 0x8588
#endif //GL_SOURCE0_ALPHA_EXT
#ifndef GL_SOURCE1_ALPHA_EXT
#define GL_SOURCE1_ALPHA_EXT 0x8589
#endif //GL_SOURCE1_ALPHA_EXT
#ifndef GL_SOURCE2_ALPHA_EXT
#define GL_SOURCE2_ALPHA_EXT 0x858A
#endif //GL_SOURCE2_ALPHA_EXT
#ifndef GL_OPERAND0_RGB_EXT
#define GL_OPERAND0_RGB_EXT 0x8590
#endif //GL_OPERAND0_RGB_EXT
#ifndef GL_OPERAND1_RGB_EXT
#define GL_OPERAND1_RGB_EXT 0x8591
#endif //GL_OPERAND1_RGB_EXT
#ifndef GL_OPERAND2_RGB_EXT
#define GL_OPERAND2_RGB_EXT 0x8592
#endif //GL_OPERAND2_RGB_EXT
#ifndef GL_OPERAND0_ALPHA_EXT
#define GL_OPERAND0_ALPHA_EXT 0x8598
#endif //GL_OPERAND0_ALPHA_EXT
#ifndef GL_OPERAND1_ALPHA_EXT
#define GL_OPERAND1_ALPHA_EXT 0x8599
#endif //GL_OPERAND1_ALPHA_EXT
#ifndef GL_OPERAND2_ALPHA_EXT
#define GL_OPERAND2_ALPHA_EXT 0x859A
#endif //GL_OPERAND2_ALPHA_EXT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_texture_env_dot3
#define GL_EXT_texture_env_dot3
#ifndef GL_DOT3_RGB_EXT
#define GL_DOT3_RGB_EXT 0x8740
#endif //GL_DOT3_RGB_EXT
#ifndef GL_DOT3_RGBA_EXT
#define GL_DOT3_RGBA_EXT 0x8741
#endif //GL_DOT3_RGBA_EXT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_texture_filter_anisotropic
#define GL_EXT_texture_filter_anisotropic
#ifndef GL_TEXTURE_MAX_ANISOTROPY_EXT
#define GL_TEXTURE_MAX_ANISOTROPY_EXT 0x84FE
#endif //GL_TEXTURE_MAX_ANISOTROPY_EXT
#ifndef GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
#define GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT 0x84FF
#endif //GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_texture_integer
#define GL_EXT_texture_integer
#ifndef GL_RGBA32UI_EXT
#define GL_RGBA32UI_EXT 0x8D70
#endif //GL_RGBA32UI_EXT
#ifndef GL_RGB32UI_EXT
#define GL_RGB32UI_EXT 0x8D71
#endif //GL_RGB32UI_EXT
#ifndef GL_ALPHA32UI_EXT
#define GL_ALPHA32UI_EXT 0x8D72
#endif //GL_ALPHA32UI_EXT
#ifndef GL_INTENSITY32UI_EXT
#define GL_INTENSITY32UI_EXT 0x8D73
#endif //GL_INTENSITY32UI_EXT
#ifndef GL_LUMINANCE32UI_EXT
#define GL_LUMINANCE32UI_EXT 0x8D74
#endif //GL_LUMINANCE32UI_EXT
#ifndef GL_LUMINANCE_ALPHA32UI_EXT
#define GL_LUMINANCE_ALPHA32UI_EXT 0x8D75
#endif //GL_LUMINANCE_ALPHA32UI_EXT
#ifndef GL_RGBA16UI_EXT
#define GL_RGBA16UI_EXT 0x8D76
#endif //GL_RGBA16UI_EXT
#ifndef GL_RGB16UI_EXT
#define GL_RGB16UI_EXT 0x8D77
#endif //GL_RGB16UI_EXT
#ifndef GL_ALPHA16UI_EXT
#define GL_ALPHA16UI_EXT 0x8D78
#endif //GL_ALPHA16UI_EXT
#ifndef GL_INTENSITY16UI_EXT
#define GL_INTENSITY16UI_EXT 0x8D79
#endif //GL_INTENSITY16UI_EXT
#ifndef GL_LUMINANCE16UI_EXT
#define GL_LUMINANCE16UI_EXT 0x8D7A
#endif //GL_LUMINANCE16UI_EXT
#ifndef GL_LUMINANCE_ALPHA16UI_EXT
#define GL_LUMINANCE_ALPHA16UI_EXT 0x8D7B
#endif //GL_LUMINANCE_ALPHA16UI_EXT
#ifndef GL_RGBA8UI_EXT
#define GL_RGBA8UI_EXT 0x8D7C
#endif //GL_RGBA8UI_EXT
#ifndef GL_RGB8UI_EXT
#define GL_RGB8UI_EXT 0x8D7D
#endif //GL_RGB8UI_EXT
#ifndef GL_ALPHA8UI_EXT
#define GL_ALPHA8UI_EXT 0x8D7E
#endif //GL_ALPHA8UI_EXT
#ifndef GL_INTENSITY8UI_EXT
#define GL_INTENSITY8UI_EXT 0x8D7F
#endif //GL_INTENSITY8UI_EXT
#ifndef GL_LUMINANCE8UI_EXT
#define GL_LUMINANCE8UI_EXT 0x8D80
#endif //GL_LUMINANCE8UI_EXT
#ifndef GL_LUMINANCE_ALPHA8UI_EXT
#define GL_LUMINANCE_ALPHA8UI_EXT 0x8D81
#endif //GL_LUMINANCE_ALPHA8UI_EXT
#ifndef GL_RGBA32I_EXT
#define GL_RGBA32I_EXT 0x8D82
#endif //GL_RGBA32I_EXT
#ifndef GL_RGB32I_EXT
#define GL_RGB32I_EXT 0x8D83
#endif //GL_RGB32I_EXT
#ifndef GL_ALPHA32I_EXT
#define GL_ALPHA32I_EXT 0x8D84
#endif //GL_ALPHA32I_EXT
#ifndef GL_INTENSITY32I_EXT
#define GL_INTENSITY32I_EXT 0x8D85
#endif //GL_INTENSITY32I_EXT
#ifndef GL_LUMINANCE32I_EXT
#define GL_LUMINANCE32I_EXT 0x8D86
#endif //GL_LUMINANCE32I_EXT
#ifndef GL_LUMINANCE_ALPHA32I_EXT
#define GL_LUMINANCE_ALPHA32I_EXT 0x8D87
#endif //GL_LUMINANCE_ALPHA32I_EXT
#ifndef GL_RGBA16I_EXT
#define GL_RGBA16I_EXT 0x8D88
#endif //GL_RGBA16I_EXT
#ifndef GL_RGB16I_EXT
#define GL_RGB16I_EXT 0x8D89
#endif //GL_RGB16I_EXT
#ifndef GL_ALPHA16I_EXT
#define GL_ALPHA16I_EXT 0x8D8A
#endif //GL_ALPHA16I_EXT
#ifndef GL_INTENSITY16I_EXT
#define GL_INTENSITY16I_EXT 0x8D8B
#endif //GL_INTENSITY16I_EXT
#ifndef GL_LUMINANCE16I_EXT
#define GL_LUMINANCE16I_EXT 0x8D8C
#endif //GL_LUMINANCE16I_EXT
#ifndef GL_LUMINANCE_ALPHA16I_EXT
#define GL_LUMINANCE_ALPHA16I_EXT 0x8D8D
#endif //GL_LUMINANCE_ALPHA16I_EXT
#ifndef GL_RGBA8I_EXT
#define GL_RGBA8I_EXT 0x8D8E
#endif //GL_RGBA8I_EXT
#ifndef GL_RGB8I_EXT
#define GL_RGB8I_EXT 0x8D8F
#endif //GL_RGB8I_EXT
#ifndef GL_ALPHA8I_EXT
#define GL_ALPHA8I_EXT 0x8D90
#endif //GL_ALPHA8I_EXT
#ifndef GL_INTENSITY8I_EXT
#define GL_INTENSITY8I_EXT 0x8D91
#endif //GL_INTENSITY8I_EXT
#ifndef GL_LUMINANCE8I_EXT
#define GL_LUMINANCE8I_EXT 0x8D92
#endif //GL_LUMINANCE8I_EXT
#ifndef GL_LUMINANCE_ALPHA8I_EXT
#define GL_LUMINANCE_ALPHA8I_EXT 0x8D93
#endif //GL_LUMINANCE_ALPHA8I_EXT
#ifndef GL_RED_INTEGER_EXT
#define GL_RED_INTEGER_EXT 0x8D94
#endif //GL_RED_INTEGER_EXT
#ifndef GL_GREEN_INTEGER_EXT
#define GL_GREEN_INTEGER_EXT 0x8D95
#endif //GL_GREEN_INTEGER_EXT
#ifndef GL_BLUE_INTEGER_EXT
#define GL_BLUE_INTEGER_EXT 0x8D96
#endif //GL_BLUE_INTEGER_EXT
#ifndef GL_ALPHA_INTEGER_EXT
#define GL_ALPHA_INTEGER_EXT 0x8D97
#endif //GL_ALPHA_INTEGER_EXT
#ifndef GL_RGB_INTEGER_EXT
#define GL_RGB_INTEGER_EXT 0x8D98
#endif //GL_RGB_INTEGER_EXT
#ifndef GL_RGBA_INTEGER_EXT
#define GL_RGBA_INTEGER_EXT 0x8D99
#endif //GL_RGBA_INTEGER_EXT
#ifndef GL_BGR_INTEGER_EXT
#define GL_BGR_INTEGER_EXT 0x8D9A
#endif //GL_BGR_INTEGER_EXT
#ifndef GL_BGRA_INTEGER_EXT
#define GL_BGRA_INTEGER_EXT 0x8D9B
#endif //GL_BGRA_INTEGER_EXT
#ifndef GL_LUMINANCE_INTEGER_EXT
#define GL_LUMINANCE_INTEGER_EXT 0x8D9C
#endif //GL_LUMINANCE_INTEGER_EXT
#ifndef GL_LUMINANCE_ALPHA_INTEGER_EXT
#define GL_LUMINANCE_ALPHA_INTEGER_EXT 0x8D9D
#endif //GL_LUMINANCE_ALPHA_INTEGER_EXT
#ifndef GL_RGBA_INTEGER_MODE_EXT
#define GL_RGBA_INTEGER_MODE_EXT 0x8D9E
#endif //GL_RGBA_INTEGER_MODE_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ClearColorIiEXT
#define GL_ALT_FUNDEF_ClearColorIiEXT
typedef void (*PFNGLCLEARCOLORIIEXTPROC_ALT)(GLint,GLint,GLint,GLint);
static inline void glClearColorIiEXT(GLint red1,GLint green1,GLint blue1,GLint alpha1)
{
	static PFNGLCLEARCOLORIIEXTPROC_ALT fn=(PFNGLCLEARCOLORIIEXTPROC_ALT)glaltGetProcAddressExtension("glClearColorIiEXT","GL_EXT_texture_integer");
	 fn(red1,green1,blue1,alpha1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ClearColorIuiEXT
#define GL_ALT_FUNDEF_ClearColorIuiEXT
typedef void (*PFNGLCLEARCOLORIUIEXTPROC_ALT)(GLuint,GLuint,GLuint,GLuint);
static inline void glClearColorIuiEXT(GLuint red1,GLuint green1,GLuint blue1,GLuint alpha1)
{
	static PFNGLCLEARCOLORIUIEXTPROC_ALT fn=(PFNGLCLEARCOLORIUIEXTPROC_ALT)glaltGetProcAddressExtension("glClearColorIuiEXT","GL_EXT_texture_integer");
	 fn(red1,green1,blue1,alpha1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetTexParameterIivEXT
#define GL_ALT_FUNDEF_GetTexParameterIivEXT
typedef void (*PFNGLGETTEXPARAMETERIIVEXTPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetTexParameterIivEXT(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETTEXPARAMETERIIVEXTPROC_ALT fn=(PFNGLGETTEXPARAMETERIIVEXTPROC_ALT)glaltGetProcAddressExtension("glGetTexParameterIivEXT","GL_EXT_texture_integer");
	 fn(target1,pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetTexParameterIuivEXT
#define GL_ALT_FUNDEF_GetTexParameterIuivEXT
typedef void (*PFNGLGETTEXPARAMETERIUIVEXTPROC_ALT)(GLenum,GLenum,GLuint *);
static inline void glGetTexParameterIuivEXT(GLenum target1,GLenum pname1,GLuint * params1)
{
	static PFNGLGETTEXPARAMETERIUIVEXTPROC_ALT fn=(PFNGLGETTEXPARAMETERIUIVEXTPROC_ALT)glaltGetProcAddressExtension("glGetTexParameterIuivEXT","GL_EXT_texture_integer");
	 fn(target1,pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_TexParameterIivEXT
#define GL_ALT_FUNDEF_TexParameterIivEXT
typedef void (*PFNGLTEXPARAMETERIIVEXTPROC_ALT)(GLenum,GLenum,const GLint *);
static inline void glTexParameterIivEXT(GLenum target1,GLenum pname1,const GLint * params1)
{
	static PFNGLTEXPARAMETERIIVEXTPROC_ALT fn=(PFNGLTEXPARAMETERIIVEXTPROC_ALT)glaltGetProcAddressExtension("glTexParameterIivEXT","GL_EXT_texture_integer");
	 fn(target1,pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_TexParameterIuivEXT
#define GL_ALT_FUNDEF_TexParameterIuivEXT
typedef void (*PFNGLTEXPARAMETERIUIVEXTPROC_ALT)(GLenum,GLenum,const GLuint *);
static inline void glTexParameterIuivEXT(GLenum target1,GLenum pname1,const GLuint * params1)
{
	static PFNGLTEXPARAMETERIUIVEXTPROC_ALT fn=(PFNGLTEXPARAMETERIUIVEXTPROC_ALT)glaltGetProcAddressExtension("glTexParameterIuivEXT","GL_EXT_texture_integer");
	 fn(target1,pname1,params1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_texture_lod_bias
#define GL_EXT_texture_lod_bias
#ifndef GL_MAX_TEXTURE_LOD_BIAS_EXT
#define GL_MAX_TEXTURE_LOD_BIAS_EXT 0x84FD
#endif //GL_MAX_TEXTURE_LOD_BIAS_EXT
#ifndef GL_TEXTURE_FILTER_CONTROL_EXT
#define GL_TEXTURE_FILTER_CONTROL_EXT 0x8500
#endif //GL_TEXTURE_FILTER_CONTROL_EXT
#ifndef GL_TEXTURE_LOD_BIAS_EXT
#define GL_TEXTURE_LOD_BIAS_EXT 0x8501
#endif //GL_TEXTURE_LOD_BIAS_EXT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_texture_mirror_clamp
#define GL_EXT_texture_mirror_clamp
#ifndef GL_MIRROR_CLAMP_EXT
#define GL_MIRROR_CLAMP_EXT 0x8742
#endif //GL_MIRROR_CLAMP_EXT
#ifndef GL_MIRROR_CLAMP_TO_EDGE_EXT
#define GL_MIRROR_CLAMP_TO_EDGE_EXT 0x8743
#endif //GL_MIRROR_CLAMP_TO_EDGE_EXT
#ifndef GL_MIRROR_CLAMP_TO_BORDER_EXT
#define GL_MIRROR_CLAMP_TO_BORDER_EXT 0x8912
#endif //GL_MIRROR_CLAMP_TO_BORDER_EXT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_texture_object
#define GL_EXT_texture_object
#ifndef GL_TEXTURE_PRIORITY_EXT
#define GL_TEXTURE_PRIORITY_EXT 0x8066
#endif //GL_TEXTURE_PRIORITY_EXT
#ifndef GL_TEXTURE_RESIDENT_EXT
#define GL_TEXTURE_RESIDENT_EXT 0x8067
#endif //GL_TEXTURE_RESIDENT_EXT
#ifndef GL_TEXTURE_1D_BINDING_EXT
#define GL_TEXTURE_1D_BINDING_EXT 0x8068
#endif //GL_TEXTURE_1D_BINDING_EXT
#ifndef GL_TEXTURE_2D_BINDING_EXT
#define GL_TEXTURE_2D_BINDING_EXT 0x8069
#endif //GL_TEXTURE_2D_BINDING_EXT
#ifndef GL_TEXTURE_3D_BINDING_EXT
#define GL_TEXTURE_3D_BINDING_EXT 0x806A
#endif //GL_TEXTURE_3D_BINDING_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_AreTexturesResidentEXT
#define GL_ALT_FUNDEF_AreTexturesResidentEXT
typedef GLboolean (*PFNGLARETEXTURESRESIDENTEXTPROC_ALT)(GLsizei,const GLuint *,GLboolean *);
static inline GLboolean glAreTexturesResidentEXT(GLsizei n1,const GLuint * textures1,GLboolean * residences1)
{
	static PFNGLARETEXTURESRESIDENTEXTPROC_ALT fn=(PFNGLARETEXTURESRESIDENTEXTPROC_ALT)glaltGetProcAddressExtension("glAreTexturesResidentEXT","GL_EXT_texture_object");
	return fn(n1,textures1,residences1);
}
#endif

#ifndef	GL_ALT_FUNDEF_BindTextureEXT
#define GL_ALT_FUNDEF_BindTextureEXT
typedef void (*PFNGLBINDTEXTUREEXTPROC_ALT)(GLenum,GLuint);
static inline void glBindTextureEXT(GLenum target1,GLuint texture1)
{
	static PFNGLBINDTEXTUREEXTPROC_ALT fn=(PFNGLBINDTEXTUREEXTPROC_ALT)glaltGetProcAddressExtension("glBindTextureEXT","GL_EXT_texture_object");
	 fn(target1,texture1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_DeleteTexturesEXT
#define GL_ALT_FUNDEF_DeleteTexturesEXT
typedef void (*PFNGLDELETETEXTURESEXTPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteTexturesEXT(GLsizei n1,const GLuint * textures1)
{
	static PFNGLDELETETEXTURESEXTPROC_ALT fn=(PFNGLDELETETEXTURESEXTPROC_ALT)glaltGetProcAddressExtension("glDeleteTexturesEXT","GL_EXT_texture_object");
	 fn(n1,textures1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GenTexturesEXT
#define GL_ALT_FUNDEF_GenTexturesEXT
typedef void (*PFNGLGENTEXTURESEXTPROC_ALT)(GLsizei,GLuint *);
static inline void glGenTexturesEXT(GLsizei n1,GLuint * textures1)
{
	static PFNGLGENTEXTURESEXTPROC_ALT fn=(PFNGLGENTEXTURESEXTPROC_ALT)glaltGetProcAddressExtension("glGenTexturesEXT","GL_EXT_texture_object");
	 fn(n1,textures1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IsTextureEXT
#define GL_ALT_FUNDEF_IsTextureEXT
typedef GLboolean (*PFNGLISTEXTUREEXTPROC_ALT)(GLuint);
static inline GLboolean glIsTextureEXT(GLuint texture1)
{
	static PFNGLISTEXTUREEXTPROC_ALT fn=(PFNGLISTEXTUREEXTPROC_ALT)glaltGetProcAddressExtension("glIsTextureEXT","GL_EXT_texture_object");
	return fn(texture1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PrioritizeTexturesEXT
#define GL_ALT_FUNDEF_PrioritizeTexturesEXT
typedef void (*PFNGLPRIORITIZETEXTURESEXTPROC_ALT)(GLsizei,const GLuint *,const GLclampf *);
static inline void glPrioritizeTexturesEXT(GLsizei n1,const GLuint * textures1,const GLclampf * priorities1)
{
	static PFNGLPRIORITIZETEXTURESEXTPROC_ALT fn=(PFNGLPRIORITIZETEXTURESEXTPROC_ALT)glaltGetProcAddressExtension("glPrioritizeTexturesEXT","GL_EXT_texture_object");
	 fn(n1,textures1,priorities1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_texture_perturb_normal
#define GL_EXT_texture_perturb_normal
#ifndef GL_PERTURB_EXT
#define GL_PERTURB_EXT 0x85AE
#endif //GL_PERTURB_EXT
#ifndef GL_TEXTURE_NORMAL_EXT
#define GL_TEXTURE_NORMAL_EXT 0x85AF
#endif //GL_TEXTURE_NORMAL_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_TextureNormalEXT
#define GL_ALT_FUNDEF_TextureNormalEXT
typedef void (*PFNGLTEXTURENORMALEXTPROC_ALT)(GLenum);
static inline void glTextureNormalEXT(GLenum mode1)
{
	static PFNGLTEXTURENORMALEXTPROC_ALT fn=(PFNGLTEXTURENORMALEXTPROC_ALT)glaltGetProcAddressExtension("glTextureNormalEXT","GL_EXT_texture_perturb_normal");
	 fn(mode1);
}
#endif
CGUARDEND

#endif

#ifndef GL_EXT_texture_sRGB
#define GL_EXT_texture_sRGB
#ifndef GL_SRGB_EXT
#define GL_SRGB_EXT 0x8C40
#endif //GL_SRGB_EXT
#ifndef GL_SRGB8_EXT
#define GL_SRGB8_EXT 0x8C41
#endif //GL_SRGB8_EXT
#ifndef GL_SRGB_ALPHA_EXT
#define GL_SRGB_ALPHA_EXT 0x8C42
#endif //GL_SRGB_ALPHA_EXT
#ifndef GL_SRGB8_ALPHA8_EXT
#define GL_SRGB8_ALPHA8_EXT 0x8C43
#endif //GL_SRGB8_ALPHA8_EXT
#ifndef GL_SLUMINANCE_ALPHA_EXT
#define GL_SLUMINANCE_ALPHA_EXT 0x8C44
#endif //GL_SLUMINANCE_ALPHA_EXT
#ifndef GL_SLUMINANCE8_ALPHA8_EXT
#define GL_SLUMINANCE8_ALPHA8_EXT 0x8C45
#endif //GL_SLUMINANCE8_ALPHA8_EXT
#ifndef GL_SLUMINANCE_EXT
#define GL_SLUMINANCE_EXT 0x8C46
#endif //GL_SLUMINANCE_EXT
#ifndef GL_SLUMINANCE8_EXT
#define GL_SLUMINANCE8_EXT 0x8C47
#endif //GL_SLUMINANCE8_EXT
#ifndef GL_COMPRESSED_SRGB_EXT
#define GL_COMPRESSED_SRGB_EXT 0x8C48
#endif //GL_COMPRESSED_SRGB_EXT
#ifndef GL_COMPRESSED_SRGB_ALPHA_EXT
#define GL_COMPRESSED_SRGB_ALPHA_EXT 0x8C49
#endif //GL_COMPRESSED_SRGB_ALPHA_EXT
#ifndef GL_COMPRESSED_SLUMINANCE_EXT
#define GL_COMPRESSED_SLUMINANCE_EXT 0x8C4A
#endif //GL_COMPRESSED_SLUMINANCE_EXT
#ifndef GL_COMPRESSED_SLUMINANCE_ALPHA_EXT
#define GL_COMPRESSED_SLUMINANCE_ALPHA_EXT 0x8C4B
#endif //GL_COMPRESSED_SLUMINANCE_ALPHA_EXT
#ifndef GL_COMPRESSED_SRGB_S3TC_DXT1_EXT
#define GL_COMPRESSED_SRGB_S3TC_DXT1_EXT 0x8C4C
#endif //GL_COMPRESSED_SRGB_S3TC_DXT1_EXT
#ifndef GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT 0x8C4D
#endif //GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT
#ifndef GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT 0x8C4E
#endif //GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT
#ifndef GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT 0x8C4F
#endif //GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_texture_sRGB_decode
#define GL_EXT_texture_sRGB_decode
#ifndef GL_TEXTURE_SRGB_DECODE_EXT
#define GL_TEXTURE_SRGB_DECODE_EXT 0x8A48
#endif //GL_TEXTURE_SRGB_DECODE_EXT
#ifndef GL_DECODE_EXT
#define GL_DECODE_EXT 0x8A49
#endif //GL_DECODE_EXT
#ifndef GL_SKIP_DECODE_EXT
#define GL_SKIP_DECODE_EXT 0x8A4A
#endif //GL_SKIP_DECODE_EXT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_texture_shared_exponent
#define GL_EXT_texture_shared_exponent
#ifndef GL_RGB9_E5_EXT
#define GL_RGB9_E5_EXT 0x8C3D
#endif //GL_RGB9_E5_EXT
#ifndef GL_UNSIGNED_INT_5_9_9_9_REV_EXT
#define GL_UNSIGNED_INT_5_9_9_9_REV_EXT 0x8C3E
#endif //GL_UNSIGNED_INT_5_9_9_9_REV_EXT
#ifndef GL_TEXTURE_SHARED_SIZE_EXT
#define GL_TEXTURE_SHARED_SIZE_EXT 0x8C3F
#endif //GL_TEXTURE_SHARED_SIZE_EXT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_texture_snorm
#define GL_EXT_texture_snorm
#ifndef GL_RED_SNORM
#define GL_RED_SNORM 0x8F90
#endif //GL_RED_SNORM
#ifndef GL_RG_SNORM
#define GL_RG_SNORM 0x8F91
#endif //GL_RG_SNORM
#ifndef GL_RGB_SNORM
#define GL_RGB_SNORM 0x8F92
#endif //GL_RGB_SNORM
#ifndef GL_RGBA_SNORM
#define GL_RGBA_SNORM 0x8F93
#endif //GL_RGBA_SNORM
#ifndef GL_R8_SNORM
#define GL_R8_SNORM 0x8F94
#endif //GL_R8_SNORM
#ifndef GL_RG8_SNORM
#define GL_RG8_SNORM 0x8F95
#endif //GL_RG8_SNORM
#ifndef GL_RGB8_SNORM
#define GL_RGB8_SNORM 0x8F96
#endif //GL_RGB8_SNORM
#ifndef GL_RGBA8_SNORM
#define GL_RGBA8_SNORM 0x8F97
#endif //GL_RGBA8_SNORM
#ifndef GL_R16_SNORM
#define GL_R16_SNORM 0x8F98
#endif //GL_R16_SNORM
#ifndef GL_RG16_SNORM
#define GL_RG16_SNORM 0x8F99
#endif //GL_RG16_SNORM
#ifndef GL_RGB16_SNORM
#define GL_RGB16_SNORM 0x8F9A
#endif //GL_RGB16_SNORM
#ifndef GL_RGBA16_SNORM
#define GL_RGBA16_SNORM 0x8F9B
#endif //GL_RGBA16_SNORM
#ifndef GL_SIGNED_NORMALIZED
#define GL_SIGNED_NORMALIZED 0x8F9C
#endif //GL_SIGNED_NORMALIZED
#ifndef GL_ALPHA_SNORM
#define GL_ALPHA_SNORM 0x9010
#endif //GL_ALPHA_SNORM
#ifndef GL_LUMINANCE_SNORM
#define GL_LUMINANCE_SNORM 0x9011
#endif //GL_LUMINANCE_SNORM
#ifndef GL_LUMINANCE_ALPHA_SNORM
#define GL_LUMINANCE_ALPHA_SNORM 0x9012
#endif //GL_LUMINANCE_ALPHA_SNORM
#ifndef GL_INTENSITY_SNORM
#define GL_INTENSITY_SNORM 0x9013
#endif //GL_INTENSITY_SNORM
#ifndef GL_ALPHA8_SNORM
#define GL_ALPHA8_SNORM 0x9014
#endif //GL_ALPHA8_SNORM
#ifndef GL_LUMINANCE8_SNORM
#define GL_LUMINANCE8_SNORM 0x9015
#endif //GL_LUMINANCE8_SNORM
#ifndef GL_LUMINANCE8_ALPHA8_SNORM
#define GL_LUMINANCE8_ALPHA8_SNORM 0x9016
#endif //GL_LUMINANCE8_ALPHA8_SNORM
#ifndef GL_INTENSITY8_SNORM
#define GL_INTENSITY8_SNORM 0x9017
#endif //GL_INTENSITY8_SNORM
#ifndef GL_ALPHA16_SNORM
#define GL_ALPHA16_SNORM 0x9018
#endif //GL_ALPHA16_SNORM
#ifndef GL_LUMINANCE16_SNORM
#define GL_LUMINANCE16_SNORM 0x9019
#endif //GL_LUMINANCE16_SNORM
#ifndef GL_LUMINANCE16_ALPHA16_SNORM
#define GL_LUMINANCE16_ALPHA16_SNORM 0x901A
#endif //GL_LUMINANCE16_ALPHA16_SNORM
#ifndef GL_INTENSITY16_SNORM
#define GL_INTENSITY16_SNORM 0x901B
#endif //GL_INTENSITY16_SNORM
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_texture_swizzle
#define GL_EXT_texture_swizzle
#ifndef GL_TEXTURE_SWIZZLE_R_EXT
#define GL_TEXTURE_SWIZZLE_R_EXT 0x8E42
#endif //GL_TEXTURE_SWIZZLE_R_EXT
#ifndef GL_TEXTURE_SWIZZLE_G_EXT
#define GL_TEXTURE_SWIZZLE_G_EXT 0x8E43
#endif //GL_TEXTURE_SWIZZLE_G_EXT
#ifndef GL_TEXTURE_SWIZZLE_B_EXT
#define GL_TEXTURE_SWIZZLE_B_EXT 0x8E44
#endif //GL_TEXTURE_SWIZZLE_B_EXT
#ifndef GL_TEXTURE_SWIZZLE_A_EXT
#define GL_TEXTURE_SWIZZLE_A_EXT 0x8E45
#endif //GL_TEXTURE_SWIZZLE_A_EXT
#ifndef GL_TEXTURE_SWIZZLE_RGBA_EXT
#define GL_TEXTURE_SWIZZLE_RGBA_EXT 0x8E46
#endif //GL_TEXTURE_SWIZZLE_RGBA_EXT
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_timer_query
#define GL_EXT_timer_query
#ifndef GL_TIME_ELAPSED_EXT
#define GL_TIME_ELAPSED_EXT 0x88BF
#endif //GL_TIME_ELAPSED_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetQueryObjecti64vEXT
#define GL_ALT_FUNDEF_GetQueryObjecti64vEXT
typedef void (*PFNGLGETQUERYOBJECTI64VEXTPROC_ALT)(GLuint,GLenum,GLint64 *);
static inline void glGetQueryObjecti64vEXT(GLuint id1,GLenum pname1,GLint64 * params1)
{
	static PFNGLGETQUERYOBJECTI64VEXTPROC_ALT fn=(PFNGLGETQUERYOBJECTI64VEXTPROC_ALT)glaltGetProcAddressExtension("glGetQueryObjecti64vEXT","GL_EXT_timer_query");
	 fn(id1,pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetQueryObjectui64vEXT
#define GL_ALT_FUNDEF_GetQueryObjectui64vEXT
typedef void (*PFNGLGETQUERYOBJECTUI64VEXTPROC_ALT)(GLuint,GLenum,GLuint64 *);
static inline void glGetQueryObjectui64vEXT(GLuint id1,GLenum pname1,GLuint64 * params1)
{
	static PFNGLGETQUERYOBJECTUI64VEXTPROC_ALT fn=(PFNGLGETQUERYOBJECTUI64VEXTPROC_ALT)glaltGetProcAddressExtension("glGetQueryObjectui64vEXT","GL_EXT_timer_query");
	 fn(id1,pname1,params1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_transform_feedback
#define GL_EXT_transform_feedback
#ifndef GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT 0x8C76
#endif //GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT 0x8C7F
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT
#ifndef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT 0x8C80
#endif //GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT
#ifndef GL_TRANSFORM_FEEDBACK_VARYINGS_EXT
#define GL_TRANSFORM_FEEDBACK_VARYINGS_EXT 0x8C83
#endif //GL_TRANSFORM_FEEDBACK_VARYINGS_EXT
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT
#define GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT 0x8C84
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT 0x8C85
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT
#ifndef GL_PRIMITIVES_GENERATED_EXT
#define GL_PRIMITIVES_GENERATED_EXT 0x8C87
#endif //GL_PRIMITIVES_GENERATED_EXT
#ifndef GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT 0x8C88
#endif //GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT
#ifndef GL_RASTERIZER_DISCARD_EXT
#define GL_RASTERIZER_DISCARD_EXT 0x8C89
#endif //GL_RASTERIZER_DISCARD_EXT
#ifndef GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT 0x8C8A
#endif //GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT
#ifndef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT 0x8C8B
#endif //GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT
#ifndef GL_INTERLEAVED_ATTRIBS_EXT
#define GL_INTERLEAVED_ATTRIBS_EXT 0x8C8C
#endif //GL_INTERLEAVED_ATTRIBS_EXT
#ifndef GL_SEPARATE_ATTRIBS_EXT
#define GL_SEPARATE_ATTRIBS_EXT 0x8C8D
#endif //GL_SEPARATE_ATTRIBS_EXT
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_EXT
#define GL_TRANSFORM_FEEDBACK_BUFFER_EXT 0x8C8E
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_EXT
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT 0x8C8F
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BeginTransformFeedbackEXT
#define GL_ALT_FUNDEF_BeginTransformFeedbackEXT
typedef void (*PFNGLBEGINTRANSFORMFEEDBACKEXTPROC_ALT)(GLenum);
static inline void glBeginTransformFeedbackEXT(GLenum primitiveMode1)
{
	static PFNGLBEGINTRANSFORMFEEDBACKEXTPROC_ALT fn=(PFNGLBEGINTRANSFORMFEEDBACKEXTPROC_ALT)glaltGetProcAddressExtension("glBeginTransformFeedbackEXT","GL_EXT_transform_feedback");
	 fn(primitiveMode1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_BindBufferBaseEXT
#define GL_ALT_FUNDEF_BindBufferBaseEXT
typedef void (*PFNGLBINDBUFFERBASEEXTPROC_ALT)(GLenum,GLuint,GLuint);
static inline void glBindBufferBaseEXT(GLenum target1,GLuint index1,GLuint buffer1)
{
	static PFNGLBINDBUFFERBASEEXTPROC_ALT fn=(PFNGLBINDBUFFERBASEEXTPROC_ALT)glaltGetProcAddressExtension("glBindBufferBaseEXT","GL_EXT_transform_feedback");
	 fn(target1,index1,buffer1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_BindBufferOffsetEXT
#define GL_ALT_FUNDEF_BindBufferOffsetEXT
typedef void (*PFNGLBINDBUFFEROFFSETEXTPROC_ALT)(GLenum,GLuint,GLuint,GLintptr);
static inline void glBindBufferOffsetEXT(GLenum target1,GLuint index1,GLuint buffer1,GLintptr offset1)
{
	static PFNGLBINDBUFFEROFFSETEXTPROC_ALT fn=(PFNGLBINDBUFFEROFFSETEXTPROC_ALT)glaltGetProcAddressExtension("glBindBufferOffsetEXT","GL_EXT_transform_feedback");
	 fn(target1,index1,buffer1,offset1);
}
#endif

#ifndef	GL_ALT_FUNDEF_BindBufferRangeEXT
#define GL_ALT_FUNDEF_BindBufferRangeEXT
typedef void (*PFNGLBINDBUFFERRANGEEXTPROC_ALT)(GLenum,GLuint,GLuint,GLintptr,GLsizeiptr);
static inline void glBindBufferRangeEXT(GLenum target1,GLuint index1,GLuint buffer1,GLintptr offset1,GLsizeiptr size1)
{
	static PFNGLBINDBUFFERRANGEEXTPROC_ALT fn=(PFNGLBINDBUFFERRANGEEXTPROC_ALT)glaltGetProcAddressExtension("glBindBufferRangeEXT","GL_EXT_transform_feedback");
	 fn(target1,index1,buffer1,offset1,size1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_EndTransformFeedbackEXT
#define GL_ALT_FUNDEF_EndTransformFeedbackEXT
typedef void (*PFNGLENDTRANSFORMFEEDBACKEXTPROC_ALT)();
static inline void glEndTransformFeedbackEXT()
{
	static PFNGLENDTRANSFORMFEEDBACKEXTPROC_ALT fn=(PFNGLENDTRANSFORMFEEDBACKEXTPROC_ALT)glaltGetProcAddressExtension("glEndTransformFeedbackEXT","GL_EXT_transform_feedback");
	 fn();
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetTransformFeedbackVaryingEXT
#define GL_ALT_FUNDEF_GetTransformFeedbackVaryingEXT
typedef void (*PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC_ALT)(GLuint,GLuint,GLsizei,GLsizei *,GLsizei *,GLenum *,GLchar *);
static inline void glGetTransformFeedbackVaryingEXT(GLuint program1,GLuint index1,GLsizei bufSize1,GLsizei * length1,GLsizei * size1,GLenum * type1,GLchar * name1)
{
	static PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC_ALT fn=(PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC_ALT)glaltGetProcAddressExtension("glGetTransformFeedbackVaryingEXT","GL_EXT_transform_feedback");
	 fn(program1,index1,bufSize1,length1,size1,type1,name1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_TransformFeedbackVaryingsEXT
#define GL_ALT_FUNDEF_TransformFeedbackVaryingsEXT
typedef void (*PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC_ALT)(GLuint,GLsizei,const GLchar *const*,GLenum);
static inline void glTransformFeedbackVaryingsEXT(GLuint program1,GLsizei count1,const GLchar *const* varyings1,GLenum bufferMode1)
{
	static PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC_ALT fn=(PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC_ALT)glaltGetProcAddressExtension("glTransformFeedbackVaryingsEXT","GL_EXT_transform_feedback");
	 fn(program1,count1,varyings1,bufferMode1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_vertex_array
#define GL_EXT_vertex_array
#ifndef GL_VERTEX_ARRAY_EXT
#define GL_VERTEX_ARRAY_EXT 0x8074
#endif //GL_VERTEX_ARRAY_EXT
#ifndef GL_NORMAL_ARRAY_EXT
#define GL_NORMAL_ARRAY_EXT 0x8075
#endif //GL_NORMAL_ARRAY_EXT
#ifndef GL_COLOR_ARRAY_EXT
#define GL_COLOR_ARRAY_EXT 0x8076
#endif //GL_COLOR_ARRAY_EXT
#ifndef GL_INDEX_ARRAY_EXT
#define GL_INDEX_ARRAY_EXT 0x8077
#endif //GL_INDEX_ARRAY_EXT
#ifndef GL_TEXTURE_COORD_ARRAY_EXT
#define GL_TEXTURE_COORD_ARRAY_EXT 0x8078
#endif //GL_TEXTURE_COORD_ARRAY_EXT
#ifndef GL_EDGE_FLAG_ARRAY_EXT
#define GL_EDGE_FLAG_ARRAY_EXT 0x8079
#endif //GL_EDGE_FLAG_ARRAY_EXT
#ifndef GL_VERTEX_ARRAY_SIZE_EXT
#define GL_VERTEX_ARRAY_SIZE_EXT 0x807A
#endif //GL_VERTEX_ARRAY_SIZE_EXT
#ifndef GL_VERTEX_ARRAY_TYPE_EXT
#define GL_VERTEX_ARRAY_TYPE_EXT 0x807B
#endif //GL_VERTEX_ARRAY_TYPE_EXT
#ifndef GL_VERTEX_ARRAY_STRIDE_EXT
#define GL_VERTEX_ARRAY_STRIDE_EXT 0x807C
#endif //GL_VERTEX_ARRAY_STRIDE_EXT
#ifndef GL_VERTEX_ARRAY_COUNT_EXT
#define GL_VERTEX_ARRAY_COUNT_EXT 0x807D
#endif //GL_VERTEX_ARRAY_COUNT_EXT
#ifndef GL_NORMAL_ARRAY_TYPE_EXT
#define GL_NORMAL_ARRAY_TYPE_EXT 0x807E
#endif //GL_NORMAL_ARRAY_TYPE_EXT
#ifndef GL_NORMAL_ARRAY_STRIDE_EXT
#define GL_NORMAL_ARRAY_STRIDE_EXT 0x807F
#endif //GL_NORMAL_ARRAY_STRIDE_EXT
#ifndef GL_NORMAL_ARRAY_COUNT_EXT
#define GL_NORMAL_ARRAY_COUNT_EXT 0x8080
#endif //GL_NORMAL_ARRAY_COUNT_EXT
#ifndef GL_COLOR_ARRAY_SIZE_EXT
#define GL_COLOR_ARRAY_SIZE_EXT 0x8081
#endif //GL_COLOR_ARRAY_SIZE_EXT
#ifndef GL_COLOR_ARRAY_TYPE_EXT
#define GL_COLOR_ARRAY_TYPE_EXT 0x8082
#endif //GL_COLOR_ARRAY_TYPE_EXT
#ifndef GL_COLOR_ARRAY_STRIDE_EXT
#define GL_COLOR_ARRAY_STRIDE_EXT 0x8083
#endif //GL_COLOR_ARRAY_STRIDE_EXT
#ifndef GL_COLOR_ARRAY_COUNT_EXT
#define GL_COLOR_ARRAY_COUNT_EXT 0x8084
#endif //GL_COLOR_ARRAY_COUNT_EXT
#ifndef GL_INDEX_ARRAY_TYPE_EXT
#define GL_INDEX_ARRAY_TYPE_EXT 0x8085
#endif //GL_INDEX_ARRAY_TYPE_EXT
#ifndef GL_INDEX_ARRAY_STRIDE_EXT
#define GL_INDEX_ARRAY_STRIDE_EXT 0x8086
#endif //GL_INDEX_ARRAY_STRIDE_EXT
#ifndef GL_INDEX_ARRAY_COUNT_EXT
#define GL_INDEX_ARRAY_COUNT_EXT 0x8087
#endif //GL_INDEX_ARRAY_COUNT_EXT
#ifndef GL_TEXTURE_COORD_ARRAY_SIZE_EXT
#define GL_TEXTURE_COORD_ARRAY_SIZE_EXT 0x8088
#endif //GL_TEXTURE_COORD_ARRAY_SIZE_EXT
#ifndef GL_TEXTURE_COORD_ARRAY_TYPE_EXT
#define GL_TEXTURE_COORD_ARRAY_TYPE_EXT 0x8089
#endif //GL_TEXTURE_COORD_ARRAY_TYPE_EXT
#ifndef GL_TEXTURE_COORD_ARRAY_STRIDE_EXT
#define GL_TEXTURE_COORD_ARRAY_STRIDE_EXT 0x808A
#endif //GL_TEXTURE_COORD_ARRAY_STRIDE_EXT
#ifndef GL_TEXTURE_COORD_ARRAY_COUNT_EXT
#define GL_TEXTURE_COORD_ARRAY_COUNT_EXT 0x808B
#endif //GL_TEXTURE_COORD_ARRAY_COUNT_EXT
#ifndef GL_EDGE_FLAG_ARRAY_STRIDE_EXT
#define GL_EDGE_FLAG_ARRAY_STRIDE_EXT 0x808C
#endif //GL_EDGE_FLAG_ARRAY_STRIDE_EXT
#ifndef GL_EDGE_FLAG_ARRAY_COUNT_EXT
#define GL_EDGE_FLAG_ARRAY_COUNT_EXT 0x808D
#endif //GL_EDGE_FLAG_ARRAY_COUNT_EXT
#ifndef GL_VERTEX_ARRAY_POINTER_EXT
#define GL_VERTEX_ARRAY_POINTER_EXT 0x808E
#endif //GL_VERTEX_ARRAY_POINTER_EXT
#ifndef GL_NORMAL_ARRAY_POINTER_EXT
#define GL_NORMAL_ARRAY_POINTER_EXT 0x808F
#endif //GL_NORMAL_ARRAY_POINTER_EXT
#ifndef GL_COLOR_ARRAY_POINTER_EXT
#define GL_COLOR_ARRAY_POINTER_EXT 0x8090
#endif //GL_COLOR_ARRAY_POINTER_EXT
#ifndef GL_INDEX_ARRAY_POINTER_EXT
#define GL_INDEX_ARRAY_POINTER_EXT 0x8091
#endif //GL_INDEX_ARRAY_POINTER_EXT
#ifndef GL_TEXTURE_COORD_ARRAY_POINTER_EXT
#define GL_TEXTURE_COORD_ARRAY_POINTER_EXT 0x8092
#endif //GL_TEXTURE_COORD_ARRAY_POINTER_EXT
#ifndef GL_EDGE_FLAG_ARRAY_POINTER_EXT
#define GL_EDGE_FLAG_ARRAY_POINTER_EXT 0x8093
#endif //GL_EDGE_FLAG_ARRAY_POINTER_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ArrayElementEXT
#define GL_ALT_FUNDEF_ArrayElementEXT
typedef void (*PFNGLARRAYELEMENTEXTPROC_ALT)(GLint);
static inline void glArrayElementEXT(GLint i1)
{
	static PFNGLARRAYELEMENTEXTPROC_ALT fn=(PFNGLARRAYELEMENTEXTPROC_ALT)glaltGetProcAddressExtension("glArrayElementEXT","GL_EXT_vertex_array");
	 fn(i1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ColorPointerEXT
#define GL_ALT_FUNDEF_ColorPointerEXT
typedef void (*PFNGLCOLORPOINTEREXTPROC_ALT)(GLint,GLenum,GLsizei,GLsizei,const void *);
static inline void glColorPointerEXT(GLint size1,GLenum type1,GLsizei stride1,GLsizei count1,const void * pointer1)
{
	static PFNGLCOLORPOINTEREXTPROC_ALT fn=(PFNGLCOLORPOINTEREXTPROC_ALT)glaltGetProcAddressExtension("glColorPointerEXT","GL_EXT_vertex_array");
	 fn(size1,type1,stride1,count1,pointer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DrawArraysEXT
#define GL_ALT_FUNDEF_DrawArraysEXT
typedef void (*PFNGLDRAWARRAYSEXTPROC_ALT)(GLenum,GLint,GLsizei);
static inline void glDrawArraysEXT(GLenum mode1,GLint first1,GLsizei count1)
{
	static PFNGLDRAWARRAYSEXTPROC_ALT fn=(PFNGLDRAWARRAYSEXTPROC_ALT)glaltGetProcAddressExtension("glDrawArraysEXT","GL_EXT_vertex_array");
	 fn(mode1,first1,count1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_EdgeFlagPointerEXT
#define GL_ALT_FUNDEF_EdgeFlagPointerEXT
typedef void (*PFNGLEDGEFLAGPOINTEREXTPROC_ALT)(GLsizei,GLsizei,const GLboolean *);
static inline void glEdgeFlagPointerEXT(GLsizei stride1,GLsizei count1,const GLboolean * pointer1)
{
	static PFNGLEDGEFLAGPOINTEREXTPROC_ALT fn=(PFNGLEDGEFLAGPOINTEREXTPROC_ALT)glaltGetProcAddressExtension("glEdgeFlagPointerEXT","GL_EXT_vertex_array");
	 fn(stride1,count1,pointer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetPointervEXT
#define GL_ALT_FUNDEF_GetPointervEXT
typedef void (*PFNGLGETPOINTERVEXTPROC_ALT)(GLenum,void **);
static inline void glGetPointervEXT(GLenum pname1,void ** params1)
{
	static PFNGLGETPOINTERVEXTPROC_ALT fn=(PFNGLGETPOINTERVEXTPROC_ALT)glaltGetProcAddressExtension("glGetPointervEXT","GL_EXT_vertex_array");
	 fn(pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_IndexPointerEXT
#define GL_ALT_FUNDEF_IndexPointerEXT
typedef void (*PFNGLINDEXPOINTEREXTPROC_ALT)(GLenum,GLsizei,GLsizei,const void *);
static inline void glIndexPointerEXT(GLenum type1,GLsizei stride1,GLsizei count1,const void * pointer1)
{
	static PFNGLINDEXPOINTEREXTPROC_ALT fn=(PFNGLINDEXPOINTEREXTPROC_ALT)glaltGetProcAddressExtension("glIndexPointerEXT","GL_EXT_vertex_array");
	 fn(type1,stride1,count1,pointer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NormalPointerEXT
#define GL_ALT_FUNDEF_NormalPointerEXT
typedef void (*PFNGLNORMALPOINTEREXTPROC_ALT)(GLenum,GLsizei,GLsizei,const void *);
static inline void glNormalPointerEXT(GLenum type1,GLsizei stride1,GLsizei count1,const void * pointer1)
{
	static PFNGLNORMALPOINTEREXTPROC_ALT fn=(PFNGLNORMALPOINTEREXTPROC_ALT)glaltGetProcAddressExtension("glNormalPointerEXT","GL_EXT_vertex_array");
	 fn(type1,stride1,count1,pointer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoordPointerEXT
#define GL_ALT_FUNDEF_TexCoordPointerEXT
typedef void (*PFNGLTEXCOORDPOINTEREXTPROC_ALT)(GLint,GLenum,GLsizei,GLsizei,const void *);
static inline void glTexCoordPointerEXT(GLint size1,GLenum type1,GLsizei stride1,GLsizei count1,const void * pointer1)
{
	static PFNGLTEXCOORDPOINTEREXTPROC_ALT fn=(PFNGLTEXCOORDPOINTEREXTPROC_ALT)glaltGetProcAddressExtension("glTexCoordPointerEXT","GL_EXT_vertex_array");
	 fn(size1,type1,stride1,count1,pointer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexPointerEXT
#define GL_ALT_FUNDEF_VertexPointerEXT
typedef void (*PFNGLVERTEXPOINTEREXTPROC_ALT)(GLint,GLenum,GLsizei,GLsizei,const void *);
static inline void glVertexPointerEXT(GLint size1,GLenum type1,GLsizei stride1,GLsizei count1,const void * pointer1)
{
	static PFNGLVERTEXPOINTEREXTPROC_ALT fn=(PFNGLVERTEXPOINTEREXTPROC_ALT)glaltGetProcAddressExtension("glVertexPointerEXT","GL_EXT_vertex_array");
	 fn(size1,type1,stride1,count1,pointer1);
}
#endif
CGUARDEND

#endif

#ifndef GL_EXT_vertex_array_bgra
#define GL_EXT_vertex_array_bgra
#ifndef GL_BGRA
#define GL_BGRA 0x80E1
#endif //GL_BGRA
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_EXT_vertex_attrib_64bit
#define GL_EXT_vertex_attrib_64bit
#ifndef GL_DOUBLE
#define GL_DOUBLE 0x140A
#endif //GL_DOUBLE
#ifndef GL_DOUBLE_MAT2_EXT
#define GL_DOUBLE_MAT2_EXT 0x8F46
#endif //GL_DOUBLE_MAT2_EXT
#ifndef GL_DOUBLE_MAT3_EXT
#define GL_DOUBLE_MAT3_EXT 0x8F47
#endif //GL_DOUBLE_MAT3_EXT
#ifndef GL_DOUBLE_MAT4_EXT
#define GL_DOUBLE_MAT4_EXT 0x8F48
#endif //GL_DOUBLE_MAT4_EXT
#ifndef GL_DOUBLE_MAT2x3_EXT
#define GL_DOUBLE_MAT2x3_EXT 0x8F49
#endif //GL_DOUBLE_MAT2x3_EXT
#ifndef GL_DOUBLE_MAT2x4_EXT
#define GL_DOUBLE_MAT2x4_EXT 0x8F4A
#endif //GL_DOUBLE_MAT2x4_EXT
#ifndef GL_DOUBLE_MAT3x2_EXT
#define GL_DOUBLE_MAT3x2_EXT 0x8F4B
#endif //GL_DOUBLE_MAT3x2_EXT
#ifndef GL_DOUBLE_MAT3x4_EXT
#define GL_DOUBLE_MAT3x4_EXT 0x8F4C
#endif //GL_DOUBLE_MAT3x4_EXT
#ifndef GL_DOUBLE_MAT4x2_EXT
#define GL_DOUBLE_MAT4x2_EXT 0x8F4D
#endif //GL_DOUBLE_MAT4x2_EXT
#ifndef GL_DOUBLE_MAT4x3_EXT
#define GL_DOUBLE_MAT4x3_EXT 0x8F4E
#endif //GL_DOUBLE_MAT4x3_EXT
#ifndef GL_DOUBLE_VEC2_EXT
#define GL_DOUBLE_VEC2_EXT 0x8FFC
#endif //GL_DOUBLE_VEC2_EXT
#ifndef GL_DOUBLE_VEC3_EXT
#define GL_DOUBLE_VEC3_EXT 0x8FFD
#endif //GL_DOUBLE_VEC3_EXT
#ifndef GL_DOUBLE_VEC4_EXT
#define GL_DOUBLE_VEC4_EXT 0x8FFE
#endif //GL_DOUBLE_VEC4_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetVertexAttribLdvEXT
#define GL_ALT_FUNDEF_GetVertexAttribLdvEXT
typedef void (*PFNGLGETVERTEXATTRIBLDVEXTPROC_ALT)(GLuint,GLenum,GLdouble *);
static inline void glGetVertexAttribLdvEXT(GLuint index1,GLenum pname1,GLdouble * params1)
{
	static PFNGLGETVERTEXATTRIBLDVEXTPROC_ALT fn=(PFNGLGETVERTEXATTRIBLDVEXTPROC_ALT)glaltGetProcAddressExtension("glGetVertexAttribLdvEXT","GL_EXT_vertex_attrib_64bit");
	 fn(index1,pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribL1dEXT
#define GL_ALT_FUNDEF_VertexAttribL1dEXT
typedef void (*PFNGLVERTEXATTRIBL1DEXTPROC_ALT)(GLuint,GLdouble);
static inline void glVertexAttribL1dEXT(GLuint index1,GLdouble x1)
{
	static PFNGLVERTEXATTRIBL1DEXTPROC_ALT fn=(PFNGLVERTEXATTRIBL1DEXTPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL1dEXT","GL_EXT_vertex_attrib_64bit");
	 fn(index1,x1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribL1dvEXT
#define GL_ALT_FUNDEF_VertexAttribL1dvEXT
typedef void (*PFNGLVERTEXATTRIBL1DVEXTPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttribL1dvEXT(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIBL1DVEXTPROC_ALT fn=(PFNGLVERTEXATTRIBL1DVEXTPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL1dvEXT","GL_EXT_vertex_attrib_64bit");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribL2dEXT
#define GL_ALT_FUNDEF_VertexAttribL2dEXT
typedef void (*PFNGLVERTEXATTRIBL2DEXTPROC_ALT)(GLuint,GLdouble,GLdouble);
static inline void glVertexAttribL2dEXT(GLuint index1,GLdouble x1,GLdouble y1)
{
	static PFNGLVERTEXATTRIBL2DEXTPROC_ALT fn=(PFNGLVERTEXATTRIBL2DEXTPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL2dEXT","GL_EXT_vertex_attrib_64bit");
	 fn(index1,x1,y1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribL2dvEXT
#define GL_ALT_FUNDEF_VertexAttribL2dvEXT
typedef void (*PFNGLVERTEXATTRIBL2DVEXTPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttribL2dvEXT(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIBL2DVEXTPROC_ALT fn=(PFNGLVERTEXATTRIBL2DVEXTPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL2dvEXT","GL_EXT_vertex_attrib_64bit");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribL3dEXT
#define GL_ALT_FUNDEF_VertexAttribL3dEXT
typedef void (*PFNGLVERTEXATTRIBL3DEXTPROC_ALT)(GLuint,GLdouble,GLdouble,GLdouble);
static inline void glVertexAttribL3dEXT(GLuint index1,GLdouble x1,GLdouble y1,GLdouble z1)
{
	static PFNGLVERTEXATTRIBL3DEXTPROC_ALT fn=(PFNGLVERTEXATTRIBL3DEXTPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL3dEXT","GL_EXT_vertex_attrib_64bit");
	 fn(index1,x1,y1,z1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribL3dvEXT
#define GL_ALT_FUNDEF_VertexAttribL3dvEXT
typedef void (*PFNGLVERTEXATTRIBL3DVEXTPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttribL3dvEXT(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIBL3DVEXTPROC_ALT fn=(PFNGLVERTEXATTRIBL3DVEXTPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL3dvEXT","GL_EXT_vertex_attrib_64bit");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribL4dEXT
#define GL_ALT_FUNDEF_VertexAttribL4dEXT
typedef void (*PFNGLVERTEXATTRIBL4DEXTPROC_ALT)(GLuint,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void glVertexAttribL4dEXT(GLuint index1,GLdouble x1,GLdouble y1,GLdouble z1,GLdouble w1)
{
	static PFNGLVERTEXATTRIBL4DEXTPROC_ALT fn=(PFNGLVERTEXATTRIBL4DEXTPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL4dEXT","GL_EXT_vertex_attrib_64bit");
	 fn(index1,x1,y1,z1,w1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribL4dvEXT
#define GL_ALT_FUNDEF_VertexAttribL4dvEXT
typedef void (*PFNGLVERTEXATTRIBL4DVEXTPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttribL4dvEXT(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIBL4DVEXTPROC_ALT fn=(PFNGLVERTEXATTRIBL4DVEXTPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL4dvEXT","GL_EXT_vertex_attrib_64bit");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribLPointerEXT
#define GL_ALT_FUNDEF_VertexAttribLPointerEXT
typedef void (*PFNGLVERTEXATTRIBLPOINTEREXTPROC_ALT)(GLuint,GLint,GLenum,GLsizei,const void *);
static inline void glVertexAttribLPointerEXT(GLuint index1,GLint size1,GLenum type1,GLsizei stride1,const void * pointer1)
{
	static PFNGLVERTEXATTRIBLPOINTEREXTPROC_ALT fn=(PFNGLVERTEXATTRIBLPOINTEREXTPROC_ALT)glaltGetProcAddressExtension("glVertexAttribLPointerEXT","GL_EXT_vertex_attrib_64bit");
	 fn(index1,size1,type1,stride1,pointer1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_EXT_vertex_shader
#define GL_EXT_vertex_shader
#ifndef GL_VERTEX_SHADER_EXT
#define GL_VERTEX_SHADER_EXT 0x8780
#endif //GL_VERTEX_SHADER_EXT
#ifndef GL_VERTEX_SHADER_BINDING_EXT
#define GL_VERTEX_SHADER_BINDING_EXT 0x8781
#endif //GL_VERTEX_SHADER_BINDING_EXT
#ifndef GL_OP_INDEX_EXT
#define GL_OP_INDEX_EXT 0x8782
#endif //GL_OP_INDEX_EXT
#ifndef GL_OP_NEGATE_EXT
#define GL_OP_NEGATE_EXT 0x8783
#endif //GL_OP_NEGATE_EXT
#ifndef GL_OP_DOT3_EXT
#define GL_OP_DOT3_EXT 0x8784
#endif //GL_OP_DOT3_EXT
#ifndef GL_OP_DOT4_EXT
#define GL_OP_DOT4_EXT 0x8785
#endif //GL_OP_DOT4_EXT
#ifndef GL_OP_MUL_EXT
#define GL_OP_MUL_EXT 0x8786
#endif //GL_OP_MUL_EXT
#ifndef GL_OP_ADD_EXT
#define GL_OP_ADD_EXT 0x8787
#endif //GL_OP_ADD_EXT
#ifndef GL_OP_MADD_EXT
#define GL_OP_MADD_EXT 0x8788
#endif //GL_OP_MADD_EXT
#ifndef GL_OP_FRAC_EXT
#define GL_OP_FRAC_EXT 0x8789
#endif //GL_OP_FRAC_EXT
#ifndef GL_OP_MAX_EXT
#define GL_OP_MAX_EXT 0x878A
#endif //GL_OP_MAX_EXT
#ifndef GL_OP_MIN_EXT
#define GL_OP_MIN_EXT 0x878B
#endif //GL_OP_MIN_EXT
#ifndef GL_OP_SET_GE_EXT
#define GL_OP_SET_GE_EXT 0x878C
#endif //GL_OP_SET_GE_EXT
#ifndef GL_OP_SET_LT_EXT
#define GL_OP_SET_LT_EXT 0x878D
#endif //GL_OP_SET_LT_EXT
#ifndef GL_OP_CLAMP_EXT
#define GL_OP_CLAMP_EXT 0x878E
#endif //GL_OP_CLAMP_EXT
#ifndef GL_OP_FLOOR_EXT
#define GL_OP_FLOOR_EXT 0x878F
#endif //GL_OP_FLOOR_EXT
#ifndef GL_OP_ROUND_EXT
#define GL_OP_ROUND_EXT 0x8790
#endif //GL_OP_ROUND_EXT
#ifndef GL_OP_EXP_BASE_2_EXT
#define GL_OP_EXP_BASE_2_EXT 0x8791
#endif //GL_OP_EXP_BASE_2_EXT
#ifndef GL_OP_LOG_BASE_2_EXT
#define GL_OP_LOG_BASE_2_EXT 0x8792
#endif //GL_OP_LOG_BASE_2_EXT
#ifndef GL_OP_POWER_EXT
#define GL_OP_POWER_EXT 0x8793
#endif //GL_OP_POWER_EXT
#ifndef GL_OP_RECIP_EXT
#define GL_OP_RECIP_EXT 0x8794
#endif //GL_OP_RECIP_EXT
#ifndef GL_OP_RECIP_SQRT_EXT
#define GL_OP_RECIP_SQRT_EXT 0x8795
#endif //GL_OP_RECIP_SQRT_EXT
#ifndef GL_OP_SUB_EXT
#define GL_OP_SUB_EXT 0x8796
#endif //GL_OP_SUB_EXT
#ifndef GL_OP_CROSS_PRODUCT_EXT
#define GL_OP_CROSS_PRODUCT_EXT 0x8797
#endif //GL_OP_CROSS_PRODUCT_EXT
#ifndef GL_OP_MULTIPLY_MATRIX_EXT
#define GL_OP_MULTIPLY_MATRIX_EXT 0x8798
#endif //GL_OP_MULTIPLY_MATRIX_EXT
#ifndef GL_OP_MOV_EXT
#define GL_OP_MOV_EXT 0x8799
#endif //GL_OP_MOV_EXT
#ifndef GL_OUTPUT_VERTEX_EXT
#define GL_OUTPUT_VERTEX_EXT 0x879A
#endif //GL_OUTPUT_VERTEX_EXT
#ifndef GL_OUTPUT_COLOR0_EXT
#define GL_OUTPUT_COLOR0_EXT 0x879B
#endif //GL_OUTPUT_COLOR0_EXT
#ifndef GL_OUTPUT_COLOR1_EXT
#define GL_OUTPUT_COLOR1_EXT 0x879C
#endif //GL_OUTPUT_COLOR1_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD0_EXT
#define GL_OUTPUT_TEXTURE_COORD0_EXT 0x879D
#endif //GL_OUTPUT_TEXTURE_COORD0_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD1_EXT
#define GL_OUTPUT_TEXTURE_COORD1_EXT 0x879E
#endif //GL_OUTPUT_TEXTURE_COORD1_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD2_EXT
#define GL_OUTPUT_TEXTURE_COORD2_EXT 0x879F
#endif //GL_OUTPUT_TEXTURE_COORD2_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD3_EXT
#define GL_OUTPUT_TEXTURE_COORD3_EXT 0x87A0
#endif //GL_OUTPUT_TEXTURE_COORD3_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD4_EXT
#define GL_OUTPUT_TEXTURE_COORD4_EXT 0x87A1
#endif //GL_OUTPUT_TEXTURE_COORD4_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD5_EXT
#define GL_OUTPUT_TEXTURE_COORD5_EXT 0x87A2
#endif //GL_OUTPUT_TEXTURE_COORD5_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD6_EXT
#define GL_OUTPUT_TEXTURE_COORD6_EXT 0x87A3
#endif //GL_OUTPUT_TEXTURE_COORD6_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD7_EXT
#define GL_OUTPUT_TEXTURE_COORD7_EXT 0x87A4
#endif //GL_OUTPUT_TEXTURE_COORD7_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD8_EXT
#define GL_OUTPUT_TEXTURE_COORD8_EXT 0x87A5
#endif //GL_OUTPUT_TEXTURE_COORD8_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD9_EXT
#define GL_OUTPUT_TEXTURE_COORD9_EXT 0x87A6
#endif //GL_OUTPUT_TEXTURE_COORD9_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD10_EXT
#define GL_OUTPUT_TEXTURE_COORD10_EXT 0x87A7
#endif //GL_OUTPUT_TEXTURE_COORD10_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD11_EXT
#define GL_OUTPUT_TEXTURE_COORD11_EXT 0x87A8
#endif //GL_OUTPUT_TEXTURE_COORD11_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD12_EXT
#define GL_OUTPUT_TEXTURE_COORD12_EXT 0x87A9
#endif //GL_OUTPUT_TEXTURE_COORD12_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD13_EXT
#define GL_OUTPUT_TEXTURE_COORD13_EXT 0x87AA
#endif //GL_OUTPUT_TEXTURE_COORD13_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD14_EXT
#define GL_OUTPUT_TEXTURE_COORD14_EXT 0x87AB
#endif //GL_OUTPUT_TEXTURE_COORD14_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD15_EXT
#define GL_OUTPUT_TEXTURE_COORD15_EXT 0x87AC
#endif //GL_OUTPUT_TEXTURE_COORD15_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD16_EXT
#define GL_OUTPUT_TEXTURE_COORD16_EXT 0x87AD
#endif //GL_OUTPUT_TEXTURE_COORD16_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD17_EXT
#define GL_OUTPUT_TEXTURE_COORD17_EXT 0x87AE
#endif //GL_OUTPUT_TEXTURE_COORD17_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD18_EXT
#define GL_OUTPUT_TEXTURE_COORD18_EXT 0x87AF
#endif //GL_OUTPUT_TEXTURE_COORD18_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD19_EXT
#define GL_OUTPUT_TEXTURE_COORD19_EXT 0x87B0
#endif //GL_OUTPUT_TEXTURE_COORD19_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD20_EXT
#define GL_OUTPUT_TEXTURE_COORD20_EXT 0x87B1
#endif //GL_OUTPUT_TEXTURE_COORD20_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD21_EXT
#define GL_OUTPUT_TEXTURE_COORD21_EXT 0x87B2
#endif //GL_OUTPUT_TEXTURE_COORD21_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD22_EXT
#define GL_OUTPUT_TEXTURE_COORD22_EXT 0x87B3
#endif //GL_OUTPUT_TEXTURE_COORD22_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD23_EXT
#define GL_OUTPUT_TEXTURE_COORD23_EXT 0x87B4
#endif //GL_OUTPUT_TEXTURE_COORD23_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD24_EXT
#define GL_OUTPUT_TEXTURE_COORD24_EXT 0x87B5
#endif //GL_OUTPUT_TEXTURE_COORD24_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD25_EXT
#define GL_OUTPUT_TEXTURE_COORD25_EXT 0x87B6
#endif //GL_OUTPUT_TEXTURE_COORD25_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD26_EXT
#define GL_OUTPUT_TEXTURE_COORD26_EXT 0x87B7
#endif //GL_OUTPUT_TEXTURE_COORD26_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD27_EXT
#define GL_OUTPUT_TEXTURE_COORD27_EXT 0x87B8
#endif //GL_OUTPUT_TEXTURE_COORD27_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD28_EXT
#define GL_OUTPUT_TEXTURE_COORD28_EXT 0x87B9
#endif //GL_OUTPUT_TEXTURE_COORD28_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD29_EXT
#define GL_OUTPUT_TEXTURE_COORD29_EXT 0x87BA
#endif //GL_OUTPUT_TEXTURE_COORD29_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD30_EXT
#define GL_OUTPUT_TEXTURE_COORD30_EXT 0x87BB
#endif //GL_OUTPUT_TEXTURE_COORD30_EXT
#ifndef GL_OUTPUT_TEXTURE_COORD31_EXT
#define GL_OUTPUT_TEXTURE_COORD31_EXT 0x87BC
#endif //GL_OUTPUT_TEXTURE_COORD31_EXT
#ifndef GL_OUTPUT_FOG_EXT
#define GL_OUTPUT_FOG_EXT 0x87BD
#endif //GL_OUTPUT_FOG_EXT
#ifndef GL_SCALAR_EXT
#define GL_SCALAR_EXT 0x87BE
#endif //GL_SCALAR_EXT
#ifndef GL_VECTOR_EXT
#define GL_VECTOR_EXT 0x87BF
#endif //GL_VECTOR_EXT
#ifndef GL_MATRIX_EXT
#define GL_MATRIX_EXT 0x87C0
#endif //GL_MATRIX_EXT
#ifndef GL_VARIANT_EXT
#define GL_VARIANT_EXT 0x87C1
#endif //GL_VARIANT_EXT
#ifndef GL_INVARIANT_EXT
#define GL_INVARIANT_EXT 0x87C2
#endif //GL_INVARIANT_EXT
#ifndef GL_LOCAL_CONSTANT_EXT
#define GL_LOCAL_CONSTANT_EXT 0x87C3
#endif //GL_LOCAL_CONSTANT_EXT
#ifndef GL_LOCAL_EXT
#define GL_LOCAL_EXT 0x87C4
#endif //GL_LOCAL_EXT
#ifndef GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT
#define GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87C5
#endif //GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT
#ifndef GL_MAX_VERTEX_SHADER_VARIANTS_EXT
#define GL_MAX_VERTEX_SHADER_VARIANTS_EXT 0x87C6
#endif //GL_MAX_VERTEX_SHADER_VARIANTS_EXT
#ifndef GL_MAX_VERTEX_SHADER_INVARIANTS_EXT
#define GL_MAX_VERTEX_SHADER_INVARIANTS_EXT 0x87C7
#endif //GL_MAX_VERTEX_SHADER_INVARIANTS_EXT
#ifndef GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
#define GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87C8
#endif //GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
#ifndef GL_MAX_VERTEX_SHADER_LOCALS_EXT
#define GL_MAX_VERTEX_SHADER_LOCALS_EXT 0x87C9
#endif //GL_MAX_VERTEX_SHADER_LOCALS_EXT
#ifndef GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CA
#endif //GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT
#ifndef GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT 0x87CB
#endif //GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT
#ifndef GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87CC
#endif //GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
#ifndef GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT 0x87CD
#endif //GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT
#ifndef GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT 0x87CE
#endif //GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT
#ifndef GL_VERTEX_SHADER_INSTRUCTIONS_EXT
#define GL_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CF
#endif //GL_VERTEX_SHADER_INSTRUCTIONS_EXT
#ifndef GL_VERTEX_SHADER_VARIANTS_EXT
#define GL_VERTEX_SHADER_VARIANTS_EXT 0x87D0
#endif //GL_VERTEX_SHADER_VARIANTS_EXT
#ifndef GL_VERTEX_SHADER_INVARIANTS_EXT
#define GL_VERTEX_SHADER_INVARIANTS_EXT 0x87D1
#endif //GL_VERTEX_SHADER_INVARIANTS_EXT
#ifndef GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
#define GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87D2
#endif //GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
#ifndef GL_VERTEX_SHADER_LOCALS_EXT
#define GL_VERTEX_SHADER_LOCALS_EXT 0x87D3
#endif //GL_VERTEX_SHADER_LOCALS_EXT
#ifndef GL_VERTEX_SHADER_OPTIMIZED_EXT
#define GL_VERTEX_SHADER_OPTIMIZED_EXT 0x87D4
#endif //GL_VERTEX_SHADER_OPTIMIZED_EXT
#ifndef GL_X_EXT
#define GL_X_EXT 0x87D5
#endif //GL_X_EXT
#ifndef GL_Y_EXT
#define GL_Y_EXT 0x87D6
#endif //GL_Y_EXT
#ifndef GL_Z_EXT
#define GL_Z_EXT 0x87D7
#endif //GL_Z_EXT
#ifndef GL_W_EXT
#define GL_W_EXT 0x87D8
#endif //GL_W_EXT
#ifndef GL_NEGATIVE_X_EXT
#define GL_NEGATIVE_X_EXT 0x87D9
#endif //GL_NEGATIVE_X_EXT
#ifndef GL_NEGATIVE_Y_EXT
#define GL_NEGATIVE_Y_EXT 0x87DA
#endif //GL_NEGATIVE_Y_EXT
#ifndef GL_NEGATIVE_Z_EXT
#define GL_NEGATIVE_Z_EXT 0x87DB
#endif //GL_NEGATIVE_Z_EXT
#ifndef GL_NEGATIVE_W_EXT
#define GL_NEGATIVE_W_EXT 0x87DC
#endif //GL_NEGATIVE_W_EXT
#ifndef GL_ZERO_EXT
#define GL_ZERO_EXT 0x87DD
#endif //GL_ZERO_EXT
#ifndef GL_ONE_EXT
#define GL_ONE_EXT 0x87DE
#endif //GL_ONE_EXT
#ifndef GL_NEGATIVE_ONE_EXT
#define GL_NEGATIVE_ONE_EXT 0x87DF
#endif //GL_NEGATIVE_ONE_EXT
#ifndef GL_NORMALIZED_RANGE_EXT
#define GL_NORMALIZED_RANGE_EXT 0x87E0
#endif //GL_NORMALIZED_RANGE_EXT
#ifndef GL_FULL_RANGE_EXT
#define GL_FULL_RANGE_EXT 0x87E1
#endif //GL_FULL_RANGE_EXT
#ifndef GL_CURRENT_VERTEX_EXT
#define GL_CURRENT_VERTEX_EXT 0x87E2
#endif //GL_CURRENT_VERTEX_EXT
#ifndef GL_MVP_MATRIX_EXT
#define GL_MVP_MATRIX_EXT 0x87E3
#endif //GL_MVP_MATRIX_EXT
#ifndef GL_VARIANT_VALUE_EXT
#define GL_VARIANT_VALUE_EXT 0x87E4
#endif //GL_VARIANT_VALUE_EXT
#ifndef GL_VARIANT_DATATYPE_EXT
#define GL_VARIANT_DATATYPE_EXT 0x87E5
#endif //GL_VARIANT_DATATYPE_EXT
#ifndef GL_VARIANT_ARRAY_STRIDE_EXT
#define GL_VARIANT_ARRAY_STRIDE_EXT 0x87E6
#endif //GL_VARIANT_ARRAY_STRIDE_EXT
#ifndef GL_VARIANT_ARRAY_TYPE_EXT
#define GL_VARIANT_ARRAY_TYPE_EXT 0x87E7
#endif //GL_VARIANT_ARRAY_TYPE_EXT
#ifndef GL_VARIANT_ARRAY_EXT
#define GL_VARIANT_ARRAY_EXT 0x87E8
#endif //GL_VARIANT_ARRAY_EXT
#ifndef GL_VARIANT_ARRAY_POINTER_EXT
#define GL_VARIANT_ARRAY_POINTER_EXT 0x87E9
#endif //GL_VARIANT_ARRAY_POINTER_EXT
#ifndef GL_INVARIANT_VALUE_EXT
#define GL_INVARIANT_VALUE_EXT 0x87EA
#endif //GL_INVARIANT_VALUE_EXT
#ifndef GL_INVARIANT_DATATYPE_EXT
#define GL_INVARIANT_DATATYPE_EXT 0x87EB
#endif //GL_INVARIANT_DATATYPE_EXT
#ifndef GL_LOCAL_CONSTANT_VALUE_EXT
#define GL_LOCAL_CONSTANT_VALUE_EXT 0x87EC
#endif //GL_LOCAL_CONSTANT_VALUE_EXT
#ifndef GL_LOCAL_CONSTANT_DATATYPE_EXT
#define GL_LOCAL_CONSTANT_DATATYPE_EXT 0x87ED
#endif //GL_LOCAL_CONSTANT_DATATYPE_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BeginVertexShaderEXT
#define GL_ALT_FUNDEF_BeginVertexShaderEXT
typedef void (*PFNGLBEGINVERTEXSHADEREXTPROC_ALT)();
static inline void glBeginVertexShaderEXT()
{
	static PFNGLBEGINVERTEXSHADEREXTPROC_ALT fn=(PFNGLBEGINVERTEXSHADEREXTPROC_ALT)glaltGetProcAddressExtension("glBeginVertexShaderEXT","GL_EXT_vertex_shader");
	 fn();
}
#endif

#ifndef	GL_ALT_FUNDEF_BindLightParameterEXT
#define GL_ALT_FUNDEF_BindLightParameterEXT
typedef GLuint (*PFNGLBINDLIGHTPARAMETEREXTPROC_ALT)(GLenum,GLenum);
static inline GLuint glBindLightParameterEXT(GLenum light1,GLenum value1)
{
	static PFNGLBINDLIGHTPARAMETEREXTPROC_ALT fn=(PFNGLBINDLIGHTPARAMETEREXTPROC_ALT)glaltGetProcAddressExtension("glBindLightParameterEXT","GL_EXT_vertex_shader");
	return fn(light1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_BindMaterialParameterEXT
#define GL_ALT_FUNDEF_BindMaterialParameterEXT
typedef GLuint (*PFNGLBINDMATERIALPARAMETEREXTPROC_ALT)(GLenum,GLenum);
static inline GLuint glBindMaterialParameterEXT(GLenum face1,GLenum value1)
{
	static PFNGLBINDMATERIALPARAMETEREXTPROC_ALT fn=(PFNGLBINDMATERIALPARAMETEREXTPROC_ALT)glaltGetProcAddressExtension("glBindMaterialParameterEXT","GL_EXT_vertex_shader");
	return fn(face1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_BindParameterEXT
#define GL_ALT_FUNDEF_BindParameterEXT
typedef GLuint (*PFNGLBINDPARAMETEREXTPROC_ALT)(GLenum);
static inline GLuint glBindParameterEXT(GLenum value1)
{
	static PFNGLBINDPARAMETEREXTPROC_ALT fn=(PFNGLBINDPARAMETEREXTPROC_ALT)glaltGetProcAddressExtension("glBindParameterEXT","GL_EXT_vertex_shader");
	return fn(value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_BindTexGenParameterEXT
#define GL_ALT_FUNDEF_BindTexGenParameterEXT
typedef GLuint (*PFNGLBINDTEXGENPARAMETEREXTPROC_ALT)(GLenum,GLenum,GLenum);
static inline GLuint glBindTexGenParameterEXT(GLenum unit1,GLenum coord1,GLenum value1)
{
	static PFNGLBINDTEXGENPARAMETEREXTPROC_ALT fn=(PFNGLBINDTEXGENPARAMETEREXTPROC_ALT)glaltGetProcAddressExtension("glBindTexGenParameterEXT","GL_EXT_vertex_shader");
	return fn(unit1,coord1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_BindTextureUnitParameterEXT
#define GL_ALT_FUNDEF_BindTextureUnitParameterEXT
typedef GLuint (*PFNGLBINDTEXTUREUNITPARAMETEREXTPROC_ALT)(GLenum,GLenum);
static inline GLuint glBindTextureUnitParameterEXT(GLenum unit1,GLenum value1)
{
	static PFNGLBINDTEXTUREUNITPARAMETEREXTPROC_ALT fn=(PFNGLBINDTEXTUREUNITPARAMETEREXTPROC_ALT)glaltGetProcAddressExtension("glBindTextureUnitParameterEXT","GL_EXT_vertex_shader");
	return fn(unit1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_BindVertexShaderEXT
#define GL_ALT_FUNDEF_BindVertexShaderEXT
typedef void (*PFNGLBINDVERTEXSHADEREXTPROC_ALT)(GLuint);
static inline void glBindVertexShaderEXT(GLuint id1)
{
	static PFNGLBINDVERTEXSHADEREXTPROC_ALT fn=(PFNGLBINDVERTEXSHADEREXTPROC_ALT)glaltGetProcAddressExtension("glBindVertexShaderEXT","GL_EXT_vertex_shader");
	 fn(id1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DeleteVertexShaderEXT
#define GL_ALT_FUNDEF_DeleteVertexShaderEXT
typedef void (*PFNGLDELETEVERTEXSHADEREXTPROC_ALT)(GLuint);
static inline void glDeleteVertexShaderEXT(GLuint id1)
{
	static PFNGLDELETEVERTEXSHADEREXTPROC_ALT fn=(PFNGLDELETEVERTEXSHADEREXTPROC_ALT)glaltGetProcAddressExtension("glDeleteVertexShaderEXT","GL_EXT_vertex_shader");
	 fn(id1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DisableVariantClientStateEXT
#define GL_ALT_FUNDEF_DisableVariantClientStateEXT
typedef void (*PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC_ALT)(GLuint);
static inline void glDisableVariantClientStateEXT(GLuint id1)
{
	static PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC_ALT fn=(PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC_ALT)glaltGetProcAddressExtension("glDisableVariantClientStateEXT","GL_EXT_vertex_shader");
	 fn(id1);
}
#endif

#ifndef	GL_ALT_FUNDEF_EnableVariantClientStateEXT
#define GL_ALT_FUNDEF_EnableVariantClientStateEXT
typedef void (*PFNGLENABLEVARIANTCLIENTSTATEEXTPROC_ALT)(GLuint);
static inline void glEnableVariantClientStateEXT(GLuint id1)
{
	static PFNGLENABLEVARIANTCLIENTSTATEEXTPROC_ALT fn=(PFNGLENABLEVARIANTCLIENTSTATEEXTPROC_ALT)glaltGetProcAddressExtension("glEnableVariantClientStateEXT","GL_EXT_vertex_shader");
	 fn(id1);
}
#endif

#ifndef	GL_ALT_FUNDEF_EndVertexShaderEXT
#define GL_ALT_FUNDEF_EndVertexShaderEXT
typedef void (*PFNGLENDVERTEXSHADEREXTPROC_ALT)();
static inline void glEndVertexShaderEXT()
{
	static PFNGLENDVERTEXSHADEREXTPROC_ALT fn=(PFNGLENDVERTEXSHADEREXTPROC_ALT)glaltGetProcAddressExtension("glEndVertexShaderEXT","GL_EXT_vertex_shader");
	 fn();
}
#endif

#ifndef	GL_ALT_FUNDEF_ExtractComponentEXT
#define GL_ALT_FUNDEF_ExtractComponentEXT
typedef void (*PFNGLEXTRACTCOMPONENTEXTPROC_ALT)(GLuint,GLuint,GLuint);
static inline void glExtractComponentEXT(GLuint res1,GLuint src1,GLuint num1)
{
	static PFNGLEXTRACTCOMPONENTEXTPROC_ALT fn=(PFNGLEXTRACTCOMPONENTEXTPROC_ALT)glaltGetProcAddressExtension("glExtractComponentEXT","GL_EXT_vertex_shader");
	 fn(res1,src1,num1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GenSymbolsEXT
#define GL_ALT_FUNDEF_GenSymbolsEXT
typedef GLuint (*PFNGLGENSYMBOLSEXTPROC_ALT)(GLenum,GLenum,GLenum,GLuint);
static inline GLuint glGenSymbolsEXT(GLenum datatype1,GLenum storagetype1,GLenum range1,GLuint components1)
{
	static PFNGLGENSYMBOLSEXTPROC_ALT fn=(PFNGLGENSYMBOLSEXTPROC_ALT)glaltGetProcAddressExtension("glGenSymbolsEXT","GL_EXT_vertex_shader");
	return fn(datatype1,storagetype1,range1,components1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GenVertexShadersEXT
#define GL_ALT_FUNDEF_GenVertexShadersEXT
typedef GLuint (*PFNGLGENVERTEXSHADERSEXTPROC_ALT)(GLuint);
static inline GLuint glGenVertexShadersEXT(GLuint range1)
{
	static PFNGLGENVERTEXSHADERSEXTPROC_ALT fn=(PFNGLGENVERTEXSHADERSEXTPROC_ALT)glaltGetProcAddressExtension("glGenVertexShadersEXT","GL_EXT_vertex_shader");
	return fn(range1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetInvariantBooleanvEXT
#define GL_ALT_FUNDEF_GetInvariantBooleanvEXT
typedef void (*PFNGLGETINVARIANTBOOLEANVEXTPROC_ALT)(GLuint,GLenum,GLboolean *);
static inline void glGetInvariantBooleanvEXT(GLuint id1,GLenum value1,GLboolean * data1)
{
	static PFNGLGETINVARIANTBOOLEANVEXTPROC_ALT fn=(PFNGLGETINVARIANTBOOLEANVEXTPROC_ALT)glaltGetProcAddressExtension("glGetInvariantBooleanvEXT","GL_EXT_vertex_shader");
	 fn(id1,value1,data1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetInvariantFloatvEXT
#define GL_ALT_FUNDEF_GetInvariantFloatvEXT
typedef void (*PFNGLGETINVARIANTFLOATVEXTPROC_ALT)(GLuint,GLenum,GLfloat *);
static inline void glGetInvariantFloatvEXT(GLuint id1,GLenum value1,GLfloat * data1)
{
	static PFNGLGETINVARIANTFLOATVEXTPROC_ALT fn=(PFNGLGETINVARIANTFLOATVEXTPROC_ALT)glaltGetProcAddressExtension("glGetInvariantFloatvEXT","GL_EXT_vertex_shader");
	 fn(id1,value1,data1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetInvariantIntegervEXT
#define GL_ALT_FUNDEF_GetInvariantIntegervEXT
typedef void (*PFNGLGETINVARIANTINTEGERVEXTPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetInvariantIntegervEXT(GLuint id1,GLenum value1,GLint * data1)
{
	static PFNGLGETINVARIANTINTEGERVEXTPROC_ALT fn=(PFNGLGETINVARIANTINTEGERVEXTPROC_ALT)glaltGetProcAddressExtension("glGetInvariantIntegervEXT","GL_EXT_vertex_shader");
	 fn(id1,value1,data1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetLocalConstantBooleanvEXT
#define GL_ALT_FUNDEF_GetLocalConstantBooleanvEXT
typedef void (*PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC_ALT)(GLuint,GLenum,GLboolean *);
static inline void glGetLocalConstantBooleanvEXT(GLuint id1,GLenum value1,GLboolean * data1)
{
	static PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC_ALT fn=(PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC_ALT)glaltGetProcAddressExtension("glGetLocalConstantBooleanvEXT","GL_EXT_vertex_shader");
	 fn(id1,value1,data1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetLocalConstantFloatvEXT
#define GL_ALT_FUNDEF_GetLocalConstantFloatvEXT
typedef void (*PFNGLGETLOCALCONSTANTFLOATVEXTPROC_ALT)(GLuint,GLenum,GLfloat *);
static inline void glGetLocalConstantFloatvEXT(GLuint id1,GLenum value1,GLfloat * data1)
{
	static PFNGLGETLOCALCONSTANTFLOATVEXTPROC_ALT fn=(PFNGLGETLOCALCONSTANTFLOATVEXTPROC_ALT)glaltGetProcAddressExtension("glGetLocalConstantFloatvEXT","GL_EXT_vertex_shader");
	 fn(id1,value1,data1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetLocalConstantIntegervEXT
#define GL_ALT_FUNDEF_GetLocalConstantIntegervEXT
typedef void (*PFNGLGETLOCALCONSTANTINTEGERVEXTPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetLocalConstantIntegervEXT(GLuint id1,GLenum value1,GLint * data1)
{
	static PFNGLGETLOCALCONSTANTINTEGERVEXTPROC_ALT fn=(PFNGLGETLOCALCONSTANTINTEGERVEXTPROC_ALT)glaltGetProcAddressExtension("glGetLocalConstantIntegervEXT","GL_EXT_vertex_shader");
	 fn(id1,value1,data1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetVariantBooleanvEXT
#define GL_ALT_FUNDEF_GetVariantBooleanvEXT
typedef void (*PFNGLGETVARIANTBOOLEANVEXTPROC_ALT)(GLuint,GLenum,GLboolean *);
static inline void glGetVariantBooleanvEXT(GLuint id1,GLenum value1,GLboolean * data1)
{
	static PFNGLGETVARIANTBOOLEANVEXTPROC_ALT fn=(PFNGLGETVARIANTBOOLEANVEXTPROC_ALT)glaltGetProcAddressExtension("glGetVariantBooleanvEXT","GL_EXT_vertex_shader");
	 fn(id1,value1,data1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetVariantFloatvEXT
#define GL_ALT_FUNDEF_GetVariantFloatvEXT
typedef void (*PFNGLGETVARIANTFLOATVEXTPROC_ALT)(GLuint,GLenum,GLfloat *);
static inline void glGetVariantFloatvEXT(GLuint id1,GLenum value1,GLfloat * data1)
{
	static PFNGLGETVARIANTFLOATVEXTPROC_ALT fn=(PFNGLGETVARIANTFLOATVEXTPROC_ALT)glaltGetProcAddressExtension("glGetVariantFloatvEXT","GL_EXT_vertex_shader");
	 fn(id1,value1,data1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetVariantIntegervEXT
#define GL_ALT_FUNDEF_GetVariantIntegervEXT
typedef void (*PFNGLGETVARIANTINTEGERVEXTPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetVariantIntegervEXT(GLuint id1,GLenum value1,GLint * data1)
{
	static PFNGLGETVARIANTINTEGERVEXTPROC_ALT fn=(PFNGLGETVARIANTINTEGERVEXTPROC_ALT)glaltGetProcAddressExtension("glGetVariantIntegervEXT","GL_EXT_vertex_shader");
	 fn(id1,value1,data1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetVariantPointervEXT
#define GL_ALT_FUNDEF_GetVariantPointervEXT
typedef void (*PFNGLGETVARIANTPOINTERVEXTPROC_ALT)(GLuint,GLenum,void **);
static inline void glGetVariantPointervEXT(GLuint id1,GLenum value1,void ** data1)
{
	static PFNGLGETVARIANTPOINTERVEXTPROC_ALT fn=(PFNGLGETVARIANTPOINTERVEXTPROC_ALT)glaltGetProcAddressExtension("glGetVariantPointervEXT","GL_EXT_vertex_shader");
	 fn(id1,value1,data1);
}
#endif

#ifndef	GL_ALT_FUNDEF_InsertComponentEXT
#define GL_ALT_FUNDEF_InsertComponentEXT
typedef void (*PFNGLINSERTCOMPONENTEXTPROC_ALT)(GLuint,GLuint,GLuint);
static inline void glInsertComponentEXT(GLuint res1,GLuint src1,GLuint num1)
{
	static PFNGLINSERTCOMPONENTEXTPROC_ALT fn=(PFNGLINSERTCOMPONENTEXTPROC_ALT)glaltGetProcAddressExtension("glInsertComponentEXT","GL_EXT_vertex_shader");
	 fn(res1,src1,num1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IsVariantEnabledEXT
#define GL_ALT_FUNDEF_IsVariantEnabledEXT
typedef GLboolean (*PFNGLISVARIANTENABLEDEXTPROC_ALT)(GLuint,GLenum);
static inline GLboolean glIsVariantEnabledEXT(GLuint id1,GLenum cap1)
{
	static PFNGLISVARIANTENABLEDEXTPROC_ALT fn=(PFNGLISVARIANTENABLEDEXTPROC_ALT)glaltGetProcAddressExtension("glIsVariantEnabledEXT","GL_EXT_vertex_shader");
	return fn(id1,cap1);
}
#endif

#ifndef	GL_ALT_FUNDEF_SetInvariantEXT
#define GL_ALT_FUNDEF_SetInvariantEXT
typedef void (*PFNGLSETINVARIANTEXTPROC_ALT)(GLuint,GLenum,const void *);
static inline void glSetInvariantEXT(GLuint id1,GLenum type1,const void * addr1)
{
	static PFNGLSETINVARIANTEXTPROC_ALT fn=(PFNGLSETINVARIANTEXTPROC_ALT)glaltGetProcAddressExtension("glSetInvariantEXT","GL_EXT_vertex_shader");
	 fn(id1,type1,addr1);
}
#endif

#ifndef	GL_ALT_FUNDEF_SetLocalConstantEXT
#define GL_ALT_FUNDEF_SetLocalConstantEXT
typedef void (*PFNGLSETLOCALCONSTANTEXTPROC_ALT)(GLuint,GLenum,const void *);
static inline void glSetLocalConstantEXT(GLuint id1,GLenum type1,const void * addr1)
{
	static PFNGLSETLOCALCONSTANTEXTPROC_ALT fn=(PFNGLSETLOCALCONSTANTEXTPROC_ALT)glaltGetProcAddressExtension("glSetLocalConstantEXT","GL_EXT_vertex_shader");
	 fn(id1,type1,addr1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ShaderOp1EXT
#define GL_ALT_FUNDEF_ShaderOp1EXT
typedef void (*PFNGLSHADEROP1EXTPROC_ALT)(GLenum,GLuint,GLuint);
static inline void glShaderOp1EXT(GLenum op1,GLuint res1,GLuint arg11)
{
	static PFNGLSHADEROP1EXTPROC_ALT fn=(PFNGLSHADEROP1EXTPROC_ALT)glaltGetProcAddressExtension("glShaderOp1EXT","GL_EXT_vertex_shader");
	 fn(op1,res1,arg11);
}
#endif

#ifndef	GL_ALT_FUNDEF_ShaderOp2EXT
#define GL_ALT_FUNDEF_ShaderOp2EXT
typedef void (*PFNGLSHADEROP2EXTPROC_ALT)(GLenum,GLuint,GLuint,GLuint);
static inline void glShaderOp2EXT(GLenum op1,GLuint res1,GLuint arg11,GLuint arg21)
{
	static PFNGLSHADEROP2EXTPROC_ALT fn=(PFNGLSHADEROP2EXTPROC_ALT)glaltGetProcAddressExtension("glShaderOp2EXT","GL_EXT_vertex_shader");
	 fn(op1,res1,arg11,arg21);
}
#endif

#ifndef	GL_ALT_FUNDEF_ShaderOp3EXT
#define GL_ALT_FUNDEF_ShaderOp3EXT
typedef void (*PFNGLSHADEROP3EXTPROC_ALT)(GLenum,GLuint,GLuint,GLuint,GLuint);
static inline void glShaderOp3EXT(GLenum op1,GLuint res1,GLuint arg11,GLuint arg21,GLuint arg31)
{
	static PFNGLSHADEROP3EXTPROC_ALT fn=(PFNGLSHADEROP3EXTPROC_ALT)glaltGetProcAddressExtension("glShaderOp3EXT","GL_EXT_vertex_shader");
	 fn(op1,res1,arg11,arg21,arg31);
}
#endif

#ifndef	GL_ALT_FUNDEF_SwizzleEXT
#define GL_ALT_FUNDEF_SwizzleEXT
typedef void (*PFNGLSWIZZLEEXTPROC_ALT)(GLuint,GLuint,GLenum,GLenum,GLenum,GLenum);
static inline void glSwizzleEXT(GLuint res1,GLuint in1,GLenum outX1,GLenum outY1,GLenum outZ1,GLenum outW1)
{
	static PFNGLSWIZZLEEXTPROC_ALT fn=(PFNGLSWIZZLEEXTPROC_ALT)glaltGetProcAddressExtension("glSwizzleEXT","GL_EXT_vertex_shader");
	 fn(res1,in1,outX1,outY1,outZ1,outW1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VariantPointerEXT
#define GL_ALT_FUNDEF_VariantPointerEXT
typedef void (*PFNGLVARIANTPOINTEREXTPROC_ALT)(GLuint,GLenum,GLuint,const void *);
static inline void glVariantPointerEXT(GLuint id1,GLenum type1,GLuint stride1,const void * addr1)
{
	static PFNGLVARIANTPOINTEREXTPROC_ALT fn=(PFNGLVARIANTPOINTEREXTPROC_ALT)glaltGetProcAddressExtension("glVariantPointerEXT","GL_EXT_vertex_shader");
	 fn(id1,type1,stride1,addr1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VariantbvEXT
#define GL_ALT_FUNDEF_VariantbvEXT
typedef void (*PFNGLVARIANTBVEXTPROC_ALT)(GLuint,const GLbyte *);
static inline void glVariantbvEXT(GLuint id1,const GLbyte * addr1)
{
	static PFNGLVARIANTBVEXTPROC_ALT fn=(PFNGLVARIANTBVEXTPROC_ALT)glaltGetProcAddressExtension("glVariantbvEXT","GL_EXT_vertex_shader");
	 fn(id1,addr1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VariantdvEXT
#define GL_ALT_FUNDEF_VariantdvEXT
typedef void (*PFNGLVARIANTDVEXTPROC_ALT)(GLuint,const GLdouble *);
static inline void glVariantdvEXT(GLuint id1,const GLdouble * addr1)
{
	static PFNGLVARIANTDVEXTPROC_ALT fn=(PFNGLVARIANTDVEXTPROC_ALT)glaltGetProcAddressExtension("glVariantdvEXT","GL_EXT_vertex_shader");
	 fn(id1,addr1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VariantfvEXT
#define GL_ALT_FUNDEF_VariantfvEXT
typedef void (*PFNGLVARIANTFVEXTPROC_ALT)(GLuint,const GLfloat *);
static inline void glVariantfvEXT(GLuint id1,const GLfloat * addr1)
{
	static PFNGLVARIANTFVEXTPROC_ALT fn=(PFNGLVARIANTFVEXTPROC_ALT)glaltGetProcAddressExtension("glVariantfvEXT","GL_EXT_vertex_shader");
	 fn(id1,addr1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VariantivEXT
#define GL_ALT_FUNDEF_VariantivEXT
typedef void (*PFNGLVARIANTIVEXTPROC_ALT)(GLuint,const GLint *);
static inline void glVariantivEXT(GLuint id1,const GLint * addr1)
{
	static PFNGLVARIANTIVEXTPROC_ALT fn=(PFNGLVARIANTIVEXTPROC_ALT)glaltGetProcAddressExtension("glVariantivEXT","GL_EXT_vertex_shader");
	 fn(id1,addr1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VariantsvEXT
#define GL_ALT_FUNDEF_VariantsvEXT
typedef void (*PFNGLVARIANTSVEXTPROC_ALT)(GLuint,const GLshort *);
static inline void glVariantsvEXT(GLuint id1,const GLshort * addr1)
{
	static PFNGLVARIANTSVEXTPROC_ALT fn=(PFNGLVARIANTSVEXTPROC_ALT)glaltGetProcAddressExtension("glVariantsvEXT","GL_EXT_vertex_shader");
	 fn(id1,addr1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VariantubvEXT
#define GL_ALT_FUNDEF_VariantubvEXT
typedef void (*PFNGLVARIANTUBVEXTPROC_ALT)(GLuint,const GLubyte *);
static inline void glVariantubvEXT(GLuint id1,const GLubyte * addr1)
{
	static PFNGLVARIANTUBVEXTPROC_ALT fn=(PFNGLVARIANTUBVEXTPROC_ALT)glaltGetProcAddressExtension("glVariantubvEXT","GL_EXT_vertex_shader");
	 fn(id1,addr1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VariantuivEXT
#define GL_ALT_FUNDEF_VariantuivEXT
typedef void (*PFNGLVARIANTUIVEXTPROC_ALT)(GLuint,const GLuint *);
static inline void glVariantuivEXT(GLuint id1,const GLuint * addr1)
{
	static PFNGLVARIANTUIVEXTPROC_ALT fn=(PFNGLVARIANTUIVEXTPROC_ALT)glaltGetProcAddressExtension("glVariantuivEXT","GL_EXT_vertex_shader");
	 fn(id1,addr1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VariantusvEXT
#define GL_ALT_FUNDEF_VariantusvEXT
typedef void (*PFNGLVARIANTUSVEXTPROC_ALT)(GLuint,const GLushort *);
static inline void glVariantusvEXT(GLuint id1,const GLushort * addr1)
{
	static PFNGLVARIANTUSVEXTPROC_ALT fn=(PFNGLVARIANTUSVEXTPROC_ALT)glaltGetProcAddressExtension("glVariantusvEXT","GL_EXT_vertex_shader");
	 fn(id1,addr1);
}
#endif

#ifndef	GL_ALT_FUNDEF_WriteMaskEXT
#define GL_ALT_FUNDEF_WriteMaskEXT
typedef void (*PFNGLWRITEMASKEXTPROC_ALT)(GLuint,GLuint,GLenum,GLenum,GLenum,GLenum);
static inline void glWriteMaskEXT(GLuint res1,GLuint in1,GLenum outX1,GLenum outY1,GLenum outZ1,GLenum outW1)
{
	static PFNGLWRITEMASKEXTPROC_ALT fn=(PFNGLWRITEMASKEXTPROC_ALT)glaltGetProcAddressExtension("glWriteMaskEXT","GL_EXT_vertex_shader");
	 fn(res1,in1,outX1,outY1,outZ1,outW1);
}
#endif
CGUARDEND

#endif

#ifndef GL_EXT_vertex_weighting
#define GL_EXT_vertex_weighting
#ifndef GL_MODELVIEW0_STACK_DEPTH_EXT
#define GL_MODELVIEW0_STACK_DEPTH_EXT 0x0BA3
#endif //GL_MODELVIEW0_STACK_DEPTH_EXT
#ifndef GL_MODELVIEW0_MATRIX_EXT
#define GL_MODELVIEW0_MATRIX_EXT 0x0BA6
#endif //GL_MODELVIEW0_MATRIX_EXT
#ifndef GL_MODELVIEW0_EXT
#define GL_MODELVIEW0_EXT 0x1700
#endif //GL_MODELVIEW0_EXT
#ifndef GL_MODELVIEW1_STACK_DEPTH_EXT
#define GL_MODELVIEW1_STACK_DEPTH_EXT 0x8502
#endif //GL_MODELVIEW1_STACK_DEPTH_EXT
#ifndef GL_MODELVIEW1_MATRIX_EXT
#define GL_MODELVIEW1_MATRIX_EXT 0x8506
#endif //GL_MODELVIEW1_MATRIX_EXT
#ifndef GL_VERTEX_WEIGHTING_EXT
#define GL_VERTEX_WEIGHTING_EXT 0x8509
#endif //GL_VERTEX_WEIGHTING_EXT
#ifndef GL_MODELVIEW1_EXT
#define GL_MODELVIEW1_EXT 0x850A
#endif //GL_MODELVIEW1_EXT
#ifndef GL_CURRENT_VERTEX_WEIGHT_EXT
#define GL_CURRENT_VERTEX_WEIGHT_EXT 0x850B
#endif //GL_CURRENT_VERTEX_WEIGHT_EXT
#ifndef GL_VERTEX_WEIGHT_ARRAY_EXT
#define GL_VERTEX_WEIGHT_ARRAY_EXT 0x850C
#endif //GL_VERTEX_WEIGHT_ARRAY_EXT
#ifndef GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT
#define GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT 0x850D
#endif //GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT
#ifndef GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT
#define GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT 0x850E
#endif //GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT
#ifndef GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT
#define GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT 0x850F
#endif //GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT
#ifndef GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT
#define GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT 0x8510
#endif //GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_VertexWeightPointerEXT
#define GL_ALT_FUNDEF_VertexWeightPointerEXT
typedef void (*PFNGLVERTEXWEIGHTPOINTEREXTPROC_ALT)(GLint,GLenum,GLsizei,const void *);
static inline void glVertexWeightPointerEXT(GLint size1,GLenum type1,GLsizei stride1,const void * pointer1)
{
	static PFNGLVERTEXWEIGHTPOINTEREXTPROC_ALT fn=(PFNGLVERTEXWEIGHTPOINTEREXTPROC_ALT)glaltGetProcAddressExtension("glVertexWeightPointerEXT","GL_EXT_vertex_weighting");
	 fn(size1,type1,stride1,pointer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexWeightfEXT
#define GL_ALT_FUNDEF_VertexWeightfEXT
typedef void (*PFNGLVERTEXWEIGHTFEXTPROC_ALT)(GLfloat);
static inline void glVertexWeightfEXT(GLfloat weight1)
{
	static PFNGLVERTEXWEIGHTFEXTPROC_ALT fn=(PFNGLVERTEXWEIGHTFEXTPROC_ALT)glaltGetProcAddressExtension("glVertexWeightfEXT","GL_EXT_vertex_weighting");
	 fn(weight1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexWeightfvEXT
#define GL_ALT_FUNDEF_VertexWeightfvEXT
typedef void (*PFNGLVERTEXWEIGHTFVEXTPROC_ALT)(const GLfloat *);
static inline void glVertexWeightfvEXT(const GLfloat * weight1)
{
	static PFNGLVERTEXWEIGHTFVEXTPROC_ALT fn=(PFNGLVERTEXWEIGHTFVEXTPROC_ALT)glaltGetProcAddressExtension("glVertexWeightfvEXT","GL_EXT_vertex_weighting");
	 fn(weight1);
}
#endif
CGUARDEND

#endif

#ifndef GL_EXT_x11_sync_object
#define GL_EXT_x11_sync_object
#ifndef GL_SYNC_X11_FENCE_EXT
#define GL_SYNC_X11_FENCE_EXT 0x90E1
#endif //GL_SYNC_X11_FENCE_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ImportSyncEXT
#define GL_ALT_FUNDEF_ImportSyncEXT
typedef GLsync (*PFNGLIMPORTSYNCEXTPROC_ALT)(GLenum,GLintptr,GLbitfield);
static inline GLsync glImportSyncEXT(GLenum external_sync_type1,GLintptr external_sync1,GLbitfield flags1)
{
	static PFNGLIMPORTSYNCEXTPROC_ALT fn=(PFNGLIMPORTSYNCEXTPROC_ALT)glaltGetProcAddressExtension("glImportSyncEXT","GL_EXT_x11_sync_object");
	return fn(external_sync_type1,external_sync1,flags1);
}
#endif
CGUARDEND

#endif

#ifndef GL_GREMEDY_frame_terminator
#define GL_GREMEDY_frame_terminator
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_FrameTerminatorGREMEDY
#define GL_ALT_FUNDEF_FrameTerminatorGREMEDY
typedef void (*PFNGLFRAMETERMINATORGREMEDYPROC_ALT)();
static inline void glFrameTerminatorGREMEDY()
{
	static PFNGLFRAMETERMINATORGREMEDYPROC_ALT fn=(PFNGLFRAMETERMINATORGREMEDYPROC_ALT)glaltGetProcAddressExtension("glFrameTerminatorGREMEDY","GL_GREMEDY_frame_terminator");
	 fn();
}
#endif
CGUARDEND

#endif

#ifndef GL_GREMEDY_string_marker
#define GL_GREMEDY_string_marker
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_StringMarkerGREMEDY
#define GL_ALT_FUNDEF_StringMarkerGREMEDY
typedef void (*PFNGLSTRINGMARKERGREMEDYPROC_ALT)(GLsizei,const void *);
static inline void glStringMarkerGREMEDY(GLsizei len1,const void * string1)
{
	static PFNGLSTRINGMARKERGREMEDYPROC_ALT fn=(PFNGLSTRINGMARKERGREMEDYPROC_ALT)glaltGetProcAddressExtension("glStringMarkerGREMEDY","GL_GREMEDY_string_marker");
	 fn(len1,string1);
}
#endif
CGUARDEND

#endif

#ifndef GL_HP_convolution_border_modes
#define GL_HP_convolution_border_modes
#ifndef GL_IGNORE_BORDER_HP
#define GL_IGNORE_BORDER_HP 0x8150
#endif //GL_IGNORE_BORDER_HP
#ifndef GL_CONSTANT_BORDER_HP
#define GL_CONSTANT_BORDER_HP 0x8151
#endif //GL_CONSTANT_BORDER_HP
#ifndef GL_REPLICATE_BORDER_HP
#define GL_REPLICATE_BORDER_HP 0x8153
#endif //GL_REPLICATE_BORDER_HP
#ifndef GL_CONVOLUTION_BORDER_COLOR_HP
#define GL_CONVOLUTION_BORDER_COLOR_HP 0x8154
#endif //GL_CONVOLUTION_BORDER_COLOR_HP
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_HP_image_transform
#define GL_HP_image_transform
#ifndef GL_IMAGE_SCALE_X_HP
#define GL_IMAGE_SCALE_X_HP 0x8155
#endif //GL_IMAGE_SCALE_X_HP
#ifndef GL_IMAGE_SCALE_Y_HP
#define GL_IMAGE_SCALE_Y_HP 0x8156
#endif //GL_IMAGE_SCALE_Y_HP
#ifndef GL_IMAGE_TRANSLATE_X_HP
#define GL_IMAGE_TRANSLATE_X_HP 0x8157
#endif //GL_IMAGE_TRANSLATE_X_HP
#ifndef GL_IMAGE_TRANSLATE_Y_HP
#define GL_IMAGE_TRANSLATE_Y_HP 0x8158
#endif //GL_IMAGE_TRANSLATE_Y_HP
#ifndef GL_IMAGE_ROTATE_ANGLE_HP
#define GL_IMAGE_ROTATE_ANGLE_HP 0x8159
#endif //GL_IMAGE_ROTATE_ANGLE_HP
#ifndef GL_IMAGE_ROTATE_ORIGIN_X_HP
#define GL_IMAGE_ROTATE_ORIGIN_X_HP 0x815A
#endif //GL_IMAGE_ROTATE_ORIGIN_X_HP
#ifndef GL_IMAGE_ROTATE_ORIGIN_Y_HP
#define GL_IMAGE_ROTATE_ORIGIN_Y_HP 0x815B
#endif //GL_IMAGE_ROTATE_ORIGIN_Y_HP
#ifndef GL_IMAGE_MAG_FILTER_HP
#define GL_IMAGE_MAG_FILTER_HP 0x815C
#endif //GL_IMAGE_MAG_FILTER_HP
#ifndef GL_IMAGE_MIN_FILTER_HP
#define GL_IMAGE_MIN_FILTER_HP 0x815D
#endif //GL_IMAGE_MIN_FILTER_HP
#ifndef GL_IMAGE_CUBIC_WEIGHT_HP
#define GL_IMAGE_CUBIC_WEIGHT_HP 0x815E
#endif //GL_IMAGE_CUBIC_WEIGHT_HP
#ifndef GL_CUBIC_HP
#define GL_CUBIC_HP 0x815F
#endif //GL_CUBIC_HP
#ifndef GL_AVERAGE_HP
#define GL_AVERAGE_HP 0x8160
#endif //GL_AVERAGE_HP
#ifndef GL_IMAGE_TRANSFORM_2D_HP
#define GL_IMAGE_TRANSFORM_2D_HP 0x8161
#endif //GL_IMAGE_TRANSFORM_2D_HP
#ifndef GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
#define GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP 0x8162
#endif //GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
#ifndef GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
#define GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP 0x8163
#endif //GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetImageTransformParameterfvHP
#define GL_ALT_FUNDEF_GetImageTransformParameterfvHP
typedef void (*PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC_ALT)(GLenum,GLenum,GLfloat *);
static inline void glGetImageTransformParameterfvHP(GLenum target1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC_ALT fn=(PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC_ALT)glaltGetProcAddressExtension("glGetImageTransformParameterfvHP","GL_HP_image_transform");
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetImageTransformParameterivHP
#define GL_ALT_FUNDEF_GetImageTransformParameterivHP
typedef void (*PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetImageTransformParameterivHP(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC_ALT fn=(PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC_ALT)glaltGetProcAddressExtension("glGetImageTransformParameterivHP","GL_HP_image_transform");
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ImageTransformParameterfHP
#define GL_ALT_FUNDEF_ImageTransformParameterfHP
typedef void (*PFNGLIMAGETRANSFORMPARAMETERFHPPROC_ALT)(GLenum,GLenum,GLfloat);
static inline void glImageTransformParameterfHP(GLenum target1,GLenum pname1,GLfloat param1)
{
	static PFNGLIMAGETRANSFORMPARAMETERFHPPROC_ALT fn=(PFNGLIMAGETRANSFORMPARAMETERFHPPROC_ALT)glaltGetProcAddressExtension("glImageTransformParameterfHP","GL_HP_image_transform");
	 fn(target1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ImageTransformParameterfvHP
#define GL_ALT_FUNDEF_ImageTransformParameterfvHP
typedef void (*PFNGLIMAGETRANSFORMPARAMETERFVHPPROC_ALT)(GLenum,GLenum,const GLfloat *);
static inline void glImageTransformParameterfvHP(GLenum target1,GLenum pname1,const GLfloat * params1)
{
	static PFNGLIMAGETRANSFORMPARAMETERFVHPPROC_ALT fn=(PFNGLIMAGETRANSFORMPARAMETERFVHPPROC_ALT)glaltGetProcAddressExtension("glImageTransformParameterfvHP","GL_HP_image_transform");
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ImageTransformParameteriHP
#define GL_ALT_FUNDEF_ImageTransformParameteriHP
typedef void (*PFNGLIMAGETRANSFORMPARAMETERIHPPROC_ALT)(GLenum,GLenum,GLint);
static inline void glImageTransformParameteriHP(GLenum target1,GLenum pname1,GLint param1)
{
	static PFNGLIMAGETRANSFORMPARAMETERIHPPROC_ALT fn=(PFNGLIMAGETRANSFORMPARAMETERIHPPROC_ALT)glaltGetProcAddressExtension("glImageTransformParameteriHP","GL_HP_image_transform");
	 fn(target1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ImageTransformParameterivHP
#define GL_ALT_FUNDEF_ImageTransformParameterivHP
typedef void (*PFNGLIMAGETRANSFORMPARAMETERIVHPPROC_ALT)(GLenum,GLenum,const GLint *);
static inline void glImageTransformParameterivHP(GLenum target1,GLenum pname1,const GLint * params1)
{
	static PFNGLIMAGETRANSFORMPARAMETERIVHPPROC_ALT fn=(PFNGLIMAGETRANSFORMPARAMETERIVHPPROC_ALT)glaltGetProcAddressExtension("glImageTransformParameterivHP","GL_HP_image_transform");
	 fn(target1,pname1,params1);
}
#endif
CGUARDEND

#endif

#ifndef GL_HP_occlusion_test
#define GL_HP_occlusion_test
#ifndef GL_OCCLUSION_TEST_HP
#define GL_OCCLUSION_TEST_HP 0x8165
#endif //GL_OCCLUSION_TEST_HP
#ifndef GL_OCCLUSION_TEST_RESULT_HP
#define GL_OCCLUSION_TEST_RESULT_HP 0x8166
#endif //GL_OCCLUSION_TEST_RESULT_HP
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_HP_texture_lighting
#define GL_HP_texture_lighting
#ifndef GL_TEXTURE_LIGHTING_MODE_HP
#define GL_TEXTURE_LIGHTING_MODE_HP 0x8167
#endif //GL_TEXTURE_LIGHTING_MODE_HP
#ifndef GL_TEXTURE_POST_SPECULAR_HP
#define GL_TEXTURE_POST_SPECULAR_HP 0x8168
#endif //GL_TEXTURE_POST_SPECULAR_HP
#ifndef GL_TEXTURE_PRE_SPECULAR_HP
#define GL_TEXTURE_PRE_SPECULAR_HP 0x8169
#endif //GL_TEXTURE_PRE_SPECULAR_HP
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_IBM_cull_vertex
#define GL_IBM_cull_vertex
#ifndef GL_CULL_VERTEX_IBM
#define GL_CULL_VERTEX_IBM 103050
#endif //GL_CULL_VERTEX_IBM
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_IBM_multimode_draw_arrays
#define GL_IBM_multimode_draw_arrays
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_MultiModeDrawArraysIBM
#define GL_ALT_FUNDEF_MultiModeDrawArraysIBM
typedef void (*PFNGLMULTIMODEDRAWARRAYSIBMPROC_ALT)(const GLenum *,const GLint *,const GLsizei *,GLsizei,GLint);
static inline void glMultiModeDrawArraysIBM(const GLenum * mode1,const GLint * first1,const GLsizei * count1,GLsizei primcount1,GLint modestride1)
{
	static PFNGLMULTIMODEDRAWARRAYSIBMPROC_ALT fn=(PFNGLMULTIMODEDRAWARRAYSIBMPROC_ALT)glaltGetProcAddressExtension("glMultiModeDrawArraysIBM","GL_IBM_multimode_draw_arrays");
	 fn(mode1,first1,count1,primcount1,modestride1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiModeDrawElementsIBM
#define GL_ALT_FUNDEF_MultiModeDrawElementsIBM
typedef void (*PFNGLMULTIMODEDRAWELEMENTSIBMPROC_ALT)(const GLenum *,const GLsizei *,GLenum,const void *const*,GLsizei,GLint);
static inline void glMultiModeDrawElementsIBM(const GLenum * mode1,const GLsizei * count1,GLenum type1,const void *const* indices1,GLsizei primcount1,GLint modestride1)
{
	static PFNGLMULTIMODEDRAWELEMENTSIBMPROC_ALT fn=(PFNGLMULTIMODEDRAWELEMENTSIBMPROC_ALT)glaltGetProcAddressExtension("glMultiModeDrawElementsIBM","GL_IBM_multimode_draw_arrays");
	 fn(mode1,count1,type1,indices1,primcount1,modestride1);
}
#endif
CGUARDEND

#endif

#ifndef GL_IBM_rasterpos_clip
#define GL_IBM_rasterpos_clip
#ifndef GL_RASTER_POSITION_UNCLIPPED_IBM
#define GL_RASTER_POSITION_UNCLIPPED_IBM 0x19262
#endif //GL_RASTER_POSITION_UNCLIPPED_IBM
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_IBM_static_data
#define GL_IBM_static_data
#ifndef GL_ALL_STATIC_DATA_IBM
#define GL_ALL_STATIC_DATA_IBM 103060
#endif //GL_ALL_STATIC_DATA_IBM
#ifndef GL_STATIC_VERTEX_ARRAY_IBM
#define GL_STATIC_VERTEX_ARRAY_IBM 103061
#endif //GL_STATIC_VERTEX_ARRAY_IBM
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_FlushStaticDataIBM
#define GL_ALT_FUNDEF_FlushStaticDataIBM
typedef void (*PFNGLFLUSHSTATICDATAIBMPROC_ALT)(GLenum);
static inline void glFlushStaticDataIBM(GLenum target1)
{
	static PFNGLFLUSHSTATICDATAIBMPROC_ALT fn=(PFNGLFLUSHSTATICDATAIBMPROC_ALT)glaltGetProcAddressExtension("glFlushStaticDataIBM","GL_IBM_static_data");
	 fn(target1);
}
#endif
CGUARDEND

#endif

#ifndef GL_IBM_texture_mirrored_repeat
#define GL_IBM_texture_mirrored_repeat
#ifndef GL_MIRRORED_REPEAT_IBM
#define GL_MIRRORED_REPEAT_IBM 0x8370
#endif //GL_MIRRORED_REPEAT_IBM
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_IBM_vertex_array_lists
#define GL_IBM_vertex_array_lists
#ifndef GL_VERTEX_ARRAY_LIST_IBM
#define GL_VERTEX_ARRAY_LIST_IBM 103070
#endif //GL_VERTEX_ARRAY_LIST_IBM
#ifndef GL_NORMAL_ARRAY_LIST_IBM
#define GL_NORMAL_ARRAY_LIST_IBM 103071
#endif //GL_NORMAL_ARRAY_LIST_IBM
#ifndef GL_COLOR_ARRAY_LIST_IBM
#define GL_COLOR_ARRAY_LIST_IBM 103072
#endif //GL_COLOR_ARRAY_LIST_IBM
#ifndef GL_INDEX_ARRAY_LIST_IBM
#define GL_INDEX_ARRAY_LIST_IBM 103073
#endif //GL_INDEX_ARRAY_LIST_IBM
#ifndef GL_TEXTURE_COORD_ARRAY_LIST_IBM
#define GL_TEXTURE_COORD_ARRAY_LIST_IBM 103074
#endif //GL_TEXTURE_COORD_ARRAY_LIST_IBM
#ifndef GL_EDGE_FLAG_ARRAY_LIST_IBM
#define GL_EDGE_FLAG_ARRAY_LIST_IBM 103075
#endif //GL_EDGE_FLAG_ARRAY_LIST_IBM
#ifndef GL_FOG_COORDINATE_ARRAY_LIST_IBM
#define GL_FOG_COORDINATE_ARRAY_LIST_IBM 103076
#endif //GL_FOG_COORDINATE_ARRAY_LIST_IBM
#ifndef GL_SECONDARY_COLOR_ARRAY_LIST_IBM
#define GL_SECONDARY_COLOR_ARRAY_LIST_IBM 103077
#endif //GL_SECONDARY_COLOR_ARRAY_LIST_IBM
#ifndef GL_VERTEX_ARRAY_LIST_STRIDE_IBM
#define GL_VERTEX_ARRAY_LIST_STRIDE_IBM 103080
#endif //GL_VERTEX_ARRAY_LIST_STRIDE_IBM
#ifndef GL_NORMAL_ARRAY_LIST_STRIDE_IBM
#define GL_NORMAL_ARRAY_LIST_STRIDE_IBM 103081
#endif //GL_NORMAL_ARRAY_LIST_STRIDE_IBM
#ifndef GL_COLOR_ARRAY_LIST_STRIDE_IBM
#define GL_COLOR_ARRAY_LIST_STRIDE_IBM 103082
#endif //GL_COLOR_ARRAY_LIST_STRIDE_IBM
#ifndef GL_INDEX_ARRAY_LIST_STRIDE_IBM
#define GL_INDEX_ARRAY_LIST_STRIDE_IBM 103083
#endif //GL_INDEX_ARRAY_LIST_STRIDE_IBM
#ifndef GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM
#define GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM 103084
#endif //GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM
#ifndef GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM
#define GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM 103085
#endif //GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM
#ifndef GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM
#define GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM 103086
#endif //GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM
#ifndef GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM
#define GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM 103087
#endif //GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ColorPointerListIBM
#define GL_ALT_FUNDEF_ColorPointerListIBM
typedef void (*PFNGLCOLORPOINTERLISTIBMPROC_ALT)(GLint,GLenum,GLint,const void **,GLint);
static inline void glColorPointerListIBM(GLint size1,GLenum type1,GLint stride1,const void ** pointer1,GLint ptrstride1)
{
	static PFNGLCOLORPOINTERLISTIBMPROC_ALT fn=(PFNGLCOLORPOINTERLISTIBMPROC_ALT)glaltGetProcAddressExtension("glColorPointerListIBM","GL_IBM_vertex_array_lists");
	 fn(size1,type1,stride1,pointer1,ptrstride1);
}
#endif

#ifndef	GL_ALT_FUNDEF_EdgeFlagPointerListIBM
#define GL_ALT_FUNDEF_EdgeFlagPointerListIBM
typedef void (*PFNGLEDGEFLAGPOINTERLISTIBMPROC_ALT)(GLint,const GLboolean **,GLint);
static inline void glEdgeFlagPointerListIBM(GLint stride1,const GLboolean ** pointer1,GLint ptrstride1)
{
	static PFNGLEDGEFLAGPOINTERLISTIBMPROC_ALT fn=(PFNGLEDGEFLAGPOINTERLISTIBMPROC_ALT)glaltGetProcAddressExtension("glEdgeFlagPointerListIBM","GL_IBM_vertex_array_lists");
	 fn(stride1,pointer1,ptrstride1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FogCoordPointerListIBM
#define GL_ALT_FUNDEF_FogCoordPointerListIBM
typedef void (*PFNGLFOGCOORDPOINTERLISTIBMPROC_ALT)(GLenum,GLint,const void **,GLint);
static inline void glFogCoordPointerListIBM(GLenum type1,GLint stride1,const void ** pointer1,GLint ptrstride1)
{
	static PFNGLFOGCOORDPOINTERLISTIBMPROC_ALT fn=(PFNGLFOGCOORDPOINTERLISTIBMPROC_ALT)glaltGetProcAddressExtension("glFogCoordPointerListIBM","GL_IBM_vertex_array_lists");
	 fn(type1,stride1,pointer1,ptrstride1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IndexPointerListIBM
#define GL_ALT_FUNDEF_IndexPointerListIBM
typedef void (*PFNGLINDEXPOINTERLISTIBMPROC_ALT)(GLenum,GLint,const void **,GLint);
static inline void glIndexPointerListIBM(GLenum type1,GLint stride1,const void ** pointer1,GLint ptrstride1)
{
	static PFNGLINDEXPOINTERLISTIBMPROC_ALT fn=(PFNGLINDEXPOINTERLISTIBMPROC_ALT)glaltGetProcAddressExtension("glIndexPointerListIBM","GL_IBM_vertex_array_lists");
	 fn(type1,stride1,pointer1,ptrstride1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NormalPointerListIBM
#define GL_ALT_FUNDEF_NormalPointerListIBM
typedef void (*PFNGLNORMALPOINTERLISTIBMPROC_ALT)(GLenum,GLint,const void **,GLint);
static inline void glNormalPointerListIBM(GLenum type1,GLint stride1,const void ** pointer1,GLint ptrstride1)
{
	static PFNGLNORMALPOINTERLISTIBMPROC_ALT fn=(PFNGLNORMALPOINTERLISTIBMPROC_ALT)glaltGetProcAddressExtension("glNormalPointerListIBM","GL_IBM_vertex_array_lists");
	 fn(type1,stride1,pointer1,ptrstride1);
}
#endif

#ifndef	GL_ALT_FUNDEF_SecondaryColorPointerListIBM
#define GL_ALT_FUNDEF_SecondaryColorPointerListIBM
typedef void (*PFNGLSECONDARYCOLORPOINTERLISTIBMPROC_ALT)(GLint,GLenum,GLint,const void **,GLint);
static inline void glSecondaryColorPointerListIBM(GLint size1,GLenum type1,GLint stride1,const void ** pointer1,GLint ptrstride1)
{
	static PFNGLSECONDARYCOLORPOINTERLISTIBMPROC_ALT fn=(PFNGLSECONDARYCOLORPOINTERLISTIBMPROC_ALT)glaltGetProcAddressExtension("glSecondaryColorPointerListIBM","GL_IBM_vertex_array_lists");
	 fn(size1,type1,stride1,pointer1,ptrstride1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoordPointerListIBM
#define GL_ALT_FUNDEF_TexCoordPointerListIBM
typedef void (*PFNGLTEXCOORDPOINTERLISTIBMPROC_ALT)(GLint,GLenum,GLint,const void **,GLint);
static inline void glTexCoordPointerListIBM(GLint size1,GLenum type1,GLint stride1,const void ** pointer1,GLint ptrstride1)
{
	static PFNGLTEXCOORDPOINTERLISTIBMPROC_ALT fn=(PFNGLTEXCOORDPOINTERLISTIBMPROC_ALT)glaltGetProcAddressExtension("glTexCoordPointerListIBM","GL_IBM_vertex_array_lists");
	 fn(size1,type1,stride1,pointer1,ptrstride1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexPointerListIBM
#define GL_ALT_FUNDEF_VertexPointerListIBM
typedef void (*PFNGLVERTEXPOINTERLISTIBMPROC_ALT)(GLint,GLenum,GLint,const void **,GLint);
static inline void glVertexPointerListIBM(GLint size1,GLenum type1,GLint stride1,const void ** pointer1,GLint ptrstride1)
{
	static PFNGLVERTEXPOINTERLISTIBMPROC_ALT fn=(PFNGLVERTEXPOINTERLISTIBMPROC_ALT)glaltGetProcAddressExtension("glVertexPointerListIBM","GL_IBM_vertex_array_lists");
	 fn(size1,type1,stride1,pointer1,ptrstride1);
}
#endif
CGUARDEND

#endif

#ifndef GL_INGR_blend_func_separate
#define GL_INGR_blend_func_separate
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BlendFuncSeparateINGR
#define GL_ALT_FUNDEF_BlendFuncSeparateINGR
typedef void (*PFNGLBLENDFUNCSEPARATEINGRPROC_ALT)(GLenum,GLenum,GLenum,GLenum);
static inline void glBlendFuncSeparateINGR(GLenum sfactorRGB1,GLenum dfactorRGB1,GLenum sfactorAlpha1,GLenum dfactorAlpha1)
{
	static PFNGLBLENDFUNCSEPARATEINGRPROC_ALT fn=(PFNGLBLENDFUNCSEPARATEINGRPROC_ALT)glaltGetProcAddressExtension("glBlendFuncSeparateINGR","GL_INGR_blend_func_separate");
	 fn(sfactorRGB1,dfactorRGB1,sfactorAlpha1,dfactorAlpha1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_INGR_color_clamp
#define GL_INGR_color_clamp
#ifndef GL_RED_MIN_CLAMP_INGR
#define GL_RED_MIN_CLAMP_INGR 0x8560
#endif //GL_RED_MIN_CLAMP_INGR
#ifndef GL_GREEN_MIN_CLAMP_INGR
#define GL_GREEN_MIN_CLAMP_INGR 0x8561
#endif //GL_GREEN_MIN_CLAMP_INGR
#ifndef GL_BLUE_MIN_CLAMP_INGR
#define GL_BLUE_MIN_CLAMP_INGR 0x8562
#endif //GL_BLUE_MIN_CLAMP_INGR
#ifndef GL_ALPHA_MIN_CLAMP_INGR
#define GL_ALPHA_MIN_CLAMP_INGR 0x8563
#endif //GL_ALPHA_MIN_CLAMP_INGR
#ifndef GL_RED_MAX_CLAMP_INGR
#define GL_RED_MAX_CLAMP_INGR 0x8564
#endif //GL_RED_MAX_CLAMP_INGR
#ifndef GL_GREEN_MAX_CLAMP_INGR
#define GL_GREEN_MAX_CLAMP_INGR 0x8565
#endif //GL_GREEN_MAX_CLAMP_INGR
#ifndef GL_BLUE_MAX_CLAMP_INGR
#define GL_BLUE_MAX_CLAMP_INGR 0x8566
#endif //GL_BLUE_MAX_CLAMP_INGR
#ifndef GL_ALPHA_MAX_CLAMP_INGR
#define GL_ALPHA_MAX_CLAMP_INGR 0x8567
#endif //GL_ALPHA_MAX_CLAMP_INGR
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_INGR_interlace_read
#define GL_INGR_interlace_read
#ifndef GL_INTERLACE_READ_INGR
#define GL_INTERLACE_READ_INGR 0x8568
#endif //GL_INTERLACE_READ_INGR
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_INTEL_fragment_shader_ordering
#define GL_INTEL_fragment_shader_ordering
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_INTEL_map_texture
#define GL_INTEL_map_texture
#ifndef GL_LAYOUT_DEFAULT_INTEL
#define GL_LAYOUT_DEFAULT_INTEL 0
#endif //GL_LAYOUT_DEFAULT_INTEL
#ifndef GL_TEXTURE_MEMORY_LAYOUT_INTEL
#define GL_TEXTURE_MEMORY_LAYOUT_INTEL 0x83FF
#endif //GL_TEXTURE_MEMORY_LAYOUT_INTEL
#ifndef GL_LAYOUT_LINEAR_INTEL
#define GL_LAYOUT_LINEAR_INTEL 1
#endif //GL_LAYOUT_LINEAR_INTEL
#ifndef GL_LAYOUT_LINEAR_CPU_CACHED_INTEL
#define GL_LAYOUT_LINEAR_CPU_CACHED_INTEL 2
#endif //GL_LAYOUT_LINEAR_CPU_CACHED_INTEL
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_MapTexture2DINTEL
#define GL_ALT_FUNDEF_MapTexture2DINTEL
typedef void * (*PFNGLMAPTEXTURE2DINTELPROC_ALT)(GLuint,GLint,GLbitfield,GLint *,GLenum *);
static inline void * glMapTexture2DINTEL(GLuint texture1,GLint level1,GLbitfield access1,GLint * stride1,GLenum * layout1)
{
	static PFNGLMAPTEXTURE2DINTELPROC_ALT fn=(PFNGLMAPTEXTURE2DINTELPROC_ALT)glaltGetProcAddressExtension("glMapTexture2DINTEL","GL_INTEL_map_texture");
	return fn(texture1,level1,access1,stride1,layout1);
}
#endif

#ifndef	GL_ALT_FUNDEF_SyncTextureINTEL
#define GL_ALT_FUNDEF_SyncTextureINTEL
typedef void (*PFNGLSYNCTEXTUREINTELPROC_ALT)(GLuint);
static inline void glSyncTextureINTEL(GLuint texture1)
{
	static PFNGLSYNCTEXTUREINTELPROC_ALT fn=(PFNGLSYNCTEXTUREINTELPROC_ALT)glaltGetProcAddressExtension("glSyncTextureINTEL","GL_INTEL_map_texture");
	 fn(texture1);
}
#endif

#ifndef	GL_ALT_FUNDEF_UnmapTexture2DINTEL
#define GL_ALT_FUNDEF_UnmapTexture2DINTEL
typedef void (*PFNGLUNMAPTEXTURE2DINTELPROC_ALT)(GLuint,GLint);
static inline void glUnmapTexture2DINTEL(GLuint texture1,GLint level1)
{
	static PFNGLUNMAPTEXTURE2DINTELPROC_ALT fn=(PFNGLUNMAPTEXTURE2DINTELPROC_ALT)glaltGetProcAddressExtension("glUnmapTexture2DINTEL","GL_INTEL_map_texture");
	 fn(texture1,level1);
}
#endif
CGUARDEND

#endif

#ifndef GL_INTEL_parallel_arrays
#define GL_INTEL_parallel_arrays
#ifndef GL_PARALLEL_ARRAYS_INTEL
#define GL_PARALLEL_ARRAYS_INTEL 0x83F4
#endif //GL_PARALLEL_ARRAYS_INTEL
#ifndef GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL
#define GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL 0x83F5
#endif //GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL
#ifndef GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL
#define GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL 0x83F6
#endif //GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL
#ifndef GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL
#define GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL 0x83F7
#endif //GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL
#ifndef GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL
#define GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL 0x83F8
#endif //GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ColorPointervINTEL
#define GL_ALT_FUNDEF_ColorPointervINTEL
typedef void (*PFNGLCOLORPOINTERVINTELPROC_ALT)(GLint,GLenum,const void **);
static inline void glColorPointervINTEL(GLint size1,GLenum type1,const void ** pointer1)
{
	static PFNGLCOLORPOINTERVINTELPROC_ALT fn=(PFNGLCOLORPOINTERVINTELPROC_ALT)glaltGetProcAddressExtension("glColorPointervINTEL","GL_INTEL_parallel_arrays");
	 fn(size1,type1,pointer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NormalPointervINTEL
#define GL_ALT_FUNDEF_NormalPointervINTEL
typedef void (*PFNGLNORMALPOINTERVINTELPROC_ALT)(GLenum,const void **);
static inline void glNormalPointervINTEL(GLenum type1,const void ** pointer1)
{
	static PFNGLNORMALPOINTERVINTELPROC_ALT fn=(PFNGLNORMALPOINTERVINTELPROC_ALT)glaltGetProcAddressExtension("glNormalPointervINTEL","GL_INTEL_parallel_arrays");
	 fn(type1,pointer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoordPointervINTEL
#define GL_ALT_FUNDEF_TexCoordPointervINTEL
typedef void (*PFNGLTEXCOORDPOINTERVINTELPROC_ALT)(GLint,GLenum,const void **);
static inline void glTexCoordPointervINTEL(GLint size1,GLenum type1,const void ** pointer1)
{
	static PFNGLTEXCOORDPOINTERVINTELPROC_ALT fn=(PFNGLTEXCOORDPOINTERVINTELPROC_ALT)glaltGetProcAddressExtension("glTexCoordPointervINTEL","GL_INTEL_parallel_arrays");
	 fn(size1,type1,pointer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexPointervINTEL
#define GL_ALT_FUNDEF_VertexPointervINTEL
typedef void (*PFNGLVERTEXPOINTERVINTELPROC_ALT)(GLint,GLenum,const void **);
static inline void glVertexPointervINTEL(GLint size1,GLenum type1,const void ** pointer1)
{
	static PFNGLVERTEXPOINTERVINTELPROC_ALT fn=(PFNGLVERTEXPOINTERVINTELPROC_ALT)glaltGetProcAddressExtension("glVertexPointervINTEL","GL_INTEL_parallel_arrays");
	 fn(size1,type1,pointer1);
}
#endif
CGUARDEND

#endif

#ifndef GL_INTEL_performance_query
#define GL_INTEL_performance_query
#ifndef GL_PERFQUERY_SINGLE_CONTEXT_INTEL
#define GL_PERFQUERY_SINGLE_CONTEXT_INTEL 0x00000000
#endif //GL_PERFQUERY_SINGLE_CONTEXT_INTEL
#ifndef GL_PERFQUERY_GLOBAL_CONTEXT_INTEL
#define GL_PERFQUERY_GLOBAL_CONTEXT_INTEL 0x00000001
#endif //GL_PERFQUERY_GLOBAL_CONTEXT_INTEL
#ifndef GL_PERFQUERY_DONOT_FLUSH_INTEL
#define GL_PERFQUERY_DONOT_FLUSH_INTEL 0x83F9
#endif //GL_PERFQUERY_DONOT_FLUSH_INTEL
#ifndef GL_PERFQUERY_FLUSH_INTEL
#define GL_PERFQUERY_FLUSH_INTEL 0x83FA
#endif //GL_PERFQUERY_FLUSH_INTEL
#ifndef GL_PERFQUERY_WAIT_INTEL
#define GL_PERFQUERY_WAIT_INTEL 0x83FB
#endif //GL_PERFQUERY_WAIT_INTEL
#ifndef GL_PERFQUERY_COUNTER_EVENT_INTEL
#define GL_PERFQUERY_COUNTER_EVENT_INTEL 0x94F0
#endif //GL_PERFQUERY_COUNTER_EVENT_INTEL
#ifndef GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL
#define GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL 0x94F1
#endif //GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL
#ifndef GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL
#define GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL 0x94F2
#endif //GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL
#ifndef GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL
#define GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL 0x94F3
#endif //GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL
#ifndef GL_PERFQUERY_COUNTER_RAW_INTEL
#define GL_PERFQUERY_COUNTER_RAW_INTEL 0x94F4
#endif //GL_PERFQUERY_COUNTER_RAW_INTEL
#ifndef GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL
#define GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL 0x94F5
#endif //GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL
#ifndef GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL
#define GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL 0x94F8
#endif //GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL
#ifndef GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL
#define GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL 0x94F9
#endif //GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL
#ifndef GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL
#define GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL 0x94FA
#endif //GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL
#ifndef GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL
#define GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL 0x94FB
#endif //GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL
#ifndef GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL
#define GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL 0x94FC
#endif //GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL
#ifndef GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL
#define GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL 0x94FD
#endif //GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL
#ifndef GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL
#define GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL 0x94FE
#endif //GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL
#ifndef GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL
#define GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL 0x94FF
#endif //GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL
#ifndef GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL
#define GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL 0x9500
#endif //GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BeginPerfQueryINTEL
#define GL_ALT_FUNDEF_BeginPerfQueryINTEL
typedef void (*PFNGLBEGINPERFQUERYINTELPROC_ALT)(GLuint);
static inline void glBeginPerfQueryINTEL(GLuint queryHandle1)
{
	static PFNGLBEGINPERFQUERYINTELPROC_ALT fn=(PFNGLBEGINPERFQUERYINTELPROC_ALT)glaltGetProcAddressExtension("glBeginPerfQueryINTEL","GL_INTEL_performance_query");
	 fn(queryHandle1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CreatePerfQueryINTEL
#define GL_ALT_FUNDEF_CreatePerfQueryINTEL
typedef void (*PFNGLCREATEPERFQUERYINTELPROC_ALT)(GLuint,GLuint *);
static inline void glCreatePerfQueryINTEL(GLuint queryId1,GLuint * queryHandle1)
{
	static PFNGLCREATEPERFQUERYINTELPROC_ALT fn=(PFNGLCREATEPERFQUERYINTELPROC_ALT)glaltGetProcAddressExtension("glCreatePerfQueryINTEL","GL_INTEL_performance_query");
	 fn(queryId1,queryHandle1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DeletePerfQueryINTEL
#define GL_ALT_FUNDEF_DeletePerfQueryINTEL
typedef void (*PFNGLDELETEPERFQUERYINTELPROC_ALT)(GLuint);
static inline void glDeletePerfQueryINTEL(GLuint queryHandle1)
{
	static PFNGLDELETEPERFQUERYINTELPROC_ALT fn=(PFNGLDELETEPERFQUERYINTELPROC_ALT)glaltGetProcAddressExtension("glDeletePerfQueryINTEL","GL_INTEL_performance_query");
	 fn(queryHandle1);
}
#endif

#ifndef	GL_ALT_FUNDEF_EndPerfQueryINTEL
#define GL_ALT_FUNDEF_EndPerfQueryINTEL
typedef void (*PFNGLENDPERFQUERYINTELPROC_ALT)(GLuint);
static inline void glEndPerfQueryINTEL(GLuint queryHandle1)
{
	static PFNGLENDPERFQUERYINTELPROC_ALT fn=(PFNGLENDPERFQUERYINTELPROC_ALT)glaltGetProcAddressExtension("glEndPerfQueryINTEL","GL_INTEL_performance_query");
	 fn(queryHandle1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetFirstPerfQueryIdINTEL
#define GL_ALT_FUNDEF_GetFirstPerfQueryIdINTEL
typedef void (*PFNGLGETFIRSTPERFQUERYIDINTELPROC_ALT)(GLuint *);
static inline void glGetFirstPerfQueryIdINTEL(GLuint * queryId1)
{
	static PFNGLGETFIRSTPERFQUERYIDINTELPROC_ALT fn=(PFNGLGETFIRSTPERFQUERYIDINTELPROC_ALT)glaltGetProcAddressExtension("glGetFirstPerfQueryIdINTEL","GL_INTEL_performance_query");
	 fn(queryId1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetNextPerfQueryIdINTEL
#define GL_ALT_FUNDEF_GetNextPerfQueryIdINTEL
typedef void (*PFNGLGETNEXTPERFQUERYIDINTELPROC_ALT)(GLuint,GLuint *);
static inline void glGetNextPerfQueryIdINTEL(GLuint queryId1,GLuint * nextQueryId1)
{
	static PFNGLGETNEXTPERFQUERYIDINTELPROC_ALT fn=(PFNGLGETNEXTPERFQUERYIDINTELPROC_ALT)glaltGetProcAddressExtension("glGetNextPerfQueryIdINTEL","GL_INTEL_performance_query");
	 fn(queryId1,nextQueryId1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetPerfCounterInfoINTEL
#define GL_ALT_FUNDEF_GetPerfCounterInfoINTEL
typedef void (*PFNGLGETPERFCOUNTERINFOINTELPROC_ALT)(GLuint,GLuint,GLuint,GLchar *,GLuint,GLchar *,GLuint *,GLuint *,GLuint *,GLuint *,GLuint64 *);
static inline void glGetPerfCounterInfoINTEL(GLuint queryId1,GLuint counterId1,GLuint counterNameLength1,GLchar * counterName1,GLuint counterDescLength1,GLchar * counterDesc1,GLuint * counterOffset1,GLuint * counterDataSize1,GLuint * counterTypeEnum1,GLuint * counterDataTypeEnum1,GLuint64 * rawCounterMaxValue1)
{
	static PFNGLGETPERFCOUNTERINFOINTELPROC_ALT fn=(PFNGLGETPERFCOUNTERINFOINTELPROC_ALT)glaltGetProcAddressExtension("glGetPerfCounterInfoINTEL","GL_INTEL_performance_query");
	 fn(queryId1,counterId1,counterNameLength1,counterName1,counterDescLength1,counterDesc1,counterOffset1,counterDataSize1,counterTypeEnum1,counterDataTypeEnum1,rawCounterMaxValue1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetPerfQueryDataINTEL
#define GL_ALT_FUNDEF_GetPerfQueryDataINTEL
typedef void (*PFNGLGETPERFQUERYDATAINTELPROC_ALT)(GLuint,GLuint,GLsizei,GLvoid *,GLuint *);
static inline void glGetPerfQueryDataINTEL(GLuint queryHandle1,GLuint flags1,GLsizei dataSize1,GLvoid * data1,GLuint * bytesWritten1)
{
	static PFNGLGETPERFQUERYDATAINTELPROC_ALT fn=(PFNGLGETPERFQUERYDATAINTELPROC_ALT)glaltGetProcAddressExtension("glGetPerfQueryDataINTEL","GL_INTEL_performance_query");
	 fn(queryHandle1,flags1,dataSize1,data1,bytesWritten1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetPerfQueryIdByNameINTEL
#define GL_ALT_FUNDEF_GetPerfQueryIdByNameINTEL
typedef void (*PFNGLGETPERFQUERYIDBYNAMEINTELPROC_ALT)(GLchar *,GLuint *);
static inline void glGetPerfQueryIdByNameINTEL(GLchar * queryName1,GLuint * queryId1)
{
	static PFNGLGETPERFQUERYIDBYNAMEINTELPROC_ALT fn=(PFNGLGETPERFQUERYIDBYNAMEINTELPROC_ALT)glaltGetProcAddressExtension("glGetPerfQueryIdByNameINTEL","GL_INTEL_performance_query");
	 fn(queryName1,queryId1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetPerfQueryInfoINTEL
#define GL_ALT_FUNDEF_GetPerfQueryInfoINTEL
typedef void (*PFNGLGETPERFQUERYINFOINTELPROC_ALT)(GLuint,GLuint,GLchar *,GLuint *,GLuint *,GLuint *,GLuint *);
static inline void glGetPerfQueryInfoINTEL(GLuint queryId1,GLuint queryNameLength1,GLchar * queryName1,GLuint * dataSize1,GLuint * noCounters1,GLuint * noInstances1,GLuint * capsMask1)
{
	static PFNGLGETPERFQUERYINFOINTELPROC_ALT fn=(PFNGLGETPERFQUERYINFOINTELPROC_ALT)glaltGetProcAddressExtension("glGetPerfQueryInfoINTEL","GL_INTEL_performance_query");
	 fn(queryId1,queryNameLength1,queryName1,dataSize1,noCounters1,noInstances1,capsMask1);
}
#endif
CGUARDEND

#endif

#ifndef GL_KHR_blend_equation_advanced
#define GL_KHR_blend_equation_advanced
#ifndef GL_MULTIPLY_KHR
#define GL_MULTIPLY_KHR 0x9294
#endif //GL_MULTIPLY_KHR
#ifndef GL_SCREEN_KHR
#define GL_SCREEN_KHR 0x9295
#endif //GL_SCREEN_KHR
#ifndef GL_OVERLAY_KHR
#define GL_OVERLAY_KHR 0x9296
#endif //GL_OVERLAY_KHR
#ifndef GL_DARKEN_KHR
#define GL_DARKEN_KHR 0x9297
#endif //GL_DARKEN_KHR
#ifndef GL_LIGHTEN_KHR
#define GL_LIGHTEN_KHR 0x9298
#endif //GL_LIGHTEN_KHR
#ifndef GL_COLORDODGE_KHR
#define GL_COLORDODGE_KHR 0x9299
#endif //GL_COLORDODGE_KHR
#ifndef GL_COLORBURN_KHR
#define GL_COLORBURN_KHR 0x929A
#endif //GL_COLORBURN_KHR
#ifndef GL_HARDLIGHT_KHR
#define GL_HARDLIGHT_KHR 0x929B
#endif //GL_HARDLIGHT_KHR
#ifndef GL_SOFTLIGHT_KHR
#define GL_SOFTLIGHT_KHR 0x929C
#endif //GL_SOFTLIGHT_KHR
#ifndef GL_DIFFERENCE_KHR
#define GL_DIFFERENCE_KHR 0x929E
#endif //GL_DIFFERENCE_KHR
#ifndef GL_EXCLUSION_KHR
#define GL_EXCLUSION_KHR 0x92A0
#endif //GL_EXCLUSION_KHR
#ifndef GL_HSL_HUE_KHR
#define GL_HSL_HUE_KHR 0x92AD
#endif //GL_HSL_HUE_KHR
#ifndef GL_HSL_SATURATION_KHR
#define GL_HSL_SATURATION_KHR 0x92AE
#endif //GL_HSL_SATURATION_KHR
#ifndef GL_HSL_COLOR_KHR
#define GL_HSL_COLOR_KHR 0x92AF
#endif //GL_HSL_COLOR_KHR
#ifndef GL_HSL_LUMINOSITY_KHR
#define GL_HSL_LUMINOSITY_KHR 0x92B0
#endif //GL_HSL_LUMINOSITY_KHR
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BlendBarrierKHR
#define GL_ALT_FUNDEF_BlendBarrierKHR
typedef void (*PFNGLBLENDBARRIERKHRPROC_ALT)();
static inline void glBlendBarrierKHR()
{
	static PFNGLBLENDBARRIERKHRPROC_ALT fn=(PFNGLBLENDBARRIERKHRPROC_ALT)glaltGetProcAddressExtension("glBlendBarrierKHR","GL_KHR_blend_equation_advanced");
	 fn();
}
#endif
CGUARDEND

#endif

#ifndef GL_KHR_blend_equation_advanced_coherent
#define GL_KHR_blend_equation_advanced_coherent
#ifndef GL_BLEND_ADVANCED_COHERENT_KHR
#define GL_BLEND_ADVANCED_COHERENT_KHR 0x9285
#endif //GL_BLEND_ADVANCED_COHERENT_KHR
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_KHR_context_flush_control
#define GL_KHR_context_flush_control
#ifndef GL_NONE
#define GL_NONE 0
#endif //GL_NONE
#ifndef GL_CONTEXT_RELEASE_BEHAVIOR_KHR
#define GL_CONTEXT_RELEASE_BEHAVIOR_KHR 0x82FB
#endif //GL_CONTEXT_RELEASE_BEHAVIOR_KHR
#ifndef GL_CONTEXT_RELEASE_BEHAVIOR
#define GL_CONTEXT_RELEASE_BEHAVIOR 0x82FB
#endif //GL_CONTEXT_RELEASE_BEHAVIOR
#ifndef GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR 0x82FC
#endif //GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR
#ifndef GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH 0x82FC
#endif //GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_KHR_debug
#define GL_KHR_debug
#ifndef GL_CONTEXT_FLAG_DEBUG_BIT
#define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#endif //GL_CONTEXT_FLAG_DEBUG_BIT
#ifndef GL_CONTEXT_FLAG_DEBUG_BIT_KHR
#define GL_CONTEXT_FLAG_DEBUG_BIT_KHR 0x00000002
#endif //GL_CONTEXT_FLAG_DEBUG_BIT_KHR
#ifndef GL_STACK_OVERFLOW_KHR
#define GL_STACK_OVERFLOW_KHR 0x0503
#endif //GL_STACK_OVERFLOW_KHR
#ifndef GL_STACK_OVERFLOW
#define GL_STACK_OVERFLOW 0x0503
#endif //GL_STACK_OVERFLOW
#ifndef GL_STACK_UNDERFLOW_KHR
#define GL_STACK_UNDERFLOW_KHR 0x0504
#endif //GL_STACK_UNDERFLOW_KHR
#ifndef GL_STACK_UNDERFLOW
#define GL_STACK_UNDERFLOW 0x0504
#endif //GL_STACK_UNDERFLOW
#ifndef GL_VERTEX_ARRAY_KHR
#define GL_VERTEX_ARRAY_KHR 0x8074
#endif //GL_VERTEX_ARRAY_KHR
#ifndef GL_VERTEX_ARRAY
#define GL_VERTEX_ARRAY 0x8074
#endif //GL_VERTEX_ARRAY
#ifndef GL_DEBUG_OUTPUT_SYNCHRONOUS
#define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#endif //GL_DEBUG_OUTPUT_SYNCHRONOUS
#ifndef GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR
#define GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR 0x8242
#endif //GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR
#ifndef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#endif //GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#ifndef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR 0x8243
#endif //GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR
#ifndef GL_DEBUG_CALLBACK_FUNCTION_KHR
#define GL_DEBUG_CALLBACK_FUNCTION_KHR 0x8244
#endif //GL_DEBUG_CALLBACK_FUNCTION_KHR
#ifndef GL_DEBUG_CALLBACK_FUNCTION
#define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#endif //GL_DEBUG_CALLBACK_FUNCTION
#ifndef GL_DEBUG_CALLBACK_USER_PARAM
#define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#endif //GL_DEBUG_CALLBACK_USER_PARAM
#ifndef GL_DEBUG_CALLBACK_USER_PARAM_KHR
#define GL_DEBUG_CALLBACK_USER_PARAM_KHR 0x8245
#endif //GL_DEBUG_CALLBACK_USER_PARAM_KHR
#ifndef GL_DEBUG_SOURCE_API_KHR
#define GL_DEBUG_SOURCE_API_KHR 0x8246
#endif //GL_DEBUG_SOURCE_API_KHR
#ifndef GL_DEBUG_SOURCE_API
#define GL_DEBUG_SOURCE_API 0x8246
#endif //GL_DEBUG_SOURCE_API
#ifndef GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR 0x8247
#endif //GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR
#ifndef GL_DEBUG_SOURCE_WINDOW_SYSTEM
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#endif //GL_DEBUG_SOURCE_WINDOW_SYSTEM
#ifndef GL_DEBUG_SOURCE_SHADER_COMPILER_KHR
#define GL_DEBUG_SOURCE_SHADER_COMPILER_KHR 0x8248
#endif //GL_DEBUG_SOURCE_SHADER_COMPILER_KHR
#ifndef GL_DEBUG_SOURCE_SHADER_COMPILER
#define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#endif //GL_DEBUG_SOURCE_SHADER_COMPILER
#ifndef GL_DEBUG_SOURCE_THIRD_PARTY_KHR
#define GL_DEBUG_SOURCE_THIRD_PARTY_KHR 0x8249
#endif //GL_DEBUG_SOURCE_THIRD_PARTY_KHR
#ifndef GL_DEBUG_SOURCE_THIRD_PARTY
#define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#endif //GL_DEBUG_SOURCE_THIRD_PARTY
#ifndef GL_DEBUG_SOURCE_APPLICATION_KHR
#define GL_DEBUG_SOURCE_APPLICATION_KHR 0x824A
#endif //GL_DEBUG_SOURCE_APPLICATION_KHR
#ifndef GL_DEBUG_SOURCE_APPLICATION
#define GL_DEBUG_SOURCE_APPLICATION 0x824A
#endif //GL_DEBUG_SOURCE_APPLICATION
#ifndef GL_DEBUG_SOURCE_OTHER_KHR
#define GL_DEBUG_SOURCE_OTHER_KHR 0x824B
#endif //GL_DEBUG_SOURCE_OTHER_KHR
#ifndef GL_DEBUG_SOURCE_OTHER
#define GL_DEBUG_SOURCE_OTHER 0x824B
#endif //GL_DEBUG_SOURCE_OTHER
#ifndef GL_DEBUG_TYPE_ERROR
#define GL_DEBUG_TYPE_ERROR 0x824C
#endif //GL_DEBUG_TYPE_ERROR
#ifndef GL_DEBUG_TYPE_ERROR_KHR
#define GL_DEBUG_TYPE_ERROR_KHR 0x824C
#endif //GL_DEBUG_TYPE_ERROR_KHR
#ifndef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR 0x824D
#endif //GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR
#ifndef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#endif //GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#ifndef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#endif //GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#ifndef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR 0x824E
#endif //GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR
#ifndef GL_DEBUG_TYPE_PORTABILITY
#define GL_DEBUG_TYPE_PORTABILITY 0x824F
#endif //GL_DEBUG_TYPE_PORTABILITY
#ifndef GL_DEBUG_TYPE_PORTABILITY_KHR
#define GL_DEBUG_TYPE_PORTABILITY_KHR 0x824F
#endif //GL_DEBUG_TYPE_PORTABILITY_KHR
#ifndef GL_DEBUG_TYPE_PERFORMANCE_KHR
#define GL_DEBUG_TYPE_PERFORMANCE_KHR 0x8250
#endif //GL_DEBUG_TYPE_PERFORMANCE_KHR
#ifndef GL_DEBUG_TYPE_PERFORMANCE
#define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#endif //GL_DEBUG_TYPE_PERFORMANCE
#ifndef GL_DEBUG_TYPE_OTHER_KHR
#define GL_DEBUG_TYPE_OTHER_KHR 0x8251
#endif //GL_DEBUG_TYPE_OTHER_KHR
#ifndef GL_DEBUG_TYPE_OTHER
#define GL_DEBUG_TYPE_OTHER 0x8251
#endif //GL_DEBUG_TYPE_OTHER
#ifndef GL_DEBUG_TYPE_MARKER
#define GL_DEBUG_TYPE_MARKER 0x8268
#endif //GL_DEBUG_TYPE_MARKER
#ifndef GL_DEBUG_TYPE_MARKER_KHR
#define GL_DEBUG_TYPE_MARKER_KHR 0x8268
#endif //GL_DEBUG_TYPE_MARKER_KHR
#ifndef GL_DEBUG_TYPE_PUSH_GROUP_KHR
#define GL_DEBUG_TYPE_PUSH_GROUP_KHR 0x8269
#endif //GL_DEBUG_TYPE_PUSH_GROUP_KHR
#ifndef GL_DEBUG_TYPE_PUSH_GROUP
#define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#endif //GL_DEBUG_TYPE_PUSH_GROUP
#ifndef GL_DEBUG_TYPE_POP_GROUP
#define GL_DEBUG_TYPE_POP_GROUP 0x826A
#endif //GL_DEBUG_TYPE_POP_GROUP
#ifndef GL_DEBUG_TYPE_POP_GROUP_KHR
#define GL_DEBUG_TYPE_POP_GROUP_KHR 0x826A
#endif //GL_DEBUG_TYPE_POP_GROUP_KHR
#ifndef GL_DEBUG_SEVERITY_NOTIFICATION_KHR
#define GL_DEBUG_SEVERITY_NOTIFICATION_KHR 0x826B
#endif //GL_DEBUG_SEVERITY_NOTIFICATION_KHR
#ifndef GL_DEBUG_SEVERITY_NOTIFICATION
#define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#endif //GL_DEBUG_SEVERITY_NOTIFICATION
#ifndef GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR 0x826C
#endif //GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR
#ifndef GL_MAX_DEBUG_GROUP_STACK_DEPTH
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#endif //GL_MAX_DEBUG_GROUP_STACK_DEPTH
#ifndef GL_DEBUG_GROUP_STACK_DEPTH_KHR
#define GL_DEBUG_GROUP_STACK_DEPTH_KHR 0x826D
#endif //GL_DEBUG_GROUP_STACK_DEPTH_KHR
#ifndef GL_DEBUG_GROUP_STACK_DEPTH
#define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#endif //GL_DEBUG_GROUP_STACK_DEPTH
#ifndef GL_BUFFER_KHR
#define GL_BUFFER_KHR 0x82E0
#endif //GL_BUFFER_KHR
#ifndef GL_BUFFER
#define GL_BUFFER 0x82E0
#endif //GL_BUFFER
#ifndef GL_SHADER_KHR
#define GL_SHADER_KHR 0x82E1
#endif //GL_SHADER_KHR
#ifndef GL_SHADER
#define GL_SHADER 0x82E1
#endif //GL_SHADER
#ifndef GL_PROGRAM
#define GL_PROGRAM 0x82E2
#endif //GL_PROGRAM
#ifndef GL_PROGRAM_KHR
#define GL_PROGRAM_KHR 0x82E2
#endif //GL_PROGRAM_KHR
#ifndef GL_QUERY
#define GL_QUERY 0x82E3
#endif //GL_QUERY
#ifndef GL_QUERY_KHR
#define GL_QUERY_KHR 0x82E3
#endif //GL_QUERY_KHR
#ifndef GL_PROGRAM_PIPELINE
#define GL_PROGRAM_PIPELINE 0x82E4
#endif //GL_PROGRAM_PIPELINE
#ifndef GL_SAMPLER_KHR
#define GL_SAMPLER_KHR 0x82E6
#endif //GL_SAMPLER_KHR
#ifndef GL_SAMPLER
#define GL_SAMPLER 0x82E6
#endif //GL_SAMPLER
#ifndef GL_MAX_LABEL_LENGTH
#define GL_MAX_LABEL_LENGTH 0x82E8
#endif //GL_MAX_LABEL_LENGTH
#ifndef GL_MAX_LABEL_LENGTH_KHR
#define GL_MAX_LABEL_LENGTH_KHR 0x82E8
#endif //GL_MAX_LABEL_LENGTH_KHR
#ifndef GL_MAX_DEBUG_MESSAGE_LENGTH
#define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#endif //GL_MAX_DEBUG_MESSAGE_LENGTH
#ifndef GL_MAX_DEBUG_MESSAGE_LENGTH_KHR
#define GL_MAX_DEBUG_MESSAGE_LENGTH_KHR 0x9143
#endif //GL_MAX_DEBUG_MESSAGE_LENGTH_KHR
#ifndef GL_MAX_DEBUG_LOGGED_MESSAGES
#define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#endif //GL_MAX_DEBUG_LOGGED_MESSAGES
#ifndef GL_MAX_DEBUG_LOGGED_MESSAGES_KHR
#define GL_MAX_DEBUG_LOGGED_MESSAGES_KHR 0x9144
#endif //GL_MAX_DEBUG_LOGGED_MESSAGES_KHR
#ifndef GL_DEBUG_LOGGED_MESSAGES
#define GL_DEBUG_LOGGED_MESSAGES 0x9145
#endif //GL_DEBUG_LOGGED_MESSAGES
#ifndef GL_DEBUG_LOGGED_MESSAGES_KHR
#define GL_DEBUG_LOGGED_MESSAGES_KHR 0x9145
#endif //GL_DEBUG_LOGGED_MESSAGES_KHR
#ifndef GL_DEBUG_SEVERITY_HIGH
#define GL_DEBUG_SEVERITY_HIGH 0x9146
#endif //GL_DEBUG_SEVERITY_HIGH
#ifndef GL_DEBUG_SEVERITY_HIGH_KHR
#define GL_DEBUG_SEVERITY_HIGH_KHR 0x9146
#endif //GL_DEBUG_SEVERITY_HIGH_KHR
#ifndef GL_DEBUG_SEVERITY_MEDIUM_KHR
#define GL_DEBUG_SEVERITY_MEDIUM_KHR 0x9147
#endif //GL_DEBUG_SEVERITY_MEDIUM_KHR
#ifndef GL_DEBUG_SEVERITY_MEDIUM
#define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#endif //GL_DEBUG_SEVERITY_MEDIUM
#ifndef GL_DEBUG_SEVERITY_LOW_KHR
#define GL_DEBUG_SEVERITY_LOW_KHR 0x9148
#endif //GL_DEBUG_SEVERITY_LOW_KHR
#ifndef GL_DEBUG_SEVERITY_LOW
#define GL_DEBUG_SEVERITY_LOW 0x9148
#endif //GL_DEBUG_SEVERITY_LOW
#ifndef GL_DEBUG_OUTPUT
#define GL_DEBUG_OUTPUT 0x92E0
#endif //GL_DEBUG_OUTPUT
#ifndef GL_DEBUG_OUTPUT_KHR
#define GL_DEBUG_OUTPUT_KHR 0x92E0
#endif //GL_DEBUG_OUTPUT_KHR
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_DebugMessageCallback
#define GL_ALT_FUNDEF_DebugMessageCallback
typedef void (*PFNGLDEBUGMESSAGECALLBACKPROC_ALT)(GLALTDEBUGPROC,const void *);
static inline void glDebugMessageCallback(GLALTDEBUGPROC callback1,const void * userParam1)
{
	static PFNGLDEBUGMESSAGECALLBACKPROC_ALT fn=(PFNGLDEBUGMESSAGECALLBACKPROC_ALT)glaltGetProcAddressExtension("glDebugMessageCallback","GL_KHR_debug");
	 fn(callback1,userParam1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DebugMessageCallbackKHR
#define GL_ALT_FUNDEF_DebugMessageCallbackKHR
typedef void (*PFNGLDEBUGMESSAGECALLBACKKHRPROC_ALT)(GLALTDEBUGPROCKHR,const void *);
static inline void glDebugMessageCallbackKHR(GLALTDEBUGPROCKHR callback1,const void * userParam1)
{
	static PFNGLDEBUGMESSAGECALLBACKKHRPROC_ALT fn=(PFNGLDEBUGMESSAGECALLBACKKHRPROC_ALT)glaltGetProcAddressExtension("glDebugMessageCallbackKHR","GL_KHR_debug");
	 fn(callback1,userParam1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_DebugMessageControl
#define GL_ALT_FUNDEF_DebugMessageControl
typedef void (*PFNGLDEBUGMESSAGECONTROLPROC_ALT)(GLenum,GLenum,GLenum,GLsizei,const GLuint *,GLboolean);
static inline void glDebugMessageControl(GLenum source1,GLenum type1,GLenum severity1,GLsizei count1,const GLuint * ids1,GLboolean enabled1)
{
	static PFNGLDEBUGMESSAGECONTROLPROC_ALT fn=(PFNGLDEBUGMESSAGECONTROLPROC_ALT)glaltGetProcAddressExtension("glDebugMessageControl","GL_KHR_debug");
	 fn(source1,type1,severity1,count1,ids1,enabled1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DebugMessageControlKHR
#define GL_ALT_FUNDEF_DebugMessageControlKHR
typedef void (*PFNGLDEBUGMESSAGECONTROLKHRPROC_ALT)(GLenum,GLenum,GLenum,GLsizei,const GLuint *,GLboolean);
static inline void glDebugMessageControlKHR(GLenum source1,GLenum type1,GLenum severity1,GLsizei count1,const GLuint * ids1,GLboolean enabled1)
{
	static PFNGLDEBUGMESSAGECONTROLKHRPROC_ALT fn=(PFNGLDEBUGMESSAGECONTROLKHRPROC_ALT)glaltGetProcAddressExtension("glDebugMessageControlKHR","GL_KHR_debug");
	 fn(source1,type1,severity1,count1,ids1,enabled1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_DebugMessageInsert
#define GL_ALT_FUNDEF_DebugMessageInsert
typedef void (*PFNGLDEBUGMESSAGEINSERTPROC_ALT)(GLenum,GLenum,GLuint,GLenum,GLsizei,const GLchar *);
static inline void glDebugMessageInsert(GLenum source1,GLenum type1,GLuint id1,GLenum severity1,GLsizei length1,const GLchar * buf1)
{
	static PFNGLDEBUGMESSAGEINSERTPROC_ALT fn=(PFNGLDEBUGMESSAGEINSERTPROC_ALT)glaltGetProcAddressExtension("glDebugMessageInsert","GL_KHR_debug");
	 fn(source1,type1,id1,severity1,length1,buf1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DebugMessageInsertKHR
#define GL_ALT_FUNDEF_DebugMessageInsertKHR
typedef void (*PFNGLDEBUGMESSAGEINSERTKHRPROC_ALT)(GLenum,GLenum,GLuint,GLenum,GLsizei,const GLchar *);
static inline void glDebugMessageInsertKHR(GLenum source1,GLenum type1,GLuint id1,GLenum severity1,GLsizei length1,const GLchar * buf1)
{
	static PFNGLDEBUGMESSAGEINSERTKHRPROC_ALT fn=(PFNGLDEBUGMESSAGEINSERTKHRPROC_ALT)glaltGetProcAddressExtension("glDebugMessageInsertKHR","GL_KHR_debug");
	 fn(source1,type1,id1,severity1,length1,buf1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetDebugMessageLog
#define GL_ALT_FUNDEF_GetDebugMessageLog
typedef GLuint (*PFNGLGETDEBUGMESSAGELOGPROC_ALT)(GLuint,GLsizei,GLenum *,GLenum *,GLuint *,GLenum *,GLsizei *,GLchar *);
static inline GLuint glGetDebugMessageLog(GLuint count1,GLsizei bufSize1,GLenum * sources1,GLenum * types1,GLuint * ids1,GLenum * severities1,GLsizei * lengths1,GLchar * messageLog1)
{
	static PFNGLGETDEBUGMESSAGELOGPROC_ALT fn=(PFNGLGETDEBUGMESSAGELOGPROC_ALT)glaltGetProcAddressExtension("glGetDebugMessageLog","GL_KHR_debug");
	return fn(count1,bufSize1,sources1,types1,ids1,severities1,lengths1,messageLog1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetDebugMessageLogKHR
#define GL_ALT_FUNDEF_GetDebugMessageLogKHR
typedef GLuint (*PFNGLGETDEBUGMESSAGELOGKHRPROC_ALT)(GLuint,GLsizei,GLenum *,GLenum *,GLuint *,GLenum *,GLsizei *,GLchar *);
static inline GLuint glGetDebugMessageLogKHR(GLuint count1,GLsizei bufSize1,GLenum * sources1,GLenum * types1,GLuint * ids1,GLenum * severities1,GLsizei * lengths1,GLchar * messageLog1)
{
	static PFNGLGETDEBUGMESSAGELOGKHRPROC_ALT fn=(PFNGLGETDEBUGMESSAGELOGKHRPROC_ALT)glaltGetProcAddressExtension("glGetDebugMessageLogKHR","GL_KHR_debug");
	return fn(count1,bufSize1,sources1,types1,ids1,severities1,lengths1,messageLog1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetObjectLabel
#define GL_ALT_FUNDEF_GetObjectLabel
typedef void (*PFNGLGETOBJECTLABELPROC_ALT)(GLenum,GLuint,GLsizei,GLsizei *,GLchar *);
static inline void glGetObjectLabel(GLenum identifier1,GLuint name1,GLsizei bufSize1,GLsizei * length1,GLchar * label1)
{
	static PFNGLGETOBJECTLABELPROC_ALT fn=(PFNGLGETOBJECTLABELPROC_ALT)glaltGetProcAddressExtension("glGetObjectLabel","GL_KHR_debug");
	 fn(identifier1,name1,bufSize1,length1,label1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetObjectLabelKHR
#define GL_ALT_FUNDEF_GetObjectLabelKHR
typedef void (*PFNGLGETOBJECTLABELKHRPROC_ALT)(GLenum,GLuint,GLsizei,GLsizei *,GLchar *);
static inline void glGetObjectLabelKHR(GLenum identifier1,GLuint name1,GLsizei bufSize1,GLsizei * length1,GLchar * label1)
{
	static PFNGLGETOBJECTLABELKHRPROC_ALT fn=(PFNGLGETOBJECTLABELKHRPROC_ALT)glaltGetProcAddressExtension("glGetObjectLabelKHR","GL_KHR_debug");
	 fn(identifier1,name1,bufSize1,length1,label1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetObjectPtrLabel
#define GL_ALT_FUNDEF_GetObjectPtrLabel
typedef void (*PFNGLGETOBJECTPTRLABELPROC_ALT)(const void *,GLsizei,GLsizei *,GLchar *);
static inline void glGetObjectPtrLabel(const void * ptr1,GLsizei bufSize1,GLsizei * length1,GLchar * label1)
{
	static PFNGLGETOBJECTPTRLABELPROC_ALT fn=(PFNGLGETOBJECTPTRLABELPROC_ALT)glaltGetProcAddressExtension("glGetObjectPtrLabel","GL_KHR_debug");
	 fn(ptr1,bufSize1,length1,label1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetObjectPtrLabelKHR
#define GL_ALT_FUNDEF_GetObjectPtrLabelKHR
typedef void (*PFNGLGETOBJECTPTRLABELKHRPROC_ALT)(const void *,GLsizei,GLsizei *,GLchar *);
static inline void glGetObjectPtrLabelKHR(const void * ptr1,GLsizei bufSize1,GLsizei * length1,GLchar * label1)
{
	static PFNGLGETOBJECTPTRLABELKHRPROC_ALT fn=(PFNGLGETOBJECTPTRLABELKHRPROC_ALT)glaltGetProcAddressExtension("glGetObjectPtrLabelKHR","GL_KHR_debug");
	 fn(ptr1,bufSize1,length1,label1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetPointerv
#define GL_ALT_FUNDEF_GetPointerv
typedef void (*PFNGLGETPOINTERVPROC_ALT)(GLenum,void **);
static inline void glGetPointerv(GLenum pname1,void ** params1)
{
	static PFNGLGETPOINTERVPROC_ALT fn=(PFNGLGETPOINTERVPROC_ALT)glaltGetProcAddressExtension("glGetPointerv","GL_KHR_debug");
	 fn(pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetPointervKHR
#define GL_ALT_FUNDEF_GetPointervKHR
typedef void (*PFNGLGETPOINTERVKHRPROC_ALT)(GLenum,void **);
static inline void glGetPointervKHR(GLenum pname1,void ** params1)
{
	static PFNGLGETPOINTERVKHRPROC_ALT fn=(PFNGLGETPOINTERVKHRPROC_ALT)glaltGetProcAddressExtension("glGetPointervKHR","GL_KHR_debug");
	 fn(pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ObjectLabel
#define GL_ALT_FUNDEF_ObjectLabel
typedef void (*PFNGLOBJECTLABELPROC_ALT)(GLenum,GLuint,GLsizei,const GLchar *);
static inline void glObjectLabel(GLenum identifier1,GLuint name1,GLsizei length1,const GLchar * label1)
{
	static PFNGLOBJECTLABELPROC_ALT fn=(PFNGLOBJECTLABELPROC_ALT)glaltGetProcAddressExtension("glObjectLabel","GL_KHR_debug");
	 fn(identifier1,name1,length1,label1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ObjectLabelKHR
#define GL_ALT_FUNDEF_ObjectLabelKHR
typedef void (*PFNGLOBJECTLABELKHRPROC_ALT)(GLenum,GLuint,GLsizei,const GLchar *);
static inline void glObjectLabelKHR(GLenum identifier1,GLuint name1,GLsizei length1,const GLchar * label1)
{
	static PFNGLOBJECTLABELKHRPROC_ALT fn=(PFNGLOBJECTLABELKHRPROC_ALT)glaltGetProcAddressExtension("glObjectLabelKHR","GL_KHR_debug");
	 fn(identifier1,name1,length1,label1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ObjectPtrLabel
#define GL_ALT_FUNDEF_ObjectPtrLabel
typedef void (*PFNGLOBJECTPTRLABELPROC_ALT)(const void *,GLsizei,const GLchar *);
static inline void glObjectPtrLabel(const void * ptr1,GLsizei length1,const GLchar * label1)
{
	static PFNGLOBJECTPTRLABELPROC_ALT fn=(PFNGLOBJECTPTRLABELPROC_ALT)glaltGetProcAddressExtension("glObjectPtrLabel","GL_KHR_debug");
	 fn(ptr1,length1,label1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ObjectPtrLabelKHR
#define GL_ALT_FUNDEF_ObjectPtrLabelKHR
typedef void (*PFNGLOBJECTPTRLABELKHRPROC_ALT)(const void *,GLsizei,const GLchar *);
static inline void glObjectPtrLabelKHR(const void * ptr1,GLsizei length1,const GLchar * label1)
{
	static PFNGLOBJECTPTRLABELKHRPROC_ALT fn=(PFNGLOBJECTPTRLABELKHRPROC_ALT)glaltGetProcAddressExtension("glObjectPtrLabelKHR","GL_KHR_debug");
	 fn(ptr1,length1,label1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_PopDebugGroup
#define GL_ALT_FUNDEF_PopDebugGroup
typedef void (*PFNGLPOPDEBUGGROUPPROC_ALT)();
static inline void glPopDebugGroup()
{
	static PFNGLPOPDEBUGGROUPPROC_ALT fn=(PFNGLPOPDEBUGGROUPPROC_ALT)glaltGetProcAddressExtension("glPopDebugGroup","GL_KHR_debug");
	 fn();
}
#endif

#ifndef	GL_ALT_FUNDEF_PopDebugGroupKHR
#define GL_ALT_FUNDEF_PopDebugGroupKHR
typedef void (*PFNGLPOPDEBUGGROUPKHRPROC_ALT)();
static inline void glPopDebugGroupKHR()
{
	static PFNGLPOPDEBUGGROUPKHRPROC_ALT fn=(PFNGLPOPDEBUGGROUPKHRPROC_ALT)glaltGetProcAddressExtension("glPopDebugGroupKHR","GL_KHR_debug");
	 fn();
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_PushDebugGroup
#define GL_ALT_FUNDEF_PushDebugGroup
typedef void (*PFNGLPUSHDEBUGGROUPPROC_ALT)(GLenum,GLuint,GLsizei,const GLchar *);
static inline void glPushDebugGroup(GLenum source1,GLuint id1,GLsizei length1,const GLchar * message1)
{
	static PFNGLPUSHDEBUGGROUPPROC_ALT fn=(PFNGLPUSHDEBUGGROUPPROC_ALT)glaltGetProcAddressExtension("glPushDebugGroup","GL_KHR_debug");
	 fn(source1,id1,length1,message1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PushDebugGroupKHR
#define GL_ALT_FUNDEF_PushDebugGroupKHR
typedef void (*PFNGLPUSHDEBUGGROUPKHRPROC_ALT)(GLenum,GLuint,GLsizei,const GLchar *);
static inline void glPushDebugGroupKHR(GLenum source1,GLuint id1,GLsizei length1,const GLchar * message1)
{
	static PFNGLPUSHDEBUGGROUPKHRPROC_ALT fn=(PFNGLPUSHDEBUGGROUPKHRPROC_ALT)glaltGetProcAddressExtension("glPushDebugGroupKHR","GL_KHR_debug");
	 fn(source1,id1,length1,message1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_KHR_robust_buffer_access_behavior
#define GL_KHR_robust_buffer_access_behavior
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_KHR_robustness
#define GL_KHR_robustness
#ifndef GL_NO_ERROR
#define GL_NO_ERROR 0
#endif //GL_NO_ERROR
#ifndef GL_CONTEXT_LOST
#define GL_CONTEXT_LOST 0x0507
#endif //GL_CONTEXT_LOST
#ifndef GL_CONTEXT_LOST_KHR
#define GL_CONTEXT_LOST_KHR 0x0507
#endif //GL_CONTEXT_LOST_KHR
#ifndef GL_LOSE_CONTEXT_ON_RESET_KHR
#define GL_LOSE_CONTEXT_ON_RESET_KHR 0x8252
#endif //GL_LOSE_CONTEXT_ON_RESET_KHR
#ifndef GL_LOSE_CONTEXT_ON_RESET
#define GL_LOSE_CONTEXT_ON_RESET 0x8252
#endif //GL_LOSE_CONTEXT_ON_RESET
#ifndef GL_GUILTY_CONTEXT_RESET
#define GL_GUILTY_CONTEXT_RESET 0x8253
#endif //GL_GUILTY_CONTEXT_RESET
#ifndef GL_GUILTY_CONTEXT_RESET_KHR
#define GL_GUILTY_CONTEXT_RESET_KHR 0x8253
#endif //GL_GUILTY_CONTEXT_RESET_KHR
#ifndef GL_INNOCENT_CONTEXT_RESET_KHR
#define GL_INNOCENT_CONTEXT_RESET_KHR 0x8254
#endif //GL_INNOCENT_CONTEXT_RESET_KHR
#ifndef GL_INNOCENT_CONTEXT_RESET
#define GL_INNOCENT_CONTEXT_RESET 0x8254
#endif //GL_INNOCENT_CONTEXT_RESET
#ifndef GL_UNKNOWN_CONTEXT_RESET
#define GL_UNKNOWN_CONTEXT_RESET 0x8255
#endif //GL_UNKNOWN_CONTEXT_RESET
#ifndef GL_UNKNOWN_CONTEXT_RESET_KHR
#define GL_UNKNOWN_CONTEXT_RESET_KHR 0x8255
#endif //GL_UNKNOWN_CONTEXT_RESET_KHR
#ifndef GL_RESET_NOTIFICATION_STRATEGY
#define GL_RESET_NOTIFICATION_STRATEGY 0x8256
#endif //GL_RESET_NOTIFICATION_STRATEGY
#ifndef GL_RESET_NOTIFICATION_STRATEGY_KHR
#define GL_RESET_NOTIFICATION_STRATEGY_KHR 0x8256
#endif //GL_RESET_NOTIFICATION_STRATEGY_KHR
#ifndef GL_NO_RESET_NOTIFICATION_KHR
#define GL_NO_RESET_NOTIFICATION_KHR 0x8261
#endif //GL_NO_RESET_NOTIFICATION_KHR
#ifndef GL_NO_RESET_NOTIFICATION
#define GL_NO_RESET_NOTIFICATION 0x8261
#endif //GL_NO_RESET_NOTIFICATION
#ifndef GL_CONTEXT_ROBUST_ACCESS_KHR
#define GL_CONTEXT_ROBUST_ACCESS_KHR 0x90F3
#endif //GL_CONTEXT_ROBUST_ACCESS_KHR
#ifndef GL_CONTEXT_ROBUST_ACCESS
#define GL_CONTEXT_ROBUST_ACCESS 0x90F3
#endif //GL_CONTEXT_ROBUST_ACCESS
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetGraphicsResetStatus
#define GL_ALT_FUNDEF_GetGraphicsResetStatus
typedef GLenum (*PFNGLGETGRAPHICSRESETSTATUSPROC_ALT)();
static inline GLenum glGetGraphicsResetStatus()
{
	static PFNGLGETGRAPHICSRESETSTATUSPROC_ALT fn=(PFNGLGETGRAPHICSRESETSTATUSPROC_ALT)glaltGetProcAddressExtension("glGetGraphicsResetStatus","GL_KHR_robustness");
	return fn();
}
#endif

#ifndef	GL_ALT_FUNDEF_GetGraphicsResetStatusKHR
#define GL_ALT_FUNDEF_GetGraphicsResetStatusKHR
typedef GLenum (*PFNGLGETGRAPHICSRESETSTATUSKHRPROC_ALT)();
static inline GLenum glGetGraphicsResetStatusKHR()
{
	static PFNGLGETGRAPHICSRESETSTATUSKHRPROC_ALT fn=(PFNGLGETGRAPHICSRESETSTATUSKHRPROC_ALT)glaltGetProcAddressExtension("glGetGraphicsResetStatusKHR","GL_KHR_robustness");
	return fn();
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetnUniformfv
#define GL_ALT_FUNDEF_GetnUniformfv
typedef void (*PFNGLGETNUNIFORMFVPROC_ALT)(GLuint,GLint,GLsizei,GLfloat *);
static inline void glGetnUniformfv(GLuint program1,GLint location1,GLsizei bufSize1,GLfloat * params1)
{
	static PFNGLGETNUNIFORMFVPROC_ALT fn=(PFNGLGETNUNIFORMFVPROC_ALT)glaltGetProcAddressExtension("glGetnUniformfv","GL_KHR_robustness");
	 fn(program1,location1,bufSize1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetnUniformfvKHR
#define GL_ALT_FUNDEF_GetnUniformfvKHR
typedef void (*PFNGLGETNUNIFORMFVKHRPROC_ALT)(GLuint,GLint,GLsizei,GLfloat *);
static inline void glGetnUniformfvKHR(GLuint program1,GLint location1,GLsizei bufSize1,GLfloat * params1)
{
	static PFNGLGETNUNIFORMFVKHRPROC_ALT fn=(PFNGLGETNUNIFORMFVKHRPROC_ALT)glaltGetProcAddressExtension("glGetnUniformfvKHR","GL_KHR_robustness");
	 fn(program1,location1,bufSize1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetnUniformiv
#define GL_ALT_FUNDEF_GetnUniformiv
typedef void (*PFNGLGETNUNIFORMIVPROC_ALT)(GLuint,GLint,GLsizei,GLint *);
static inline void glGetnUniformiv(GLuint program1,GLint location1,GLsizei bufSize1,GLint * params1)
{
	static PFNGLGETNUNIFORMIVPROC_ALT fn=(PFNGLGETNUNIFORMIVPROC_ALT)glaltGetProcAddressExtension("glGetnUniformiv","GL_KHR_robustness");
	 fn(program1,location1,bufSize1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetnUniformivKHR
#define GL_ALT_FUNDEF_GetnUniformivKHR
typedef void (*PFNGLGETNUNIFORMIVKHRPROC_ALT)(GLuint,GLint,GLsizei,GLint *);
static inline void glGetnUniformivKHR(GLuint program1,GLint location1,GLsizei bufSize1,GLint * params1)
{
	static PFNGLGETNUNIFORMIVKHRPROC_ALT fn=(PFNGLGETNUNIFORMIVKHRPROC_ALT)glaltGetProcAddressExtension("glGetnUniformivKHR","GL_KHR_robustness");
	 fn(program1,location1,bufSize1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetnUniformuiv
#define GL_ALT_FUNDEF_GetnUniformuiv
typedef void (*PFNGLGETNUNIFORMUIVPROC_ALT)(GLuint,GLint,GLsizei,GLuint *);
static inline void glGetnUniformuiv(GLuint program1,GLint location1,GLsizei bufSize1,GLuint * params1)
{
	static PFNGLGETNUNIFORMUIVPROC_ALT fn=(PFNGLGETNUNIFORMUIVPROC_ALT)glaltGetProcAddressExtension("glGetnUniformuiv","GL_KHR_robustness");
	 fn(program1,location1,bufSize1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetnUniformuivKHR
#define GL_ALT_FUNDEF_GetnUniformuivKHR
typedef void (*PFNGLGETNUNIFORMUIVKHRPROC_ALT)(GLuint,GLint,GLsizei,GLuint *);
static inline void glGetnUniformuivKHR(GLuint program1,GLint location1,GLsizei bufSize1,GLuint * params1)
{
	static PFNGLGETNUNIFORMUIVKHRPROC_ALT fn=(PFNGLGETNUNIFORMUIVKHRPROC_ALT)glaltGetProcAddressExtension("glGetnUniformuivKHR","GL_KHR_robustness");
	 fn(program1,location1,bufSize1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ReadnPixels
#define GL_ALT_FUNDEF_ReadnPixels
typedef void (*PFNGLREADNPIXELSPROC_ALT)(GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,GLsizei,void *);
static inline void glReadnPixels(GLint x1,GLint y1,GLsizei width1,GLsizei height1,GLenum format1,GLenum type1,GLsizei bufSize1,void * data1)
{
	static PFNGLREADNPIXELSPROC_ALT fn=(PFNGLREADNPIXELSPROC_ALT)glaltGetProcAddressExtension("glReadnPixels","GL_KHR_robustness");
	 fn(x1,y1,width1,height1,format1,type1,bufSize1,data1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ReadnPixelsKHR
#define GL_ALT_FUNDEF_ReadnPixelsKHR
typedef void (*PFNGLREADNPIXELSKHRPROC_ALT)(GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,GLsizei,void *);
static inline void glReadnPixelsKHR(GLint x1,GLint y1,GLsizei width1,GLsizei height1,GLenum format1,GLenum type1,GLsizei bufSize1,void * data1)
{
	static PFNGLREADNPIXELSKHRPROC_ALT fn=(PFNGLREADNPIXELSKHRPROC_ALT)glaltGetProcAddressExtension("glReadnPixelsKHR","GL_KHR_robustness");
	 fn(x1,y1,width1,height1,format1,type1,bufSize1,data1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_KHR_texture_compression_astc_hdr
#define GL_KHR_texture_compression_astc_hdr
#ifndef GL_COMPRESSED_RGBA_ASTC_4x4_KHR
#define GL_COMPRESSED_RGBA_ASTC_4x4_KHR 0x93B0
#endif //GL_COMPRESSED_RGBA_ASTC_4x4_KHR
#ifndef GL_COMPRESSED_RGBA_ASTC_5x4_KHR
#define GL_COMPRESSED_RGBA_ASTC_5x4_KHR 0x93B1
#endif //GL_COMPRESSED_RGBA_ASTC_5x4_KHR
#ifndef GL_COMPRESSED_RGBA_ASTC_5x5_KHR
#define GL_COMPRESSED_RGBA_ASTC_5x5_KHR 0x93B2
#endif //GL_COMPRESSED_RGBA_ASTC_5x5_KHR
#ifndef GL_COMPRESSED_RGBA_ASTC_6x5_KHR
#define GL_COMPRESSED_RGBA_ASTC_6x5_KHR 0x93B3
#endif //GL_COMPRESSED_RGBA_ASTC_6x5_KHR
#ifndef GL_COMPRESSED_RGBA_ASTC_6x6_KHR
#define GL_COMPRESSED_RGBA_ASTC_6x6_KHR 0x93B4
#endif //GL_COMPRESSED_RGBA_ASTC_6x6_KHR
#ifndef GL_COMPRESSED_RGBA_ASTC_8x5_KHR
#define GL_COMPRESSED_RGBA_ASTC_8x5_KHR 0x93B5
#endif //GL_COMPRESSED_RGBA_ASTC_8x5_KHR
#ifndef GL_COMPRESSED_RGBA_ASTC_8x6_KHR
#define GL_COMPRESSED_RGBA_ASTC_8x6_KHR 0x93B6
#endif //GL_COMPRESSED_RGBA_ASTC_8x6_KHR
#ifndef GL_COMPRESSED_RGBA_ASTC_8x8_KHR
#define GL_COMPRESSED_RGBA_ASTC_8x8_KHR 0x93B7
#endif //GL_COMPRESSED_RGBA_ASTC_8x8_KHR
#ifndef GL_COMPRESSED_RGBA_ASTC_10x5_KHR
#define GL_COMPRESSED_RGBA_ASTC_10x5_KHR 0x93B8
#endif //GL_COMPRESSED_RGBA_ASTC_10x5_KHR
#ifndef GL_COMPRESSED_RGBA_ASTC_10x6_KHR
#define GL_COMPRESSED_RGBA_ASTC_10x6_KHR 0x93B9
#endif //GL_COMPRESSED_RGBA_ASTC_10x6_KHR
#ifndef GL_COMPRESSED_RGBA_ASTC_10x8_KHR
#define GL_COMPRESSED_RGBA_ASTC_10x8_KHR 0x93BA
#endif //GL_COMPRESSED_RGBA_ASTC_10x8_KHR
#ifndef GL_COMPRESSED_RGBA_ASTC_10x10_KHR
#define GL_COMPRESSED_RGBA_ASTC_10x10_KHR 0x93BB
#endif //GL_COMPRESSED_RGBA_ASTC_10x10_KHR
#ifndef GL_COMPRESSED_RGBA_ASTC_12x10_KHR
#define GL_COMPRESSED_RGBA_ASTC_12x10_KHR 0x93BC
#endif //GL_COMPRESSED_RGBA_ASTC_12x10_KHR
#ifndef GL_COMPRESSED_RGBA_ASTC_12x12_KHR
#define GL_COMPRESSED_RGBA_ASTC_12x12_KHR 0x93BD
#endif //GL_COMPRESSED_RGBA_ASTC_12x12_KHR
#ifndef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR 0x93D0
#endif //GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR
#ifndef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR 0x93D1
#endif //GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR
#ifndef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR 0x93D2
#endif //GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR
#ifndef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR 0x93D3
#endif //GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR
#ifndef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR 0x93D4
#endif //GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR
#ifndef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR 0x93D5
#endif //GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR
#ifndef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR 0x93D6
#endif //GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR
#ifndef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR 0x93D7
#endif //GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR
#ifndef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR 0x93D8
#endif //GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR
#ifndef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR 0x93D9
#endif //GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR
#ifndef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR 0x93DA
#endif //GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR
#ifndef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR 0x93DB
#endif //GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR
#ifndef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR 0x93DC
#endif //GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR
#ifndef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR 0x93DD
#endif //GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_KHR_texture_compression_astc_ldr
#define GL_KHR_texture_compression_astc_ldr
#ifndef GL_COMPRESSED_RGBA_ASTC_4x4_KHR
#define GL_COMPRESSED_RGBA_ASTC_4x4_KHR 0x93B0
#endif //GL_COMPRESSED_RGBA_ASTC_4x4_KHR
#ifndef GL_COMPRESSED_RGBA_ASTC_5x4_KHR
#define GL_COMPRESSED_RGBA_ASTC_5x4_KHR 0x93B1
#endif //GL_COMPRESSED_RGBA_ASTC_5x4_KHR
#ifndef GL_COMPRESSED_RGBA_ASTC_5x5_KHR
#define GL_COMPRESSED_RGBA_ASTC_5x5_KHR 0x93B2
#endif //GL_COMPRESSED_RGBA_ASTC_5x5_KHR
#ifndef GL_COMPRESSED_RGBA_ASTC_6x5_KHR
#define GL_COMPRESSED_RGBA_ASTC_6x5_KHR 0x93B3
#endif //GL_COMPRESSED_RGBA_ASTC_6x5_KHR
#ifndef GL_COMPRESSED_RGBA_ASTC_6x6_KHR
#define GL_COMPRESSED_RGBA_ASTC_6x6_KHR 0x93B4
#endif //GL_COMPRESSED_RGBA_ASTC_6x6_KHR
#ifndef GL_COMPRESSED_RGBA_ASTC_8x5_KHR
#define GL_COMPRESSED_RGBA_ASTC_8x5_KHR 0x93B5
#endif //GL_COMPRESSED_RGBA_ASTC_8x5_KHR
#ifndef GL_COMPRESSED_RGBA_ASTC_8x6_KHR
#define GL_COMPRESSED_RGBA_ASTC_8x6_KHR 0x93B6
#endif //GL_COMPRESSED_RGBA_ASTC_8x6_KHR
#ifndef GL_COMPRESSED_RGBA_ASTC_8x8_KHR
#define GL_COMPRESSED_RGBA_ASTC_8x8_KHR 0x93B7
#endif //GL_COMPRESSED_RGBA_ASTC_8x8_KHR
#ifndef GL_COMPRESSED_RGBA_ASTC_10x5_KHR
#define GL_COMPRESSED_RGBA_ASTC_10x5_KHR 0x93B8
#endif //GL_COMPRESSED_RGBA_ASTC_10x5_KHR
#ifndef GL_COMPRESSED_RGBA_ASTC_10x6_KHR
#define GL_COMPRESSED_RGBA_ASTC_10x6_KHR 0x93B9
#endif //GL_COMPRESSED_RGBA_ASTC_10x6_KHR
#ifndef GL_COMPRESSED_RGBA_ASTC_10x8_KHR
#define GL_COMPRESSED_RGBA_ASTC_10x8_KHR 0x93BA
#endif //GL_COMPRESSED_RGBA_ASTC_10x8_KHR
#ifndef GL_COMPRESSED_RGBA_ASTC_10x10_KHR
#define GL_COMPRESSED_RGBA_ASTC_10x10_KHR 0x93BB
#endif //GL_COMPRESSED_RGBA_ASTC_10x10_KHR
#ifndef GL_COMPRESSED_RGBA_ASTC_12x10_KHR
#define GL_COMPRESSED_RGBA_ASTC_12x10_KHR 0x93BC
#endif //GL_COMPRESSED_RGBA_ASTC_12x10_KHR
#ifndef GL_COMPRESSED_RGBA_ASTC_12x12_KHR
#define GL_COMPRESSED_RGBA_ASTC_12x12_KHR 0x93BD
#endif //GL_COMPRESSED_RGBA_ASTC_12x12_KHR
#ifndef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR 0x93D0
#endif //GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR
#ifndef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR 0x93D1
#endif //GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR
#ifndef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR 0x93D2
#endif //GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR
#ifndef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR 0x93D3
#endif //GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR
#ifndef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR 0x93D4
#endif //GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR
#ifndef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR 0x93D5
#endif //GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR
#ifndef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR 0x93D6
#endif //GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR
#ifndef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR 0x93D7
#endif //GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR
#ifndef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR 0x93D8
#endif //GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR
#ifndef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR 0x93D9
#endif //GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR
#ifndef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR 0x93DA
#endif //GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR
#ifndef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR 0x93DB
#endif //GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR
#ifndef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR 0x93DC
#endif //GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR
#ifndef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR 0x93DD
#endif //GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_MESAX_texture_stack
#define GL_MESAX_texture_stack
#ifndef GL_TEXTURE_1D_STACK_MESAX
#define GL_TEXTURE_1D_STACK_MESAX 0x8759
#endif //GL_TEXTURE_1D_STACK_MESAX
#ifndef GL_TEXTURE_2D_STACK_MESAX
#define GL_TEXTURE_2D_STACK_MESAX 0x875A
#endif //GL_TEXTURE_2D_STACK_MESAX
#ifndef GL_PROXY_TEXTURE_1D_STACK_MESAX
#define GL_PROXY_TEXTURE_1D_STACK_MESAX 0x875B
#endif //GL_PROXY_TEXTURE_1D_STACK_MESAX
#ifndef GL_PROXY_TEXTURE_2D_STACK_MESAX
#define GL_PROXY_TEXTURE_2D_STACK_MESAX 0x875C
#endif //GL_PROXY_TEXTURE_2D_STACK_MESAX
#ifndef GL_TEXTURE_1D_STACK_BINDING_MESAX
#define GL_TEXTURE_1D_STACK_BINDING_MESAX 0x875D
#endif //GL_TEXTURE_1D_STACK_BINDING_MESAX
#ifndef GL_TEXTURE_2D_STACK_BINDING_MESAX
#define GL_TEXTURE_2D_STACK_BINDING_MESAX 0x875E
#endif //GL_TEXTURE_2D_STACK_BINDING_MESAX
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_MESA_pack_invert
#define GL_MESA_pack_invert
#ifndef GL_PACK_INVERT_MESA
#define GL_PACK_INVERT_MESA 0x8758
#endif //GL_PACK_INVERT_MESA
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_MESA_resize_buffers
#define GL_MESA_resize_buffers
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ResizeBuffersMESA
#define GL_ALT_FUNDEF_ResizeBuffersMESA
typedef void (*PFNGLRESIZEBUFFERSMESAPROC_ALT)();
static inline void glResizeBuffersMESA()
{
	static PFNGLRESIZEBUFFERSMESAPROC_ALT fn=(PFNGLRESIZEBUFFERSMESAPROC_ALT)glaltGetProcAddressExtension("glResizeBuffersMESA","GL_MESA_resize_buffers");
	 fn();
}
#endif
CGUARDEND

#endif

#ifndef GL_MESA_window_pos
#define GL_MESA_window_pos
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_WindowPos2dMESA
#define GL_ALT_FUNDEF_WindowPos2dMESA
typedef void (*PFNGLWINDOWPOS2DMESAPROC_ALT)(GLdouble,GLdouble);
static inline void glWindowPos2dMESA(GLdouble x1,GLdouble y1)
{
	static PFNGLWINDOWPOS2DMESAPROC_ALT fn=(PFNGLWINDOWPOS2DMESAPROC_ALT)glaltGetProcAddressExtension("glWindowPos2dMESA","GL_MESA_window_pos");
	 fn(x1,y1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_WindowPos2dvMESA
#define GL_ALT_FUNDEF_WindowPos2dvMESA
typedef void (*PFNGLWINDOWPOS2DVMESAPROC_ALT)(const GLdouble *);
static inline void glWindowPos2dvMESA(const GLdouble * v1)
{
	static PFNGLWINDOWPOS2DVMESAPROC_ALT fn=(PFNGLWINDOWPOS2DVMESAPROC_ALT)glaltGetProcAddressExtension("glWindowPos2dvMESA","GL_MESA_window_pos");
	 fn(v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_WindowPos2fMESA
#define GL_ALT_FUNDEF_WindowPos2fMESA
typedef void (*PFNGLWINDOWPOS2FMESAPROC_ALT)(GLfloat,GLfloat);
static inline void glWindowPos2fMESA(GLfloat x1,GLfloat y1)
{
	static PFNGLWINDOWPOS2FMESAPROC_ALT fn=(PFNGLWINDOWPOS2FMESAPROC_ALT)glaltGetProcAddressExtension("glWindowPos2fMESA","GL_MESA_window_pos");
	 fn(x1,y1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_WindowPos2fvMESA
#define GL_ALT_FUNDEF_WindowPos2fvMESA
typedef void (*PFNGLWINDOWPOS2FVMESAPROC_ALT)(const GLfloat *);
static inline void glWindowPos2fvMESA(const GLfloat * v1)
{
	static PFNGLWINDOWPOS2FVMESAPROC_ALT fn=(PFNGLWINDOWPOS2FVMESAPROC_ALT)glaltGetProcAddressExtension("glWindowPos2fvMESA","GL_MESA_window_pos");
	 fn(v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_WindowPos2iMESA
#define GL_ALT_FUNDEF_WindowPos2iMESA
typedef void (*PFNGLWINDOWPOS2IMESAPROC_ALT)(GLint,GLint);
static inline void glWindowPos2iMESA(GLint x1,GLint y1)
{
	static PFNGLWINDOWPOS2IMESAPROC_ALT fn=(PFNGLWINDOWPOS2IMESAPROC_ALT)glaltGetProcAddressExtension("glWindowPos2iMESA","GL_MESA_window_pos");
	 fn(x1,y1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_WindowPos2ivMESA
#define GL_ALT_FUNDEF_WindowPos2ivMESA
typedef void (*PFNGLWINDOWPOS2IVMESAPROC_ALT)(const GLint *);
static inline void glWindowPos2ivMESA(const GLint * v1)
{
	static PFNGLWINDOWPOS2IVMESAPROC_ALT fn=(PFNGLWINDOWPOS2IVMESAPROC_ALT)glaltGetProcAddressExtension("glWindowPos2ivMESA","GL_MESA_window_pos");
	 fn(v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_WindowPos2sMESA
#define GL_ALT_FUNDEF_WindowPos2sMESA
typedef void (*PFNGLWINDOWPOS2SMESAPROC_ALT)(GLshort,GLshort);
static inline void glWindowPos2sMESA(GLshort x1,GLshort y1)
{
	static PFNGLWINDOWPOS2SMESAPROC_ALT fn=(PFNGLWINDOWPOS2SMESAPROC_ALT)glaltGetProcAddressExtension("glWindowPos2sMESA","GL_MESA_window_pos");
	 fn(x1,y1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_WindowPos2svMESA
#define GL_ALT_FUNDEF_WindowPos2svMESA
typedef void (*PFNGLWINDOWPOS2SVMESAPROC_ALT)(const GLshort *);
static inline void glWindowPos2svMESA(const GLshort * v1)
{
	static PFNGLWINDOWPOS2SVMESAPROC_ALT fn=(PFNGLWINDOWPOS2SVMESAPROC_ALT)glaltGetProcAddressExtension("glWindowPos2svMESA","GL_MESA_window_pos");
	 fn(v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_WindowPos3dMESA
#define GL_ALT_FUNDEF_WindowPos3dMESA
typedef void (*PFNGLWINDOWPOS3DMESAPROC_ALT)(GLdouble,GLdouble,GLdouble);
static inline void glWindowPos3dMESA(GLdouble x1,GLdouble y1,GLdouble z1)
{
	static PFNGLWINDOWPOS3DMESAPROC_ALT fn=(PFNGLWINDOWPOS3DMESAPROC_ALT)glaltGetProcAddressExtension("glWindowPos3dMESA","GL_MESA_window_pos");
	 fn(x1,y1,z1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_WindowPos3dvMESA
#define GL_ALT_FUNDEF_WindowPos3dvMESA
typedef void (*PFNGLWINDOWPOS3DVMESAPROC_ALT)(const GLdouble *);
static inline void glWindowPos3dvMESA(const GLdouble * v1)
{
	static PFNGLWINDOWPOS3DVMESAPROC_ALT fn=(PFNGLWINDOWPOS3DVMESAPROC_ALT)glaltGetProcAddressExtension("glWindowPos3dvMESA","GL_MESA_window_pos");
	 fn(v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_WindowPos3fMESA
#define GL_ALT_FUNDEF_WindowPos3fMESA
typedef void (*PFNGLWINDOWPOS3FMESAPROC_ALT)(GLfloat,GLfloat,GLfloat);
static inline void glWindowPos3fMESA(GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLWINDOWPOS3FMESAPROC_ALT fn=(PFNGLWINDOWPOS3FMESAPROC_ALT)glaltGetProcAddressExtension("glWindowPos3fMESA","GL_MESA_window_pos");
	 fn(x1,y1,z1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_WindowPos3fvMESA
#define GL_ALT_FUNDEF_WindowPos3fvMESA
typedef void (*PFNGLWINDOWPOS3FVMESAPROC_ALT)(const GLfloat *);
static inline void glWindowPos3fvMESA(const GLfloat * v1)
{
	static PFNGLWINDOWPOS3FVMESAPROC_ALT fn=(PFNGLWINDOWPOS3FVMESAPROC_ALT)glaltGetProcAddressExtension("glWindowPos3fvMESA","GL_MESA_window_pos");
	 fn(v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_WindowPos3iMESA
#define GL_ALT_FUNDEF_WindowPos3iMESA
typedef void (*PFNGLWINDOWPOS3IMESAPROC_ALT)(GLint,GLint,GLint);
static inline void glWindowPos3iMESA(GLint x1,GLint y1,GLint z1)
{
	static PFNGLWINDOWPOS3IMESAPROC_ALT fn=(PFNGLWINDOWPOS3IMESAPROC_ALT)glaltGetProcAddressExtension("glWindowPos3iMESA","GL_MESA_window_pos");
	 fn(x1,y1,z1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_WindowPos3ivMESA
#define GL_ALT_FUNDEF_WindowPos3ivMESA
typedef void (*PFNGLWINDOWPOS3IVMESAPROC_ALT)(const GLint *);
static inline void glWindowPos3ivMESA(const GLint * v1)
{
	static PFNGLWINDOWPOS3IVMESAPROC_ALT fn=(PFNGLWINDOWPOS3IVMESAPROC_ALT)glaltGetProcAddressExtension("glWindowPos3ivMESA","GL_MESA_window_pos");
	 fn(v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_WindowPos3sMESA
#define GL_ALT_FUNDEF_WindowPos3sMESA
typedef void (*PFNGLWINDOWPOS3SMESAPROC_ALT)(GLshort,GLshort,GLshort);
static inline void glWindowPos3sMESA(GLshort x1,GLshort y1,GLshort z1)
{
	static PFNGLWINDOWPOS3SMESAPROC_ALT fn=(PFNGLWINDOWPOS3SMESAPROC_ALT)glaltGetProcAddressExtension("glWindowPos3sMESA","GL_MESA_window_pos");
	 fn(x1,y1,z1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_WindowPos3svMESA
#define GL_ALT_FUNDEF_WindowPos3svMESA
typedef void (*PFNGLWINDOWPOS3SVMESAPROC_ALT)(const GLshort *);
static inline void glWindowPos3svMESA(const GLshort * v1)
{
	static PFNGLWINDOWPOS3SVMESAPROC_ALT fn=(PFNGLWINDOWPOS3SVMESAPROC_ALT)glaltGetProcAddressExtension("glWindowPos3svMESA","GL_MESA_window_pos");
	 fn(v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_WindowPos4dMESA
#define GL_ALT_FUNDEF_WindowPos4dMESA
typedef void (*PFNGLWINDOWPOS4DMESAPROC_ALT)(GLdouble,GLdouble,GLdouble,GLdouble);
static inline void glWindowPos4dMESA(GLdouble x1,GLdouble y1,GLdouble z1,GLdouble w1)
{
	static PFNGLWINDOWPOS4DMESAPROC_ALT fn=(PFNGLWINDOWPOS4DMESAPROC_ALT)glaltGetProcAddressExtension("glWindowPos4dMESA","GL_MESA_window_pos");
	 fn(x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_WindowPos4dvMESA
#define GL_ALT_FUNDEF_WindowPos4dvMESA
typedef void (*PFNGLWINDOWPOS4DVMESAPROC_ALT)(const GLdouble *);
static inline void glWindowPos4dvMESA(const GLdouble * v1)
{
	static PFNGLWINDOWPOS4DVMESAPROC_ALT fn=(PFNGLWINDOWPOS4DVMESAPROC_ALT)glaltGetProcAddressExtension("glWindowPos4dvMESA","GL_MESA_window_pos");
	 fn(v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_WindowPos4fMESA
#define GL_ALT_FUNDEF_WindowPos4fMESA
typedef void (*PFNGLWINDOWPOS4FMESAPROC_ALT)(GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glWindowPos4fMESA(GLfloat x1,GLfloat y1,GLfloat z1,GLfloat w1)
{
	static PFNGLWINDOWPOS4FMESAPROC_ALT fn=(PFNGLWINDOWPOS4FMESAPROC_ALT)glaltGetProcAddressExtension("glWindowPos4fMESA","GL_MESA_window_pos");
	 fn(x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_WindowPos4fvMESA
#define GL_ALT_FUNDEF_WindowPos4fvMESA
typedef void (*PFNGLWINDOWPOS4FVMESAPROC_ALT)(const GLfloat *);
static inline void glWindowPos4fvMESA(const GLfloat * v1)
{
	static PFNGLWINDOWPOS4FVMESAPROC_ALT fn=(PFNGLWINDOWPOS4FVMESAPROC_ALT)glaltGetProcAddressExtension("glWindowPos4fvMESA","GL_MESA_window_pos");
	 fn(v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_WindowPos4iMESA
#define GL_ALT_FUNDEF_WindowPos4iMESA
typedef void (*PFNGLWINDOWPOS4IMESAPROC_ALT)(GLint,GLint,GLint,GLint);
static inline void glWindowPos4iMESA(GLint x1,GLint y1,GLint z1,GLint w1)
{
	static PFNGLWINDOWPOS4IMESAPROC_ALT fn=(PFNGLWINDOWPOS4IMESAPROC_ALT)glaltGetProcAddressExtension("glWindowPos4iMESA","GL_MESA_window_pos");
	 fn(x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_WindowPos4ivMESA
#define GL_ALT_FUNDEF_WindowPos4ivMESA
typedef void (*PFNGLWINDOWPOS4IVMESAPROC_ALT)(const GLint *);
static inline void glWindowPos4ivMESA(const GLint * v1)
{
	static PFNGLWINDOWPOS4IVMESAPROC_ALT fn=(PFNGLWINDOWPOS4IVMESAPROC_ALT)glaltGetProcAddressExtension("glWindowPos4ivMESA","GL_MESA_window_pos");
	 fn(v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_WindowPos4sMESA
#define GL_ALT_FUNDEF_WindowPos4sMESA
typedef void (*PFNGLWINDOWPOS4SMESAPROC_ALT)(GLshort,GLshort,GLshort,GLshort);
static inline void glWindowPos4sMESA(GLshort x1,GLshort y1,GLshort z1,GLshort w1)
{
	static PFNGLWINDOWPOS4SMESAPROC_ALT fn=(PFNGLWINDOWPOS4SMESAPROC_ALT)glaltGetProcAddressExtension("glWindowPos4sMESA","GL_MESA_window_pos");
	 fn(x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_WindowPos4svMESA
#define GL_ALT_FUNDEF_WindowPos4svMESA
typedef void (*PFNGLWINDOWPOS4SVMESAPROC_ALT)(const GLshort *);
static inline void glWindowPos4svMESA(const GLshort * v1)
{
	static PFNGLWINDOWPOS4SVMESAPROC_ALT fn=(PFNGLWINDOWPOS4SVMESAPROC_ALT)glaltGetProcAddressExtension("glWindowPos4svMESA","GL_MESA_window_pos");
	 fn(v1);
}
#endif
CGUARDEND

#endif

#ifndef GL_MESA_ycbcr_texture
#define GL_MESA_ycbcr_texture
#ifndef GL_UNSIGNED_SHORT_8_8_MESA
#define GL_UNSIGNED_SHORT_8_8_MESA 0x85BA
#endif //GL_UNSIGNED_SHORT_8_8_MESA
#ifndef GL_UNSIGNED_SHORT_8_8_REV_MESA
#define GL_UNSIGNED_SHORT_8_8_REV_MESA 0x85BB
#endif //GL_UNSIGNED_SHORT_8_8_REV_MESA
#ifndef GL_YCBCR_MESA
#define GL_YCBCR_MESA 0x8757
#endif //GL_YCBCR_MESA
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NVX_conditional_render
#define GL_NVX_conditional_render
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BeginConditionalRenderNVX
#define GL_ALT_FUNDEF_BeginConditionalRenderNVX
typedef void (*PFNGLBEGINCONDITIONALRENDERNVXPROC_ALT)(GLuint);
static inline void glBeginConditionalRenderNVX(GLuint id1)
{
	static PFNGLBEGINCONDITIONALRENDERNVXPROC_ALT fn=(PFNGLBEGINCONDITIONALRENDERNVXPROC_ALT)glaltGetProcAddressExtension("glBeginConditionalRenderNVX","GL_NVX_conditional_render");
	 fn(id1);
}
#endif

#ifndef	GL_ALT_FUNDEF_EndConditionalRenderNVX
#define GL_ALT_FUNDEF_EndConditionalRenderNVX
typedef void (*PFNGLENDCONDITIONALRENDERNVXPROC_ALT)();
static inline void glEndConditionalRenderNVX()
{
	static PFNGLENDCONDITIONALRENDERNVXPROC_ALT fn=(PFNGLENDCONDITIONALRENDERNVXPROC_ALT)glaltGetProcAddressExtension("glEndConditionalRenderNVX","GL_NVX_conditional_render");
	 fn();
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_NVX_gpu_memory_info
#define GL_NVX_gpu_memory_info
#ifndef GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX
#define GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX 0x9047
#endif //GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX
#ifndef GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX
#define GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX 0x9048
#endif //GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX
#ifndef GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX
#define GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX 0x9049
#endif //GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX
#ifndef GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX
#define GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX 0x904A
#endif //GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX
#ifndef GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX
#define GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX 0x904B
#endif //GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_bindless_multi_draw_indirect
#define GL_NV_bindless_multi_draw_indirect
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_MultiDrawArraysIndirectBindlessNV
#define GL_ALT_FUNDEF_MultiDrawArraysIndirectBindlessNV
typedef void (*PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC_ALT)(GLenum,const void *,GLsizei,GLsizei,GLint);
static inline void glMultiDrawArraysIndirectBindlessNV(GLenum mode1,const void * indirect1,GLsizei drawCount1,GLsizei stride1,GLint vertexBufferCount1)
{
	static PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC_ALT fn=(PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC_ALT)glaltGetProcAddressExtension("glMultiDrawArraysIndirectBindlessNV","GL_NV_bindless_multi_draw_indirect");
	 fn(mode1,indirect1,drawCount1,stride1,vertexBufferCount1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiDrawElementsIndirectBindlessNV
#define GL_ALT_FUNDEF_MultiDrawElementsIndirectBindlessNV
typedef void (*PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC_ALT)(GLenum,GLenum,const void *,GLsizei,GLsizei,GLint);
static inline void glMultiDrawElementsIndirectBindlessNV(GLenum mode1,GLenum type1,const void * indirect1,GLsizei drawCount1,GLsizei stride1,GLint vertexBufferCount1)
{
	static PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC_ALT fn=(PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC_ALT)glaltGetProcAddressExtension("glMultiDrawElementsIndirectBindlessNV","GL_NV_bindless_multi_draw_indirect");
	 fn(mode1,type1,indirect1,drawCount1,stride1,vertexBufferCount1);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_bindless_multi_draw_indirect_count
#define GL_NV_bindless_multi_draw_indirect_count
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_MultiDrawArraysIndirectBindlessCountNV
#define GL_ALT_FUNDEF_MultiDrawArraysIndirectBindlessCountNV
typedef void (*PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC_ALT)(GLenum,const void *,GLsizei,GLsizei,GLsizei,GLint);
static inline void glMultiDrawArraysIndirectBindlessCountNV(GLenum mode1,const void * indirect1,GLsizei drawCount1,GLsizei maxDrawCount1,GLsizei stride1,GLint vertexBufferCount1)
{
	static PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC_ALT fn=(PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC_ALT)glaltGetProcAddressExtension("glMultiDrawArraysIndirectBindlessCountNV","GL_NV_bindless_multi_draw_indirect_count");
	 fn(mode1,indirect1,drawCount1,maxDrawCount1,stride1,vertexBufferCount1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiDrawElementsIndirectBindlessCountNV
#define GL_ALT_FUNDEF_MultiDrawElementsIndirectBindlessCountNV
typedef void (*PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC_ALT)(GLenum,GLenum,const void *,GLsizei,GLsizei,GLsizei,GLint);
static inline void glMultiDrawElementsIndirectBindlessCountNV(GLenum mode1,GLenum type1,const void * indirect1,GLsizei drawCount1,GLsizei maxDrawCount1,GLsizei stride1,GLint vertexBufferCount1)
{
	static PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC_ALT fn=(PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC_ALT)glaltGetProcAddressExtension("glMultiDrawElementsIndirectBindlessCountNV","GL_NV_bindless_multi_draw_indirect_count");
	 fn(mode1,type1,indirect1,drawCount1,maxDrawCount1,stride1,vertexBufferCount1);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_bindless_texture
#define GL_NV_bindless_texture
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetImageHandleNV
#define GL_ALT_FUNDEF_GetImageHandleNV
typedef GLuint64 (*PFNGLGETIMAGEHANDLENVPROC_ALT)(GLuint,GLint,GLboolean,GLint,GLenum);
static inline GLuint64 glGetImageHandleNV(GLuint texture1,GLint level1,GLboolean layered1,GLint layer1,GLenum format1)
{
	static PFNGLGETIMAGEHANDLENVPROC_ALT fn=(PFNGLGETIMAGEHANDLENVPROC_ALT)glaltGetProcAddressExtension("glGetImageHandleNV","GL_NV_bindless_texture");
	return fn(texture1,level1,layered1,layer1,format1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetTextureHandleNV
#define GL_ALT_FUNDEF_GetTextureHandleNV
typedef GLuint64 (*PFNGLGETTEXTUREHANDLENVPROC_ALT)(GLuint);
static inline GLuint64 glGetTextureHandleNV(GLuint texture1)
{
	static PFNGLGETTEXTUREHANDLENVPROC_ALT fn=(PFNGLGETTEXTUREHANDLENVPROC_ALT)glaltGetProcAddressExtension("glGetTextureHandleNV","GL_NV_bindless_texture");
	return fn(texture1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetTextureSamplerHandleNV
#define GL_ALT_FUNDEF_GetTextureSamplerHandleNV
typedef GLuint64 (*PFNGLGETTEXTURESAMPLERHANDLENVPROC_ALT)(GLuint,GLuint);
static inline GLuint64 glGetTextureSamplerHandleNV(GLuint texture1,GLuint sampler1)
{
	static PFNGLGETTEXTURESAMPLERHANDLENVPROC_ALT fn=(PFNGLGETTEXTURESAMPLERHANDLENVPROC_ALT)glaltGetProcAddressExtension("glGetTextureSamplerHandleNV","GL_NV_bindless_texture");
	return fn(texture1,sampler1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IsImageHandleResidentNV
#define GL_ALT_FUNDEF_IsImageHandleResidentNV
typedef GLboolean (*PFNGLISIMAGEHANDLERESIDENTNVPROC_ALT)(GLuint64);
static inline GLboolean glIsImageHandleResidentNV(GLuint64 handle1)
{
	static PFNGLISIMAGEHANDLERESIDENTNVPROC_ALT fn=(PFNGLISIMAGEHANDLERESIDENTNVPROC_ALT)glaltGetProcAddressExtension("glIsImageHandleResidentNV","GL_NV_bindless_texture");
	return fn(handle1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IsTextureHandleResidentNV
#define GL_ALT_FUNDEF_IsTextureHandleResidentNV
typedef GLboolean (*PFNGLISTEXTUREHANDLERESIDENTNVPROC_ALT)(GLuint64);
static inline GLboolean glIsTextureHandleResidentNV(GLuint64 handle1)
{
	static PFNGLISTEXTUREHANDLERESIDENTNVPROC_ALT fn=(PFNGLISTEXTUREHANDLERESIDENTNVPROC_ALT)glaltGetProcAddressExtension("glIsTextureHandleResidentNV","GL_NV_bindless_texture");
	return fn(handle1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MakeImageHandleNonResidentNV
#define GL_ALT_FUNDEF_MakeImageHandleNonResidentNV
typedef void (*PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC_ALT)(GLuint64);
static inline void glMakeImageHandleNonResidentNV(GLuint64 handle1)
{
	static PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC_ALT fn=(PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC_ALT)glaltGetProcAddressExtension("glMakeImageHandleNonResidentNV","GL_NV_bindless_texture");
	 fn(handle1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MakeImageHandleResidentNV
#define GL_ALT_FUNDEF_MakeImageHandleResidentNV
typedef void (*PFNGLMAKEIMAGEHANDLERESIDENTNVPROC_ALT)(GLuint64,GLenum);
static inline void glMakeImageHandleResidentNV(GLuint64 handle1,GLenum access1)
{
	static PFNGLMAKEIMAGEHANDLERESIDENTNVPROC_ALT fn=(PFNGLMAKEIMAGEHANDLERESIDENTNVPROC_ALT)glaltGetProcAddressExtension("glMakeImageHandleResidentNV","GL_NV_bindless_texture");
	 fn(handle1,access1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MakeTextureHandleNonResidentNV
#define GL_ALT_FUNDEF_MakeTextureHandleNonResidentNV
typedef void (*PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC_ALT)(GLuint64);
static inline void glMakeTextureHandleNonResidentNV(GLuint64 handle1)
{
	static PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC_ALT fn=(PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC_ALT)glaltGetProcAddressExtension("glMakeTextureHandleNonResidentNV","GL_NV_bindless_texture");
	 fn(handle1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MakeTextureHandleResidentNV
#define GL_ALT_FUNDEF_MakeTextureHandleResidentNV
typedef void (*PFNGLMAKETEXTUREHANDLERESIDENTNVPROC_ALT)(GLuint64);
static inline void glMakeTextureHandleResidentNV(GLuint64 handle1)
{
	static PFNGLMAKETEXTUREHANDLERESIDENTNVPROC_ALT fn=(PFNGLMAKETEXTUREHANDLERESIDENTNVPROC_ALT)glaltGetProcAddressExtension("glMakeTextureHandleResidentNV","GL_NV_bindless_texture");
	 fn(handle1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformHandleui64NV
#define GL_ALT_FUNDEF_ProgramUniformHandleui64NV
typedef void (*PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC_ALT)(GLuint,GLint,GLuint64);
static inline void glProgramUniformHandleui64NV(GLuint program1,GLint location1,GLuint64 value1)
{
	static PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC_ALT fn=(PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC_ALT)glaltGetProcAddressExtension("glProgramUniformHandleui64NV","GL_NV_bindless_texture");
	 fn(program1,location1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformHandleui64vNV
#define GL_ALT_FUNDEF_ProgramUniformHandleui64vNV
typedef void (*PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC_ALT)(GLuint,GLint,GLsizei,const GLuint64 *);
static inline void glProgramUniformHandleui64vNV(GLuint program1,GLint location1,GLsizei count1,const GLuint64 * values1)
{
	static PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC_ALT fn=(PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC_ALT)glaltGetProcAddressExtension("glProgramUniformHandleui64vNV","GL_NV_bindless_texture");
	 fn(program1,location1,count1,values1);
}
#endif

#ifndef	GL_ALT_FUNDEF_UniformHandleui64NV
#define GL_ALT_FUNDEF_UniformHandleui64NV
typedef void (*PFNGLUNIFORMHANDLEUI64NVPROC_ALT)(GLint,GLuint64);
static inline void glUniformHandleui64NV(GLint location1,GLuint64 value1)
{
	static PFNGLUNIFORMHANDLEUI64NVPROC_ALT fn=(PFNGLUNIFORMHANDLEUI64NVPROC_ALT)glaltGetProcAddressExtension("glUniformHandleui64NV","GL_NV_bindless_texture");
	 fn(location1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_UniformHandleui64vNV
#define GL_ALT_FUNDEF_UniformHandleui64vNV
typedef void (*PFNGLUNIFORMHANDLEUI64VNVPROC_ALT)(GLint,GLsizei,const GLuint64 *);
static inline void glUniformHandleui64vNV(GLint location1,GLsizei count1,const GLuint64 * value1)
{
	static PFNGLUNIFORMHANDLEUI64VNVPROC_ALT fn=(PFNGLUNIFORMHANDLEUI64VNVPROC_ALT)glaltGetProcAddressExtension("glUniformHandleui64vNV","GL_NV_bindless_texture");
	 fn(location1,count1,value1);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_blend_equation_advanced
#define GL_NV_blend_equation_advanced
#ifndef GL_ZERO
#define GL_ZERO 0
#endif //GL_ZERO
#ifndef GL_XOR_NV
#define GL_XOR_NV 0x1506
#endif //GL_XOR_NV
#ifndef GL_INVERT
#define GL_INVERT 0x150A
#endif //GL_INVERT
#ifndef GL_RED_NV
#define GL_RED_NV 0x1903
#endif //GL_RED_NV
#ifndef GL_GREEN_NV
#define GL_GREEN_NV 0x1904
#endif //GL_GREEN_NV
#ifndef GL_BLUE_NV
#define GL_BLUE_NV 0x1905
#endif //GL_BLUE_NV
#ifndef GL_BLEND_PREMULTIPLIED_SRC_NV
#define GL_BLEND_PREMULTIPLIED_SRC_NV 0x9280
#endif //GL_BLEND_PREMULTIPLIED_SRC_NV
#ifndef GL_BLEND_OVERLAP_NV
#define GL_BLEND_OVERLAP_NV 0x9281
#endif //GL_BLEND_OVERLAP_NV
#ifndef GL_UNCORRELATED_NV
#define GL_UNCORRELATED_NV 0x9282
#endif //GL_UNCORRELATED_NV
#ifndef GL_DISJOINT_NV
#define GL_DISJOINT_NV 0x9283
#endif //GL_DISJOINT_NV
#ifndef GL_CONJOINT_NV
#define GL_CONJOINT_NV 0x9284
#endif //GL_CONJOINT_NV
#ifndef GL_SRC_NV
#define GL_SRC_NV 0x9286
#endif //GL_SRC_NV
#ifndef GL_DST_NV
#define GL_DST_NV 0x9287
#endif //GL_DST_NV
#ifndef GL_SRC_OVER_NV
#define GL_SRC_OVER_NV 0x9288
#endif //GL_SRC_OVER_NV
#ifndef GL_DST_OVER_NV
#define GL_DST_OVER_NV 0x9289
#endif //GL_DST_OVER_NV
#ifndef GL_SRC_IN_NV
#define GL_SRC_IN_NV 0x928A
#endif //GL_SRC_IN_NV
#ifndef GL_DST_IN_NV
#define GL_DST_IN_NV 0x928B
#endif //GL_DST_IN_NV
#ifndef GL_SRC_OUT_NV
#define GL_SRC_OUT_NV 0x928C
#endif //GL_SRC_OUT_NV
#ifndef GL_DST_OUT_NV
#define GL_DST_OUT_NV 0x928D
#endif //GL_DST_OUT_NV
#ifndef GL_SRC_ATOP_NV
#define GL_SRC_ATOP_NV 0x928E
#endif //GL_SRC_ATOP_NV
#ifndef GL_DST_ATOP_NV
#define GL_DST_ATOP_NV 0x928F
#endif //GL_DST_ATOP_NV
#ifndef GL_PLUS_NV
#define GL_PLUS_NV 0x9291
#endif //GL_PLUS_NV
#ifndef GL_PLUS_DARKER_NV
#define GL_PLUS_DARKER_NV 0x9292
#endif //GL_PLUS_DARKER_NV
#ifndef GL_MULTIPLY_NV
#define GL_MULTIPLY_NV 0x9294
#endif //GL_MULTIPLY_NV
#ifndef GL_SCREEN_NV
#define GL_SCREEN_NV 0x9295
#endif //GL_SCREEN_NV
#ifndef GL_OVERLAY_NV
#define GL_OVERLAY_NV 0x9296
#endif //GL_OVERLAY_NV
#ifndef GL_DARKEN_NV
#define GL_DARKEN_NV 0x9297
#endif //GL_DARKEN_NV
#ifndef GL_LIGHTEN_NV
#define GL_LIGHTEN_NV 0x9298
#endif //GL_LIGHTEN_NV
#ifndef GL_COLORDODGE_NV
#define GL_COLORDODGE_NV 0x9299
#endif //GL_COLORDODGE_NV
#ifndef GL_COLORBURN_NV
#define GL_COLORBURN_NV 0x929A
#endif //GL_COLORBURN_NV
#ifndef GL_HARDLIGHT_NV
#define GL_HARDLIGHT_NV 0x929B
#endif //GL_HARDLIGHT_NV
#ifndef GL_SOFTLIGHT_NV
#define GL_SOFTLIGHT_NV 0x929C
#endif //GL_SOFTLIGHT_NV
#ifndef GL_DIFFERENCE_NV
#define GL_DIFFERENCE_NV 0x929E
#endif //GL_DIFFERENCE_NV
#ifndef GL_MINUS_NV
#define GL_MINUS_NV 0x929F
#endif //GL_MINUS_NV
#ifndef GL_EXCLUSION_NV
#define GL_EXCLUSION_NV 0x92A0
#endif //GL_EXCLUSION_NV
#ifndef GL_CONTRAST_NV
#define GL_CONTRAST_NV 0x92A1
#endif //GL_CONTRAST_NV
#ifndef GL_INVERT_RGB_NV
#define GL_INVERT_RGB_NV 0x92A3
#endif //GL_INVERT_RGB_NV
#ifndef GL_LINEARDODGE_NV
#define GL_LINEARDODGE_NV 0x92A4
#endif //GL_LINEARDODGE_NV
#ifndef GL_LINEARBURN_NV
#define GL_LINEARBURN_NV 0x92A5
#endif //GL_LINEARBURN_NV
#ifndef GL_VIVIDLIGHT_NV
#define GL_VIVIDLIGHT_NV 0x92A6
#endif //GL_VIVIDLIGHT_NV
#ifndef GL_LINEARLIGHT_NV
#define GL_LINEARLIGHT_NV 0x92A7
#endif //GL_LINEARLIGHT_NV
#ifndef GL_PINLIGHT_NV
#define GL_PINLIGHT_NV 0x92A8
#endif //GL_PINLIGHT_NV
#ifndef GL_HARDMIX_NV
#define GL_HARDMIX_NV 0x92A9
#endif //GL_HARDMIX_NV
#ifndef GL_HSL_HUE_NV
#define GL_HSL_HUE_NV 0x92AD
#endif //GL_HSL_HUE_NV
#ifndef GL_HSL_SATURATION_NV
#define GL_HSL_SATURATION_NV 0x92AE
#endif //GL_HSL_SATURATION_NV
#ifndef GL_HSL_COLOR_NV
#define GL_HSL_COLOR_NV 0x92AF
#endif //GL_HSL_COLOR_NV
#ifndef GL_HSL_LUMINOSITY_NV
#define GL_HSL_LUMINOSITY_NV 0x92B0
#endif //GL_HSL_LUMINOSITY_NV
#ifndef GL_PLUS_CLAMPED_NV
#define GL_PLUS_CLAMPED_NV 0x92B1
#endif //GL_PLUS_CLAMPED_NV
#ifndef GL_PLUS_CLAMPED_ALPHA_NV
#define GL_PLUS_CLAMPED_ALPHA_NV 0x92B2
#endif //GL_PLUS_CLAMPED_ALPHA_NV
#ifndef GL_MINUS_CLAMPED_NV
#define GL_MINUS_CLAMPED_NV 0x92B3
#endif //GL_MINUS_CLAMPED_NV
#ifndef GL_INVERT_OVG_NV
#define GL_INVERT_OVG_NV 0x92B4
#endif //GL_INVERT_OVG_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BlendBarrierNV
#define GL_ALT_FUNDEF_BlendBarrierNV
typedef void (*PFNGLBLENDBARRIERNVPROC_ALT)();
static inline void glBlendBarrierNV()
{
	static PFNGLBLENDBARRIERNVPROC_ALT fn=(PFNGLBLENDBARRIERNVPROC_ALT)glaltGetProcAddressExtension("glBlendBarrierNV","GL_NV_blend_equation_advanced");
	 fn();
}
#endif

#ifndef	GL_ALT_FUNDEF_BlendParameteriNV
#define GL_ALT_FUNDEF_BlendParameteriNV
typedef void (*PFNGLBLENDPARAMETERINVPROC_ALT)(GLenum,GLint);
static inline void glBlendParameteriNV(GLenum pname1,GLint value1)
{
	static PFNGLBLENDPARAMETERINVPROC_ALT fn=(PFNGLBLENDPARAMETERINVPROC_ALT)glaltGetProcAddressExtension("glBlendParameteriNV","GL_NV_blend_equation_advanced");
	 fn(pname1,value1);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_blend_equation_advanced_coherent
#define GL_NV_blend_equation_advanced_coherent
#ifndef GL_BLEND_ADVANCED_COHERENT_NV
#define GL_BLEND_ADVANCED_COHERENT_NV 0x9285
#endif //GL_BLEND_ADVANCED_COHERENT_NV
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_blend_square
#define GL_NV_blend_square
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_compute_program5
#define GL_NV_compute_program5
#ifndef GL_COMPUTE_PROGRAM_NV
#define GL_COMPUTE_PROGRAM_NV 0x90FB
#endif //GL_COMPUTE_PROGRAM_NV
#ifndef GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV
#define GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV 0x90FC
#endif //GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_conditional_render
#define GL_NV_conditional_render
#ifndef GL_QUERY_WAIT_NV
#define GL_QUERY_WAIT_NV 0x8E13
#endif //GL_QUERY_WAIT_NV
#ifndef GL_QUERY_NO_WAIT_NV
#define GL_QUERY_NO_WAIT_NV 0x8E14
#endif //GL_QUERY_NO_WAIT_NV
#ifndef GL_QUERY_BY_REGION_WAIT_NV
#define GL_QUERY_BY_REGION_WAIT_NV 0x8E15
#endif //GL_QUERY_BY_REGION_WAIT_NV
#ifndef GL_QUERY_BY_REGION_NO_WAIT_NV
#define GL_QUERY_BY_REGION_NO_WAIT_NV 0x8E16
#endif //GL_QUERY_BY_REGION_NO_WAIT_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BeginConditionalRenderNV
#define GL_ALT_FUNDEF_BeginConditionalRenderNV
typedef void (*PFNGLBEGINCONDITIONALRENDERNVPROC_ALT)(GLuint,GLenum);
static inline void glBeginConditionalRenderNV(GLuint id1,GLenum mode1)
{
	static PFNGLBEGINCONDITIONALRENDERNVPROC_ALT fn=(PFNGLBEGINCONDITIONALRENDERNVPROC_ALT)glaltGetProcAddressExtension("glBeginConditionalRenderNV","GL_NV_conditional_render");
	 fn(id1,mode1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_EndConditionalRenderNV
#define GL_ALT_FUNDEF_EndConditionalRenderNV
typedef void (*PFNGLENDCONDITIONALRENDERNVPROC_ALT)();
static inline void glEndConditionalRenderNV()
{
	static PFNGLENDCONDITIONALRENDERNVPROC_ALT fn=(PFNGLENDCONDITIONALRENDERNVPROC_ALT)glaltGetProcAddressExtension("glEndConditionalRenderNV","GL_NV_conditional_render");
	 fn();
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_NV_copy_depth_to_color
#define GL_NV_copy_depth_to_color
#ifndef GL_DEPTH_STENCIL_TO_RGBA_NV
#define GL_DEPTH_STENCIL_TO_RGBA_NV 0x886E
#endif //GL_DEPTH_STENCIL_TO_RGBA_NV
#ifndef GL_DEPTH_STENCIL_TO_BGRA_NV
#define GL_DEPTH_STENCIL_TO_BGRA_NV 0x886F
#endif //GL_DEPTH_STENCIL_TO_BGRA_NV
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_copy_image
#define GL_NV_copy_image
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_CopyImageSubDataNV
#define GL_ALT_FUNDEF_CopyImageSubDataNV
typedef void (*PFNGLCOPYIMAGESUBDATANVPROC_ALT)(GLuint,GLenum,GLint,GLint,GLint,GLint,GLuint,GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei);
static inline void glCopyImageSubDataNV(GLuint srcName1,GLenum srcTarget1,GLint srcLevel1,GLint srcX1,GLint srcY1,GLint srcZ1,GLuint dstName1,GLenum dstTarget1,GLint dstLevel1,GLint dstX1,GLint dstY1,GLint dstZ1,GLsizei width1,GLsizei height1,GLsizei depth1)
{
	static PFNGLCOPYIMAGESUBDATANVPROC_ALT fn=(PFNGLCOPYIMAGESUBDATANVPROC_ALT)glaltGetProcAddressExtension("glCopyImageSubDataNV","GL_NV_copy_image");
	 fn(srcName1,srcTarget1,srcLevel1,srcX1,srcY1,srcZ1,dstName1,dstTarget1,dstLevel1,dstX1,dstY1,dstZ1,width1,height1,depth1);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_deep_texture3D
#define GL_NV_deep_texture3D
#ifndef GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV
#define GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV 0x90D0
#endif //GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV
#ifndef GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV
#define GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV 0x90D1
#endif //GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_depth_buffer_float
#define GL_NV_depth_buffer_float
#ifndef GL_DEPTH_COMPONENT32F_NV
#define GL_DEPTH_COMPONENT32F_NV 0x8DAB
#endif //GL_DEPTH_COMPONENT32F_NV
#ifndef GL_DEPTH32F_STENCIL8_NV
#define GL_DEPTH32F_STENCIL8_NV 0x8DAC
#endif //GL_DEPTH32F_STENCIL8_NV
#ifndef GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV 0x8DAD
#endif //GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV
#ifndef GL_DEPTH_BUFFER_FLOAT_MODE_NV
#define GL_DEPTH_BUFFER_FLOAT_MODE_NV 0x8DAF
#endif //GL_DEPTH_BUFFER_FLOAT_MODE_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ClearDepthdNV
#define GL_ALT_FUNDEF_ClearDepthdNV
typedef void (*PFNGLCLEARDEPTHDNVPROC_ALT)(GLdouble);
static inline void glClearDepthdNV(GLdouble depth1)
{
	static PFNGLCLEARDEPTHDNVPROC_ALT fn=(PFNGLCLEARDEPTHDNVPROC_ALT)glaltGetProcAddressExtension("glClearDepthdNV","GL_NV_depth_buffer_float");
	 fn(depth1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DepthBoundsdNV
#define GL_ALT_FUNDEF_DepthBoundsdNV
typedef void (*PFNGLDEPTHBOUNDSDNVPROC_ALT)(GLdouble,GLdouble);
static inline void glDepthBoundsdNV(GLdouble zmin1,GLdouble zmax1)
{
	static PFNGLDEPTHBOUNDSDNVPROC_ALT fn=(PFNGLDEPTHBOUNDSDNVPROC_ALT)glaltGetProcAddressExtension("glDepthBoundsdNV","GL_NV_depth_buffer_float");
	 fn(zmin1,zmax1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DepthRangedNV
#define GL_ALT_FUNDEF_DepthRangedNV
typedef void (*PFNGLDEPTHRANGEDNVPROC_ALT)(GLdouble,GLdouble);
static inline void glDepthRangedNV(GLdouble zNear1,GLdouble zFar1)
{
	static PFNGLDEPTHRANGEDNVPROC_ALT fn=(PFNGLDEPTHRANGEDNVPROC_ALT)glaltGetProcAddressExtension("glDepthRangedNV","GL_NV_depth_buffer_float");
	 fn(zNear1,zFar1);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_depth_clamp
#define GL_NV_depth_clamp
#ifndef GL_DEPTH_CLAMP_NV
#define GL_DEPTH_CLAMP_NV 0x864F
#endif //GL_DEPTH_CLAMP_NV
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_draw_texture
#define GL_NV_draw_texture
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_DrawTextureNV
#define GL_ALT_FUNDEF_DrawTextureNV
typedef void (*PFNGLDRAWTEXTURENVPROC_ALT)(GLuint,GLuint,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glDrawTextureNV(GLuint texture1,GLuint sampler1,GLfloat x01,GLfloat y01,GLfloat x11,GLfloat y11,GLfloat z1,GLfloat s01,GLfloat t01,GLfloat s11,GLfloat t11)
{
	static PFNGLDRAWTEXTURENVPROC_ALT fn=(PFNGLDRAWTEXTURENVPROC_ALT)glaltGetProcAddressExtension("glDrawTextureNV","GL_NV_draw_texture");
	 fn(texture1,sampler1,x01,y01,x11,y11,z1,s01,t01,s11,t11);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_evaluators
#define GL_NV_evaluators
#ifndef GL_EVAL_2D_NV
#define GL_EVAL_2D_NV 0x86C0
#endif //GL_EVAL_2D_NV
#ifndef GL_EVAL_TRIANGULAR_2D_NV
#define GL_EVAL_TRIANGULAR_2D_NV 0x86C1
#endif //GL_EVAL_TRIANGULAR_2D_NV
#ifndef GL_MAP_TESSELLATION_NV
#define GL_MAP_TESSELLATION_NV 0x86C2
#endif //GL_MAP_TESSELLATION_NV
#ifndef GL_MAP_ATTRIB_U_ORDER_NV
#define GL_MAP_ATTRIB_U_ORDER_NV 0x86C3
#endif //GL_MAP_ATTRIB_U_ORDER_NV
#ifndef GL_MAP_ATTRIB_V_ORDER_NV
#define GL_MAP_ATTRIB_V_ORDER_NV 0x86C4
#endif //GL_MAP_ATTRIB_V_ORDER_NV
#ifndef GL_EVAL_FRACTIONAL_TESSELLATION_NV
#define GL_EVAL_FRACTIONAL_TESSELLATION_NV 0x86C5
#endif //GL_EVAL_FRACTIONAL_TESSELLATION_NV
#ifndef GL_EVAL_VERTEX_ATTRIB0_NV
#define GL_EVAL_VERTEX_ATTRIB0_NV 0x86C6
#endif //GL_EVAL_VERTEX_ATTRIB0_NV
#ifndef GL_EVAL_VERTEX_ATTRIB1_NV
#define GL_EVAL_VERTEX_ATTRIB1_NV 0x86C7
#endif //GL_EVAL_VERTEX_ATTRIB1_NV
#ifndef GL_EVAL_VERTEX_ATTRIB2_NV
#define GL_EVAL_VERTEX_ATTRIB2_NV 0x86C8
#endif //GL_EVAL_VERTEX_ATTRIB2_NV
#ifndef GL_EVAL_VERTEX_ATTRIB3_NV
#define GL_EVAL_VERTEX_ATTRIB3_NV 0x86C9
#endif //GL_EVAL_VERTEX_ATTRIB3_NV
#ifndef GL_EVAL_VERTEX_ATTRIB4_NV
#define GL_EVAL_VERTEX_ATTRIB4_NV 0x86CA
#endif //GL_EVAL_VERTEX_ATTRIB4_NV
#ifndef GL_EVAL_VERTEX_ATTRIB5_NV
#define GL_EVAL_VERTEX_ATTRIB5_NV 0x86CB
#endif //GL_EVAL_VERTEX_ATTRIB5_NV
#ifndef GL_EVAL_VERTEX_ATTRIB6_NV
#define GL_EVAL_VERTEX_ATTRIB6_NV 0x86CC
#endif //GL_EVAL_VERTEX_ATTRIB6_NV
#ifndef GL_EVAL_VERTEX_ATTRIB7_NV
#define GL_EVAL_VERTEX_ATTRIB7_NV 0x86CD
#endif //GL_EVAL_VERTEX_ATTRIB7_NV
#ifndef GL_EVAL_VERTEX_ATTRIB8_NV
#define GL_EVAL_VERTEX_ATTRIB8_NV 0x86CE
#endif //GL_EVAL_VERTEX_ATTRIB8_NV
#ifndef GL_EVAL_VERTEX_ATTRIB9_NV
#define GL_EVAL_VERTEX_ATTRIB9_NV 0x86CF
#endif //GL_EVAL_VERTEX_ATTRIB9_NV
#ifndef GL_EVAL_VERTEX_ATTRIB10_NV
#define GL_EVAL_VERTEX_ATTRIB10_NV 0x86D0
#endif //GL_EVAL_VERTEX_ATTRIB10_NV
#ifndef GL_EVAL_VERTEX_ATTRIB11_NV
#define GL_EVAL_VERTEX_ATTRIB11_NV 0x86D1
#endif //GL_EVAL_VERTEX_ATTRIB11_NV
#ifndef GL_EVAL_VERTEX_ATTRIB12_NV
#define GL_EVAL_VERTEX_ATTRIB12_NV 0x86D2
#endif //GL_EVAL_VERTEX_ATTRIB12_NV
#ifndef GL_EVAL_VERTEX_ATTRIB13_NV
#define GL_EVAL_VERTEX_ATTRIB13_NV 0x86D3
#endif //GL_EVAL_VERTEX_ATTRIB13_NV
#ifndef GL_EVAL_VERTEX_ATTRIB14_NV
#define GL_EVAL_VERTEX_ATTRIB14_NV 0x86D4
#endif //GL_EVAL_VERTEX_ATTRIB14_NV
#ifndef GL_EVAL_VERTEX_ATTRIB15_NV
#define GL_EVAL_VERTEX_ATTRIB15_NV 0x86D5
#endif //GL_EVAL_VERTEX_ATTRIB15_NV
#ifndef GL_MAX_MAP_TESSELLATION_NV
#define GL_MAX_MAP_TESSELLATION_NV 0x86D6
#endif //GL_MAX_MAP_TESSELLATION_NV
#ifndef GL_MAX_RATIONAL_EVAL_ORDER_NV
#define GL_MAX_RATIONAL_EVAL_ORDER_NV 0x86D7
#endif //GL_MAX_RATIONAL_EVAL_ORDER_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_EvalMapsNV
#define GL_ALT_FUNDEF_EvalMapsNV
typedef void (*PFNGLEVALMAPSNVPROC_ALT)(GLenum,GLenum);
static inline void glEvalMapsNV(GLenum target1,GLenum mode1)
{
	static PFNGLEVALMAPSNVPROC_ALT fn=(PFNGLEVALMAPSNVPROC_ALT)glaltGetProcAddressExtension("glEvalMapsNV","GL_NV_evaluators");
	 fn(target1,mode1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetMapAttribParameterfvNV
#define GL_ALT_FUNDEF_GetMapAttribParameterfvNV
typedef void (*PFNGLGETMAPATTRIBPARAMETERFVNVPROC_ALT)(GLenum,GLuint,GLenum,GLfloat *);
static inline void glGetMapAttribParameterfvNV(GLenum target1,GLuint index1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETMAPATTRIBPARAMETERFVNVPROC_ALT fn=(PFNGLGETMAPATTRIBPARAMETERFVNVPROC_ALT)glaltGetProcAddressExtension("glGetMapAttribParameterfvNV","GL_NV_evaluators");
	 fn(target1,index1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetMapAttribParameterivNV
#define GL_ALT_FUNDEF_GetMapAttribParameterivNV
typedef void (*PFNGLGETMAPATTRIBPARAMETERIVNVPROC_ALT)(GLenum,GLuint,GLenum,GLint *);
static inline void glGetMapAttribParameterivNV(GLenum target1,GLuint index1,GLenum pname1,GLint * params1)
{
	static PFNGLGETMAPATTRIBPARAMETERIVNVPROC_ALT fn=(PFNGLGETMAPATTRIBPARAMETERIVNVPROC_ALT)glaltGetProcAddressExtension("glGetMapAttribParameterivNV","GL_NV_evaluators");
	 fn(target1,index1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetMapControlPointsNV
#define GL_ALT_FUNDEF_GetMapControlPointsNV
typedef void (*PFNGLGETMAPCONTROLPOINTSNVPROC_ALT)(GLenum,GLuint,GLenum,GLsizei,GLsizei,GLboolean,void *);
static inline void glGetMapControlPointsNV(GLenum target1,GLuint index1,GLenum type1,GLsizei ustride1,GLsizei vstride1,GLboolean packed1,void * points1)
{
	static PFNGLGETMAPCONTROLPOINTSNVPROC_ALT fn=(PFNGLGETMAPCONTROLPOINTSNVPROC_ALT)glaltGetProcAddressExtension("glGetMapControlPointsNV","GL_NV_evaluators");
	 fn(target1,index1,type1,ustride1,vstride1,packed1,points1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetMapParameterfvNV
#define GL_ALT_FUNDEF_GetMapParameterfvNV
typedef void (*PFNGLGETMAPPARAMETERFVNVPROC_ALT)(GLenum,GLenum,GLfloat *);
static inline void glGetMapParameterfvNV(GLenum target1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETMAPPARAMETERFVNVPROC_ALT fn=(PFNGLGETMAPPARAMETERFVNVPROC_ALT)glaltGetProcAddressExtension("glGetMapParameterfvNV","GL_NV_evaluators");
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetMapParameterivNV
#define GL_ALT_FUNDEF_GetMapParameterivNV
typedef void (*PFNGLGETMAPPARAMETERIVNVPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetMapParameterivNV(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETMAPPARAMETERIVNVPROC_ALT fn=(PFNGLGETMAPPARAMETERIVNVPROC_ALT)glaltGetProcAddressExtension("glGetMapParameterivNV","GL_NV_evaluators");
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MapControlPointsNV
#define GL_ALT_FUNDEF_MapControlPointsNV
typedef void (*PFNGLMAPCONTROLPOINTSNVPROC_ALT)(GLenum,GLuint,GLenum,GLsizei,GLsizei,GLint,GLint,GLboolean,const void *);
static inline void glMapControlPointsNV(GLenum target1,GLuint index1,GLenum type1,GLsizei ustride1,GLsizei vstride1,GLint uorder1,GLint vorder1,GLboolean packed1,const void * points1)
{
	static PFNGLMAPCONTROLPOINTSNVPROC_ALT fn=(PFNGLMAPCONTROLPOINTSNVPROC_ALT)glaltGetProcAddressExtension("glMapControlPointsNV","GL_NV_evaluators");
	 fn(target1,index1,type1,ustride1,vstride1,uorder1,vorder1,packed1,points1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MapParameterfvNV
#define GL_ALT_FUNDEF_MapParameterfvNV
typedef void (*PFNGLMAPPARAMETERFVNVPROC_ALT)(GLenum,GLenum,const GLfloat *);
static inline void glMapParameterfvNV(GLenum target1,GLenum pname1,const GLfloat * params1)
{
	static PFNGLMAPPARAMETERFVNVPROC_ALT fn=(PFNGLMAPPARAMETERFVNVPROC_ALT)glaltGetProcAddressExtension("glMapParameterfvNV","GL_NV_evaluators");
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MapParameterivNV
#define GL_ALT_FUNDEF_MapParameterivNV
typedef void (*PFNGLMAPPARAMETERIVNVPROC_ALT)(GLenum,GLenum,const GLint *);
static inline void glMapParameterivNV(GLenum target1,GLenum pname1,const GLint * params1)
{
	static PFNGLMAPPARAMETERIVNVPROC_ALT fn=(PFNGLMAPPARAMETERIVNVPROC_ALT)glaltGetProcAddressExtension("glMapParameterivNV","GL_NV_evaluators");
	 fn(target1,pname1,params1);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_explicit_multisample
#define GL_NV_explicit_multisample
#ifndef GL_SAMPLE_POSITION_NV
#define GL_SAMPLE_POSITION_NV 0x8E50
#endif //GL_SAMPLE_POSITION_NV
#ifndef GL_SAMPLE_MASK_NV
#define GL_SAMPLE_MASK_NV 0x8E51
#endif //GL_SAMPLE_MASK_NV
#ifndef GL_SAMPLE_MASK_VALUE_NV
#define GL_SAMPLE_MASK_VALUE_NV 0x8E52
#endif //GL_SAMPLE_MASK_VALUE_NV
#ifndef GL_TEXTURE_BINDING_RENDERBUFFER_NV
#define GL_TEXTURE_BINDING_RENDERBUFFER_NV 0x8E53
#endif //GL_TEXTURE_BINDING_RENDERBUFFER_NV
#ifndef GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV
#define GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV 0x8E54
#endif //GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV
#ifndef GL_TEXTURE_RENDERBUFFER_NV
#define GL_TEXTURE_RENDERBUFFER_NV 0x8E55
#endif //GL_TEXTURE_RENDERBUFFER_NV
#ifndef GL_SAMPLER_RENDERBUFFER_NV
#define GL_SAMPLER_RENDERBUFFER_NV 0x8E56
#endif //GL_SAMPLER_RENDERBUFFER_NV
#ifndef GL_INT_SAMPLER_RENDERBUFFER_NV
#define GL_INT_SAMPLER_RENDERBUFFER_NV 0x8E57
#endif //GL_INT_SAMPLER_RENDERBUFFER_NV
#ifndef GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV
#define GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV 0x8E58
#endif //GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV
#ifndef GL_MAX_SAMPLE_MASK_WORDS_NV
#define GL_MAX_SAMPLE_MASK_WORDS_NV 0x8E59
#endif //GL_MAX_SAMPLE_MASK_WORDS_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetMultisamplefvNV
#define GL_ALT_FUNDEF_GetMultisamplefvNV
typedef void (*PFNGLGETMULTISAMPLEFVNVPROC_ALT)(GLenum,GLuint,GLfloat *);
static inline void glGetMultisamplefvNV(GLenum pname1,GLuint index1,GLfloat * val1)
{
	static PFNGLGETMULTISAMPLEFVNVPROC_ALT fn=(PFNGLGETMULTISAMPLEFVNVPROC_ALT)glaltGetProcAddressExtension("glGetMultisamplefvNV","GL_NV_explicit_multisample");
	 fn(pname1,index1,val1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_SampleMaskIndexedNV
#define GL_ALT_FUNDEF_SampleMaskIndexedNV
typedef void (*PFNGLSAMPLEMASKINDEXEDNVPROC_ALT)(GLuint,GLbitfield);
static inline void glSampleMaskIndexedNV(GLuint index1,GLbitfield mask1)
{
	static PFNGLSAMPLEMASKINDEXEDNVPROC_ALT fn=(PFNGLSAMPLEMASKINDEXEDNVPROC_ALT)glaltGetProcAddressExtension("glSampleMaskIndexedNV","GL_NV_explicit_multisample");
	 fn(index1,mask1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexRenderbufferNV
#define GL_ALT_FUNDEF_TexRenderbufferNV
typedef void (*PFNGLTEXRENDERBUFFERNVPROC_ALT)(GLenum,GLuint);
static inline void glTexRenderbufferNV(GLenum target1,GLuint renderbuffer1)
{
	static PFNGLTEXRENDERBUFFERNVPROC_ALT fn=(PFNGLTEXRENDERBUFFERNVPROC_ALT)glaltGetProcAddressExtension("glTexRenderbufferNV","GL_NV_explicit_multisample");
	 fn(target1,renderbuffer1);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_fence
#define GL_NV_fence
#ifndef GL_ALL_COMPLETED_NV
#define GL_ALL_COMPLETED_NV 0x84F2
#endif //GL_ALL_COMPLETED_NV
#ifndef GL_FENCE_STATUS_NV
#define GL_FENCE_STATUS_NV 0x84F3
#endif //GL_FENCE_STATUS_NV
#ifndef GL_FENCE_CONDITION_NV
#define GL_FENCE_CONDITION_NV 0x84F4
#endif //GL_FENCE_CONDITION_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_DeleteFencesNV
#define GL_ALT_FUNDEF_DeleteFencesNV
typedef void (*PFNGLDELETEFENCESNVPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteFencesNV(GLsizei n1,const GLuint * fences1)
{
	static PFNGLDELETEFENCESNVPROC_ALT fn=(PFNGLDELETEFENCESNVPROC_ALT)glaltGetProcAddressExtension("glDeleteFencesNV","GL_NV_fence");
	 fn(n1,fences1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FinishFenceNV
#define GL_ALT_FUNDEF_FinishFenceNV
typedef void (*PFNGLFINISHFENCENVPROC_ALT)(GLuint);
static inline void glFinishFenceNV(GLuint fence1)
{
	static PFNGLFINISHFENCENVPROC_ALT fn=(PFNGLFINISHFENCENVPROC_ALT)glaltGetProcAddressExtension("glFinishFenceNV","GL_NV_fence");
	 fn(fence1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GenFencesNV
#define GL_ALT_FUNDEF_GenFencesNV
typedef void (*PFNGLGENFENCESNVPROC_ALT)(GLsizei,GLuint *);
static inline void glGenFencesNV(GLsizei n1,GLuint * fences1)
{
	static PFNGLGENFENCESNVPROC_ALT fn=(PFNGLGENFENCESNVPROC_ALT)glaltGetProcAddressExtension("glGenFencesNV","GL_NV_fence");
	 fn(n1,fences1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetFenceivNV
#define GL_ALT_FUNDEF_GetFenceivNV
typedef void (*PFNGLGETFENCEIVNVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetFenceivNV(GLuint fence1,GLenum pname1,GLint * params1)
{
	static PFNGLGETFENCEIVNVPROC_ALT fn=(PFNGLGETFENCEIVNVPROC_ALT)glaltGetProcAddressExtension("glGetFenceivNV","GL_NV_fence");
	 fn(fence1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IsFenceNV
#define GL_ALT_FUNDEF_IsFenceNV
typedef GLboolean (*PFNGLISFENCENVPROC_ALT)(GLuint);
static inline GLboolean glIsFenceNV(GLuint fence1)
{
	static PFNGLISFENCENVPROC_ALT fn=(PFNGLISFENCENVPROC_ALT)glaltGetProcAddressExtension("glIsFenceNV","GL_NV_fence");
	return fn(fence1);
}
#endif

#ifndef	GL_ALT_FUNDEF_SetFenceNV
#define GL_ALT_FUNDEF_SetFenceNV
typedef void (*PFNGLSETFENCENVPROC_ALT)(GLuint,GLenum);
static inline void glSetFenceNV(GLuint fence1,GLenum condition1)
{
	static PFNGLSETFENCENVPROC_ALT fn=(PFNGLSETFENCENVPROC_ALT)glaltGetProcAddressExtension("glSetFenceNV","GL_NV_fence");
	 fn(fence1,condition1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TestFenceNV
#define GL_ALT_FUNDEF_TestFenceNV
typedef GLboolean (*PFNGLTESTFENCENVPROC_ALT)(GLuint);
static inline GLboolean glTestFenceNV(GLuint fence1)
{
	static PFNGLTESTFENCENVPROC_ALT fn=(PFNGLTESTFENCENVPROC_ALT)glaltGetProcAddressExtension("glTestFenceNV","GL_NV_fence");
	return fn(fence1);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_float_buffer
#define GL_NV_float_buffer
#ifndef GL_FLOAT_R_NV
#define GL_FLOAT_R_NV 0x8880
#endif //GL_FLOAT_R_NV
#ifndef GL_FLOAT_RG_NV
#define GL_FLOAT_RG_NV 0x8881
#endif //GL_FLOAT_RG_NV
#ifndef GL_FLOAT_RGB_NV
#define GL_FLOAT_RGB_NV 0x8882
#endif //GL_FLOAT_RGB_NV
#ifndef GL_FLOAT_RGBA_NV
#define GL_FLOAT_RGBA_NV 0x8883
#endif //GL_FLOAT_RGBA_NV
#ifndef GL_FLOAT_R16_NV
#define GL_FLOAT_R16_NV 0x8884
#endif //GL_FLOAT_R16_NV
#ifndef GL_FLOAT_R32_NV
#define GL_FLOAT_R32_NV 0x8885
#endif //GL_FLOAT_R32_NV
#ifndef GL_FLOAT_RG16_NV
#define GL_FLOAT_RG16_NV 0x8886
#endif //GL_FLOAT_RG16_NV
#ifndef GL_FLOAT_RG32_NV
#define GL_FLOAT_RG32_NV 0x8887
#endif //GL_FLOAT_RG32_NV
#ifndef GL_FLOAT_RGB16_NV
#define GL_FLOAT_RGB16_NV 0x8888
#endif //GL_FLOAT_RGB16_NV
#ifndef GL_FLOAT_RGB32_NV
#define GL_FLOAT_RGB32_NV 0x8889
#endif //GL_FLOAT_RGB32_NV
#ifndef GL_FLOAT_RGBA16_NV
#define GL_FLOAT_RGBA16_NV 0x888A
#endif //GL_FLOAT_RGBA16_NV
#ifndef GL_FLOAT_RGBA32_NV
#define GL_FLOAT_RGBA32_NV 0x888B
#endif //GL_FLOAT_RGBA32_NV
#ifndef GL_TEXTURE_FLOAT_COMPONENTS_NV
#define GL_TEXTURE_FLOAT_COMPONENTS_NV 0x888C
#endif //GL_TEXTURE_FLOAT_COMPONENTS_NV
#ifndef GL_FLOAT_CLEAR_COLOR_VALUE_NV
#define GL_FLOAT_CLEAR_COLOR_VALUE_NV 0x888D
#endif //GL_FLOAT_CLEAR_COLOR_VALUE_NV
#ifndef GL_FLOAT_RGBA_MODE_NV
#define GL_FLOAT_RGBA_MODE_NV 0x888E
#endif //GL_FLOAT_RGBA_MODE_NV
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_fog_distance
#define GL_NV_fog_distance
#ifndef GL_EYE_PLANE
#define GL_EYE_PLANE 0x2502
#endif //GL_EYE_PLANE
#ifndef GL_FOG_DISTANCE_MODE_NV
#define GL_FOG_DISTANCE_MODE_NV 0x855A
#endif //GL_FOG_DISTANCE_MODE_NV
#ifndef GL_EYE_RADIAL_NV
#define GL_EYE_RADIAL_NV 0x855B
#endif //GL_EYE_RADIAL_NV
#ifndef GL_EYE_PLANE_ABSOLUTE_NV
#define GL_EYE_PLANE_ABSOLUTE_NV 0x855C
#endif //GL_EYE_PLANE_ABSOLUTE_NV
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_fragment_program
#define GL_NV_fragment_program
#ifndef GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV
#define GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV 0x8868
#endif //GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV
#ifndef GL_FRAGMENT_PROGRAM_NV
#define GL_FRAGMENT_PROGRAM_NV 0x8870
#endif //GL_FRAGMENT_PROGRAM_NV
#ifndef GL_MAX_TEXTURE_COORDS_NV
#define GL_MAX_TEXTURE_COORDS_NV 0x8871
#endif //GL_MAX_TEXTURE_COORDS_NV
#ifndef GL_MAX_TEXTURE_IMAGE_UNITS_NV
#define GL_MAX_TEXTURE_IMAGE_UNITS_NV 0x8872
#endif //GL_MAX_TEXTURE_IMAGE_UNITS_NV
#ifndef GL_FRAGMENT_PROGRAM_BINDING_NV
#define GL_FRAGMENT_PROGRAM_BINDING_NV 0x8873
#endif //GL_FRAGMENT_PROGRAM_BINDING_NV
#ifndef GL_PROGRAM_ERROR_STRING_NV
#define GL_PROGRAM_ERROR_STRING_NV 0x8874
#endif //GL_PROGRAM_ERROR_STRING_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetProgramNamedParameterdvNV
#define GL_ALT_FUNDEF_GetProgramNamedParameterdvNV
typedef void (*PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC_ALT)(GLuint,GLsizei,const GLubyte *,GLdouble *);
static inline void glGetProgramNamedParameterdvNV(GLuint id1,GLsizei len1,const GLubyte * name1,GLdouble * params1)
{
	static PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC_ALT fn=(PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC_ALT)glaltGetProcAddressExtension("glGetProgramNamedParameterdvNV","GL_NV_fragment_program");
	 fn(id1,len1,name1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetProgramNamedParameterfvNV
#define GL_ALT_FUNDEF_GetProgramNamedParameterfvNV
typedef void (*PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC_ALT)(GLuint,GLsizei,const GLubyte *,GLfloat *);
static inline void glGetProgramNamedParameterfvNV(GLuint id1,GLsizei len1,const GLubyte * name1,GLfloat * params1)
{
	static PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC_ALT fn=(PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC_ALT)glaltGetProcAddressExtension("glGetProgramNamedParameterfvNV","GL_NV_fragment_program");
	 fn(id1,len1,name1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramNamedParameter4dNV
#define GL_ALT_FUNDEF_ProgramNamedParameter4dNV
typedef void (*PFNGLPROGRAMNAMEDPARAMETER4DNVPROC_ALT)(GLuint,GLsizei,const GLubyte *,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void glProgramNamedParameter4dNV(GLuint id1,GLsizei len1,const GLubyte * name1,GLdouble x1,GLdouble y1,GLdouble z1,GLdouble w1)
{
	static PFNGLPROGRAMNAMEDPARAMETER4DNVPROC_ALT fn=(PFNGLPROGRAMNAMEDPARAMETER4DNVPROC_ALT)glaltGetProcAddressExtension("glProgramNamedParameter4dNV","GL_NV_fragment_program");
	 fn(id1,len1,name1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramNamedParameter4dvNV
#define GL_ALT_FUNDEF_ProgramNamedParameter4dvNV
typedef void (*PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC_ALT)(GLuint,GLsizei,const GLubyte *,const GLdouble *);
static inline void glProgramNamedParameter4dvNV(GLuint id1,GLsizei len1,const GLubyte * name1,const GLdouble * v1)
{
	static PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC_ALT fn=(PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC_ALT)glaltGetProcAddressExtension("glProgramNamedParameter4dvNV","GL_NV_fragment_program");
	 fn(id1,len1,name1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramNamedParameter4fNV
#define GL_ALT_FUNDEF_ProgramNamedParameter4fNV
typedef void (*PFNGLPROGRAMNAMEDPARAMETER4FNVPROC_ALT)(GLuint,GLsizei,const GLubyte *,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glProgramNamedParameter4fNV(GLuint id1,GLsizei len1,const GLubyte * name1,GLfloat x1,GLfloat y1,GLfloat z1,GLfloat w1)
{
	static PFNGLPROGRAMNAMEDPARAMETER4FNVPROC_ALT fn=(PFNGLPROGRAMNAMEDPARAMETER4FNVPROC_ALT)glaltGetProcAddressExtension("glProgramNamedParameter4fNV","GL_NV_fragment_program");
	 fn(id1,len1,name1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramNamedParameter4fvNV
#define GL_ALT_FUNDEF_ProgramNamedParameter4fvNV
typedef void (*PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC_ALT)(GLuint,GLsizei,const GLubyte *,const GLfloat *);
static inline void glProgramNamedParameter4fvNV(GLuint id1,GLsizei len1,const GLubyte * name1,const GLfloat * v1)
{
	static PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC_ALT fn=(PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC_ALT)glaltGetProcAddressExtension("glProgramNamedParameter4fvNV","GL_NV_fragment_program");
	 fn(id1,len1,name1,v1);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_fragment_program2
#define GL_NV_fragment_program2
#ifndef GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
#define GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV 0x88F4
#endif //GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
#ifndef GL_MAX_PROGRAM_CALL_DEPTH_NV
#define GL_MAX_PROGRAM_CALL_DEPTH_NV 0x88F5
#endif //GL_MAX_PROGRAM_CALL_DEPTH_NV
#ifndef GL_MAX_PROGRAM_IF_DEPTH_NV
#define GL_MAX_PROGRAM_IF_DEPTH_NV 0x88F6
#endif //GL_MAX_PROGRAM_IF_DEPTH_NV
#ifndef GL_MAX_PROGRAM_LOOP_DEPTH_NV
#define GL_MAX_PROGRAM_LOOP_DEPTH_NV 0x88F7
#endif //GL_MAX_PROGRAM_LOOP_DEPTH_NV
#ifndef GL_MAX_PROGRAM_LOOP_COUNT_NV
#define GL_MAX_PROGRAM_LOOP_COUNT_NV 0x88F8
#endif //GL_MAX_PROGRAM_LOOP_COUNT_NV
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_fragment_program4
#define GL_NV_fragment_program4
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_fragment_program_option
#define GL_NV_fragment_program_option
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_framebuffer_multisample_coverage
#define GL_NV_framebuffer_multisample_coverage
#ifndef GL_RENDERBUFFER_COVERAGE_SAMPLES_NV
#define GL_RENDERBUFFER_COVERAGE_SAMPLES_NV 0x8CAB
#endif //GL_RENDERBUFFER_COVERAGE_SAMPLES_NV
#ifndef GL_RENDERBUFFER_COLOR_SAMPLES_NV
#define GL_RENDERBUFFER_COLOR_SAMPLES_NV 0x8E10
#endif //GL_RENDERBUFFER_COLOR_SAMPLES_NV
#ifndef GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV
#define GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV 0x8E11
#endif //GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV
#ifndef GL_MULTISAMPLE_COVERAGE_MODES_NV
#define GL_MULTISAMPLE_COVERAGE_MODES_NV 0x8E12
#endif //GL_MULTISAMPLE_COVERAGE_MODES_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_RenderbufferStorageMultisampleCoverageNV
#define GL_ALT_FUNDEF_RenderbufferStorageMultisampleCoverageNV
typedef void (*PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC_ALT)(GLenum,GLsizei,GLsizei,GLenum,GLsizei,GLsizei);
static inline void glRenderbufferStorageMultisampleCoverageNV(GLenum target1,GLsizei coverageSamples1,GLsizei colorSamples1,GLenum internalformat1,GLsizei width1,GLsizei height1)
{
	static PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC_ALT fn=(PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC_ALT)glaltGetProcAddressExtension("glRenderbufferStorageMultisampleCoverageNV","GL_NV_framebuffer_multisample_coverage");
	 fn(target1,coverageSamples1,colorSamples1,internalformat1,width1,height1);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_geometry_program4
#define GL_NV_geometry_program4
#ifndef GL_LINES_ADJACENCY_EXT
#define GL_LINES_ADJACENCY_EXT 0x000A
#endif //GL_LINES_ADJACENCY_EXT
#ifndef GL_LINE_STRIP_ADJACENCY_EXT
#define GL_LINE_STRIP_ADJACENCY_EXT 0x000B
#endif //GL_LINE_STRIP_ADJACENCY_EXT
#ifndef GL_TRIANGLES_ADJACENCY_EXT
#define GL_TRIANGLES_ADJACENCY_EXT 0x000C
#endif //GL_TRIANGLES_ADJACENCY_EXT
#ifndef GL_TRIANGLE_STRIP_ADJACENCY_EXT
#define GL_TRIANGLE_STRIP_ADJACENCY_EXT 0x000D
#endif //GL_TRIANGLE_STRIP_ADJACENCY_EXT
#ifndef GL_PROGRAM_POINT_SIZE_EXT
#define GL_PROGRAM_POINT_SIZE_EXT 0x8642
#endif //GL_PROGRAM_POINT_SIZE_EXT
#ifndef GL_GEOMETRY_PROGRAM_NV
#define GL_GEOMETRY_PROGRAM_NV 0x8C26
#endif //GL_GEOMETRY_PROGRAM_NV
#ifndef GL_MAX_PROGRAM_OUTPUT_VERTICES_NV
#define GL_MAX_PROGRAM_OUTPUT_VERTICES_NV 0x8C27
#endif //GL_MAX_PROGRAM_OUTPUT_VERTICES_NV
#ifndef GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV
#define GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV 0x8C28
#endif //GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV
#ifndef GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT 0x8C29
#endif //GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT
#ifndef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT 0x8CD4
#endif //GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
#ifndef GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT 0x8DA7
#endif //GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT
#ifndef GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT 0x8DA8
#endif //GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT
#ifndef GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT 0x8DA9
#endif //GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT
#ifndef GL_GEOMETRY_VERTICES_OUT_EXT
#define GL_GEOMETRY_VERTICES_OUT_EXT 0x8DDA
#endif //GL_GEOMETRY_VERTICES_OUT_EXT
#ifndef GL_GEOMETRY_INPUT_TYPE_EXT
#define GL_GEOMETRY_INPUT_TYPE_EXT 0x8DDB
#endif //GL_GEOMETRY_INPUT_TYPE_EXT
#ifndef GL_GEOMETRY_OUTPUT_TYPE_EXT
#define GL_GEOMETRY_OUTPUT_TYPE_EXT 0x8DDC
#endif //GL_GEOMETRY_OUTPUT_TYPE_EXT
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_FramebufferTextureEXT
#define GL_ALT_FUNDEF_FramebufferTextureEXT
typedef void (*PFNGLFRAMEBUFFERTEXTUREEXTPROC_ALT)(GLenum,GLenum,GLuint,GLint);
static inline void glFramebufferTextureEXT(GLenum target1,GLenum attachment1,GLuint texture1,GLint level1)
{
	static PFNGLFRAMEBUFFERTEXTUREEXTPROC_ALT fn=(PFNGLFRAMEBUFFERTEXTUREEXTPROC_ALT)glaltGetProcAddressExtension("glFramebufferTextureEXT","GL_NV_geometry_program4");
	 fn(target1,attachment1,texture1,level1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_FramebufferTextureFaceEXT
#define GL_ALT_FUNDEF_FramebufferTextureFaceEXT
typedef void (*PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC_ALT)(GLenum,GLenum,GLuint,GLint,GLenum);
static inline void glFramebufferTextureFaceEXT(GLenum target1,GLenum attachment1,GLuint texture1,GLint level1,GLenum face1)
{
	static PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC_ALT fn=(PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC_ALT)glaltGetProcAddressExtension("glFramebufferTextureFaceEXT","GL_NV_geometry_program4");
	 fn(target1,attachment1,texture1,level1,face1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_FramebufferTextureLayerEXT
#define GL_ALT_FUNDEF_FramebufferTextureLayerEXT
typedef void (*PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC_ALT)(GLenum,GLenum,GLuint,GLint,GLint);
static inline void glFramebufferTextureLayerEXT(GLenum target1,GLenum attachment1,GLuint texture1,GLint level1,GLint layer1)
{
	static PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC_ALT fn=(PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC_ALT)glaltGetProcAddressExtension("glFramebufferTextureLayerEXT","GL_NV_geometry_program4");
	 fn(target1,attachment1,texture1,level1,layer1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ProgramVertexLimitNV
#define GL_ALT_FUNDEF_ProgramVertexLimitNV
typedef void (*PFNGLPROGRAMVERTEXLIMITNVPROC_ALT)(GLenum,GLint);
static inline void glProgramVertexLimitNV(GLenum target1,GLint limit1)
{
	static PFNGLPROGRAMVERTEXLIMITNVPROC_ALT fn=(PFNGLPROGRAMVERTEXLIMITNVPROC_ALT)glaltGetProcAddressExtension("glProgramVertexLimitNV","GL_NV_geometry_program4");
	 fn(target1,limit1);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_geometry_shader4
#define GL_NV_geometry_shader4
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_gpu_program4
#define GL_NV_gpu_program4
#ifndef GL_MIN_PROGRAM_TEXEL_OFFSET_NV
#define GL_MIN_PROGRAM_TEXEL_OFFSET_NV 0x8904
#endif //GL_MIN_PROGRAM_TEXEL_OFFSET_NV
#ifndef GL_MAX_PROGRAM_TEXEL_OFFSET_NV
#define GL_MAX_PROGRAM_TEXEL_OFFSET_NV 0x8905
#endif //GL_MAX_PROGRAM_TEXEL_OFFSET_NV
#ifndef GL_PROGRAM_ATTRIB_COMPONENTS_NV
#define GL_PROGRAM_ATTRIB_COMPONENTS_NV 0x8906
#endif //GL_PROGRAM_ATTRIB_COMPONENTS_NV
#ifndef GL_PROGRAM_RESULT_COMPONENTS_NV
#define GL_PROGRAM_RESULT_COMPONENTS_NV 0x8907
#endif //GL_PROGRAM_RESULT_COMPONENTS_NV
#ifndef GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV
#define GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV 0x8908
#endif //GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV
#ifndef GL_MAX_PROGRAM_RESULT_COMPONENTS_NV
#define GL_MAX_PROGRAM_RESULT_COMPONENTS_NV 0x8909
#endif //GL_MAX_PROGRAM_RESULT_COMPONENTS_NV
#ifndef GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV
#define GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV 0x8DA5
#endif //GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV
#ifndef GL_MAX_PROGRAM_GENERIC_RESULTS_NV
#define GL_MAX_PROGRAM_GENERIC_RESULTS_NV 0x8DA6
#endif //GL_MAX_PROGRAM_GENERIC_RESULTS_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetProgramEnvParameterIivNV
#define GL_ALT_FUNDEF_GetProgramEnvParameterIivNV
typedef void (*PFNGLGETPROGRAMENVPARAMETERIIVNVPROC_ALT)(GLenum,GLuint,GLint *);
static inline void glGetProgramEnvParameterIivNV(GLenum target1,GLuint index1,GLint * params1)
{
	static PFNGLGETPROGRAMENVPARAMETERIIVNVPROC_ALT fn=(PFNGLGETPROGRAMENVPARAMETERIIVNVPROC_ALT)glaltGetProcAddressExtension("glGetProgramEnvParameterIivNV","GL_NV_gpu_program4");
	 fn(target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetProgramEnvParameterIuivNV
#define GL_ALT_FUNDEF_GetProgramEnvParameterIuivNV
typedef void (*PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC_ALT)(GLenum,GLuint,GLuint *);
static inline void glGetProgramEnvParameterIuivNV(GLenum target1,GLuint index1,GLuint * params1)
{
	static PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC_ALT fn=(PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC_ALT)glaltGetProcAddressExtension("glGetProgramEnvParameterIuivNV","GL_NV_gpu_program4");
	 fn(target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetProgramLocalParameterIivNV
#define GL_ALT_FUNDEF_GetProgramLocalParameterIivNV
typedef void (*PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC_ALT)(GLenum,GLuint,GLint *);
static inline void glGetProgramLocalParameterIivNV(GLenum target1,GLuint index1,GLint * params1)
{
	static PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC_ALT fn=(PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC_ALT)glaltGetProcAddressExtension("glGetProgramLocalParameterIivNV","GL_NV_gpu_program4");
	 fn(target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetProgramLocalParameterIuivNV
#define GL_ALT_FUNDEF_GetProgramLocalParameterIuivNV
typedef void (*PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC_ALT)(GLenum,GLuint,GLuint *);
static inline void glGetProgramLocalParameterIuivNV(GLenum target1,GLuint index1,GLuint * params1)
{
	static PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC_ALT fn=(PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC_ALT)glaltGetProcAddressExtension("glGetProgramLocalParameterIuivNV","GL_NV_gpu_program4");
	 fn(target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramEnvParameterI4iNV
#define GL_ALT_FUNDEF_ProgramEnvParameterI4iNV
typedef void (*PFNGLPROGRAMENVPARAMETERI4INVPROC_ALT)(GLenum,GLuint,GLint,GLint,GLint,GLint);
static inline void glProgramEnvParameterI4iNV(GLenum target1,GLuint index1,GLint x1,GLint y1,GLint z1,GLint w1)
{
	static PFNGLPROGRAMENVPARAMETERI4INVPROC_ALT fn=(PFNGLPROGRAMENVPARAMETERI4INVPROC_ALT)glaltGetProcAddressExtension("glProgramEnvParameterI4iNV","GL_NV_gpu_program4");
	 fn(target1,index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramEnvParameterI4ivNV
#define GL_ALT_FUNDEF_ProgramEnvParameterI4ivNV
typedef void (*PFNGLPROGRAMENVPARAMETERI4IVNVPROC_ALT)(GLenum,GLuint,const GLint *);
static inline void glProgramEnvParameterI4ivNV(GLenum target1,GLuint index1,const GLint * params1)
{
	static PFNGLPROGRAMENVPARAMETERI4IVNVPROC_ALT fn=(PFNGLPROGRAMENVPARAMETERI4IVNVPROC_ALT)glaltGetProcAddressExtension("glProgramEnvParameterI4ivNV","GL_NV_gpu_program4");
	 fn(target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramEnvParameterI4uiNV
#define GL_ALT_FUNDEF_ProgramEnvParameterI4uiNV
typedef void (*PFNGLPROGRAMENVPARAMETERI4UINVPROC_ALT)(GLenum,GLuint,GLuint,GLuint,GLuint,GLuint);
static inline void glProgramEnvParameterI4uiNV(GLenum target1,GLuint index1,GLuint x1,GLuint y1,GLuint z1,GLuint w1)
{
	static PFNGLPROGRAMENVPARAMETERI4UINVPROC_ALT fn=(PFNGLPROGRAMENVPARAMETERI4UINVPROC_ALT)glaltGetProcAddressExtension("glProgramEnvParameterI4uiNV","GL_NV_gpu_program4");
	 fn(target1,index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramEnvParameterI4uivNV
#define GL_ALT_FUNDEF_ProgramEnvParameterI4uivNV
typedef void (*PFNGLPROGRAMENVPARAMETERI4UIVNVPROC_ALT)(GLenum,GLuint,const GLuint *);
static inline void glProgramEnvParameterI4uivNV(GLenum target1,GLuint index1,const GLuint * params1)
{
	static PFNGLPROGRAMENVPARAMETERI4UIVNVPROC_ALT fn=(PFNGLPROGRAMENVPARAMETERI4UIVNVPROC_ALT)glaltGetProcAddressExtension("glProgramEnvParameterI4uivNV","GL_NV_gpu_program4");
	 fn(target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramEnvParametersI4ivNV
#define GL_ALT_FUNDEF_ProgramEnvParametersI4ivNV
typedef void (*PFNGLPROGRAMENVPARAMETERSI4IVNVPROC_ALT)(GLenum,GLuint,GLsizei,const GLint *);
static inline void glProgramEnvParametersI4ivNV(GLenum target1,GLuint index1,GLsizei count1,const GLint * params1)
{
	static PFNGLPROGRAMENVPARAMETERSI4IVNVPROC_ALT fn=(PFNGLPROGRAMENVPARAMETERSI4IVNVPROC_ALT)glaltGetProcAddressExtension("glProgramEnvParametersI4ivNV","GL_NV_gpu_program4");
	 fn(target1,index1,count1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramEnvParametersI4uivNV
#define GL_ALT_FUNDEF_ProgramEnvParametersI4uivNV
typedef void (*PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC_ALT)(GLenum,GLuint,GLsizei,const GLuint *);
static inline void glProgramEnvParametersI4uivNV(GLenum target1,GLuint index1,GLsizei count1,const GLuint * params1)
{
	static PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC_ALT fn=(PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC_ALT)glaltGetProcAddressExtension("glProgramEnvParametersI4uivNV","GL_NV_gpu_program4");
	 fn(target1,index1,count1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramLocalParameterI4iNV
#define GL_ALT_FUNDEF_ProgramLocalParameterI4iNV
typedef void (*PFNGLPROGRAMLOCALPARAMETERI4INVPROC_ALT)(GLenum,GLuint,GLint,GLint,GLint,GLint);
static inline void glProgramLocalParameterI4iNV(GLenum target1,GLuint index1,GLint x1,GLint y1,GLint z1,GLint w1)
{
	static PFNGLPROGRAMLOCALPARAMETERI4INVPROC_ALT fn=(PFNGLPROGRAMLOCALPARAMETERI4INVPROC_ALT)glaltGetProcAddressExtension("glProgramLocalParameterI4iNV","GL_NV_gpu_program4");
	 fn(target1,index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramLocalParameterI4ivNV
#define GL_ALT_FUNDEF_ProgramLocalParameterI4ivNV
typedef void (*PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC_ALT)(GLenum,GLuint,const GLint *);
static inline void glProgramLocalParameterI4ivNV(GLenum target1,GLuint index1,const GLint * params1)
{
	static PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC_ALT fn=(PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC_ALT)glaltGetProcAddressExtension("glProgramLocalParameterI4ivNV","GL_NV_gpu_program4");
	 fn(target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramLocalParameterI4uiNV
#define GL_ALT_FUNDEF_ProgramLocalParameterI4uiNV
typedef void (*PFNGLPROGRAMLOCALPARAMETERI4UINVPROC_ALT)(GLenum,GLuint,GLuint,GLuint,GLuint,GLuint);
static inline void glProgramLocalParameterI4uiNV(GLenum target1,GLuint index1,GLuint x1,GLuint y1,GLuint z1,GLuint w1)
{
	static PFNGLPROGRAMLOCALPARAMETERI4UINVPROC_ALT fn=(PFNGLPROGRAMLOCALPARAMETERI4UINVPROC_ALT)glaltGetProcAddressExtension("glProgramLocalParameterI4uiNV","GL_NV_gpu_program4");
	 fn(target1,index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramLocalParameterI4uivNV
#define GL_ALT_FUNDEF_ProgramLocalParameterI4uivNV
typedef void (*PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC_ALT)(GLenum,GLuint,const GLuint *);
static inline void glProgramLocalParameterI4uivNV(GLenum target1,GLuint index1,const GLuint * params1)
{
	static PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC_ALT fn=(PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC_ALT)glaltGetProcAddressExtension("glProgramLocalParameterI4uivNV","GL_NV_gpu_program4");
	 fn(target1,index1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramLocalParametersI4ivNV
#define GL_ALT_FUNDEF_ProgramLocalParametersI4ivNV
typedef void (*PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC_ALT)(GLenum,GLuint,GLsizei,const GLint *);
static inline void glProgramLocalParametersI4ivNV(GLenum target1,GLuint index1,GLsizei count1,const GLint * params1)
{
	static PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC_ALT fn=(PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC_ALT)glaltGetProcAddressExtension("glProgramLocalParametersI4ivNV","GL_NV_gpu_program4");
	 fn(target1,index1,count1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramLocalParametersI4uivNV
#define GL_ALT_FUNDEF_ProgramLocalParametersI4uivNV
typedef void (*PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC_ALT)(GLenum,GLuint,GLsizei,const GLuint *);
static inline void glProgramLocalParametersI4uivNV(GLenum target1,GLuint index1,GLsizei count1,const GLuint * params1)
{
	static PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC_ALT fn=(PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC_ALT)glaltGetProcAddressExtension("glProgramLocalParametersI4uivNV","GL_NV_gpu_program4");
	 fn(target1,index1,count1,params1);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_gpu_program5
#define GL_NV_gpu_program5
#ifndef GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV
#define GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV 0x8E5A
#endif //GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV
#ifndef GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV 0x8E5B
#endif //GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV
#ifndef GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV 0x8E5C
#endif //GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV
#ifndef GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV
#define GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV 0x8E5D
#endif //GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV
#ifndef GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV 0x8E5E
#endif //GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV
#ifndef GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV 0x8E5F
#endif //GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV
#ifndef GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV
#define GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV 0x8F44
#endif //GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV
#ifndef GL_MAX_PROGRAM_SUBROUTINE_NUM_NV
#define GL_MAX_PROGRAM_SUBROUTINE_NUM_NV 0x8F45
#endif //GL_MAX_PROGRAM_SUBROUTINE_NUM_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetProgramSubroutineParameteruivNV
#define GL_ALT_FUNDEF_GetProgramSubroutineParameteruivNV
typedef void (*PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC_ALT)(GLenum,GLuint,GLuint *);
static inline void glGetProgramSubroutineParameteruivNV(GLenum target1,GLuint index1,GLuint * param1)
{
	static PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC_ALT fn=(PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC_ALT)glaltGetProcAddressExtension("glGetProgramSubroutineParameteruivNV","GL_NV_gpu_program5");
	 fn(target1,index1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramSubroutineParametersuivNV
#define GL_ALT_FUNDEF_ProgramSubroutineParametersuivNV
typedef void (*PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC_ALT)(GLenum,GLsizei,const GLuint *);
static inline void glProgramSubroutineParametersuivNV(GLenum target1,GLsizei count1,const GLuint * params1)
{
	static PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC_ALT fn=(PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC_ALT)glaltGetProcAddressExtension("glProgramSubroutineParametersuivNV","GL_NV_gpu_program5");
	 fn(target1,count1,params1);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_gpu_program5_mem_extended
#define GL_NV_gpu_program5_mem_extended
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_gpu_shader5
#define GL_NV_gpu_shader5
#ifndef GL_PATCHES
#define GL_PATCHES 0x000E
#endif //GL_PATCHES
#ifndef GL_INT64_NV
#define GL_INT64_NV 0x140E
#endif //GL_INT64_NV
#ifndef GL_UNSIGNED_INT64_NV
#define GL_UNSIGNED_INT64_NV 0x140F
#endif //GL_UNSIGNED_INT64_NV
#ifndef GL_INT8_NV
#define GL_INT8_NV 0x8FE0
#endif //GL_INT8_NV
#ifndef GL_INT8_VEC2_NV
#define GL_INT8_VEC2_NV 0x8FE1
#endif //GL_INT8_VEC2_NV
#ifndef GL_INT8_VEC3_NV
#define GL_INT8_VEC3_NV 0x8FE2
#endif //GL_INT8_VEC3_NV
#ifndef GL_INT8_VEC4_NV
#define GL_INT8_VEC4_NV 0x8FE3
#endif //GL_INT8_VEC4_NV
#ifndef GL_INT16_NV
#define GL_INT16_NV 0x8FE4
#endif //GL_INT16_NV
#ifndef GL_INT16_VEC2_NV
#define GL_INT16_VEC2_NV 0x8FE5
#endif //GL_INT16_VEC2_NV
#ifndef GL_INT16_VEC3_NV
#define GL_INT16_VEC3_NV 0x8FE6
#endif //GL_INT16_VEC3_NV
#ifndef GL_INT16_VEC4_NV
#define GL_INT16_VEC4_NV 0x8FE7
#endif //GL_INT16_VEC4_NV
#ifndef GL_INT64_VEC2_NV
#define GL_INT64_VEC2_NV 0x8FE9
#endif //GL_INT64_VEC2_NV
#ifndef GL_INT64_VEC3_NV
#define GL_INT64_VEC3_NV 0x8FEA
#endif //GL_INT64_VEC3_NV
#ifndef GL_INT64_VEC4_NV
#define GL_INT64_VEC4_NV 0x8FEB
#endif //GL_INT64_VEC4_NV
#ifndef GL_UNSIGNED_INT8_NV
#define GL_UNSIGNED_INT8_NV 0x8FEC
#endif //GL_UNSIGNED_INT8_NV
#ifndef GL_UNSIGNED_INT8_VEC2_NV
#define GL_UNSIGNED_INT8_VEC2_NV 0x8FED
#endif //GL_UNSIGNED_INT8_VEC2_NV
#ifndef GL_UNSIGNED_INT8_VEC3_NV
#define GL_UNSIGNED_INT8_VEC3_NV 0x8FEE
#endif //GL_UNSIGNED_INT8_VEC3_NV
#ifndef GL_UNSIGNED_INT8_VEC4_NV
#define GL_UNSIGNED_INT8_VEC4_NV 0x8FEF
#endif //GL_UNSIGNED_INT8_VEC4_NV
#ifndef GL_UNSIGNED_INT16_NV
#define GL_UNSIGNED_INT16_NV 0x8FF0
#endif //GL_UNSIGNED_INT16_NV
#ifndef GL_UNSIGNED_INT16_VEC2_NV
#define GL_UNSIGNED_INT16_VEC2_NV 0x8FF1
#endif //GL_UNSIGNED_INT16_VEC2_NV
#ifndef GL_UNSIGNED_INT16_VEC3_NV
#define GL_UNSIGNED_INT16_VEC3_NV 0x8FF2
#endif //GL_UNSIGNED_INT16_VEC3_NV
#ifndef GL_UNSIGNED_INT16_VEC4_NV
#define GL_UNSIGNED_INT16_VEC4_NV 0x8FF3
#endif //GL_UNSIGNED_INT16_VEC4_NV
#ifndef GL_UNSIGNED_INT64_VEC2_NV
#define GL_UNSIGNED_INT64_VEC2_NV 0x8FF5
#endif //GL_UNSIGNED_INT64_VEC2_NV
#ifndef GL_UNSIGNED_INT64_VEC3_NV
#define GL_UNSIGNED_INT64_VEC3_NV 0x8FF6
#endif //GL_UNSIGNED_INT64_VEC3_NV
#ifndef GL_UNSIGNED_INT64_VEC4_NV
#define GL_UNSIGNED_INT64_VEC4_NV 0x8FF7
#endif //GL_UNSIGNED_INT64_VEC4_NV
#ifndef GL_FLOAT16_NV
#define GL_FLOAT16_NV 0x8FF8
#endif //GL_FLOAT16_NV
#ifndef GL_FLOAT16_VEC2_NV
#define GL_FLOAT16_VEC2_NV 0x8FF9
#endif //GL_FLOAT16_VEC2_NV
#ifndef GL_FLOAT16_VEC3_NV
#define GL_FLOAT16_VEC3_NV 0x8FFA
#endif //GL_FLOAT16_VEC3_NV
#ifndef GL_FLOAT16_VEC4_NV
#define GL_FLOAT16_VEC4_NV 0x8FFB
#endif //GL_FLOAT16_VEC4_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetUniformi64vNV
#define GL_ALT_FUNDEF_GetUniformi64vNV
typedef void (*PFNGLGETUNIFORMI64VNVPROC_ALT)(GLuint,GLint,GLint64EXT *);
static inline void glGetUniformi64vNV(GLuint program1,GLint location1,GLint64EXT * params1)
{
	static PFNGLGETUNIFORMI64VNVPROC_ALT fn=(PFNGLGETUNIFORMI64VNVPROC_ALT)glaltGetProcAddressExtension("glGetUniformi64vNV","GL_NV_gpu_shader5");
	 fn(program1,location1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform1i64NV
#define GL_ALT_FUNDEF_ProgramUniform1i64NV
typedef void (*PFNGLPROGRAMUNIFORM1I64NVPROC_ALT)(GLuint,GLint,GLint64EXT);
static inline void glProgramUniform1i64NV(GLuint program1,GLint location1,GLint64EXT x1)
{
	static PFNGLPROGRAMUNIFORM1I64NVPROC_ALT fn=(PFNGLPROGRAMUNIFORM1I64NVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform1i64NV","GL_NV_gpu_shader5");
	 fn(program1,location1,x1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform1i64vNV
#define GL_ALT_FUNDEF_ProgramUniform1i64vNV
typedef void (*PFNGLPROGRAMUNIFORM1I64VNVPROC_ALT)(GLuint,GLint,GLsizei,const GLint64EXT *);
static inline void glProgramUniform1i64vNV(GLuint program1,GLint location1,GLsizei count1,const GLint64EXT * value1)
{
	static PFNGLPROGRAMUNIFORM1I64VNVPROC_ALT fn=(PFNGLPROGRAMUNIFORM1I64VNVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform1i64vNV","GL_NV_gpu_shader5");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform1ui64NV
#define GL_ALT_FUNDEF_ProgramUniform1ui64NV
typedef void (*PFNGLPROGRAMUNIFORM1UI64NVPROC_ALT)(GLuint,GLint,GLuint64EXT);
static inline void glProgramUniform1ui64NV(GLuint program1,GLint location1,GLuint64EXT x1)
{
	static PFNGLPROGRAMUNIFORM1UI64NVPROC_ALT fn=(PFNGLPROGRAMUNIFORM1UI64NVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform1ui64NV","GL_NV_gpu_shader5");
	 fn(program1,location1,x1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform1ui64vNV
#define GL_ALT_FUNDEF_ProgramUniform1ui64vNV
typedef void (*PFNGLPROGRAMUNIFORM1UI64VNVPROC_ALT)(GLuint,GLint,GLsizei,const GLuint64EXT *);
static inline void glProgramUniform1ui64vNV(GLuint program1,GLint location1,GLsizei count1,const GLuint64EXT * value1)
{
	static PFNGLPROGRAMUNIFORM1UI64VNVPROC_ALT fn=(PFNGLPROGRAMUNIFORM1UI64VNVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform1ui64vNV","GL_NV_gpu_shader5");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform2i64NV
#define GL_ALT_FUNDEF_ProgramUniform2i64NV
typedef void (*PFNGLPROGRAMUNIFORM2I64NVPROC_ALT)(GLuint,GLint,GLint64EXT,GLint64EXT);
static inline void glProgramUniform2i64NV(GLuint program1,GLint location1,GLint64EXT x1,GLint64EXT y1)
{
	static PFNGLPROGRAMUNIFORM2I64NVPROC_ALT fn=(PFNGLPROGRAMUNIFORM2I64NVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform2i64NV","GL_NV_gpu_shader5");
	 fn(program1,location1,x1,y1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform2i64vNV
#define GL_ALT_FUNDEF_ProgramUniform2i64vNV
typedef void (*PFNGLPROGRAMUNIFORM2I64VNVPROC_ALT)(GLuint,GLint,GLsizei,const GLint64EXT *);
static inline void glProgramUniform2i64vNV(GLuint program1,GLint location1,GLsizei count1,const GLint64EXT * value1)
{
	static PFNGLPROGRAMUNIFORM2I64VNVPROC_ALT fn=(PFNGLPROGRAMUNIFORM2I64VNVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform2i64vNV","GL_NV_gpu_shader5");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform2ui64NV
#define GL_ALT_FUNDEF_ProgramUniform2ui64NV
typedef void (*PFNGLPROGRAMUNIFORM2UI64NVPROC_ALT)(GLuint,GLint,GLuint64EXT,GLuint64EXT);
static inline void glProgramUniform2ui64NV(GLuint program1,GLint location1,GLuint64EXT x1,GLuint64EXT y1)
{
	static PFNGLPROGRAMUNIFORM2UI64NVPROC_ALT fn=(PFNGLPROGRAMUNIFORM2UI64NVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform2ui64NV","GL_NV_gpu_shader5");
	 fn(program1,location1,x1,y1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform2ui64vNV
#define GL_ALT_FUNDEF_ProgramUniform2ui64vNV
typedef void (*PFNGLPROGRAMUNIFORM2UI64VNVPROC_ALT)(GLuint,GLint,GLsizei,const GLuint64EXT *);
static inline void glProgramUniform2ui64vNV(GLuint program1,GLint location1,GLsizei count1,const GLuint64EXT * value1)
{
	static PFNGLPROGRAMUNIFORM2UI64VNVPROC_ALT fn=(PFNGLPROGRAMUNIFORM2UI64VNVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform2ui64vNV","GL_NV_gpu_shader5");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform3i64NV
#define GL_ALT_FUNDEF_ProgramUniform3i64NV
typedef void (*PFNGLPROGRAMUNIFORM3I64NVPROC_ALT)(GLuint,GLint,GLint64EXT,GLint64EXT,GLint64EXT);
static inline void glProgramUniform3i64NV(GLuint program1,GLint location1,GLint64EXT x1,GLint64EXT y1,GLint64EXT z1)
{
	static PFNGLPROGRAMUNIFORM3I64NVPROC_ALT fn=(PFNGLPROGRAMUNIFORM3I64NVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform3i64NV","GL_NV_gpu_shader5");
	 fn(program1,location1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform3i64vNV
#define GL_ALT_FUNDEF_ProgramUniform3i64vNV
typedef void (*PFNGLPROGRAMUNIFORM3I64VNVPROC_ALT)(GLuint,GLint,GLsizei,const GLint64EXT *);
static inline void glProgramUniform3i64vNV(GLuint program1,GLint location1,GLsizei count1,const GLint64EXT * value1)
{
	static PFNGLPROGRAMUNIFORM3I64VNVPROC_ALT fn=(PFNGLPROGRAMUNIFORM3I64VNVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform3i64vNV","GL_NV_gpu_shader5");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform3ui64NV
#define GL_ALT_FUNDEF_ProgramUniform3ui64NV
typedef void (*PFNGLPROGRAMUNIFORM3UI64NVPROC_ALT)(GLuint,GLint,GLuint64EXT,GLuint64EXT,GLuint64EXT);
static inline void glProgramUniform3ui64NV(GLuint program1,GLint location1,GLuint64EXT x1,GLuint64EXT y1,GLuint64EXT z1)
{
	static PFNGLPROGRAMUNIFORM3UI64NVPROC_ALT fn=(PFNGLPROGRAMUNIFORM3UI64NVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform3ui64NV","GL_NV_gpu_shader5");
	 fn(program1,location1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform3ui64vNV
#define GL_ALT_FUNDEF_ProgramUniform3ui64vNV
typedef void (*PFNGLPROGRAMUNIFORM3UI64VNVPROC_ALT)(GLuint,GLint,GLsizei,const GLuint64EXT *);
static inline void glProgramUniform3ui64vNV(GLuint program1,GLint location1,GLsizei count1,const GLuint64EXT * value1)
{
	static PFNGLPROGRAMUNIFORM3UI64VNVPROC_ALT fn=(PFNGLPROGRAMUNIFORM3UI64VNVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform3ui64vNV","GL_NV_gpu_shader5");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform4i64NV
#define GL_ALT_FUNDEF_ProgramUniform4i64NV
typedef void (*PFNGLPROGRAMUNIFORM4I64NVPROC_ALT)(GLuint,GLint,GLint64EXT,GLint64EXT,GLint64EXT,GLint64EXT);
static inline void glProgramUniform4i64NV(GLuint program1,GLint location1,GLint64EXT x1,GLint64EXT y1,GLint64EXT z1,GLint64EXT w1)
{
	static PFNGLPROGRAMUNIFORM4I64NVPROC_ALT fn=(PFNGLPROGRAMUNIFORM4I64NVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform4i64NV","GL_NV_gpu_shader5");
	 fn(program1,location1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform4i64vNV
#define GL_ALT_FUNDEF_ProgramUniform4i64vNV
typedef void (*PFNGLPROGRAMUNIFORM4I64VNVPROC_ALT)(GLuint,GLint,GLsizei,const GLint64EXT *);
static inline void glProgramUniform4i64vNV(GLuint program1,GLint location1,GLsizei count1,const GLint64EXT * value1)
{
	static PFNGLPROGRAMUNIFORM4I64VNVPROC_ALT fn=(PFNGLPROGRAMUNIFORM4I64VNVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform4i64vNV","GL_NV_gpu_shader5");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform4ui64NV
#define GL_ALT_FUNDEF_ProgramUniform4ui64NV
typedef void (*PFNGLPROGRAMUNIFORM4UI64NVPROC_ALT)(GLuint,GLint,GLuint64EXT,GLuint64EXT,GLuint64EXT,GLuint64EXT);
static inline void glProgramUniform4ui64NV(GLuint program1,GLint location1,GLuint64EXT x1,GLuint64EXT y1,GLuint64EXT z1,GLuint64EXT w1)
{
	static PFNGLPROGRAMUNIFORM4UI64NVPROC_ALT fn=(PFNGLPROGRAMUNIFORM4UI64NVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform4ui64NV","GL_NV_gpu_shader5");
	 fn(program1,location1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniform4ui64vNV
#define GL_ALT_FUNDEF_ProgramUniform4ui64vNV
typedef void (*PFNGLPROGRAMUNIFORM4UI64VNVPROC_ALT)(GLuint,GLint,GLsizei,const GLuint64EXT *);
static inline void glProgramUniform4ui64vNV(GLuint program1,GLint location1,GLsizei count1,const GLuint64EXT * value1)
{
	static PFNGLPROGRAMUNIFORM4UI64VNVPROC_ALT fn=(PFNGLPROGRAMUNIFORM4UI64VNVPROC_ALT)glaltGetProcAddressExtension("glProgramUniform4ui64vNV","GL_NV_gpu_shader5");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform1i64NV
#define GL_ALT_FUNDEF_Uniform1i64NV
typedef void (*PFNGLUNIFORM1I64NVPROC_ALT)(GLint,GLint64EXT);
static inline void glUniform1i64NV(GLint location1,GLint64EXT x1)
{
	static PFNGLUNIFORM1I64NVPROC_ALT fn=(PFNGLUNIFORM1I64NVPROC_ALT)glaltGetProcAddressExtension("glUniform1i64NV","GL_NV_gpu_shader5");
	 fn(location1,x1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform1i64vNV
#define GL_ALT_FUNDEF_Uniform1i64vNV
typedef void (*PFNGLUNIFORM1I64VNVPROC_ALT)(GLint,GLsizei,const GLint64EXT *);
static inline void glUniform1i64vNV(GLint location1,GLsizei count1,const GLint64EXT * value1)
{
	static PFNGLUNIFORM1I64VNVPROC_ALT fn=(PFNGLUNIFORM1I64VNVPROC_ALT)glaltGetProcAddressExtension("glUniform1i64vNV","GL_NV_gpu_shader5");
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform1ui64NV
#define GL_ALT_FUNDEF_Uniform1ui64NV
typedef void (*PFNGLUNIFORM1UI64NVPROC_ALT)(GLint,GLuint64EXT);
static inline void glUniform1ui64NV(GLint location1,GLuint64EXT x1)
{
	static PFNGLUNIFORM1UI64NVPROC_ALT fn=(PFNGLUNIFORM1UI64NVPROC_ALT)glaltGetProcAddressExtension("glUniform1ui64NV","GL_NV_gpu_shader5");
	 fn(location1,x1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform1ui64vNV
#define GL_ALT_FUNDEF_Uniform1ui64vNV
typedef void (*PFNGLUNIFORM1UI64VNVPROC_ALT)(GLint,GLsizei,const GLuint64EXT *);
static inline void glUniform1ui64vNV(GLint location1,GLsizei count1,const GLuint64EXT * value1)
{
	static PFNGLUNIFORM1UI64VNVPROC_ALT fn=(PFNGLUNIFORM1UI64VNVPROC_ALT)glaltGetProcAddressExtension("glUniform1ui64vNV","GL_NV_gpu_shader5");
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform2i64NV
#define GL_ALT_FUNDEF_Uniform2i64NV
typedef void (*PFNGLUNIFORM2I64NVPROC_ALT)(GLint,GLint64EXT,GLint64EXT);
static inline void glUniform2i64NV(GLint location1,GLint64EXT x1,GLint64EXT y1)
{
	static PFNGLUNIFORM2I64NVPROC_ALT fn=(PFNGLUNIFORM2I64NVPROC_ALT)glaltGetProcAddressExtension("glUniform2i64NV","GL_NV_gpu_shader5");
	 fn(location1,x1,y1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform2i64vNV
#define GL_ALT_FUNDEF_Uniform2i64vNV
typedef void (*PFNGLUNIFORM2I64VNVPROC_ALT)(GLint,GLsizei,const GLint64EXT *);
static inline void glUniform2i64vNV(GLint location1,GLsizei count1,const GLint64EXT * value1)
{
	static PFNGLUNIFORM2I64VNVPROC_ALT fn=(PFNGLUNIFORM2I64VNVPROC_ALT)glaltGetProcAddressExtension("glUniform2i64vNV","GL_NV_gpu_shader5");
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform2ui64NV
#define GL_ALT_FUNDEF_Uniform2ui64NV
typedef void (*PFNGLUNIFORM2UI64NVPROC_ALT)(GLint,GLuint64EXT,GLuint64EXT);
static inline void glUniform2ui64NV(GLint location1,GLuint64EXT x1,GLuint64EXT y1)
{
	static PFNGLUNIFORM2UI64NVPROC_ALT fn=(PFNGLUNIFORM2UI64NVPROC_ALT)glaltGetProcAddressExtension("glUniform2ui64NV","GL_NV_gpu_shader5");
	 fn(location1,x1,y1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform2ui64vNV
#define GL_ALT_FUNDEF_Uniform2ui64vNV
typedef void (*PFNGLUNIFORM2UI64VNVPROC_ALT)(GLint,GLsizei,const GLuint64EXT *);
static inline void glUniform2ui64vNV(GLint location1,GLsizei count1,const GLuint64EXT * value1)
{
	static PFNGLUNIFORM2UI64VNVPROC_ALT fn=(PFNGLUNIFORM2UI64VNVPROC_ALT)glaltGetProcAddressExtension("glUniform2ui64vNV","GL_NV_gpu_shader5");
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform3i64NV
#define GL_ALT_FUNDEF_Uniform3i64NV
typedef void (*PFNGLUNIFORM3I64NVPROC_ALT)(GLint,GLint64EXT,GLint64EXT,GLint64EXT);
static inline void glUniform3i64NV(GLint location1,GLint64EXT x1,GLint64EXT y1,GLint64EXT z1)
{
	static PFNGLUNIFORM3I64NVPROC_ALT fn=(PFNGLUNIFORM3I64NVPROC_ALT)glaltGetProcAddressExtension("glUniform3i64NV","GL_NV_gpu_shader5");
	 fn(location1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform3i64vNV
#define GL_ALT_FUNDEF_Uniform3i64vNV
typedef void (*PFNGLUNIFORM3I64VNVPROC_ALT)(GLint,GLsizei,const GLint64EXT *);
static inline void glUniform3i64vNV(GLint location1,GLsizei count1,const GLint64EXT * value1)
{
	static PFNGLUNIFORM3I64VNVPROC_ALT fn=(PFNGLUNIFORM3I64VNVPROC_ALT)glaltGetProcAddressExtension("glUniform3i64vNV","GL_NV_gpu_shader5");
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform3ui64NV
#define GL_ALT_FUNDEF_Uniform3ui64NV
typedef void (*PFNGLUNIFORM3UI64NVPROC_ALT)(GLint,GLuint64EXT,GLuint64EXT,GLuint64EXT);
static inline void glUniform3ui64NV(GLint location1,GLuint64EXT x1,GLuint64EXT y1,GLuint64EXT z1)
{
	static PFNGLUNIFORM3UI64NVPROC_ALT fn=(PFNGLUNIFORM3UI64NVPROC_ALT)glaltGetProcAddressExtension("glUniform3ui64NV","GL_NV_gpu_shader5");
	 fn(location1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform3ui64vNV
#define GL_ALT_FUNDEF_Uniform3ui64vNV
typedef void (*PFNGLUNIFORM3UI64VNVPROC_ALT)(GLint,GLsizei,const GLuint64EXT *);
static inline void glUniform3ui64vNV(GLint location1,GLsizei count1,const GLuint64EXT * value1)
{
	static PFNGLUNIFORM3UI64VNVPROC_ALT fn=(PFNGLUNIFORM3UI64VNVPROC_ALT)glaltGetProcAddressExtension("glUniform3ui64vNV","GL_NV_gpu_shader5");
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform4i64NV
#define GL_ALT_FUNDEF_Uniform4i64NV
typedef void (*PFNGLUNIFORM4I64NVPROC_ALT)(GLint,GLint64EXT,GLint64EXT,GLint64EXT,GLint64EXT);
static inline void glUniform4i64NV(GLint location1,GLint64EXT x1,GLint64EXT y1,GLint64EXT z1,GLint64EXT w1)
{
	static PFNGLUNIFORM4I64NVPROC_ALT fn=(PFNGLUNIFORM4I64NVPROC_ALT)glaltGetProcAddressExtension("glUniform4i64NV","GL_NV_gpu_shader5");
	 fn(location1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform4i64vNV
#define GL_ALT_FUNDEF_Uniform4i64vNV
typedef void (*PFNGLUNIFORM4I64VNVPROC_ALT)(GLint,GLsizei,const GLint64EXT *);
static inline void glUniform4i64vNV(GLint location1,GLsizei count1,const GLint64EXT * value1)
{
	static PFNGLUNIFORM4I64VNVPROC_ALT fn=(PFNGLUNIFORM4I64VNVPROC_ALT)glaltGetProcAddressExtension("glUniform4i64vNV","GL_NV_gpu_shader5");
	 fn(location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform4ui64NV
#define GL_ALT_FUNDEF_Uniform4ui64NV
typedef void (*PFNGLUNIFORM4UI64NVPROC_ALT)(GLint,GLuint64EXT,GLuint64EXT,GLuint64EXT,GLuint64EXT);
static inline void glUniform4ui64NV(GLint location1,GLuint64EXT x1,GLuint64EXT y1,GLuint64EXT z1,GLuint64EXT w1)
{
	static PFNGLUNIFORM4UI64NVPROC_ALT fn=(PFNGLUNIFORM4UI64NVPROC_ALT)glaltGetProcAddressExtension("glUniform4ui64NV","GL_NV_gpu_shader5");
	 fn(location1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniform4ui64vNV
#define GL_ALT_FUNDEF_Uniform4ui64vNV
typedef void (*PFNGLUNIFORM4UI64VNVPROC_ALT)(GLint,GLsizei,const GLuint64EXT *);
static inline void glUniform4ui64vNV(GLint location1,GLsizei count1,const GLuint64EXT * value1)
{
	static PFNGLUNIFORM4UI64VNVPROC_ALT fn=(PFNGLUNIFORM4UI64VNVPROC_ALT)glaltGetProcAddressExtension("glUniform4ui64vNV","GL_NV_gpu_shader5");
	 fn(location1,count1,value1);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_half_float
#define GL_NV_half_float
#ifndef GL_HALF_FLOAT_NV
#define GL_HALF_FLOAT_NV 0x140B
#endif //GL_HALF_FLOAT_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_Color3hNV
#define GL_ALT_FUNDEF_Color3hNV
typedef void (*PFNGLCOLOR3HNVPROC_ALT)(GLhalfNV,GLhalfNV,GLhalfNV);
static inline void glColor3hNV(GLhalfNV red1,GLhalfNV green1,GLhalfNV blue1)
{
	static PFNGLCOLOR3HNVPROC_ALT fn=(PFNGLCOLOR3HNVPROC_ALT)glaltGetProcAddressExtension("glColor3hNV","GL_NV_half_float");
	 fn(red1,green1,blue1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Color3hvNV
#define GL_ALT_FUNDEF_Color3hvNV
typedef void (*PFNGLCOLOR3HVNVPROC_ALT)(const GLhalfNV *);
static inline void glColor3hvNV(const GLhalfNV * v1)
{
	static PFNGLCOLOR3HVNVPROC_ALT fn=(PFNGLCOLOR3HVNVPROC_ALT)glaltGetProcAddressExtension("glColor3hvNV","GL_NV_half_float");
	 fn(v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Color4hNV
#define GL_ALT_FUNDEF_Color4hNV
typedef void (*PFNGLCOLOR4HNVPROC_ALT)(GLhalfNV,GLhalfNV,GLhalfNV,GLhalfNV);
static inline void glColor4hNV(GLhalfNV red1,GLhalfNV green1,GLhalfNV blue1,GLhalfNV alpha1)
{
	static PFNGLCOLOR4HNVPROC_ALT fn=(PFNGLCOLOR4HNVPROC_ALT)glaltGetProcAddressExtension("glColor4hNV","GL_NV_half_float");
	 fn(red1,green1,blue1,alpha1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Color4hvNV
#define GL_ALT_FUNDEF_Color4hvNV
typedef void (*PFNGLCOLOR4HVNVPROC_ALT)(const GLhalfNV *);
static inline void glColor4hvNV(const GLhalfNV * v1)
{
	static PFNGLCOLOR4HVNVPROC_ALT fn=(PFNGLCOLOR4HVNVPROC_ALT)glaltGetProcAddressExtension("glColor4hvNV","GL_NV_half_float");
	 fn(v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FogCoordhNV
#define GL_ALT_FUNDEF_FogCoordhNV
typedef void (*PFNGLFOGCOORDHNVPROC_ALT)(GLhalfNV);
static inline void glFogCoordhNV(GLhalfNV fog1)
{
	static PFNGLFOGCOORDHNVPROC_ALT fn=(PFNGLFOGCOORDHNVPROC_ALT)glaltGetProcAddressExtension("glFogCoordhNV","GL_NV_half_float");
	 fn(fog1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FogCoordhvNV
#define GL_ALT_FUNDEF_FogCoordhvNV
typedef void (*PFNGLFOGCOORDHVNVPROC_ALT)(const GLhalfNV *);
static inline void glFogCoordhvNV(const GLhalfNV * fog1)
{
	static PFNGLFOGCOORDHVNVPROC_ALT fn=(PFNGLFOGCOORDHVNVPROC_ALT)glaltGetProcAddressExtension("glFogCoordhvNV","GL_NV_half_float");
	 fn(fog1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexCoord1hNV
#define GL_ALT_FUNDEF_MultiTexCoord1hNV
typedef void (*PFNGLMULTITEXCOORD1HNVPROC_ALT)(GLenum,GLhalfNV);
static inline void glMultiTexCoord1hNV(GLenum target1,GLhalfNV s1)
{
	static PFNGLMULTITEXCOORD1HNVPROC_ALT fn=(PFNGLMULTITEXCOORD1HNVPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord1hNV","GL_NV_half_float");
	 fn(target1,s1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexCoord1hvNV
#define GL_ALT_FUNDEF_MultiTexCoord1hvNV
typedef void (*PFNGLMULTITEXCOORD1HVNVPROC_ALT)(GLenum,const GLhalfNV *);
static inline void glMultiTexCoord1hvNV(GLenum target1,const GLhalfNV * v1)
{
	static PFNGLMULTITEXCOORD1HVNVPROC_ALT fn=(PFNGLMULTITEXCOORD1HVNVPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord1hvNV","GL_NV_half_float");
	 fn(target1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexCoord2hNV
#define GL_ALT_FUNDEF_MultiTexCoord2hNV
typedef void (*PFNGLMULTITEXCOORD2HNVPROC_ALT)(GLenum,GLhalfNV,GLhalfNV);
static inline void glMultiTexCoord2hNV(GLenum target1,GLhalfNV s1,GLhalfNV t1)
{
	static PFNGLMULTITEXCOORD2HNVPROC_ALT fn=(PFNGLMULTITEXCOORD2HNVPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord2hNV","GL_NV_half_float");
	 fn(target1,s1,t1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexCoord2hvNV
#define GL_ALT_FUNDEF_MultiTexCoord2hvNV
typedef void (*PFNGLMULTITEXCOORD2HVNVPROC_ALT)(GLenum,const GLhalfNV *);
static inline void glMultiTexCoord2hvNV(GLenum target1,const GLhalfNV * v1)
{
	static PFNGLMULTITEXCOORD2HVNVPROC_ALT fn=(PFNGLMULTITEXCOORD2HVNVPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord2hvNV","GL_NV_half_float");
	 fn(target1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexCoord3hNV
#define GL_ALT_FUNDEF_MultiTexCoord3hNV
typedef void (*PFNGLMULTITEXCOORD3HNVPROC_ALT)(GLenum,GLhalfNV,GLhalfNV,GLhalfNV);
static inline void glMultiTexCoord3hNV(GLenum target1,GLhalfNV s1,GLhalfNV t1,GLhalfNV r1)
{
	static PFNGLMULTITEXCOORD3HNVPROC_ALT fn=(PFNGLMULTITEXCOORD3HNVPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord3hNV","GL_NV_half_float");
	 fn(target1,s1,t1,r1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexCoord3hvNV
#define GL_ALT_FUNDEF_MultiTexCoord3hvNV
typedef void (*PFNGLMULTITEXCOORD3HVNVPROC_ALT)(GLenum,const GLhalfNV *);
static inline void glMultiTexCoord3hvNV(GLenum target1,const GLhalfNV * v1)
{
	static PFNGLMULTITEXCOORD3HVNVPROC_ALT fn=(PFNGLMULTITEXCOORD3HVNVPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord3hvNV","GL_NV_half_float");
	 fn(target1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexCoord4hNV
#define GL_ALT_FUNDEF_MultiTexCoord4hNV
typedef void (*PFNGLMULTITEXCOORD4HNVPROC_ALT)(GLenum,GLhalfNV,GLhalfNV,GLhalfNV,GLhalfNV);
static inline void glMultiTexCoord4hNV(GLenum target1,GLhalfNV s1,GLhalfNV t1,GLhalfNV r1,GLhalfNV q1)
{
	static PFNGLMULTITEXCOORD4HNVPROC_ALT fn=(PFNGLMULTITEXCOORD4HNVPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord4hNV","GL_NV_half_float");
	 fn(target1,s1,t1,r1,q1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexCoord4hvNV
#define GL_ALT_FUNDEF_MultiTexCoord4hvNV
typedef void (*PFNGLMULTITEXCOORD4HVNVPROC_ALT)(GLenum,const GLhalfNV *);
static inline void glMultiTexCoord4hvNV(GLenum target1,const GLhalfNV * v1)
{
	static PFNGLMULTITEXCOORD4HVNVPROC_ALT fn=(PFNGLMULTITEXCOORD4HVNVPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord4hvNV","GL_NV_half_float");
	 fn(target1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Normal3hNV
#define GL_ALT_FUNDEF_Normal3hNV
typedef void (*PFNGLNORMAL3HNVPROC_ALT)(GLhalfNV,GLhalfNV,GLhalfNV);
static inline void glNormal3hNV(GLhalfNV nx1,GLhalfNV ny1,GLhalfNV nz1)
{
	static PFNGLNORMAL3HNVPROC_ALT fn=(PFNGLNORMAL3HNVPROC_ALT)glaltGetProcAddressExtension("glNormal3hNV","GL_NV_half_float");
	 fn(nx1,ny1,nz1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Normal3hvNV
#define GL_ALT_FUNDEF_Normal3hvNV
typedef void (*PFNGLNORMAL3HVNVPROC_ALT)(const GLhalfNV *);
static inline void glNormal3hvNV(const GLhalfNV * v1)
{
	static PFNGLNORMAL3HVNVPROC_ALT fn=(PFNGLNORMAL3HVNVPROC_ALT)glaltGetProcAddressExtension("glNormal3hvNV","GL_NV_half_float");
	 fn(v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_SecondaryColor3hNV
#define GL_ALT_FUNDEF_SecondaryColor3hNV
typedef void (*PFNGLSECONDARYCOLOR3HNVPROC_ALT)(GLhalfNV,GLhalfNV,GLhalfNV);
static inline void glSecondaryColor3hNV(GLhalfNV red1,GLhalfNV green1,GLhalfNV blue1)
{
	static PFNGLSECONDARYCOLOR3HNVPROC_ALT fn=(PFNGLSECONDARYCOLOR3HNVPROC_ALT)glaltGetProcAddressExtension("glSecondaryColor3hNV","GL_NV_half_float");
	 fn(red1,green1,blue1);
}
#endif

#ifndef	GL_ALT_FUNDEF_SecondaryColor3hvNV
#define GL_ALT_FUNDEF_SecondaryColor3hvNV
typedef void (*PFNGLSECONDARYCOLOR3HVNVPROC_ALT)(const GLhalfNV *);
static inline void glSecondaryColor3hvNV(const GLhalfNV * v1)
{
	static PFNGLSECONDARYCOLOR3HVNVPROC_ALT fn=(PFNGLSECONDARYCOLOR3HVNVPROC_ALT)glaltGetProcAddressExtension("glSecondaryColor3hvNV","GL_NV_half_float");
	 fn(v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord1hNV
#define GL_ALT_FUNDEF_TexCoord1hNV
typedef void (*PFNGLTEXCOORD1HNVPROC_ALT)(GLhalfNV);
static inline void glTexCoord1hNV(GLhalfNV s1)
{
	static PFNGLTEXCOORD1HNVPROC_ALT fn=(PFNGLTEXCOORD1HNVPROC_ALT)glaltGetProcAddressExtension("glTexCoord1hNV","GL_NV_half_float");
	 fn(s1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord1hvNV
#define GL_ALT_FUNDEF_TexCoord1hvNV
typedef void (*PFNGLTEXCOORD1HVNVPROC_ALT)(const GLhalfNV *);
static inline void glTexCoord1hvNV(const GLhalfNV * v1)
{
	static PFNGLTEXCOORD1HVNVPROC_ALT fn=(PFNGLTEXCOORD1HVNVPROC_ALT)glaltGetProcAddressExtension("glTexCoord1hvNV","GL_NV_half_float");
	 fn(v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord2hNV
#define GL_ALT_FUNDEF_TexCoord2hNV
typedef void (*PFNGLTEXCOORD2HNVPROC_ALT)(GLhalfNV,GLhalfNV);
static inline void glTexCoord2hNV(GLhalfNV s1,GLhalfNV t1)
{
	static PFNGLTEXCOORD2HNVPROC_ALT fn=(PFNGLTEXCOORD2HNVPROC_ALT)glaltGetProcAddressExtension("glTexCoord2hNV","GL_NV_half_float");
	 fn(s1,t1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord2hvNV
#define GL_ALT_FUNDEF_TexCoord2hvNV
typedef void (*PFNGLTEXCOORD2HVNVPROC_ALT)(const GLhalfNV *);
static inline void glTexCoord2hvNV(const GLhalfNV * v1)
{
	static PFNGLTEXCOORD2HVNVPROC_ALT fn=(PFNGLTEXCOORD2HVNVPROC_ALT)glaltGetProcAddressExtension("glTexCoord2hvNV","GL_NV_half_float");
	 fn(v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord3hNV
#define GL_ALT_FUNDEF_TexCoord3hNV
typedef void (*PFNGLTEXCOORD3HNVPROC_ALT)(GLhalfNV,GLhalfNV,GLhalfNV);
static inline void glTexCoord3hNV(GLhalfNV s1,GLhalfNV t1,GLhalfNV r1)
{
	static PFNGLTEXCOORD3HNVPROC_ALT fn=(PFNGLTEXCOORD3HNVPROC_ALT)glaltGetProcAddressExtension("glTexCoord3hNV","GL_NV_half_float");
	 fn(s1,t1,r1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord3hvNV
#define GL_ALT_FUNDEF_TexCoord3hvNV
typedef void (*PFNGLTEXCOORD3HVNVPROC_ALT)(const GLhalfNV *);
static inline void glTexCoord3hvNV(const GLhalfNV * v1)
{
	static PFNGLTEXCOORD3HVNVPROC_ALT fn=(PFNGLTEXCOORD3HVNVPROC_ALT)glaltGetProcAddressExtension("glTexCoord3hvNV","GL_NV_half_float");
	 fn(v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord4hNV
#define GL_ALT_FUNDEF_TexCoord4hNV
typedef void (*PFNGLTEXCOORD4HNVPROC_ALT)(GLhalfNV,GLhalfNV,GLhalfNV,GLhalfNV);
static inline void glTexCoord4hNV(GLhalfNV s1,GLhalfNV t1,GLhalfNV r1,GLhalfNV q1)
{
	static PFNGLTEXCOORD4HNVPROC_ALT fn=(PFNGLTEXCOORD4HNVPROC_ALT)glaltGetProcAddressExtension("glTexCoord4hNV","GL_NV_half_float");
	 fn(s1,t1,r1,q1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord4hvNV
#define GL_ALT_FUNDEF_TexCoord4hvNV
typedef void (*PFNGLTEXCOORD4HVNVPROC_ALT)(const GLhalfNV *);
static inline void glTexCoord4hvNV(const GLhalfNV * v1)
{
	static PFNGLTEXCOORD4HVNVPROC_ALT fn=(PFNGLTEXCOORD4HVNVPROC_ALT)glaltGetProcAddressExtension("glTexCoord4hvNV","GL_NV_half_float");
	 fn(v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Vertex2hNV
#define GL_ALT_FUNDEF_Vertex2hNV
typedef void (*PFNGLVERTEX2HNVPROC_ALT)(GLhalfNV,GLhalfNV);
static inline void glVertex2hNV(GLhalfNV x1,GLhalfNV y1)
{
	static PFNGLVERTEX2HNVPROC_ALT fn=(PFNGLVERTEX2HNVPROC_ALT)glaltGetProcAddressExtension("glVertex2hNV","GL_NV_half_float");
	 fn(x1,y1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Vertex2hvNV
#define GL_ALT_FUNDEF_Vertex2hvNV
typedef void (*PFNGLVERTEX2HVNVPROC_ALT)(const GLhalfNV *);
static inline void glVertex2hvNV(const GLhalfNV * v1)
{
	static PFNGLVERTEX2HVNVPROC_ALT fn=(PFNGLVERTEX2HVNVPROC_ALT)glaltGetProcAddressExtension("glVertex2hvNV","GL_NV_half_float");
	 fn(v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Vertex3hNV
#define GL_ALT_FUNDEF_Vertex3hNV
typedef void (*PFNGLVERTEX3HNVPROC_ALT)(GLhalfNV,GLhalfNV,GLhalfNV);
static inline void glVertex3hNV(GLhalfNV x1,GLhalfNV y1,GLhalfNV z1)
{
	static PFNGLVERTEX3HNVPROC_ALT fn=(PFNGLVERTEX3HNVPROC_ALT)glaltGetProcAddressExtension("glVertex3hNV","GL_NV_half_float");
	 fn(x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Vertex3hvNV
#define GL_ALT_FUNDEF_Vertex3hvNV
typedef void (*PFNGLVERTEX3HVNVPROC_ALT)(const GLhalfNV *);
static inline void glVertex3hvNV(const GLhalfNV * v1)
{
	static PFNGLVERTEX3HVNVPROC_ALT fn=(PFNGLVERTEX3HVNVPROC_ALT)glaltGetProcAddressExtension("glVertex3hvNV","GL_NV_half_float");
	 fn(v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Vertex4hNV
#define GL_ALT_FUNDEF_Vertex4hNV
typedef void (*PFNGLVERTEX4HNVPROC_ALT)(GLhalfNV,GLhalfNV,GLhalfNV,GLhalfNV);
static inline void glVertex4hNV(GLhalfNV x1,GLhalfNV y1,GLhalfNV z1,GLhalfNV w1)
{
	static PFNGLVERTEX4HNVPROC_ALT fn=(PFNGLVERTEX4HNVPROC_ALT)glaltGetProcAddressExtension("glVertex4hNV","GL_NV_half_float");
	 fn(x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Vertex4hvNV
#define GL_ALT_FUNDEF_Vertex4hvNV
typedef void (*PFNGLVERTEX4HVNVPROC_ALT)(const GLhalfNV *);
static inline void glVertex4hvNV(const GLhalfNV * v1)
{
	static PFNGLVERTEX4HVNVPROC_ALT fn=(PFNGLVERTEX4HVNVPROC_ALT)glaltGetProcAddressExtension("glVertex4hvNV","GL_NV_half_float");
	 fn(v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttrib1hNV
#define GL_ALT_FUNDEF_VertexAttrib1hNV
typedef void (*PFNGLVERTEXATTRIB1HNVPROC_ALT)(GLuint,GLhalfNV);
static inline void glVertexAttrib1hNV(GLuint index1,GLhalfNV x1)
{
	static PFNGLVERTEXATTRIB1HNVPROC_ALT fn=(PFNGLVERTEXATTRIB1HNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib1hNV","GL_NV_half_float");
	 fn(index1,x1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttrib1hvNV
#define GL_ALT_FUNDEF_VertexAttrib1hvNV
typedef void (*PFNGLVERTEXATTRIB1HVNVPROC_ALT)(GLuint,const GLhalfNV *);
static inline void glVertexAttrib1hvNV(GLuint index1,const GLhalfNV * v1)
{
	static PFNGLVERTEXATTRIB1HVNVPROC_ALT fn=(PFNGLVERTEXATTRIB1HVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib1hvNV","GL_NV_half_float");
	 fn(index1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttrib2hNV
#define GL_ALT_FUNDEF_VertexAttrib2hNV
typedef void (*PFNGLVERTEXATTRIB2HNVPROC_ALT)(GLuint,GLhalfNV,GLhalfNV);
static inline void glVertexAttrib2hNV(GLuint index1,GLhalfNV x1,GLhalfNV y1)
{
	static PFNGLVERTEXATTRIB2HNVPROC_ALT fn=(PFNGLVERTEXATTRIB2HNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib2hNV","GL_NV_half_float");
	 fn(index1,x1,y1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttrib2hvNV
#define GL_ALT_FUNDEF_VertexAttrib2hvNV
typedef void (*PFNGLVERTEXATTRIB2HVNVPROC_ALT)(GLuint,const GLhalfNV *);
static inline void glVertexAttrib2hvNV(GLuint index1,const GLhalfNV * v1)
{
	static PFNGLVERTEXATTRIB2HVNVPROC_ALT fn=(PFNGLVERTEXATTRIB2HVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib2hvNV","GL_NV_half_float");
	 fn(index1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttrib3hNV
#define GL_ALT_FUNDEF_VertexAttrib3hNV
typedef void (*PFNGLVERTEXATTRIB3HNVPROC_ALT)(GLuint,GLhalfNV,GLhalfNV,GLhalfNV);
static inline void glVertexAttrib3hNV(GLuint index1,GLhalfNV x1,GLhalfNV y1,GLhalfNV z1)
{
	static PFNGLVERTEXATTRIB3HNVPROC_ALT fn=(PFNGLVERTEXATTRIB3HNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib3hNV","GL_NV_half_float");
	 fn(index1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttrib3hvNV
#define GL_ALT_FUNDEF_VertexAttrib3hvNV
typedef void (*PFNGLVERTEXATTRIB3HVNVPROC_ALT)(GLuint,const GLhalfNV *);
static inline void glVertexAttrib3hvNV(GLuint index1,const GLhalfNV * v1)
{
	static PFNGLVERTEXATTRIB3HVNVPROC_ALT fn=(PFNGLVERTEXATTRIB3HVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib3hvNV","GL_NV_half_float");
	 fn(index1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttrib4hNV
#define GL_ALT_FUNDEF_VertexAttrib4hNV
typedef void (*PFNGLVERTEXATTRIB4HNVPROC_ALT)(GLuint,GLhalfNV,GLhalfNV,GLhalfNV,GLhalfNV);
static inline void glVertexAttrib4hNV(GLuint index1,GLhalfNV x1,GLhalfNV y1,GLhalfNV z1,GLhalfNV w1)
{
	static PFNGLVERTEXATTRIB4HNVPROC_ALT fn=(PFNGLVERTEXATTRIB4HNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4hNV","GL_NV_half_float");
	 fn(index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttrib4hvNV
#define GL_ALT_FUNDEF_VertexAttrib4hvNV
typedef void (*PFNGLVERTEXATTRIB4HVNVPROC_ALT)(GLuint,const GLhalfNV *);
static inline void glVertexAttrib4hvNV(GLuint index1,const GLhalfNV * v1)
{
	static PFNGLVERTEXATTRIB4HVNVPROC_ALT fn=(PFNGLVERTEXATTRIB4HVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4hvNV","GL_NV_half_float");
	 fn(index1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribs1hvNV
#define GL_ALT_FUNDEF_VertexAttribs1hvNV
typedef void (*PFNGLVERTEXATTRIBS1HVNVPROC_ALT)(GLuint,GLsizei,const GLhalfNV *);
static inline void glVertexAttribs1hvNV(GLuint index1,GLsizei n1,const GLhalfNV * v1)
{
	static PFNGLVERTEXATTRIBS1HVNVPROC_ALT fn=(PFNGLVERTEXATTRIBS1HVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribs1hvNV","GL_NV_half_float");
	 fn(index1,n1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribs2hvNV
#define GL_ALT_FUNDEF_VertexAttribs2hvNV
typedef void (*PFNGLVERTEXATTRIBS2HVNVPROC_ALT)(GLuint,GLsizei,const GLhalfNV *);
static inline void glVertexAttribs2hvNV(GLuint index1,GLsizei n1,const GLhalfNV * v1)
{
	static PFNGLVERTEXATTRIBS2HVNVPROC_ALT fn=(PFNGLVERTEXATTRIBS2HVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribs2hvNV","GL_NV_half_float");
	 fn(index1,n1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribs3hvNV
#define GL_ALT_FUNDEF_VertexAttribs3hvNV
typedef void (*PFNGLVERTEXATTRIBS3HVNVPROC_ALT)(GLuint,GLsizei,const GLhalfNV *);
static inline void glVertexAttribs3hvNV(GLuint index1,GLsizei n1,const GLhalfNV * v1)
{
	static PFNGLVERTEXATTRIBS3HVNVPROC_ALT fn=(PFNGLVERTEXATTRIBS3HVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribs3hvNV","GL_NV_half_float");
	 fn(index1,n1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribs4hvNV
#define GL_ALT_FUNDEF_VertexAttribs4hvNV
typedef void (*PFNGLVERTEXATTRIBS4HVNVPROC_ALT)(GLuint,GLsizei,const GLhalfNV *);
static inline void glVertexAttribs4hvNV(GLuint index1,GLsizei n1,const GLhalfNV * v1)
{
	static PFNGLVERTEXATTRIBS4HVNVPROC_ALT fn=(PFNGLVERTEXATTRIBS4HVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribs4hvNV","GL_NV_half_float");
	 fn(index1,n1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexWeighthNV
#define GL_ALT_FUNDEF_VertexWeighthNV
typedef void (*PFNGLVERTEXWEIGHTHNVPROC_ALT)(GLhalfNV);
static inline void glVertexWeighthNV(GLhalfNV weight1)
{
	static PFNGLVERTEXWEIGHTHNVPROC_ALT fn=(PFNGLVERTEXWEIGHTHNVPROC_ALT)glaltGetProcAddressExtension("glVertexWeighthNV","GL_NV_half_float");
	 fn(weight1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexWeighthvNV
#define GL_ALT_FUNDEF_VertexWeighthvNV
typedef void (*PFNGLVERTEXWEIGHTHVNVPROC_ALT)(const GLhalfNV *);
static inline void glVertexWeighthvNV(const GLhalfNV * weight1)
{
	static PFNGLVERTEXWEIGHTHVNVPROC_ALT fn=(PFNGLVERTEXWEIGHTHVNVPROC_ALT)glaltGetProcAddressExtension("glVertexWeighthvNV","GL_NV_half_float");
	 fn(weight1);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_light_max_exponent
#define GL_NV_light_max_exponent
#ifndef GL_MAX_SHININESS_NV
#define GL_MAX_SHININESS_NV 0x8504
#endif //GL_MAX_SHININESS_NV
#ifndef GL_MAX_SPOT_EXPONENT_NV
#define GL_MAX_SPOT_EXPONENT_NV 0x8505
#endif //GL_MAX_SPOT_EXPONENT_NV
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_multisample_coverage
#define GL_NV_multisample_coverage
#ifndef GL_SAMPLES_ARB
#define GL_SAMPLES_ARB 0x80A9
#endif //GL_SAMPLES_ARB
#ifndef GL_COLOR_SAMPLES_NV
#define GL_COLOR_SAMPLES_NV 0x8E20
#endif //GL_COLOR_SAMPLES_NV
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_multisample_filter_hint
#define GL_NV_multisample_filter_hint
#ifndef GL_MULTISAMPLE_FILTER_HINT_NV
#define GL_MULTISAMPLE_FILTER_HINT_NV 0x8534
#endif //GL_MULTISAMPLE_FILTER_HINT_NV
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_occlusion_query
#define GL_NV_occlusion_query
#ifndef GL_PIXEL_COUNTER_BITS_NV
#define GL_PIXEL_COUNTER_BITS_NV 0x8864
#endif //GL_PIXEL_COUNTER_BITS_NV
#ifndef GL_CURRENT_OCCLUSION_QUERY_ID_NV
#define GL_CURRENT_OCCLUSION_QUERY_ID_NV 0x8865
#endif //GL_CURRENT_OCCLUSION_QUERY_ID_NV
#ifndef GL_PIXEL_COUNT_NV
#define GL_PIXEL_COUNT_NV 0x8866
#endif //GL_PIXEL_COUNT_NV
#ifndef GL_PIXEL_COUNT_AVAILABLE_NV
#define GL_PIXEL_COUNT_AVAILABLE_NV 0x8867
#endif //GL_PIXEL_COUNT_AVAILABLE_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BeginOcclusionQueryNV
#define GL_ALT_FUNDEF_BeginOcclusionQueryNV
typedef void (*PFNGLBEGINOCCLUSIONQUERYNVPROC_ALT)(GLuint);
static inline void glBeginOcclusionQueryNV(GLuint id1)
{
	static PFNGLBEGINOCCLUSIONQUERYNVPROC_ALT fn=(PFNGLBEGINOCCLUSIONQUERYNVPROC_ALT)glaltGetProcAddressExtension("glBeginOcclusionQueryNV","GL_NV_occlusion_query");
	 fn(id1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DeleteOcclusionQueriesNV
#define GL_ALT_FUNDEF_DeleteOcclusionQueriesNV
typedef void (*PFNGLDELETEOCCLUSIONQUERIESNVPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteOcclusionQueriesNV(GLsizei n1,const GLuint * ids1)
{
	static PFNGLDELETEOCCLUSIONQUERIESNVPROC_ALT fn=(PFNGLDELETEOCCLUSIONQUERIESNVPROC_ALT)glaltGetProcAddressExtension("glDeleteOcclusionQueriesNV","GL_NV_occlusion_query");
	 fn(n1,ids1);
}
#endif

#ifndef	GL_ALT_FUNDEF_EndOcclusionQueryNV
#define GL_ALT_FUNDEF_EndOcclusionQueryNV
typedef void (*PFNGLENDOCCLUSIONQUERYNVPROC_ALT)();
static inline void glEndOcclusionQueryNV()
{
	static PFNGLENDOCCLUSIONQUERYNVPROC_ALT fn=(PFNGLENDOCCLUSIONQUERYNVPROC_ALT)glaltGetProcAddressExtension("glEndOcclusionQueryNV","GL_NV_occlusion_query");
	 fn();
}
#endif

#ifndef	GL_ALT_FUNDEF_GenOcclusionQueriesNV
#define GL_ALT_FUNDEF_GenOcclusionQueriesNV
typedef void (*PFNGLGENOCCLUSIONQUERIESNVPROC_ALT)(GLsizei,GLuint *);
static inline void glGenOcclusionQueriesNV(GLsizei n1,GLuint * ids1)
{
	static PFNGLGENOCCLUSIONQUERIESNVPROC_ALT fn=(PFNGLGENOCCLUSIONQUERIESNVPROC_ALT)glaltGetProcAddressExtension("glGenOcclusionQueriesNV","GL_NV_occlusion_query");
	 fn(n1,ids1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetOcclusionQueryivNV
#define GL_ALT_FUNDEF_GetOcclusionQueryivNV
typedef void (*PFNGLGETOCCLUSIONQUERYIVNVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetOcclusionQueryivNV(GLuint id1,GLenum pname1,GLint * params1)
{
	static PFNGLGETOCCLUSIONQUERYIVNVPROC_ALT fn=(PFNGLGETOCCLUSIONQUERYIVNVPROC_ALT)glaltGetProcAddressExtension("glGetOcclusionQueryivNV","GL_NV_occlusion_query");
	 fn(id1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetOcclusionQueryuivNV
#define GL_ALT_FUNDEF_GetOcclusionQueryuivNV
typedef void (*PFNGLGETOCCLUSIONQUERYUIVNVPROC_ALT)(GLuint,GLenum,GLuint *);
static inline void glGetOcclusionQueryuivNV(GLuint id1,GLenum pname1,GLuint * params1)
{
	static PFNGLGETOCCLUSIONQUERYUIVNVPROC_ALT fn=(PFNGLGETOCCLUSIONQUERYUIVNVPROC_ALT)glaltGetProcAddressExtension("glGetOcclusionQueryuivNV","GL_NV_occlusion_query");
	 fn(id1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IsOcclusionQueryNV
#define GL_ALT_FUNDEF_IsOcclusionQueryNV
typedef GLboolean (*PFNGLISOCCLUSIONQUERYNVPROC_ALT)(GLuint);
static inline GLboolean glIsOcclusionQueryNV(GLuint id1)
{
	static PFNGLISOCCLUSIONQUERYNVPROC_ALT fn=(PFNGLISOCCLUSIONQUERYNVPROC_ALT)glaltGetProcAddressExtension("glIsOcclusionQueryNV","GL_NV_occlusion_query");
	return fn(id1);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_packed_depth_stencil
#define GL_NV_packed_depth_stencil
#ifndef GL_DEPTH_STENCIL_NV
#define GL_DEPTH_STENCIL_NV 0x84F9
#endif //GL_DEPTH_STENCIL_NV
#ifndef GL_UNSIGNED_INT_24_8_NV
#define GL_UNSIGNED_INT_24_8_NV 0x84FA
#endif //GL_UNSIGNED_INT_24_8_NV
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_parameter_buffer_object
#define GL_NV_parameter_buffer_object
#ifndef GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV
#define GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV 0x8DA0
#endif //GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV
#ifndef GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV
#define GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV 0x8DA1
#endif //GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV
#ifndef GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV
#define GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV 0x8DA2
#endif //GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV
#ifndef GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV
#define GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV 0x8DA3
#endif //GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV
#ifndef GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV
#define GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV 0x8DA4
#endif //GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ProgramBufferParametersIivNV
#define GL_ALT_FUNDEF_ProgramBufferParametersIivNV
typedef void (*PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC_ALT)(GLenum,GLuint,GLuint,GLsizei,const GLint *);
static inline void glProgramBufferParametersIivNV(GLenum target1,GLuint bindingIndex1,GLuint wordIndex1,GLsizei count1,const GLint * params1)
{
	static PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC_ALT fn=(PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC_ALT)glaltGetProcAddressExtension("glProgramBufferParametersIivNV","GL_NV_parameter_buffer_object");
	 fn(target1,bindingIndex1,wordIndex1,count1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramBufferParametersIuivNV
#define GL_ALT_FUNDEF_ProgramBufferParametersIuivNV
typedef void (*PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC_ALT)(GLenum,GLuint,GLuint,GLsizei,const GLuint *);
static inline void glProgramBufferParametersIuivNV(GLenum target1,GLuint bindingIndex1,GLuint wordIndex1,GLsizei count1,const GLuint * params1)
{
	static PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC_ALT fn=(PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC_ALT)glaltGetProcAddressExtension("glProgramBufferParametersIuivNV","GL_NV_parameter_buffer_object");
	 fn(target1,bindingIndex1,wordIndex1,count1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramBufferParametersfvNV
#define GL_ALT_FUNDEF_ProgramBufferParametersfvNV
typedef void (*PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC_ALT)(GLenum,GLuint,GLuint,GLsizei,const GLfloat *);
static inline void glProgramBufferParametersfvNV(GLenum target1,GLuint bindingIndex1,GLuint wordIndex1,GLsizei count1,const GLfloat * params1)
{
	static PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC_ALT fn=(PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC_ALT)glaltGetProcAddressExtension("glProgramBufferParametersfvNV","GL_NV_parameter_buffer_object");
	 fn(target1,bindingIndex1,wordIndex1,count1,params1);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_parameter_buffer_object2
#define GL_NV_parameter_buffer_object2
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_path_rendering
#define GL_NV_path_rendering
#ifndef GL_CLOSE_PATH_NV
#define GL_CLOSE_PATH_NV 0x00
#endif //GL_CLOSE_PATH_NV
#ifndef GL_FONT_X_MIN_BOUNDS_BIT_NV
#define GL_FONT_X_MIN_BOUNDS_BIT_NV 0x00010000
#endif //GL_FONT_X_MIN_BOUNDS_BIT_NV
#ifndef GL_FONT_Y_MIN_BOUNDS_BIT_NV
#define GL_FONT_Y_MIN_BOUNDS_BIT_NV 0x00020000
#endif //GL_FONT_Y_MIN_BOUNDS_BIT_NV
#ifndef GL_FONT_X_MAX_BOUNDS_BIT_NV
#define GL_FONT_X_MAX_BOUNDS_BIT_NV 0x00040000
#endif //GL_FONT_X_MAX_BOUNDS_BIT_NV
#ifndef GL_FONT_Y_MAX_BOUNDS_BIT_NV
#define GL_FONT_Y_MAX_BOUNDS_BIT_NV 0x00080000
#endif //GL_FONT_Y_MAX_BOUNDS_BIT_NV
#ifndef GL_FONT_UNITS_PER_EM_BIT_NV
#define GL_FONT_UNITS_PER_EM_BIT_NV 0x00100000
#endif //GL_FONT_UNITS_PER_EM_BIT_NV
#ifndef GL_FONT_ASCENDER_BIT_NV
#define GL_FONT_ASCENDER_BIT_NV 0x00200000
#endif //GL_FONT_ASCENDER_BIT_NV
#ifndef GL_FONT_DESCENDER_BIT_NV
#define GL_FONT_DESCENDER_BIT_NV 0x00400000
#endif //GL_FONT_DESCENDER_BIT_NV
#ifndef GL_FONT_HEIGHT_BIT_NV
#define GL_FONT_HEIGHT_BIT_NV 0x00800000
#endif //GL_FONT_HEIGHT_BIT_NV
#ifndef GL_BOLD_BIT_NV
#define GL_BOLD_BIT_NV 0x01
#endif //GL_BOLD_BIT_NV
#ifndef GL_GLYPH_WIDTH_BIT_NV
#define GL_GLYPH_WIDTH_BIT_NV 0x01
#endif //GL_GLYPH_WIDTH_BIT_NV
#ifndef GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV
#define GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV 0x01000000
#endif //GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV
#ifndef GL_ITALIC_BIT_NV
#define GL_ITALIC_BIT_NV 0x02
#endif //GL_ITALIC_BIT_NV
#ifndef GL_MOVE_TO_NV
#define GL_MOVE_TO_NV 0x02
#endif //GL_MOVE_TO_NV
#ifndef GL_GLYPH_HEIGHT_BIT_NV
#define GL_GLYPH_HEIGHT_BIT_NV 0x02
#endif //GL_GLYPH_HEIGHT_BIT_NV
#ifndef GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV
#define GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV 0x02000000
#endif //GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV
#ifndef GL_RELATIVE_MOVE_TO_NV
#define GL_RELATIVE_MOVE_TO_NV 0x03
#endif //GL_RELATIVE_MOVE_TO_NV
#ifndef GL_LINE_TO_NV
#define GL_LINE_TO_NV 0x04
#endif //GL_LINE_TO_NV
#ifndef GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
#define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#endif //GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
#ifndef GL_FONT_UNDERLINE_POSITION_BIT_NV
#define GL_FONT_UNDERLINE_POSITION_BIT_NV 0x04000000
#endif //GL_FONT_UNDERLINE_POSITION_BIT_NV
#ifndef GL_RELATIVE_LINE_TO_NV
#define GL_RELATIVE_LINE_TO_NV 0x05
#endif //GL_RELATIVE_LINE_TO_NV
#ifndef GL_HORIZONTAL_LINE_TO_NV
#define GL_HORIZONTAL_LINE_TO_NV 0x06
#endif //GL_HORIZONTAL_LINE_TO_NV
#ifndef GL_RELATIVE_HORIZONTAL_LINE_TO_NV
#define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#endif //GL_RELATIVE_HORIZONTAL_LINE_TO_NV
#ifndef GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
#define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#endif //GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
#ifndef GL_VERTICAL_LINE_TO_NV
#define GL_VERTICAL_LINE_TO_NV 0x08
#endif //GL_VERTICAL_LINE_TO_NV
#ifndef GL_FONT_UNDERLINE_THICKNESS_BIT_NV
#define GL_FONT_UNDERLINE_THICKNESS_BIT_NV 0x08000000
#endif //GL_FONT_UNDERLINE_THICKNESS_BIT_NV
#ifndef GL_RELATIVE_VERTICAL_LINE_TO_NV
#define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#endif //GL_RELATIVE_VERTICAL_LINE_TO_NV
#ifndef GL_QUADRATIC_CURVE_TO_NV
#define GL_QUADRATIC_CURVE_TO_NV 0x0A
#endif //GL_QUADRATIC_CURVE_TO_NV
#ifndef GL_RELATIVE_QUADRATIC_CURVE_TO_NV
#define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#endif //GL_RELATIVE_QUADRATIC_CURVE_TO_NV
#ifndef GL_PATH_MODELVIEW_STACK_DEPTH_NV
#define GL_PATH_MODELVIEW_STACK_DEPTH_NV 0x0BA3
#endif //GL_PATH_MODELVIEW_STACK_DEPTH_NV
#ifndef GL_PATH_PROJECTION_STACK_DEPTH_NV
#define GL_PATH_PROJECTION_STACK_DEPTH_NV 0x0BA4
#endif //GL_PATH_PROJECTION_STACK_DEPTH_NV
#ifndef GL_PATH_MODELVIEW_MATRIX_NV
#define GL_PATH_MODELVIEW_MATRIX_NV 0x0BA6
#endif //GL_PATH_MODELVIEW_MATRIX_NV
#ifndef GL_PATH_PROJECTION_MATRIX_NV
#define GL_PATH_PROJECTION_MATRIX_NV 0x0BA7
#endif //GL_PATH_PROJECTION_MATRIX_NV
#ifndef GL_CUBIC_CURVE_TO_NV
#define GL_CUBIC_CURVE_TO_NV 0x0C
#endif //GL_CUBIC_CURVE_TO_NV
#ifndef GL_RELATIVE_CUBIC_CURVE_TO_NV
#define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#endif //GL_RELATIVE_CUBIC_CURVE_TO_NV
#ifndef GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV
#define GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV 0x0D36
#endif //GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV
#ifndef GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV
#define GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV 0x0D38
#endif //GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV
#ifndef GL_SMOOTH_QUADRATIC_CURVE_TO_NV
#define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#endif //GL_SMOOTH_QUADRATIC_CURVE_TO_NV
#ifndef GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
#define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#endif //GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
#ifndef GL_SMOOTH_CUBIC_CURVE_TO_NV
#define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#endif //GL_SMOOTH_CUBIC_CURVE_TO_NV
#ifndef GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
#define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#endif //GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
#ifndef GL_GLYPH_HAS_KERNING_BIT_NV
#define GL_GLYPH_HAS_KERNING_BIT_NV 0x100
#endif //GL_GLYPH_HAS_KERNING_BIT_NV
#ifndef GL_FONT_HAS_KERNING_BIT_NV
#define GL_FONT_HAS_KERNING_BIT_NV 0x10000000
#endif //GL_FONT_HAS_KERNING_BIT_NV
#ifndef GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
#define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#endif //GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
#ifndef GL_SMALL_CCW_ARC_TO_NV
#define GL_SMALL_CCW_ARC_TO_NV 0x12
#endif //GL_SMALL_CCW_ARC_TO_NV
#ifndef GL_RELATIVE_SMALL_CCW_ARC_TO_NV
#define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#endif //GL_RELATIVE_SMALL_CCW_ARC_TO_NV
#ifndef GL_SMALL_CW_ARC_TO_NV
#define GL_SMALL_CW_ARC_TO_NV 0x14
#endif //GL_SMALL_CW_ARC_TO_NV
#ifndef GL_RELATIVE_SMALL_CW_ARC_TO_NV
#define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#endif //GL_RELATIVE_SMALL_CW_ARC_TO_NV
#ifndef GL_LARGE_CCW_ARC_TO_NV
#define GL_LARGE_CCW_ARC_TO_NV 0x16
#endif //GL_LARGE_CCW_ARC_TO_NV
#ifndef GL_RELATIVE_LARGE_CCW_ARC_TO_NV
#define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#endif //GL_RELATIVE_LARGE_CCW_ARC_TO_NV
#ifndef GL_PATH_MODELVIEW_NV
#define GL_PATH_MODELVIEW_NV 0x1700
#endif //GL_PATH_MODELVIEW_NV
#ifndef GL_PATH_PROJECTION_NV
#define GL_PATH_PROJECTION_NV 0x1701
#endif //GL_PATH_PROJECTION_NV
#ifndef GL_LARGE_CW_ARC_TO_NV
#define GL_LARGE_CW_ARC_TO_NV 0x18
#endif //GL_LARGE_CW_ARC_TO_NV
#ifndef GL_RELATIVE_LARGE_CW_ARC_TO_NV
#define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#endif //GL_RELATIVE_LARGE_CW_ARC_TO_NV
#ifndef GL_CONIC_CURVE_TO_NV
#define GL_CONIC_CURVE_TO_NV 0x1A
#endif //GL_CONIC_CURVE_TO_NV
#ifndef GL_RELATIVE_CONIC_CURVE_TO_NV
#define GL_RELATIVE_CONIC_CURVE_TO_NV 0x1B
#endif //GL_RELATIVE_CONIC_CURVE_TO_NV
#ifndef GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
#define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#endif //GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
#ifndef GL_FONT_NUM_GLYPH_INDICES_BIT_NV
#define GL_FONT_NUM_GLYPH_INDICES_BIT_NV 0x20000000
#endif //GL_FONT_NUM_GLYPH_INDICES_BIT_NV
#ifndef GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
#define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#endif //GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
#ifndef GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
#define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#endif //GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
#ifndef GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV
#define GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV 0x84E3
#endif //GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV
#ifndef GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV
#define GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV 0x84E4
#endif //GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV
#ifndef GL_PRIMARY_COLOR_NV
#define GL_PRIMARY_COLOR_NV 0x852C
#endif //GL_PRIMARY_COLOR_NV
#ifndef GL_SECONDARY_COLOR_NV
#define GL_SECONDARY_COLOR_NV 0x852D
#endif //GL_SECONDARY_COLOR_NV
#ifndef GL_PRIMARY_COLOR
#define GL_PRIMARY_COLOR 0x8577
#endif //GL_PRIMARY_COLOR
#ifndef GL_PATH_FORMAT_SVG_NV
#define GL_PATH_FORMAT_SVG_NV 0x9070
#endif //GL_PATH_FORMAT_SVG_NV
#ifndef GL_PATH_FORMAT_PS_NV
#define GL_PATH_FORMAT_PS_NV 0x9071
#endif //GL_PATH_FORMAT_PS_NV
#ifndef GL_STANDARD_FONT_NAME_NV
#define GL_STANDARD_FONT_NAME_NV 0x9072
#endif //GL_STANDARD_FONT_NAME_NV
#ifndef GL_SYSTEM_FONT_NAME_NV
#define GL_SYSTEM_FONT_NAME_NV 0x9073
#endif //GL_SYSTEM_FONT_NAME_NV
#ifndef GL_FILE_NAME_NV
#define GL_FILE_NAME_NV 0x9074
#endif //GL_FILE_NAME_NV
#ifndef GL_PATH_STROKE_WIDTH_NV
#define GL_PATH_STROKE_WIDTH_NV 0x9075
#endif //GL_PATH_STROKE_WIDTH_NV
#ifndef GL_PATH_END_CAPS_NV
#define GL_PATH_END_CAPS_NV 0x9076
#endif //GL_PATH_END_CAPS_NV
#ifndef GL_PATH_INITIAL_END_CAP_NV
#define GL_PATH_INITIAL_END_CAP_NV 0x9077
#endif //GL_PATH_INITIAL_END_CAP_NV
#ifndef GL_PATH_TERMINAL_END_CAP_NV
#define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#endif //GL_PATH_TERMINAL_END_CAP_NV
#ifndef GL_PATH_JOIN_STYLE_NV
#define GL_PATH_JOIN_STYLE_NV 0x9079
#endif //GL_PATH_JOIN_STYLE_NV
#ifndef GL_PATH_MITER_LIMIT_NV
#define GL_PATH_MITER_LIMIT_NV 0x907A
#endif //GL_PATH_MITER_LIMIT_NV
#ifndef GL_PATH_DASH_CAPS_NV
#define GL_PATH_DASH_CAPS_NV 0x907B
#endif //GL_PATH_DASH_CAPS_NV
#ifndef GL_PATH_INITIAL_DASH_CAP_NV
#define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#endif //GL_PATH_INITIAL_DASH_CAP_NV
#ifndef GL_PATH_TERMINAL_DASH_CAP_NV
#define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#endif //GL_PATH_TERMINAL_DASH_CAP_NV
#ifndef GL_PATH_DASH_OFFSET_NV
#define GL_PATH_DASH_OFFSET_NV 0x907E
#endif //GL_PATH_DASH_OFFSET_NV
#ifndef GL_PATH_CLIENT_LENGTH_NV
#define GL_PATH_CLIENT_LENGTH_NV 0x907F
#endif //GL_PATH_CLIENT_LENGTH_NV
#ifndef GL_PATH_FILL_MODE_NV
#define GL_PATH_FILL_MODE_NV 0x9080
#endif //GL_PATH_FILL_MODE_NV
#ifndef GL_PATH_FILL_MASK_NV
#define GL_PATH_FILL_MASK_NV 0x9081
#endif //GL_PATH_FILL_MASK_NV
#ifndef GL_PATH_FILL_COVER_MODE_NV
#define GL_PATH_FILL_COVER_MODE_NV 0x9082
#endif //GL_PATH_FILL_COVER_MODE_NV
#ifndef GL_PATH_STROKE_COVER_MODE_NV
#define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#endif //GL_PATH_STROKE_COVER_MODE_NV
#ifndef GL_PATH_STROKE_MASK_NV
#define GL_PATH_STROKE_MASK_NV 0x9084
#endif //GL_PATH_STROKE_MASK_NV
#ifndef GL_COUNT_UP_NV
#define GL_COUNT_UP_NV 0x9088
#endif //GL_COUNT_UP_NV
#ifndef GL_COUNT_DOWN_NV
#define GL_COUNT_DOWN_NV 0x9089
#endif //GL_COUNT_DOWN_NV
#ifndef GL_PATH_OBJECT_BOUNDING_BOX_NV
#define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#endif //GL_PATH_OBJECT_BOUNDING_BOX_NV
#ifndef GL_CONVEX_HULL_NV
#define GL_CONVEX_HULL_NV 0x908B
#endif //GL_CONVEX_HULL_NV
#ifndef GL_BOUNDING_BOX_NV
#define GL_BOUNDING_BOX_NV 0x908D
#endif //GL_BOUNDING_BOX_NV
#ifndef GL_TRANSLATE_X_NV
#define GL_TRANSLATE_X_NV 0x908E
#endif //GL_TRANSLATE_X_NV
#ifndef GL_TRANSLATE_Y_NV
#define GL_TRANSLATE_Y_NV 0x908F
#endif //GL_TRANSLATE_Y_NV
#ifndef GL_TRANSLATE_2D_NV
#define GL_TRANSLATE_2D_NV 0x9090
#endif //GL_TRANSLATE_2D_NV
#ifndef GL_TRANSLATE_3D_NV
#define GL_TRANSLATE_3D_NV 0x9091
#endif //GL_TRANSLATE_3D_NV
#ifndef GL_AFFINE_2D_NV
#define GL_AFFINE_2D_NV 0x9092
#endif //GL_AFFINE_2D_NV
#ifndef GL_AFFINE_3D_NV
#define GL_AFFINE_3D_NV 0x9094
#endif //GL_AFFINE_3D_NV
#ifndef GL_TRANSPOSE_AFFINE_2D_NV
#define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#endif //GL_TRANSPOSE_AFFINE_2D_NV
#ifndef GL_TRANSPOSE_AFFINE_3D_NV
#define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#endif //GL_TRANSPOSE_AFFINE_3D_NV
#ifndef GL_UTF8_NV
#define GL_UTF8_NV 0x909A
#endif //GL_UTF8_NV
#ifndef GL_UTF16_NV
#define GL_UTF16_NV 0x909B
#endif //GL_UTF16_NV
#ifndef GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
#define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#endif //GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
#ifndef GL_PATH_COMMAND_COUNT_NV
#define GL_PATH_COMMAND_COUNT_NV 0x909D
#endif //GL_PATH_COMMAND_COUNT_NV
#ifndef GL_PATH_COORD_COUNT_NV
#define GL_PATH_COORD_COUNT_NV 0x909E
#endif //GL_PATH_COORD_COUNT_NV
#ifndef GL_PATH_DASH_ARRAY_COUNT_NV
#define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#endif //GL_PATH_DASH_ARRAY_COUNT_NV
#ifndef GL_PATH_COMPUTED_LENGTH_NV
#define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#endif //GL_PATH_COMPUTED_LENGTH_NV
#ifndef GL_PATH_FILL_BOUNDING_BOX_NV
#define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#endif //GL_PATH_FILL_BOUNDING_BOX_NV
#ifndef GL_PATH_STROKE_BOUNDING_BOX_NV
#define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#endif //GL_PATH_STROKE_BOUNDING_BOX_NV
#ifndef GL_SQUARE_NV
#define GL_SQUARE_NV 0x90A3
#endif //GL_SQUARE_NV
#ifndef GL_ROUND_NV
#define GL_ROUND_NV 0x90A4
#endif //GL_ROUND_NV
#ifndef GL_TRIANGULAR_NV
#define GL_TRIANGULAR_NV 0x90A5
#endif //GL_TRIANGULAR_NV
#ifndef GL_BEVEL_NV
#define GL_BEVEL_NV 0x90A6
#endif //GL_BEVEL_NV
#ifndef GL_MITER_REVERT_NV
#define GL_MITER_REVERT_NV 0x90A7
#endif //GL_MITER_REVERT_NV
#ifndef GL_MITER_TRUNCATE_NV
#define GL_MITER_TRUNCATE_NV 0x90A8
#endif //GL_MITER_TRUNCATE_NV
#ifndef GL_SKIP_MISSING_GLYPH_NV
#define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#endif //GL_SKIP_MISSING_GLYPH_NV
#ifndef GL_USE_MISSING_GLYPH_NV
#define GL_USE_MISSING_GLYPH_NV 0x90AA
#endif //GL_USE_MISSING_GLYPH_NV
#ifndef GL_PATH_ERROR_POSITION_NV
#define GL_PATH_ERROR_POSITION_NV 0x90AB
#endif //GL_PATH_ERROR_POSITION_NV
#ifndef GL_PATH_FOG_GEN_MODE_NV
#define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#endif //GL_PATH_FOG_GEN_MODE_NV
#ifndef GL_ACCUM_ADJACENT_PAIRS_NV
#define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#endif //GL_ACCUM_ADJACENT_PAIRS_NV
#ifndef GL_ADJACENT_PAIRS_NV
#define GL_ADJACENT_PAIRS_NV 0x90AE
#endif //GL_ADJACENT_PAIRS_NV
#ifndef GL_FIRST_TO_REST_NV
#define GL_FIRST_TO_REST_NV 0x90AF
#endif //GL_FIRST_TO_REST_NV
#ifndef GL_PATH_GEN_MODE_NV
#define GL_PATH_GEN_MODE_NV 0x90B0
#endif //GL_PATH_GEN_MODE_NV
#ifndef GL_PATH_GEN_COEFF_NV
#define GL_PATH_GEN_COEFF_NV 0x90B1
#endif //GL_PATH_GEN_COEFF_NV
#ifndef GL_PATH_GEN_COLOR_FORMAT_NV
#define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#endif //GL_PATH_GEN_COLOR_FORMAT_NV
#ifndef GL_PATH_GEN_COMPONENTS_NV
#define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#endif //GL_PATH_GEN_COMPONENTS_NV
#ifndef GL_PATH_DASH_OFFSET_RESET_NV
#define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#endif //GL_PATH_DASH_OFFSET_RESET_NV
#ifndef GL_MOVE_TO_RESETS_NV
#define GL_MOVE_TO_RESETS_NV 0x90B5
#endif //GL_MOVE_TO_RESETS_NV
#ifndef GL_MOVE_TO_CONTINUES_NV
#define GL_MOVE_TO_CONTINUES_NV 0x90B6
#endif //GL_MOVE_TO_CONTINUES_NV
#ifndef GL_PATH_STENCIL_FUNC_NV
#define GL_PATH_STENCIL_FUNC_NV 0x90B7
#endif //GL_PATH_STENCIL_FUNC_NV
#ifndef GL_PATH_STENCIL_REF_NV
#define GL_PATH_STENCIL_REF_NV 0x90B8
#endif //GL_PATH_STENCIL_REF_NV
#ifndef GL_PATH_STENCIL_VALUE_MASK_NV
#define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#endif //GL_PATH_STENCIL_VALUE_MASK_NV
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
#define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#endif //GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
#ifndef GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
#define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#endif //GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
#ifndef GL_PATH_COVER_DEPTH_FUNC_NV
#define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#endif //GL_PATH_COVER_DEPTH_FUNC_NV
#ifndef GL_FONT_GLYPHS_AVAILABLE_NV
#define GL_FONT_GLYPHS_AVAILABLE_NV 0x9368
#endif //GL_FONT_GLYPHS_AVAILABLE_NV
#ifndef GL_FONT_TARGET_UNAVAILABLE_NV
#define GL_FONT_TARGET_UNAVAILABLE_NV 0x9369
#endif //GL_FONT_TARGET_UNAVAILABLE_NV
#ifndef GL_FONT_UNAVAILABLE_NV
#define GL_FONT_UNAVAILABLE_NV 0x936A
#endif //GL_FONT_UNAVAILABLE_NV
#ifndef GL_FONT_UNINTELLIGIBLE_NV
#define GL_FONT_UNINTELLIGIBLE_NV 0x936B
#endif //GL_FONT_UNINTELLIGIBLE_NV
#ifndef GL_STANDARD_FONT_FORMAT_NV
#define GL_STANDARD_FONT_FORMAT_NV 0x936C
#endif //GL_STANDARD_FONT_FORMAT_NV
#ifndef GL_FRAGMENT_INPUT_NV
#define GL_FRAGMENT_INPUT_NV 0x936D
#endif //GL_FRAGMENT_INPUT_NV
#ifndef GL_ROUNDED_RECT_NV
#define GL_ROUNDED_RECT_NV 0xE8
#endif //GL_ROUNDED_RECT_NV
#ifndef GL_RELATIVE_ROUNDED_RECT_NV
#define GL_RELATIVE_ROUNDED_RECT_NV 0xE9
#endif //GL_RELATIVE_ROUNDED_RECT_NV
#ifndef GL_ROUNDED_RECT2_NV
#define GL_ROUNDED_RECT2_NV 0xEA
#endif //GL_ROUNDED_RECT2_NV
#ifndef GL_RELATIVE_ROUNDED_RECT2_NV
#define GL_RELATIVE_ROUNDED_RECT2_NV 0xEB
#endif //GL_RELATIVE_ROUNDED_RECT2_NV
#ifndef GL_ROUNDED_RECT4_NV
#define GL_ROUNDED_RECT4_NV 0xEC
#endif //GL_ROUNDED_RECT4_NV
#ifndef GL_RELATIVE_ROUNDED_RECT4_NV
#define GL_RELATIVE_ROUNDED_RECT4_NV 0xED
#endif //GL_RELATIVE_ROUNDED_RECT4_NV
#ifndef GL_ROUNDED_RECT8_NV
#define GL_ROUNDED_RECT8_NV 0xEE
#endif //GL_ROUNDED_RECT8_NV
#ifndef GL_RELATIVE_ROUNDED_RECT8_NV
#define GL_RELATIVE_ROUNDED_RECT8_NV 0xEF
#endif //GL_RELATIVE_ROUNDED_RECT8_NV
#ifndef GL_RESTART_PATH_NV
#define GL_RESTART_PATH_NV 0xF0
#endif //GL_RESTART_PATH_NV
#ifndef GL_DUP_FIRST_CUBIC_CURVE_TO_NV
#define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#endif //GL_DUP_FIRST_CUBIC_CURVE_TO_NV
#ifndef GL_DUP_LAST_CUBIC_CURVE_TO_NV
#define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#endif //GL_DUP_LAST_CUBIC_CURVE_TO_NV
#ifndef GL_RECT_NV
#define GL_RECT_NV 0xF6
#endif //GL_RECT_NV
#ifndef GL_RELATIVE_RECT_NV
#define GL_RELATIVE_RECT_NV 0xF7
#endif //GL_RELATIVE_RECT_NV
#ifndef GL_CIRCULAR_CCW_ARC_TO_NV
#define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#endif //GL_CIRCULAR_CCW_ARC_TO_NV
#ifndef GL_CIRCULAR_CW_ARC_TO_NV
#define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#endif //GL_CIRCULAR_CW_ARC_TO_NV
#ifndef GL_CIRCULAR_TANGENT_ARC_TO_NV
#define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#endif //GL_CIRCULAR_TANGENT_ARC_TO_NV
#ifndef GL_ARC_TO_NV
#define GL_ARC_TO_NV 0xFE
#endif //GL_ARC_TO_NV
#ifndef GL_RELATIVE_ARC_TO_NV
#define GL_RELATIVE_ARC_TO_NV 0xFF
#endif //GL_RELATIVE_ARC_TO_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_CopyPathNV
#define GL_ALT_FUNDEF_CopyPathNV
typedef void (*PFNGLCOPYPATHNVPROC_ALT)(GLuint,GLuint);
static inline void glCopyPathNV(GLuint resultPath1,GLuint srcPath1)
{
	static PFNGLCOPYPATHNVPROC_ALT fn=(PFNGLCOPYPATHNVPROC_ALT)glaltGetProcAddressExtension("glCopyPathNV","GL_NV_path_rendering");
	 fn(resultPath1,srcPath1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CoverFillPathInstancedNV
#define GL_ALT_FUNDEF_CoverFillPathInstancedNV
typedef void (*PFNGLCOVERFILLPATHINSTANCEDNVPROC_ALT)(GLsizei,GLenum,const void *,GLuint,GLenum,GLenum,const GLfloat *);
static inline void glCoverFillPathInstancedNV(GLsizei numPaths1,GLenum pathNameType1,const void * paths1,GLuint pathBase1,GLenum coverMode1,GLenum transformType1,const GLfloat * transformValues1)
{
	static PFNGLCOVERFILLPATHINSTANCEDNVPROC_ALT fn=(PFNGLCOVERFILLPATHINSTANCEDNVPROC_ALT)glaltGetProcAddressExtension("glCoverFillPathInstancedNV","GL_NV_path_rendering");
	 fn(numPaths1,pathNameType1,paths1,pathBase1,coverMode1,transformType1,transformValues1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CoverFillPathNV
#define GL_ALT_FUNDEF_CoverFillPathNV
typedef void (*PFNGLCOVERFILLPATHNVPROC_ALT)(GLuint,GLenum);
static inline void glCoverFillPathNV(GLuint path1,GLenum coverMode1)
{
	static PFNGLCOVERFILLPATHNVPROC_ALT fn=(PFNGLCOVERFILLPATHNVPROC_ALT)glaltGetProcAddressExtension("glCoverFillPathNV","GL_NV_path_rendering");
	 fn(path1,coverMode1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CoverStrokePathInstancedNV
#define GL_ALT_FUNDEF_CoverStrokePathInstancedNV
typedef void (*PFNGLCOVERSTROKEPATHINSTANCEDNVPROC_ALT)(GLsizei,GLenum,const void *,GLuint,GLenum,GLenum,const GLfloat *);
static inline void glCoverStrokePathInstancedNV(GLsizei numPaths1,GLenum pathNameType1,const void * paths1,GLuint pathBase1,GLenum coverMode1,GLenum transformType1,const GLfloat * transformValues1)
{
	static PFNGLCOVERSTROKEPATHINSTANCEDNVPROC_ALT fn=(PFNGLCOVERSTROKEPATHINSTANCEDNVPROC_ALT)glaltGetProcAddressExtension("glCoverStrokePathInstancedNV","GL_NV_path_rendering");
	 fn(numPaths1,pathNameType1,paths1,pathBase1,coverMode1,transformType1,transformValues1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CoverStrokePathNV
#define GL_ALT_FUNDEF_CoverStrokePathNV
typedef void (*PFNGLCOVERSTROKEPATHNVPROC_ALT)(GLuint,GLenum);
static inline void glCoverStrokePathNV(GLuint path1,GLenum coverMode1)
{
	static PFNGLCOVERSTROKEPATHNVPROC_ALT fn=(PFNGLCOVERSTROKEPATHNVPROC_ALT)glaltGetProcAddressExtension("glCoverStrokePathNV","GL_NV_path_rendering");
	 fn(path1,coverMode1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DeletePathsNV
#define GL_ALT_FUNDEF_DeletePathsNV
typedef void (*PFNGLDELETEPATHSNVPROC_ALT)(GLuint,GLsizei);
static inline void glDeletePathsNV(GLuint path1,GLsizei range1)
{
	static PFNGLDELETEPATHSNVPROC_ALT fn=(PFNGLDELETEPATHSNVPROC_ALT)glaltGetProcAddressExtension("glDeletePathsNV","GL_NV_path_rendering");
	 fn(path1,range1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GenPathsNV
#define GL_ALT_FUNDEF_GenPathsNV
typedef GLuint (*PFNGLGENPATHSNVPROC_ALT)(GLsizei);
static inline GLuint glGenPathsNV(GLsizei range1)
{
	static PFNGLGENPATHSNVPROC_ALT fn=(PFNGLGENPATHSNVPROC_ALT)glaltGetProcAddressExtension("glGenPathsNV","GL_NV_path_rendering");
	return fn(range1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetPathColorGenfvNV
#define GL_ALT_FUNDEF_GetPathColorGenfvNV
typedef void (*PFNGLGETPATHCOLORGENFVNVPROC_ALT)(GLenum,GLenum,GLfloat *);
static inline void glGetPathColorGenfvNV(GLenum color1,GLenum pname1,GLfloat * value1)
{
	static PFNGLGETPATHCOLORGENFVNVPROC_ALT fn=(PFNGLGETPATHCOLORGENFVNVPROC_ALT)glaltGetProcAddressExtension("glGetPathColorGenfvNV","GL_NV_path_rendering");
	 fn(color1,pname1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetPathColorGenivNV
#define GL_ALT_FUNDEF_GetPathColorGenivNV
typedef void (*PFNGLGETPATHCOLORGENIVNVPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetPathColorGenivNV(GLenum color1,GLenum pname1,GLint * value1)
{
	static PFNGLGETPATHCOLORGENIVNVPROC_ALT fn=(PFNGLGETPATHCOLORGENIVNVPROC_ALT)glaltGetProcAddressExtension("glGetPathColorGenivNV","GL_NV_path_rendering");
	 fn(color1,pname1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetPathCommandsNV
#define GL_ALT_FUNDEF_GetPathCommandsNV
typedef void (*PFNGLGETPATHCOMMANDSNVPROC_ALT)(GLuint,GLubyte *);
static inline void glGetPathCommandsNV(GLuint path1,GLubyte * commands1)
{
	static PFNGLGETPATHCOMMANDSNVPROC_ALT fn=(PFNGLGETPATHCOMMANDSNVPROC_ALT)glaltGetProcAddressExtension("glGetPathCommandsNV","GL_NV_path_rendering");
	 fn(path1,commands1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetPathCoordsNV
#define GL_ALT_FUNDEF_GetPathCoordsNV
typedef void (*PFNGLGETPATHCOORDSNVPROC_ALT)(GLuint,GLfloat *);
static inline void glGetPathCoordsNV(GLuint path1,GLfloat * coords1)
{
	static PFNGLGETPATHCOORDSNVPROC_ALT fn=(PFNGLGETPATHCOORDSNVPROC_ALT)glaltGetProcAddressExtension("glGetPathCoordsNV","GL_NV_path_rendering");
	 fn(path1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetPathDashArrayNV
#define GL_ALT_FUNDEF_GetPathDashArrayNV
typedef void (*PFNGLGETPATHDASHARRAYNVPROC_ALT)(GLuint,GLfloat *);
static inline void glGetPathDashArrayNV(GLuint path1,GLfloat * dashArray1)
{
	static PFNGLGETPATHDASHARRAYNVPROC_ALT fn=(PFNGLGETPATHDASHARRAYNVPROC_ALT)glaltGetProcAddressExtension("glGetPathDashArrayNV","GL_NV_path_rendering");
	 fn(path1,dashArray1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetPathLengthNV
#define GL_ALT_FUNDEF_GetPathLengthNV
typedef GLfloat (*PFNGLGETPATHLENGTHNVPROC_ALT)(GLuint,GLsizei,GLsizei);
static inline GLfloat glGetPathLengthNV(GLuint path1,GLsizei startSegment1,GLsizei numSegments1)
{
	static PFNGLGETPATHLENGTHNVPROC_ALT fn=(PFNGLGETPATHLENGTHNVPROC_ALT)glaltGetProcAddressExtension("glGetPathLengthNV","GL_NV_path_rendering");
	return fn(path1,startSegment1,numSegments1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetPathMetricRangeNV
#define GL_ALT_FUNDEF_GetPathMetricRangeNV
typedef void (*PFNGLGETPATHMETRICRANGENVPROC_ALT)(GLbitfield,GLuint,GLsizei,GLsizei,GLfloat *);
static inline void glGetPathMetricRangeNV(GLbitfield metricQueryMask1,GLuint firstPathName1,GLsizei numPaths1,GLsizei stride1,GLfloat * metrics1)
{
	static PFNGLGETPATHMETRICRANGENVPROC_ALT fn=(PFNGLGETPATHMETRICRANGENVPROC_ALT)glaltGetProcAddressExtension("glGetPathMetricRangeNV","GL_NV_path_rendering");
	 fn(metricQueryMask1,firstPathName1,numPaths1,stride1,metrics1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetPathMetricsNV
#define GL_ALT_FUNDEF_GetPathMetricsNV
typedef void (*PFNGLGETPATHMETRICSNVPROC_ALT)(GLbitfield,GLsizei,GLenum,const void *,GLuint,GLsizei,GLfloat *);
static inline void glGetPathMetricsNV(GLbitfield metricQueryMask1,GLsizei numPaths1,GLenum pathNameType1,const void * paths1,GLuint pathBase1,GLsizei stride1,GLfloat * metrics1)
{
	static PFNGLGETPATHMETRICSNVPROC_ALT fn=(PFNGLGETPATHMETRICSNVPROC_ALT)glaltGetProcAddressExtension("glGetPathMetricsNV","GL_NV_path_rendering");
	 fn(metricQueryMask1,numPaths1,pathNameType1,paths1,pathBase1,stride1,metrics1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetPathParameterfvNV
#define GL_ALT_FUNDEF_GetPathParameterfvNV
typedef void (*PFNGLGETPATHPARAMETERFVNVPROC_ALT)(GLuint,GLenum,GLfloat *);
static inline void glGetPathParameterfvNV(GLuint path1,GLenum pname1,GLfloat * value1)
{
	static PFNGLGETPATHPARAMETERFVNVPROC_ALT fn=(PFNGLGETPATHPARAMETERFVNVPROC_ALT)glaltGetProcAddressExtension("glGetPathParameterfvNV","GL_NV_path_rendering");
	 fn(path1,pname1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetPathParameterivNV
#define GL_ALT_FUNDEF_GetPathParameterivNV
typedef void (*PFNGLGETPATHPARAMETERIVNVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetPathParameterivNV(GLuint path1,GLenum pname1,GLint * value1)
{
	static PFNGLGETPATHPARAMETERIVNVPROC_ALT fn=(PFNGLGETPATHPARAMETERIVNVPROC_ALT)glaltGetProcAddressExtension("glGetPathParameterivNV","GL_NV_path_rendering");
	 fn(path1,pname1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetPathSpacingNV
#define GL_ALT_FUNDEF_GetPathSpacingNV
typedef void (*PFNGLGETPATHSPACINGNVPROC_ALT)(GLenum,GLsizei,GLenum,const void *,GLuint,GLfloat,GLfloat,GLenum,GLfloat *);
static inline void glGetPathSpacingNV(GLenum pathListMode1,GLsizei numPaths1,GLenum pathNameType1,const void * paths1,GLuint pathBase1,GLfloat advanceScale1,GLfloat kerningScale1,GLenum transformType1,GLfloat * returnedSpacing1)
{
	static PFNGLGETPATHSPACINGNVPROC_ALT fn=(PFNGLGETPATHSPACINGNVPROC_ALT)glaltGetProcAddressExtension("glGetPathSpacingNV","GL_NV_path_rendering");
	 fn(pathListMode1,numPaths1,pathNameType1,paths1,pathBase1,advanceScale1,kerningScale1,transformType1,returnedSpacing1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetPathTexGenfvNV
#define GL_ALT_FUNDEF_GetPathTexGenfvNV
typedef void (*PFNGLGETPATHTEXGENFVNVPROC_ALT)(GLenum,GLenum,GLfloat *);
static inline void glGetPathTexGenfvNV(GLenum texCoordSet1,GLenum pname1,GLfloat * value1)
{
	static PFNGLGETPATHTEXGENFVNVPROC_ALT fn=(PFNGLGETPATHTEXGENFVNVPROC_ALT)glaltGetProcAddressExtension("glGetPathTexGenfvNV","GL_NV_path_rendering");
	 fn(texCoordSet1,pname1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetPathTexGenivNV
#define GL_ALT_FUNDEF_GetPathTexGenivNV
typedef void (*PFNGLGETPATHTEXGENIVNVPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetPathTexGenivNV(GLenum texCoordSet1,GLenum pname1,GLint * value1)
{
	static PFNGLGETPATHTEXGENIVNVPROC_ALT fn=(PFNGLGETPATHTEXGENIVNVPROC_ALT)glaltGetProcAddressExtension("glGetPathTexGenivNV","GL_NV_path_rendering");
	 fn(texCoordSet1,pname1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetProgramResourcefvNV
#define GL_ALT_FUNDEF_GetProgramResourcefvNV
typedef void (*PFNGLGETPROGRAMRESOURCEFVNVPROC_ALT)(GLuint,GLenum,GLuint,GLsizei,const GLenum *,GLsizei,GLsizei *,GLfloat *);
static inline void glGetProgramResourcefvNV(GLuint program1,GLenum programInterface1,GLuint index1,GLsizei propCount1,const GLenum * props1,GLsizei bufSize1,GLsizei * length1,GLfloat * params1)
{
	static PFNGLGETPROGRAMRESOURCEFVNVPROC_ALT fn=(PFNGLGETPROGRAMRESOURCEFVNVPROC_ALT)glaltGetProcAddressExtension("glGetProgramResourcefvNV","GL_NV_path_rendering");
	 fn(program1,programInterface1,index1,propCount1,props1,bufSize1,length1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_InterpolatePathsNV
#define GL_ALT_FUNDEF_InterpolatePathsNV
typedef void (*PFNGLINTERPOLATEPATHSNVPROC_ALT)(GLuint,GLuint,GLuint,GLfloat);
static inline void glInterpolatePathsNV(GLuint resultPath1,GLuint pathA1,GLuint pathB1,GLfloat weight1)
{
	static PFNGLINTERPOLATEPATHSNVPROC_ALT fn=(PFNGLINTERPOLATEPATHSNVPROC_ALT)glaltGetProcAddressExtension("glInterpolatePathsNV","GL_NV_path_rendering");
	 fn(resultPath1,pathA1,pathB1,weight1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IsPathNV
#define GL_ALT_FUNDEF_IsPathNV
typedef GLboolean (*PFNGLISPATHNVPROC_ALT)(GLuint);
static inline GLboolean glIsPathNV(GLuint path1)
{
	static PFNGLISPATHNVPROC_ALT fn=(PFNGLISPATHNVPROC_ALT)glaltGetProcAddressExtension("glIsPathNV","GL_NV_path_rendering");
	return fn(path1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IsPointInFillPathNV
#define GL_ALT_FUNDEF_IsPointInFillPathNV
typedef GLboolean (*PFNGLISPOINTINFILLPATHNVPROC_ALT)(GLuint,GLuint,GLfloat,GLfloat);
static inline GLboolean glIsPointInFillPathNV(GLuint path1,GLuint mask1,GLfloat x1,GLfloat y1)
{
	static PFNGLISPOINTINFILLPATHNVPROC_ALT fn=(PFNGLISPOINTINFILLPATHNVPROC_ALT)glaltGetProcAddressExtension("glIsPointInFillPathNV","GL_NV_path_rendering");
	return fn(path1,mask1,x1,y1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IsPointInStrokePathNV
#define GL_ALT_FUNDEF_IsPointInStrokePathNV
typedef GLboolean (*PFNGLISPOINTINSTROKEPATHNVPROC_ALT)(GLuint,GLfloat,GLfloat);
static inline GLboolean glIsPointInStrokePathNV(GLuint path1,GLfloat x1,GLfloat y1)
{
	static PFNGLISPOINTINSTROKEPATHNVPROC_ALT fn=(PFNGLISPOINTINSTROKEPATHNVPROC_ALT)glaltGetProcAddressExtension("glIsPointInStrokePathNV","GL_NV_path_rendering");
	return fn(path1,x1,y1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MatrixLoad3x2fNV
#define GL_ALT_FUNDEF_MatrixLoad3x2fNV
typedef void (*PFNGLMATRIXLOAD3X2FNVPROC_ALT)(GLenum,const GLfloat *);
static inline void glMatrixLoad3x2fNV(GLenum matrixMode1,const GLfloat * m1)
{
	static PFNGLMATRIXLOAD3X2FNVPROC_ALT fn=(PFNGLMATRIXLOAD3X2FNVPROC_ALT)glaltGetProcAddressExtension("glMatrixLoad3x2fNV","GL_NV_path_rendering");
	 fn(matrixMode1,m1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MatrixLoad3x3fNV
#define GL_ALT_FUNDEF_MatrixLoad3x3fNV
typedef void (*PFNGLMATRIXLOAD3X3FNVPROC_ALT)(GLenum,const GLfloat *);
static inline void glMatrixLoad3x3fNV(GLenum matrixMode1,const GLfloat * m1)
{
	static PFNGLMATRIXLOAD3X3FNVPROC_ALT fn=(PFNGLMATRIXLOAD3X3FNVPROC_ALT)glaltGetProcAddressExtension("glMatrixLoad3x3fNV","GL_NV_path_rendering");
	 fn(matrixMode1,m1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MatrixLoadTranspose3x3fNV
#define GL_ALT_FUNDEF_MatrixLoadTranspose3x3fNV
typedef void (*PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC_ALT)(GLenum,const GLfloat *);
static inline void glMatrixLoadTranspose3x3fNV(GLenum matrixMode1,const GLfloat * m1)
{
	static PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC_ALT fn=(PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC_ALT)glaltGetProcAddressExtension("glMatrixLoadTranspose3x3fNV","GL_NV_path_rendering");
	 fn(matrixMode1,m1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MatrixMult3x2fNV
#define GL_ALT_FUNDEF_MatrixMult3x2fNV
typedef void (*PFNGLMATRIXMULT3X2FNVPROC_ALT)(GLenum,const GLfloat *);
static inline void glMatrixMult3x2fNV(GLenum matrixMode1,const GLfloat * m1)
{
	static PFNGLMATRIXMULT3X2FNVPROC_ALT fn=(PFNGLMATRIXMULT3X2FNVPROC_ALT)glaltGetProcAddressExtension("glMatrixMult3x2fNV","GL_NV_path_rendering");
	 fn(matrixMode1,m1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MatrixMult3x3fNV
#define GL_ALT_FUNDEF_MatrixMult3x3fNV
typedef void (*PFNGLMATRIXMULT3X3FNVPROC_ALT)(GLenum,const GLfloat *);
static inline void glMatrixMult3x3fNV(GLenum matrixMode1,const GLfloat * m1)
{
	static PFNGLMATRIXMULT3X3FNVPROC_ALT fn=(PFNGLMATRIXMULT3X3FNVPROC_ALT)glaltGetProcAddressExtension("glMatrixMult3x3fNV","GL_NV_path_rendering");
	 fn(matrixMode1,m1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MatrixMultTranspose3x3fNV
#define GL_ALT_FUNDEF_MatrixMultTranspose3x3fNV
typedef void (*PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC_ALT)(GLenum,const GLfloat *);
static inline void glMatrixMultTranspose3x3fNV(GLenum matrixMode1,const GLfloat * m1)
{
	static PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC_ALT fn=(PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC_ALT)glaltGetProcAddressExtension("glMatrixMultTranspose3x3fNV","GL_NV_path_rendering");
	 fn(matrixMode1,m1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PathColorGenNV
#define GL_ALT_FUNDEF_PathColorGenNV
typedef void (*PFNGLPATHCOLORGENNVPROC_ALT)(GLenum,GLenum,GLenum,const GLfloat *);
static inline void glPathColorGenNV(GLenum color1,GLenum genMode1,GLenum colorFormat1,const GLfloat * coeffs1)
{
	static PFNGLPATHCOLORGENNVPROC_ALT fn=(PFNGLPATHCOLORGENNVPROC_ALT)glaltGetProcAddressExtension("glPathColorGenNV","GL_NV_path_rendering");
	 fn(color1,genMode1,colorFormat1,coeffs1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PathCommandsNV
#define GL_ALT_FUNDEF_PathCommandsNV
typedef void (*PFNGLPATHCOMMANDSNVPROC_ALT)(GLuint,GLsizei,const GLubyte *,GLsizei,GLenum,const void *);
static inline void glPathCommandsNV(GLuint path1,GLsizei numCommands1,const GLubyte * commands1,GLsizei numCoords1,GLenum coordType1,const void * coords1)
{
	static PFNGLPATHCOMMANDSNVPROC_ALT fn=(PFNGLPATHCOMMANDSNVPROC_ALT)glaltGetProcAddressExtension("glPathCommandsNV","GL_NV_path_rendering");
	 fn(path1,numCommands1,commands1,numCoords1,coordType1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PathCoordsNV
#define GL_ALT_FUNDEF_PathCoordsNV
typedef void (*PFNGLPATHCOORDSNVPROC_ALT)(GLuint,GLsizei,GLenum,const void *);
static inline void glPathCoordsNV(GLuint path1,GLsizei numCoords1,GLenum coordType1,const void * coords1)
{
	static PFNGLPATHCOORDSNVPROC_ALT fn=(PFNGLPATHCOORDSNVPROC_ALT)glaltGetProcAddressExtension("glPathCoordsNV","GL_NV_path_rendering");
	 fn(path1,numCoords1,coordType1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PathCoverDepthFuncNV
#define GL_ALT_FUNDEF_PathCoverDepthFuncNV
typedef void (*PFNGLPATHCOVERDEPTHFUNCNVPROC_ALT)(GLenum);
static inline void glPathCoverDepthFuncNV(GLenum func1)
{
	static PFNGLPATHCOVERDEPTHFUNCNVPROC_ALT fn=(PFNGLPATHCOVERDEPTHFUNCNVPROC_ALT)glaltGetProcAddressExtension("glPathCoverDepthFuncNV","GL_NV_path_rendering");
	 fn(func1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PathDashArrayNV
#define GL_ALT_FUNDEF_PathDashArrayNV
typedef void (*PFNGLPATHDASHARRAYNVPROC_ALT)(GLuint,GLsizei,const GLfloat *);
static inline void glPathDashArrayNV(GLuint path1,GLsizei dashCount1,const GLfloat * dashArray1)
{
	static PFNGLPATHDASHARRAYNVPROC_ALT fn=(PFNGLPATHDASHARRAYNVPROC_ALT)glaltGetProcAddressExtension("glPathDashArrayNV","GL_NV_path_rendering");
	 fn(path1,dashCount1,dashArray1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PathFogGenNV
#define GL_ALT_FUNDEF_PathFogGenNV
typedef void (*PFNGLPATHFOGGENNVPROC_ALT)(GLenum);
static inline void glPathFogGenNV(GLenum genMode1)
{
	static PFNGLPATHFOGGENNVPROC_ALT fn=(PFNGLPATHFOGGENNVPROC_ALT)glaltGetProcAddressExtension("glPathFogGenNV","GL_NV_path_rendering");
	 fn(genMode1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PathGlyphIndexArrayNV
#define GL_ALT_FUNDEF_PathGlyphIndexArrayNV
typedef GLenum (*PFNGLPATHGLYPHINDEXARRAYNVPROC_ALT)(GLuint,GLenum,const void *,GLbitfield,GLuint,GLsizei,GLuint,GLfloat);
static inline GLenum glPathGlyphIndexArrayNV(GLuint firstPathName1,GLenum fontTarget1,const void * fontName1,GLbitfield fontStyle1,GLuint firstGlyphIndex1,GLsizei numGlyphs1,GLuint pathParameterTemplate1,GLfloat emScale1)
{
	static PFNGLPATHGLYPHINDEXARRAYNVPROC_ALT fn=(PFNGLPATHGLYPHINDEXARRAYNVPROC_ALT)glaltGetProcAddressExtension("glPathGlyphIndexArrayNV","GL_NV_path_rendering");
	return fn(firstPathName1,fontTarget1,fontName1,fontStyle1,firstGlyphIndex1,numGlyphs1,pathParameterTemplate1,emScale1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PathGlyphIndexRangeNV
#define GL_ALT_FUNDEF_PathGlyphIndexRangeNV
typedef GLenum (*PFNGLPATHGLYPHINDEXRANGENVPROC_ALT)(GLenum,const void *,GLbitfield,GLuint,GLfloat,GLuint);
static inline GLenum glPathGlyphIndexRangeNV(GLenum fontTarget1,const void * fontName1,GLbitfield fontStyle1,GLuint pathParameterTemplate1,GLfloat emScale1,GLuint baseAndCount1)
{
	static PFNGLPATHGLYPHINDEXRANGENVPROC_ALT fn=(PFNGLPATHGLYPHINDEXRANGENVPROC_ALT)glaltGetProcAddressExtension("glPathGlyphIndexRangeNV","GL_NV_path_rendering");
	return fn(fontTarget1,fontName1,fontStyle1,pathParameterTemplate1,emScale1,baseAndCount1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PathGlyphRangeNV
#define GL_ALT_FUNDEF_PathGlyphRangeNV
typedef void (*PFNGLPATHGLYPHRANGENVPROC_ALT)(GLuint,GLenum,const void *,GLbitfield,GLuint,GLsizei,GLenum,GLuint,GLfloat);
static inline void glPathGlyphRangeNV(GLuint firstPathName1,GLenum fontTarget1,const void * fontName1,GLbitfield fontStyle1,GLuint firstGlyph1,GLsizei numGlyphs1,GLenum handleMissingGlyphs1,GLuint pathParameterTemplate1,GLfloat emScale1)
{
	static PFNGLPATHGLYPHRANGENVPROC_ALT fn=(PFNGLPATHGLYPHRANGENVPROC_ALT)glaltGetProcAddressExtension("glPathGlyphRangeNV","GL_NV_path_rendering");
	 fn(firstPathName1,fontTarget1,fontName1,fontStyle1,firstGlyph1,numGlyphs1,handleMissingGlyphs1,pathParameterTemplate1,emScale1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PathGlyphsNV
#define GL_ALT_FUNDEF_PathGlyphsNV
typedef void (*PFNGLPATHGLYPHSNVPROC_ALT)(GLuint,GLenum,const void *,GLbitfield,GLsizei,GLenum,const void *,GLenum,GLuint,GLfloat);
static inline void glPathGlyphsNV(GLuint firstPathName1,GLenum fontTarget1,const void * fontName1,GLbitfield fontStyle1,GLsizei numGlyphs1,GLenum type1,const void * charcodes1,GLenum handleMissingGlyphs1,GLuint pathParameterTemplate1,GLfloat emScale1)
{
	static PFNGLPATHGLYPHSNVPROC_ALT fn=(PFNGLPATHGLYPHSNVPROC_ALT)glaltGetProcAddressExtension("glPathGlyphsNV","GL_NV_path_rendering");
	 fn(firstPathName1,fontTarget1,fontName1,fontStyle1,numGlyphs1,type1,charcodes1,handleMissingGlyphs1,pathParameterTemplate1,emScale1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PathMemoryGlyphIndexArrayNV
#define GL_ALT_FUNDEF_PathMemoryGlyphIndexArrayNV
typedef GLenum (*PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC_ALT)(GLuint,GLenum,GLsizeiptr,const void *,GLsizei,GLuint,GLsizei,GLuint,GLfloat);
static inline GLenum glPathMemoryGlyphIndexArrayNV(GLuint firstPathName1,GLenum fontTarget1,GLsizeiptr fontSize1,const void * fontData1,GLsizei faceIndex1,GLuint firstGlyphIndex1,GLsizei numGlyphs1,GLuint pathParameterTemplate1,GLfloat emScale1)
{
	static PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC_ALT fn=(PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC_ALT)glaltGetProcAddressExtension("glPathMemoryGlyphIndexArrayNV","GL_NV_path_rendering");
	return fn(firstPathName1,fontTarget1,fontSize1,fontData1,faceIndex1,firstGlyphIndex1,numGlyphs1,pathParameterTemplate1,emScale1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PathParameterfNV
#define GL_ALT_FUNDEF_PathParameterfNV
typedef void (*PFNGLPATHPARAMETERFNVPROC_ALT)(GLuint,GLenum,GLfloat);
static inline void glPathParameterfNV(GLuint path1,GLenum pname1,GLfloat value1)
{
	static PFNGLPATHPARAMETERFNVPROC_ALT fn=(PFNGLPATHPARAMETERFNVPROC_ALT)glaltGetProcAddressExtension("glPathParameterfNV","GL_NV_path_rendering");
	 fn(path1,pname1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PathParameterfvNV
#define GL_ALT_FUNDEF_PathParameterfvNV
typedef void (*PFNGLPATHPARAMETERFVNVPROC_ALT)(GLuint,GLenum,const GLfloat *);
static inline void glPathParameterfvNV(GLuint path1,GLenum pname1,const GLfloat * value1)
{
	static PFNGLPATHPARAMETERFVNVPROC_ALT fn=(PFNGLPATHPARAMETERFVNVPROC_ALT)glaltGetProcAddressExtension("glPathParameterfvNV","GL_NV_path_rendering");
	 fn(path1,pname1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PathParameteriNV
#define GL_ALT_FUNDEF_PathParameteriNV
typedef void (*PFNGLPATHPARAMETERINVPROC_ALT)(GLuint,GLenum,GLint);
static inline void glPathParameteriNV(GLuint path1,GLenum pname1,GLint value1)
{
	static PFNGLPATHPARAMETERINVPROC_ALT fn=(PFNGLPATHPARAMETERINVPROC_ALT)glaltGetProcAddressExtension("glPathParameteriNV","GL_NV_path_rendering");
	 fn(path1,pname1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PathParameterivNV
#define GL_ALT_FUNDEF_PathParameterivNV
typedef void (*PFNGLPATHPARAMETERIVNVPROC_ALT)(GLuint,GLenum,const GLint *);
static inline void glPathParameterivNV(GLuint path1,GLenum pname1,const GLint * value1)
{
	static PFNGLPATHPARAMETERIVNVPROC_ALT fn=(PFNGLPATHPARAMETERIVNVPROC_ALT)glaltGetProcAddressExtension("glPathParameterivNV","GL_NV_path_rendering");
	 fn(path1,pname1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PathStencilDepthOffsetNV
#define GL_ALT_FUNDEF_PathStencilDepthOffsetNV
typedef void (*PFNGLPATHSTENCILDEPTHOFFSETNVPROC_ALT)(GLfloat,GLfloat);
static inline void glPathStencilDepthOffsetNV(GLfloat factor1,GLfloat units1)
{
	static PFNGLPATHSTENCILDEPTHOFFSETNVPROC_ALT fn=(PFNGLPATHSTENCILDEPTHOFFSETNVPROC_ALT)glaltGetProcAddressExtension("glPathStencilDepthOffsetNV","GL_NV_path_rendering");
	 fn(factor1,units1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PathStencilFuncNV
#define GL_ALT_FUNDEF_PathStencilFuncNV
typedef void (*PFNGLPATHSTENCILFUNCNVPROC_ALT)(GLenum,GLint,GLuint);
static inline void glPathStencilFuncNV(GLenum func1,GLint ref1,GLuint mask1)
{
	static PFNGLPATHSTENCILFUNCNVPROC_ALT fn=(PFNGLPATHSTENCILFUNCNVPROC_ALT)glaltGetProcAddressExtension("glPathStencilFuncNV","GL_NV_path_rendering");
	 fn(func1,ref1,mask1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PathStringNV
#define GL_ALT_FUNDEF_PathStringNV
typedef void (*PFNGLPATHSTRINGNVPROC_ALT)(GLuint,GLenum,GLsizei,const void *);
static inline void glPathStringNV(GLuint path1,GLenum format1,GLsizei length1,const void * pathString1)
{
	static PFNGLPATHSTRINGNVPROC_ALT fn=(PFNGLPATHSTRINGNVPROC_ALT)glaltGetProcAddressExtension("glPathStringNV","GL_NV_path_rendering");
	 fn(path1,format1,length1,pathString1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PathSubCommandsNV
#define GL_ALT_FUNDEF_PathSubCommandsNV
typedef void (*PFNGLPATHSUBCOMMANDSNVPROC_ALT)(GLuint,GLsizei,GLsizei,GLsizei,const GLubyte *,GLsizei,GLenum,const void *);
static inline void glPathSubCommandsNV(GLuint path1,GLsizei commandStart1,GLsizei commandsToDelete1,GLsizei numCommands1,const GLubyte * commands1,GLsizei numCoords1,GLenum coordType1,const void * coords1)
{
	static PFNGLPATHSUBCOMMANDSNVPROC_ALT fn=(PFNGLPATHSUBCOMMANDSNVPROC_ALT)glaltGetProcAddressExtension("glPathSubCommandsNV","GL_NV_path_rendering");
	 fn(path1,commandStart1,commandsToDelete1,numCommands1,commands1,numCoords1,coordType1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PathSubCoordsNV
#define GL_ALT_FUNDEF_PathSubCoordsNV
typedef void (*PFNGLPATHSUBCOORDSNVPROC_ALT)(GLuint,GLsizei,GLsizei,GLenum,const void *);
static inline void glPathSubCoordsNV(GLuint path1,GLsizei coordStart1,GLsizei numCoords1,GLenum coordType1,const void * coords1)
{
	static PFNGLPATHSUBCOORDSNVPROC_ALT fn=(PFNGLPATHSUBCOORDSNVPROC_ALT)glaltGetProcAddressExtension("glPathSubCoordsNV","GL_NV_path_rendering");
	 fn(path1,coordStart1,numCoords1,coordType1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PathTexGenNV
#define GL_ALT_FUNDEF_PathTexGenNV
typedef void (*PFNGLPATHTEXGENNVPROC_ALT)(GLenum,GLenum,GLint,const GLfloat *);
static inline void glPathTexGenNV(GLenum texCoordSet1,GLenum genMode1,GLint components1,const GLfloat * coeffs1)
{
	static PFNGLPATHTEXGENNVPROC_ALT fn=(PFNGLPATHTEXGENNVPROC_ALT)glaltGetProcAddressExtension("glPathTexGenNV","GL_NV_path_rendering");
	 fn(texCoordSet1,genMode1,components1,coeffs1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PointAlongPathNV
#define GL_ALT_FUNDEF_PointAlongPathNV
typedef GLboolean (*PFNGLPOINTALONGPATHNVPROC_ALT)(GLuint,GLsizei,GLsizei,GLfloat,GLfloat *,GLfloat *,GLfloat *,GLfloat *);
static inline GLboolean glPointAlongPathNV(GLuint path1,GLsizei startSegment1,GLsizei numSegments1,GLfloat distance1,GLfloat * x1,GLfloat * y1,GLfloat * tangentX1,GLfloat * tangentY1)
{
	static PFNGLPOINTALONGPATHNVPROC_ALT fn=(PFNGLPOINTALONGPATHNVPROC_ALT)glaltGetProcAddressExtension("glPointAlongPathNV","GL_NV_path_rendering");
	return fn(path1,startSegment1,numSegments1,distance1,x1,y1,tangentX1,tangentY1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramPathFragmentInputGenNV
#define GL_ALT_FUNDEF_ProgramPathFragmentInputGenNV
typedef void (*PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC_ALT)(GLuint,GLint,GLenum,GLint,const GLfloat *);
static inline void glProgramPathFragmentInputGenNV(GLuint program1,GLint location1,GLenum genMode1,GLint components1,const GLfloat * coeffs1)
{
	static PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC_ALT fn=(PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC_ALT)glaltGetProcAddressExtension("glProgramPathFragmentInputGenNV","GL_NV_path_rendering");
	 fn(program1,location1,genMode1,components1,coeffs1);
}
#endif

#ifndef	GL_ALT_FUNDEF_StencilFillPathInstancedNV
#define GL_ALT_FUNDEF_StencilFillPathInstancedNV
typedef void (*PFNGLSTENCILFILLPATHINSTANCEDNVPROC_ALT)(GLsizei,GLenum,const void *,GLuint,GLenum,GLuint,GLenum,const GLfloat *);
static inline void glStencilFillPathInstancedNV(GLsizei numPaths1,GLenum pathNameType1,const void * paths1,GLuint pathBase1,GLenum fillMode1,GLuint mask1,GLenum transformType1,const GLfloat * transformValues1)
{
	static PFNGLSTENCILFILLPATHINSTANCEDNVPROC_ALT fn=(PFNGLSTENCILFILLPATHINSTANCEDNVPROC_ALT)glaltGetProcAddressExtension("glStencilFillPathInstancedNV","GL_NV_path_rendering");
	 fn(numPaths1,pathNameType1,paths1,pathBase1,fillMode1,mask1,transformType1,transformValues1);
}
#endif

#ifndef	GL_ALT_FUNDEF_StencilFillPathNV
#define GL_ALT_FUNDEF_StencilFillPathNV
typedef void (*PFNGLSTENCILFILLPATHNVPROC_ALT)(GLuint,GLenum,GLuint);
static inline void glStencilFillPathNV(GLuint path1,GLenum fillMode1,GLuint mask1)
{
	static PFNGLSTENCILFILLPATHNVPROC_ALT fn=(PFNGLSTENCILFILLPATHNVPROC_ALT)glaltGetProcAddressExtension("glStencilFillPathNV","GL_NV_path_rendering");
	 fn(path1,fillMode1,mask1);
}
#endif

#ifndef	GL_ALT_FUNDEF_StencilStrokePathInstancedNV
#define GL_ALT_FUNDEF_StencilStrokePathInstancedNV
typedef void (*PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC_ALT)(GLsizei,GLenum,const void *,GLuint,GLint,GLuint,GLenum,const GLfloat *);
static inline void glStencilStrokePathInstancedNV(GLsizei numPaths1,GLenum pathNameType1,const void * paths1,GLuint pathBase1,GLint reference1,GLuint mask1,GLenum transformType1,const GLfloat * transformValues1)
{
	static PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC_ALT fn=(PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC_ALT)glaltGetProcAddressExtension("glStencilStrokePathInstancedNV","GL_NV_path_rendering");
	 fn(numPaths1,pathNameType1,paths1,pathBase1,reference1,mask1,transformType1,transformValues1);
}
#endif

#ifndef	GL_ALT_FUNDEF_StencilStrokePathNV
#define GL_ALT_FUNDEF_StencilStrokePathNV
typedef void (*PFNGLSTENCILSTROKEPATHNVPROC_ALT)(GLuint,GLint,GLuint);
static inline void glStencilStrokePathNV(GLuint path1,GLint reference1,GLuint mask1)
{
	static PFNGLSTENCILSTROKEPATHNVPROC_ALT fn=(PFNGLSTENCILSTROKEPATHNVPROC_ALT)glaltGetProcAddressExtension("glStencilStrokePathNV","GL_NV_path_rendering");
	 fn(path1,reference1,mask1);
}
#endif

#ifndef	GL_ALT_FUNDEF_StencilThenCoverFillPathInstancedNV
#define GL_ALT_FUNDEF_StencilThenCoverFillPathInstancedNV
typedef void (*PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC_ALT)(GLsizei,GLenum,const void *,GLuint,GLenum,GLuint,GLenum,GLenum,const GLfloat *);
static inline void glStencilThenCoverFillPathInstancedNV(GLsizei numPaths1,GLenum pathNameType1,const void * paths1,GLuint pathBase1,GLenum fillMode1,GLuint mask1,GLenum coverMode1,GLenum transformType1,const GLfloat * transformValues1)
{
	static PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC_ALT fn=(PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC_ALT)glaltGetProcAddressExtension("glStencilThenCoverFillPathInstancedNV","GL_NV_path_rendering");
	 fn(numPaths1,pathNameType1,paths1,pathBase1,fillMode1,mask1,coverMode1,transformType1,transformValues1);
}
#endif

#ifndef	GL_ALT_FUNDEF_StencilThenCoverFillPathNV
#define GL_ALT_FUNDEF_StencilThenCoverFillPathNV
typedef void (*PFNGLSTENCILTHENCOVERFILLPATHNVPROC_ALT)(GLuint,GLenum,GLuint,GLenum);
static inline void glStencilThenCoverFillPathNV(GLuint path1,GLenum fillMode1,GLuint mask1,GLenum coverMode1)
{
	static PFNGLSTENCILTHENCOVERFILLPATHNVPROC_ALT fn=(PFNGLSTENCILTHENCOVERFILLPATHNVPROC_ALT)glaltGetProcAddressExtension("glStencilThenCoverFillPathNV","GL_NV_path_rendering");
	 fn(path1,fillMode1,mask1,coverMode1);
}
#endif

#ifndef	GL_ALT_FUNDEF_StencilThenCoverStrokePathInstancedNV
#define GL_ALT_FUNDEF_StencilThenCoverStrokePathInstancedNV
typedef void (*PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC_ALT)(GLsizei,GLenum,const void *,GLuint,GLint,GLuint,GLenum,GLenum,const GLfloat *);
static inline void glStencilThenCoverStrokePathInstancedNV(GLsizei numPaths1,GLenum pathNameType1,const void * paths1,GLuint pathBase1,GLint reference1,GLuint mask1,GLenum coverMode1,GLenum transformType1,const GLfloat * transformValues1)
{
	static PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC_ALT fn=(PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC_ALT)glaltGetProcAddressExtension("glStencilThenCoverStrokePathInstancedNV","GL_NV_path_rendering");
	 fn(numPaths1,pathNameType1,paths1,pathBase1,reference1,mask1,coverMode1,transformType1,transformValues1);
}
#endif

#ifndef	GL_ALT_FUNDEF_StencilThenCoverStrokePathNV
#define GL_ALT_FUNDEF_StencilThenCoverStrokePathNV
typedef void (*PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC_ALT)(GLuint,GLint,GLuint,GLenum);
static inline void glStencilThenCoverStrokePathNV(GLuint path1,GLint reference1,GLuint mask1,GLenum coverMode1)
{
	static PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC_ALT fn=(PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC_ALT)glaltGetProcAddressExtension("glStencilThenCoverStrokePathNV","GL_NV_path_rendering");
	 fn(path1,reference1,mask1,coverMode1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TransformPathNV
#define GL_ALT_FUNDEF_TransformPathNV
typedef void (*PFNGLTRANSFORMPATHNVPROC_ALT)(GLuint,GLuint,GLenum,const GLfloat *);
static inline void glTransformPathNV(GLuint resultPath1,GLuint srcPath1,GLenum transformType1,const GLfloat * transformValues1)
{
	static PFNGLTRANSFORMPATHNVPROC_ALT fn=(PFNGLTRANSFORMPATHNVPROC_ALT)glaltGetProcAddressExtension("glTransformPathNV","GL_NV_path_rendering");
	 fn(resultPath1,srcPath1,transformType1,transformValues1);
}
#endif

#ifndef	GL_ALT_FUNDEF_WeightPathsNV
#define GL_ALT_FUNDEF_WeightPathsNV
typedef void (*PFNGLWEIGHTPATHSNVPROC_ALT)(GLuint,GLsizei,const GLuint *,const GLfloat *);
static inline void glWeightPathsNV(GLuint resultPath1,GLsizei numPaths1,const GLuint * paths1,const GLfloat * weights1)
{
	static PFNGLWEIGHTPATHSNVPROC_ALT fn=(PFNGLWEIGHTPATHSNVPROC_ALT)glaltGetProcAddressExtension("glWeightPathsNV","GL_NV_path_rendering");
	 fn(resultPath1,numPaths1,paths1,weights1);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_pixel_data_range
#define GL_NV_pixel_data_range
#ifndef GL_WRITE_PIXEL_DATA_RANGE_NV
#define GL_WRITE_PIXEL_DATA_RANGE_NV 0x8878
#endif //GL_WRITE_PIXEL_DATA_RANGE_NV
#ifndef GL_READ_PIXEL_DATA_RANGE_NV
#define GL_READ_PIXEL_DATA_RANGE_NV 0x8879
#endif //GL_READ_PIXEL_DATA_RANGE_NV
#ifndef GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV
#define GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV 0x887A
#endif //GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV
#ifndef GL_READ_PIXEL_DATA_RANGE_LENGTH_NV
#define GL_READ_PIXEL_DATA_RANGE_LENGTH_NV 0x887B
#endif //GL_READ_PIXEL_DATA_RANGE_LENGTH_NV
#ifndef GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV
#define GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV 0x887C
#endif //GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV
#ifndef GL_READ_PIXEL_DATA_RANGE_POINTER_NV
#define GL_READ_PIXEL_DATA_RANGE_POINTER_NV 0x887D
#endif //GL_READ_PIXEL_DATA_RANGE_POINTER_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_FlushPixelDataRangeNV
#define GL_ALT_FUNDEF_FlushPixelDataRangeNV
typedef void (*PFNGLFLUSHPIXELDATARANGENVPROC_ALT)(GLenum);
static inline void glFlushPixelDataRangeNV(GLenum target1)
{
	static PFNGLFLUSHPIXELDATARANGENVPROC_ALT fn=(PFNGLFLUSHPIXELDATARANGENVPROC_ALT)glaltGetProcAddressExtension("glFlushPixelDataRangeNV","GL_NV_pixel_data_range");
	 fn(target1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PixelDataRangeNV
#define GL_ALT_FUNDEF_PixelDataRangeNV
typedef void (*PFNGLPIXELDATARANGENVPROC_ALT)(GLenum,GLsizei,const void *);
static inline void glPixelDataRangeNV(GLenum target1,GLsizei length1,const void * pointer1)
{
	static PFNGLPIXELDATARANGENVPROC_ALT fn=(PFNGLPIXELDATARANGENVPROC_ALT)glaltGetProcAddressExtension("glPixelDataRangeNV","GL_NV_pixel_data_range");
	 fn(target1,length1,pointer1);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_point_sprite
#define GL_NV_point_sprite
#ifndef GL_POINT_SPRITE_NV
#define GL_POINT_SPRITE_NV 0x8861
#endif //GL_POINT_SPRITE_NV
#ifndef GL_COORD_REPLACE_NV
#define GL_COORD_REPLACE_NV 0x8862
#endif //GL_COORD_REPLACE_NV
#ifndef GL_POINT_SPRITE_R_MODE_NV
#define GL_POINT_SPRITE_R_MODE_NV 0x8863
#endif //GL_POINT_SPRITE_R_MODE_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_PointParameteriNV
#define GL_ALT_FUNDEF_PointParameteriNV
typedef void (*PFNGLPOINTPARAMETERINVPROC_ALT)(GLenum,GLint);
static inline void glPointParameteriNV(GLenum pname1,GLint param1)
{
	static PFNGLPOINTPARAMETERINVPROC_ALT fn=(PFNGLPOINTPARAMETERINVPROC_ALT)glaltGetProcAddressExtension("glPointParameteriNV","GL_NV_point_sprite");
	 fn(pname1,param1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_PointParameterivNV
#define GL_ALT_FUNDEF_PointParameterivNV
typedef void (*PFNGLPOINTPARAMETERIVNVPROC_ALT)(GLenum,const GLint *);
static inline void glPointParameterivNV(GLenum pname1,const GLint * params1)
{
	static PFNGLPOINTPARAMETERIVNVPROC_ALT fn=(PFNGLPOINTPARAMETERIVNVPROC_ALT)glaltGetProcAddressExtension("glPointParameterivNV","GL_NV_point_sprite");
	 fn(pname1,params1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_NV_present_video
#define GL_NV_present_video
#ifndef GL_FRAME_NV
#define GL_FRAME_NV 0x8E26
#endif //GL_FRAME_NV
#ifndef GL_FIELDS_NV
#define GL_FIELDS_NV 0x8E27
#endif //GL_FIELDS_NV
#ifndef GL_CURRENT_TIME_NV
#define GL_CURRENT_TIME_NV 0x8E28
#endif //GL_CURRENT_TIME_NV
#ifndef GL_NUM_FILL_STREAMS_NV
#define GL_NUM_FILL_STREAMS_NV 0x8E29
#endif //GL_NUM_FILL_STREAMS_NV
#ifndef GL_PRESENT_TIME_NV
#define GL_PRESENT_TIME_NV 0x8E2A
#endif //GL_PRESENT_TIME_NV
#ifndef GL_PRESENT_DURATION_NV
#define GL_PRESENT_DURATION_NV 0x8E2B
#endif //GL_PRESENT_DURATION_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetVideoi64vNV
#define GL_ALT_FUNDEF_GetVideoi64vNV
typedef void (*PFNGLGETVIDEOI64VNVPROC_ALT)(GLuint,GLenum,GLint64EXT *);
static inline void glGetVideoi64vNV(GLuint video_slot1,GLenum pname1,GLint64EXT * params1)
{
	static PFNGLGETVIDEOI64VNVPROC_ALT fn=(PFNGLGETVIDEOI64VNVPROC_ALT)glaltGetProcAddressExtension("glGetVideoi64vNV","GL_NV_present_video");
	 fn(video_slot1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetVideoivNV
#define GL_ALT_FUNDEF_GetVideoivNV
typedef void (*PFNGLGETVIDEOIVNVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetVideoivNV(GLuint video_slot1,GLenum pname1,GLint * params1)
{
	static PFNGLGETVIDEOIVNVPROC_ALT fn=(PFNGLGETVIDEOIVNVPROC_ALT)glaltGetProcAddressExtension("glGetVideoivNV","GL_NV_present_video");
	 fn(video_slot1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetVideoui64vNV
#define GL_ALT_FUNDEF_GetVideoui64vNV
typedef void (*PFNGLGETVIDEOUI64VNVPROC_ALT)(GLuint,GLenum,GLuint64EXT *);
static inline void glGetVideoui64vNV(GLuint video_slot1,GLenum pname1,GLuint64EXT * params1)
{
	static PFNGLGETVIDEOUI64VNVPROC_ALT fn=(PFNGLGETVIDEOUI64VNVPROC_ALT)glaltGetProcAddressExtension("glGetVideoui64vNV","GL_NV_present_video");
	 fn(video_slot1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetVideouivNV
#define GL_ALT_FUNDEF_GetVideouivNV
typedef void (*PFNGLGETVIDEOUIVNVPROC_ALT)(GLuint,GLenum,GLuint *);
static inline void glGetVideouivNV(GLuint video_slot1,GLenum pname1,GLuint * params1)
{
	static PFNGLGETVIDEOUIVNVPROC_ALT fn=(PFNGLGETVIDEOUIVNVPROC_ALT)glaltGetProcAddressExtension("glGetVideouivNV","GL_NV_present_video");
	 fn(video_slot1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PresentFrameDualFillNV
#define GL_ALT_FUNDEF_PresentFrameDualFillNV
typedef void (*PFNGLPRESENTFRAMEDUALFILLNVPROC_ALT)(GLuint,GLuint64EXT,GLuint,GLuint,GLenum,GLenum,GLuint,GLenum,GLuint,GLenum,GLuint,GLenum,GLuint);
static inline void glPresentFrameDualFillNV(GLuint video_slot1,GLuint64EXT minPresentTime1,GLuint beginPresentTimeId1,GLuint presentDurationId1,GLenum type1,GLenum target01,GLuint fill01,GLenum target11,GLuint fill11,GLenum target21,GLuint fill21,GLenum target31,GLuint fill31)
{
	static PFNGLPRESENTFRAMEDUALFILLNVPROC_ALT fn=(PFNGLPRESENTFRAMEDUALFILLNVPROC_ALT)glaltGetProcAddressExtension("glPresentFrameDualFillNV","GL_NV_present_video");
	 fn(video_slot1,minPresentTime1,beginPresentTimeId1,presentDurationId1,type1,target01,fill01,target11,fill11,target21,fill21,target31,fill31);
}
#endif

#ifndef	GL_ALT_FUNDEF_PresentFrameKeyedNV
#define GL_ALT_FUNDEF_PresentFrameKeyedNV
typedef void (*PFNGLPRESENTFRAMEKEYEDNVPROC_ALT)(GLuint,GLuint64EXT,GLuint,GLuint,GLenum,GLenum,GLuint,GLuint,GLenum,GLuint,GLuint);
static inline void glPresentFrameKeyedNV(GLuint video_slot1,GLuint64EXT minPresentTime1,GLuint beginPresentTimeId1,GLuint presentDurationId1,GLenum type1,GLenum target01,GLuint fill01,GLuint key01,GLenum target11,GLuint fill11,GLuint key11)
{
	static PFNGLPRESENTFRAMEKEYEDNVPROC_ALT fn=(PFNGLPRESENTFRAMEKEYEDNVPROC_ALT)glaltGetProcAddressExtension("glPresentFrameKeyedNV","GL_NV_present_video");
	 fn(video_slot1,minPresentTime1,beginPresentTimeId1,presentDurationId1,type1,target01,fill01,key01,target11,fill11,key11);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_primitive_restart
#define GL_NV_primitive_restart
#ifndef GL_PRIMITIVE_RESTART_NV
#define GL_PRIMITIVE_RESTART_NV 0x8558
#endif //GL_PRIMITIVE_RESTART_NV
#ifndef GL_PRIMITIVE_RESTART_INDEX_NV
#define GL_PRIMITIVE_RESTART_INDEX_NV 0x8559
#endif //GL_PRIMITIVE_RESTART_INDEX_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_PrimitiveRestartIndexNV
#define GL_ALT_FUNDEF_PrimitiveRestartIndexNV
typedef void (*PFNGLPRIMITIVERESTARTINDEXNVPROC_ALT)(GLuint);
static inline void glPrimitiveRestartIndexNV(GLuint index1)
{
	static PFNGLPRIMITIVERESTARTINDEXNVPROC_ALT fn=(PFNGLPRIMITIVERESTARTINDEXNVPROC_ALT)glaltGetProcAddressExtension("glPrimitiveRestartIndexNV","GL_NV_primitive_restart");
	 fn(index1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PrimitiveRestartNV
#define GL_ALT_FUNDEF_PrimitiveRestartNV
typedef void (*PFNGLPRIMITIVERESTARTNVPROC_ALT)();
static inline void glPrimitiveRestartNV()
{
	static PFNGLPRIMITIVERESTARTNVPROC_ALT fn=(PFNGLPRIMITIVERESTARTNVPROC_ALT)glaltGetProcAddressExtension("glPrimitiveRestartNV","GL_NV_primitive_restart");
	 fn();
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_register_combiners
#define GL_NV_register_combiners
#ifndef GL_NONE
#define GL_NONE 0
#endif //GL_NONE
#ifndef GL_ZERO
#define GL_ZERO 0
#endif //GL_ZERO
#ifndef GL_FOG
#define GL_FOG 0x0B60
#endif //GL_FOG
#ifndef GL_TEXTURE0_ARB
#define GL_TEXTURE0_ARB 0x84C0
#endif //GL_TEXTURE0_ARB
#ifndef GL_TEXTURE1_ARB
#define GL_TEXTURE1_ARB 0x84C1
#endif //GL_TEXTURE1_ARB
#ifndef GL_REGISTER_COMBINERS_NV
#define GL_REGISTER_COMBINERS_NV 0x8522
#endif //GL_REGISTER_COMBINERS_NV
#ifndef GL_VARIABLE_A_NV
#define GL_VARIABLE_A_NV 0x8523
#endif //GL_VARIABLE_A_NV
#ifndef GL_VARIABLE_B_NV
#define GL_VARIABLE_B_NV 0x8524
#endif //GL_VARIABLE_B_NV
#ifndef GL_VARIABLE_C_NV
#define GL_VARIABLE_C_NV 0x8525
#endif //GL_VARIABLE_C_NV
#ifndef GL_VARIABLE_D_NV
#define GL_VARIABLE_D_NV 0x8526
#endif //GL_VARIABLE_D_NV
#ifndef GL_VARIABLE_E_NV
#define GL_VARIABLE_E_NV 0x8527
#endif //GL_VARIABLE_E_NV
#ifndef GL_VARIABLE_F_NV
#define GL_VARIABLE_F_NV 0x8528
#endif //GL_VARIABLE_F_NV
#ifndef GL_VARIABLE_G_NV
#define GL_VARIABLE_G_NV 0x8529
#endif //GL_VARIABLE_G_NV
#ifndef GL_CONSTANT_COLOR0_NV
#define GL_CONSTANT_COLOR0_NV 0x852A
#endif //GL_CONSTANT_COLOR0_NV
#ifndef GL_CONSTANT_COLOR1_NV
#define GL_CONSTANT_COLOR1_NV 0x852B
#endif //GL_CONSTANT_COLOR1_NV
#ifndef GL_PRIMARY_COLOR_NV
#define GL_PRIMARY_COLOR_NV 0x852C
#endif //GL_PRIMARY_COLOR_NV
#ifndef GL_SECONDARY_COLOR_NV
#define GL_SECONDARY_COLOR_NV 0x852D
#endif //GL_SECONDARY_COLOR_NV
#ifndef GL_SPARE0_NV
#define GL_SPARE0_NV 0x852E
#endif //GL_SPARE0_NV
#ifndef GL_SPARE1_NV
#define GL_SPARE1_NV 0x852F
#endif //GL_SPARE1_NV
#ifndef GL_DISCARD_NV
#define GL_DISCARD_NV 0x8530
#endif //GL_DISCARD_NV
#ifndef GL_E_TIMES_F_NV
#define GL_E_TIMES_F_NV 0x8531
#endif //GL_E_TIMES_F_NV
#ifndef GL_SPARE0_PLUS_SECONDARY_COLOR_NV
#define GL_SPARE0_PLUS_SECONDARY_COLOR_NV 0x8532
#endif //GL_SPARE0_PLUS_SECONDARY_COLOR_NV
#ifndef GL_UNSIGNED_IDENTITY_NV
#define GL_UNSIGNED_IDENTITY_NV 0x8536
#endif //GL_UNSIGNED_IDENTITY_NV
#ifndef GL_UNSIGNED_INVERT_NV
#define GL_UNSIGNED_INVERT_NV 0x8537
#endif //GL_UNSIGNED_INVERT_NV
#ifndef GL_EXPAND_NORMAL_NV
#define GL_EXPAND_NORMAL_NV 0x8538
#endif //GL_EXPAND_NORMAL_NV
#ifndef GL_EXPAND_NEGATE_NV
#define GL_EXPAND_NEGATE_NV 0x8539
#endif //GL_EXPAND_NEGATE_NV
#ifndef GL_HALF_BIAS_NORMAL_NV
#define GL_HALF_BIAS_NORMAL_NV 0x853A
#endif //GL_HALF_BIAS_NORMAL_NV
#ifndef GL_HALF_BIAS_NEGATE_NV
#define GL_HALF_BIAS_NEGATE_NV 0x853B
#endif //GL_HALF_BIAS_NEGATE_NV
#ifndef GL_SIGNED_IDENTITY_NV
#define GL_SIGNED_IDENTITY_NV 0x853C
#endif //GL_SIGNED_IDENTITY_NV
#ifndef GL_SIGNED_NEGATE_NV
#define GL_SIGNED_NEGATE_NV 0x853D
#endif //GL_SIGNED_NEGATE_NV
#ifndef GL_SCALE_BY_TWO_NV
#define GL_SCALE_BY_TWO_NV 0x853E
#endif //GL_SCALE_BY_TWO_NV
#ifndef GL_SCALE_BY_FOUR_NV
#define GL_SCALE_BY_FOUR_NV 0x853F
#endif //GL_SCALE_BY_FOUR_NV
#ifndef GL_SCALE_BY_ONE_HALF_NV
#define GL_SCALE_BY_ONE_HALF_NV 0x8540
#endif //GL_SCALE_BY_ONE_HALF_NV
#ifndef GL_BIAS_BY_NEGATIVE_ONE_HALF_NV
#define GL_BIAS_BY_NEGATIVE_ONE_HALF_NV 0x8541
#endif //GL_BIAS_BY_NEGATIVE_ONE_HALF_NV
#ifndef GL_COMBINER_INPUT_NV
#define GL_COMBINER_INPUT_NV 0x8542
#endif //GL_COMBINER_INPUT_NV
#ifndef GL_COMBINER_MAPPING_NV
#define GL_COMBINER_MAPPING_NV 0x8543
#endif //GL_COMBINER_MAPPING_NV
#ifndef GL_COMBINER_COMPONENT_USAGE_NV
#define GL_COMBINER_COMPONENT_USAGE_NV 0x8544
#endif //GL_COMBINER_COMPONENT_USAGE_NV
#ifndef GL_COMBINER_AB_DOT_PRODUCT_NV
#define GL_COMBINER_AB_DOT_PRODUCT_NV 0x8545
#endif //GL_COMBINER_AB_DOT_PRODUCT_NV
#ifndef GL_COMBINER_CD_DOT_PRODUCT_NV
#define GL_COMBINER_CD_DOT_PRODUCT_NV 0x8546
#endif //GL_COMBINER_CD_DOT_PRODUCT_NV
#ifndef GL_COMBINER_MUX_SUM_NV
#define GL_COMBINER_MUX_SUM_NV 0x8547
#endif //GL_COMBINER_MUX_SUM_NV
#ifndef GL_COMBINER_SCALE_NV
#define GL_COMBINER_SCALE_NV 0x8548
#endif //GL_COMBINER_SCALE_NV
#ifndef GL_COMBINER_BIAS_NV
#define GL_COMBINER_BIAS_NV 0x8549
#endif //GL_COMBINER_BIAS_NV
#ifndef GL_COMBINER_AB_OUTPUT_NV
#define GL_COMBINER_AB_OUTPUT_NV 0x854A
#endif //GL_COMBINER_AB_OUTPUT_NV
#ifndef GL_COMBINER_CD_OUTPUT_NV
#define GL_COMBINER_CD_OUTPUT_NV 0x854B
#endif //GL_COMBINER_CD_OUTPUT_NV
#ifndef GL_COMBINER_SUM_OUTPUT_NV
#define GL_COMBINER_SUM_OUTPUT_NV 0x854C
#endif //GL_COMBINER_SUM_OUTPUT_NV
#ifndef GL_MAX_GENERAL_COMBINERS_NV
#define GL_MAX_GENERAL_COMBINERS_NV 0x854D
#endif //GL_MAX_GENERAL_COMBINERS_NV
#ifndef GL_NUM_GENERAL_COMBINERS_NV
#define GL_NUM_GENERAL_COMBINERS_NV 0x854E
#endif //GL_NUM_GENERAL_COMBINERS_NV
#ifndef GL_COLOR_SUM_CLAMP_NV
#define GL_COLOR_SUM_CLAMP_NV 0x854F
#endif //GL_COLOR_SUM_CLAMP_NV
#ifndef GL_COMBINER0_NV
#define GL_COMBINER0_NV 0x8550
#endif //GL_COMBINER0_NV
#ifndef GL_COMBINER1_NV
#define GL_COMBINER1_NV 0x8551
#endif //GL_COMBINER1_NV
#ifndef GL_COMBINER2_NV
#define GL_COMBINER2_NV 0x8552
#endif //GL_COMBINER2_NV
#ifndef GL_COMBINER3_NV
#define GL_COMBINER3_NV 0x8553
#endif //GL_COMBINER3_NV
#ifndef GL_COMBINER4_NV
#define GL_COMBINER4_NV 0x8554
#endif //GL_COMBINER4_NV
#ifndef GL_COMBINER5_NV
#define GL_COMBINER5_NV 0x8555
#endif //GL_COMBINER5_NV
#ifndef GL_COMBINER6_NV
#define GL_COMBINER6_NV 0x8556
#endif //GL_COMBINER6_NV
#ifndef GL_COMBINER7_NV
#define GL_COMBINER7_NV 0x8557
#endif //GL_COMBINER7_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_CombinerInputNV
#define GL_ALT_FUNDEF_CombinerInputNV
typedef void (*PFNGLCOMBINERINPUTNVPROC_ALT)(GLenum,GLenum,GLenum,GLenum,GLenum,GLenum);
static inline void glCombinerInputNV(GLenum stage1,GLenum portion1,GLenum variable1,GLenum input1,GLenum mapping1,GLenum componentUsage1)
{
	static PFNGLCOMBINERINPUTNVPROC_ALT fn=(PFNGLCOMBINERINPUTNVPROC_ALT)glaltGetProcAddressExtension("glCombinerInputNV","GL_NV_register_combiners");
	 fn(stage1,portion1,variable1,input1,mapping1,componentUsage1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CombinerOutputNV
#define GL_ALT_FUNDEF_CombinerOutputNV
typedef void (*PFNGLCOMBINEROUTPUTNVPROC_ALT)(GLenum,GLenum,GLenum,GLenum,GLenum,GLenum,GLenum,GLboolean,GLboolean,GLboolean);
static inline void glCombinerOutputNV(GLenum stage1,GLenum portion1,GLenum abOutput1,GLenum cdOutput1,GLenum sumOutput1,GLenum scale1,GLenum bias1,GLboolean abDotProduct1,GLboolean cdDotProduct1,GLboolean muxSum1)
{
	static PFNGLCOMBINEROUTPUTNVPROC_ALT fn=(PFNGLCOMBINEROUTPUTNVPROC_ALT)glaltGetProcAddressExtension("glCombinerOutputNV","GL_NV_register_combiners");
	 fn(stage1,portion1,abOutput1,cdOutput1,sumOutput1,scale1,bias1,abDotProduct1,cdDotProduct1,muxSum1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CombinerParameterfNV
#define GL_ALT_FUNDEF_CombinerParameterfNV
typedef void (*PFNGLCOMBINERPARAMETERFNVPROC_ALT)(GLenum,GLfloat);
static inline void glCombinerParameterfNV(GLenum pname1,GLfloat param1)
{
	static PFNGLCOMBINERPARAMETERFNVPROC_ALT fn=(PFNGLCOMBINERPARAMETERFNVPROC_ALT)glaltGetProcAddressExtension("glCombinerParameterfNV","GL_NV_register_combiners");
	 fn(pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CombinerParameterfvNV
#define GL_ALT_FUNDEF_CombinerParameterfvNV
typedef void (*PFNGLCOMBINERPARAMETERFVNVPROC_ALT)(GLenum,const GLfloat *);
static inline void glCombinerParameterfvNV(GLenum pname1,const GLfloat * params1)
{
	static PFNGLCOMBINERPARAMETERFVNVPROC_ALT fn=(PFNGLCOMBINERPARAMETERFVNVPROC_ALT)glaltGetProcAddressExtension("glCombinerParameterfvNV","GL_NV_register_combiners");
	 fn(pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CombinerParameteriNV
#define GL_ALT_FUNDEF_CombinerParameteriNV
typedef void (*PFNGLCOMBINERPARAMETERINVPROC_ALT)(GLenum,GLint);
static inline void glCombinerParameteriNV(GLenum pname1,GLint param1)
{
	static PFNGLCOMBINERPARAMETERINVPROC_ALT fn=(PFNGLCOMBINERPARAMETERINVPROC_ALT)glaltGetProcAddressExtension("glCombinerParameteriNV","GL_NV_register_combiners");
	 fn(pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_CombinerParameterivNV
#define GL_ALT_FUNDEF_CombinerParameterivNV
typedef void (*PFNGLCOMBINERPARAMETERIVNVPROC_ALT)(GLenum,const GLint *);
static inline void glCombinerParameterivNV(GLenum pname1,const GLint * params1)
{
	static PFNGLCOMBINERPARAMETERIVNVPROC_ALT fn=(PFNGLCOMBINERPARAMETERIVNVPROC_ALT)glaltGetProcAddressExtension("glCombinerParameterivNV","GL_NV_register_combiners");
	 fn(pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FinalCombinerInputNV
#define GL_ALT_FUNDEF_FinalCombinerInputNV
typedef void (*PFNGLFINALCOMBINERINPUTNVPROC_ALT)(GLenum,GLenum,GLenum,GLenum);
static inline void glFinalCombinerInputNV(GLenum variable1,GLenum input1,GLenum mapping1,GLenum componentUsage1)
{
	static PFNGLFINALCOMBINERINPUTNVPROC_ALT fn=(PFNGLFINALCOMBINERINPUTNVPROC_ALT)glaltGetProcAddressExtension("glFinalCombinerInputNV","GL_NV_register_combiners");
	 fn(variable1,input1,mapping1,componentUsage1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetCombinerInputParameterfvNV
#define GL_ALT_FUNDEF_GetCombinerInputParameterfvNV
typedef void (*PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC_ALT)(GLenum,GLenum,GLenum,GLenum,GLfloat *);
static inline void glGetCombinerInputParameterfvNV(GLenum stage1,GLenum portion1,GLenum variable1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC_ALT fn=(PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC_ALT)glaltGetProcAddressExtension("glGetCombinerInputParameterfvNV","GL_NV_register_combiners");
	 fn(stage1,portion1,variable1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetCombinerInputParameterivNV
#define GL_ALT_FUNDEF_GetCombinerInputParameterivNV
typedef void (*PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC_ALT)(GLenum,GLenum,GLenum,GLenum,GLint *);
static inline void glGetCombinerInputParameterivNV(GLenum stage1,GLenum portion1,GLenum variable1,GLenum pname1,GLint * params1)
{
	static PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC_ALT fn=(PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC_ALT)glaltGetProcAddressExtension("glGetCombinerInputParameterivNV","GL_NV_register_combiners");
	 fn(stage1,portion1,variable1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetCombinerOutputParameterfvNV
#define GL_ALT_FUNDEF_GetCombinerOutputParameterfvNV
typedef void (*PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC_ALT)(GLenum,GLenum,GLenum,GLfloat *);
static inline void glGetCombinerOutputParameterfvNV(GLenum stage1,GLenum portion1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC_ALT fn=(PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC_ALT)glaltGetProcAddressExtension("glGetCombinerOutputParameterfvNV","GL_NV_register_combiners");
	 fn(stage1,portion1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetCombinerOutputParameterivNV
#define GL_ALT_FUNDEF_GetCombinerOutputParameterivNV
typedef void (*PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC_ALT)(GLenum,GLenum,GLenum,GLint *);
static inline void glGetCombinerOutputParameterivNV(GLenum stage1,GLenum portion1,GLenum pname1,GLint * params1)
{
	static PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC_ALT fn=(PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC_ALT)glaltGetProcAddressExtension("glGetCombinerOutputParameterivNV","GL_NV_register_combiners");
	 fn(stage1,portion1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetFinalCombinerInputParameterfvNV
#define GL_ALT_FUNDEF_GetFinalCombinerInputParameterfvNV
typedef void (*PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC_ALT)(GLenum,GLenum,GLfloat *);
static inline void glGetFinalCombinerInputParameterfvNV(GLenum variable1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC_ALT fn=(PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC_ALT)glaltGetProcAddressExtension("glGetFinalCombinerInputParameterfvNV","GL_NV_register_combiners");
	 fn(variable1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetFinalCombinerInputParameterivNV
#define GL_ALT_FUNDEF_GetFinalCombinerInputParameterivNV
typedef void (*PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetFinalCombinerInputParameterivNV(GLenum variable1,GLenum pname1,GLint * params1)
{
	static PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC_ALT fn=(PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC_ALT)glaltGetProcAddressExtension("glGetFinalCombinerInputParameterivNV","GL_NV_register_combiners");
	 fn(variable1,pname1,params1);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_register_combiners2
#define GL_NV_register_combiners2
#ifndef GL_PER_STAGE_CONSTANTS_NV
#define GL_PER_STAGE_CONSTANTS_NV 0x8535
#endif //GL_PER_STAGE_CONSTANTS_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_CombinerStageParameterfvNV
#define GL_ALT_FUNDEF_CombinerStageParameterfvNV
typedef void (*PFNGLCOMBINERSTAGEPARAMETERFVNVPROC_ALT)(GLenum,GLenum,const GLfloat *);
static inline void glCombinerStageParameterfvNV(GLenum stage1,GLenum pname1,const GLfloat * params1)
{
	static PFNGLCOMBINERSTAGEPARAMETERFVNVPROC_ALT fn=(PFNGLCOMBINERSTAGEPARAMETERFVNVPROC_ALT)glaltGetProcAddressExtension("glCombinerStageParameterfvNV","GL_NV_register_combiners2");
	 fn(stage1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetCombinerStageParameterfvNV
#define GL_ALT_FUNDEF_GetCombinerStageParameterfvNV
typedef void (*PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC_ALT)(GLenum,GLenum,GLfloat *);
static inline void glGetCombinerStageParameterfvNV(GLenum stage1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC_ALT fn=(PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC_ALT)glaltGetProcAddressExtension("glGetCombinerStageParameterfvNV","GL_NV_register_combiners2");
	 fn(stage1,pname1,params1);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_shader_atomic_counters
#define GL_NV_shader_atomic_counters
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_shader_atomic_float
#define GL_NV_shader_atomic_float
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_shader_atomic_int64
#define GL_NV_shader_atomic_int64
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_shader_buffer_load
#define GL_NV_shader_buffer_load
#ifndef GL_BUFFER_GPU_ADDRESS_NV
#define GL_BUFFER_GPU_ADDRESS_NV 0x8F1D
#endif //GL_BUFFER_GPU_ADDRESS_NV
#ifndef GL_GPU_ADDRESS_NV
#define GL_GPU_ADDRESS_NV 0x8F34
#endif //GL_GPU_ADDRESS_NV
#ifndef GL_MAX_SHADER_BUFFER_ADDRESS_NV
#define GL_MAX_SHADER_BUFFER_ADDRESS_NV 0x8F35
#endif //GL_MAX_SHADER_BUFFER_ADDRESS_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetBufferParameterui64vNV
#define GL_ALT_FUNDEF_GetBufferParameterui64vNV
typedef void (*PFNGLGETBUFFERPARAMETERUI64VNVPROC_ALT)(GLenum,GLenum,GLuint64EXT *);
static inline void glGetBufferParameterui64vNV(GLenum target1,GLenum pname1,GLuint64EXT * params1)
{
	static PFNGLGETBUFFERPARAMETERUI64VNVPROC_ALT fn=(PFNGLGETBUFFERPARAMETERUI64VNVPROC_ALT)glaltGetProcAddressExtension("glGetBufferParameterui64vNV","GL_NV_shader_buffer_load");
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetIntegerui64vNV
#define GL_ALT_FUNDEF_GetIntegerui64vNV
typedef void (*PFNGLGETINTEGERUI64VNVPROC_ALT)(GLenum,GLuint64EXT *);
static inline void glGetIntegerui64vNV(GLenum value1,GLuint64EXT * result1)
{
	static PFNGLGETINTEGERUI64VNVPROC_ALT fn=(PFNGLGETINTEGERUI64VNVPROC_ALT)glaltGetProcAddressExtension("glGetIntegerui64vNV","GL_NV_shader_buffer_load");
	 fn(value1,result1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetNamedBufferParameterui64vNV
#define GL_ALT_FUNDEF_GetNamedBufferParameterui64vNV
typedef void (*PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC_ALT)(GLuint,GLenum,GLuint64EXT *);
static inline void glGetNamedBufferParameterui64vNV(GLuint buffer1,GLenum pname1,GLuint64EXT * params1)
{
	static PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC_ALT fn=(PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC_ALT)glaltGetProcAddressExtension("glGetNamedBufferParameterui64vNV","GL_NV_shader_buffer_load");
	 fn(buffer1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetUniformui64vNV
#define GL_ALT_FUNDEF_GetUniformui64vNV
typedef void (*PFNGLGETUNIFORMUI64VNVPROC_ALT)(GLuint,GLint,GLuint64EXT *);
static inline void glGetUniformui64vNV(GLuint program1,GLint location1,GLuint64EXT * params1)
{
	static PFNGLGETUNIFORMUI64VNVPROC_ALT fn=(PFNGLGETUNIFORMUI64VNVPROC_ALT)glaltGetProcAddressExtension("glGetUniformui64vNV","GL_NV_shader_buffer_load");
	 fn(program1,location1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IsBufferResidentNV
#define GL_ALT_FUNDEF_IsBufferResidentNV
typedef GLboolean (*PFNGLISBUFFERRESIDENTNVPROC_ALT)(GLenum);
static inline GLboolean glIsBufferResidentNV(GLenum target1)
{
	static PFNGLISBUFFERRESIDENTNVPROC_ALT fn=(PFNGLISBUFFERRESIDENTNVPROC_ALT)glaltGetProcAddressExtension("glIsBufferResidentNV","GL_NV_shader_buffer_load");
	return fn(target1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IsNamedBufferResidentNV
#define GL_ALT_FUNDEF_IsNamedBufferResidentNV
typedef GLboolean (*PFNGLISNAMEDBUFFERRESIDENTNVPROC_ALT)(GLuint);
static inline GLboolean glIsNamedBufferResidentNV(GLuint buffer1)
{
	static PFNGLISNAMEDBUFFERRESIDENTNVPROC_ALT fn=(PFNGLISNAMEDBUFFERRESIDENTNVPROC_ALT)glaltGetProcAddressExtension("glIsNamedBufferResidentNV","GL_NV_shader_buffer_load");
	return fn(buffer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MakeBufferNonResidentNV
#define GL_ALT_FUNDEF_MakeBufferNonResidentNV
typedef void (*PFNGLMAKEBUFFERNONRESIDENTNVPROC_ALT)(GLenum);
static inline void glMakeBufferNonResidentNV(GLenum target1)
{
	static PFNGLMAKEBUFFERNONRESIDENTNVPROC_ALT fn=(PFNGLMAKEBUFFERNONRESIDENTNVPROC_ALT)glaltGetProcAddressExtension("glMakeBufferNonResidentNV","GL_NV_shader_buffer_load");
	 fn(target1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MakeBufferResidentNV
#define GL_ALT_FUNDEF_MakeBufferResidentNV
typedef void (*PFNGLMAKEBUFFERRESIDENTNVPROC_ALT)(GLenum,GLenum);
static inline void glMakeBufferResidentNV(GLenum target1,GLenum access1)
{
	static PFNGLMAKEBUFFERRESIDENTNVPROC_ALT fn=(PFNGLMAKEBUFFERRESIDENTNVPROC_ALT)glaltGetProcAddressExtension("glMakeBufferResidentNV","GL_NV_shader_buffer_load");
	 fn(target1,access1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MakeNamedBufferNonResidentNV
#define GL_ALT_FUNDEF_MakeNamedBufferNonResidentNV
typedef void (*PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC_ALT)(GLuint);
static inline void glMakeNamedBufferNonResidentNV(GLuint buffer1)
{
	static PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC_ALT fn=(PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC_ALT)glaltGetProcAddressExtension("glMakeNamedBufferNonResidentNV","GL_NV_shader_buffer_load");
	 fn(buffer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MakeNamedBufferResidentNV
#define GL_ALT_FUNDEF_MakeNamedBufferResidentNV
typedef void (*PFNGLMAKENAMEDBUFFERRESIDENTNVPROC_ALT)(GLuint,GLenum);
static inline void glMakeNamedBufferResidentNV(GLuint buffer1,GLenum access1)
{
	static PFNGLMAKENAMEDBUFFERRESIDENTNVPROC_ALT fn=(PFNGLMAKENAMEDBUFFERRESIDENTNVPROC_ALT)glaltGetProcAddressExtension("glMakeNamedBufferResidentNV","GL_NV_shader_buffer_load");
	 fn(buffer1,access1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformui64NV
#define GL_ALT_FUNDEF_ProgramUniformui64NV
typedef void (*PFNGLPROGRAMUNIFORMUI64NVPROC_ALT)(GLuint,GLint,GLuint64EXT);
static inline void glProgramUniformui64NV(GLuint program1,GLint location1,GLuint64EXT value1)
{
	static PFNGLPROGRAMUNIFORMUI64NVPROC_ALT fn=(PFNGLPROGRAMUNIFORMUI64NVPROC_ALT)glaltGetProcAddressExtension("glProgramUniformui64NV","GL_NV_shader_buffer_load");
	 fn(program1,location1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramUniformui64vNV
#define GL_ALT_FUNDEF_ProgramUniformui64vNV
typedef void (*PFNGLPROGRAMUNIFORMUI64VNVPROC_ALT)(GLuint,GLint,GLsizei,const GLuint64EXT *);
static inline void glProgramUniformui64vNV(GLuint program1,GLint location1,GLsizei count1,const GLuint64EXT * value1)
{
	static PFNGLPROGRAMUNIFORMUI64VNVPROC_ALT fn=(PFNGLPROGRAMUNIFORMUI64VNVPROC_ALT)glaltGetProcAddressExtension("glProgramUniformui64vNV","GL_NV_shader_buffer_load");
	 fn(program1,location1,count1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniformui64NV
#define GL_ALT_FUNDEF_Uniformui64NV
typedef void (*PFNGLUNIFORMUI64NVPROC_ALT)(GLint,GLuint64EXT);
static inline void glUniformui64NV(GLint location1,GLuint64EXT value1)
{
	static PFNGLUNIFORMUI64NVPROC_ALT fn=(PFNGLUNIFORMUI64NVPROC_ALT)glaltGetProcAddressExtension("glUniformui64NV","GL_NV_shader_buffer_load");
	 fn(location1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Uniformui64vNV
#define GL_ALT_FUNDEF_Uniformui64vNV
typedef void (*PFNGLUNIFORMUI64VNVPROC_ALT)(GLint,GLsizei,const GLuint64EXT *);
static inline void glUniformui64vNV(GLint location1,GLsizei count1,const GLuint64EXT * value1)
{
	static PFNGLUNIFORMUI64VNVPROC_ALT fn=(PFNGLUNIFORMUI64VNVPROC_ALT)glaltGetProcAddressExtension("glUniformui64vNV","GL_NV_shader_buffer_load");
	 fn(location1,count1,value1);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_shader_buffer_store
#define GL_NV_shader_buffer_store
#ifndef GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV
#define GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV 0x00000010
#endif //GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV
#ifndef GL_WRITE_ONLY
#define GL_WRITE_ONLY 0x88B9
#endif //GL_WRITE_ONLY
#ifndef GL_READ_WRITE
#define GL_READ_WRITE 0x88BA
#endif //GL_READ_WRITE
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_shader_storage_buffer_object
#define GL_NV_shader_storage_buffer_object
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_shader_thread_group
#define GL_NV_shader_thread_group
#ifndef GL_WARP_SIZE_NV
#define GL_WARP_SIZE_NV 0x9339
#endif //GL_WARP_SIZE_NV
#ifndef GL_WARPS_PER_SM_NV
#define GL_WARPS_PER_SM_NV 0x933A
#endif //GL_WARPS_PER_SM_NV
#ifndef GL_SM_COUNT_NV
#define GL_SM_COUNT_NV 0x933B
#endif //GL_SM_COUNT_NV
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_shader_thread_shuffle
#define GL_NV_shader_thread_shuffle
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_tessellation_program5
#define GL_NV_tessellation_program5
#ifndef GL_MAX_PROGRAM_PATCH_ATTRIBS_NV
#define GL_MAX_PROGRAM_PATCH_ATTRIBS_NV 0x86D8
#endif //GL_MAX_PROGRAM_PATCH_ATTRIBS_NV
#ifndef GL_TESS_CONTROL_PROGRAM_NV
#define GL_TESS_CONTROL_PROGRAM_NV 0x891E
#endif //GL_TESS_CONTROL_PROGRAM_NV
#ifndef GL_TESS_EVALUATION_PROGRAM_NV
#define GL_TESS_EVALUATION_PROGRAM_NV 0x891F
#endif //GL_TESS_EVALUATION_PROGRAM_NV
#ifndef GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV
#define GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV 0x8C74
#endif //GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV
#ifndef GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV
#define GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV 0x8C75
#endif //GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_texgen_emboss
#define GL_NV_texgen_emboss
#ifndef GL_EMBOSS_LIGHT_NV
#define GL_EMBOSS_LIGHT_NV 0x855D
#endif //GL_EMBOSS_LIGHT_NV
#ifndef GL_EMBOSS_CONSTANT_NV
#define GL_EMBOSS_CONSTANT_NV 0x855E
#endif //GL_EMBOSS_CONSTANT_NV
#ifndef GL_EMBOSS_MAP_NV
#define GL_EMBOSS_MAP_NV 0x855F
#endif //GL_EMBOSS_MAP_NV
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_texgen_reflection
#define GL_NV_texgen_reflection
#ifndef GL_NORMAL_MAP_NV
#define GL_NORMAL_MAP_NV 0x8511
#endif //GL_NORMAL_MAP_NV
#ifndef GL_REFLECTION_MAP_NV
#define GL_REFLECTION_MAP_NV 0x8512
#endif //GL_REFLECTION_MAP_NV
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_texture_barrier
#define GL_NV_texture_barrier
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_TextureBarrierNV
#define GL_ALT_FUNDEF_TextureBarrierNV
typedef void (*PFNGLTEXTUREBARRIERNVPROC_ALT)();
static inline void glTextureBarrierNV()
{
	static PFNGLTEXTUREBARRIERNVPROC_ALT fn=(PFNGLTEXTUREBARRIERNVPROC_ALT)glaltGetProcAddressExtension("glTextureBarrierNV","GL_NV_texture_barrier");
	 fn();
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_texture_compression_vtc
#define GL_NV_texture_compression_vtc
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_texture_env_combine4
#define GL_NV_texture_env_combine4
#ifndef GL_COMBINE4_NV
#define GL_COMBINE4_NV 0x8503
#endif //GL_COMBINE4_NV
#ifndef GL_SOURCE3_RGB_NV
#define GL_SOURCE3_RGB_NV 0x8583
#endif //GL_SOURCE3_RGB_NV
#ifndef GL_SOURCE3_ALPHA_NV
#define GL_SOURCE3_ALPHA_NV 0x858B
#endif //GL_SOURCE3_ALPHA_NV
#ifndef GL_OPERAND3_RGB_NV
#define GL_OPERAND3_RGB_NV 0x8593
#endif //GL_OPERAND3_RGB_NV
#ifndef GL_OPERAND3_ALPHA_NV
#define GL_OPERAND3_ALPHA_NV 0x859B
#endif //GL_OPERAND3_ALPHA_NV
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_texture_expand_normal
#define GL_NV_texture_expand_normal
#ifndef GL_TEXTURE_UNSIGNED_REMAP_MODE_NV
#define GL_TEXTURE_UNSIGNED_REMAP_MODE_NV 0x888F
#endif //GL_TEXTURE_UNSIGNED_REMAP_MODE_NV
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_texture_multisample
#define GL_NV_texture_multisample
#ifndef GL_TEXTURE_COVERAGE_SAMPLES_NV
#define GL_TEXTURE_COVERAGE_SAMPLES_NV 0x9045
#endif //GL_TEXTURE_COVERAGE_SAMPLES_NV
#ifndef GL_TEXTURE_COLOR_SAMPLES_NV
#define GL_TEXTURE_COLOR_SAMPLES_NV 0x9046
#endif //GL_TEXTURE_COLOR_SAMPLES_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_TexImage2DMultisampleCoverageNV
#define GL_ALT_FUNDEF_TexImage2DMultisampleCoverageNV
typedef void (*PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC_ALT)(GLenum,GLsizei,GLsizei,GLint,GLsizei,GLsizei,GLboolean);
static inline void glTexImage2DMultisampleCoverageNV(GLenum target1,GLsizei coverageSamples1,GLsizei colorSamples1,GLint internalFormat1,GLsizei width1,GLsizei height1,GLboolean fixedSampleLocations1)
{
	static PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC_ALT fn=(PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC_ALT)glaltGetProcAddressExtension("glTexImage2DMultisampleCoverageNV","GL_NV_texture_multisample");
	 fn(target1,coverageSamples1,colorSamples1,internalFormat1,width1,height1,fixedSampleLocations1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexImage3DMultisampleCoverageNV
#define GL_ALT_FUNDEF_TexImage3DMultisampleCoverageNV
typedef void (*PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC_ALT)(GLenum,GLsizei,GLsizei,GLint,GLsizei,GLsizei,GLsizei,GLboolean);
static inline void glTexImage3DMultisampleCoverageNV(GLenum target1,GLsizei coverageSamples1,GLsizei colorSamples1,GLint internalFormat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLboolean fixedSampleLocations1)
{
	static PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC_ALT fn=(PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC_ALT)glaltGetProcAddressExtension("glTexImage3DMultisampleCoverageNV","GL_NV_texture_multisample");
	 fn(target1,coverageSamples1,colorSamples1,internalFormat1,width1,height1,depth1,fixedSampleLocations1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureImage2DMultisampleCoverageNV
#define GL_ALT_FUNDEF_TextureImage2DMultisampleCoverageNV
typedef void (*PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC_ALT)(GLuint,GLenum,GLsizei,GLsizei,GLint,GLsizei,GLsizei,GLboolean);
static inline void glTextureImage2DMultisampleCoverageNV(GLuint texture1,GLenum target1,GLsizei coverageSamples1,GLsizei colorSamples1,GLint internalFormat1,GLsizei width1,GLsizei height1,GLboolean fixedSampleLocations1)
{
	static PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC_ALT fn=(PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC_ALT)glaltGetProcAddressExtension("glTextureImage2DMultisampleCoverageNV","GL_NV_texture_multisample");
	 fn(texture1,target1,coverageSamples1,colorSamples1,internalFormat1,width1,height1,fixedSampleLocations1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureImage2DMultisampleNV
#define GL_ALT_FUNDEF_TextureImage2DMultisampleNV
typedef void (*PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC_ALT)(GLuint,GLenum,GLsizei,GLint,GLsizei,GLsizei,GLboolean);
static inline void glTextureImage2DMultisampleNV(GLuint texture1,GLenum target1,GLsizei samples1,GLint internalFormat1,GLsizei width1,GLsizei height1,GLboolean fixedSampleLocations1)
{
	static PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC_ALT fn=(PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC_ALT)glaltGetProcAddressExtension("glTextureImage2DMultisampleNV","GL_NV_texture_multisample");
	 fn(texture1,target1,samples1,internalFormat1,width1,height1,fixedSampleLocations1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureImage3DMultisampleCoverageNV
#define GL_ALT_FUNDEF_TextureImage3DMultisampleCoverageNV
typedef void (*PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC_ALT)(GLuint,GLenum,GLsizei,GLsizei,GLint,GLsizei,GLsizei,GLsizei,GLboolean);
static inline void glTextureImage3DMultisampleCoverageNV(GLuint texture1,GLenum target1,GLsizei coverageSamples1,GLsizei colorSamples1,GLint internalFormat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLboolean fixedSampleLocations1)
{
	static PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC_ALT fn=(PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC_ALT)glaltGetProcAddressExtension("glTextureImage3DMultisampleCoverageNV","GL_NV_texture_multisample");
	 fn(texture1,target1,coverageSamples1,colorSamples1,internalFormat1,width1,height1,depth1,fixedSampleLocations1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TextureImage3DMultisampleNV
#define GL_ALT_FUNDEF_TextureImage3DMultisampleNV
typedef void (*PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC_ALT)(GLuint,GLenum,GLsizei,GLint,GLsizei,GLsizei,GLsizei,GLboolean);
static inline void glTextureImage3DMultisampleNV(GLuint texture1,GLenum target1,GLsizei samples1,GLint internalFormat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLboolean fixedSampleLocations1)
{
	static PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC_ALT fn=(PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC_ALT)glaltGetProcAddressExtension("glTextureImage3DMultisampleNV","GL_NV_texture_multisample");
	 fn(texture1,target1,samples1,internalFormat1,width1,height1,depth1,fixedSampleLocations1);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_texture_rectangle
#define GL_NV_texture_rectangle
#ifndef GL_TEXTURE_RECTANGLE_NV
#define GL_TEXTURE_RECTANGLE_NV 0x84F5
#endif //GL_TEXTURE_RECTANGLE_NV
#ifndef GL_TEXTURE_BINDING_RECTANGLE_NV
#define GL_TEXTURE_BINDING_RECTANGLE_NV 0x84F6
#endif //GL_TEXTURE_BINDING_RECTANGLE_NV
#ifndef GL_PROXY_TEXTURE_RECTANGLE_NV
#define GL_PROXY_TEXTURE_RECTANGLE_NV 0x84F7
#endif //GL_PROXY_TEXTURE_RECTANGLE_NV
#ifndef GL_MAX_RECTANGLE_TEXTURE_SIZE_NV
#define GL_MAX_RECTANGLE_TEXTURE_SIZE_NV 0x84F8
#endif //GL_MAX_RECTANGLE_TEXTURE_SIZE_NV
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_texture_shader
#define GL_NV_texture_shader
#ifndef GL_OFFSET_TEXTURE_RECTANGLE_NV
#define GL_OFFSET_TEXTURE_RECTANGLE_NV 0x864C
#endif //GL_OFFSET_TEXTURE_RECTANGLE_NV
#ifndef GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV
#define GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV 0x864D
#endif //GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV
#ifndef GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV
#define GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV 0x864E
#endif //GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV
#ifndef GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
#define GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV 0x86D9
#endif //GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
#ifndef GL_UNSIGNED_INT_S8_S8_8_8_NV
#define GL_UNSIGNED_INT_S8_S8_8_8_NV 0x86DA
#endif //GL_UNSIGNED_INT_S8_S8_8_8_NV
#ifndef GL_UNSIGNED_INT_8_8_S8_S8_REV_NV
#define GL_UNSIGNED_INT_8_8_S8_S8_REV_NV 0x86DB
#endif //GL_UNSIGNED_INT_8_8_S8_S8_REV_NV
#ifndef GL_DSDT_MAG_INTENSITY_NV
#define GL_DSDT_MAG_INTENSITY_NV 0x86DC
#endif //GL_DSDT_MAG_INTENSITY_NV
#ifndef GL_SHADER_CONSISTENT_NV
#define GL_SHADER_CONSISTENT_NV 0x86DD
#endif //GL_SHADER_CONSISTENT_NV
#ifndef GL_TEXTURE_SHADER_NV
#define GL_TEXTURE_SHADER_NV 0x86DE
#endif //GL_TEXTURE_SHADER_NV
#ifndef GL_SHADER_OPERATION_NV
#define GL_SHADER_OPERATION_NV 0x86DF
#endif //GL_SHADER_OPERATION_NV
#ifndef GL_CULL_MODES_NV
#define GL_CULL_MODES_NV 0x86E0
#endif //GL_CULL_MODES_NV
#ifndef GL_OFFSET_TEXTURE_MATRIX_NV
#define GL_OFFSET_TEXTURE_MATRIX_NV 0x86E1
#endif //GL_OFFSET_TEXTURE_MATRIX_NV
#ifndef GL_OFFSET_TEXTURE_2D_MATRIX_NV
#define GL_OFFSET_TEXTURE_2D_MATRIX_NV 0x86E1
#endif //GL_OFFSET_TEXTURE_2D_MATRIX_NV
#ifndef GL_OFFSET_TEXTURE_2D_SCALE_NV
#define GL_OFFSET_TEXTURE_2D_SCALE_NV 0x86E2
#endif //GL_OFFSET_TEXTURE_2D_SCALE_NV
#ifndef GL_OFFSET_TEXTURE_SCALE_NV
#define GL_OFFSET_TEXTURE_SCALE_NV 0x86E2
#endif //GL_OFFSET_TEXTURE_SCALE_NV
#ifndef GL_OFFSET_TEXTURE_2D_BIAS_NV
#define GL_OFFSET_TEXTURE_2D_BIAS_NV 0x86E3
#endif //GL_OFFSET_TEXTURE_2D_BIAS_NV
#ifndef GL_OFFSET_TEXTURE_BIAS_NV
#define GL_OFFSET_TEXTURE_BIAS_NV 0x86E3
#endif //GL_OFFSET_TEXTURE_BIAS_NV
#ifndef GL_PREVIOUS_TEXTURE_INPUT_NV
#define GL_PREVIOUS_TEXTURE_INPUT_NV 0x86E4
#endif //GL_PREVIOUS_TEXTURE_INPUT_NV
#ifndef GL_CONST_EYE_NV
#define GL_CONST_EYE_NV 0x86E5
#endif //GL_CONST_EYE_NV
#ifndef GL_PASS_THROUGH_NV
#define GL_PASS_THROUGH_NV 0x86E6
#endif //GL_PASS_THROUGH_NV
#ifndef GL_CULL_FRAGMENT_NV
#define GL_CULL_FRAGMENT_NV 0x86E7
#endif //GL_CULL_FRAGMENT_NV
#ifndef GL_OFFSET_TEXTURE_2D_NV
#define GL_OFFSET_TEXTURE_2D_NV 0x86E8
#endif //GL_OFFSET_TEXTURE_2D_NV
#ifndef GL_DEPENDENT_AR_TEXTURE_2D_NV
#define GL_DEPENDENT_AR_TEXTURE_2D_NV 0x86E9
#endif //GL_DEPENDENT_AR_TEXTURE_2D_NV
#ifndef GL_DEPENDENT_GB_TEXTURE_2D_NV
#define GL_DEPENDENT_GB_TEXTURE_2D_NV 0x86EA
#endif //GL_DEPENDENT_GB_TEXTURE_2D_NV
#ifndef GL_DOT_PRODUCT_NV
#define GL_DOT_PRODUCT_NV 0x86EC
#endif //GL_DOT_PRODUCT_NV
#ifndef GL_DOT_PRODUCT_DEPTH_REPLACE_NV
#define GL_DOT_PRODUCT_DEPTH_REPLACE_NV 0x86ED
#endif //GL_DOT_PRODUCT_DEPTH_REPLACE_NV
#ifndef GL_DOT_PRODUCT_TEXTURE_2D_NV
#define GL_DOT_PRODUCT_TEXTURE_2D_NV 0x86EE
#endif //GL_DOT_PRODUCT_TEXTURE_2D_NV
#ifndef GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
#define GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV 0x86F0
#endif //GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
#ifndef GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV
#define GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV 0x86F1
#endif //GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV
#ifndef GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV
#define GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV 0x86F2
#endif //GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV
#ifndef GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
#define GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV 0x86F3
#endif //GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
#ifndef GL_HILO_NV
#define GL_HILO_NV 0x86F4
#endif //GL_HILO_NV
#ifndef GL_DSDT_NV
#define GL_DSDT_NV 0x86F5
#endif //GL_DSDT_NV
#ifndef GL_DSDT_MAG_NV
#define GL_DSDT_MAG_NV 0x86F6
#endif //GL_DSDT_MAG_NV
#ifndef GL_DSDT_MAG_VIB_NV
#define GL_DSDT_MAG_VIB_NV 0x86F7
#endif //GL_DSDT_MAG_VIB_NV
#ifndef GL_HILO16_NV
#define GL_HILO16_NV 0x86F8
#endif //GL_HILO16_NV
#ifndef GL_SIGNED_HILO_NV
#define GL_SIGNED_HILO_NV 0x86F9
#endif //GL_SIGNED_HILO_NV
#ifndef GL_SIGNED_HILO16_NV
#define GL_SIGNED_HILO16_NV 0x86FA
#endif //GL_SIGNED_HILO16_NV
#ifndef GL_SIGNED_RGBA_NV
#define GL_SIGNED_RGBA_NV 0x86FB
#endif //GL_SIGNED_RGBA_NV
#ifndef GL_SIGNED_RGBA8_NV
#define GL_SIGNED_RGBA8_NV 0x86FC
#endif //GL_SIGNED_RGBA8_NV
#ifndef GL_SIGNED_RGB_NV
#define GL_SIGNED_RGB_NV 0x86FE
#endif //GL_SIGNED_RGB_NV
#ifndef GL_SIGNED_RGB8_NV
#define GL_SIGNED_RGB8_NV 0x86FF
#endif //GL_SIGNED_RGB8_NV
#ifndef GL_SIGNED_LUMINANCE_NV
#define GL_SIGNED_LUMINANCE_NV 0x8701
#endif //GL_SIGNED_LUMINANCE_NV
#ifndef GL_SIGNED_LUMINANCE8_NV
#define GL_SIGNED_LUMINANCE8_NV 0x8702
#endif //GL_SIGNED_LUMINANCE8_NV
#ifndef GL_SIGNED_LUMINANCE_ALPHA_NV
#define GL_SIGNED_LUMINANCE_ALPHA_NV 0x8703
#endif //GL_SIGNED_LUMINANCE_ALPHA_NV
#ifndef GL_SIGNED_LUMINANCE8_ALPHA8_NV
#define GL_SIGNED_LUMINANCE8_ALPHA8_NV 0x8704
#endif //GL_SIGNED_LUMINANCE8_ALPHA8_NV
#ifndef GL_SIGNED_ALPHA_NV
#define GL_SIGNED_ALPHA_NV 0x8705
#endif //GL_SIGNED_ALPHA_NV
#ifndef GL_SIGNED_ALPHA8_NV
#define GL_SIGNED_ALPHA8_NV 0x8706
#endif //GL_SIGNED_ALPHA8_NV
#ifndef GL_SIGNED_INTENSITY_NV
#define GL_SIGNED_INTENSITY_NV 0x8707
#endif //GL_SIGNED_INTENSITY_NV
#ifndef GL_SIGNED_INTENSITY8_NV
#define GL_SIGNED_INTENSITY8_NV 0x8708
#endif //GL_SIGNED_INTENSITY8_NV
#ifndef GL_DSDT8_NV
#define GL_DSDT8_NV 0x8709
#endif //GL_DSDT8_NV
#ifndef GL_DSDT8_MAG8_NV
#define GL_DSDT8_MAG8_NV 0x870A
#endif //GL_DSDT8_MAG8_NV
#ifndef GL_DSDT8_MAG8_INTENSITY8_NV
#define GL_DSDT8_MAG8_INTENSITY8_NV 0x870B
#endif //GL_DSDT8_MAG8_INTENSITY8_NV
#ifndef GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
#define GL_SIGNED_RGB_UNSIGNED_ALPHA_NV 0x870C
#endif //GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
#ifndef GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
#define GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV 0x870D
#endif //GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
#ifndef GL_HI_SCALE_NV
#define GL_HI_SCALE_NV 0x870E
#endif //GL_HI_SCALE_NV
#ifndef GL_LO_SCALE_NV
#define GL_LO_SCALE_NV 0x870F
#endif //GL_LO_SCALE_NV
#ifndef GL_DS_SCALE_NV
#define GL_DS_SCALE_NV 0x8710
#endif //GL_DS_SCALE_NV
#ifndef GL_DT_SCALE_NV
#define GL_DT_SCALE_NV 0x8711
#endif //GL_DT_SCALE_NV
#ifndef GL_MAGNITUDE_SCALE_NV
#define GL_MAGNITUDE_SCALE_NV 0x8712
#endif //GL_MAGNITUDE_SCALE_NV
#ifndef GL_VIBRANCE_SCALE_NV
#define GL_VIBRANCE_SCALE_NV 0x8713
#endif //GL_VIBRANCE_SCALE_NV
#ifndef GL_HI_BIAS_NV
#define GL_HI_BIAS_NV 0x8714
#endif //GL_HI_BIAS_NV
#ifndef GL_LO_BIAS_NV
#define GL_LO_BIAS_NV 0x8715
#endif //GL_LO_BIAS_NV
#ifndef GL_DS_BIAS_NV
#define GL_DS_BIAS_NV 0x8716
#endif //GL_DS_BIAS_NV
#ifndef GL_DT_BIAS_NV
#define GL_DT_BIAS_NV 0x8717
#endif //GL_DT_BIAS_NV
#ifndef GL_MAGNITUDE_BIAS_NV
#define GL_MAGNITUDE_BIAS_NV 0x8718
#endif //GL_MAGNITUDE_BIAS_NV
#ifndef GL_VIBRANCE_BIAS_NV
#define GL_VIBRANCE_BIAS_NV 0x8719
#endif //GL_VIBRANCE_BIAS_NV
#ifndef GL_TEXTURE_BORDER_VALUES_NV
#define GL_TEXTURE_BORDER_VALUES_NV 0x871A
#endif //GL_TEXTURE_BORDER_VALUES_NV
#ifndef GL_TEXTURE_HI_SIZE_NV
#define GL_TEXTURE_HI_SIZE_NV 0x871B
#endif //GL_TEXTURE_HI_SIZE_NV
#ifndef GL_TEXTURE_LO_SIZE_NV
#define GL_TEXTURE_LO_SIZE_NV 0x871C
#endif //GL_TEXTURE_LO_SIZE_NV
#ifndef GL_TEXTURE_DS_SIZE_NV
#define GL_TEXTURE_DS_SIZE_NV 0x871D
#endif //GL_TEXTURE_DS_SIZE_NV
#ifndef GL_TEXTURE_DT_SIZE_NV
#define GL_TEXTURE_DT_SIZE_NV 0x871E
#endif //GL_TEXTURE_DT_SIZE_NV
#ifndef GL_TEXTURE_MAG_SIZE_NV
#define GL_TEXTURE_MAG_SIZE_NV 0x871F
#endif //GL_TEXTURE_MAG_SIZE_NV
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_texture_shader2
#define GL_NV_texture_shader2
#ifndef GL_DOT_PRODUCT_TEXTURE_3D_NV
#define GL_DOT_PRODUCT_TEXTURE_3D_NV 0x86EF
#endif //GL_DOT_PRODUCT_TEXTURE_3D_NV
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_texture_shader3
#define GL_NV_texture_shader3
#ifndef GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV
#define GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV 0x8850
#endif //GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV
#ifndef GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV
#define GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV 0x8851
#endif //GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV
#ifndef GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV
#define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8852
#endif //GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV
#ifndef GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV
#define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV 0x8853
#endif //GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV
#ifndef GL_OFFSET_HILO_TEXTURE_2D_NV
#define GL_OFFSET_HILO_TEXTURE_2D_NV 0x8854
#endif //GL_OFFSET_HILO_TEXTURE_2D_NV
#ifndef GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV
#define GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV 0x8855
#endif //GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV
#ifndef GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV
#define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV 0x8856
#endif //GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV
#ifndef GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV
#define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8857
#endif //GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV
#ifndef GL_DEPENDENT_HILO_TEXTURE_2D_NV
#define GL_DEPENDENT_HILO_TEXTURE_2D_NV 0x8858
#endif //GL_DEPENDENT_HILO_TEXTURE_2D_NV
#ifndef GL_DEPENDENT_RGB_TEXTURE_3D_NV
#define GL_DEPENDENT_RGB_TEXTURE_3D_NV 0x8859
#endif //GL_DEPENDENT_RGB_TEXTURE_3D_NV
#ifndef GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV
#define GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV 0x885A
#endif //GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV
#ifndef GL_DOT_PRODUCT_PASS_THROUGH_NV
#define GL_DOT_PRODUCT_PASS_THROUGH_NV 0x885B
#endif //GL_DOT_PRODUCT_PASS_THROUGH_NV
#ifndef GL_DOT_PRODUCT_TEXTURE_1D_NV
#define GL_DOT_PRODUCT_TEXTURE_1D_NV 0x885C
#endif //GL_DOT_PRODUCT_TEXTURE_1D_NV
#ifndef GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV
#define GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV 0x885D
#endif //GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV
#ifndef GL_HILO8_NV
#define GL_HILO8_NV 0x885E
#endif //GL_HILO8_NV
#ifndef GL_SIGNED_HILO8_NV
#define GL_SIGNED_HILO8_NV 0x885F
#endif //GL_SIGNED_HILO8_NV
#ifndef GL_FORCE_BLUE_TO_ONE_NV
#define GL_FORCE_BLUE_TO_ONE_NV 0x8860
#endif //GL_FORCE_BLUE_TO_ONE_NV
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_transform_feedback
#define GL_NV_transform_feedback
#ifndef GL_NEXT_BUFFER_NV
#define GL_NEXT_BUFFER_NV -2
#endif //GL_NEXT_BUFFER_NV
#ifndef GL_SKIP_COMPONENTS4_NV
#define GL_SKIP_COMPONENTS4_NV -3
#endif //GL_SKIP_COMPONENTS4_NV
#ifndef GL_SKIP_COMPONENTS3_NV
#define GL_SKIP_COMPONENTS3_NV -4
#endif //GL_SKIP_COMPONENTS3_NV
#ifndef GL_SKIP_COMPONENTS2_NV
#define GL_SKIP_COMPONENTS2_NV -5
#endif //GL_SKIP_COMPONENTS2_NV
#ifndef GL_SKIP_COMPONENTS1_NV
#define GL_SKIP_COMPONENTS1_NV -6
#endif //GL_SKIP_COMPONENTS1_NV
#ifndef GL_BACK_PRIMARY_COLOR_NV
#define GL_BACK_PRIMARY_COLOR_NV 0x8C77
#endif //GL_BACK_PRIMARY_COLOR_NV
#ifndef GL_BACK_SECONDARY_COLOR_NV
#define GL_BACK_SECONDARY_COLOR_NV 0x8C78
#endif //GL_BACK_SECONDARY_COLOR_NV
#ifndef GL_TEXTURE_COORD_NV
#define GL_TEXTURE_COORD_NV 0x8C79
#endif //GL_TEXTURE_COORD_NV
#ifndef GL_CLIP_DISTANCE_NV
#define GL_CLIP_DISTANCE_NV 0x8C7A
#endif //GL_CLIP_DISTANCE_NV
#ifndef GL_VERTEX_ID_NV
#define GL_VERTEX_ID_NV 0x8C7B
#endif //GL_VERTEX_ID_NV
#ifndef GL_PRIMITIVE_ID_NV
#define GL_PRIMITIVE_ID_NV 0x8C7C
#endif //GL_PRIMITIVE_ID_NV
#ifndef GL_GENERIC_ATTRIB_NV
#define GL_GENERIC_ATTRIB_NV 0x8C7D
#endif //GL_GENERIC_ATTRIB_NV
#ifndef GL_TRANSFORM_FEEDBACK_ATTRIBS_NV
#define GL_TRANSFORM_FEEDBACK_ATTRIBS_NV 0x8C7E
#endif //GL_TRANSFORM_FEEDBACK_ATTRIBS_NV
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV 0x8C7F
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV
#ifndef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV 0x8C80
#endif //GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV
#ifndef GL_ACTIVE_VARYINGS_NV
#define GL_ACTIVE_VARYINGS_NV 0x8C81
#endif //GL_ACTIVE_VARYINGS_NV
#ifndef GL_ACTIVE_VARYING_MAX_LENGTH_NV
#define GL_ACTIVE_VARYING_MAX_LENGTH_NV 0x8C82
#endif //GL_ACTIVE_VARYING_MAX_LENGTH_NV
#ifndef GL_TRANSFORM_FEEDBACK_VARYINGS_NV
#define GL_TRANSFORM_FEEDBACK_VARYINGS_NV 0x8C83
#endif //GL_TRANSFORM_FEEDBACK_VARYINGS_NV
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_START_NV
#define GL_TRANSFORM_FEEDBACK_BUFFER_START_NV 0x8C84
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_START_NV
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV 0x8C85
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV
#ifndef GL_TRANSFORM_FEEDBACK_RECORD_NV
#define GL_TRANSFORM_FEEDBACK_RECORD_NV 0x8C86
#endif //GL_TRANSFORM_FEEDBACK_RECORD_NV
#ifndef GL_PRIMITIVES_GENERATED_NV
#define GL_PRIMITIVES_GENERATED_NV 0x8C87
#endif //GL_PRIMITIVES_GENERATED_NV
#ifndef GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV 0x8C88
#endif //GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV
#ifndef GL_RASTERIZER_DISCARD_NV
#define GL_RASTERIZER_DISCARD_NV 0x8C89
#endif //GL_RASTERIZER_DISCARD_NV
#ifndef GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV 0x8C8A
#endif //GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV
#ifndef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV 0x8C8B
#endif //GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV
#ifndef GL_INTERLEAVED_ATTRIBS_NV
#define GL_INTERLEAVED_ATTRIBS_NV 0x8C8C
#endif //GL_INTERLEAVED_ATTRIBS_NV
#ifndef GL_SEPARATE_ATTRIBS_NV
#define GL_SEPARATE_ATTRIBS_NV 0x8C8D
#endif //GL_SEPARATE_ATTRIBS_NV
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_NV
#define GL_TRANSFORM_FEEDBACK_BUFFER_NV 0x8C8E
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_NV
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV 0x8C8F
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV
#ifndef GL_LAYER_NV
#define GL_LAYER_NV 0x8DAA
#endif //GL_LAYER_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ActiveVaryingNV
#define GL_ALT_FUNDEF_ActiveVaryingNV
typedef void (*PFNGLACTIVEVARYINGNVPROC_ALT)(GLuint,const GLchar *);
static inline void glActiveVaryingNV(GLuint program1,const GLchar * name1)
{
	static PFNGLACTIVEVARYINGNVPROC_ALT fn=(PFNGLACTIVEVARYINGNVPROC_ALT)glaltGetProcAddressExtension("glActiveVaryingNV","GL_NV_transform_feedback");
	 fn(program1,name1);
}
#endif

#ifndef	GL_ALT_FUNDEF_BeginTransformFeedbackNV
#define GL_ALT_FUNDEF_BeginTransformFeedbackNV
typedef void (*PFNGLBEGINTRANSFORMFEEDBACKNVPROC_ALT)(GLenum);
static inline void glBeginTransformFeedbackNV(GLenum primitiveMode1)
{
	static PFNGLBEGINTRANSFORMFEEDBACKNVPROC_ALT fn=(PFNGLBEGINTRANSFORMFEEDBACKNVPROC_ALT)glaltGetProcAddressExtension("glBeginTransformFeedbackNV","GL_NV_transform_feedback");
	 fn(primitiveMode1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_BindBufferBaseNV
#define GL_ALT_FUNDEF_BindBufferBaseNV
typedef void (*PFNGLBINDBUFFERBASENVPROC_ALT)(GLenum,GLuint,GLuint);
static inline void glBindBufferBaseNV(GLenum target1,GLuint index1,GLuint buffer1)
{
	static PFNGLBINDBUFFERBASENVPROC_ALT fn=(PFNGLBINDBUFFERBASENVPROC_ALT)glaltGetProcAddressExtension("glBindBufferBaseNV","GL_NV_transform_feedback");
	 fn(target1,index1,buffer1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_BindBufferOffsetNV
#define GL_ALT_FUNDEF_BindBufferOffsetNV
typedef void (*PFNGLBINDBUFFEROFFSETNVPROC_ALT)(GLenum,GLuint,GLuint,GLintptr);
static inline void glBindBufferOffsetNV(GLenum target1,GLuint index1,GLuint buffer1,GLintptr offset1)
{
	static PFNGLBINDBUFFEROFFSETNVPROC_ALT fn=(PFNGLBINDBUFFEROFFSETNVPROC_ALT)glaltGetProcAddressExtension("glBindBufferOffsetNV","GL_NV_transform_feedback");
	 fn(target1,index1,buffer1,offset1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_BindBufferRangeNV
#define GL_ALT_FUNDEF_BindBufferRangeNV
typedef void (*PFNGLBINDBUFFERRANGENVPROC_ALT)(GLenum,GLuint,GLuint,GLintptr,GLsizeiptr);
static inline void glBindBufferRangeNV(GLenum target1,GLuint index1,GLuint buffer1,GLintptr offset1,GLsizeiptr size1)
{
	static PFNGLBINDBUFFERRANGENVPROC_ALT fn=(PFNGLBINDBUFFERRANGENVPROC_ALT)glaltGetProcAddressExtension("glBindBufferRangeNV","GL_NV_transform_feedback");
	 fn(target1,index1,buffer1,offset1,size1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_EndTransformFeedbackNV
#define GL_ALT_FUNDEF_EndTransformFeedbackNV
typedef void (*PFNGLENDTRANSFORMFEEDBACKNVPROC_ALT)();
static inline void glEndTransformFeedbackNV()
{
	static PFNGLENDTRANSFORMFEEDBACKNVPROC_ALT fn=(PFNGLENDTRANSFORMFEEDBACKNVPROC_ALT)glaltGetProcAddressExtension("glEndTransformFeedbackNV","GL_NV_transform_feedback");
	 fn();
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetActiveVaryingNV
#define GL_ALT_FUNDEF_GetActiveVaryingNV
typedef void (*PFNGLGETACTIVEVARYINGNVPROC_ALT)(GLuint,GLuint,GLsizei,GLsizei *,GLsizei *,GLenum *,GLchar *);
static inline void glGetActiveVaryingNV(GLuint program1,GLuint index1,GLsizei bufSize1,GLsizei * length1,GLsizei * size1,GLenum * type1,GLchar * name1)
{
	static PFNGLGETACTIVEVARYINGNVPROC_ALT fn=(PFNGLGETACTIVEVARYINGNVPROC_ALT)glaltGetProcAddressExtension("glGetActiveVaryingNV","GL_NV_transform_feedback");
	 fn(program1,index1,bufSize1,length1,size1,type1,name1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetTransformFeedbackVaryingNV
#define GL_ALT_FUNDEF_GetTransformFeedbackVaryingNV
typedef void (*PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC_ALT)(GLuint,GLuint,GLint *);
static inline void glGetTransformFeedbackVaryingNV(GLuint program1,GLuint index1,GLint * location1)
{
	static PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC_ALT fn=(PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC_ALT)glaltGetProcAddressExtension("glGetTransformFeedbackVaryingNV","GL_NV_transform_feedback");
	 fn(program1,index1,location1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetVaryingLocationNV
#define GL_ALT_FUNDEF_GetVaryingLocationNV
typedef GLint (*PFNGLGETVARYINGLOCATIONNVPROC_ALT)(GLuint,const GLchar *);
static inline GLint glGetVaryingLocationNV(GLuint program1,const GLchar * name1)
{
	static PFNGLGETVARYINGLOCATIONNVPROC_ALT fn=(PFNGLGETVARYINGLOCATIONNVPROC_ALT)glaltGetProcAddressExtension("glGetVaryingLocationNV","GL_NV_transform_feedback");
	return fn(program1,name1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TransformFeedbackAttribsNV
#define GL_ALT_FUNDEF_TransformFeedbackAttribsNV
typedef void (*PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC_ALT)(GLsizei,const GLint *,GLenum);
static inline void glTransformFeedbackAttribsNV(GLsizei count1,const GLint * attribs1,GLenum bufferMode1)
{
	static PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC_ALT fn=(PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC_ALT)glaltGetProcAddressExtension("glTransformFeedbackAttribsNV","GL_NV_transform_feedback");
	 fn(count1,attribs1,bufferMode1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TransformFeedbackStreamAttribsNV
#define GL_ALT_FUNDEF_TransformFeedbackStreamAttribsNV
typedef void (*PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC_ALT)(GLsizei,const GLint *,GLsizei,const GLint *,GLenum);
static inline void glTransformFeedbackStreamAttribsNV(GLsizei count1,const GLint * attribs1,GLsizei nbuffers1,const GLint * bufstreams1,GLenum bufferMode1)
{
	static PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC_ALT fn=(PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC_ALT)glaltGetProcAddressExtension("glTransformFeedbackStreamAttribsNV","GL_NV_transform_feedback");
	 fn(count1,attribs1,nbuffers1,bufstreams1,bufferMode1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TransformFeedbackVaryingsNV
#define GL_ALT_FUNDEF_TransformFeedbackVaryingsNV
typedef void (*PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC_ALT)(GLuint,GLsizei,const GLint *,GLenum);
static inline void glTransformFeedbackVaryingsNV(GLuint program1,GLsizei count1,const GLint * locations1,GLenum bufferMode1)
{
	static PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC_ALT fn=(PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC_ALT)glaltGetProcAddressExtension("glTransformFeedbackVaryingsNV","GL_NV_transform_feedback");
	 fn(program1,count1,locations1,bufferMode1);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_transform_feedback2
#define GL_NV_transform_feedback2
#ifndef GL_TRANSFORM_FEEDBACK_NV
#define GL_TRANSFORM_FEEDBACK_NV 0x8E22
#endif //GL_TRANSFORM_FEEDBACK_NV
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV 0x8E23
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV 0x8E24
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV
#ifndef GL_TRANSFORM_FEEDBACK_BINDING_NV
#define GL_TRANSFORM_FEEDBACK_BINDING_NV 0x8E25
#endif //GL_TRANSFORM_FEEDBACK_BINDING_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BindTransformFeedbackNV
#define GL_ALT_FUNDEF_BindTransformFeedbackNV
typedef void (*PFNGLBINDTRANSFORMFEEDBACKNVPROC_ALT)(GLenum,GLuint);
static inline void glBindTransformFeedbackNV(GLenum target1,GLuint id1)
{
	static PFNGLBINDTRANSFORMFEEDBACKNVPROC_ALT fn=(PFNGLBINDTRANSFORMFEEDBACKNVPROC_ALT)glaltGetProcAddressExtension("glBindTransformFeedbackNV","GL_NV_transform_feedback2");
	 fn(target1,id1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DeleteTransformFeedbacksNV
#define GL_ALT_FUNDEF_DeleteTransformFeedbacksNV
typedef void (*PFNGLDELETETRANSFORMFEEDBACKSNVPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteTransformFeedbacksNV(GLsizei n1,const GLuint * ids1)
{
	static PFNGLDELETETRANSFORMFEEDBACKSNVPROC_ALT fn=(PFNGLDELETETRANSFORMFEEDBACKSNVPROC_ALT)glaltGetProcAddressExtension("glDeleteTransformFeedbacksNV","GL_NV_transform_feedback2");
	 fn(n1,ids1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_DrawTransformFeedbackNV
#define GL_ALT_FUNDEF_DrawTransformFeedbackNV
typedef void (*PFNGLDRAWTRANSFORMFEEDBACKNVPROC_ALT)(GLenum,GLuint);
static inline void glDrawTransformFeedbackNV(GLenum mode1,GLuint id1)
{
	static PFNGLDRAWTRANSFORMFEEDBACKNVPROC_ALT fn=(PFNGLDRAWTRANSFORMFEEDBACKNVPROC_ALT)glaltGetProcAddressExtension("glDrawTransformFeedbackNV","GL_NV_transform_feedback2");
	 fn(mode1,id1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GenTransformFeedbacksNV
#define GL_ALT_FUNDEF_GenTransformFeedbacksNV
typedef void (*PFNGLGENTRANSFORMFEEDBACKSNVPROC_ALT)(GLsizei,GLuint *);
static inline void glGenTransformFeedbacksNV(GLsizei n1,GLuint * ids1)
{
	static PFNGLGENTRANSFORMFEEDBACKSNVPROC_ALT fn=(PFNGLGENTRANSFORMFEEDBACKSNVPROC_ALT)glaltGetProcAddressExtension("glGenTransformFeedbacksNV","GL_NV_transform_feedback2");
	 fn(n1,ids1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_IsTransformFeedbackNV
#define GL_ALT_FUNDEF_IsTransformFeedbackNV
typedef GLboolean (*PFNGLISTRANSFORMFEEDBACKNVPROC_ALT)(GLuint);
static inline GLboolean glIsTransformFeedbackNV(GLuint id1)
{
	static PFNGLISTRANSFORMFEEDBACKNVPROC_ALT fn=(PFNGLISTRANSFORMFEEDBACKNVPROC_ALT)glaltGetProcAddressExtension("glIsTransformFeedbackNV","GL_NV_transform_feedback2");
	return fn(id1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_PauseTransformFeedbackNV
#define GL_ALT_FUNDEF_PauseTransformFeedbackNV
typedef void (*PFNGLPAUSETRANSFORMFEEDBACKNVPROC_ALT)();
static inline void glPauseTransformFeedbackNV()
{
	static PFNGLPAUSETRANSFORMFEEDBACKNVPROC_ALT fn=(PFNGLPAUSETRANSFORMFEEDBACKNVPROC_ALT)glaltGetProcAddressExtension("glPauseTransformFeedbackNV","GL_NV_transform_feedback2");
	 fn();
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ResumeTransformFeedbackNV
#define GL_ALT_FUNDEF_ResumeTransformFeedbackNV
typedef void (*PFNGLRESUMETRANSFORMFEEDBACKNVPROC_ALT)();
static inline void glResumeTransformFeedbackNV()
{
	static PFNGLRESUMETRANSFORMFEEDBACKNVPROC_ALT fn=(PFNGLRESUMETRANSFORMFEEDBACKNVPROC_ALT)glaltGetProcAddressExtension("glResumeTransformFeedbackNV","GL_NV_transform_feedback2");
	 fn();
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_NV_uniform_buffer_unified_memory
#define GL_NV_uniform_buffer_unified_memory
#ifndef GL_UNIFORM_BUFFER_UNIFIED_NV
#define GL_UNIFORM_BUFFER_UNIFIED_NV 0x936E
#endif //GL_UNIFORM_BUFFER_UNIFIED_NV
#ifndef GL_UNIFORM_BUFFER_ADDRESS_NV
#define GL_UNIFORM_BUFFER_ADDRESS_NV 0x936F
#endif //GL_UNIFORM_BUFFER_ADDRESS_NV
#ifndef GL_UNIFORM_BUFFER_LENGTH_NV
#define GL_UNIFORM_BUFFER_LENGTH_NV 0x9370
#endif //GL_UNIFORM_BUFFER_LENGTH_NV
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_vdpau_interop
#define GL_NV_vdpau_interop
#ifndef GL_SURFACE_STATE_NV
#define GL_SURFACE_STATE_NV 0x86EB
#endif //GL_SURFACE_STATE_NV
#ifndef GL_SURFACE_REGISTERED_NV
#define GL_SURFACE_REGISTERED_NV 0x86FD
#endif //GL_SURFACE_REGISTERED_NV
#ifndef GL_SURFACE_MAPPED_NV
#define GL_SURFACE_MAPPED_NV 0x8700
#endif //GL_SURFACE_MAPPED_NV
#ifndef GL_WRITE_DISCARD_NV
#define GL_WRITE_DISCARD_NV 0x88BE
#endif //GL_WRITE_DISCARD_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_VDPAUFiniNV
#define GL_ALT_FUNDEF_VDPAUFiniNV
typedef void (*PFNGLVDPAUFININVPROC_ALT)();
static inline void glVDPAUFiniNV()
{
	static PFNGLVDPAUFININVPROC_ALT fn=(PFNGLVDPAUFININVPROC_ALT)glaltGetProcAddressExtension("glVDPAUFiniNV","GL_NV_vdpau_interop");
	 fn();
}
#endif

#ifndef	GL_ALT_FUNDEF_VDPAUGetSurfaceivNV
#define GL_ALT_FUNDEF_VDPAUGetSurfaceivNV
typedef void (*PFNGLVDPAUGETSURFACEIVNVPROC_ALT)(GLvdpauSurfaceNV,GLenum,GLsizei,GLsizei *,GLint *);
static inline void glVDPAUGetSurfaceivNV(GLvdpauSurfaceNV surface1,GLenum pname1,GLsizei bufSize1,GLsizei * length1,GLint * values1)
{
	static PFNGLVDPAUGETSURFACEIVNVPROC_ALT fn=(PFNGLVDPAUGETSURFACEIVNVPROC_ALT)glaltGetProcAddressExtension("glVDPAUGetSurfaceivNV","GL_NV_vdpau_interop");
	 fn(surface1,pname1,bufSize1,length1,values1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VDPAUInitNV
#define GL_ALT_FUNDEF_VDPAUInitNV
typedef void (*PFNGLVDPAUINITNVPROC_ALT)(const void *,const void *);
static inline void glVDPAUInitNV(const void * vdpDevice1,const void * getProcAddress1)
{
	static PFNGLVDPAUINITNVPROC_ALT fn=(PFNGLVDPAUINITNVPROC_ALT)glaltGetProcAddressExtension("glVDPAUInitNV","GL_NV_vdpau_interop");
	 fn(vdpDevice1,getProcAddress1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VDPAUIsSurfaceNV
#define GL_ALT_FUNDEF_VDPAUIsSurfaceNV
typedef GLboolean (*PFNGLVDPAUISSURFACENVPROC_ALT)(GLvdpauSurfaceNV);
static inline GLboolean glVDPAUIsSurfaceNV(GLvdpauSurfaceNV surface1)
{
	static PFNGLVDPAUISSURFACENVPROC_ALT fn=(PFNGLVDPAUISSURFACENVPROC_ALT)glaltGetProcAddressExtension("glVDPAUIsSurfaceNV","GL_NV_vdpau_interop");
	return fn(surface1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VDPAUMapSurfacesNV
#define GL_ALT_FUNDEF_VDPAUMapSurfacesNV
typedef void (*PFNGLVDPAUMAPSURFACESNVPROC_ALT)(GLsizei,const GLvdpauSurfaceNV *);
static inline void glVDPAUMapSurfacesNV(GLsizei numSurfaces1,const GLvdpauSurfaceNV * surfaces1)
{
	static PFNGLVDPAUMAPSURFACESNVPROC_ALT fn=(PFNGLVDPAUMAPSURFACESNVPROC_ALT)glaltGetProcAddressExtension("glVDPAUMapSurfacesNV","GL_NV_vdpau_interop");
	 fn(numSurfaces1,surfaces1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VDPAURegisterOutputSurfaceNV
#define GL_ALT_FUNDEF_VDPAURegisterOutputSurfaceNV
typedef GLvdpauSurfaceNV (*PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC_ALT)(const void *,GLenum,GLsizei,const GLuint *);
static inline GLvdpauSurfaceNV glVDPAURegisterOutputSurfaceNV(const void * vdpSurface1,GLenum target1,GLsizei numTextureNames1,const GLuint * textureNames1)
{
	static PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC_ALT fn=(PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC_ALT)glaltGetProcAddressExtension("glVDPAURegisterOutputSurfaceNV","GL_NV_vdpau_interop");
	return fn(vdpSurface1,target1,numTextureNames1,textureNames1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VDPAURegisterVideoSurfaceNV
#define GL_ALT_FUNDEF_VDPAURegisterVideoSurfaceNV
typedef GLvdpauSurfaceNV (*PFNGLVDPAUREGISTERVIDEOSURFACENVPROC_ALT)(const void *,GLenum,GLsizei,const GLuint *);
static inline GLvdpauSurfaceNV glVDPAURegisterVideoSurfaceNV(const void * vdpSurface1,GLenum target1,GLsizei numTextureNames1,const GLuint * textureNames1)
{
	static PFNGLVDPAUREGISTERVIDEOSURFACENVPROC_ALT fn=(PFNGLVDPAUREGISTERVIDEOSURFACENVPROC_ALT)glaltGetProcAddressExtension("glVDPAURegisterVideoSurfaceNV","GL_NV_vdpau_interop");
	return fn(vdpSurface1,target1,numTextureNames1,textureNames1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VDPAUSurfaceAccessNV
#define GL_ALT_FUNDEF_VDPAUSurfaceAccessNV
typedef void (*PFNGLVDPAUSURFACEACCESSNVPROC_ALT)(GLvdpauSurfaceNV,GLenum);
static inline void glVDPAUSurfaceAccessNV(GLvdpauSurfaceNV surface1,GLenum access1)
{
	static PFNGLVDPAUSURFACEACCESSNVPROC_ALT fn=(PFNGLVDPAUSURFACEACCESSNVPROC_ALT)glaltGetProcAddressExtension("glVDPAUSurfaceAccessNV","GL_NV_vdpau_interop");
	 fn(surface1,access1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VDPAUUnmapSurfacesNV
#define GL_ALT_FUNDEF_VDPAUUnmapSurfacesNV
typedef void (*PFNGLVDPAUUNMAPSURFACESNVPROC_ALT)(GLsizei,const GLvdpauSurfaceNV *);
static inline void glVDPAUUnmapSurfacesNV(GLsizei numSurface1,const GLvdpauSurfaceNV * surfaces1)
{
	static PFNGLVDPAUUNMAPSURFACESNVPROC_ALT fn=(PFNGLVDPAUUNMAPSURFACESNVPROC_ALT)glaltGetProcAddressExtension("glVDPAUUnmapSurfacesNV","GL_NV_vdpau_interop");
	 fn(numSurface1,surfaces1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VDPAUUnregisterSurfaceNV
#define GL_ALT_FUNDEF_VDPAUUnregisterSurfaceNV
typedef void (*PFNGLVDPAUUNREGISTERSURFACENVPROC_ALT)(GLvdpauSurfaceNV);
static inline void glVDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV surface1)
{
	static PFNGLVDPAUUNREGISTERSURFACENVPROC_ALT fn=(PFNGLVDPAUUNREGISTERSURFACENVPROC_ALT)glaltGetProcAddressExtension("glVDPAUUnregisterSurfaceNV","GL_NV_vdpau_interop");
	 fn(surface1);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_vertex_array_range
#define GL_NV_vertex_array_range
#ifndef GL_VERTEX_ARRAY_RANGE_NV
#define GL_VERTEX_ARRAY_RANGE_NV 0x851D
#endif //GL_VERTEX_ARRAY_RANGE_NV
#ifndef GL_VERTEX_ARRAY_RANGE_LENGTH_NV
#define GL_VERTEX_ARRAY_RANGE_LENGTH_NV 0x851E
#endif //GL_VERTEX_ARRAY_RANGE_LENGTH_NV
#ifndef GL_VERTEX_ARRAY_RANGE_VALID_NV
#define GL_VERTEX_ARRAY_RANGE_VALID_NV 0x851F
#endif //GL_VERTEX_ARRAY_RANGE_VALID_NV
#ifndef GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
#define GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV 0x8520
#endif //GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
#ifndef GL_VERTEX_ARRAY_RANGE_POINTER_NV
#define GL_VERTEX_ARRAY_RANGE_POINTER_NV 0x8521
#endif //GL_VERTEX_ARRAY_RANGE_POINTER_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_FlushVertexArrayRangeNV
#define GL_ALT_FUNDEF_FlushVertexArrayRangeNV
typedef void (*PFNGLFLUSHVERTEXARRAYRANGENVPROC_ALT)();
static inline void glFlushVertexArrayRangeNV()
{
	static PFNGLFLUSHVERTEXARRAYRANGENVPROC_ALT fn=(PFNGLFLUSHVERTEXARRAYRANGENVPROC_ALT)glaltGetProcAddressExtension("glFlushVertexArrayRangeNV","GL_NV_vertex_array_range");
	 fn();
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexArrayRangeNV
#define GL_ALT_FUNDEF_VertexArrayRangeNV
typedef void (*PFNGLVERTEXARRAYRANGENVPROC_ALT)(GLsizei,const void *);
static inline void glVertexArrayRangeNV(GLsizei length1,const void * pointer1)
{
	static PFNGLVERTEXARRAYRANGENVPROC_ALT fn=(PFNGLVERTEXARRAYRANGENVPROC_ALT)glaltGetProcAddressExtension("glVertexArrayRangeNV","GL_NV_vertex_array_range");
	 fn(length1,pointer1);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_vertex_array_range2
#define GL_NV_vertex_array_range2
#ifndef GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV
#define GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV 0x8533
#endif //GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_vertex_attrib_integer_64bit
#define GL_NV_vertex_attrib_integer_64bit
#ifndef GL_INT64_NV
#define GL_INT64_NV 0x140E
#endif //GL_INT64_NV
#ifndef GL_UNSIGNED_INT64_NV
#define GL_UNSIGNED_INT64_NV 0x140F
#endif //GL_UNSIGNED_INT64_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetVertexAttribLi64vNV
#define GL_ALT_FUNDEF_GetVertexAttribLi64vNV
typedef void (*PFNGLGETVERTEXATTRIBLI64VNVPROC_ALT)(GLuint,GLenum,GLint64EXT *);
static inline void glGetVertexAttribLi64vNV(GLuint index1,GLenum pname1,GLint64EXT * params1)
{
	static PFNGLGETVERTEXATTRIBLI64VNVPROC_ALT fn=(PFNGLGETVERTEXATTRIBLI64VNVPROC_ALT)glaltGetProcAddressExtension("glGetVertexAttribLi64vNV","GL_NV_vertex_attrib_integer_64bit");
	 fn(index1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetVertexAttribLui64vNV
#define GL_ALT_FUNDEF_GetVertexAttribLui64vNV
typedef void (*PFNGLGETVERTEXATTRIBLUI64VNVPROC_ALT)(GLuint,GLenum,GLuint64EXT *);
static inline void glGetVertexAttribLui64vNV(GLuint index1,GLenum pname1,GLuint64EXT * params1)
{
	static PFNGLGETVERTEXATTRIBLUI64VNVPROC_ALT fn=(PFNGLGETVERTEXATTRIBLUI64VNVPROC_ALT)glaltGetProcAddressExtension("glGetVertexAttribLui64vNV","GL_NV_vertex_attrib_integer_64bit");
	 fn(index1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribL1i64NV
#define GL_ALT_FUNDEF_VertexAttribL1i64NV
typedef void (*PFNGLVERTEXATTRIBL1I64NVPROC_ALT)(GLuint,GLint64EXT);
static inline void glVertexAttribL1i64NV(GLuint index1,GLint64EXT x1)
{
	static PFNGLVERTEXATTRIBL1I64NVPROC_ALT fn=(PFNGLVERTEXATTRIBL1I64NVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL1i64NV","GL_NV_vertex_attrib_integer_64bit");
	 fn(index1,x1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribL1i64vNV
#define GL_ALT_FUNDEF_VertexAttribL1i64vNV
typedef void (*PFNGLVERTEXATTRIBL1I64VNVPROC_ALT)(GLuint,const GLint64EXT *);
static inline void glVertexAttribL1i64vNV(GLuint index1,const GLint64EXT * v1)
{
	static PFNGLVERTEXATTRIBL1I64VNVPROC_ALT fn=(PFNGLVERTEXATTRIBL1I64VNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL1i64vNV","GL_NV_vertex_attrib_integer_64bit");
	 fn(index1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribL1ui64NV
#define GL_ALT_FUNDEF_VertexAttribL1ui64NV
typedef void (*PFNGLVERTEXATTRIBL1UI64NVPROC_ALT)(GLuint,GLuint64EXT);
static inline void glVertexAttribL1ui64NV(GLuint index1,GLuint64EXT x1)
{
	static PFNGLVERTEXATTRIBL1UI64NVPROC_ALT fn=(PFNGLVERTEXATTRIBL1UI64NVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL1ui64NV","GL_NV_vertex_attrib_integer_64bit");
	 fn(index1,x1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribL1ui64vNV
#define GL_ALT_FUNDEF_VertexAttribL1ui64vNV
typedef void (*PFNGLVERTEXATTRIBL1UI64VNVPROC_ALT)(GLuint,const GLuint64EXT *);
static inline void glVertexAttribL1ui64vNV(GLuint index1,const GLuint64EXT * v1)
{
	static PFNGLVERTEXATTRIBL1UI64VNVPROC_ALT fn=(PFNGLVERTEXATTRIBL1UI64VNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL1ui64vNV","GL_NV_vertex_attrib_integer_64bit");
	 fn(index1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribL2i64NV
#define GL_ALT_FUNDEF_VertexAttribL2i64NV
typedef void (*PFNGLVERTEXATTRIBL2I64NVPROC_ALT)(GLuint,GLint64EXT,GLint64EXT);
static inline void glVertexAttribL2i64NV(GLuint index1,GLint64EXT x1,GLint64EXT y1)
{
	static PFNGLVERTEXATTRIBL2I64NVPROC_ALT fn=(PFNGLVERTEXATTRIBL2I64NVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL2i64NV","GL_NV_vertex_attrib_integer_64bit");
	 fn(index1,x1,y1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribL2i64vNV
#define GL_ALT_FUNDEF_VertexAttribL2i64vNV
typedef void (*PFNGLVERTEXATTRIBL2I64VNVPROC_ALT)(GLuint,const GLint64EXT *);
static inline void glVertexAttribL2i64vNV(GLuint index1,const GLint64EXT * v1)
{
	static PFNGLVERTEXATTRIBL2I64VNVPROC_ALT fn=(PFNGLVERTEXATTRIBL2I64VNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL2i64vNV","GL_NV_vertex_attrib_integer_64bit");
	 fn(index1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribL2ui64NV
#define GL_ALT_FUNDEF_VertexAttribL2ui64NV
typedef void (*PFNGLVERTEXATTRIBL2UI64NVPROC_ALT)(GLuint,GLuint64EXT,GLuint64EXT);
static inline void glVertexAttribL2ui64NV(GLuint index1,GLuint64EXT x1,GLuint64EXT y1)
{
	static PFNGLVERTEXATTRIBL2UI64NVPROC_ALT fn=(PFNGLVERTEXATTRIBL2UI64NVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL2ui64NV","GL_NV_vertex_attrib_integer_64bit");
	 fn(index1,x1,y1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribL2ui64vNV
#define GL_ALT_FUNDEF_VertexAttribL2ui64vNV
typedef void (*PFNGLVERTEXATTRIBL2UI64VNVPROC_ALT)(GLuint,const GLuint64EXT *);
static inline void glVertexAttribL2ui64vNV(GLuint index1,const GLuint64EXT * v1)
{
	static PFNGLVERTEXATTRIBL2UI64VNVPROC_ALT fn=(PFNGLVERTEXATTRIBL2UI64VNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL2ui64vNV","GL_NV_vertex_attrib_integer_64bit");
	 fn(index1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribL3i64NV
#define GL_ALT_FUNDEF_VertexAttribL3i64NV
typedef void (*PFNGLVERTEXATTRIBL3I64NVPROC_ALT)(GLuint,GLint64EXT,GLint64EXT,GLint64EXT);
static inline void glVertexAttribL3i64NV(GLuint index1,GLint64EXT x1,GLint64EXT y1,GLint64EXT z1)
{
	static PFNGLVERTEXATTRIBL3I64NVPROC_ALT fn=(PFNGLVERTEXATTRIBL3I64NVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL3i64NV","GL_NV_vertex_attrib_integer_64bit");
	 fn(index1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribL3i64vNV
#define GL_ALT_FUNDEF_VertexAttribL3i64vNV
typedef void (*PFNGLVERTEXATTRIBL3I64VNVPROC_ALT)(GLuint,const GLint64EXT *);
static inline void glVertexAttribL3i64vNV(GLuint index1,const GLint64EXT * v1)
{
	static PFNGLVERTEXATTRIBL3I64VNVPROC_ALT fn=(PFNGLVERTEXATTRIBL3I64VNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL3i64vNV","GL_NV_vertex_attrib_integer_64bit");
	 fn(index1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribL3ui64NV
#define GL_ALT_FUNDEF_VertexAttribL3ui64NV
typedef void (*PFNGLVERTEXATTRIBL3UI64NVPROC_ALT)(GLuint,GLuint64EXT,GLuint64EXT,GLuint64EXT);
static inline void glVertexAttribL3ui64NV(GLuint index1,GLuint64EXT x1,GLuint64EXT y1,GLuint64EXT z1)
{
	static PFNGLVERTEXATTRIBL3UI64NVPROC_ALT fn=(PFNGLVERTEXATTRIBL3UI64NVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL3ui64NV","GL_NV_vertex_attrib_integer_64bit");
	 fn(index1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribL3ui64vNV
#define GL_ALT_FUNDEF_VertexAttribL3ui64vNV
typedef void (*PFNGLVERTEXATTRIBL3UI64VNVPROC_ALT)(GLuint,const GLuint64EXT *);
static inline void glVertexAttribL3ui64vNV(GLuint index1,const GLuint64EXT * v1)
{
	static PFNGLVERTEXATTRIBL3UI64VNVPROC_ALT fn=(PFNGLVERTEXATTRIBL3UI64VNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL3ui64vNV","GL_NV_vertex_attrib_integer_64bit");
	 fn(index1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribL4i64NV
#define GL_ALT_FUNDEF_VertexAttribL4i64NV
typedef void (*PFNGLVERTEXATTRIBL4I64NVPROC_ALT)(GLuint,GLint64EXT,GLint64EXT,GLint64EXT,GLint64EXT);
static inline void glVertexAttribL4i64NV(GLuint index1,GLint64EXT x1,GLint64EXT y1,GLint64EXT z1,GLint64EXT w1)
{
	static PFNGLVERTEXATTRIBL4I64NVPROC_ALT fn=(PFNGLVERTEXATTRIBL4I64NVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL4i64NV","GL_NV_vertex_attrib_integer_64bit");
	 fn(index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribL4i64vNV
#define GL_ALT_FUNDEF_VertexAttribL4i64vNV
typedef void (*PFNGLVERTEXATTRIBL4I64VNVPROC_ALT)(GLuint,const GLint64EXT *);
static inline void glVertexAttribL4i64vNV(GLuint index1,const GLint64EXT * v1)
{
	static PFNGLVERTEXATTRIBL4I64VNVPROC_ALT fn=(PFNGLVERTEXATTRIBL4I64VNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL4i64vNV","GL_NV_vertex_attrib_integer_64bit");
	 fn(index1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribL4ui64NV
#define GL_ALT_FUNDEF_VertexAttribL4ui64NV
typedef void (*PFNGLVERTEXATTRIBL4UI64NVPROC_ALT)(GLuint,GLuint64EXT,GLuint64EXT,GLuint64EXT,GLuint64EXT);
static inline void glVertexAttribL4ui64NV(GLuint index1,GLuint64EXT x1,GLuint64EXT y1,GLuint64EXT z1,GLuint64EXT w1)
{
	static PFNGLVERTEXATTRIBL4UI64NVPROC_ALT fn=(PFNGLVERTEXATTRIBL4UI64NVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL4ui64NV","GL_NV_vertex_attrib_integer_64bit");
	 fn(index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribL4ui64vNV
#define GL_ALT_FUNDEF_VertexAttribL4ui64vNV
typedef void (*PFNGLVERTEXATTRIBL4UI64VNVPROC_ALT)(GLuint,const GLuint64EXT *);
static inline void glVertexAttribL4ui64vNV(GLuint index1,const GLuint64EXT * v1)
{
	static PFNGLVERTEXATTRIBL4UI64VNVPROC_ALT fn=(PFNGLVERTEXATTRIBL4UI64VNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribL4ui64vNV","GL_NV_vertex_attrib_integer_64bit");
	 fn(index1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribLFormatNV
#define GL_ALT_FUNDEF_VertexAttribLFormatNV
typedef void (*PFNGLVERTEXATTRIBLFORMATNVPROC_ALT)(GLuint,GLint,GLenum,GLsizei);
static inline void glVertexAttribLFormatNV(GLuint index1,GLint size1,GLenum type1,GLsizei stride1)
{
	static PFNGLVERTEXATTRIBLFORMATNVPROC_ALT fn=(PFNGLVERTEXATTRIBLFORMATNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribLFormatNV","GL_NV_vertex_attrib_integer_64bit");
	 fn(index1,size1,type1,stride1);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_vertex_buffer_unified_memory
#define GL_NV_vertex_buffer_unified_memory
#ifndef GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV
#define GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV 0x8F1E
#endif //GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV
#ifndef GL_ELEMENT_ARRAY_UNIFIED_NV
#define GL_ELEMENT_ARRAY_UNIFIED_NV 0x8F1F
#endif //GL_ELEMENT_ARRAY_UNIFIED_NV
#ifndef GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV
#define GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV 0x8F20
#endif //GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV
#ifndef GL_VERTEX_ARRAY_ADDRESS_NV
#define GL_VERTEX_ARRAY_ADDRESS_NV 0x8F21
#endif //GL_VERTEX_ARRAY_ADDRESS_NV
#ifndef GL_NORMAL_ARRAY_ADDRESS_NV
#define GL_NORMAL_ARRAY_ADDRESS_NV 0x8F22
#endif //GL_NORMAL_ARRAY_ADDRESS_NV
#ifndef GL_COLOR_ARRAY_ADDRESS_NV
#define GL_COLOR_ARRAY_ADDRESS_NV 0x8F23
#endif //GL_COLOR_ARRAY_ADDRESS_NV
#ifndef GL_INDEX_ARRAY_ADDRESS_NV
#define GL_INDEX_ARRAY_ADDRESS_NV 0x8F24
#endif //GL_INDEX_ARRAY_ADDRESS_NV
#ifndef GL_TEXTURE_COORD_ARRAY_ADDRESS_NV
#define GL_TEXTURE_COORD_ARRAY_ADDRESS_NV 0x8F25
#endif //GL_TEXTURE_COORD_ARRAY_ADDRESS_NV
#ifndef GL_EDGE_FLAG_ARRAY_ADDRESS_NV
#define GL_EDGE_FLAG_ARRAY_ADDRESS_NV 0x8F26
#endif //GL_EDGE_FLAG_ARRAY_ADDRESS_NV
#ifndef GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV
#define GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV 0x8F27
#endif //GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV
#ifndef GL_FOG_COORD_ARRAY_ADDRESS_NV
#define GL_FOG_COORD_ARRAY_ADDRESS_NV 0x8F28
#endif //GL_FOG_COORD_ARRAY_ADDRESS_NV
#ifndef GL_ELEMENT_ARRAY_ADDRESS_NV
#define GL_ELEMENT_ARRAY_ADDRESS_NV 0x8F29
#endif //GL_ELEMENT_ARRAY_ADDRESS_NV
#ifndef GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV
#define GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV 0x8F2A
#endif //GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV
#ifndef GL_VERTEX_ARRAY_LENGTH_NV
#define GL_VERTEX_ARRAY_LENGTH_NV 0x8F2B
#endif //GL_VERTEX_ARRAY_LENGTH_NV
#ifndef GL_NORMAL_ARRAY_LENGTH_NV
#define GL_NORMAL_ARRAY_LENGTH_NV 0x8F2C
#endif //GL_NORMAL_ARRAY_LENGTH_NV
#ifndef GL_COLOR_ARRAY_LENGTH_NV
#define GL_COLOR_ARRAY_LENGTH_NV 0x8F2D
#endif //GL_COLOR_ARRAY_LENGTH_NV
#ifndef GL_INDEX_ARRAY_LENGTH_NV
#define GL_INDEX_ARRAY_LENGTH_NV 0x8F2E
#endif //GL_INDEX_ARRAY_LENGTH_NV
#ifndef GL_TEXTURE_COORD_ARRAY_LENGTH_NV
#define GL_TEXTURE_COORD_ARRAY_LENGTH_NV 0x8F2F
#endif //GL_TEXTURE_COORD_ARRAY_LENGTH_NV
#ifndef GL_EDGE_FLAG_ARRAY_LENGTH_NV
#define GL_EDGE_FLAG_ARRAY_LENGTH_NV 0x8F30
#endif //GL_EDGE_FLAG_ARRAY_LENGTH_NV
#ifndef GL_SECONDARY_COLOR_ARRAY_LENGTH_NV
#define GL_SECONDARY_COLOR_ARRAY_LENGTH_NV 0x8F31
#endif //GL_SECONDARY_COLOR_ARRAY_LENGTH_NV
#ifndef GL_FOG_COORD_ARRAY_LENGTH_NV
#define GL_FOG_COORD_ARRAY_LENGTH_NV 0x8F32
#endif //GL_FOG_COORD_ARRAY_LENGTH_NV
#ifndef GL_ELEMENT_ARRAY_LENGTH_NV
#define GL_ELEMENT_ARRAY_LENGTH_NV 0x8F33
#endif //GL_ELEMENT_ARRAY_LENGTH_NV
#ifndef GL_DRAW_INDIRECT_UNIFIED_NV
#define GL_DRAW_INDIRECT_UNIFIED_NV 0x8F40
#endif //GL_DRAW_INDIRECT_UNIFIED_NV
#ifndef GL_DRAW_INDIRECT_ADDRESS_NV
#define GL_DRAW_INDIRECT_ADDRESS_NV 0x8F41
#endif //GL_DRAW_INDIRECT_ADDRESS_NV
#ifndef GL_DRAW_INDIRECT_LENGTH_NV
#define GL_DRAW_INDIRECT_LENGTH_NV 0x8F42
#endif //GL_DRAW_INDIRECT_LENGTH_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BufferAddressRangeNV
#define GL_ALT_FUNDEF_BufferAddressRangeNV
typedef void (*PFNGLBUFFERADDRESSRANGENVPROC_ALT)(GLenum,GLuint,GLuint64EXT,GLsizeiptr);
static inline void glBufferAddressRangeNV(GLenum pname1,GLuint index1,GLuint64EXT address1,GLsizeiptr length1)
{
	static PFNGLBUFFERADDRESSRANGENVPROC_ALT fn=(PFNGLBUFFERADDRESSRANGENVPROC_ALT)glaltGetProcAddressExtension("glBufferAddressRangeNV","GL_NV_vertex_buffer_unified_memory");
	 fn(pname1,index1,address1,length1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ColorFormatNV
#define GL_ALT_FUNDEF_ColorFormatNV
typedef void (*PFNGLCOLORFORMATNVPROC_ALT)(GLint,GLenum,GLsizei);
static inline void glColorFormatNV(GLint size1,GLenum type1,GLsizei stride1)
{
	static PFNGLCOLORFORMATNVPROC_ALT fn=(PFNGLCOLORFORMATNVPROC_ALT)glaltGetProcAddressExtension("glColorFormatNV","GL_NV_vertex_buffer_unified_memory");
	 fn(size1,type1,stride1);
}
#endif

#ifndef	GL_ALT_FUNDEF_EdgeFlagFormatNV
#define GL_ALT_FUNDEF_EdgeFlagFormatNV
typedef void (*PFNGLEDGEFLAGFORMATNVPROC_ALT)(GLsizei);
static inline void glEdgeFlagFormatNV(GLsizei stride1)
{
	static PFNGLEDGEFLAGFORMATNVPROC_ALT fn=(PFNGLEDGEFLAGFORMATNVPROC_ALT)glaltGetProcAddressExtension("glEdgeFlagFormatNV","GL_NV_vertex_buffer_unified_memory");
	 fn(stride1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FogCoordFormatNV
#define GL_ALT_FUNDEF_FogCoordFormatNV
typedef void (*PFNGLFOGCOORDFORMATNVPROC_ALT)(GLenum,GLsizei);
static inline void glFogCoordFormatNV(GLenum type1,GLsizei stride1)
{
	static PFNGLFOGCOORDFORMATNVPROC_ALT fn=(PFNGLFOGCOORDFORMATNVPROC_ALT)glaltGetProcAddressExtension("glFogCoordFormatNV","GL_NV_vertex_buffer_unified_memory");
	 fn(type1,stride1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetIntegerui64i_vNV
#define GL_ALT_FUNDEF_GetIntegerui64i_vNV
typedef void (*PFNGLGETINTEGERUI64I_VNVPROC_ALT)(GLenum,GLuint,GLuint64EXT *);
static inline void glGetIntegerui64i_vNV(GLenum value1,GLuint index1,GLuint64EXT * result1)
{
	static PFNGLGETINTEGERUI64I_VNVPROC_ALT fn=(PFNGLGETINTEGERUI64I_VNVPROC_ALT)glaltGetProcAddressExtension("glGetIntegerui64i_vNV","GL_NV_vertex_buffer_unified_memory");
	 fn(value1,index1,result1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IndexFormatNV
#define GL_ALT_FUNDEF_IndexFormatNV
typedef void (*PFNGLINDEXFORMATNVPROC_ALT)(GLenum,GLsizei);
static inline void glIndexFormatNV(GLenum type1,GLsizei stride1)
{
	static PFNGLINDEXFORMATNVPROC_ALT fn=(PFNGLINDEXFORMATNVPROC_ALT)glaltGetProcAddressExtension("glIndexFormatNV","GL_NV_vertex_buffer_unified_memory");
	 fn(type1,stride1);
}
#endif

#ifndef	GL_ALT_FUNDEF_NormalFormatNV
#define GL_ALT_FUNDEF_NormalFormatNV
typedef void (*PFNGLNORMALFORMATNVPROC_ALT)(GLenum,GLsizei);
static inline void glNormalFormatNV(GLenum type1,GLsizei stride1)
{
	static PFNGLNORMALFORMATNVPROC_ALT fn=(PFNGLNORMALFORMATNVPROC_ALT)glaltGetProcAddressExtension("glNormalFormatNV","GL_NV_vertex_buffer_unified_memory");
	 fn(type1,stride1);
}
#endif

#ifndef	GL_ALT_FUNDEF_SecondaryColorFormatNV
#define GL_ALT_FUNDEF_SecondaryColorFormatNV
typedef void (*PFNGLSECONDARYCOLORFORMATNVPROC_ALT)(GLint,GLenum,GLsizei);
static inline void glSecondaryColorFormatNV(GLint size1,GLenum type1,GLsizei stride1)
{
	static PFNGLSECONDARYCOLORFORMATNVPROC_ALT fn=(PFNGLSECONDARYCOLORFORMATNVPROC_ALT)glaltGetProcAddressExtension("glSecondaryColorFormatNV","GL_NV_vertex_buffer_unified_memory");
	 fn(size1,type1,stride1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoordFormatNV
#define GL_ALT_FUNDEF_TexCoordFormatNV
typedef void (*PFNGLTEXCOORDFORMATNVPROC_ALT)(GLint,GLenum,GLsizei);
static inline void glTexCoordFormatNV(GLint size1,GLenum type1,GLsizei stride1)
{
	static PFNGLTEXCOORDFORMATNVPROC_ALT fn=(PFNGLTEXCOORDFORMATNVPROC_ALT)glaltGetProcAddressExtension("glTexCoordFormatNV","GL_NV_vertex_buffer_unified_memory");
	 fn(size1,type1,stride1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribFormatNV
#define GL_ALT_FUNDEF_VertexAttribFormatNV
typedef void (*PFNGLVERTEXATTRIBFORMATNVPROC_ALT)(GLuint,GLint,GLenum,GLboolean,GLsizei);
static inline void glVertexAttribFormatNV(GLuint index1,GLint size1,GLenum type1,GLboolean normalized1,GLsizei stride1)
{
	static PFNGLVERTEXATTRIBFORMATNVPROC_ALT fn=(PFNGLVERTEXATTRIBFORMATNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribFormatNV","GL_NV_vertex_buffer_unified_memory");
	 fn(index1,size1,type1,normalized1,stride1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribIFormatNV
#define GL_ALT_FUNDEF_VertexAttribIFormatNV
typedef void (*PFNGLVERTEXATTRIBIFORMATNVPROC_ALT)(GLuint,GLint,GLenum,GLsizei);
static inline void glVertexAttribIFormatNV(GLuint index1,GLint size1,GLenum type1,GLsizei stride1)
{
	static PFNGLVERTEXATTRIBIFORMATNVPROC_ALT fn=(PFNGLVERTEXATTRIBIFORMATNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribIFormatNV","GL_NV_vertex_buffer_unified_memory");
	 fn(index1,size1,type1,stride1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexFormatNV
#define GL_ALT_FUNDEF_VertexFormatNV
typedef void (*PFNGLVERTEXFORMATNVPROC_ALT)(GLint,GLenum,GLsizei);
static inline void glVertexFormatNV(GLint size1,GLenum type1,GLsizei stride1)
{
	static PFNGLVERTEXFORMATNVPROC_ALT fn=(PFNGLVERTEXFORMATNVPROC_ALT)glaltGetProcAddressExtension("glVertexFormatNV","GL_NV_vertex_buffer_unified_memory");
	 fn(size1,type1,stride1);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_vertex_program
#define GL_NV_vertex_program
#ifndef GL_VERTEX_PROGRAM_NV
#define GL_VERTEX_PROGRAM_NV 0x8620
#endif //GL_VERTEX_PROGRAM_NV
#ifndef GL_VERTEX_STATE_PROGRAM_NV
#define GL_VERTEX_STATE_PROGRAM_NV 0x8621
#endif //GL_VERTEX_STATE_PROGRAM_NV
#ifndef GL_ATTRIB_ARRAY_SIZE_NV
#define GL_ATTRIB_ARRAY_SIZE_NV 0x8623
#endif //GL_ATTRIB_ARRAY_SIZE_NV
#ifndef GL_ATTRIB_ARRAY_STRIDE_NV
#define GL_ATTRIB_ARRAY_STRIDE_NV 0x8624
#endif //GL_ATTRIB_ARRAY_STRIDE_NV
#ifndef GL_ATTRIB_ARRAY_TYPE_NV
#define GL_ATTRIB_ARRAY_TYPE_NV 0x8625
#endif //GL_ATTRIB_ARRAY_TYPE_NV
#ifndef GL_CURRENT_ATTRIB_NV
#define GL_CURRENT_ATTRIB_NV 0x8626
#endif //GL_CURRENT_ATTRIB_NV
#ifndef GL_PROGRAM_LENGTH_NV
#define GL_PROGRAM_LENGTH_NV 0x8627
#endif //GL_PROGRAM_LENGTH_NV
#ifndef GL_PROGRAM_STRING_NV
#define GL_PROGRAM_STRING_NV 0x8628
#endif //GL_PROGRAM_STRING_NV
#ifndef GL_MODELVIEW_PROJECTION_NV
#define GL_MODELVIEW_PROJECTION_NV 0x8629
#endif //GL_MODELVIEW_PROJECTION_NV
#ifndef GL_IDENTITY_NV
#define GL_IDENTITY_NV 0x862A
#endif //GL_IDENTITY_NV
#ifndef GL_INVERSE_NV
#define GL_INVERSE_NV 0x862B
#endif //GL_INVERSE_NV
#ifndef GL_TRANSPOSE_NV
#define GL_TRANSPOSE_NV 0x862C
#endif //GL_TRANSPOSE_NV
#ifndef GL_INVERSE_TRANSPOSE_NV
#define GL_INVERSE_TRANSPOSE_NV 0x862D
#endif //GL_INVERSE_TRANSPOSE_NV
#ifndef GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV
#define GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV 0x862E
#endif //GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV
#ifndef GL_MAX_TRACK_MATRICES_NV
#define GL_MAX_TRACK_MATRICES_NV 0x862F
#endif //GL_MAX_TRACK_MATRICES_NV
#ifndef GL_MATRIX0_NV
#define GL_MATRIX0_NV 0x8630
#endif //GL_MATRIX0_NV
#ifndef GL_MATRIX1_NV
#define GL_MATRIX1_NV 0x8631
#endif //GL_MATRIX1_NV
#ifndef GL_MATRIX2_NV
#define GL_MATRIX2_NV 0x8632
#endif //GL_MATRIX2_NV
#ifndef GL_MATRIX3_NV
#define GL_MATRIX3_NV 0x8633
#endif //GL_MATRIX3_NV
#ifndef GL_MATRIX4_NV
#define GL_MATRIX4_NV 0x8634
#endif //GL_MATRIX4_NV
#ifndef GL_MATRIX5_NV
#define GL_MATRIX5_NV 0x8635
#endif //GL_MATRIX5_NV
#ifndef GL_MATRIX6_NV
#define GL_MATRIX6_NV 0x8636
#endif //GL_MATRIX6_NV
#ifndef GL_MATRIX7_NV
#define GL_MATRIX7_NV 0x8637
#endif //GL_MATRIX7_NV
#ifndef GL_CURRENT_MATRIX_STACK_DEPTH_NV
#define GL_CURRENT_MATRIX_STACK_DEPTH_NV 0x8640
#endif //GL_CURRENT_MATRIX_STACK_DEPTH_NV
#ifndef GL_CURRENT_MATRIX_NV
#define GL_CURRENT_MATRIX_NV 0x8641
#endif //GL_CURRENT_MATRIX_NV
#ifndef GL_VERTEX_PROGRAM_POINT_SIZE_NV
#define GL_VERTEX_PROGRAM_POINT_SIZE_NV 0x8642
#endif //GL_VERTEX_PROGRAM_POINT_SIZE_NV
#ifndef GL_VERTEX_PROGRAM_TWO_SIDE_NV
#define GL_VERTEX_PROGRAM_TWO_SIDE_NV 0x8643
#endif //GL_VERTEX_PROGRAM_TWO_SIDE_NV
#ifndef GL_PROGRAM_PARAMETER_NV
#define GL_PROGRAM_PARAMETER_NV 0x8644
#endif //GL_PROGRAM_PARAMETER_NV
#ifndef GL_ATTRIB_ARRAY_POINTER_NV
#define GL_ATTRIB_ARRAY_POINTER_NV 0x8645
#endif //GL_ATTRIB_ARRAY_POINTER_NV
#ifndef GL_PROGRAM_TARGET_NV
#define GL_PROGRAM_TARGET_NV 0x8646
#endif //GL_PROGRAM_TARGET_NV
#ifndef GL_PROGRAM_RESIDENT_NV
#define GL_PROGRAM_RESIDENT_NV 0x8647
#endif //GL_PROGRAM_RESIDENT_NV
#ifndef GL_TRACK_MATRIX_NV
#define GL_TRACK_MATRIX_NV 0x8648
#endif //GL_TRACK_MATRIX_NV
#ifndef GL_TRACK_MATRIX_TRANSFORM_NV
#define GL_TRACK_MATRIX_TRANSFORM_NV 0x8649
#endif //GL_TRACK_MATRIX_TRANSFORM_NV
#ifndef GL_VERTEX_PROGRAM_BINDING_NV
#define GL_VERTEX_PROGRAM_BINDING_NV 0x864A
#endif //GL_VERTEX_PROGRAM_BINDING_NV
#ifndef GL_PROGRAM_ERROR_POSITION_NV
#define GL_PROGRAM_ERROR_POSITION_NV 0x864B
#endif //GL_PROGRAM_ERROR_POSITION_NV
#ifndef GL_VERTEX_ATTRIB_ARRAY0_NV
#define GL_VERTEX_ATTRIB_ARRAY0_NV 0x8650
#endif //GL_VERTEX_ATTRIB_ARRAY0_NV
#ifndef GL_VERTEX_ATTRIB_ARRAY1_NV
#define GL_VERTEX_ATTRIB_ARRAY1_NV 0x8651
#endif //GL_VERTEX_ATTRIB_ARRAY1_NV
#ifndef GL_VERTEX_ATTRIB_ARRAY2_NV
#define GL_VERTEX_ATTRIB_ARRAY2_NV 0x8652
#endif //GL_VERTEX_ATTRIB_ARRAY2_NV
#ifndef GL_VERTEX_ATTRIB_ARRAY3_NV
#define GL_VERTEX_ATTRIB_ARRAY3_NV 0x8653
#endif //GL_VERTEX_ATTRIB_ARRAY3_NV
#ifndef GL_VERTEX_ATTRIB_ARRAY4_NV
#define GL_VERTEX_ATTRIB_ARRAY4_NV 0x8654
#endif //GL_VERTEX_ATTRIB_ARRAY4_NV
#ifndef GL_VERTEX_ATTRIB_ARRAY5_NV
#define GL_VERTEX_ATTRIB_ARRAY5_NV 0x8655
#endif //GL_VERTEX_ATTRIB_ARRAY5_NV
#ifndef GL_VERTEX_ATTRIB_ARRAY6_NV
#define GL_VERTEX_ATTRIB_ARRAY6_NV 0x8656
#endif //GL_VERTEX_ATTRIB_ARRAY6_NV
#ifndef GL_VERTEX_ATTRIB_ARRAY7_NV
#define GL_VERTEX_ATTRIB_ARRAY7_NV 0x8657
#endif //GL_VERTEX_ATTRIB_ARRAY7_NV
#ifndef GL_VERTEX_ATTRIB_ARRAY8_NV
#define GL_VERTEX_ATTRIB_ARRAY8_NV 0x8658
#endif //GL_VERTEX_ATTRIB_ARRAY8_NV
#ifndef GL_VERTEX_ATTRIB_ARRAY9_NV
#define GL_VERTEX_ATTRIB_ARRAY9_NV 0x8659
#endif //GL_VERTEX_ATTRIB_ARRAY9_NV
#ifndef GL_VERTEX_ATTRIB_ARRAY10_NV
#define GL_VERTEX_ATTRIB_ARRAY10_NV 0x865A
#endif //GL_VERTEX_ATTRIB_ARRAY10_NV
#ifndef GL_VERTEX_ATTRIB_ARRAY11_NV
#define GL_VERTEX_ATTRIB_ARRAY11_NV 0x865B
#endif //GL_VERTEX_ATTRIB_ARRAY11_NV
#ifndef GL_VERTEX_ATTRIB_ARRAY12_NV
#define GL_VERTEX_ATTRIB_ARRAY12_NV 0x865C
#endif //GL_VERTEX_ATTRIB_ARRAY12_NV
#ifndef GL_VERTEX_ATTRIB_ARRAY13_NV
#define GL_VERTEX_ATTRIB_ARRAY13_NV 0x865D
#endif //GL_VERTEX_ATTRIB_ARRAY13_NV
#ifndef GL_VERTEX_ATTRIB_ARRAY14_NV
#define GL_VERTEX_ATTRIB_ARRAY14_NV 0x865E
#endif //GL_VERTEX_ATTRIB_ARRAY14_NV
#ifndef GL_VERTEX_ATTRIB_ARRAY15_NV
#define GL_VERTEX_ATTRIB_ARRAY15_NV 0x865F
#endif //GL_VERTEX_ATTRIB_ARRAY15_NV
#ifndef GL_MAP1_VERTEX_ATTRIB0_4_NV
#define GL_MAP1_VERTEX_ATTRIB0_4_NV 0x8660
#endif //GL_MAP1_VERTEX_ATTRIB0_4_NV
#ifndef GL_MAP1_VERTEX_ATTRIB1_4_NV
#define GL_MAP1_VERTEX_ATTRIB1_4_NV 0x8661
#endif //GL_MAP1_VERTEX_ATTRIB1_4_NV
#ifndef GL_MAP1_VERTEX_ATTRIB2_4_NV
#define GL_MAP1_VERTEX_ATTRIB2_4_NV 0x8662
#endif //GL_MAP1_VERTEX_ATTRIB2_4_NV
#ifndef GL_MAP1_VERTEX_ATTRIB3_4_NV
#define GL_MAP1_VERTEX_ATTRIB3_4_NV 0x8663
#endif //GL_MAP1_VERTEX_ATTRIB3_4_NV
#ifndef GL_MAP1_VERTEX_ATTRIB4_4_NV
#define GL_MAP1_VERTEX_ATTRIB4_4_NV 0x8664
#endif //GL_MAP1_VERTEX_ATTRIB4_4_NV
#ifndef GL_MAP1_VERTEX_ATTRIB5_4_NV
#define GL_MAP1_VERTEX_ATTRIB5_4_NV 0x8665
#endif //GL_MAP1_VERTEX_ATTRIB5_4_NV
#ifndef GL_MAP1_VERTEX_ATTRIB6_4_NV
#define GL_MAP1_VERTEX_ATTRIB6_4_NV 0x8666
#endif //GL_MAP1_VERTEX_ATTRIB6_4_NV
#ifndef GL_MAP1_VERTEX_ATTRIB7_4_NV
#define GL_MAP1_VERTEX_ATTRIB7_4_NV 0x8667
#endif //GL_MAP1_VERTEX_ATTRIB7_4_NV
#ifndef GL_MAP1_VERTEX_ATTRIB8_4_NV
#define GL_MAP1_VERTEX_ATTRIB8_4_NV 0x8668
#endif //GL_MAP1_VERTEX_ATTRIB8_4_NV
#ifndef GL_MAP1_VERTEX_ATTRIB9_4_NV
#define GL_MAP1_VERTEX_ATTRIB9_4_NV 0x8669
#endif //GL_MAP1_VERTEX_ATTRIB9_4_NV
#ifndef GL_MAP1_VERTEX_ATTRIB10_4_NV
#define GL_MAP1_VERTEX_ATTRIB10_4_NV 0x866A
#endif //GL_MAP1_VERTEX_ATTRIB10_4_NV
#ifndef GL_MAP1_VERTEX_ATTRIB11_4_NV
#define GL_MAP1_VERTEX_ATTRIB11_4_NV 0x866B
#endif //GL_MAP1_VERTEX_ATTRIB11_4_NV
#ifndef GL_MAP1_VERTEX_ATTRIB12_4_NV
#define GL_MAP1_VERTEX_ATTRIB12_4_NV 0x866C
#endif //GL_MAP1_VERTEX_ATTRIB12_4_NV
#ifndef GL_MAP1_VERTEX_ATTRIB13_4_NV
#define GL_MAP1_VERTEX_ATTRIB13_4_NV 0x866D
#endif //GL_MAP1_VERTEX_ATTRIB13_4_NV
#ifndef GL_MAP1_VERTEX_ATTRIB14_4_NV
#define GL_MAP1_VERTEX_ATTRIB14_4_NV 0x866E
#endif //GL_MAP1_VERTEX_ATTRIB14_4_NV
#ifndef GL_MAP1_VERTEX_ATTRIB15_4_NV
#define GL_MAP1_VERTEX_ATTRIB15_4_NV 0x866F
#endif //GL_MAP1_VERTEX_ATTRIB15_4_NV
#ifndef GL_MAP2_VERTEX_ATTRIB0_4_NV
#define GL_MAP2_VERTEX_ATTRIB0_4_NV 0x8670
#endif //GL_MAP2_VERTEX_ATTRIB0_4_NV
#ifndef GL_MAP2_VERTEX_ATTRIB1_4_NV
#define GL_MAP2_VERTEX_ATTRIB1_4_NV 0x8671
#endif //GL_MAP2_VERTEX_ATTRIB1_4_NV
#ifndef GL_MAP2_VERTEX_ATTRIB2_4_NV
#define GL_MAP2_VERTEX_ATTRIB2_4_NV 0x8672
#endif //GL_MAP2_VERTEX_ATTRIB2_4_NV
#ifndef GL_MAP2_VERTEX_ATTRIB3_4_NV
#define GL_MAP2_VERTEX_ATTRIB3_4_NV 0x8673
#endif //GL_MAP2_VERTEX_ATTRIB3_4_NV
#ifndef GL_MAP2_VERTEX_ATTRIB4_4_NV
#define GL_MAP2_VERTEX_ATTRIB4_4_NV 0x8674
#endif //GL_MAP2_VERTEX_ATTRIB4_4_NV
#ifndef GL_MAP2_VERTEX_ATTRIB5_4_NV
#define GL_MAP2_VERTEX_ATTRIB5_4_NV 0x8675
#endif //GL_MAP2_VERTEX_ATTRIB5_4_NV
#ifndef GL_MAP2_VERTEX_ATTRIB6_4_NV
#define GL_MAP2_VERTEX_ATTRIB6_4_NV 0x8676
#endif //GL_MAP2_VERTEX_ATTRIB6_4_NV
#ifndef GL_MAP2_VERTEX_ATTRIB7_4_NV
#define GL_MAP2_VERTEX_ATTRIB7_4_NV 0x8677
#endif //GL_MAP2_VERTEX_ATTRIB7_4_NV
#ifndef GL_MAP2_VERTEX_ATTRIB8_4_NV
#define GL_MAP2_VERTEX_ATTRIB8_4_NV 0x8678
#endif //GL_MAP2_VERTEX_ATTRIB8_4_NV
#ifndef GL_MAP2_VERTEX_ATTRIB9_4_NV
#define GL_MAP2_VERTEX_ATTRIB9_4_NV 0x8679
#endif //GL_MAP2_VERTEX_ATTRIB9_4_NV
#ifndef GL_MAP2_VERTEX_ATTRIB10_4_NV
#define GL_MAP2_VERTEX_ATTRIB10_4_NV 0x867A
#endif //GL_MAP2_VERTEX_ATTRIB10_4_NV
#ifndef GL_MAP2_VERTEX_ATTRIB11_4_NV
#define GL_MAP2_VERTEX_ATTRIB11_4_NV 0x867B
#endif //GL_MAP2_VERTEX_ATTRIB11_4_NV
#ifndef GL_MAP2_VERTEX_ATTRIB12_4_NV
#define GL_MAP2_VERTEX_ATTRIB12_4_NV 0x867C
#endif //GL_MAP2_VERTEX_ATTRIB12_4_NV
#ifndef GL_MAP2_VERTEX_ATTRIB13_4_NV
#define GL_MAP2_VERTEX_ATTRIB13_4_NV 0x867D
#endif //GL_MAP2_VERTEX_ATTRIB13_4_NV
#ifndef GL_MAP2_VERTEX_ATTRIB14_4_NV
#define GL_MAP2_VERTEX_ATTRIB14_4_NV 0x867E
#endif //GL_MAP2_VERTEX_ATTRIB14_4_NV
#ifndef GL_MAP2_VERTEX_ATTRIB15_4_NV
#define GL_MAP2_VERTEX_ATTRIB15_4_NV 0x867F
#endif //GL_MAP2_VERTEX_ATTRIB15_4_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_AreProgramsResidentNV
#define GL_ALT_FUNDEF_AreProgramsResidentNV
typedef GLboolean (*PFNGLAREPROGRAMSRESIDENTNVPROC_ALT)(GLsizei,const GLuint *,GLboolean *);
static inline GLboolean glAreProgramsResidentNV(GLsizei n1,const GLuint * programs1,GLboolean * residences1)
{
	static PFNGLAREPROGRAMSRESIDENTNVPROC_ALT fn=(PFNGLAREPROGRAMSRESIDENTNVPROC_ALT)glaltGetProcAddressExtension("glAreProgramsResidentNV","GL_NV_vertex_program");
	return fn(n1,programs1,residences1);
}
#endif

#ifndef	GL_ALT_FUNDEF_BindProgramNV
#define GL_ALT_FUNDEF_BindProgramNV
typedef void (*PFNGLBINDPROGRAMNVPROC_ALT)(GLenum,GLuint);
static inline void glBindProgramNV(GLenum target1,GLuint id1)
{
	static PFNGLBINDPROGRAMNVPROC_ALT fn=(PFNGLBINDPROGRAMNVPROC_ALT)glaltGetProcAddressExtension("glBindProgramNV","GL_NV_vertex_program");
	 fn(target1,id1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_DeleteProgramsNV
#define GL_ALT_FUNDEF_DeleteProgramsNV
typedef void (*PFNGLDELETEPROGRAMSNVPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteProgramsNV(GLsizei n1,const GLuint * programs1)
{
	static PFNGLDELETEPROGRAMSNVPROC_ALT fn=(PFNGLDELETEPROGRAMSNVPROC_ALT)glaltGetProcAddressExtension("glDeleteProgramsNV","GL_NV_vertex_program");
	 fn(n1,programs1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ExecuteProgramNV
#define GL_ALT_FUNDEF_ExecuteProgramNV
typedef void (*PFNGLEXECUTEPROGRAMNVPROC_ALT)(GLenum,GLuint,const GLfloat *);
static inline void glExecuteProgramNV(GLenum target1,GLuint id1,const GLfloat * params1)
{
	static PFNGLEXECUTEPROGRAMNVPROC_ALT fn=(PFNGLEXECUTEPROGRAMNVPROC_ALT)glaltGetProcAddressExtension("glExecuteProgramNV","GL_NV_vertex_program");
	 fn(target1,id1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GenProgramsNV
#define GL_ALT_FUNDEF_GenProgramsNV
typedef void (*PFNGLGENPROGRAMSNVPROC_ALT)(GLsizei,GLuint *);
static inline void glGenProgramsNV(GLsizei n1,GLuint * programs1)
{
	static PFNGLGENPROGRAMSNVPROC_ALT fn=(PFNGLGENPROGRAMSNVPROC_ALT)glaltGetProcAddressExtension("glGenProgramsNV","GL_NV_vertex_program");
	 fn(n1,programs1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetProgramParameterdvNV
#define GL_ALT_FUNDEF_GetProgramParameterdvNV
typedef void (*PFNGLGETPROGRAMPARAMETERDVNVPROC_ALT)(GLenum,GLuint,GLenum,GLdouble *);
static inline void glGetProgramParameterdvNV(GLenum target1,GLuint index1,GLenum pname1,GLdouble * params1)
{
	static PFNGLGETPROGRAMPARAMETERDVNVPROC_ALT fn=(PFNGLGETPROGRAMPARAMETERDVNVPROC_ALT)glaltGetProcAddressExtension("glGetProgramParameterdvNV","GL_NV_vertex_program");
	 fn(target1,index1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetProgramParameterfvNV
#define GL_ALT_FUNDEF_GetProgramParameterfvNV
typedef void (*PFNGLGETPROGRAMPARAMETERFVNVPROC_ALT)(GLenum,GLuint,GLenum,GLfloat *);
static inline void glGetProgramParameterfvNV(GLenum target1,GLuint index1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETPROGRAMPARAMETERFVNVPROC_ALT fn=(PFNGLGETPROGRAMPARAMETERFVNVPROC_ALT)glaltGetProcAddressExtension("glGetProgramParameterfvNV","GL_NV_vertex_program");
	 fn(target1,index1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetProgramStringNV
#define GL_ALT_FUNDEF_GetProgramStringNV
typedef void (*PFNGLGETPROGRAMSTRINGNVPROC_ALT)(GLuint,GLenum,GLubyte *);
static inline void glGetProgramStringNV(GLuint id1,GLenum pname1,GLubyte * program1)
{
	static PFNGLGETPROGRAMSTRINGNVPROC_ALT fn=(PFNGLGETPROGRAMSTRINGNVPROC_ALT)glaltGetProcAddressExtension("glGetProgramStringNV","GL_NV_vertex_program");
	 fn(id1,pname1,program1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetProgramivNV
#define GL_ALT_FUNDEF_GetProgramivNV
typedef void (*PFNGLGETPROGRAMIVNVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetProgramivNV(GLuint id1,GLenum pname1,GLint * params1)
{
	static PFNGLGETPROGRAMIVNVPROC_ALT fn=(PFNGLGETPROGRAMIVNVPROC_ALT)glaltGetProcAddressExtension("glGetProgramivNV","GL_NV_vertex_program");
	 fn(id1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetTrackMatrixivNV
#define GL_ALT_FUNDEF_GetTrackMatrixivNV
typedef void (*PFNGLGETTRACKMATRIXIVNVPROC_ALT)(GLenum,GLuint,GLenum,GLint *);
static inline void glGetTrackMatrixivNV(GLenum target1,GLuint address1,GLenum pname1,GLint * params1)
{
	static PFNGLGETTRACKMATRIXIVNVPROC_ALT fn=(PFNGLGETTRACKMATRIXIVNVPROC_ALT)glaltGetProcAddressExtension("glGetTrackMatrixivNV","GL_NV_vertex_program");
	 fn(target1,address1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetVertexAttribPointervNV
#define GL_ALT_FUNDEF_GetVertexAttribPointervNV
typedef void (*PFNGLGETVERTEXATTRIBPOINTERVNVPROC_ALT)(GLuint,GLenum,void **);
static inline void glGetVertexAttribPointervNV(GLuint index1,GLenum pname1,void ** pointer1)
{
	static PFNGLGETVERTEXATTRIBPOINTERVNVPROC_ALT fn=(PFNGLGETVERTEXATTRIBPOINTERVNVPROC_ALT)glaltGetProcAddressExtension("glGetVertexAttribPointervNV","GL_NV_vertex_program");
	 fn(index1,pname1,pointer1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetVertexAttribdvNV
#define GL_ALT_FUNDEF_GetVertexAttribdvNV
typedef void (*PFNGLGETVERTEXATTRIBDVNVPROC_ALT)(GLuint,GLenum,GLdouble *);
static inline void glGetVertexAttribdvNV(GLuint index1,GLenum pname1,GLdouble * params1)
{
	static PFNGLGETVERTEXATTRIBDVNVPROC_ALT fn=(PFNGLGETVERTEXATTRIBDVNVPROC_ALT)glaltGetProcAddressExtension("glGetVertexAttribdvNV","GL_NV_vertex_program");
	 fn(index1,pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetVertexAttribfvNV
#define GL_ALT_FUNDEF_GetVertexAttribfvNV
typedef void (*PFNGLGETVERTEXATTRIBFVNVPROC_ALT)(GLuint,GLenum,GLfloat *);
static inline void glGetVertexAttribfvNV(GLuint index1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETVERTEXATTRIBFVNVPROC_ALT fn=(PFNGLGETVERTEXATTRIBFVNVPROC_ALT)glaltGetProcAddressExtension("glGetVertexAttribfvNV","GL_NV_vertex_program");
	 fn(index1,pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetVertexAttribivNV
#define GL_ALT_FUNDEF_GetVertexAttribivNV
typedef void (*PFNGLGETVERTEXATTRIBIVNVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetVertexAttribivNV(GLuint index1,GLenum pname1,GLint * params1)
{
	static PFNGLGETVERTEXATTRIBIVNVPROC_ALT fn=(PFNGLGETVERTEXATTRIBIVNVPROC_ALT)glaltGetProcAddressExtension("glGetVertexAttribivNV","GL_NV_vertex_program");
	 fn(index1,pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_IsProgramNV
#define GL_ALT_FUNDEF_IsProgramNV
typedef GLboolean (*PFNGLISPROGRAMNVPROC_ALT)(GLuint);
static inline GLboolean glIsProgramNV(GLuint id1)
{
	static PFNGLISPROGRAMNVPROC_ALT fn=(PFNGLISPROGRAMNVPROC_ALT)glaltGetProcAddressExtension("glIsProgramNV","GL_NV_vertex_program");
	return fn(id1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_LoadProgramNV
#define GL_ALT_FUNDEF_LoadProgramNV
typedef void (*PFNGLLOADPROGRAMNVPROC_ALT)(GLenum,GLuint,GLsizei,const GLubyte *);
static inline void glLoadProgramNV(GLenum target1,GLuint id1,GLsizei len1,const GLubyte * program1)
{
	static PFNGLLOADPROGRAMNVPROC_ALT fn=(PFNGLLOADPROGRAMNVPROC_ALT)glaltGetProcAddressExtension("glLoadProgramNV","GL_NV_vertex_program");
	 fn(target1,id1,len1,program1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramParameter4dNV
#define GL_ALT_FUNDEF_ProgramParameter4dNV
typedef void (*PFNGLPROGRAMPARAMETER4DNVPROC_ALT)(GLenum,GLuint,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void glProgramParameter4dNV(GLenum target1,GLuint index1,GLdouble x1,GLdouble y1,GLdouble z1,GLdouble w1)
{
	static PFNGLPROGRAMPARAMETER4DNVPROC_ALT fn=(PFNGLPROGRAMPARAMETER4DNVPROC_ALT)glaltGetProcAddressExtension("glProgramParameter4dNV","GL_NV_vertex_program");
	 fn(target1,index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramParameter4dvNV
#define GL_ALT_FUNDEF_ProgramParameter4dvNV
typedef void (*PFNGLPROGRAMPARAMETER4DVNVPROC_ALT)(GLenum,GLuint,const GLdouble *);
static inline void glProgramParameter4dvNV(GLenum target1,GLuint index1,const GLdouble * v1)
{
	static PFNGLPROGRAMPARAMETER4DVNVPROC_ALT fn=(PFNGLPROGRAMPARAMETER4DVNVPROC_ALT)glaltGetProcAddressExtension("glProgramParameter4dvNV","GL_NV_vertex_program");
	 fn(target1,index1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramParameter4fNV
#define GL_ALT_FUNDEF_ProgramParameter4fNV
typedef void (*PFNGLPROGRAMPARAMETER4FNVPROC_ALT)(GLenum,GLuint,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glProgramParameter4fNV(GLenum target1,GLuint index1,GLfloat x1,GLfloat y1,GLfloat z1,GLfloat w1)
{
	static PFNGLPROGRAMPARAMETER4FNVPROC_ALT fn=(PFNGLPROGRAMPARAMETER4FNVPROC_ALT)glaltGetProcAddressExtension("glProgramParameter4fNV","GL_NV_vertex_program");
	 fn(target1,index1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramParameter4fvNV
#define GL_ALT_FUNDEF_ProgramParameter4fvNV
typedef void (*PFNGLPROGRAMPARAMETER4FVNVPROC_ALT)(GLenum,GLuint,const GLfloat *);
static inline void glProgramParameter4fvNV(GLenum target1,GLuint index1,const GLfloat * v1)
{
	static PFNGLPROGRAMPARAMETER4FVNVPROC_ALT fn=(PFNGLPROGRAMPARAMETER4FVNVPROC_ALT)glaltGetProcAddressExtension("glProgramParameter4fvNV","GL_NV_vertex_program");
	 fn(target1,index1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramParameters4dvNV
#define GL_ALT_FUNDEF_ProgramParameters4dvNV
typedef void (*PFNGLPROGRAMPARAMETERS4DVNVPROC_ALT)(GLenum,GLuint,GLsizei,const GLdouble *);
static inline void glProgramParameters4dvNV(GLenum target1,GLuint index1,GLsizei count1,const GLdouble * v1)
{
	static PFNGLPROGRAMPARAMETERS4DVNVPROC_ALT fn=(PFNGLPROGRAMPARAMETERS4DVNVPROC_ALT)glaltGetProcAddressExtension("glProgramParameters4dvNV","GL_NV_vertex_program");
	 fn(target1,index1,count1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ProgramParameters4fvNV
#define GL_ALT_FUNDEF_ProgramParameters4fvNV
typedef void (*PFNGLPROGRAMPARAMETERS4FVNVPROC_ALT)(GLenum,GLuint,GLsizei,const GLfloat *);
static inline void glProgramParameters4fvNV(GLenum target1,GLuint index1,GLsizei count1,const GLfloat * v1)
{
	static PFNGLPROGRAMPARAMETERS4FVNVPROC_ALT fn=(PFNGLPROGRAMPARAMETERS4FVNVPROC_ALT)glaltGetProcAddressExtension("glProgramParameters4fvNV","GL_NV_vertex_program");
	 fn(target1,index1,count1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_RequestResidentProgramsNV
#define GL_ALT_FUNDEF_RequestResidentProgramsNV
typedef void (*PFNGLREQUESTRESIDENTPROGRAMSNVPROC_ALT)(GLsizei,const GLuint *);
static inline void glRequestResidentProgramsNV(GLsizei n1,const GLuint * programs1)
{
	static PFNGLREQUESTRESIDENTPROGRAMSNVPROC_ALT fn=(PFNGLREQUESTRESIDENTPROGRAMSNVPROC_ALT)glaltGetProcAddressExtension("glRequestResidentProgramsNV","GL_NV_vertex_program");
	 fn(n1,programs1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TrackMatrixNV
#define GL_ALT_FUNDEF_TrackMatrixNV
typedef void (*PFNGLTRACKMATRIXNVPROC_ALT)(GLenum,GLuint,GLenum,GLenum);
static inline void glTrackMatrixNV(GLenum target1,GLuint address1,GLenum matrix1,GLenum transform1)
{
	static PFNGLTRACKMATRIXNVPROC_ALT fn=(PFNGLTRACKMATRIXNVPROC_ALT)glaltGetProcAddressExtension("glTrackMatrixNV","GL_NV_vertex_program");
	 fn(target1,address1,matrix1,transform1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttrib1dNV
#define GL_ALT_FUNDEF_VertexAttrib1dNV
typedef void (*PFNGLVERTEXATTRIB1DNVPROC_ALT)(GLuint,GLdouble);
static inline void glVertexAttrib1dNV(GLuint index1,GLdouble x1)
{
	static PFNGLVERTEXATTRIB1DNVPROC_ALT fn=(PFNGLVERTEXATTRIB1DNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib1dNV","GL_NV_vertex_program");
	 fn(index1,x1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib1dvNV
#define GL_ALT_FUNDEF_VertexAttrib1dvNV
typedef void (*PFNGLVERTEXATTRIB1DVNVPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttrib1dvNV(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIB1DVNVPROC_ALT fn=(PFNGLVERTEXATTRIB1DVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib1dvNV","GL_NV_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib1fNV
#define GL_ALT_FUNDEF_VertexAttrib1fNV
typedef void (*PFNGLVERTEXATTRIB1FNVPROC_ALT)(GLuint,GLfloat);
static inline void glVertexAttrib1fNV(GLuint index1,GLfloat x1)
{
	static PFNGLVERTEXATTRIB1FNVPROC_ALT fn=(PFNGLVERTEXATTRIB1FNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib1fNV","GL_NV_vertex_program");
	 fn(index1,x1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib1fvNV
#define GL_ALT_FUNDEF_VertexAttrib1fvNV
typedef void (*PFNGLVERTEXATTRIB1FVNVPROC_ALT)(GLuint,const GLfloat *);
static inline void glVertexAttrib1fvNV(GLuint index1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIB1FVNVPROC_ALT fn=(PFNGLVERTEXATTRIB1FVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib1fvNV","GL_NV_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib1sNV
#define GL_ALT_FUNDEF_VertexAttrib1sNV
typedef void (*PFNGLVERTEXATTRIB1SNVPROC_ALT)(GLuint,GLshort);
static inline void glVertexAttrib1sNV(GLuint index1,GLshort x1)
{
	static PFNGLVERTEXATTRIB1SNVPROC_ALT fn=(PFNGLVERTEXATTRIB1SNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib1sNV","GL_NV_vertex_program");
	 fn(index1,x1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib1svNV
#define GL_ALT_FUNDEF_VertexAttrib1svNV
typedef void (*PFNGLVERTEXATTRIB1SVNVPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttrib1svNV(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIB1SVNVPROC_ALT fn=(PFNGLVERTEXATTRIB1SVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib1svNV","GL_NV_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib2dNV
#define GL_ALT_FUNDEF_VertexAttrib2dNV
typedef void (*PFNGLVERTEXATTRIB2DNVPROC_ALT)(GLuint,GLdouble,GLdouble);
static inline void glVertexAttrib2dNV(GLuint index1,GLdouble x1,GLdouble y1)
{
	static PFNGLVERTEXATTRIB2DNVPROC_ALT fn=(PFNGLVERTEXATTRIB2DNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib2dNV","GL_NV_vertex_program");
	 fn(index1,x1,y1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib2dvNV
#define GL_ALT_FUNDEF_VertexAttrib2dvNV
typedef void (*PFNGLVERTEXATTRIB2DVNVPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttrib2dvNV(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIB2DVNVPROC_ALT fn=(PFNGLVERTEXATTRIB2DVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib2dvNV","GL_NV_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib2fNV
#define GL_ALT_FUNDEF_VertexAttrib2fNV
typedef void (*PFNGLVERTEXATTRIB2FNVPROC_ALT)(GLuint,GLfloat,GLfloat);
static inline void glVertexAttrib2fNV(GLuint index1,GLfloat x1,GLfloat y1)
{
	static PFNGLVERTEXATTRIB2FNVPROC_ALT fn=(PFNGLVERTEXATTRIB2FNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib2fNV","GL_NV_vertex_program");
	 fn(index1,x1,y1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib2fvNV
#define GL_ALT_FUNDEF_VertexAttrib2fvNV
typedef void (*PFNGLVERTEXATTRIB2FVNVPROC_ALT)(GLuint,const GLfloat *);
static inline void glVertexAttrib2fvNV(GLuint index1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIB2FVNVPROC_ALT fn=(PFNGLVERTEXATTRIB2FVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib2fvNV","GL_NV_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib2sNV
#define GL_ALT_FUNDEF_VertexAttrib2sNV
typedef void (*PFNGLVERTEXATTRIB2SNVPROC_ALT)(GLuint,GLshort,GLshort);
static inline void glVertexAttrib2sNV(GLuint index1,GLshort x1,GLshort y1)
{
	static PFNGLVERTEXATTRIB2SNVPROC_ALT fn=(PFNGLVERTEXATTRIB2SNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib2sNV","GL_NV_vertex_program");
	 fn(index1,x1,y1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib2svNV
#define GL_ALT_FUNDEF_VertexAttrib2svNV
typedef void (*PFNGLVERTEXATTRIB2SVNVPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttrib2svNV(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIB2SVNVPROC_ALT fn=(PFNGLVERTEXATTRIB2SVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib2svNV","GL_NV_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib3dNV
#define GL_ALT_FUNDEF_VertexAttrib3dNV
typedef void (*PFNGLVERTEXATTRIB3DNVPROC_ALT)(GLuint,GLdouble,GLdouble,GLdouble);
static inline void glVertexAttrib3dNV(GLuint index1,GLdouble x1,GLdouble y1,GLdouble z1)
{
	static PFNGLVERTEXATTRIB3DNVPROC_ALT fn=(PFNGLVERTEXATTRIB3DNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib3dNV","GL_NV_vertex_program");
	 fn(index1,x1,y1,z1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib3dvNV
#define GL_ALT_FUNDEF_VertexAttrib3dvNV
typedef void (*PFNGLVERTEXATTRIB3DVNVPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttrib3dvNV(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIB3DVNVPROC_ALT fn=(PFNGLVERTEXATTRIB3DVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib3dvNV","GL_NV_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib3fNV
#define GL_ALT_FUNDEF_VertexAttrib3fNV
typedef void (*PFNGLVERTEXATTRIB3FNVPROC_ALT)(GLuint,GLfloat,GLfloat,GLfloat);
static inline void glVertexAttrib3fNV(GLuint index1,GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLVERTEXATTRIB3FNVPROC_ALT fn=(PFNGLVERTEXATTRIB3FNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib3fNV","GL_NV_vertex_program");
	 fn(index1,x1,y1,z1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib3fvNV
#define GL_ALT_FUNDEF_VertexAttrib3fvNV
typedef void (*PFNGLVERTEXATTRIB3FVNVPROC_ALT)(GLuint,const GLfloat *);
static inline void glVertexAttrib3fvNV(GLuint index1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIB3FVNVPROC_ALT fn=(PFNGLVERTEXATTRIB3FVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib3fvNV","GL_NV_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib3sNV
#define GL_ALT_FUNDEF_VertexAttrib3sNV
typedef void (*PFNGLVERTEXATTRIB3SNVPROC_ALT)(GLuint,GLshort,GLshort,GLshort);
static inline void glVertexAttrib3sNV(GLuint index1,GLshort x1,GLshort y1,GLshort z1)
{
	static PFNGLVERTEXATTRIB3SNVPROC_ALT fn=(PFNGLVERTEXATTRIB3SNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib3sNV","GL_NV_vertex_program");
	 fn(index1,x1,y1,z1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib3svNV
#define GL_ALT_FUNDEF_VertexAttrib3svNV
typedef void (*PFNGLVERTEXATTRIB3SVNVPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttrib3svNV(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIB3SVNVPROC_ALT fn=(PFNGLVERTEXATTRIB3SVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib3svNV","GL_NV_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4dNV
#define GL_ALT_FUNDEF_VertexAttrib4dNV
typedef void (*PFNGLVERTEXATTRIB4DNVPROC_ALT)(GLuint,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void glVertexAttrib4dNV(GLuint index1,GLdouble x1,GLdouble y1,GLdouble z1,GLdouble w1)
{
	static PFNGLVERTEXATTRIB4DNVPROC_ALT fn=(PFNGLVERTEXATTRIB4DNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4dNV","GL_NV_vertex_program");
	 fn(index1,x1,y1,z1,w1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4dvNV
#define GL_ALT_FUNDEF_VertexAttrib4dvNV
typedef void (*PFNGLVERTEXATTRIB4DVNVPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttrib4dvNV(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIB4DVNVPROC_ALT fn=(PFNGLVERTEXATTRIB4DVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4dvNV","GL_NV_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4fNV
#define GL_ALT_FUNDEF_VertexAttrib4fNV
typedef void (*PFNGLVERTEXATTRIB4FNVPROC_ALT)(GLuint,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glVertexAttrib4fNV(GLuint index1,GLfloat x1,GLfloat y1,GLfloat z1,GLfloat w1)
{
	static PFNGLVERTEXATTRIB4FNVPROC_ALT fn=(PFNGLVERTEXATTRIB4FNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4fNV","GL_NV_vertex_program");
	 fn(index1,x1,y1,z1,w1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4fvNV
#define GL_ALT_FUNDEF_VertexAttrib4fvNV
typedef void (*PFNGLVERTEXATTRIB4FVNVPROC_ALT)(GLuint,const GLfloat *);
static inline void glVertexAttrib4fvNV(GLuint index1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIB4FVNVPROC_ALT fn=(PFNGLVERTEXATTRIB4FVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4fvNV","GL_NV_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4sNV
#define GL_ALT_FUNDEF_VertexAttrib4sNV
typedef void (*PFNGLVERTEXATTRIB4SNVPROC_ALT)(GLuint,GLshort,GLshort,GLshort,GLshort);
static inline void glVertexAttrib4sNV(GLuint index1,GLshort x1,GLshort y1,GLshort z1,GLshort w1)
{
	static PFNGLVERTEXATTRIB4SNVPROC_ALT fn=(PFNGLVERTEXATTRIB4SNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4sNV","GL_NV_vertex_program");
	 fn(index1,x1,y1,z1,w1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4svNV
#define GL_ALT_FUNDEF_VertexAttrib4svNV
typedef void (*PFNGLVERTEXATTRIB4SVNVPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttrib4svNV(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIB4SVNVPROC_ALT fn=(PFNGLVERTEXATTRIB4SVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4svNV","GL_NV_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4ubNV
#define GL_ALT_FUNDEF_VertexAttrib4ubNV
typedef void (*PFNGLVERTEXATTRIB4UBNVPROC_ALT)(GLuint,GLubyte,GLubyte,GLubyte,GLubyte);
static inline void glVertexAttrib4ubNV(GLuint index1,GLubyte x1,GLubyte y1,GLubyte z1,GLubyte w1)
{
	static PFNGLVERTEXATTRIB4UBNVPROC_ALT fn=(PFNGLVERTEXATTRIB4UBNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4ubNV","GL_NV_vertex_program");
	 fn(index1,x1,y1,z1,w1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttrib4ubvNV
#define GL_ALT_FUNDEF_VertexAttrib4ubvNV
typedef void (*PFNGLVERTEXATTRIB4UBVNVPROC_ALT)(GLuint,const GLubyte *);
static inline void glVertexAttrib4ubvNV(GLuint index1,const GLubyte * v1)
{
	static PFNGLVERTEXATTRIB4UBVNVPROC_ALT fn=(PFNGLVERTEXATTRIB4UBVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttrib4ubvNV","GL_NV_vertex_program");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribPointerNV
#define GL_ALT_FUNDEF_VertexAttribPointerNV
typedef void (*PFNGLVERTEXATTRIBPOINTERNVPROC_ALT)(GLuint,GLint,GLenum,GLsizei,const void *);
static inline void glVertexAttribPointerNV(GLuint index1,GLint fsize1,GLenum type1,GLsizei stride1,const void * pointer1)
{
	static PFNGLVERTEXATTRIBPOINTERNVPROC_ALT fn=(PFNGLVERTEXATTRIBPOINTERNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribPointerNV","GL_NV_vertex_program");
	 fn(index1,fsize1,type1,stride1,pointer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribs1dvNV
#define GL_ALT_FUNDEF_VertexAttribs1dvNV
typedef void (*PFNGLVERTEXATTRIBS1DVNVPROC_ALT)(GLuint,GLsizei,const GLdouble *);
static inline void glVertexAttribs1dvNV(GLuint index1,GLsizei count1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIBS1DVNVPROC_ALT fn=(PFNGLVERTEXATTRIBS1DVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribs1dvNV","GL_NV_vertex_program");
	 fn(index1,count1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribs1fvNV
#define GL_ALT_FUNDEF_VertexAttribs1fvNV
typedef void (*PFNGLVERTEXATTRIBS1FVNVPROC_ALT)(GLuint,GLsizei,const GLfloat *);
static inline void glVertexAttribs1fvNV(GLuint index1,GLsizei count1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIBS1FVNVPROC_ALT fn=(PFNGLVERTEXATTRIBS1FVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribs1fvNV","GL_NV_vertex_program");
	 fn(index1,count1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribs1svNV
#define GL_ALT_FUNDEF_VertexAttribs1svNV
typedef void (*PFNGLVERTEXATTRIBS1SVNVPROC_ALT)(GLuint,GLsizei,const GLshort *);
static inline void glVertexAttribs1svNV(GLuint index1,GLsizei count1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIBS1SVNVPROC_ALT fn=(PFNGLVERTEXATTRIBS1SVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribs1svNV","GL_NV_vertex_program");
	 fn(index1,count1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribs2dvNV
#define GL_ALT_FUNDEF_VertexAttribs2dvNV
typedef void (*PFNGLVERTEXATTRIBS2DVNVPROC_ALT)(GLuint,GLsizei,const GLdouble *);
static inline void glVertexAttribs2dvNV(GLuint index1,GLsizei count1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIBS2DVNVPROC_ALT fn=(PFNGLVERTEXATTRIBS2DVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribs2dvNV","GL_NV_vertex_program");
	 fn(index1,count1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribs2fvNV
#define GL_ALT_FUNDEF_VertexAttribs2fvNV
typedef void (*PFNGLVERTEXATTRIBS2FVNVPROC_ALT)(GLuint,GLsizei,const GLfloat *);
static inline void glVertexAttribs2fvNV(GLuint index1,GLsizei count1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIBS2FVNVPROC_ALT fn=(PFNGLVERTEXATTRIBS2FVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribs2fvNV","GL_NV_vertex_program");
	 fn(index1,count1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribs2svNV
#define GL_ALT_FUNDEF_VertexAttribs2svNV
typedef void (*PFNGLVERTEXATTRIBS2SVNVPROC_ALT)(GLuint,GLsizei,const GLshort *);
static inline void glVertexAttribs2svNV(GLuint index1,GLsizei count1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIBS2SVNVPROC_ALT fn=(PFNGLVERTEXATTRIBS2SVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribs2svNV","GL_NV_vertex_program");
	 fn(index1,count1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribs3dvNV
#define GL_ALT_FUNDEF_VertexAttribs3dvNV
typedef void (*PFNGLVERTEXATTRIBS3DVNVPROC_ALT)(GLuint,GLsizei,const GLdouble *);
static inline void glVertexAttribs3dvNV(GLuint index1,GLsizei count1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIBS3DVNVPROC_ALT fn=(PFNGLVERTEXATTRIBS3DVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribs3dvNV","GL_NV_vertex_program");
	 fn(index1,count1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribs3fvNV
#define GL_ALT_FUNDEF_VertexAttribs3fvNV
typedef void (*PFNGLVERTEXATTRIBS3FVNVPROC_ALT)(GLuint,GLsizei,const GLfloat *);
static inline void glVertexAttribs3fvNV(GLuint index1,GLsizei count1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIBS3FVNVPROC_ALT fn=(PFNGLVERTEXATTRIBS3FVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribs3fvNV","GL_NV_vertex_program");
	 fn(index1,count1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribs3svNV
#define GL_ALT_FUNDEF_VertexAttribs3svNV
typedef void (*PFNGLVERTEXATTRIBS3SVNVPROC_ALT)(GLuint,GLsizei,const GLshort *);
static inline void glVertexAttribs3svNV(GLuint index1,GLsizei count1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIBS3SVNVPROC_ALT fn=(PFNGLVERTEXATTRIBS3SVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribs3svNV","GL_NV_vertex_program");
	 fn(index1,count1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribs4dvNV
#define GL_ALT_FUNDEF_VertexAttribs4dvNV
typedef void (*PFNGLVERTEXATTRIBS4DVNVPROC_ALT)(GLuint,GLsizei,const GLdouble *);
static inline void glVertexAttribs4dvNV(GLuint index1,GLsizei count1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIBS4DVNVPROC_ALT fn=(PFNGLVERTEXATTRIBS4DVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribs4dvNV","GL_NV_vertex_program");
	 fn(index1,count1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribs4fvNV
#define GL_ALT_FUNDEF_VertexAttribs4fvNV
typedef void (*PFNGLVERTEXATTRIBS4FVNVPROC_ALT)(GLuint,GLsizei,const GLfloat *);
static inline void glVertexAttribs4fvNV(GLuint index1,GLsizei count1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIBS4FVNVPROC_ALT fn=(PFNGLVERTEXATTRIBS4FVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribs4fvNV","GL_NV_vertex_program");
	 fn(index1,count1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribs4svNV
#define GL_ALT_FUNDEF_VertexAttribs4svNV
typedef void (*PFNGLVERTEXATTRIBS4SVNVPROC_ALT)(GLuint,GLsizei,const GLshort *);
static inline void glVertexAttribs4svNV(GLuint index1,GLsizei count1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIBS4SVNVPROC_ALT fn=(PFNGLVERTEXATTRIBS4SVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribs4svNV","GL_NV_vertex_program");
	 fn(index1,count1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VertexAttribs4ubvNV
#define GL_ALT_FUNDEF_VertexAttribs4ubvNV
typedef void (*PFNGLVERTEXATTRIBS4UBVNVPROC_ALT)(GLuint,GLsizei,const GLubyte *);
static inline void glVertexAttribs4ubvNV(GLuint index1,GLsizei count1,const GLubyte * v1)
{
	static PFNGLVERTEXATTRIBS4UBVNVPROC_ALT fn=(PFNGLVERTEXATTRIBS4UBVNVPROC_ALT)glaltGetProcAddressExtension("glVertexAttribs4ubvNV","GL_NV_vertex_program");
	 fn(index1,count1,v1);
}
#endif
CGUARDEND

#endif

#ifndef GL_NV_vertex_program1_1
#define GL_NV_vertex_program1_1
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_vertex_program2
#define GL_NV_vertex_program2
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_vertex_program2_option
#define GL_NV_vertex_program2_option
#ifndef GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
#define GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV 0x88F4
#endif //GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
#ifndef GL_MAX_PROGRAM_CALL_DEPTH_NV
#define GL_MAX_PROGRAM_CALL_DEPTH_NV 0x88F5
#endif //GL_MAX_PROGRAM_CALL_DEPTH_NV
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_vertex_program3
#define GL_NV_vertex_program3
#ifndef GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB 0x8B4C
#endif //GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_NV_vertex_program4
#define GL_NV_vertex_program4
#ifndef GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV 0x88FD
#endif //GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetVertexAttribIivEXT
#define GL_ALT_FUNDEF_GetVertexAttribIivEXT
typedef void (*PFNGLGETVERTEXATTRIBIIVEXTPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetVertexAttribIivEXT(GLuint index1,GLenum pname1,GLint * params1)
{
	static PFNGLGETVERTEXATTRIBIIVEXTPROC_ALT fn=(PFNGLGETVERTEXATTRIBIIVEXTPROC_ALT)glaltGetProcAddressExtension("glGetVertexAttribIivEXT","GL_NV_vertex_program4");
	 fn(index1,pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetVertexAttribIuivEXT
#define GL_ALT_FUNDEF_GetVertexAttribIuivEXT
typedef void (*PFNGLGETVERTEXATTRIBIUIVEXTPROC_ALT)(GLuint,GLenum,GLuint *);
static inline void glGetVertexAttribIuivEXT(GLuint index1,GLenum pname1,GLuint * params1)
{
	static PFNGLGETVERTEXATTRIBIUIVEXTPROC_ALT fn=(PFNGLGETVERTEXATTRIBIUIVEXTPROC_ALT)glaltGetProcAddressExtension("glGetVertexAttribIuivEXT","GL_NV_vertex_program4");
	 fn(index1,pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribI1iEXT
#define GL_ALT_FUNDEF_VertexAttribI1iEXT
typedef void (*PFNGLVERTEXATTRIBI1IEXTPROC_ALT)(GLuint,GLint);
static inline void glVertexAttribI1iEXT(GLuint index1,GLint x1)
{
	static PFNGLVERTEXATTRIBI1IEXTPROC_ALT fn=(PFNGLVERTEXATTRIBI1IEXTPROC_ALT)glaltGetProcAddressExtension("glVertexAttribI1iEXT","GL_NV_vertex_program4");
	 fn(index1,x1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribI1ivEXT
#define GL_ALT_FUNDEF_VertexAttribI1ivEXT
typedef void (*PFNGLVERTEXATTRIBI1IVEXTPROC_ALT)(GLuint,const GLint *);
static inline void glVertexAttribI1ivEXT(GLuint index1,const GLint * v1)
{
	static PFNGLVERTEXATTRIBI1IVEXTPROC_ALT fn=(PFNGLVERTEXATTRIBI1IVEXTPROC_ALT)glaltGetProcAddressExtension("glVertexAttribI1ivEXT","GL_NV_vertex_program4");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribI1uiEXT
#define GL_ALT_FUNDEF_VertexAttribI1uiEXT
typedef void (*PFNGLVERTEXATTRIBI1UIEXTPROC_ALT)(GLuint,GLuint);
static inline void glVertexAttribI1uiEXT(GLuint index1,GLuint x1)
{
	static PFNGLVERTEXATTRIBI1UIEXTPROC_ALT fn=(PFNGLVERTEXATTRIBI1UIEXTPROC_ALT)glaltGetProcAddressExtension("glVertexAttribI1uiEXT","GL_NV_vertex_program4");
	 fn(index1,x1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribI1uivEXT
#define GL_ALT_FUNDEF_VertexAttribI1uivEXT
typedef void (*PFNGLVERTEXATTRIBI1UIVEXTPROC_ALT)(GLuint,const GLuint *);
static inline void glVertexAttribI1uivEXT(GLuint index1,const GLuint * v1)
{
	static PFNGLVERTEXATTRIBI1UIVEXTPROC_ALT fn=(PFNGLVERTEXATTRIBI1UIVEXTPROC_ALT)glaltGetProcAddressExtension("glVertexAttribI1uivEXT","GL_NV_vertex_program4");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribI2iEXT
#define GL_ALT_FUNDEF_VertexAttribI2iEXT
typedef void (*PFNGLVERTEXATTRIBI2IEXTPROC_ALT)(GLuint,GLint,GLint);
static inline void glVertexAttribI2iEXT(GLuint index1,GLint x1,GLint y1)
{
	static PFNGLVERTEXATTRIBI2IEXTPROC_ALT fn=(PFNGLVERTEXATTRIBI2IEXTPROC_ALT)glaltGetProcAddressExtension("glVertexAttribI2iEXT","GL_NV_vertex_program4");
	 fn(index1,x1,y1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribI2ivEXT
#define GL_ALT_FUNDEF_VertexAttribI2ivEXT
typedef void (*PFNGLVERTEXATTRIBI2IVEXTPROC_ALT)(GLuint,const GLint *);
static inline void glVertexAttribI2ivEXT(GLuint index1,const GLint * v1)
{
	static PFNGLVERTEXATTRIBI2IVEXTPROC_ALT fn=(PFNGLVERTEXATTRIBI2IVEXTPROC_ALT)glaltGetProcAddressExtension("glVertexAttribI2ivEXT","GL_NV_vertex_program4");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribI2uiEXT
#define GL_ALT_FUNDEF_VertexAttribI2uiEXT
typedef void (*PFNGLVERTEXATTRIBI2UIEXTPROC_ALT)(GLuint,GLuint,GLuint);
static inline void glVertexAttribI2uiEXT(GLuint index1,GLuint x1,GLuint y1)
{
	static PFNGLVERTEXATTRIBI2UIEXTPROC_ALT fn=(PFNGLVERTEXATTRIBI2UIEXTPROC_ALT)glaltGetProcAddressExtension("glVertexAttribI2uiEXT","GL_NV_vertex_program4");
	 fn(index1,x1,y1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribI2uivEXT
#define GL_ALT_FUNDEF_VertexAttribI2uivEXT
typedef void (*PFNGLVERTEXATTRIBI2UIVEXTPROC_ALT)(GLuint,const GLuint *);
static inline void glVertexAttribI2uivEXT(GLuint index1,const GLuint * v1)
{
	static PFNGLVERTEXATTRIBI2UIVEXTPROC_ALT fn=(PFNGLVERTEXATTRIBI2UIVEXTPROC_ALT)glaltGetProcAddressExtension("glVertexAttribI2uivEXT","GL_NV_vertex_program4");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribI3iEXT
#define GL_ALT_FUNDEF_VertexAttribI3iEXT
typedef void (*PFNGLVERTEXATTRIBI3IEXTPROC_ALT)(GLuint,GLint,GLint,GLint);
static inline void glVertexAttribI3iEXT(GLuint index1,GLint x1,GLint y1,GLint z1)
{
	static PFNGLVERTEXATTRIBI3IEXTPROC_ALT fn=(PFNGLVERTEXATTRIBI3IEXTPROC_ALT)glaltGetProcAddressExtension("glVertexAttribI3iEXT","GL_NV_vertex_program4");
	 fn(index1,x1,y1,z1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribI3ivEXT
#define GL_ALT_FUNDEF_VertexAttribI3ivEXT
typedef void (*PFNGLVERTEXATTRIBI3IVEXTPROC_ALT)(GLuint,const GLint *);
static inline void glVertexAttribI3ivEXT(GLuint index1,const GLint * v1)
{
	static PFNGLVERTEXATTRIBI3IVEXTPROC_ALT fn=(PFNGLVERTEXATTRIBI3IVEXTPROC_ALT)glaltGetProcAddressExtension("glVertexAttribI3ivEXT","GL_NV_vertex_program4");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribI3uiEXT
#define GL_ALT_FUNDEF_VertexAttribI3uiEXT
typedef void (*PFNGLVERTEXATTRIBI3UIEXTPROC_ALT)(GLuint,GLuint,GLuint,GLuint);
static inline void glVertexAttribI3uiEXT(GLuint index1,GLuint x1,GLuint y1,GLuint z1)
{
	static PFNGLVERTEXATTRIBI3UIEXTPROC_ALT fn=(PFNGLVERTEXATTRIBI3UIEXTPROC_ALT)glaltGetProcAddressExtension("glVertexAttribI3uiEXT","GL_NV_vertex_program4");
	 fn(index1,x1,y1,z1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribI3uivEXT
#define GL_ALT_FUNDEF_VertexAttribI3uivEXT
typedef void (*PFNGLVERTEXATTRIBI3UIVEXTPROC_ALT)(GLuint,const GLuint *);
static inline void glVertexAttribI3uivEXT(GLuint index1,const GLuint * v1)
{
	static PFNGLVERTEXATTRIBI3UIVEXTPROC_ALT fn=(PFNGLVERTEXATTRIBI3UIVEXTPROC_ALT)glaltGetProcAddressExtension("glVertexAttribI3uivEXT","GL_NV_vertex_program4");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribI4bvEXT
#define GL_ALT_FUNDEF_VertexAttribI4bvEXT
typedef void (*PFNGLVERTEXATTRIBI4BVEXTPROC_ALT)(GLuint,const GLbyte *);
static inline void glVertexAttribI4bvEXT(GLuint index1,const GLbyte * v1)
{
	static PFNGLVERTEXATTRIBI4BVEXTPROC_ALT fn=(PFNGLVERTEXATTRIBI4BVEXTPROC_ALT)glaltGetProcAddressExtension("glVertexAttribI4bvEXT","GL_NV_vertex_program4");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribI4iEXT
#define GL_ALT_FUNDEF_VertexAttribI4iEXT
typedef void (*PFNGLVERTEXATTRIBI4IEXTPROC_ALT)(GLuint,GLint,GLint,GLint,GLint);
static inline void glVertexAttribI4iEXT(GLuint index1,GLint x1,GLint y1,GLint z1,GLint w1)
{
	static PFNGLVERTEXATTRIBI4IEXTPROC_ALT fn=(PFNGLVERTEXATTRIBI4IEXTPROC_ALT)glaltGetProcAddressExtension("glVertexAttribI4iEXT","GL_NV_vertex_program4");
	 fn(index1,x1,y1,z1,w1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribI4ivEXT
#define GL_ALT_FUNDEF_VertexAttribI4ivEXT
typedef void (*PFNGLVERTEXATTRIBI4IVEXTPROC_ALT)(GLuint,const GLint *);
static inline void glVertexAttribI4ivEXT(GLuint index1,const GLint * v1)
{
	static PFNGLVERTEXATTRIBI4IVEXTPROC_ALT fn=(PFNGLVERTEXATTRIBI4IVEXTPROC_ALT)glaltGetProcAddressExtension("glVertexAttribI4ivEXT","GL_NV_vertex_program4");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribI4svEXT
#define GL_ALT_FUNDEF_VertexAttribI4svEXT
typedef void (*PFNGLVERTEXATTRIBI4SVEXTPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttribI4svEXT(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIBI4SVEXTPROC_ALT fn=(PFNGLVERTEXATTRIBI4SVEXTPROC_ALT)glaltGetProcAddressExtension("glVertexAttribI4svEXT","GL_NV_vertex_program4");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribI4ubvEXT
#define GL_ALT_FUNDEF_VertexAttribI4ubvEXT
typedef void (*PFNGLVERTEXATTRIBI4UBVEXTPROC_ALT)(GLuint,const GLubyte *);
static inline void glVertexAttribI4ubvEXT(GLuint index1,const GLubyte * v1)
{
	static PFNGLVERTEXATTRIBI4UBVEXTPROC_ALT fn=(PFNGLVERTEXATTRIBI4UBVEXTPROC_ALT)glaltGetProcAddressExtension("glVertexAttribI4ubvEXT","GL_NV_vertex_program4");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribI4uiEXT
#define GL_ALT_FUNDEF_VertexAttribI4uiEXT
typedef void (*PFNGLVERTEXATTRIBI4UIEXTPROC_ALT)(GLuint,GLuint,GLuint,GLuint,GLuint);
static inline void glVertexAttribI4uiEXT(GLuint index1,GLuint x1,GLuint y1,GLuint z1,GLuint w1)
{
	static PFNGLVERTEXATTRIBI4UIEXTPROC_ALT fn=(PFNGLVERTEXATTRIBI4UIEXTPROC_ALT)glaltGetProcAddressExtension("glVertexAttribI4uiEXT","GL_NV_vertex_program4");
	 fn(index1,x1,y1,z1,w1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribI4uivEXT
#define GL_ALT_FUNDEF_VertexAttribI4uivEXT
typedef void (*PFNGLVERTEXATTRIBI4UIVEXTPROC_ALT)(GLuint,const GLuint *);
static inline void glVertexAttribI4uivEXT(GLuint index1,const GLuint * v1)
{
	static PFNGLVERTEXATTRIBI4UIVEXTPROC_ALT fn=(PFNGLVERTEXATTRIBI4UIVEXTPROC_ALT)glaltGetProcAddressExtension("glVertexAttribI4uivEXT","GL_NV_vertex_program4");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribI4usvEXT
#define GL_ALT_FUNDEF_VertexAttribI4usvEXT
typedef void (*PFNGLVERTEXATTRIBI4USVEXTPROC_ALT)(GLuint,const GLushort *);
static inline void glVertexAttribI4usvEXT(GLuint index1,const GLushort * v1)
{
	static PFNGLVERTEXATTRIBI4USVEXTPROC_ALT fn=(PFNGLVERTEXATTRIBI4USVEXTPROC_ALT)glaltGetProcAddressExtension("glVertexAttribI4usvEXT","GL_NV_vertex_program4");
	 fn(index1,v1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_VertexAttribIPointerEXT
#define GL_ALT_FUNDEF_VertexAttribIPointerEXT
typedef void (*PFNGLVERTEXATTRIBIPOINTEREXTPROC_ALT)(GLuint,GLint,GLenum,GLsizei,const void *);
static inline void glVertexAttribIPointerEXT(GLuint index1,GLint size1,GLenum type1,GLsizei stride1,const void * pointer1)
{
	static PFNGLVERTEXATTRIBIPOINTEREXTPROC_ALT fn=(PFNGLVERTEXATTRIBIPOINTEREXTPROC_ALT)glaltGetProcAddressExtension("glVertexAttribIPointerEXT","GL_NV_vertex_program4");
	 fn(index1,size1,type1,stride1,pointer1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_NV_video_capture
#define GL_NV_video_capture
#ifndef GL_VIDEO_BUFFER_NV
#define GL_VIDEO_BUFFER_NV 0x9020
#endif //GL_VIDEO_BUFFER_NV
#ifndef GL_VIDEO_BUFFER_BINDING_NV
#define GL_VIDEO_BUFFER_BINDING_NV 0x9021
#endif //GL_VIDEO_BUFFER_BINDING_NV
#ifndef GL_FIELD_UPPER_NV
#define GL_FIELD_UPPER_NV 0x9022
#endif //GL_FIELD_UPPER_NV
#ifndef GL_FIELD_LOWER_NV
#define GL_FIELD_LOWER_NV 0x9023
#endif //GL_FIELD_LOWER_NV
#ifndef GL_NUM_VIDEO_CAPTURE_STREAMS_NV
#define GL_NUM_VIDEO_CAPTURE_STREAMS_NV 0x9024
#endif //GL_NUM_VIDEO_CAPTURE_STREAMS_NV
#ifndef GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV
#define GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV 0x9025
#endif //GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV
#ifndef GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV
#define GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV 0x9026
#endif //GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV
#ifndef GL_LAST_VIDEO_CAPTURE_STATUS_NV
#define GL_LAST_VIDEO_CAPTURE_STATUS_NV 0x9027
#endif //GL_LAST_VIDEO_CAPTURE_STATUS_NV
#ifndef GL_VIDEO_BUFFER_PITCH_NV
#define GL_VIDEO_BUFFER_PITCH_NV 0x9028
#endif //GL_VIDEO_BUFFER_PITCH_NV
#ifndef GL_VIDEO_COLOR_CONVERSION_MATRIX_NV
#define GL_VIDEO_COLOR_CONVERSION_MATRIX_NV 0x9029
#endif //GL_VIDEO_COLOR_CONVERSION_MATRIX_NV
#ifndef GL_VIDEO_COLOR_CONVERSION_MAX_NV
#define GL_VIDEO_COLOR_CONVERSION_MAX_NV 0x902A
#endif //GL_VIDEO_COLOR_CONVERSION_MAX_NV
#ifndef GL_VIDEO_COLOR_CONVERSION_MIN_NV
#define GL_VIDEO_COLOR_CONVERSION_MIN_NV 0x902B
#endif //GL_VIDEO_COLOR_CONVERSION_MIN_NV
#ifndef GL_VIDEO_COLOR_CONVERSION_OFFSET_NV
#define GL_VIDEO_COLOR_CONVERSION_OFFSET_NV 0x902C
#endif //GL_VIDEO_COLOR_CONVERSION_OFFSET_NV
#ifndef GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV
#define GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV 0x902D
#endif //GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV
#ifndef GL_PARTIAL_SUCCESS_NV
#define GL_PARTIAL_SUCCESS_NV 0x902E
#endif //GL_PARTIAL_SUCCESS_NV
#ifndef GL_SUCCESS_NV
#define GL_SUCCESS_NV 0x902F
#endif //GL_SUCCESS_NV
#ifndef GL_FAILURE_NV
#define GL_FAILURE_NV 0x9030
#endif //GL_FAILURE_NV
#ifndef GL_YCBYCR8_422_NV
#define GL_YCBYCR8_422_NV 0x9031
#endif //GL_YCBYCR8_422_NV
#ifndef GL_YCBAYCR8A_4224_NV
#define GL_YCBAYCR8A_4224_NV 0x9032
#endif //GL_YCBAYCR8A_4224_NV
#ifndef GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV
#define GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV 0x9033
#endif //GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV
#ifndef GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV
#define GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV 0x9034
#endif //GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV
#ifndef GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV
#define GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV 0x9035
#endif //GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV
#ifndef GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV
#define GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV 0x9036
#endif //GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV
#ifndef GL_Z4Y12Z4CB12Z4CR12_444_NV
#define GL_Z4Y12Z4CB12Z4CR12_444_NV 0x9037
#endif //GL_Z4Y12Z4CB12Z4CR12_444_NV
#ifndef GL_VIDEO_CAPTURE_FRAME_WIDTH_NV
#define GL_VIDEO_CAPTURE_FRAME_WIDTH_NV 0x9038
#endif //GL_VIDEO_CAPTURE_FRAME_WIDTH_NV
#ifndef GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV
#define GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV 0x9039
#endif //GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV
#ifndef GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV
#define GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV 0x903A
#endif //GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV
#ifndef GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV
#define GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV 0x903B
#endif //GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV
#ifndef GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV
#define GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV 0x903C
#endif //GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_BeginVideoCaptureNV
#define GL_ALT_FUNDEF_BeginVideoCaptureNV
typedef void (*PFNGLBEGINVIDEOCAPTURENVPROC_ALT)(GLuint);
static inline void glBeginVideoCaptureNV(GLuint video_capture_slot1)
{
	static PFNGLBEGINVIDEOCAPTURENVPROC_ALT fn=(PFNGLBEGINVIDEOCAPTURENVPROC_ALT)glaltGetProcAddressExtension("glBeginVideoCaptureNV","GL_NV_video_capture");
	 fn(video_capture_slot1);
}
#endif

#ifndef	GL_ALT_FUNDEF_BindVideoCaptureStreamBufferNV
#define GL_ALT_FUNDEF_BindVideoCaptureStreamBufferNV
typedef void (*PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC_ALT)(GLuint,GLuint,GLenum,GLintptrARB);
static inline void glBindVideoCaptureStreamBufferNV(GLuint video_capture_slot1,GLuint stream1,GLenum frame_region1,GLintptrARB offset1)
{
	static PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC_ALT fn=(PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC_ALT)glaltGetProcAddressExtension("glBindVideoCaptureStreamBufferNV","GL_NV_video_capture");
	 fn(video_capture_slot1,stream1,frame_region1,offset1);
}
#endif

#ifndef	GL_ALT_FUNDEF_BindVideoCaptureStreamTextureNV
#define GL_ALT_FUNDEF_BindVideoCaptureStreamTextureNV
typedef void (*PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC_ALT)(GLuint,GLuint,GLenum,GLenum,GLuint);
static inline void glBindVideoCaptureStreamTextureNV(GLuint video_capture_slot1,GLuint stream1,GLenum frame_region1,GLenum target1,GLuint texture1)
{
	static PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC_ALT fn=(PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC_ALT)glaltGetProcAddressExtension("glBindVideoCaptureStreamTextureNV","GL_NV_video_capture");
	 fn(video_capture_slot1,stream1,frame_region1,target1,texture1);
}
#endif

#ifndef	GL_ALT_FUNDEF_EndVideoCaptureNV
#define GL_ALT_FUNDEF_EndVideoCaptureNV
typedef void (*PFNGLENDVIDEOCAPTURENVPROC_ALT)(GLuint);
static inline void glEndVideoCaptureNV(GLuint video_capture_slot1)
{
	static PFNGLENDVIDEOCAPTURENVPROC_ALT fn=(PFNGLENDVIDEOCAPTURENVPROC_ALT)glaltGetProcAddressExtension("glEndVideoCaptureNV","GL_NV_video_capture");
	 fn(video_capture_slot1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetVideoCaptureStreamdvNV
#define GL_ALT_FUNDEF_GetVideoCaptureStreamdvNV
typedef void (*PFNGLGETVIDEOCAPTURESTREAMDVNVPROC_ALT)(GLuint,GLuint,GLenum,GLdouble *);
static inline void glGetVideoCaptureStreamdvNV(GLuint video_capture_slot1,GLuint stream1,GLenum pname1,GLdouble * params1)
{
	static PFNGLGETVIDEOCAPTURESTREAMDVNVPROC_ALT fn=(PFNGLGETVIDEOCAPTURESTREAMDVNVPROC_ALT)glaltGetProcAddressExtension("glGetVideoCaptureStreamdvNV","GL_NV_video_capture");
	 fn(video_capture_slot1,stream1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetVideoCaptureStreamfvNV
#define GL_ALT_FUNDEF_GetVideoCaptureStreamfvNV
typedef void (*PFNGLGETVIDEOCAPTURESTREAMFVNVPROC_ALT)(GLuint,GLuint,GLenum,GLfloat *);
static inline void glGetVideoCaptureStreamfvNV(GLuint video_capture_slot1,GLuint stream1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETVIDEOCAPTURESTREAMFVNVPROC_ALT fn=(PFNGLGETVIDEOCAPTURESTREAMFVNVPROC_ALT)glaltGetProcAddressExtension("glGetVideoCaptureStreamfvNV","GL_NV_video_capture");
	 fn(video_capture_slot1,stream1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetVideoCaptureStreamivNV
#define GL_ALT_FUNDEF_GetVideoCaptureStreamivNV
typedef void (*PFNGLGETVIDEOCAPTURESTREAMIVNVPROC_ALT)(GLuint,GLuint,GLenum,GLint *);
static inline void glGetVideoCaptureStreamivNV(GLuint video_capture_slot1,GLuint stream1,GLenum pname1,GLint * params1)
{
	static PFNGLGETVIDEOCAPTURESTREAMIVNVPROC_ALT fn=(PFNGLGETVIDEOCAPTURESTREAMIVNVPROC_ALT)glaltGetProcAddressExtension("glGetVideoCaptureStreamivNV","GL_NV_video_capture");
	 fn(video_capture_slot1,stream1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetVideoCaptureivNV
#define GL_ALT_FUNDEF_GetVideoCaptureivNV
typedef void (*PFNGLGETVIDEOCAPTUREIVNVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetVideoCaptureivNV(GLuint video_capture_slot1,GLenum pname1,GLint * params1)
{
	static PFNGLGETVIDEOCAPTUREIVNVPROC_ALT fn=(PFNGLGETVIDEOCAPTUREIVNVPROC_ALT)glaltGetProcAddressExtension("glGetVideoCaptureivNV","GL_NV_video_capture");
	 fn(video_capture_slot1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VideoCaptureNV
#define GL_ALT_FUNDEF_VideoCaptureNV
typedef GLenum (*PFNGLVIDEOCAPTURENVPROC_ALT)(GLuint,GLuint *,GLuint64EXT *);
static inline GLenum glVideoCaptureNV(GLuint video_capture_slot1,GLuint * sequence_num1,GLuint64EXT * capture_time1)
{
	static PFNGLVIDEOCAPTURENVPROC_ALT fn=(PFNGLVIDEOCAPTURENVPROC_ALT)glaltGetProcAddressExtension("glVideoCaptureNV","GL_NV_video_capture");
	return fn(video_capture_slot1,sequence_num1,capture_time1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VideoCaptureStreamParameterdvNV
#define GL_ALT_FUNDEF_VideoCaptureStreamParameterdvNV
typedef void (*PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC_ALT)(GLuint,GLuint,GLenum,const GLdouble *);
static inline void glVideoCaptureStreamParameterdvNV(GLuint video_capture_slot1,GLuint stream1,GLenum pname1,const GLdouble * params1)
{
	static PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC_ALT fn=(PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC_ALT)glaltGetProcAddressExtension("glVideoCaptureStreamParameterdvNV","GL_NV_video_capture");
	 fn(video_capture_slot1,stream1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VideoCaptureStreamParameterfvNV
#define GL_ALT_FUNDEF_VideoCaptureStreamParameterfvNV
typedef void (*PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC_ALT)(GLuint,GLuint,GLenum,const GLfloat *);
static inline void glVideoCaptureStreamParameterfvNV(GLuint video_capture_slot1,GLuint stream1,GLenum pname1,const GLfloat * params1)
{
	static PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC_ALT fn=(PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC_ALT)glaltGetProcAddressExtension("glVideoCaptureStreamParameterfvNV","GL_NV_video_capture");
	 fn(video_capture_slot1,stream1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_VideoCaptureStreamParameterivNV
#define GL_ALT_FUNDEF_VideoCaptureStreamParameterivNV
typedef void (*PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC_ALT)(GLuint,GLuint,GLenum,const GLint *);
static inline void glVideoCaptureStreamParameterivNV(GLuint video_capture_slot1,GLuint stream1,GLenum pname1,const GLint * params1)
{
	static PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC_ALT fn=(PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC_ALT)glaltGetProcAddressExtension("glVideoCaptureStreamParameterivNV","GL_NV_video_capture");
	 fn(video_capture_slot1,stream1,pname1,params1);
}
#endif
CGUARDEND

#endif

#ifndef GL_OES_byte_coordinates
#define GL_OES_byte_coordinates
#ifndef GL_BYTE
#define GL_BYTE 0x1400
#endif //GL_BYTE
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_MultiTexCoord1bOES
#define GL_ALT_FUNDEF_MultiTexCoord1bOES
typedef void (*PFNGLMULTITEXCOORD1BOESPROC_ALT)(GLenum,GLbyte);
static inline void glMultiTexCoord1bOES(GLenum texture1,GLbyte s1)
{
	static PFNGLMULTITEXCOORD1BOESPROC_ALT fn=(PFNGLMULTITEXCOORD1BOESPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord1bOES","GL_OES_byte_coordinates");
	 fn(texture1,s1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexCoord1bvOES
#define GL_ALT_FUNDEF_MultiTexCoord1bvOES
typedef void (*PFNGLMULTITEXCOORD1BVOESPROC_ALT)(GLenum,const GLbyte *);
static inline void glMultiTexCoord1bvOES(GLenum texture1,const GLbyte * coords1)
{
	static PFNGLMULTITEXCOORD1BVOESPROC_ALT fn=(PFNGLMULTITEXCOORD1BVOESPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord1bvOES","GL_OES_byte_coordinates");
	 fn(texture1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexCoord2bOES
#define GL_ALT_FUNDEF_MultiTexCoord2bOES
typedef void (*PFNGLMULTITEXCOORD2BOESPROC_ALT)(GLenum,GLbyte,GLbyte);
static inline void glMultiTexCoord2bOES(GLenum texture1,GLbyte s1,GLbyte t1)
{
	static PFNGLMULTITEXCOORD2BOESPROC_ALT fn=(PFNGLMULTITEXCOORD2BOESPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord2bOES","GL_OES_byte_coordinates");
	 fn(texture1,s1,t1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexCoord2bvOES
#define GL_ALT_FUNDEF_MultiTexCoord2bvOES
typedef void (*PFNGLMULTITEXCOORD2BVOESPROC_ALT)(GLenum,const GLbyte *);
static inline void glMultiTexCoord2bvOES(GLenum texture1,const GLbyte * coords1)
{
	static PFNGLMULTITEXCOORD2BVOESPROC_ALT fn=(PFNGLMULTITEXCOORD2BVOESPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord2bvOES","GL_OES_byte_coordinates");
	 fn(texture1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexCoord3bOES
#define GL_ALT_FUNDEF_MultiTexCoord3bOES
typedef void (*PFNGLMULTITEXCOORD3BOESPROC_ALT)(GLenum,GLbyte,GLbyte,GLbyte);
static inline void glMultiTexCoord3bOES(GLenum texture1,GLbyte s1,GLbyte t1,GLbyte r1)
{
	static PFNGLMULTITEXCOORD3BOESPROC_ALT fn=(PFNGLMULTITEXCOORD3BOESPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord3bOES","GL_OES_byte_coordinates");
	 fn(texture1,s1,t1,r1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexCoord3bvOES
#define GL_ALT_FUNDEF_MultiTexCoord3bvOES
typedef void (*PFNGLMULTITEXCOORD3BVOESPROC_ALT)(GLenum,const GLbyte *);
static inline void glMultiTexCoord3bvOES(GLenum texture1,const GLbyte * coords1)
{
	static PFNGLMULTITEXCOORD3BVOESPROC_ALT fn=(PFNGLMULTITEXCOORD3BVOESPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord3bvOES","GL_OES_byte_coordinates");
	 fn(texture1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexCoord4bOES
#define GL_ALT_FUNDEF_MultiTexCoord4bOES
typedef void (*PFNGLMULTITEXCOORD4BOESPROC_ALT)(GLenum,GLbyte,GLbyte,GLbyte,GLbyte);
static inline void glMultiTexCoord4bOES(GLenum texture1,GLbyte s1,GLbyte t1,GLbyte r1,GLbyte q1)
{
	static PFNGLMULTITEXCOORD4BOESPROC_ALT fn=(PFNGLMULTITEXCOORD4BOESPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord4bOES","GL_OES_byte_coordinates");
	 fn(texture1,s1,t1,r1,q1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexCoord4bvOES
#define GL_ALT_FUNDEF_MultiTexCoord4bvOES
typedef void (*PFNGLMULTITEXCOORD4BVOESPROC_ALT)(GLenum,const GLbyte *);
static inline void glMultiTexCoord4bvOES(GLenum texture1,const GLbyte * coords1)
{
	static PFNGLMULTITEXCOORD4BVOESPROC_ALT fn=(PFNGLMULTITEXCOORD4BVOESPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord4bvOES","GL_OES_byte_coordinates");
	 fn(texture1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord1bOES
#define GL_ALT_FUNDEF_TexCoord1bOES
typedef void (*PFNGLTEXCOORD1BOESPROC_ALT)(GLbyte);
static inline void glTexCoord1bOES(GLbyte s1)
{
	static PFNGLTEXCOORD1BOESPROC_ALT fn=(PFNGLTEXCOORD1BOESPROC_ALT)glaltGetProcAddressExtension("glTexCoord1bOES","GL_OES_byte_coordinates");
	 fn(s1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord1bvOES
#define GL_ALT_FUNDEF_TexCoord1bvOES
typedef void (*PFNGLTEXCOORD1BVOESPROC_ALT)(const GLbyte *);
static inline void glTexCoord1bvOES(const GLbyte * coords1)
{
	static PFNGLTEXCOORD1BVOESPROC_ALT fn=(PFNGLTEXCOORD1BVOESPROC_ALT)glaltGetProcAddressExtension("glTexCoord1bvOES","GL_OES_byte_coordinates");
	 fn(coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord2bOES
#define GL_ALT_FUNDEF_TexCoord2bOES
typedef void (*PFNGLTEXCOORD2BOESPROC_ALT)(GLbyte,GLbyte);
static inline void glTexCoord2bOES(GLbyte s1,GLbyte t1)
{
	static PFNGLTEXCOORD2BOESPROC_ALT fn=(PFNGLTEXCOORD2BOESPROC_ALT)glaltGetProcAddressExtension("glTexCoord2bOES","GL_OES_byte_coordinates");
	 fn(s1,t1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord2bvOES
#define GL_ALT_FUNDEF_TexCoord2bvOES
typedef void (*PFNGLTEXCOORD2BVOESPROC_ALT)(const GLbyte *);
static inline void glTexCoord2bvOES(const GLbyte * coords1)
{
	static PFNGLTEXCOORD2BVOESPROC_ALT fn=(PFNGLTEXCOORD2BVOESPROC_ALT)glaltGetProcAddressExtension("glTexCoord2bvOES","GL_OES_byte_coordinates");
	 fn(coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord3bOES
#define GL_ALT_FUNDEF_TexCoord3bOES
typedef void (*PFNGLTEXCOORD3BOESPROC_ALT)(GLbyte,GLbyte,GLbyte);
static inline void glTexCoord3bOES(GLbyte s1,GLbyte t1,GLbyte r1)
{
	static PFNGLTEXCOORD3BOESPROC_ALT fn=(PFNGLTEXCOORD3BOESPROC_ALT)glaltGetProcAddressExtension("glTexCoord3bOES","GL_OES_byte_coordinates");
	 fn(s1,t1,r1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord3bvOES
#define GL_ALT_FUNDEF_TexCoord3bvOES
typedef void (*PFNGLTEXCOORD3BVOESPROC_ALT)(const GLbyte *);
static inline void glTexCoord3bvOES(const GLbyte * coords1)
{
	static PFNGLTEXCOORD3BVOESPROC_ALT fn=(PFNGLTEXCOORD3BVOESPROC_ALT)glaltGetProcAddressExtension("glTexCoord3bvOES","GL_OES_byte_coordinates");
	 fn(coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord4bOES
#define GL_ALT_FUNDEF_TexCoord4bOES
typedef void (*PFNGLTEXCOORD4BOESPROC_ALT)(GLbyte,GLbyte,GLbyte,GLbyte);
static inline void glTexCoord4bOES(GLbyte s1,GLbyte t1,GLbyte r1,GLbyte q1)
{
	static PFNGLTEXCOORD4BOESPROC_ALT fn=(PFNGLTEXCOORD4BOESPROC_ALT)glaltGetProcAddressExtension("glTexCoord4bOES","GL_OES_byte_coordinates");
	 fn(s1,t1,r1,q1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord4bvOES
#define GL_ALT_FUNDEF_TexCoord4bvOES
typedef void (*PFNGLTEXCOORD4BVOESPROC_ALT)(const GLbyte *);
static inline void glTexCoord4bvOES(const GLbyte * coords1)
{
	static PFNGLTEXCOORD4BVOESPROC_ALT fn=(PFNGLTEXCOORD4BVOESPROC_ALT)glaltGetProcAddressExtension("glTexCoord4bvOES","GL_OES_byte_coordinates");
	 fn(coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Vertex2bOES
#define GL_ALT_FUNDEF_Vertex2bOES
typedef void (*PFNGLVERTEX2BOESPROC_ALT)(GLbyte,GLbyte);
static inline void glVertex2bOES(GLbyte x1,GLbyte y1)
{
	static PFNGLVERTEX2BOESPROC_ALT fn=(PFNGLVERTEX2BOESPROC_ALT)glaltGetProcAddressExtension("glVertex2bOES","GL_OES_byte_coordinates");
	 fn(x1,y1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Vertex2bvOES
#define GL_ALT_FUNDEF_Vertex2bvOES
typedef void (*PFNGLVERTEX2BVOESPROC_ALT)(const GLbyte *);
static inline void glVertex2bvOES(const GLbyte * coords1)
{
	static PFNGLVERTEX2BVOESPROC_ALT fn=(PFNGLVERTEX2BVOESPROC_ALT)glaltGetProcAddressExtension("glVertex2bvOES","GL_OES_byte_coordinates");
	 fn(coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Vertex3bOES
#define GL_ALT_FUNDEF_Vertex3bOES
typedef void (*PFNGLVERTEX3BOESPROC_ALT)(GLbyte,GLbyte,GLbyte);
static inline void glVertex3bOES(GLbyte x1,GLbyte y1,GLbyte z1)
{
	static PFNGLVERTEX3BOESPROC_ALT fn=(PFNGLVERTEX3BOESPROC_ALT)glaltGetProcAddressExtension("glVertex3bOES","GL_OES_byte_coordinates");
	 fn(x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Vertex3bvOES
#define GL_ALT_FUNDEF_Vertex3bvOES
typedef void (*PFNGLVERTEX3BVOESPROC_ALT)(const GLbyte *);
static inline void glVertex3bvOES(const GLbyte * coords1)
{
	static PFNGLVERTEX3BVOESPROC_ALT fn=(PFNGLVERTEX3BVOESPROC_ALT)glaltGetProcAddressExtension("glVertex3bvOES","GL_OES_byte_coordinates");
	 fn(coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Vertex4bOES
#define GL_ALT_FUNDEF_Vertex4bOES
typedef void (*PFNGLVERTEX4BOESPROC_ALT)(GLbyte,GLbyte,GLbyte,GLbyte);
static inline void glVertex4bOES(GLbyte x1,GLbyte y1,GLbyte z1,GLbyte w1)
{
	static PFNGLVERTEX4BOESPROC_ALT fn=(PFNGLVERTEX4BOESPROC_ALT)glaltGetProcAddressExtension("glVertex4bOES","GL_OES_byte_coordinates");
	 fn(x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Vertex4bvOES
#define GL_ALT_FUNDEF_Vertex4bvOES
typedef void (*PFNGLVERTEX4BVOESPROC_ALT)(const GLbyte *);
static inline void glVertex4bvOES(const GLbyte * coords1)
{
	static PFNGLVERTEX4BVOESPROC_ALT fn=(PFNGLVERTEX4BVOESPROC_ALT)glaltGetProcAddressExtension("glVertex4bvOES","GL_OES_byte_coordinates");
	 fn(coords1);
}
#endif
CGUARDEND

#endif

#ifndef GL_OES_compressed_paletted_texture
#define GL_OES_compressed_paletted_texture
#ifndef GL_PALETTE4_RGB8_OES
#define GL_PALETTE4_RGB8_OES 0x8B90
#endif //GL_PALETTE4_RGB8_OES
#ifndef GL_PALETTE4_RGBA8_OES
#define GL_PALETTE4_RGBA8_OES 0x8B91
#endif //GL_PALETTE4_RGBA8_OES
#ifndef GL_PALETTE4_R5_G6_B5_OES
#define GL_PALETTE4_R5_G6_B5_OES 0x8B92
#endif //GL_PALETTE4_R5_G6_B5_OES
#ifndef GL_PALETTE4_RGBA4_OES
#define GL_PALETTE4_RGBA4_OES 0x8B93
#endif //GL_PALETTE4_RGBA4_OES
#ifndef GL_PALETTE4_RGB5_A1_OES
#define GL_PALETTE4_RGB5_A1_OES 0x8B94
#endif //GL_PALETTE4_RGB5_A1_OES
#ifndef GL_PALETTE8_RGB8_OES
#define GL_PALETTE8_RGB8_OES 0x8B95
#endif //GL_PALETTE8_RGB8_OES
#ifndef GL_PALETTE8_RGBA8_OES
#define GL_PALETTE8_RGBA8_OES 0x8B96
#endif //GL_PALETTE8_RGBA8_OES
#ifndef GL_PALETTE8_R5_G6_B5_OES
#define GL_PALETTE8_R5_G6_B5_OES 0x8B97
#endif //GL_PALETTE8_R5_G6_B5_OES
#ifndef GL_PALETTE8_RGBA4_OES
#define GL_PALETTE8_RGBA4_OES 0x8B98
#endif //GL_PALETTE8_RGBA4_OES
#ifndef GL_PALETTE8_RGB5_A1_OES
#define GL_PALETTE8_RGB5_A1_OES 0x8B99
#endif //GL_PALETTE8_RGB5_A1_OES
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_OES_fixed_point
#define GL_OES_fixed_point
#ifndef GL_FIXED_OES
#define GL_FIXED_OES 0x140C
#endif //GL_FIXED_OES
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_AccumxOES
#define GL_ALT_FUNDEF_AccumxOES
typedef void (*PFNGLACCUMXOESPROC_ALT)(GLenum,GLfixed);
static inline void glAccumxOES(GLenum op1,GLfixed value1)
{
	static PFNGLACCUMXOESPROC_ALT fn=(PFNGLACCUMXOESPROC_ALT)glaltGetProcAddressExtension("glAccumxOES","GL_OES_fixed_point");
	 fn(op1,value1);
}
#endif

#ifndef	GL_ALT_FUNDEF_AlphaFuncxOES
#define GL_ALT_FUNDEF_AlphaFuncxOES
typedef void (*PFNGLALPHAFUNCXOESPROC_ALT)(GLenum,GLfixed);
static inline void glAlphaFuncxOES(GLenum func1,GLfixed ref1)
{
	static PFNGLALPHAFUNCXOESPROC_ALT fn=(PFNGLALPHAFUNCXOESPROC_ALT)glaltGetProcAddressExtension("glAlphaFuncxOES","GL_OES_fixed_point");
	 fn(func1,ref1);
}
#endif

#ifndef	GL_ALT_FUNDEF_BitmapxOES
#define GL_ALT_FUNDEF_BitmapxOES
typedef void (*PFNGLBITMAPXOESPROC_ALT)(GLsizei,GLsizei,GLfixed,GLfixed,GLfixed,GLfixed,const GLubyte *);
static inline void glBitmapxOES(GLsizei width1,GLsizei height1,GLfixed xorig1,GLfixed yorig1,GLfixed xmove1,GLfixed ymove1,const GLubyte * bitmap1)
{
	static PFNGLBITMAPXOESPROC_ALT fn=(PFNGLBITMAPXOESPROC_ALT)glaltGetProcAddressExtension("glBitmapxOES","GL_OES_fixed_point");
	 fn(width1,height1,xorig1,yorig1,xmove1,ymove1,bitmap1);
}
#endif

#ifndef	GL_ALT_FUNDEF_BlendColorxOES
#define GL_ALT_FUNDEF_BlendColorxOES
typedef void (*PFNGLBLENDCOLORXOESPROC_ALT)(GLfixed,GLfixed,GLfixed,GLfixed);
static inline void glBlendColorxOES(GLfixed red1,GLfixed green1,GLfixed blue1,GLfixed alpha1)
{
	static PFNGLBLENDCOLORXOESPROC_ALT fn=(PFNGLBLENDCOLORXOESPROC_ALT)glaltGetProcAddressExtension("glBlendColorxOES","GL_OES_fixed_point");
	 fn(red1,green1,blue1,alpha1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ClearAccumxOES
#define GL_ALT_FUNDEF_ClearAccumxOES
typedef void (*PFNGLCLEARACCUMXOESPROC_ALT)(GLfixed,GLfixed,GLfixed,GLfixed);
static inline void glClearAccumxOES(GLfixed red1,GLfixed green1,GLfixed blue1,GLfixed alpha1)
{
	static PFNGLCLEARACCUMXOESPROC_ALT fn=(PFNGLCLEARACCUMXOESPROC_ALT)glaltGetProcAddressExtension("glClearAccumxOES","GL_OES_fixed_point");
	 fn(red1,green1,blue1,alpha1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ClearColorxOES
#define GL_ALT_FUNDEF_ClearColorxOES
typedef void (*PFNGLCLEARCOLORXOESPROC_ALT)(GLfixed,GLfixed,GLfixed,GLfixed);
static inline void glClearColorxOES(GLfixed red1,GLfixed green1,GLfixed blue1,GLfixed alpha1)
{
	static PFNGLCLEARCOLORXOESPROC_ALT fn=(PFNGLCLEARCOLORXOESPROC_ALT)glaltGetProcAddressExtension("glClearColorxOES","GL_OES_fixed_point");
	 fn(red1,green1,blue1,alpha1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ClearDepthxOES
#define GL_ALT_FUNDEF_ClearDepthxOES
typedef void (*PFNGLCLEARDEPTHXOESPROC_ALT)(GLfixed);
static inline void glClearDepthxOES(GLfixed depth1)
{
	static PFNGLCLEARDEPTHXOESPROC_ALT fn=(PFNGLCLEARDEPTHXOESPROC_ALT)glaltGetProcAddressExtension("glClearDepthxOES","GL_OES_fixed_point");
	 fn(depth1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ClipPlanexOES
#define GL_ALT_FUNDEF_ClipPlanexOES
typedef void (*PFNGLCLIPPLANEXOESPROC_ALT)(GLenum,const GLfixed *);
static inline void glClipPlanexOES(GLenum plane1,const GLfixed * equation1)
{
	static PFNGLCLIPPLANEXOESPROC_ALT fn=(PFNGLCLIPPLANEXOESPROC_ALT)glaltGetProcAddressExtension("glClipPlanexOES","GL_OES_fixed_point");
	 fn(plane1,equation1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Color3xOES
#define GL_ALT_FUNDEF_Color3xOES
typedef void (*PFNGLCOLOR3XOESPROC_ALT)(GLfixed,GLfixed,GLfixed);
static inline void glColor3xOES(GLfixed red1,GLfixed green1,GLfixed blue1)
{
	static PFNGLCOLOR3XOESPROC_ALT fn=(PFNGLCOLOR3XOESPROC_ALT)glaltGetProcAddressExtension("glColor3xOES","GL_OES_fixed_point");
	 fn(red1,green1,blue1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Color3xvOES
#define GL_ALT_FUNDEF_Color3xvOES
typedef void (*PFNGLCOLOR3XVOESPROC_ALT)(const GLfixed *);
static inline void glColor3xvOES(const GLfixed * components1)
{
	static PFNGLCOLOR3XVOESPROC_ALT fn=(PFNGLCOLOR3XVOESPROC_ALT)glaltGetProcAddressExtension("glColor3xvOES","GL_OES_fixed_point");
	 fn(components1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Color4xOES
#define GL_ALT_FUNDEF_Color4xOES
typedef void (*PFNGLCOLOR4XOESPROC_ALT)(GLfixed,GLfixed,GLfixed,GLfixed);
static inline void glColor4xOES(GLfixed red1,GLfixed green1,GLfixed blue1,GLfixed alpha1)
{
	static PFNGLCOLOR4XOESPROC_ALT fn=(PFNGLCOLOR4XOESPROC_ALT)glaltGetProcAddressExtension("glColor4xOES","GL_OES_fixed_point");
	 fn(red1,green1,blue1,alpha1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Color4xvOES
#define GL_ALT_FUNDEF_Color4xvOES
typedef void (*PFNGLCOLOR4XVOESPROC_ALT)(const GLfixed *);
static inline void glColor4xvOES(const GLfixed * components1)
{
	static PFNGLCOLOR4XVOESPROC_ALT fn=(PFNGLCOLOR4XVOESPROC_ALT)glaltGetProcAddressExtension("glColor4xvOES","GL_OES_fixed_point");
	 fn(components1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ConvolutionParameterxOES
#define GL_ALT_FUNDEF_ConvolutionParameterxOES
typedef void (*PFNGLCONVOLUTIONPARAMETERXOESPROC_ALT)(GLenum,GLenum,GLfixed);
static inline void glConvolutionParameterxOES(GLenum target1,GLenum pname1,GLfixed param1)
{
	static PFNGLCONVOLUTIONPARAMETERXOESPROC_ALT fn=(PFNGLCONVOLUTIONPARAMETERXOESPROC_ALT)glaltGetProcAddressExtension("glConvolutionParameterxOES","GL_OES_fixed_point");
	 fn(target1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ConvolutionParameterxvOES
#define GL_ALT_FUNDEF_ConvolutionParameterxvOES
typedef void (*PFNGLCONVOLUTIONPARAMETERXVOESPROC_ALT)(GLenum,GLenum,const GLfixed *);
static inline void glConvolutionParameterxvOES(GLenum target1,GLenum pname1,const GLfixed * params1)
{
	static PFNGLCONVOLUTIONPARAMETERXVOESPROC_ALT fn=(PFNGLCONVOLUTIONPARAMETERXVOESPROC_ALT)glaltGetProcAddressExtension("glConvolutionParameterxvOES","GL_OES_fixed_point");
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DepthRangexOES
#define GL_ALT_FUNDEF_DepthRangexOES
typedef void (*PFNGLDEPTHRANGEXOESPROC_ALT)(GLfixed,GLfixed);
static inline void glDepthRangexOES(GLfixed n1,GLfixed f1)
{
	static PFNGLDEPTHRANGEXOESPROC_ALT fn=(PFNGLDEPTHRANGEXOESPROC_ALT)glaltGetProcAddressExtension("glDepthRangexOES","GL_OES_fixed_point");
	 fn(n1,f1);
}
#endif

#ifndef	GL_ALT_FUNDEF_EvalCoord1xOES
#define GL_ALT_FUNDEF_EvalCoord1xOES
typedef void (*PFNGLEVALCOORD1XOESPROC_ALT)(GLfixed);
static inline void glEvalCoord1xOES(GLfixed u1)
{
	static PFNGLEVALCOORD1XOESPROC_ALT fn=(PFNGLEVALCOORD1XOESPROC_ALT)glaltGetProcAddressExtension("glEvalCoord1xOES","GL_OES_fixed_point");
	 fn(u1);
}
#endif

#ifndef	GL_ALT_FUNDEF_EvalCoord1xvOES
#define GL_ALT_FUNDEF_EvalCoord1xvOES
typedef void (*PFNGLEVALCOORD1XVOESPROC_ALT)(const GLfixed *);
static inline void glEvalCoord1xvOES(const GLfixed * coords1)
{
	static PFNGLEVALCOORD1XVOESPROC_ALT fn=(PFNGLEVALCOORD1XVOESPROC_ALT)glaltGetProcAddressExtension("glEvalCoord1xvOES","GL_OES_fixed_point");
	 fn(coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_EvalCoord2xOES
#define GL_ALT_FUNDEF_EvalCoord2xOES
typedef void (*PFNGLEVALCOORD2XOESPROC_ALT)(GLfixed,GLfixed);
static inline void glEvalCoord2xOES(GLfixed u1,GLfixed v1)
{
	static PFNGLEVALCOORD2XOESPROC_ALT fn=(PFNGLEVALCOORD2XOESPROC_ALT)glaltGetProcAddressExtension("glEvalCoord2xOES","GL_OES_fixed_point");
	 fn(u1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_EvalCoord2xvOES
#define GL_ALT_FUNDEF_EvalCoord2xvOES
typedef void (*PFNGLEVALCOORD2XVOESPROC_ALT)(const GLfixed *);
static inline void glEvalCoord2xvOES(const GLfixed * coords1)
{
	static PFNGLEVALCOORD2XVOESPROC_ALT fn=(PFNGLEVALCOORD2XVOESPROC_ALT)glaltGetProcAddressExtension("glEvalCoord2xvOES","GL_OES_fixed_point");
	 fn(coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FeedbackBufferxOES
#define GL_ALT_FUNDEF_FeedbackBufferxOES
typedef void (*PFNGLFEEDBACKBUFFERXOESPROC_ALT)(GLsizei,GLenum,const GLfixed *);
static inline void glFeedbackBufferxOES(GLsizei n1,GLenum type1,const GLfixed * buffer1)
{
	static PFNGLFEEDBACKBUFFERXOESPROC_ALT fn=(PFNGLFEEDBACKBUFFERXOESPROC_ALT)glaltGetProcAddressExtension("glFeedbackBufferxOES","GL_OES_fixed_point");
	 fn(n1,type1,buffer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FogxOES
#define GL_ALT_FUNDEF_FogxOES
typedef void (*PFNGLFOGXOESPROC_ALT)(GLenum,GLfixed);
static inline void glFogxOES(GLenum pname1,GLfixed param1)
{
	static PFNGLFOGXOESPROC_ALT fn=(PFNGLFOGXOESPROC_ALT)glaltGetProcAddressExtension("glFogxOES","GL_OES_fixed_point");
	 fn(pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FogxvOES
#define GL_ALT_FUNDEF_FogxvOES
typedef void (*PFNGLFOGXVOESPROC_ALT)(GLenum,const GLfixed *);
static inline void glFogxvOES(GLenum pname1,const GLfixed * param1)
{
	static PFNGLFOGXVOESPROC_ALT fn=(PFNGLFOGXVOESPROC_ALT)glaltGetProcAddressExtension("glFogxvOES","GL_OES_fixed_point");
	 fn(pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FrustumxOES
#define GL_ALT_FUNDEF_FrustumxOES
typedef void (*PFNGLFRUSTUMXOESPROC_ALT)(GLfixed,GLfixed,GLfixed,GLfixed,GLfixed,GLfixed);
static inline void glFrustumxOES(GLfixed l1,GLfixed r1,GLfixed b1,GLfixed t1,GLfixed n1,GLfixed f1)
{
	static PFNGLFRUSTUMXOESPROC_ALT fn=(PFNGLFRUSTUMXOESPROC_ALT)glaltGetProcAddressExtension("glFrustumxOES","GL_OES_fixed_point");
	 fn(l1,r1,b1,t1,n1,f1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetClipPlanexOES
#define GL_ALT_FUNDEF_GetClipPlanexOES
typedef void (*PFNGLGETCLIPPLANEXOESPROC_ALT)(GLenum,GLfixed *);
static inline void glGetClipPlanexOES(GLenum plane1,GLfixed * equation1)
{
	static PFNGLGETCLIPPLANEXOESPROC_ALT fn=(PFNGLGETCLIPPLANEXOESPROC_ALT)glaltGetProcAddressExtension("glGetClipPlanexOES","GL_OES_fixed_point");
	 fn(plane1,equation1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetConvolutionParameterxvOES
#define GL_ALT_FUNDEF_GetConvolutionParameterxvOES
typedef void (*PFNGLGETCONVOLUTIONPARAMETERXVOESPROC_ALT)(GLenum,GLenum,GLfixed *);
static inline void glGetConvolutionParameterxvOES(GLenum target1,GLenum pname1,GLfixed * params1)
{
	static PFNGLGETCONVOLUTIONPARAMETERXVOESPROC_ALT fn=(PFNGLGETCONVOLUTIONPARAMETERXVOESPROC_ALT)glaltGetProcAddressExtension("glGetConvolutionParameterxvOES","GL_OES_fixed_point");
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetFixedvOES
#define GL_ALT_FUNDEF_GetFixedvOES
typedef void (*PFNGLGETFIXEDVOESPROC_ALT)(GLenum,GLfixed *);
static inline void glGetFixedvOES(GLenum pname1,GLfixed * params1)
{
	static PFNGLGETFIXEDVOESPROC_ALT fn=(PFNGLGETFIXEDVOESPROC_ALT)glaltGetProcAddressExtension("glGetFixedvOES","GL_OES_fixed_point");
	 fn(pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetHistogramParameterxvOES
#define GL_ALT_FUNDEF_GetHistogramParameterxvOES
typedef void (*PFNGLGETHISTOGRAMPARAMETERXVOESPROC_ALT)(GLenum,GLenum,GLfixed *);
static inline void glGetHistogramParameterxvOES(GLenum target1,GLenum pname1,GLfixed * params1)
{
	static PFNGLGETHISTOGRAMPARAMETERXVOESPROC_ALT fn=(PFNGLGETHISTOGRAMPARAMETERXVOESPROC_ALT)glaltGetProcAddressExtension("glGetHistogramParameterxvOES","GL_OES_fixed_point");
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetLightxOES
#define GL_ALT_FUNDEF_GetLightxOES
typedef void (*PFNGLGETLIGHTXOESPROC_ALT)(GLenum,GLenum,GLfixed *);
static inline void glGetLightxOES(GLenum light1,GLenum pname1,GLfixed * params1)
{
	static PFNGLGETLIGHTXOESPROC_ALT fn=(PFNGLGETLIGHTXOESPROC_ALT)glaltGetProcAddressExtension("glGetLightxOES","GL_OES_fixed_point");
	 fn(light1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetLightxvOES
#define GL_ALT_FUNDEF_GetLightxvOES
typedef void (*PFNGLGETLIGHTXVOESPROC_ALT)(GLenum,GLenum,GLfixed *);
static inline void glGetLightxvOES(GLenum light1,GLenum pname1,GLfixed * params1)
{
	static PFNGLGETLIGHTXVOESPROC_ALT fn=(PFNGLGETLIGHTXVOESPROC_ALT)glaltGetProcAddressExtension("glGetLightxvOES","GL_OES_fixed_point");
	 fn(light1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetMapxvOES
#define GL_ALT_FUNDEF_GetMapxvOES
typedef void (*PFNGLGETMAPXVOESPROC_ALT)(GLenum,GLenum,GLfixed *);
static inline void glGetMapxvOES(GLenum target1,GLenum query1,GLfixed * v1)
{
	static PFNGLGETMAPXVOESPROC_ALT fn=(PFNGLGETMAPXVOESPROC_ALT)glaltGetProcAddressExtension("glGetMapxvOES","GL_OES_fixed_point");
	 fn(target1,query1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetMaterialxOES
#define GL_ALT_FUNDEF_GetMaterialxOES
typedef void (*PFNGLGETMATERIALXOESPROC_ALT)(GLenum,GLenum,GLfixed);
static inline void glGetMaterialxOES(GLenum face1,GLenum pname1,GLfixed param1)
{
	static PFNGLGETMATERIALXOESPROC_ALT fn=(PFNGLGETMATERIALXOESPROC_ALT)glaltGetProcAddressExtension("glGetMaterialxOES","GL_OES_fixed_point");
	 fn(face1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetMaterialxvOES
#define GL_ALT_FUNDEF_GetMaterialxvOES
typedef void (*PFNGLGETMATERIALXVOESPROC_ALT)(GLenum,GLenum,GLfixed *);
static inline void glGetMaterialxvOES(GLenum face1,GLenum pname1,GLfixed * params1)
{
	static PFNGLGETMATERIALXVOESPROC_ALT fn=(PFNGLGETMATERIALXVOESPROC_ALT)glaltGetProcAddressExtension("glGetMaterialxvOES","GL_OES_fixed_point");
	 fn(face1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetPixelMapxv
#define GL_ALT_FUNDEF_GetPixelMapxv
typedef void (*PFNGLGETPIXELMAPXVPROC_ALT)(GLenum,GLint,GLfixed *);
static inline void glGetPixelMapxv(GLenum map1,GLint size1,GLfixed * values1)
{
	static PFNGLGETPIXELMAPXVPROC_ALT fn=(PFNGLGETPIXELMAPXVPROC_ALT)glaltGetProcAddressExtension("glGetPixelMapxv","GL_OES_fixed_point");
	 fn(map1,size1,values1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetTexEnvxvOES
#define GL_ALT_FUNDEF_GetTexEnvxvOES
typedef void (*PFNGLGETTEXENVXVOESPROC_ALT)(GLenum,GLenum,GLfixed *);
static inline void glGetTexEnvxvOES(GLenum target1,GLenum pname1,GLfixed * params1)
{
	static PFNGLGETTEXENVXVOESPROC_ALT fn=(PFNGLGETTEXENVXVOESPROC_ALT)glaltGetProcAddressExtension("glGetTexEnvxvOES","GL_OES_fixed_point");
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetTexGenxvOES
#define GL_ALT_FUNDEF_GetTexGenxvOES
typedef void (*PFNGLGETTEXGENXVOESPROC_ALT)(GLenum,GLenum,GLfixed *);
static inline void glGetTexGenxvOES(GLenum coord1,GLenum pname1,GLfixed * params1)
{
	static PFNGLGETTEXGENXVOESPROC_ALT fn=(PFNGLGETTEXGENXVOESPROC_ALT)glaltGetProcAddressExtension("glGetTexGenxvOES","GL_OES_fixed_point");
	 fn(coord1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetTexLevelParameterxvOES
#define GL_ALT_FUNDEF_GetTexLevelParameterxvOES
typedef void (*PFNGLGETTEXLEVELPARAMETERXVOESPROC_ALT)(GLenum,GLint,GLenum,GLfixed *);
static inline void glGetTexLevelParameterxvOES(GLenum target1,GLint level1,GLenum pname1,GLfixed * params1)
{
	static PFNGLGETTEXLEVELPARAMETERXVOESPROC_ALT fn=(PFNGLGETTEXLEVELPARAMETERXVOESPROC_ALT)glaltGetProcAddressExtension("glGetTexLevelParameterxvOES","GL_OES_fixed_point");
	 fn(target1,level1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetTexParameterxvOES
#define GL_ALT_FUNDEF_GetTexParameterxvOES
typedef void (*PFNGLGETTEXPARAMETERXVOESPROC_ALT)(GLenum,GLenum,GLfixed *);
static inline void glGetTexParameterxvOES(GLenum target1,GLenum pname1,GLfixed * params1)
{
	static PFNGLGETTEXPARAMETERXVOESPROC_ALT fn=(PFNGLGETTEXPARAMETERXVOESPROC_ALT)glaltGetProcAddressExtension("glGetTexParameterxvOES","GL_OES_fixed_point");
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IndexxOES
#define GL_ALT_FUNDEF_IndexxOES
typedef void (*PFNGLINDEXXOESPROC_ALT)(GLfixed);
static inline void glIndexxOES(GLfixed component1)
{
	static PFNGLINDEXXOESPROC_ALT fn=(PFNGLINDEXXOESPROC_ALT)glaltGetProcAddressExtension("glIndexxOES","GL_OES_fixed_point");
	 fn(component1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IndexxvOES
#define GL_ALT_FUNDEF_IndexxvOES
typedef void (*PFNGLINDEXXVOESPROC_ALT)(const GLfixed *);
static inline void glIndexxvOES(const GLfixed * component1)
{
	static PFNGLINDEXXVOESPROC_ALT fn=(PFNGLINDEXXVOESPROC_ALT)glaltGetProcAddressExtension("glIndexxvOES","GL_OES_fixed_point");
	 fn(component1);
}
#endif

#ifndef	GL_ALT_FUNDEF_LightModelxOES
#define GL_ALT_FUNDEF_LightModelxOES
typedef void (*PFNGLLIGHTMODELXOESPROC_ALT)(GLenum,GLfixed);
static inline void glLightModelxOES(GLenum pname1,GLfixed param1)
{
	static PFNGLLIGHTMODELXOESPROC_ALT fn=(PFNGLLIGHTMODELXOESPROC_ALT)glaltGetProcAddressExtension("glLightModelxOES","GL_OES_fixed_point");
	 fn(pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_LightModelxvOES
#define GL_ALT_FUNDEF_LightModelxvOES
typedef void (*PFNGLLIGHTMODELXVOESPROC_ALT)(GLenum,const GLfixed *);
static inline void glLightModelxvOES(GLenum pname1,const GLfixed * param1)
{
	static PFNGLLIGHTMODELXVOESPROC_ALT fn=(PFNGLLIGHTMODELXVOESPROC_ALT)glaltGetProcAddressExtension("glLightModelxvOES","GL_OES_fixed_point");
	 fn(pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_LightxOES
#define GL_ALT_FUNDEF_LightxOES
typedef void (*PFNGLLIGHTXOESPROC_ALT)(GLenum,GLenum,GLfixed);
static inline void glLightxOES(GLenum light1,GLenum pname1,GLfixed param1)
{
	static PFNGLLIGHTXOESPROC_ALT fn=(PFNGLLIGHTXOESPROC_ALT)glaltGetProcAddressExtension("glLightxOES","GL_OES_fixed_point");
	 fn(light1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_LightxvOES
#define GL_ALT_FUNDEF_LightxvOES
typedef void (*PFNGLLIGHTXVOESPROC_ALT)(GLenum,GLenum,const GLfixed *);
static inline void glLightxvOES(GLenum light1,GLenum pname1,const GLfixed * params1)
{
	static PFNGLLIGHTXVOESPROC_ALT fn=(PFNGLLIGHTXVOESPROC_ALT)glaltGetProcAddressExtension("glLightxvOES","GL_OES_fixed_point");
	 fn(light1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_LineWidthxOES
#define GL_ALT_FUNDEF_LineWidthxOES
typedef void (*PFNGLLINEWIDTHXOESPROC_ALT)(GLfixed);
static inline void glLineWidthxOES(GLfixed width1)
{
	static PFNGLLINEWIDTHXOESPROC_ALT fn=(PFNGLLINEWIDTHXOESPROC_ALT)glaltGetProcAddressExtension("glLineWidthxOES","GL_OES_fixed_point");
	 fn(width1);
}
#endif

#ifndef	GL_ALT_FUNDEF_LoadMatrixxOES
#define GL_ALT_FUNDEF_LoadMatrixxOES
typedef void (*PFNGLLOADMATRIXXOESPROC_ALT)(const GLfixed *);
static inline void glLoadMatrixxOES(const GLfixed * m1)
{
	static PFNGLLOADMATRIXXOESPROC_ALT fn=(PFNGLLOADMATRIXXOESPROC_ALT)glaltGetProcAddressExtension("glLoadMatrixxOES","GL_OES_fixed_point");
	 fn(m1);
}
#endif

#ifndef	GL_ALT_FUNDEF_LoadTransposeMatrixxOES
#define GL_ALT_FUNDEF_LoadTransposeMatrixxOES
typedef void (*PFNGLLOADTRANSPOSEMATRIXXOESPROC_ALT)(const GLfixed *);
static inline void glLoadTransposeMatrixxOES(const GLfixed * m1)
{
	static PFNGLLOADTRANSPOSEMATRIXXOESPROC_ALT fn=(PFNGLLOADTRANSPOSEMATRIXXOESPROC_ALT)glaltGetProcAddressExtension("glLoadTransposeMatrixxOES","GL_OES_fixed_point");
	 fn(m1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Map1xOES
#define GL_ALT_FUNDEF_Map1xOES
typedef void (*PFNGLMAP1XOESPROC_ALT)(GLenum,GLfixed,GLfixed,GLint,GLint,GLfixed);
static inline void glMap1xOES(GLenum target1,GLfixed u11,GLfixed u21,GLint stride1,GLint order1,GLfixed points1)
{
	static PFNGLMAP1XOESPROC_ALT fn=(PFNGLMAP1XOESPROC_ALT)glaltGetProcAddressExtension("glMap1xOES","GL_OES_fixed_point");
	 fn(target1,u11,u21,stride1,order1,points1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Map2xOES
#define GL_ALT_FUNDEF_Map2xOES
typedef void (*PFNGLMAP2XOESPROC_ALT)(GLenum,GLfixed,GLfixed,GLint,GLint,GLfixed,GLfixed,GLint,GLint,GLfixed);
static inline void glMap2xOES(GLenum target1,GLfixed u11,GLfixed u21,GLint ustride1,GLint uorder1,GLfixed v11,GLfixed v21,GLint vstride1,GLint vorder1,GLfixed points1)
{
	static PFNGLMAP2XOESPROC_ALT fn=(PFNGLMAP2XOESPROC_ALT)glaltGetProcAddressExtension("glMap2xOES","GL_OES_fixed_point");
	 fn(target1,u11,u21,ustride1,uorder1,v11,v21,vstride1,vorder1,points1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MapGrid1xOES
#define GL_ALT_FUNDEF_MapGrid1xOES
typedef void (*PFNGLMAPGRID1XOESPROC_ALT)(GLint,GLfixed,GLfixed);
static inline void glMapGrid1xOES(GLint n1,GLfixed u11,GLfixed u21)
{
	static PFNGLMAPGRID1XOESPROC_ALT fn=(PFNGLMAPGRID1XOESPROC_ALT)glaltGetProcAddressExtension("glMapGrid1xOES","GL_OES_fixed_point");
	 fn(n1,u11,u21);
}
#endif

#ifndef	GL_ALT_FUNDEF_MapGrid2xOES
#define GL_ALT_FUNDEF_MapGrid2xOES
typedef void (*PFNGLMAPGRID2XOESPROC_ALT)(GLint,GLfixed,GLfixed,GLfixed,GLfixed);
static inline void glMapGrid2xOES(GLint n1,GLfixed u11,GLfixed u21,GLfixed v11,GLfixed v21)
{
	static PFNGLMAPGRID2XOESPROC_ALT fn=(PFNGLMAPGRID2XOESPROC_ALT)glaltGetProcAddressExtension("glMapGrid2xOES","GL_OES_fixed_point");
	 fn(n1,u11,u21,v11,v21);
}
#endif

#ifndef	GL_ALT_FUNDEF_MaterialxOES
#define GL_ALT_FUNDEF_MaterialxOES
typedef void (*PFNGLMATERIALXOESPROC_ALT)(GLenum,GLenum,GLfixed);
static inline void glMaterialxOES(GLenum face1,GLenum pname1,GLfixed param1)
{
	static PFNGLMATERIALXOESPROC_ALT fn=(PFNGLMATERIALXOESPROC_ALT)glaltGetProcAddressExtension("glMaterialxOES","GL_OES_fixed_point");
	 fn(face1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MaterialxvOES
#define GL_ALT_FUNDEF_MaterialxvOES
typedef void (*PFNGLMATERIALXVOESPROC_ALT)(GLenum,GLenum,const GLfixed *);
static inline void glMaterialxvOES(GLenum face1,GLenum pname1,const GLfixed * param1)
{
	static PFNGLMATERIALXVOESPROC_ALT fn=(PFNGLMATERIALXVOESPROC_ALT)glaltGetProcAddressExtension("glMaterialxvOES","GL_OES_fixed_point");
	 fn(face1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultMatrixxOES
#define GL_ALT_FUNDEF_MultMatrixxOES
typedef void (*PFNGLMULTMATRIXXOESPROC_ALT)(const GLfixed *);
static inline void glMultMatrixxOES(const GLfixed * m1)
{
	static PFNGLMULTMATRIXXOESPROC_ALT fn=(PFNGLMULTMATRIXXOESPROC_ALT)glaltGetProcAddressExtension("glMultMatrixxOES","GL_OES_fixed_point");
	 fn(m1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultTransposeMatrixxOES
#define GL_ALT_FUNDEF_MultTransposeMatrixxOES
typedef void (*PFNGLMULTTRANSPOSEMATRIXXOESPROC_ALT)(const GLfixed *);
static inline void glMultTransposeMatrixxOES(const GLfixed * m1)
{
	static PFNGLMULTTRANSPOSEMATRIXXOESPROC_ALT fn=(PFNGLMULTTRANSPOSEMATRIXXOESPROC_ALT)glaltGetProcAddressExtension("glMultTransposeMatrixxOES","GL_OES_fixed_point");
	 fn(m1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexCoord1xOES
#define GL_ALT_FUNDEF_MultiTexCoord1xOES
typedef void (*PFNGLMULTITEXCOORD1XOESPROC_ALT)(GLenum,GLfixed);
static inline void glMultiTexCoord1xOES(GLenum texture1,GLfixed s1)
{
	static PFNGLMULTITEXCOORD1XOESPROC_ALT fn=(PFNGLMULTITEXCOORD1XOESPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord1xOES","GL_OES_fixed_point");
	 fn(texture1,s1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexCoord1xvOES
#define GL_ALT_FUNDEF_MultiTexCoord1xvOES
typedef void (*PFNGLMULTITEXCOORD1XVOESPROC_ALT)(GLenum,const GLfixed *);
static inline void glMultiTexCoord1xvOES(GLenum texture1,const GLfixed * coords1)
{
	static PFNGLMULTITEXCOORD1XVOESPROC_ALT fn=(PFNGLMULTITEXCOORD1XVOESPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord1xvOES","GL_OES_fixed_point");
	 fn(texture1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexCoord2xOES
#define GL_ALT_FUNDEF_MultiTexCoord2xOES
typedef void (*PFNGLMULTITEXCOORD2XOESPROC_ALT)(GLenum,GLfixed,GLfixed);
static inline void glMultiTexCoord2xOES(GLenum texture1,GLfixed s1,GLfixed t1)
{
	static PFNGLMULTITEXCOORD2XOESPROC_ALT fn=(PFNGLMULTITEXCOORD2XOESPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord2xOES","GL_OES_fixed_point");
	 fn(texture1,s1,t1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexCoord2xvOES
#define GL_ALT_FUNDEF_MultiTexCoord2xvOES
typedef void (*PFNGLMULTITEXCOORD2XVOESPROC_ALT)(GLenum,const GLfixed *);
static inline void glMultiTexCoord2xvOES(GLenum texture1,const GLfixed * coords1)
{
	static PFNGLMULTITEXCOORD2XVOESPROC_ALT fn=(PFNGLMULTITEXCOORD2XVOESPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord2xvOES","GL_OES_fixed_point");
	 fn(texture1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexCoord3xOES
#define GL_ALT_FUNDEF_MultiTexCoord3xOES
typedef void (*PFNGLMULTITEXCOORD3XOESPROC_ALT)(GLenum,GLfixed,GLfixed,GLfixed);
static inline void glMultiTexCoord3xOES(GLenum texture1,GLfixed s1,GLfixed t1,GLfixed r1)
{
	static PFNGLMULTITEXCOORD3XOESPROC_ALT fn=(PFNGLMULTITEXCOORD3XOESPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord3xOES","GL_OES_fixed_point");
	 fn(texture1,s1,t1,r1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexCoord3xvOES
#define GL_ALT_FUNDEF_MultiTexCoord3xvOES
typedef void (*PFNGLMULTITEXCOORD3XVOESPROC_ALT)(GLenum,const GLfixed *);
static inline void glMultiTexCoord3xvOES(GLenum texture1,const GLfixed * coords1)
{
	static PFNGLMULTITEXCOORD3XVOESPROC_ALT fn=(PFNGLMULTITEXCOORD3XVOESPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord3xvOES","GL_OES_fixed_point");
	 fn(texture1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexCoord4xOES
#define GL_ALT_FUNDEF_MultiTexCoord4xOES
typedef void (*PFNGLMULTITEXCOORD4XOESPROC_ALT)(GLenum,GLfixed,GLfixed,GLfixed,GLfixed);
static inline void glMultiTexCoord4xOES(GLenum texture1,GLfixed s1,GLfixed t1,GLfixed r1,GLfixed q1)
{
	static PFNGLMULTITEXCOORD4XOESPROC_ALT fn=(PFNGLMULTITEXCOORD4XOESPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord4xOES","GL_OES_fixed_point");
	 fn(texture1,s1,t1,r1,q1);
}
#endif

#ifndef	GL_ALT_FUNDEF_MultiTexCoord4xvOES
#define GL_ALT_FUNDEF_MultiTexCoord4xvOES
typedef void (*PFNGLMULTITEXCOORD4XVOESPROC_ALT)(GLenum,const GLfixed *);
static inline void glMultiTexCoord4xvOES(GLenum texture1,const GLfixed * coords1)
{
	static PFNGLMULTITEXCOORD4XVOESPROC_ALT fn=(PFNGLMULTITEXCOORD4XVOESPROC_ALT)glaltGetProcAddressExtension("glMultiTexCoord4xvOES","GL_OES_fixed_point");
	 fn(texture1,coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Normal3xOES
#define GL_ALT_FUNDEF_Normal3xOES
typedef void (*PFNGLNORMAL3XOESPROC_ALT)(GLfixed,GLfixed,GLfixed);
static inline void glNormal3xOES(GLfixed nx1,GLfixed ny1,GLfixed nz1)
{
	static PFNGLNORMAL3XOESPROC_ALT fn=(PFNGLNORMAL3XOESPROC_ALT)glaltGetProcAddressExtension("glNormal3xOES","GL_OES_fixed_point");
	 fn(nx1,ny1,nz1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Normal3xvOES
#define GL_ALT_FUNDEF_Normal3xvOES
typedef void (*PFNGLNORMAL3XVOESPROC_ALT)(const GLfixed *);
static inline void glNormal3xvOES(const GLfixed * coords1)
{
	static PFNGLNORMAL3XVOESPROC_ALT fn=(PFNGLNORMAL3XVOESPROC_ALT)glaltGetProcAddressExtension("glNormal3xvOES","GL_OES_fixed_point");
	 fn(coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_OrthoxOES
#define GL_ALT_FUNDEF_OrthoxOES
typedef void (*PFNGLORTHOXOESPROC_ALT)(GLfixed,GLfixed,GLfixed,GLfixed,GLfixed,GLfixed);
static inline void glOrthoxOES(GLfixed l1,GLfixed r1,GLfixed b1,GLfixed t1,GLfixed n1,GLfixed f1)
{
	static PFNGLORTHOXOESPROC_ALT fn=(PFNGLORTHOXOESPROC_ALT)glaltGetProcAddressExtension("glOrthoxOES","GL_OES_fixed_point");
	 fn(l1,r1,b1,t1,n1,f1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PassThroughxOES
#define GL_ALT_FUNDEF_PassThroughxOES
typedef void (*PFNGLPASSTHROUGHXOESPROC_ALT)(GLfixed);
static inline void glPassThroughxOES(GLfixed token1)
{
	static PFNGLPASSTHROUGHXOESPROC_ALT fn=(PFNGLPASSTHROUGHXOESPROC_ALT)glaltGetProcAddressExtension("glPassThroughxOES","GL_OES_fixed_point");
	 fn(token1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PixelMapx
#define GL_ALT_FUNDEF_PixelMapx
typedef void (*PFNGLPIXELMAPXPROC_ALT)(GLenum,GLint,const GLfixed *);
static inline void glPixelMapx(GLenum map1,GLint size1,const GLfixed * values1)
{
	static PFNGLPIXELMAPXPROC_ALT fn=(PFNGLPIXELMAPXPROC_ALT)glaltGetProcAddressExtension("glPixelMapx","GL_OES_fixed_point");
	 fn(map1,size1,values1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PixelStorex
#define GL_ALT_FUNDEF_PixelStorex
typedef void (*PFNGLPIXELSTOREXPROC_ALT)(GLenum,GLfixed);
static inline void glPixelStorex(GLenum pname1,GLfixed param1)
{
	static PFNGLPIXELSTOREXPROC_ALT fn=(PFNGLPIXELSTOREXPROC_ALT)glaltGetProcAddressExtension("glPixelStorex","GL_OES_fixed_point");
	 fn(pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PixelTransferxOES
#define GL_ALT_FUNDEF_PixelTransferxOES
typedef void (*PFNGLPIXELTRANSFERXOESPROC_ALT)(GLenum,GLfixed);
static inline void glPixelTransferxOES(GLenum pname1,GLfixed param1)
{
	static PFNGLPIXELTRANSFERXOESPROC_ALT fn=(PFNGLPIXELTRANSFERXOESPROC_ALT)glaltGetProcAddressExtension("glPixelTransferxOES","GL_OES_fixed_point");
	 fn(pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PixelZoomxOES
#define GL_ALT_FUNDEF_PixelZoomxOES
typedef void (*PFNGLPIXELZOOMXOESPROC_ALT)(GLfixed,GLfixed);
static inline void glPixelZoomxOES(GLfixed xfactor1,GLfixed yfactor1)
{
	static PFNGLPIXELZOOMXOESPROC_ALT fn=(PFNGLPIXELZOOMXOESPROC_ALT)glaltGetProcAddressExtension("glPixelZoomxOES","GL_OES_fixed_point");
	 fn(xfactor1,yfactor1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PointParameterxOES
#define GL_ALT_FUNDEF_PointParameterxOES
typedef void (*PFNGLPOINTPARAMETERXOESPROC_ALT)(GLenum,GLfixed);
static inline void glPointParameterxOES(GLenum pname1,GLfixed param1)
{
	static PFNGLPOINTPARAMETERXOESPROC_ALT fn=(PFNGLPOINTPARAMETERXOESPROC_ALT)glaltGetProcAddressExtension("glPointParameterxOES","GL_OES_fixed_point");
	 fn(pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PointParameterxvOES
#define GL_ALT_FUNDEF_PointParameterxvOES
typedef void (*PFNGLPOINTPARAMETERXVOESPROC_ALT)(GLenum,const GLfixed *);
static inline void glPointParameterxvOES(GLenum pname1,const GLfixed * params1)
{
	static PFNGLPOINTPARAMETERXVOESPROC_ALT fn=(PFNGLPOINTPARAMETERXVOESPROC_ALT)glaltGetProcAddressExtension("glPointParameterxvOES","GL_OES_fixed_point");
	 fn(pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PointSizexOES
#define GL_ALT_FUNDEF_PointSizexOES
typedef void (*PFNGLPOINTSIZEXOESPROC_ALT)(GLfixed);
static inline void glPointSizexOES(GLfixed size1)
{
	static PFNGLPOINTSIZEXOESPROC_ALT fn=(PFNGLPOINTSIZEXOESPROC_ALT)glaltGetProcAddressExtension("glPointSizexOES","GL_OES_fixed_point");
	 fn(size1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PolygonOffsetxOES
#define GL_ALT_FUNDEF_PolygonOffsetxOES
typedef void (*PFNGLPOLYGONOFFSETXOESPROC_ALT)(GLfixed,GLfixed);
static inline void glPolygonOffsetxOES(GLfixed factor1,GLfixed units1)
{
	static PFNGLPOLYGONOFFSETXOESPROC_ALT fn=(PFNGLPOLYGONOFFSETXOESPROC_ALT)glaltGetProcAddressExtension("glPolygonOffsetxOES","GL_OES_fixed_point");
	 fn(factor1,units1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PrioritizeTexturesxOES
#define GL_ALT_FUNDEF_PrioritizeTexturesxOES
typedef void (*PFNGLPRIORITIZETEXTURESXOESPROC_ALT)(GLsizei,const GLuint *,const GLfixed *);
static inline void glPrioritizeTexturesxOES(GLsizei n1,const GLuint * textures1,const GLfixed * priorities1)
{
	static PFNGLPRIORITIZETEXTURESXOESPROC_ALT fn=(PFNGLPRIORITIZETEXTURESXOESPROC_ALT)glaltGetProcAddressExtension("glPrioritizeTexturesxOES","GL_OES_fixed_point");
	 fn(n1,textures1,priorities1);
}
#endif

#ifndef	GL_ALT_FUNDEF_RasterPos2xOES
#define GL_ALT_FUNDEF_RasterPos2xOES
typedef void (*PFNGLRASTERPOS2XOESPROC_ALT)(GLfixed,GLfixed);
static inline void glRasterPos2xOES(GLfixed x1,GLfixed y1)
{
	static PFNGLRASTERPOS2XOESPROC_ALT fn=(PFNGLRASTERPOS2XOESPROC_ALT)glaltGetProcAddressExtension("glRasterPos2xOES","GL_OES_fixed_point");
	 fn(x1,y1);
}
#endif

#ifndef	GL_ALT_FUNDEF_RasterPos2xvOES
#define GL_ALT_FUNDEF_RasterPos2xvOES
typedef void (*PFNGLRASTERPOS2XVOESPROC_ALT)(const GLfixed *);
static inline void glRasterPos2xvOES(const GLfixed * coords1)
{
	static PFNGLRASTERPOS2XVOESPROC_ALT fn=(PFNGLRASTERPOS2XVOESPROC_ALT)glaltGetProcAddressExtension("glRasterPos2xvOES","GL_OES_fixed_point");
	 fn(coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_RasterPos3xOES
#define GL_ALT_FUNDEF_RasterPos3xOES
typedef void (*PFNGLRASTERPOS3XOESPROC_ALT)(GLfixed,GLfixed,GLfixed);
static inline void glRasterPos3xOES(GLfixed x1,GLfixed y1,GLfixed z1)
{
	static PFNGLRASTERPOS3XOESPROC_ALT fn=(PFNGLRASTERPOS3XOESPROC_ALT)glaltGetProcAddressExtension("glRasterPos3xOES","GL_OES_fixed_point");
	 fn(x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_RasterPos3xvOES
#define GL_ALT_FUNDEF_RasterPos3xvOES
typedef void (*PFNGLRASTERPOS3XVOESPROC_ALT)(const GLfixed *);
static inline void glRasterPos3xvOES(const GLfixed * coords1)
{
	static PFNGLRASTERPOS3XVOESPROC_ALT fn=(PFNGLRASTERPOS3XVOESPROC_ALT)glaltGetProcAddressExtension("glRasterPos3xvOES","GL_OES_fixed_point");
	 fn(coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_RasterPos4xOES
#define GL_ALT_FUNDEF_RasterPos4xOES
typedef void (*PFNGLRASTERPOS4XOESPROC_ALT)(GLfixed,GLfixed,GLfixed,GLfixed);
static inline void glRasterPos4xOES(GLfixed x1,GLfixed y1,GLfixed z1,GLfixed w1)
{
	static PFNGLRASTERPOS4XOESPROC_ALT fn=(PFNGLRASTERPOS4XOESPROC_ALT)glaltGetProcAddressExtension("glRasterPos4xOES","GL_OES_fixed_point");
	 fn(x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_RasterPos4xvOES
#define GL_ALT_FUNDEF_RasterPos4xvOES
typedef void (*PFNGLRASTERPOS4XVOESPROC_ALT)(const GLfixed *);
static inline void glRasterPos4xvOES(const GLfixed * coords1)
{
	static PFNGLRASTERPOS4XVOESPROC_ALT fn=(PFNGLRASTERPOS4XVOESPROC_ALT)glaltGetProcAddressExtension("glRasterPos4xvOES","GL_OES_fixed_point");
	 fn(coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_RectxOES
#define GL_ALT_FUNDEF_RectxOES
typedef void (*PFNGLRECTXOESPROC_ALT)(GLfixed,GLfixed,GLfixed,GLfixed);
static inline void glRectxOES(GLfixed x11,GLfixed y11,GLfixed x21,GLfixed y21)
{
	static PFNGLRECTXOESPROC_ALT fn=(PFNGLRECTXOESPROC_ALT)glaltGetProcAddressExtension("glRectxOES","GL_OES_fixed_point");
	 fn(x11,y11,x21,y21);
}
#endif

#ifndef	GL_ALT_FUNDEF_RectxvOES
#define GL_ALT_FUNDEF_RectxvOES
typedef void (*PFNGLRECTXVOESPROC_ALT)(const GLfixed *,const GLfixed *);
static inline void glRectxvOES(const GLfixed * v11,const GLfixed * v21)
{
	static PFNGLRECTXVOESPROC_ALT fn=(PFNGLRECTXVOESPROC_ALT)glaltGetProcAddressExtension("glRectxvOES","GL_OES_fixed_point");
	 fn(v11,v21);
}
#endif

#ifndef	GL_ALT_FUNDEF_RotatexOES
#define GL_ALT_FUNDEF_RotatexOES
typedef void (*PFNGLROTATEXOESPROC_ALT)(GLfixed,GLfixed,GLfixed,GLfixed);
static inline void glRotatexOES(GLfixed angle1,GLfixed x1,GLfixed y1,GLfixed z1)
{
	static PFNGLROTATEXOESPROC_ALT fn=(PFNGLROTATEXOESPROC_ALT)glaltGetProcAddressExtension("glRotatexOES","GL_OES_fixed_point");
	 fn(angle1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_SampleCoverageOES
#define GL_ALT_FUNDEF_SampleCoverageOES
typedef void (*PFNGLSAMPLECOVERAGEOESPROC_ALT)(GLfixed,GLboolean);
static inline void glSampleCoverageOES(GLfixed value1,GLboolean invert1)
{
	static PFNGLSAMPLECOVERAGEOESPROC_ALT fn=(PFNGLSAMPLECOVERAGEOESPROC_ALT)glaltGetProcAddressExtension("glSampleCoverageOES","GL_OES_fixed_point");
	 fn(value1,invert1);
}
#endif

#ifndef	GL_ALT_FUNDEF_SampleCoveragexOES
#define GL_ALT_FUNDEF_SampleCoveragexOES
typedef void (*PFNGLSAMPLECOVERAGEXOESPROC_ALT)(GLclampx,GLboolean);
static inline void glSampleCoveragexOES(GLclampx value1,GLboolean invert1)
{
	static PFNGLSAMPLECOVERAGEXOESPROC_ALT fn=(PFNGLSAMPLECOVERAGEXOESPROC_ALT)glaltGetProcAddressExtension("glSampleCoveragexOES","GL_OES_fixed_point");
	 fn(value1,invert1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ScalexOES
#define GL_ALT_FUNDEF_ScalexOES
typedef void (*PFNGLSCALEXOESPROC_ALT)(GLfixed,GLfixed,GLfixed);
static inline void glScalexOES(GLfixed x1,GLfixed y1,GLfixed z1)
{
	static PFNGLSCALEXOESPROC_ALT fn=(PFNGLSCALEXOESPROC_ALT)glaltGetProcAddressExtension("glScalexOES","GL_OES_fixed_point");
	 fn(x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord1xOES
#define GL_ALT_FUNDEF_TexCoord1xOES
typedef void (*PFNGLTEXCOORD1XOESPROC_ALT)(GLfixed);
static inline void glTexCoord1xOES(GLfixed s1)
{
	static PFNGLTEXCOORD1XOESPROC_ALT fn=(PFNGLTEXCOORD1XOESPROC_ALT)glaltGetProcAddressExtension("glTexCoord1xOES","GL_OES_fixed_point");
	 fn(s1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord1xvOES
#define GL_ALT_FUNDEF_TexCoord1xvOES
typedef void (*PFNGLTEXCOORD1XVOESPROC_ALT)(const GLfixed *);
static inline void glTexCoord1xvOES(const GLfixed * coords1)
{
	static PFNGLTEXCOORD1XVOESPROC_ALT fn=(PFNGLTEXCOORD1XVOESPROC_ALT)glaltGetProcAddressExtension("glTexCoord1xvOES","GL_OES_fixed_point");
	 fn(coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord2xOES
#define GL_ALT_FUNDEF_TexCoord2xOES
typedef void (*PFNGLTEXCOORD2XOESPROC_ALT)(GLfixed,GLfixed);
static inline void glTexCoord2xOES(GLfixed s1,GLfixed t1)
{
	static PFNGLTEXCOORD2XOESPROC_ALT fn=(PFNGLTEXCOORD2XOESPROC_ALT)glaltGetProcAddressExtension("glTexCoord2xOES","GL_OES_fixed_point");
	 fn(s1,t1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord2xvOES
#define GL_ALT_FUNDEF_TexCoord2xvOES
typedef void (*PFNGLTEXCOORD2XVOESPROC_ALT)(const GLfixed *);
static inline void glTexCoord2xvOES(const GLfixed * coords1)
{
	static PFNGLTEXCOORD2XVOESPROC_ALT fn=(PFNGLTEXCOORD2XVOESPROC_ALT)glaltGetProcAddressExtension("glTexCoord2xvOES","GL_OES_fixed_point");
	 fn(coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord3xOES
#define GL_ALT_FUNDEF_TexCoord3xOES
typedef void (*PFNGLTEXCOORD3XOESPROC_ALT)(GLfixed,GLfixed,GLfixed);
static inline void glTexCoord3xOES(GLfixed s1,GLfixed t1,GLfixed r1)
{
	static PFNGLTEXCOORD3XOESPROC_ALT fn=(PFNGLTEXCOORD3XOESPROC_ALT)glaltGetProcAddressExtension("glTexCoord3xOES","GL_OES_fixed_point");
	 fn(s1,t1,r1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord3xvOES
#define GL_ALT_FUNDEF_TexCoord3xvOES
typedef void (*PFNGLTEXCOORD3XVOESPROC_ALT)(const GLfixed *);
static inline void glTexCoord3xvOES(const GLfixed * coords1)
{
	static PFNGLTEXCOORD3XVOESPROC_ALT fn=(PFNGLTEXCOORD3XVOESPROC_ALT)glaltGetProcAddressExtension("glTexCoord3xvOES","GL_OES_fixed_point");
	 fn(coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord4xOES
#define GL_ALT_FUNDEF_TexCoord4xOES
typedef void (*PFNGLTEXCOORD4XOESPROC_ALT)(GLfixed,GLfixed,GLfixed,GLfixed);
static inline void glTexCoord4xOES(GLfixed s1,GLfixed t1,GLfixed r1,GLfixed q1)
{
	static PFNGLTEXCOORD4XOESPROC_ALT fn=(PFNGLTEXCOORD4XOESPROC_ALT)glaltGetProcAddressExtension("glTexCoord4xOES","GL_OES_fixed_point");
	 fn(s1,t1,r1,q1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord4xvOES
#define GL_ALT_FUNDEF_TexCoord4xvOES
typedef void (*PFNGLTEXCOORD4XVOESPROC_ALT)(const GLfixed *);
static inline void glTexCoord4xvOES(const GLfixed * coords1)
{
	static PFNGLTEXCOORD4XVOESPROC_ALT fn=(PFNGLTEXCOORD4XVOESPROC_ALT)glaltGetProcAddressExtension("glTexCoord4xvOES","GL_OES_fixed_point");
	 fn(coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexEnvxOES
#define GL_ALT_FUNDEF_TexEnvxOES
typedef void (*PFNGLTEXENVXOESPROC_ALT)(GLenum,GLenum,GLfixed);
static inline void glTexEnvxOES(GLenum target1,GLenum pname1,GLfixed param1)
{
	static PFNGLTEXENVXOESPROC_ALT fn=(PFNGLTEXENVXOESPROC_ALT)glaltGetProcAddressExtension("glTexEnvxOES","GL_OES_fixed_point");
	 fn(target1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexEnvxvOES
#define GL_ALT_FUNDEF_TexEnvxvOES
typedef void (*PFNGLTEXENVXVOESPROC_ALT)(GLenum,GLenum,const GLfixed *);
static inline void glTexEnvxvOES(GLenum target1,GLenum pname1,const GLfixed * params1)
{
	static PFNGLTEXENVXVOESPROC_ALT fn=(PFNGLTEXENVXVOESPROC_ALT)glaltGetProcAddressExtension("glTexEnvxvOES","GL_OES_fixed_point");
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexGenxOES
#define GL_ALT_FUNDEF_TexGenxOES
typedef void (*PFNGLTEXGENXOESPROC_ALT)(GLenum,GLenum,GLfixed);
static inline void glTexGenxOES(GLenum coord1,GLenum pname1,GLfixed param1)
{
	static PFNGLTEXGENXOESPROC_ALT fn=(PFNGLTEXGENXOESPROC_ALT)glaltGetProcAddressExtension("glTexGenxOES","GL_OES_fixed_point");
	 fn(coord1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexGenxvOES
#define GL_ALT_FUNDEF_TexGenxvOES
typedef void (*PFNGLTEXGENXVOESPROC_ALT)(GLenum,GLenum,const GLfixed *);
static inline void glTexGenxvOES(GLenum coord1,GLenum pname1,const GLfixed * params1)
{
	static PFNGLTEXGENXVOESPROC_ALT fn=(PFNGLTEXGENXVOESPROC_ALT)glaltGetProcAddressExtension("glTexGenxvOES","GL_OES_fixed_point");
	 fn(coord1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexParameterxOES
#define GL_ALT_FUNDEF_TexParameterxOES
typedef void (*PFNGLTEXPARAMETERXOESPROC_ALT)(GLenum,GLenum,GLfixed);
static inline void glTexParameterxOES(GLenum target1,GLenum pname1,GLfixed param1)
{
	static PFNGLTEXPARAMETERXOESPROC_ALT fn=(PFNGLTEXPARAMETERXOESPROC_ALT)glaltGetProcAddressExtension("glTexParameterxOES","GL_OES_fixed_point");
	 fn(target1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexParameterxvOES
#define GL_ALT_FUNDEF_TexParameterxvOES
typedef void (*PFNGLTEXPARAMETERXVOESPROC_ALT)(GLenum,GLenum,const GLfixed *);
static inline void glTexParameterxvOES(GLenum target1,GLenum pname1,const GLfixed * params1)
{
	static PFNGLTEXPARAMETERXVOESPROC_ALT fn=(PFNGLTEXPARAMETERXVOESPROC_ALT)glaltGetProcAddressExtension("glTexParameterxvOES","GL_OES_fixed_point");
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TranslatexOES
#define GL_ALT_FUNDEF_TranslatexOES
typedef void (*PFNGLTRANSLATEXOESPROC_ALT)(GLfixed,GLfixed,GLfixed);
static inline void glTranslatexOES(GLfixed x1,GLfixed y1,GLfixed z1)
{
	static PFNGLTRANSLATEXOESPROC_ALT fn=(PFNGLTRANSLATEXOESPROC_ALT)glaltGetProcAddressExtension("glTranslatexOES","GL_OES_fixed_point");
	 fn(x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Vertex2xOES
#define GL_ALT_FUNDEF_Vertex2xOES
typedef void (*PFNGLVERTEX2XOESPROC_ALT)(GLfixed);
static inline void glVertex2xOES(GLfixed x1)
{
	static PFNGLVERTEX2XOESPROC_ALT fn=(PFNGLVERTEX2XOESPROC_ALT)glaltGetProcAddressExtension("glVertex2xOES","GL_OES_fixed_point");
	 fn(x1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Vertex2xvOES
#define GL_ALT_FUNDEF_Vertex2xvOES
typedef void (*PFNGLVERTEX2XVOESPROC_ALT)(const GLfixed *);
static inline void glVertex2xvOES(const GLfixed * coords1)
{
	static PFNGLVERTEX2XVOESPROC_ALT fn=(PFNGLVERTEX2XVOESPROC_ALT)glaltGetProcAddressExtension("glVertex2xvOES","GL_OES_fixed_point");
	 fn(coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Vertex3xOES
#define GL_ALT_FUNDEF_Vertex3xOES
typedef void (*PFNGLVERTEX3XOESPROC_ALT)(GLfixed,GLfixed);
static inline void glVertex3xOES(GLfixed x1,GLfixed y1)
{
	static PFNGLVERTEX3XOESPROC_ALT fn=(PFNGLVERTEX3XOESPROC_ALT)glaltGetProcAddressExtension("glVertex3xOES","GL_OES_fixed_point");
	 fn(x1,y1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Vertex3xvOES
#define GL_ALT_FUNDEF_Vertex3xvOES
typedef void (*PFNGLVERTEX3XVOESPROC_ALT)(const GLfixed *);
static inline void glVertex3xvOES(const GLfixed * coords1)
{
	static PFNGLVERTEX3XVOESPROC_ALT fn=(PFNGLVERTEX3XVOESPROC_ALT)glaltGetProcAddressExtension("glVertex3xvOES","GL_OES_fixed_point");
	 fn(coords1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Vertex4xOES
#define GL_ALT_FUNDEF_Vertex4xOES
typedef void (*PFNGLVERTEX4XOESPROC_ALT)(GLfixed,GLfixed,GLfixed);
static inline void glVertex4xOES(GLfixed x1,GLfixed y1,GLfixed z1)
{
	static PFNGLVERTEX4XOESPROC_ALT fn=(PFNGLVERTEX4XOESPROC_ALT)glaltGetProcAddressExtension("glVertex4xOES","GL_OES_fixed_point");
	 fn(x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Vertex4xvOES
#define GL_ALT_FUNDEF_Vertex4xvOES
typedef void (*PFNGLVERTEX4XVOESPROC_ALT)(const GLfixed *);
static inline void glVertex4xvOES(const GLfixed * coords1)
{
	static PFNGLVERTEX4XVOESPROC_ALT fn=(PFNGLVERTEX4XVOESPROC_ALT)glaltGetProcAddressExtension("glVertex4xvOES","GL_OES_fixed_point");
	 fn(coords1);
}
#endif
CGUARDEND

#endif

#ifndef GL_OES_query_matrix
#define GL_OES_query_matrix
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_QueryMatrixxOES
#define GL_ALT_FUNDEF_QueryMatrixxOES
typedef GLbitfield (*PFNGLQUERYMATRIXXOESPROC_ALT)(GLfixed *,GLint *);
static inline GLbitfield glQueryMatrixxOES(GLfixed * mantissa1,GLint * exponent1)
{
	static PFNGLQUERYMATRIXXOESPROC_ALT fn=(PFNGLQUERYMATRIXXOESPROC_ALT)glaltGetProcAddressExtension("glQueryMatrixxOES","GL_OES_query_matrix");
	return fn(mantissa1,exponent1);
}
#endif
CGUARDEND

#endif

#ifndef GL_OES_read_format
#define GL_OES_read_format
#ifndef GL_IMPLEMENTATION_COLOR_READ_TYPE_OES
#define GL_IMPLEMENTATION_COLOR_READ_TYPE_OES 0x8B9A
#endif //GL_IMPLEMENTATION_COLOR_READ_TYPE_OES
#ifndef GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES 0x8B9B
#endif //GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_OES_single_precision
#define GL_OES_single_precision
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ClearDepthfOES
#define GL_ALT_FUNDEF_ClearDepthfOES
typedef void (*PFNGLCLEARDEPTHFOESPROC_ALT)(GLclampf);
static inline void glClearDepthfOES(GLclampf depth1)
{
	static PFNGLCLEARDEPTHFOESPROC_ALT fn=(PFNGLCLEARDEPTHFOESPROC_ALT)glaltGetProcAddressExtension("glClearDepthfOES","GL_OES_single_precision");
	 fn(depth1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ClipPlanefOES
#define GL_ALT_FUNDEF_ClipPlanefOES
typedef void (*PFNGLCLIPPLANEFOESPROC_ALT)(GLenum,const GLfloat *);
static inline void glClipPlanefOES(GLenum plane1,const GLfloat * equation1)
{
	static PFNGLCLIPPLANEFOESPROC_ALT fn=(PFNGLCLIPPLANEFOESPROC_ALT)glaltGetProcAddressExtension("glClipPlanefOES","GL_OES_single_precision");
	 fn(plane1,equation1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DepthRangefOES
#define GL_ALT_FUNDEF_DepthRangefOES
typedef void (*PFNGLDEPTHRANGEFOESPROC_ALT)(GLclampf,GLclampf);
static inline void glDepthRangefOES(GLclampf n1,GLclampf f1)
{
	static PFNGLDEPTHRANGEFOESPROC_ALT fn=(PFNGLDEPTHRANGEFOESPROC_ALT)glaltGetProcAddressExtension("glDepthRangefOES","GL_OES_single_precision");
	 fn(n1,f1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_FrustumfOES
#define GL_ALT_FUNDEF_FrustumfOES
typedef void (*PFNGLFRUSTUMFOESPROC_ALT)(GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glFrustumfOES(GLfloat l1,GLfloat r1,GLfloat b1,GLfloat t1,GLfloat n1,GLfloat f1)
{
	static PFNGLFRUSTUMFOESPROC_ALT fn=(PFNGLFRUSTUMFOESPROC_ALT)glaltGetProcAddressExtension("glFrustumfOES","GL_OES_single_precision");
	 fn(l1,r1,b1,t1,n1,f1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetClipPlanefOES
#define GL_ALT_FUNDEF_GetClipPlanefOES
typedef void (*PFNGLGETCLIPPLANEFOESPROC_ALT)(GLenum,GLfloat *);
static inline void glGetClipPlanefOES(GLenum plane1,GLfloat * equation1)
{
	static PFNGLGETCLIPPLANEFOESPROC_ALT fn=(PFNGLGETCLIPPLANEFOESPROC_ALT)glaltGetProcAddressExtension("glGetClipPlanefOES","GL_OES_single_precision");
	 fn(plane1,equation1);
}
#endif

#ifndef	GL_ALT_FUNDEF_OrthofOES
#define GL_ALT_FUNDEF_OrthofOES
typedef void (*PFNGLORTHOFOESPROC_ALT)(GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glOrthofOES(GLfloat l1,GLfloat r1,GLfloat b1,GLfloat t1,GLfloat n1,GLfloat f1)
{
	static PFNGLORTHOFOESPROC_ALT fn=(PFNGLORTHOFOESPROC_ALT)glaltGetProcAddressExtension("glOrthofOES","GL_OES_single_precision");
	 fn(l1,r1,b1,t1,n1,f1);
}
#endif
CGUARDEND

#endif

#ifndef GL_OML_interlace
#define GL_OML_interlace
#ifndef GL_INTERLACE_OML
#define GL_INTERLACE_OML 0x8980
#endif //GL_INTERLACE_OML
#ifndef GL_INTERLACE_READ_OML
#define GL_INTERLACE_READ_OML 0x8981
#endif //GL_INTERLACE_READ_OML
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_OML_resample
#define GL_OML_resample
#ifndef GL_PACK_RESAMPLE_OML
#define GL_PACK_RESAMPLE_OML 0x8984
#endif //GL_PACK_RESAMPLE_OML
#ifndef GL_UNPACK_RESAMPLE_OML
#define GL_UNPACK_RESAMPLE_OML 0x8985
#endif //GL_UNPACK_RESAMPLE_OML
#ifndef GL_RESAMPLE_REPLICATE_OML
#define GL_RESAMPLE_REPLICATE_OML 0x8986
#endif //GL_RESAMPLE_REPLICATE_OML
#ifndef GL_RESAMPLE_ZERO_FILL_OML
#define GL_RESAMPLE_ZERO_FILL_OML 0x8987
#endif //GL_RESAMPLE_ZERO_FILL_OML
#ifndef GL_RESAMPLE_AVERAGE_OML
#define GL_RESAMPLE_AVERAGE_OML 0x8988
#endif //GL_RESAMPLE_AVERAGE_OML
#ifndef GL_RESAMPLE_DECIMATE_OML
#define GL_RESAMPLE_DECIMATE_OML 0x8989
#endif //GL_RESAMPLE_DECIMATE_OML
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_OML_subsample
#define GL_OML_subsample
#ifndef GL_FORMAT_SUBSAMPLE_24_24_OML
#define GL_FORMAT_SUBSAMPLE_24_24_OML 0x8982
#endif //GL_FORMAT_SUBSAMPLE_24_24_OML
#ifndef GL_FORMAT_SUBSAMPLE_244_244_OML
#define GL_FORMAT_SUBSAMPLE_244_244_OML 0x8983
#endif //GL_FORMAT_SUBSAMPLE_244_244_OML
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_PGI_misc_hints
#define GL_PGI_misc_hints
#ifndef GL_PREFER_DOUBLEBUFFER_HINT_PGI
#define GL_PREFER_DOUBLEBUFFER_HINT_PGI 0x1A1F8
#endif //GL_PREFER_DOUBLEBUFFER_HINT_PGI
#ifndef GL_CONSERVE_MEMORY_HINT_PGI
#define GL_CONSERVE_MEMORY_HINT_PGI 0x1A1FD
#endif //GL_CONSERVE_MEMORY_HINT_PGI
#ifndef GL_RECLAIM_MEMORY_HINT_PGI
#define GL_RECLAIM_MEMORY_HINT_PGI 0x1A1FE
#endif //GL_RECLAIM_MEMORY_HINT_PGI
#ifndef GL_NATIVE_GRAPHICS_HANDLE_PGI
#define GL_NATIVE_GRAPHICS_HANDLE_PGI 0x1A202
#endif //GL_NATIVE_GRAPHICS_HANDLE_PGI
#ifndef GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI
#define GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI 0x1A203
#endif //GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI
#ifndef GL_NATIVE_GRAPHICS_END_HINT_PGI
#define GL_NATIVE_GRAPHICS_END_HINT_PGI 0x1A204
#endif //GL_NATIVE_GRAPHICS_END_HINT_PGI
#ifndef GL_ALWAYS_FAST_HINT_PGI
#define GL_ALWAYS_FAST_HINT_PGI 0x1A20C
#endif //GL_ALWAYS_FAST_HINT_PGI
#ifndef GL_ALWAYS_SOFT_HINT_PGI
#define GL_ALWAYS_SOFT_HINT_PGI 0x1A20D
#endif //GL_ALWAYS_SOFT_HINT_PGI
#ifndef GL_ALLOW_DRAW_OBJ_HINT_PGI
#define GL_ALLOW_DRAW_OBJ_HINT_PGI 0x1A20E
#endif //GL_ALLOW_DRAW_OBJ_HINT_PGI
#ifndef GL_ALLOW_DRAW_WIN_HINT_PGI
#define GL_ALLOW_DRAW_WIN_HINT_PGI 0x1A20F
#endif //GL_ALLOW_DRAW_WIN_HINT_PGI
#ifndef GL_ALLOW_DRAW_FRG_HINT_PGI
#define GL_ALLOW_DRAW_FRG_HINT_PGI 0x1A210
#endif //GL_ALLOW_DRAW_FRG_HINT_PGI
#ifndef GL_ALLOW_DRAW_MEM_HINT_PGI
#define GL_ALLOW_DRAW_MEM_HINT_PGI 0x1A211
#endif //GL_ALLOW_DRAW_MEM_HINT_PGI
#ifndef GL_STRICT_DEPTHFUNC_HINT_PGI
#define GL_STRICT_DEPTHFUNC_HINT_PGI 0x1A216
#endif //GL_STRICT_DEPTHFUNC_HINT_PGI
#ifndef GL_STRICT_LIGHTING_HINT_PGI
#define GL_STRICT_LIGHTING_HINT_PGI 0x1A217
#endif //GL_STRICT_LIGHTING_HINT_PGI
#ifndef GL_STRICT_SCISSOR_HINT_PGI
#define GL_STRICT_SCISSOR_HINT_PGI 0x1A218
#endif //GL_STRICT_SCISSOR_HINT_PGI
#ifndef GL_FULL_STIPPLE_HINT_PGI
#define GL_FULL_STIPPLE_HINT_PGI 0x1A219
#endif //GL_FULL_STIPPLE_HINT_PGI
#ifndef GL_CLIP_NEAR_HINT_PGI
#define GL_CLIP_NEAR_HINT_PGI 0x1A220
#endif //GL_CLIP_NEAR_HINT_PGI
#ifndef GL_CLIP_FAR_HINT_PGI
#define GL_CLIP_FAR_HINT_PGI 0x1A221
#endif //GL_CLIP_FAR_HINT_PGI
#ifndef GL_WIDE_LINE_HINT_PGI
#define GL_WIDE_LINE_HINT_PGI 0x1A222
#endif //GL_WIDE_LINE_HINT_PGI
#ifndef GL_BACK_NORMALS_HINT_PGI
#define GL_BACK_NORMALS_HINT_PGI 0x1A223
#endif //GL_BACK_NORMALS_HINT_PGI
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_HintPGI
#define GL_ALT_FUNDEF_HintPGI
typedef void (*PFNGLHINTPGIPROC_ALT)(GLenum,GLint);
static inline void glHintPGI(GLenum target1,GLint mode1)
{
	static PFNGLHINTPGIPROC_ALT fn=(PFNGLHINTPGIPROC_ALT)glaltGetProcAddressExtension("glHintPGI","GL_PGI_misc_hints");
	 fn(target1,mode1);
}
#endif
CGUARDEND

#endif

#ifndef GL_PGI_vertex_hints
#define GL_PGI_vertex_hints
#ifndef GL_VERTEX23_BIT_PGI
#define GL_VERTEX23_BIT_PGI 0x00000004
#endif //GL_VERTEX23_BIT_PGI
#ifndef GL_VERTEX4_BIT_PGI
#define GL_VERTEX4_BIT_PGI 0x00000008
#endif //GL_VERTEX4_BIT_PGI
#ifndef GL_COLOR3_BIT_PGI
#define GL_COLOR3_BIT_PGI 0x00010000
#endif //GL_COLOR3_BIT_PGI
#ifndef GL_COLOR4_BIT_PGI
#define GL_COLOR4_BIT_PGI 0x00020000
#endif //GL_COLOR4_BIT_PGI
#ifndef GL_EDGEFLAG_BIT_PGI
#define GL_EDGEFLAG_BIT_PGI 0x00040000
#endif //GL_EDGEFLAG_BIT_PGI
#ifndef GL_INDEX_BIT_PGI
#define GL_INDEX_BIT_PGI 0x00080000
#endif //GL_INDEX_BIT_PGI
#ifndef GL_MAT_AMBIENT_BIT_PGI
#define GL_MAT_AMBIENT_BIT_PGI 0x00100000
#endif //GL_MAT_AMBIENT_BIT_PGI
#ifndef GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI
#define GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI 0x00200000
#endif //GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI
#ifndef GL_MAT_DIFFUSE_BIT_PGI
#define GL_MAT_DIFFUSE_BIT_PGI 0x00400000
#endif //GL_MAT_DIFFUSE_BIT_PGI
#ifndef GL_MAT_EMISSION_BIT_PGI
#define GL_MAT_EMISSION_BIT_PGI 0x00800000
#endif //GL_MAT_EMISSION_BIT_PGI
#ifndef GL_MAT_COLOR_INDEXES_BIT_PGI
#define GL_MAT_COLOR_INDEXES_BIT_PGI 0x01000000
#endif //GL_MAT_COLOR_INDEXES_BIT_PGI
#ifndef GL_MAT_SHININESS_BIT_PGI
#define GL_MAT_SHININESS_BIT_PGI 0x02000000
#endif //GL_MAT_SHININESS_BIT_PGI
#ifndef GL_MAT_SPECULAR_BIT_PGI
#define GL_MAT_SPECULAR_BIT_PGI 0x04000000
#endif //GL_MAT_SPECULAR_BIT_PGI
#ifndef GL_NORMAL_BIT_PGI
#define GL_NORMAL_BIT_PGI 0x08000000
#endif //GL_NORMAL_BIT_PGI
#ifndef GL_TEXCOORD1_BIT_PGI
#define GL_TEXCOORD1_BIT_PGI 0x10000000
#endif //GL_TEXCOORD1_BIT_PGI
#ifndef GL_VERTEX_DATA_HINT_PGI
#define GL_VERTEX_DATA_HINT_PGI 0x1A22A
#endif //GL_VERTEX_DATA_HINT_PGI
#ifndef GL_VERTEX_CONSISTENT_HINT_PGI
#define GL_VERTEX_CONSISTENT_HINT_PGI 0x1A22B
#endif //GL_VERTEX_CONSISTENT_HINT_PGI
#ifndef GL_MATERIAL_SIDE_HINT_PGI
#define GL_MATERIAL_SIDE_HINT_PGI 0x1A22C
#endif //GL_MATERIAL_SIDE_HINT_PGI
#ifndef GL_MAX_VERTEX_HINT_PGI
#define GL_MAX_VERTEX_HINT_PGI 0x1A22D
#endif //GL_MAX_VERTEX_HINT_PGI
#ifndef GL_TEXCOORD2_BIT_PGI
#define GL_TEXCOORD2_BIT_PGI 0x20000000
#endif //GL_TEXCOORD2_BIT_PGI
#ifndef GL_TEXCOORD3_BIT_PGI
#define GL_TEXCOORD3_BIT_PGI 0x40000000
#endif //GL_TEXCOORD3_BIT_PGI
#ifndef GL_TEXCOORD4_BIT_PGI
#define GL_TEXCOORD4_BIT_PGI 0x80000000
#endif //GL_TEXCOORD4_BIT_PGI
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_REND_screen_coordinates
#define GL_REND_screen_coordinates
#ifndef GL_SCREEN_COORDINATES_REND
#define GL_SCREEN_COORDINATES_REND 0x8490
#endif //GL_SCREEN_COORDINATES_REND
#ifndef GL_INVERTED_SCREEN_W_REND
#define GL_INVERTED_SCREEN_W_REND 0x8491
#endif //GL_INVERTED_SCREEN_W_REND
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_S3_s3tc
#define GL_S3_s3tc
#ifndef GL_RGB_S3TC
#define GL_RGB_S3TC 0x83A0
#endif //GL_RGB_S3TC
#ifndef GL_RGB4_S3TC
#define GL_RGB4_S3TC 0x83A1
#endif //GL_RGB4_S3TC
#ifndef GL_RGBA_S3TC
#define GL_RGBA_S3TC 0x83A2
#endif //GL_RGBA_S3TC
#ifndef GL_RGBA4_S3TC
#define GL_RGBA4_S3TC 0x83A3
#endif //GL_RGBA4_S3TC
#ifndef GL_RGBA_DXT5_S3TC
#define GL_RGBA_DXT5_S3TC 0x83A4
#endif //GL_RGBA_DXT5_S3TC
#ifndef GL_RGBA4_DXT5_S3TC
#define GL_RGBA4_DXT5_S3TC 0x83A5
#endif //GL_RGBA4_DXT5_S3TC
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIS_detail_texture
#define GL_SGIS_detail_texture
#ifndef GL_DETAIL_TEXTURE_2D_SGIS
#define GL_DETAIL_TEXTURE_2D_SGIS 0x8095
#endif //GL_DETAIL_TEXTURE_2D_SGIS
#ifndef GL_DETAIL_TEXTURE_2D_BINDING_SGIS
#define GL_DETAIL_TEXTURE_2D_BINDING_SGIS 0x8096
#endif //GL_DETAIL_TEXTURE_2D_BINDING_SGIS
#ifndef GL_LINEAR_DETAIL_SGIS
#define GL_LINEAR_DETAIL_SGIS 0x8097
#endif //GL_LINEAR_DETAIL_SGIS
#ifndef GL_LINEAR_DETAIL_ALPHA_SGIS
#define GL_LINEAR_DETAIL_ALPHA_SGIS 0x8098
#endif //GL_LINEAR_DETAIL_ALPHA_SGIS
#ifndef GL_LINEAR_DETAIL_COLOR_SGIS
#define GL_LINEAR_DETAIL_COLOR_SGIS 0x8099
#endif //GL_LINEAR_DETAIL_COLOR_SGIS
#ifndef GL_DETAIL_TEXTURE_LEVEL_SGIS
#define GL_DETAIL_TEXTURE_LEVEL_SGIS 0x809A
#endif //GL_DETAIL_TEXTURE_LEVEL_SGIS
#ifndef GL_DETAIL_TEXTURE_MODE_SGIS
#define GL_DETAIL_TEXTURE_MODE_SGIS 0x809B
#endif //GL_DETAIL_TEXTURE_MODE_SGIS
#ifndef GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS
#define GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS 0x809C
#endif //GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_DetailTexFuncSGIS
#define GL_ALT_FUNDEF_DetailTexFuncSGIS
typedef void (*PFNGLDETAILTEXFUNCSGISPROC_ALT)(GLenum,GLsizei,const GLfloat *);
static inline void glDetailTexFuncSGIS(GLenum target1,GLsizei n1,const GLfloat * points1)
{
	static PFNGLDETAILTEXFUNCSGISPROC_ALT fn=(PFNGLDETAILTEXFUNCSGISPROC_ALT)glaltGetProcAddressExtension("glDetailTexFuncSGIS","GL_SGIS_detail_texture");
	 fn(target1,n1,points1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetDetailTexFuncSGIS
#define GL_ALT_FUNDEF_GetDetailTexFuncSGIS
typedef void (*PFNGLGETDETAILTEXFUNCSGISPROC_ALT)(GLenum,GLfloat *);
static inline void glGetDetailTexFuncSGIS(GLenum target1,GLfloat * points1)
{
	static PFNGLGETDETAILTEXFUNCSGISPROC_ALT fn=(PFNGLGETDETAILTEXFUNCSGISPROC_ALT)glaltGetProcAddressExtension("glGetDetailTexFuncSGIS","GL_SGIS_detail_texture");
	 fn(target1,points1);
}
#endif
CGUARDEND

#endif

#ifndef GL_SGIS_fog_function
#define GL_SGIS_fog_function
#ifndef GL_FOG_FUNC_SGIS
#define GL_FOG_FUNC_SGIS 0x812A
#endif //GL_FOG_FUNC_SGIS
#ifndef GL_FOG_FUNC_POINTS_SGIS
#define GL_FOG_FUNC_POINTS_SGIS 0x812B
#endif //GL_FOG_FUNC_POINTS_SGIS
#ifndef GL_MAX_FOG_FUNC_POINTS_SGIS
#define GL_MAX_FOG_FUNC_POINTS_SGIS 0x812C
#endif //GL_MAX_FOG_FUNC_POINTS_SGIS
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_FogFuncSGIS
#define GL_ALT_FUNDEF_FogFuncSGIS
typedef void (*PFNGLFOGFUNCSGISPROC_ALT)(GLsizei,const GLfloat *);
static inline void glFogFuncSGIS(GLsizei n1,const GLfloat * points1)
{
	static PFNGLFOGFUNCSGISPROC_ALT fn=(PFNGLFOGFUNCSGISPROC_ALT)glaltGetProcAddressExtension("glFogFuncSGIS","GL_SGIS_fog_function");
	 fn(n1,points1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetFogFuncSGIS
#define GL_ALT_FUNDEF_GetFogFuncSGIS
typedef void (*PFNGLGETFOGFUNCSGISPROC_ALT)(GLfloat *);
static inline void glGetFogFuncSGIS(GLfloat * points1)
{
	static PFNGLGETFOGFUNCSGISPROC_ALT fn=(PFNGLGETFOGFUNCSGISPROC_ALT)glaltGetProcAddressExtension("glGetFogFuncSGIS","GL_SGIS_fog_function");
	 fn(points1);
}
#endif
CGUARDEND

#endif

#ifndef GL_SGIS_generate_mipmap
#define GL_SGIS_generate_mipmap
#ifndef GL_GENERATE_MIPMAP_SGIS
#define GL_GENERATE_MIPMAP_SGIS 0x8191
#endif //GL_GENERATE_MIPMAP_SGIS
#ifndef GL_GENERATE_MIPMAP_HINT_SGIS
#define GL_GENERATE_MIPMAP_HINT_SGIS 0x8192
#endif //GL_GENERATE_MIPMAP_HINT_SGIS
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIS_multisample
#define GL_SGIS_multisample
#ifndef GL_MULTISAMPLE_SGIS
#define GL_MULTISAMPLE_SGIS 0x809D
#endif //GL_MULTISAMPLE_SGIS
#ifndef GL_SAMPLE_ALPHA_TO_MASK_SGIS
#define GL_SAMPLE_ALPHA_TO_MASK_SGIS 0x809E
#endif //GL_SAMPLE_ALPHA_TO_MASK_SGIS
#ifndef GL_SAMPLE_ALPHA_TO_ONE_SGIS
#define GL_SAMPLE_ALPHA_TO_ONE_SGIS 0x809F
#endif //GL_SAMPLE_ALPHA_TO_ONE_SGIS
#ifndef GL_SAMPLE_MASK_SGIS
#define GL_SAMPLE_MASK_SGIS 0x80A0
#endif //GL_SAMPLE_MASK_SGIS
#ifndef GL_1PASS_SGIS
#define GL_1PASS_SGIS 0x80A1
#endif //GL_1PASS_SGIS
#ifndef GL_2PASS_0_SGIS
#define GL_2PASS_0_SGIS 0x80A2
#endif //GL_2PASS_0_SGIS
#ifndef GL_2PASS_1_SGIS
#define GL_2PASS_1_SGIS 0x80A3
#endif //GL_2PASS_1_SGIS
#ifndef GL_4PASS_0_SGIS
#define GL_4PASS_0_SGIS 0x80A4
#endif //GL_4PASS_0_SGIS
#ifndef GL_4PASS_1_SGIS
#define GL_4PASS_1_SGIS 0x80A5
#endif //GL_4PASS_1_SGIS
#ifndef GL_4PASS_2_SGIS
#define GL_4PASS_2_SGIS 0x80A6
#endif //GL_4PASS_2_SGIS
#ifndef GL_4PASS_3_SGIS
#define GL_4PASS_3_SGIS 0x80A7
#endif //GL_4PASS_3_SGIS
#ifndef GL_SAMPLE_BUFFERS_SGIS
#define GL_SAMPLE_BUFFERS_SGIS 0x80A8
#endif //GL_SAMPLE_BUFFERS_SGIS
#ifndef GL_SAMPLES_SGIS
#define GL_SAMPLES_SGIS 0x80A9
#endif //GL_SAMPLES_SGIS
#ifndef GL_SAMPLE_MASK_VALUE_SGIS
#define GL_SAMPLE_MASK_VALUE_SGIS 0x80AA
#endif //GL_SAMPLE_MASK_VALUE_SGIS
#ifndef GL_SAMPLE_MASK_INVERT_SGIS
#define GL_SAMPLE_MASK_INVERT_SGIS 0x80AB
#endif //GL_SAMPLE_MASK_INVERT_SGIS
#ifndef GL_SAMPLE_PATTERN_SGIS
#define GL_SAMPLE_PATTERN_SGIS 0x80AC
#endif //GL_SAMPLE_PATTERN_SGIS
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_SampleMaskSGIS
#define GL_ALT_FUNDEF_SampleMaskSGIS
typedef void (*PFNGLSAMPLEMASKSGISPROC_ALT)(GLclampf,GLboolean);
static inline void glSampleMaskSGIS(GLclampf value1,GLboolean invert1)
{
	static PFNGLSAMPLEMASKSGISPROC_ALT fn=(PFNGLSAMPLEMASKSGISPROC_ALT)glaltGetProcAddressExtension("glSampleMaskSGIS","GL_SGIS_multisample");
	 fn(value1,invert1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_SamplePatternSGIS
#define GL_ALT_FUNDEF_SamplePatternSGIS
typedef void (*PFNGLSAMPLEPATTERNSGISPROC_ALT)(GLenum);
static inline void glSamplePatternSGIS(GLenum pattern1)
{
	static PFNGLSAMPLEPATTERNSGISPROC_ALT fn=(PFNGLSAMPLEPATTERNSGISPROC_ALT)glaltGetProcAddressExtension("glSamplePatternSGIS","GL_SGIS_multisample");
	 fn(pattern1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_SGIS_pixel_texture
#define GL_SGIS_pixel_texture
#ifndef GL_PIXEL_TEXTURE_SGIS
#define GL_PIXEL_TEXTURE_SGIS 0x8353
#endif //GL_PIXEL_TEXTURE_SGIS
#ifndef GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS
#define GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS 0x8354
#endif //GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS
#ifndef GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS
#define GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS 0x8355
#endif //GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS
#ifndef GL_PIXEL_GROUP_COLOR_SGIS
#define GL_PIXEL_GROUP_COLOR_SGIS 0x8356
#endif //GL_PIXEL_GROUP_COLOR_SGIS
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetPixelTexGenParameterfvSGIS
#define GL_ALT_FUNDEF_GetPixelTexGenParameterfvSGIS
typedef void (*PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC_ALT)(GLenum,GLfloat *);
static inline void glGetPixelTexGenParameterfvSGIS(GLenum pname1,GLfloat * params1)
{
	static PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC_ALT fn=(PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC_ALT)glaltGetProcAddressExtension("glGetPixelTexGenParameterfvSGIS","GL_SGIS_pixel_texture");
	 fn(pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetPixelTexGenParameterivSGIS
#define GL_ALT_FUNDEF_GetPixelTexGenParameterivSGIS
typedef void (*PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC_ALT)(GLenum,GLint *);
static inline void glGetPixelTexGenParameterivSGIS(GLenum pname1,GLint * params1)
{
	static PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC_ALT fn=(PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC_ALT)glaltGetProcAddressExtension("glGetPixelTexGenParameterivSGIS","GL_SGIS_pixel_texture");
	 fn(pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PixelTexGenParameterfSGIS
#define GL_ALT_FUNDEF_PixelTexGenParameterfSGIS
typedef void (*PFNGLPIXELTEXGENPARAMETERFSGISPROC_ALT)(GLenum,GLfloat);
static inline void glPixelTexGenParameterfSGIS(GLenum pname1,GLfloat param1)
{
	static PFNGLPIXELTEXGENPARAMETERFSGISPROC_ALT fn=(PFNGLPIXELTEXGENPARAMETERFSGISPROC_ALT)glaltGetProcAddressExtension("glPixelTexGenParameterfSGIS","GL_SGIS_pixel_texture");
	 fn(pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PixelTexGenParameterfvSGIS
#define GL_ALT_FUNDEF_PixelTexGenParameterfvSGIS
typedef void (*PFNGLPIXELTEXGENPARAMETERFVSGISPROC_ALT)(GLenum,const GLfloat *);
static inline void glPixelTexGenParameterfvSGIS(GLenum pname1,const GLfloat * params1)
{
	static PFNGLPIXELTEXGENPARAMETERFVSGISPROC_ALT fn=(PFNGLPIXELTEXGENPARAMETERFVSGISPROC_ALT)glaltGetProcAddressExtension("glPixelTexGenParameterfvSGIS","GL_SGIS_pixel_texture");
	 fn(pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PixelTexGenParameteriSGIS
#define GL_ALT_FUNDEF_PixelTexGenParameteriSGIS
typedef void (*PFNGLPIXELTEXGENPARAMETERISGISPROC_ALT)(GLenum,GLint);
static inline void glPixelTexGenParameteriSGIS(GLenum pname1,GLint param1)
{
	static PFNGLPIXELTEXGENPARAMETERISGISPROC_ALT fn=(PFNGLPIXELTEXGENPARAMETERISGISPROC_ALT)glaltGetProcAddressExtension("glPixelTexGenParameteriSGIS","GL_SGIS_pixel_texture");
	 fn(pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PixelTexGenParameterivSGIS
#define GL_ALT_FUNDEF_PixelTexGenParameterivSGIS
typedef void (*PFNGLPIXELTEXGENPARAMETERIVSGISPROC_ALT)(GLenum,const GLint *);
static inline void glPixelTexGenParameterivSGIS(GLenum pname1,const GLint * params1)
{
	static PFNGLPIXELTEXGENPARAMETERIVSGISPROC_ALT fn=(PFNGLPIXELTEXGENPARAMETERIVSGISPROC_ALT)glaltGetProcAddressExtension("glPixelTexGenParameterivSGIS","GL_SGIS_pixel_texture");
	 fn(pname1,params1);
}
#endif
CGUARDEND

#endif

#ifndef GL_SGIS_point_line_texgen
#define GL_SGIS_point_line_texgen
#ifndef GL_EYE_DISTANCE_TO_POINT_SGIS
#define GL_EYE_DISTANCE_TO_POINT_SGIS 0x81F0
#endif //GL_EYE_DISTANCE_TO_POINT_SGIS
#ifndef GL_OBJECT_DISTANCE_TO_POINT_SGIS
#define GL_OBJECT_DISTANCE_TO_POINT_SGIS 0x81F1
#endif //GL_OBJECT_DISTANCE_TO_POINT_SGIS
#ifndef GL_EYE_DISTANCE_TO_LINE_SGIS
#define GL_EYE_DISTANCE_TO_LINE_SGIS 0x81F2
#endif //GL_EYE_DISTANCE_TO_LINE_SGIS
#ifndef GL_OBJECT_DISTANCE_TO_LINE_SGIS
#define GL_OBJECT_DISTANCE_TO_LINE_SGIS 0x81F3
#endif //GL_OBJECT_DISTANCE_TO_LINE_SGIS
#ifndef GL_EYE_POINT_SGIS
#define GL_EYE_POINT_SGIS 0x81F4
#endif //GL_EYE_POINT_SGIS
#ifndef GL_OBJECT_POINT_SGIS
#define GL_OBJECT_POINT_SGIS 0x81F5
#endif //GL_OBJECT_POINT_SGIS
#ifndef GL_EYE_LINE_SGIS
#define GL_EYE_LINE_SGIS 0x81F6
#endif //GL_EYE_LINE_SGIS
#ifndef GL_OBJECT_LINE_SGIS
#define GL_OBJECT_LINE_SGIS 0x81F7
#endif //GL_OBJECT_LINE_SGIS
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIS_point_parameters
#define GL_SGIS_point_parameters
#ifndef GL_POINT_SIZE_MIN_SGIS
#define GL_POINT_SIZE_MIN_SGIS 0x8126
#endif //GL_POINT_SIZE_MIN_SGIS
#ifndef GL_POINT_SIZE_MAX_SGIS
#define GL_POINT_SIZE_MAX_SGIS 0x8127
#endif //GL_POINT_SIZE_MAX_SGIS
#ifndef GL_POINT_FADE_THRESHOLD_SIZE_SGIS
#define GL_POINT_FADE_THRESHOLD_SIZE_SGIS 0x8128
#endif //GL_POINT_FADE_THRESHOLD_SIZE_SGIS
#ifndef GL_DISTANCE_ATTENUATION_SGIS
#define GL_DISTANCE_ATTENUATION_SGIS 0x8129
#endif //GL_DISTANCE_ATTENUATION_SGIS
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_PointParameterfSGIS
#define GL_ALT_FUNDEF_PointParameterfSGIS
typedef void (*PFNGLPOINTPARAMETERFSGISPROC_ALT)(GLenum,GLfloat);
static inline void glPointParameterfSGIS(GLenum pname1,GLfloat param1)
{
	static PFNGLPOINTPARAMETERFSGISPROC_ALT fn=(PFNGLPOINTPARAMETERFSGISPROC_ALT)glaltGetProcAddressExtension("glPointParameterfSGIS","GL_SGIS_point_parameters");
	 fn(pname1,param1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_PointParameterfvSGIS
#define GL_ALT_FUNDEF_PointParameterfvSGIS
typedef void (*PFNGLPOINTPARAMETERFVSGISPROC_ALT)(GLenum,const GLfloat *);
static inline void glPointParameterfvSGIS(GLenum pname1,const GLfloat * params1)
{
	static PFNGLPOINTPARAMETERFVSGISPROC_ALT fn=(PFNGLPOINTPARAMETERFVSGISPROC_ALT)glaltGetProcAddressExtension("glPointParameterfvSGIS","GL_SGIS_point_parameters");
	 fn(pname1,params1);
}
#endif

//ALIAS
CGUARDEND

#endif

#ifndef GL_SGIS_sharpen_texture
#define GL_SGIS_sharpen_texture
#ifndef GL_LINEAR_SHARPEN_SGIS
#define GL_LINEAR_SHARPEN_SGIS 0x80AD
#endif //GL_LINEAR_SHARPEN_SGIS
#ifndef GL_LINEAR_SHARPEN_ALPHA_SGIS
#define GL_LINEAR_SHARPEN_ALPHA_SGIS 0x80AE
#endif //GL_LINEAR_SHARPEN_ALPHA_SGIS
#ifndef GL_LINEAR_SHARPEN_COLOR_SGIS
#define GL_LINEAR_SHARPEN_COLOR_SGIS 0x80AF
#endif //GL_LINEAR_SHARPEN_COLOR_SGIS
#ifndef GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS
#define GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS 0x80B0
#endif //GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetSharpenTexFuncSGIS
#define GL_ALT_FUNDEF_GetSharpenTexFuncSGIS
typedef void (*PFNGLGETSHARPENTEXFUNCSGISPROC_ALT)(GLenum,GLfloat *);
static inline void glGetSharpenTexFuncSGIS(GLenum target1,GLfloat * points1)
{
	static PFNGLGETSHARPENTEXFUNCSGISPROC_ALT fn=(PFNGLGETSHARPENTEXFUNCSGISPROC_ALT)glaltGetProcAddressExtension("glGetSharpenTexFuncSGIS","GL_SGIS_sharpen_texture");
	 fn(target1,points1);
}
#endif

#ifndef	GL_ALT_FUNDEF_SharpenTexFuncSGIS
#define GL_ALT_FUNDEF_SharpenTexFuncSGIS
typedef void (*PFNGLSHARPENTEXFUNCSGISPROC_ALT)(GLenum,GLsizei,const GLfloat *);
static inline void glSharpenTexFuncSGIS(GLenum target1,GLsizei n1,const GLfloat * points1)
{
	static PFNGLSHARPENTEXFUNCSGISPROC_ALT fn=(PFNGLSHARPENTEXFUNCSGISPROC_ALT)glaltGetProcAddressExtension("glSharpenTexFuncSGIS","GL_SGIS_sharpen_texture");
	 fn(target1,n1,points1);
}
#endif
CGUARDEND

#endif

#ifndef GL_SGIS_texture4D
#define GL_SGIS_texture4D
#ifndef GL_PACK_SKIP_VOLUMES_SGIS
#define GL_PACK_SKIP_VOLUMES_SGIS 0x8130
#endif //GL_PACK_SKIP_VOLUMES_SGIS
#ifndef GL_PACK_IMAGE_DEPTH_SGIS
#define GL_PACK_IMAGE_DEPTH_SGIS 0x8131
#endif //GL_PACK_IMAGE_DEPTH_SGIS
#ifndef GL_UNPACK_SKIP_VOLUMES_SGIS
#define GL_UNPACK_SKIP_VOLUMES_SGIS 0x8132
#endif //GL_UNPACK_SKIP_VOLUMES_SGIS
#ifndef GL_UNPACK_IMAGE_DEPTH_SGIS
#define GL_UNPACK_IMAGE_DEPTH_SGIS 0x8133
#endif //GL_UNPACK_IMAGE_DEPTH_SGIS
#ifndef GL_TEXTURE_4D_SGIS
#define GL_TEXTURE_4D_SGIS 0x8134
#endif //GL_TEXTURE_4D_SGIS
#ifndef GL_PROXY_TEXTURE_4D_SGIS
#define GL_PROXY_TEXTURE_4D_SGIS 0x8135
#endif //GL_PROXY_TEXTURE_4D_SGIS
#ifndef GL_TEXTURE_4DSIZE_SGIS
#define GL_TEXTURE_4DSIZE_SGIS 0x8136
#endif //GL_TEXTURE_4DSIZE_SGIS
#ifndef GL_TEXTURE_WRAP_Q_SGIS
#define GL_TEXTURE_WRAP_Q_SGIS 0x8137
#endif //GL_TEXTURE_WRAP_Q_SGIS
#ifndef GL_MAX_4D_TEXTURE_SIZE_SGIS
#define GL_MAX_4D_TEXTURE_SIZE_SGIS 0x8138
#endif //GL_MAX_4D_TEXTURE_SIZE_SGIS
#ifndef GL_TEXTURE_4D_BINDING_SGIS
#define GL_TEXTURE_4D_BINDING_SGIS 0x814F
#endif //GL_TEXTURE_4D_BINDING_SGIS
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_TexImage4DSGIS
#define GL_ALT_FUNDEF_TexImage4DSGIS
typedef void (*PFNGLTEXIMAGE4DSGISPROC_ALT)(GLenum,GLint,GLenum,GLsizei,GLsizei,GLsizei,GLsizei,GLint,GLenum,GLenum,const void *);
static inline void glTexImage4DSGIS(GLenum target1,GLint level1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLsizei size4d1,GLint border1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXIMAGE4DSGISPROC_ALT fn=(PFNGLTEXIMAGE4DSGISPROC_ALT)glaltGetProcAddressExtension("glTexImage4DSGIS","GL_SGIS_texture4D");
	 fn(target1,level1,internalformat1,width1,height1,depth1,size4d1,border1,format1,type1,pixels1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexSubImage4DSGIS
#define GL_ALT_FUNDEF_TexSubImage4DSGIS
typedef void (*PFNGLTEXSUBIMAGE4DSGISPROC_ALT)(GLenum,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLsizei,GLenum,GLenum,const void *);
static inline void glTexSubImage4DSGIS(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLint woffset1,GLsizei width1,GLsizei height1,GLsizei depth1,GLsizei size4d1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXSUBIMAGE4DSGISPROC_ALT fn=(PFNGLTEXSUBIMAGE4DSGISPROC_ALT)glaltGetProcAddressExtension("glTexSubImage4DSGIS","GL_SGIS_texture4D");
	 fn(target1,level1,xoffset1,yoffset1,zoffset1,woffset1,width1,height1,depth1,size4d1,format1,type1,pixels1);
}
#endif
CGUARDEND

#endif

#ifndef GL_SGIS_texture_border_clamp
#define GL_SGIS_texture_border_clamp
#ifndef GL_CLAMP_TO_BORDER_SGIS
#define GL_CLAMP_TO_BORDER_SGIS 0x812D
#endif //GL_CLAMP_TO_BORDER_SGIS
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIS_texture_color_mask
#define GL_SGIS_texture_color_mask
#ifndef GL_TEXTURE_COLOR_WRITEMASK_SGIS
#define GL_TEXTURE_COLOR_WRITEMASK_SGIS 0x81EF
#endif //GL_TEXTURE_COLOR_WRITEMASK_SGIS
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_TextureColorMaskSGIS
#define GL_ALT_FUNDEF_TextureColorMaskSGIS
typedef void (*PFNGLTEXTURECOLORMASKSGISPROC_ALT)(GLboolean,GLboolean,GLboolean,GLboolean);
static inline void glTextureColorMaskSGIS(GLboolean red1,GLboolean green1,GLboolean blue1,GLboolean alpha1)
{
	static PFNGLTEXTURECOLORMASKSGISPROC_ALT fn=(PFNGLTEXTURECOLORMASKSGISPROC_ALT)glaltGetProcAddressExtension("glTextureColorMaskSGIS","GL_SGIS_texture_color_mask");
	 fn(red1,green1,blue1,alpha1);
}
#endif
CGUARDEND

#endif

#ifndef GL_SGIS_texture_edge_clamp
#define GL_SGIS_texture_edge_clamp
#ifndef GL_CLAMP_TO_EDGE_SGIS
#define GL_CLAMP_TO_EDGE_SGIS 0x812F
#endif //GL_CLAMP_TO_EDGE_SGIS
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIS_texture_filter4
#define GL_SGIS_texture_filter4
#ifndef GL_FILTER4_SGIS
#define GL_FILTER4_SGIS 0x8146
#endif //GL_FILTER4_SGIS
#ifndef GL_TEXTURE_FILTER4_SIZE_SGIS
#define GL_TEXTURE_FILTER4_SIZE_SGIS 0x8147
#endif //GL_TEXTURE_FILTER4_SIZE_SGIS
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetTexFilterFuncSGIS
#define GL_ALT_FUNDEF_GetTexFilterFuncSGIS
typedef void (*PFNGLGETTEXFILTERFUNCSGISPROC_ALT)(GLenum,GLenum,GLfloat *);
static inline void glGetTexFilterFuncSGIS(GLenum target1,GLenum filter1,GLfloat * weights1)
{
	static PFNGLGETTEXFILTERFUNCSGISPROC_ALT fn=(PFNGLGETTEXFILTERFUNCSGISPROC_ALT)glaltGetProcAddressExtension("glGetTexFilterFuncSGIS","GL_SGIS_texture_filter4");
	 fn(target1,filter1,weights1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexFilterFuncSGIS
#define GL_ALT_FUNDEF_TexFilterFuncSGIS
typedef void (*PFNGLTEXFILTERFUNCSGISPROC_ALT)(GLenum,GLenum,GLsizei,const GLfloat *);
static inline void glTexFilterFuncSGIS(GLenum target1,GLenum filter1,GLsizei n1,const GLfloat * weights1)
{
	static PFNGLTEXFILTERFUNCSGISPROC_ALT fn=(PFNGLTEXFILTERFUNCSGISPROC_ALT)glaltGetProcAddressExtension("glTexFilterFuncSGIS","GL_SGIS_texture_filter4");
	 fn(target1,filter1,n1,weights1);
}
#endif
CGUARDEND

#endif

#ifndef GL_SGIS_texture_lod
#define GL_SGIS_texture_lod
#ifndef GL_TEXTURE_MIN_LOD_SGIS
#define GL_TEXTURE_MIN_LOD_SGIS 0x813A
#endif //GL_TEXTURE_MIN_LOD_SGIS
#ifndef GL_TEXTURE_MAX_LOD_SGIS
#define GL_TEXTURE_MAX_LOD_SGIS 0x813B
#endif //GL_TEXTURE_MAX_LOD_SGIS
#ifndef GL_TEXTURE_BASE_LEVEL_SGIS
#define GL_TEXTURE_BASE_LEVEL_SGIS 0x813C
#endif //GL_TEXTURE_BASE_LEVEL_SGIS
#ifndef GL_TEXTURE_MAX_LEVEL_SGIS
#define GL_TEXTURE_MAX_LEVEL_SGIS 0x813D
#endif //GL_TEXTURE_MAX_LEVEL_SGIS
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIS_texture_select
#define GL_SGIS_texture_select
#ifndef GL_DUAL_ALPHA4_SGIS
#define GL_DUAL_ALPHA4_SGIS 0x8110
#endif //GL_DUAL_ALPHA4_SGIS
#ifndef GL_DUAL_ALPHA8_SGIS
#define GL_DUAL_ALPHA8_SGIS 0x8111
#endif //GL_DUAL_ALPHA8_SGIS
#ifndef GL_DUAL_ALPHA12_SGIS
#define GL_DUAL_ALPHA12_SGIS 0x8112
#endif //GL_DUAL_ALPHA12_SGIS
#ifndef GL_DUAL_ALPHA16_SGIS
#define GL_DUAL_ALPHA16_SGIS 0x8113
#endif //GL_DUAL_ALPHA16_SGIS
#ifndef GL_DUAL_LUMINANCE4_SGIS
#define GL_DUAL_LUMINANCE4_SGIS 0x8114
#endif //GL_DUAL_LUMINANCE4_SGIS
#ifndef GL_DUAL_LUMINANCE8_SGIS
#define GL_DUAL_LUMINANCE8_SGIS 0x8115
#endif //GL_DUAL_LUMINANCE8_SGIS
#ifndef GL_DUAL_LUMINANCE12_SGIS
#define GL_DUAL_LUMINANCE12_SGIS 0x8116
#endif //GL_DUAL_LUMINANCE12_SGIS
#ifndef GL_DUAL_LUMINANCE16_SGIS
#define GL_DUAL_LUMINANCE16_SGIS 0x8117
#endif //GL_DUAL_LUMINANCE16_SGIS
#ifndef GL_DUAL_INTENSITY4_SGIS
#define GL_DUAL_INTENSITY4_SGIS 0x8118
#endif //GL_DUAL_INTENSITY4_SGIS
#ifndef GL_DUAL_INTENSITY8_SGIS
#define GL_DUAL_INTENSITY8_SGIS 0x8119
#endif //GL_DUAL_INTENSITY8_SGIS
#ifndef GL_DUAL_INTENSITY12_SGIS
#define GL_DUAL_INTENSITY12_SGIS 0x811A
#endif //GL_DUAL_INTENSITY12_SGIS
#ifndef GL_DUAL_INTENSITY16_SGIS
#define GL_DUAL_INTENSITY16_SGIS 0x811B
#endif //GL_DUAL_INTENSITY16_SGIS
#ifndef GL_DUAL_LUMINANCE_ALPHA4_SGIS
#define GL_DUAL_LUMINANCE_ALPHA4_SGIS 0x811C
#endif //GL_DUAL_LUMINANCE_ALPHA4_SGIS
#ifndef GL_DUAL_LUMINANCE_ALPHA8_SGIS
#define GL_DUAL_LUMINANCE_ALPHA8_SGIS 0x811D
#endif //GL_DUAL_LUMINANCE_ALPHA8_SGIS
#ifndef GL_QUAD_ALPHA4_SGIS
#define GL_QUAD_ALPHA4_SGIS 0x811E
#endif //GL_QUAD_ALPHA4_SGIS
#ifndef GL_QUAD_ALPHA8_SGIS
#define GL_QUAD_ALPHA8_SGIS 0x811F
#endif //GL_QUAD_ALPHA8_SGIS
#ifndef GL_QUAD_LUMINANCE4_SGIS
#define GL_QUAD_LUMINANCE4_SGIS 0x8120
#endif //GL_QUAD_LUMINANCE4_SGIS
#ifndef GL_QUAD_LUMINANCE8_SGIS
#define GL_QUAD_LUMINANCE8_SGIS 0x8121
#endif //GL_QUAD_LUMINANCE8_SGIS
#ifndef GL_QUAD_INTENSITY4_SGIS
#define GL_QUAD_INTENSITY4_SGIS 0x8122
#endif //GL_QUAD_INTENSITY4_SGIS
#ifndef GL_QUAD_INTENSITY8_SGIS
#define GL_QUAD_INTENSITY8_SGIS 0x8123
#endif //GL_QUAD_INTENSITY8_SGIS
#ifndef GL_DUAL_TEXTURE_SELECT_SGIS
#define GL_DUAL_TEXTURE_SELECT_SGIS 0x8124
#endif //GL_DUAL_TEXTURE_SELECT_SGIS
#ifndef GL_QUAD_TEXTURE_SELECT_SGIS
#define GL_QUAD_TEXTURE_SELECT_SGIS 0x8125
#endif //GL_QUAD_TEXTURE_SELECT_SGIS
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIX_async
#define GL_SGIX_async
#ifndef GL_ASYNC_MARKER_SGIX
#define GL_ASYNC_MARKER_SGIX 0x8329
#endif //GL_ASYNC_MARKER_SGIX
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_AsyncMarkerSGIX
#define GL_ALT_FUNDEF_AsyncMarkerSGIX
typedef void (*PFNGLASYNCMARKERSGIXPROC_ALT)(GLuint);
static inline void glAsyncMarkerSGIX(GLuint marker1)
{
	static PFNGLASYNCMARKERSGIXPROC_ALT fn=(PFNGLASYNCMARKERSGIXPROC_ALT)glaltGetProcAddressExtension("glAsyncMarkerSGIX","GL_SGIX_async");
	 fn(marker1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DeleteAsyncMarkersSGIX
#define GL_ALT_FUNDEF_DeleteAsyncMarkersSGIX
typedef void (*PFNGLDELETEASYNCMARKERSSGIXPROC_ALT)(GLuint,GLsizei);
static inline void glDeleteAsyncMarkersSGIX(GLuint marker1,GLsizei range1)
{
	static PFNGLDELETEASYNCMARKERSSGIXPROC_ALT fn=(PFNGLDELETEASYNCMARKERSSGIXPROC_ALT)glaltGetProcAddressExtension("glDeleteAsyncMarkersSGIX","GL_SGIX_async");
	 fn(marker1,range1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FinishAsyncSGIX
#define GL_ALT_FUNDEF_FinishAsyncSGIX
typedef GLint (*PFNGLFINISHASYNCSGIXPROC_ALT)(GLuint *);
static inline GLint glFinishAsyncSGIX(GLuint * markerp1)
{
	static PFNGLFINISHASYNCSGIXPROC_ALT fn=(PFNGLFINISHASYNCSGIXPROC_ALT)glaltGetProcAddressExtension("glFinishAsyncSGIX","GL_SGIX_async");
	return fn(markerp1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GenAsyncMarkersSGIX
#define GL_ALT_FUNDEF_GenAsyncMarkersSGIX
typedef GLuint (*PFNGLGENASYNCMARKERSSGIXPROC_ALT)(GLsizei);
static inline GLuint glGenAsyncMarkersSGIX(GLsizei range1)
{
	static PFNGLGENASYNCMARKERSSGIXPROC_ALT fn=(PFNGLGENASYNCMARKERSSGIXPROC_ALT)glaltGetProcAddressExtension("glGenAsyncMarkersSGIX","GL_SGIX_async");
	return fn(range1);
}
#endif

#ifndef	GL_ALT_FUNDEF_IsAsyncMarkerSGIX
#define GL_ALT_FUNDEF_IsAsyncMarkerSGIX
typedef GLboolean (*PFNGLISASYNCMARKERSGIXPROC_ALT)(GLuint);
static inline GLboolean glIsAsyncMarkerSGIX(GLuint marker1)
{
	static PFNGLISASYNCMARKERSGIXPROC_ALT fn=(PFNGLISASYNCMARKERSGIXPROC_ALT)glaltGetProcAddressExtension("glIsAsyncMarkerSGIX","GL_SGIX_async");
	return fn(marker1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PollAsyncSGIX
#define GL_ALT_FUNDEF_PollAsyncSGIX
typedef GLint (*PFNGLPOLLASYNCSGIXPROC_ALT)(GLuint *);
static inline GLint glPollAsyncSGIX(GLuint * markerp1)
{
	static PFNGLPOLLASYNCSGIXPROC_ALT fn=(PFNGLPOLLASYNCSGIXPROC_ALT)glaltGetProcAddressExtension("glPollAsyncSGIX","GL_SGIX_async");
	return fn(markerp1);
}
#endif
CGUARDEND

#endif

#ifndef GL_SGIX_async_histogram
#define GL_SGIX_async_histogram
#ifndef GL_ASYNC_HISTOGRAM_SGIX
#define GL_ASYNC_HISTOGRAM_SGIX 0x832C
#endif //GL_ASYNC_HISTOGRAM_SGIX
#ifndef GL_MAX_ASYNC_HISTOGRAM_SGIX
#define GL_MAX_ASYNC_HISTOGRAM_SGIX 0x832D
#endif //GL_MAX_ASYNC_HISTOGRAM_SGIX
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIX_async_pixel
#define GL_SGIX_async_pixel
#ifndef GL_ASYNC_TEX_IMAGE_SGIX
#define GL_ASYNC_TEX_IMAGE_SGIX 0x835C
#endif //GL_ASYNC_TEX_IMAGE_SGIX
#ifndef GL_ASYNC_DRAW_PIXELS_SGIX
#define GL_ASYNC_DRAW_PIXELS_SGIX 0x835D
#endif //GL_ASYNC_DRAW_PIXELS_SGIX
#ifndef GL_ASYNC_READ_PIXELS_SGIX
#define GL_ASYNC_READ_PIXELS_SGIX 0x835E
#endif //GL_ASYNC_READ_PIXELS_SGIX
#ifndef GL_MAX_ASYNC_TEX_IMAGE_SGIX
#define GL_MAX_ASYNC_TEX_IMAGE_SGIX 0x835F
#endif //GL_MAX_ASYNC_TEX_IMAGE_SGIX
#ifndef GL_MAX_ASYNC_DRAW_PIXELS_SGIX
#define GL_MAX_ASYNC_DRAW_PIXELS_SGIX 0x8360
#endif //GL_MAX_ASYNC_DRAW_PIXELS_SGIX
#ifndef GL_MAX_ASYNC_READ_PIXELS_SGIX
#define GL_MAX_ASYNC_READ_PIXELS_SGIX 0x8361
#endif //GL_MAX_ASYNC_READ_PIXELS_SGIX
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIX_blend_alpha_minmax
#define GL_SGIX_blend_alpha_minmax
#ifndef GL_ALPHA_MIN_SGIX
#define GL_ALPHA_MIN_SGIX 0x8320
#endif //GL_ALPHA_MIN_SGIX
#ifndef GL_ALPHA_MAX_SGIX
#define GL_ALPHA_MAX_SGIX 0x8321
#endif //GL_ALPHA_MAX_SGIX
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIX_calligraphic_fragment
#define GL_SGIX_calligraphic_fragment
#ifndef GL_CALLIGRAPHIC_FRAGMENT_SGIX
#define GL_CALLIGRAPHIC_FRAGMENT_SGIX 0x8183
#endif //GL_CALLIGRAPHIC_FRAGMENT_SGIX
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIX_clipmap
#define GL_SGIX_clipmap
#ifndef GL_LINEAR_CLIPMAP_LINEAR_SGIX
#define GL_LINEAR_CLIPMAP_LINEAR_SGIX 0x8170
#endif //GL_LINEAR_CLIPMAP_LINEAR_SGIX
#ifndef GL_TEXTURE_CLIPMAP_CENTER_SGIX
#define GL_TEXTURE_CLIPMAP_CENTER_SGIX 0x8171
#endif //GL_TEXTURE_CLIPMAP_CENTER_SGIX
#ifndef GL_TEXTURE_CLIPMAP_FRAME_SGIX
#define GL_TEXTURE_CLIPMAP_FRAME_SGIX 0x8172
#endif //GL_TEXTURE_CLIPMAP_FRAME_SGIX
#ifndef GL_TEXTURE_CLIPMAP_OFFSET_SGIX
#define GL_TEXTURE_CLIPMAP_OFFSET_SGIX 0x8173
#endif //GL_TEXTURE_CLIPMAP_OFFSET_SGIX
#ifndef GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX
#define GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX 0x8174
#endif //GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX
#ifndef GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX
#define GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX 0x8175
#endif //GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX
#ifndef GL_TEXTURE_CLIPMAP_DEPTH_SGIX
#define GL_TEXTURE_CLIPMAP_DEPTH_SGIX 0x8176
#endif //GL_TEXTURE_CLIPMAP_DEPTH_SGIX
#ifndef GL_MAX_CLIPMAP_DEPTH_SGIX
#define GL_MAX_CLIPMAP_DEPTH_SGIX 0x8177
#endif //GL_MAX_CLIPMAP_DEPTH_SGIX
#ifndef GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX
#define GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX 0x8178
#endif //GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX
#ifndef GL_NEAREST_CLIPMAP_NEAREST_SGIX
#define GL_NEAREST_CLIPMAP_NEAREST_SGIX 0x844D
#endif //GL_NEAREST_CLIPMAP_NEAREST_SGIX
#ifndef GL_NEAREST_CLIPMAP_LINEAR_SGIX
#define GL_NEAREST_CLIPMAP_LINEAR_SGIX 0x844E
#endif //GL_NEAREST_CLIPMAP_LINEAR_SGIX
#ifndef GL_LINEAR_CLIPMAP_NEAREST_SGIX
#define GL_LINEAR_CLIPMAP_NEAREST_SGIX 0x844F
#endif //GL_LINEAR_CLIPMAP_NEAREST_SGIX
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIX_convolution_accuracy
#define GL_SGIX_convolution_accuracy
#ifndef GL_CONVOLUTION_HINT_SGIX
#define GL_CONVOLUTION_HINT_SGIX 0x8316
#endif //GL_CONVOLUTION_HINT_SGIX
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIX_depth_pass_instrument
#define GL_SGIX_depth_pass_instrument
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIX_depth_texture
#define GL_SGIX_depth_texture
#ifndef GL_DEPTH_COMPONENT16_SGIX
#define GL_DEPTH_COMPONENT16_SGIX 0x81A5
#endif //GL_DEPTH_COMPONENT16_SGIX
#ifndef GL_DEPTH_COMPONENT24_SGIX
#define GL_DEPTH_COMPONENT24_SGIX 0x81A6
#endif //GL_DEPTH_COMPONENT24_SGIX
#ifndef GL_DEPTH_COMPONENT32_SGIX
#define GL_DEPTH_COMPONENT32_SGIX 0x81A7
#endif //GL_DEPTH_COMPONENT32_SGIX
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIX_flush_raster
#define GL_SGIX_flush_raster
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_FlushRasterSGIX
#define GL_ALT_FUNDEF_FlushRasterSGIX
typedef void (*PFNGLFLUSHRASTERSGIXPROC_ALT)();
static inline void glFlushRasterSGIX()
{
	static PFNGLFLUSHRASTERSGIXPROC_ALT fn=(PFNGLFLUSHRASTERSGIXPROC_ALT)glaltGetProcAddressExtension("glFlushRasterSGIX","GL_SGIX_flush_raster");
	 fn();
}
#endif
CGUARDEND

#endif

#ifndef GL_SGIX_fog_offset
#define GL_SGIX_fog_offset
#ifndef GL_FOG_OFFSET_SGIX
#define GL_FOG_OFFSET_SGIX 0x8198
#endif //GL_FOG_OFFSET_SGIX
#ifndef GL_FOG_OFFSET_VALUE_SGIX
#define GL_FOG_OFFSET_VALUE_SGIX 0x8199
#endif //GL_FOG_OFFSET_VALUE_SGIX
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIX_fragment_lighting
#define GL_SGIX_fragment_lighting
#ifndef GL_FRAGMENT_LIGHTING_SGIX
#define GL_FRAGMENT_LIGHTING_SGIX 0x8400
#endif //GL_FRAGMENT_LIGHTING_SGIX
#ifndef GL_FRAGMENT_COLOR_MATERIAL_SGIX
#define GL_FRAGMENT_COLOR_MATERIAL_SGIX 0x8401
#endif //GL_FRAGMENT_COLOR_MATERIAL_SGIX
#ifndef GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX
#define GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX 0x8402
#endif //GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX
#ifndef GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX
#define GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX 0x8403
#endif //GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX
#ifndef GL_MAX_FRAGMENT_LIGHTS_SGIX
#define GL_MAX_FRAGMENT_LIGHTS_SGIX 0x8404
#endif //GL_MAX_FRAGMENT_LIGHTS_SGIX
#ifndef GL_MAX_ACTIVE_LIGHTS_SGIX
#define GL_MAX_ACTIVE_LIGHTS_SGIX 0x8405
#endif //GL_MAX_ACTIVE_LIGHTS_SGIX
#ifndef GL_CURRENT_RASTER_NORMAL_SGIX
#define GL_CURRENT_RASTER_NORMAL_SGIX 0x8406
#endif //GL_CURRENT_RASTER_NORMAL_SGIX
#ifndef GL_LIGHT_ENV_MODE_SGIX
#define GL_LIGHT_ENV_MODE_SGIX 0x8407
#endif //GL_LIGHT_ENV_MODE_SGIX
#ifndef GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX
#define GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX 0x8408
#endif //GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX
#ifndef GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX
#define GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX 0x8409
#endif //GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX
#ifndef GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX
#define GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX 0x840A
#endif //GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX
#ifndef GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX
#define GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX 0x840B
#endif //GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX
#ifndef GL_FRAGMENT_LIGHT0_SGIX
#define GL_FRAGMENT_LIGHT0_SGIX 0x840C
#endif //GL_FRAGMENT_LIGHT0_SGIX
#ifndef GL_FRAGMENT_LIGHT1_SGIX
#define GL_FRAGMENT_LIGHT1_SGIX 0x840D
#endif //GL_FRAGMENT_LIGHT1_SGIX
#ifndef GL_FRAGMENT_LIGHT2_SGIX
#define GL_FRAGMENT_LIGHT2_SGIX 0x840E
#endif //GL_FRAGMENT_LIGHT2_SGIX
#ifndef GL_FRAGMENT_LIGHT3_SGIX
#define GL_FRAGMENT_LIGHT3_SGIX 0x840F
#endif //GL_FRAGMENT_LIGHT3_SGIX
#ifndef GL_FRAGMENT_LIGHT4_SGIX
#define GL_FRAGMENT_LIGHT4_SGIX 0x8410
#endif //GL_FRAGMENT_LIGHT4_SGIX
#ifndef GL_FRAGMENT_LIGHT5_SGIX
#define GL_FRAGMENT_LIGHT5_SGIX 0x8411
#endif //GL_FRAGMENT_LIGHT5_SGIX
#ifndef GL_FRAGMENT_LIGHT6_SGIX
#define GL_FRAGMENT_LIGHT6_SGIX 0x8412
#endif //GL_FRAGMENT_LIGHT6_SGIX
#ifndef GL_FRAGMENT_LIGHT7_SGIX
#define GL_FRAGMENT_LIGHT7_SGIX 0x8413
#endif //GL_FRAGMENT_LIGHT7_SGIX
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_FragmentColorMaterialSGIX
#define GL_ALT_FUNDEF_FragmentColorMaterialSGIX
typedef void (*PFNGLFRAGMENTCOLORMATERIALSGIXPROC_ALT)(GLenum,GLenum);
static inline void glFragmentColorMaterialSGIX(GLenum face1,GLenum mode1)
{
	static PFNGLFRAGMENTCOLORMATERIALSGIXPROC_ALT fn=(PFNGLFRAGMENTCOLORMATERIALSGIXPROC_ALT)glaltGetProcAddressExtension("glFragmentColorMaterialSGIX","GL_SGIX_fragment_lighting");
	 fn(face1,mode1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FragmentLightModelfSGIX
#define GL_ALT_FUNDEF_FragmentLightModelfSGIX
typedef void (*PFNGLFRAGMENTLIGHTMODELFSGIXPROC_ALT)(GLenum,GLfloat);
static inline void glFragmentLightModelfSGIX(GLenum pname1,GLfloat param1)
{
	static PFNGLFRAGMENTLIGHTMODELFSGIXPROC_ALT fn=(PFNGLFRAGMENTLIGHTMODELFSGIXPROC_ALT)glaltGetProcAddressExtension("glFragmentLightModelfSGIX","GL_SGIX_fragment_lighting");
	 fn(pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FragmentLightModelfvSGIX
#define GL_ALT_FUNDEF_FragmentLightModelfvSGIX
typedef void (*PFNGLFRAGMENTLIGHTMODELFVSGIXPROC_ALT)(GLenum,const GLfloat *);
static inline void glFragmentLightModelfvSGIX(GLenum pname1,const GLfloat * params1)
{
	static PFNGLFRAGMENTLIGHTMODELFVSGIXPROC_ALT fn=(PFNGLFRAGMENTLIGHTMODELFVSGIXPROC_ALT)glaltGetProcAddressExtension("glFragmentLightModelfvSGIX","GL_SGIX_fragment_lighting");
	 fn(pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FragmentLightModeliSGIX
#define GL_ALT_FUNDEF_FragmentLightModeliSGIX
typedef void (*PFNGLFRAGMENTLIGHTMODELISGIXPROC_ALT)(GLenum,GLint);
static inline void glFragmentLightModeliSGIX(GLenum pname1,GLint param1)
{
	static PFNGLFRAGMENTLIGHTMODELISGIXPROC_ALT fn=(PFNGLFRAGMENTLIGHTMODELISGIXPROC_ALT)glaltGetProcAddressExtension("glFragmentLightModeliSGIX","GL_SGIX_fragment_lighting");
	 fn(pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FragmentLightModelivSGIX
#define GL_ALT_FUNDEF_FragmentLightModelivSGIX
typedef void (*PFNGLFRAGMENTLIGHTMODELIVSGIXPROC_ALT)(GLenum,const GLint *);
static inline void glFragmentLightModelivSGIX(GLenum pname1,const GLint * params1)
{
	static PFNGLFRAGMENTLIGHTMODELIVSGIXPROC_ALT fn=(PFNGLFRAGMENTLIGHTMODELIVSGIXPROC_ALT)glaltGetProcAddressExtension("glFragmentLightModelivSGIX","GL_SGIX_fragment_lighting");
	 fn(pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FragmentLightfSGIX
#define GL_ALT_FUNDEF_FragmentLightfSGIX
typedef void (*PFNGLFRAGMENTLIGHTFSGIXPROC_ALT)(GLenum,GLenum,GLfloat);
static inline void glFragmentLightfSGIX(GLenum light1,GLenum pname1,GLfloat param1)
{
	static PFNGLFRAGMENTLIGHTFSGIXPROC_ALT fn=(PFNGLFRAGMENTLIGHTFSGIXPROC_ALT)glaltGetProcAddressExtension("glFragmentLightfSGIX","GL_SGIX_fragment_lighting");
	 fn(light1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FragmentLightfvSGIX
#define GL_ALT_FUNDEF_FragmentLightfvSGIX
typedef void (*PFNGLFRAGMENTLIGHTFVSGIXPROC_ALT)(GLenum,GLenum,const GLfloat *);
static inline void glFragmentLightfvSGIX(GLenum light1,GLenum pname1,const GLfloat * params1)
{
	static PFNGLFRAGMENTLIGHTFVSGIXPROC_ALT fn=(PFNGLFRAGMENTLIGHTFVSGIXPROC_ALT)glaltGetProcAddressExtension("glFragmentLightfvSGIX","GL_SGIX_fragment_lighting");
	 fn(light1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FragmentLightiSGIX
#define GL_ALT_FUNDEF_FragmentLightiSGIX
typedef void (*PFNGLFRAGMENTLIGHTISGIXPROC_ALT)(GLenum,GLenum,GLint);
static inline void glFragmentLightiSGIX(GLenum light1,GLenum pname1,GLint param1)
{
	static PFNGLFRAGMENTLIGHTISGIXPROC_ALT fn=(PFNGLFRAGMENTLIGHTISGIXPROC_ALT)glaltGetProcAddressExtension("glFragmentLightiSGIX","GL_SGIX_fragment_lighting");
	 fn(light1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FragmentLightivSGIX
#define GL_ALT_FUNDEF_FragmentLightivSGIX
typedef void (*PFNGLFRAGMENTLIGHTIVSGIXPROC_ALT)(GLenum,GLenum,const GLint *);
static inline void glFragmentLightivSGIX(GLenum light1,GLenum pname1,const GLint * params1)
{
	static PFNGLFRAGMENTLIGHTIVSGIXPROC_ALT fn=(PFNGLFRAGMENTLIGHTIVSGIXPROC_ALT)glaltGetProcAddressExtension("glFragmentLightivSGIX","GL_SGIX_fragment_lighting");
	 fn(light1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FragmentMaterialfSGIX
#define GL_ALT_FUNDEF_FragmentMaterialfSGIX
typedef void (*PFNGLFRAGMENTMATERIALFSGIXPROC_ALT)(GLenum,GLenum,GLfloat);
static inline void glFragmentMaterialfSGIX(GLenum face1,GLenum pname1,GLfloat param1)
{
	static PFNGLFRAGMENTMATERIALFSGIXPROC_ALT fn=(PFNGLFRAGMENTMATERIALFSGIXPROC_ALT)glaltGetProcAddressExtension("glFragmentMaterialfSGIX","GL_SGIX_fragment_lighting");
	 fn(face1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FragmentMaterialfvSGIX
#define GL_ALT_FUNDEF_FragmentMaterialfvSGIX
typedef void (*PFNGLFRAGMENTMATERIALFVSGIXPROC_ALT)(GLenum,GLenum,const GLfloat *);
static inline void glFragmentMaterialfvSGIX(GLenum face1,GLenum pname1,const GLfloat * params1)
{
	static PFNGLFRAGMENTMATERIALFVSGIXPROC_ALT fn=(PFNGLFRAGMENTMATERIALFVSGIXPROC_ALT)glaltGetProcAddressExtension("glFragmentMaterialfvSGIX","GL_SGIX_fragment_lighting");
	 fn(face1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FragmentMaterialiSGIX
#define GL_ALT_FUNDEF_FragmentMaterialiSGIX
typedef void (*PFNGLFRAGMENTMATERIALISGIXPROC_ALT)(GLenum,GLenum,GLint);
static inline void glFragmentMaterialiSGIX(GLenum face1,GLenum pname1,GLint param1)
{
	static PFNGLFRAGMENTMATERIALISGIXPROC_ALT fn=(PFNGLFRAGMENTMATERIALISGIXPROC_ALT)glaltGetProcAddressExtension("glFragmentMaterialiSGIX","GL_SGIX_fragment_lighting");
	 fn(face1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_FragmentMaterialivSGIX
#define GL_ALT_FUNDEF_FragmentMaterialivSGIX
typedef void (*PFNGLFRAGMENTMATERIALIVSGIXPROC_ALT)(GLenum,GLenum,const GLint *);
static inline void glFragmentMaterialivSGIX(GLenum face1,GLenum pname1,const GLint * params1)
{
	static PFNGLFRAGMENTMATERIALIVSGIXPROC_ALT fn=(PFNGLFRAGMENTMATERIALIVSGIXPROC_ALT)glaltGetProcAddressExtension("glFragmentMaterialivSGIX","GL_SGIX_fragment_lighting");
	 fn(face1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetFragmentLightfvSGIX
#define GL_ALT_FUNDEF_GetFragmentLightfvSGIX
typedef void (*PFNGLGETFRAGMENTLIGHTFVSGIXPROC_ALT)(GLenum,GLenum,GLfloat *);
static inline void glGetFragmentLightfvSGIX(GLenum light1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETFRAGMENTLIGHTFVSGIXPROC_ALT fn=(PFNGLGETFRAGMENTLIGHTFVSGIXPROC_ALT)glaltGetProcAddressExtension("glGetFragmentLightfvSGIX","GL_SGIX_fragment_lighting");
	 fn(light1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetFragmentLightivSGIX
#define GL_ALT_FUNDEF_GetFragmentLightivSGIX
typedef void (*PFNGLGETFRAGMENTLIGHTIVSGIXPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetFragmentLightivSGIX(GLenum light1,GLenum pname1,GLint * params1)
{
	static PFNGLGETFRAGMENTLIGHTIVSGIXPROC_ALT fn=(PFNGLGETFRAGMENTLIGHTIVSGIXPROC_ALT)glaltGetProcAddressExtension("glGetFragmentLightivSGIX","GL_SGIX_fragment_lighting");
	 fn(light1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetFragmentMaterialfvSGIX
#define GL_ALT_FUNDEF_GetFragmentMaterialfvSGIX
typedef void (*PFNGLGETFRAGMENTMATERIALFVSGIXPROC_ALT)(GLenum,GLenum,GLfloat *);
static inline void glGetFragmentMaterialfvSGIX(GLenum face1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETFRAGMENTMATERIALFVSGIXPROC_ALT fn=(PFNGLGETFRAGMENTMATERIALFVSGIXPROC_ALT)glaltGetProcAddressExtension("glGetFragmentMaterialfvSGIX","GL_SGIX_fragment_lighting");
	 fn(face1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetFragmentMaterialivSGIX
#define GL_ALT_FUNDEF_GetFragmentMaterialivSGIX
typedef void (*PFNGLGETFRAGMENTMATERIALIVSGIXPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetFragmentMaterialivSGIX(GLenum face1,GLenum pname1,GLint * params1)
{
	static PFNGLGETFRAGMENTMATERIALIVSGIXPROC_ALT fn=(PFNGLGETFRAGMENTMATERIALIVSGIXPROC_ALT)glaltGetProcAddressExtension("glGetFragmentMaterialivSGIX","GL_SGIX_fragment_lighting");
	 fn(face1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_LightEnviSGIX
#define GL_ALT_FUNDEF_LightEnviSGIX
typedef void (*PFNGLLIGHTENVISGIXPROC_ALT)(GLenum,GLint);
static inline void glLightEnviSGIX(GLenum pname1,GLint param1)
{
	static PFNGLLIGHTENVISGIXPROC_ALT fn=(PFNGLLIGHTENVISGIXPROC_ALT)glaltGetProcAddressExtension("glLightEnviSGIX","GL_SGIX_fragment_lighting");
	 fn(pname1,param1);
}
#endif
CGUARDEND

#endif

#ifndef GL_SGIX_framezoom
#define GL_SGIX_framezoom
#ifndef GL_FRAMEZOOM_SGIX
#define GL_FRAMEZOOM_SGIX 0x818B
#endif //GL_FRAMEZOOM_SGIX
#ifndef GL_FRAMEZOOM_FACTOR_SGIX
#define GL_FRAMEZOOM_FACTOR_SGIX 0x818C
#endif //GL_FRAMEZOOM_FACTOR_SGIX
#ifndef GL_MAX_FRAMEZOOM_FACTOR_SGIX
#define GL_MAX_FRAMEZOOM_FACTOR_SGIX 0x818D
#endif //GL_MAX_FRAMEZOOM_FACTOR_SGIX
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_FrameZoomSGIX
#define GL_ALT_FUNDEF_FrameZoomSGIX
typedef void (*PFNGLFRAMEZOOMSGIXPROC_ALT)(GLint);
static inline void glFrameZoomSGIX(GLint factor1)
{
	static PFNGLFRAMEZOOMSGIXPROC_ALT fn=(PFNGLFRAMEZOOMSGIXPROC_ALT)glaltGetProcAddressExtension("glFrameZoomSGIX","GL_SGIX_framezoom");
	 fn(factor1);
}
#endif
CGUARDEND

#endif

#ifndef GL_SGIX_igloo_interface
#define GL_SGIX_igloo_interface
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_IglooInterfaceSGIX
#define GL_ALT_FUNDEF_IglooInterfaceSGIX
typedef void (*PFNGLIGLOOINTERFACESGIXPROC_ALT)(GLenum,const void *);
static inline void glIglooInterfaceSGIX(GLenum pname1,const void * params1)
{
	static PFNGLIGLOOINTERFACESGIXPROC_ALT fn=(PFNGLIGLOOINTERFACESGIXPROC_ALT)glaltGetProcAddressExtension("glIglooInterfaceSGIX","GL_SGIX_igloo_interface");
	 fn(pname1,params1);
}
#endif
CGUARDEND

#endif

#ifndef GL_SGIX_instruments
#define GL_SGIX_instruments
#ifndef GL_INSTRUMENT_BUFFER_POINTER_SGIX
#define GL_INSTRUMENT_BUFFER_POINTER_SGIX 0x8180
#endif //GL_INSTRUMENT_BUFFER_POINTER_SGIX
#ifndef GL_INSTRUMENT_MEASUREMENTS_SGIX
#define GL_INSTRUMENT_MEASUREMENTS_SGIX 0x8181
#endif //GL_INSTRUMENT_MEASUREMENTS_SGIX
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetInstrumentsSGIX
#define GL_ALT_FUNDEF_GetInstrumentsSGIX
typedef GLint (*PFNGLGETINSTRUMENTSSGIXPROC_ALT)();
static inline GLint glGetInstrumentsSGIX()
{
	static PFNGLGETINSTRUMENTSSGIXPROC_ALT fn=(PFNGLGETINSTRUMENTSSGIXPROC_ALT)glaltGetProcAddressExtension("glGetInstrumentsSGIX","GL_SGIX_instruments");
	return fn();
}
#endif

#ifndef	GL_ALT_FUNDEF_InstrumentsBufferSGIX
#define GL_ALT_FUNDEF_InstrumentsBufferSGIX
typedef void (*PFNGLINSTRUMENTSBUFFERSGIXPROC_ALT)(GLsizei,GLint *);
static inline void glInstrumentsBufferSGIX(GLsizei size1,GLint * buffer1)
{
	static PFNGLINSTRUMENTSBUFFERSGIXPROC_ALT fn=(PFNGLINSTRUMENTSBUFFERSGIXPROC_ALT)glaltGetProcAddressExtension("glInstrumentsBufferSGIX","GL_SGIX_instruments");
	 fn(size1,buffer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_PollInstrumentsSGIX
#define GL_ALT_FUNDEF_PollInstrumentsSGIX
typedef GLint (*PFNGLPOLLINSTRUMENTSSGIXPROC_ALT)(GLint *);
static inline GLint glPollInstrumentsSGIX(GLint * marker_p1)
{
	static PFNGLPOLLINSTRUMENTSSGIXPROC_ALT fn=(PFNGLPOLLINSTRUMENTSSGIXPROC_ALT)glaltGetProcAddressExtension("glPollInstrumentsSGIX","GL_SGIX_instruments");
	return fn(marker_p1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ReadInstrumentsSGIX
#define GL_ALT_FUNDEF_ReadInstrumentsSGIX
typedef void (*PFNGLREADINSTRUMENTSSGIXPROC_ALT)(GLint);
static inline void glReadInstrumentsSGIX(GLint marker1)
{
	static PFNGLREADINSTRUMENTSSGIXPROC_ALT fn=(PFNGLREADINSTRUMENTSSGIXPROC_ALT)glaltGetProcAddressExtension("glReadInstrumentsSGIX","GL_SGIX_instruments");
	 fn(marker1);
}
#endif

#ifndef	GL_ALT_FUNDEF_StartInstrumentsSGIX
#define GL_ALT_FUNDEF_StartInstrumentsSGIX
typedef void (*PFNGLSTARTINSTRUMENTSSGIXPROC_ALT)();
static inline void glStartInstrumentsSGIX()
{
	static PFNGLSTARTINSTRUMENTSSGIXPROC_ALT fn=(PFNGLSTARTINSTRUMENTSSGIXPROC_ALT)glaltGetProcAddressExtension("glStartInstrumentsSGIX","GL_SGIX_instruments");
	 fn();
}
#endif

#ifndef	GL_ALT_FUNDEF_StopInstrumentsSGIX
#define GL_ALT_FUNDEF_StopInstrumentsSGIX
typedef void (*PFNGLSTOPINSTRUMENTSSGIXPROC_ALT)(GLint);
static inline void glStopInstrumentsSGIX(GLint marker1)
{
	static PFNGLSTOPINSTRUMENTSSGIXPROC_ALT fn=(PFNGLSTOPINSTRUMENTSSGIXPROC_ALT)glaltGetProcAddressExtension("glStopInstrumentsSGIX","GL_SGIX_instruments");
	 fn(marker1);
}
#endif
CGUARDEND

#endif

#ifndef GL_SGIX_interlace
#define GL_SGIX_interlace
#ifndef GL_INTERLACE_SGIX
#define GL_INTERLACE_SGIX 0x8094
#endif //GL_INTERLACE_SGIX
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIX_ir_instrument1
#define GL_SGIX_ir_instrument1
#ifndef GL_IR_INSTRUMENT1_SGIX
#define GL_IR_INSTRUMENT1_SGIX 0x817F
#endif //GL_IR_INSTRUMENT1_SGIX
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIX_list_priority
#define GL_SGIX_list_priority
#ifndef GL_LIST_PRIORITY_SGIX
#define GL_LIST_PRIORITY_SGIX 0x8182
#endif //GL_LIST_PRIORITY_SGIX
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GetListParameterfvSGIX
#define GL_ALT_FUNDEF_GetListParameterfvSGIX
typedef void (*PFNGLGETLISTPARAMETERFVSGIXPROC_ALT)(GLuint,GLenum,GLfloat *);
static inline void glGetListParameterfvSGIX(GLuint list1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETLISTPARAMETERFVSGIXPROC_ALT fn=(PFNGLGETLISTPARAMETERFVSGIXPROC_ALT)glaltGetProcAddressExtension("glGetListParameterfvSGIX","GL_SGIX_list_priority");
	 fn(list1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetListParameterivSGIX
#define GL_ALT_FUNDEF_GetListParameterivSGIX
typedef void (*PFNGLGETLISTPARAMETERIVSGIXPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetListParameterivSGIX(GLuint list1,GLenum pname1,GLint * params1)
{
	static PFNGLGETLISTPARAMETERIVSGIXPROC_ALT fn=(PFNGLGETLISTPARAMETERIVSGIXPROC_ALT)glaltGetProcAddressExtension("glGetListParameterivSGIX","GL_SGIX_list_priority");
	 fn(list1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ListParameterfSGIX
#define GL_ALT_FUNDEF_ListParameterfSGIX
typedef void (*PFNGLLISTPARAMETERFSGIXPROC_ALT)(GLuint,GLenum,GLfloat);
static inline void glListParameterfSGIX(GLuint list1,GLenum pname1,GLfloat param1)
{
	static PFNGLLISTPARAMETERFSGIXPROC_ALT fn=(PFNGLLISTPARAMETERFSGIXPROC_ALT)glaltGetProcAddressExtension("glListParameterfSGIX","GL_SGIX_list_priority");
	 fn(list1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ListParameterfvSGIX
#define GL_ALT_FUNDEF_ListParameterfvSGIX
typedef void (*PFNGLLISTPARAMETERFVSGIXPROC_ALT)(GLuint,GLenum,const GLfloat *);
static inline void glListParameterfvSGIX(GLuint list1,GLenum pname1,const GLfloat * params1)
{
	static PFNGLLISTPARAMETERFVSGIXPROC_ALT fn=(PFNGLLISTPARAMETERFVSGIXPROC_ALT)glaltGetProcAddressExtension("glListParameterfvSGIX","GL_SGIX_list_priority");
	 fn(list1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ListParameteriSGIX
#define GL_ALT_FUNDEF_ListParameteriSGIX
typedef void (*PFNGLLISTPARAMETERISGIXPROC_ALT)(GLuint,GLenum,GLint);
static inline void glListParameteriSGIX(GLuint list1,GLenum pname1,GLint param1)
{
	static PFNGLLISTPARAMETERISGIXPROC_ALT fn=(PFNGLLISTPARAMETERISGIXPROC_ALT)glaltGetProcAddressExtension("glListParameteriSGIX","GL_SGIX_list_priority");
	 fn(list1,pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ListParameterivSGIX
#define GL_ALT_FUNDEF_ListParameterivSGIX
typedef void (*PFNGLLISTPARAMETERIVSGIXPROC_ALT)(GLuint,GLenum,const GLint *);
static inline void glListParameterivSGIX(GLuint list1,GLenum pname1,const GLint * params1)
{
	static PFNGLLISTPARAMETERIVSGIXPROC_ALT fn=(PFNGLLISTPARAMETERIVSGIXPROC_ALT)glaltGetProcAddressExtension("glListParameterivSGIX","GL_SGIX_list_priority");
	 fn(list1,pname1,params1);
}
#endif
CGUARDEND

#endif

#ifndef GL_SGIX_pixel_texture
#define GL_SGIX_pixel_texture
#ifndef GL_PIXEL_TEX_GEN_SGIX
#define GL_PIXEL_TEX_GEN_SGIX 0x8139
#endif //GL_PIXEL_TEX_GEN_SGIX
#ifndef GL_PIXEL_TEX_GEN_MODE_SGIX
#define GL_PIXEL_TEX_GEN_MODE_SGIX 0x832B
#endif //GL_PIXEL_TEX_GEN_MODE_SGIX
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_PixelTexGenSGIX
#define GL_ALT_FUNDEF_PixelTexGenSGIX
typedef void (*PFNGLPIXELTEXGENSGIXPROC_ALT)(GLenum);
static inline void glPixelTexGenSGIX(GLenum mode1)
{
	static PFNGLPIXELTEXGENSGIXPROC_ALT fn=(PFNGLPIXELTEXGENSGIXPROC_ALT)glaltGetProcAddressExtension("glPixelTexGenSGIX","GL_SGIX_pixel_texture");
	 fn(mode1);
}
#endif
CGUARDEND

#endif

#ifndef GL_SGIX_pixel_tiles
#define GL_SGIX_pixel_tiles
#ifndef GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX
#define GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX 0x813E
#endif //GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX
#ifndef GL_PIXEL_TILE_CACHE_INCREMENT_SGIX
#define GL_PIXEL_TILE_CACHE_INCREMENT_SGIX 0x813F
#endif //GL_PIXEL_TILE_CACHE_INCREMENT_SGIX
#ifndef GL_PIXEL_TILE_WIDTH_SGIX
#define GL_PIXEL_TILE_WIDTH_SGIX 0x8140
#endif //GL_PIXEL_TILE_WIDTH_SGIX
#ifndef GL_PIXEL_TILE_HEIGHT_SGIX
#define GL_PIXEL_TILE_HEIGHT_SGIX 0x8141
#endif //GL_PIXEL_TILE_HEIGHT_SGIX
#ifndef GL_PIXEL_TILE_GRID_WIDTH_SGIX
#define GL_PIXEL_TILE_GRID_WIDTH_SGIX 0x8142
#endif //GL_PIXEL_TILE_GRID_WIDTH_SGIX
#ifndef GL_PIXEL_TILE_GRID_HEIGHT_SGIX
#define GL_PIXEL_TILE_GRID_HEIGHT_SGIX 0x8143
#endif //GL_PIXEL_TILE_GRID_HEIGHT_SGIX
#ifndef GL_PIXEL_TILE_GRID_DEPTH_SGIX
#define GL_PIXEL_TILE_GRID_DEPTH_SGIX 0x8144
#endif //GL_PIXEL_TILE_GRID_DEPTH_SGIX
#ifndef GL_PIXEL_TILE_CACHE_SIZE_SGIX
#define GL_PIXEL_TILE_CACHE_SIZE_SGIX 0x8145
#endif //GL_PIXEL_TILE_CACHE_SIZE_SGIX
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIX_polynomial_ffd
#define GL_SGIX_polynomial_ffd
#ifndef GL_TEXTURE_DEFORMATION_BIT_SGIX
#define GL_TEXTURE_DEFORMATION_BIT_SGIX 0x00000001
#endif //GL_TEXTURE_DEFORMATION_BIT_SGIX
#ifndef GL_GEOMETRY_DEFORMATION_BIT_SGIX
#define GL_GEOMETRY_DEFORMATION_BIT_SGIX 0x00000002
#endif //GL_GEOMETRY_DEFORMATION_BIT_SGIX
#ifndef GL_GEOMETRY_DEFORMATION_SGIX
#define GL_GEOMETRY_DEFORMATION_SGIX 0x8194
#endif //GL_GEOMETRY_DEFORMATION_SGIX
#ifndef GL_TEXTURE_DEFORMATION_SGIX
#define GL_TEXTURE_DEFORMATION_SGIX 0x8195
#endif //GL_TEXTURE_DEFORMATION_SGIX
#ifndef GL_DEFORMATIONS_MASK_SGIX
#define GL_DEFORMATIONS_MASK_SGIX 0x8196
#endif //GL_DEFORMATIONS_MASK_SGIX
#ifndef GL_MAX_DEFORMATION_ORDER_SGIX
#define GL_MAX_DEFORMATION_ORDER_SGIX 0x8197
#endif //GL_MAX_DEFORMATION_ORDER_SGIX
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_DeformSGIX
#define GL_ALT_FUNDEF_DeformSGIX
typedef void (*PFNGLDEFORMSGIXPROC_ALT)(GLbitfield);
static inline void glDeformSGIX(GLbitfield mask1)
{
	static PFNGLDEFORMSGIXPROC_ALT fn=(PFNGLDEFORMSGIXPROC_ALT)glaltGetProcAddressExtension("glDeformSGIX","GL_SGIX_polynomial_ffd");
	 fn(mask1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DeformationMap3dSGIX
#define GL_ALT_FUNDEF_DeformationMap3dSGIX
typedef void (*PFNGLDEFORMATIONMAP3DSGIXPROC_ALT)(GLenum,GLdouble,GLdouble,GLint,GLint,GLdouble,GLdouble,GLint,GLint,GLdouble,GLdouble,GLint,GLint,const GLdouble *);
static inline void glDeformationMap3dSGIX(GLenum target1,GLdouble u11,GLdouble u21,GLint ustride1,GLint uorder1,GLdouble v11,GLdouble v21,GLint vstride1,GLint vorder1,GLdouble w11,GLdouble w21,GLint wstride1,GLint worder1,const GLdouble * points1)
{
	static PFNGLDEFORMATIONMAP3DSGIXPROC_ALT fn=(PFNGLDEFORMATIONMAP3DSGIXPROC_ALT)glaltGetProcAddressExtension("glDeformationMap3dSGIX","GL_SGIX_polynomial_ffd");
	 fn(target1,u11,u21,ustride1,uorder1,v11,v21,vstride1,vorder1,w11,w21,wstride1,worder1,points1);
}
#endif

#ifndef	GL_ALT_FUNDEF_DeformationMap3fSGIX
#define GL_ALT_FUNDEF_DeformationMap3fSGIX
typedef void (*PFNGLDEFORMATIONMAP3FSGIXPROC_ALT)(GLenum,GLfloat,GLfloat,GLint,GLint,GLfloat,GLfloat,GLint,GLint,GLfloat,GLfloat,GLint,GLint,const GLfloat *);
static inline void glDeformationMap3fSGIX(GLenum target1,GLfloat u11,GLfloat u21,GLint ustride1,GLint uorder1,GLfloat v11,GLfloat v21,GLint vstride1,GLint vorder1,GLfloat w11,GLfloat w21,GLint wstride1,GLint worder1,const GLfloat * points1)
{
	static PFNGLDEFORMATIONMAP3FSGIXPROC_ALT fn=(PFNGLDEFORMATIONMAP3FSGIXPROC_ALT)glaltGetProcAddressExtension("glDeformationMap3fSGIX","GL_SGIX_polynomial_ffd");
	 fn(target1,u11,u21,ustride1,uorder1,v11,v21,vstride1,vorder1,w11,w21,wstride1,worder1,points1);
}
#endif

#ifndef	GL_ALT_FUNDEF_LoadIdentityDeformationMapSGIX
#define GL_ALT_FUNDEF_LoadIdentityDeformationMapSGIX
typedef void (*PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC_ALT)(GLbitfield);
static inline void glLoadIdentityDeformationMapSGIX(GLbitfield mask1)
{
	static PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC_ALT fn=(PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC_ALT)glaltGetProcAddressExtension("glLoadIdentityDeformationMapSGIX","GL_SGIX_polynomial_ffd");
	 fn(mask1);
}
#endif
CGUARDEND

#endif

#ifndef GL_SGIX_reference_plane
#define GL_SGIX_reference_plane
#ifndef GL_REFERENCE_PLANE_SGIX
#define GL_REFERENCE_PLANE_SGIX 0x817D
#endif //GL_REFERENCE_PLANE_SGIX
#ifndef GL_REFERENCE_PLANE_EQUATION_SGIX
#define GL_REFERENCE_PLANE_EQUATION_SGIX 0x817E
#endif //GL_REFERENCE_PLANE_EQUATION_SGIX
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ReferencePlaneSGIX
#define GL_ALT_FUNDEF_ReferencePlaneSGIX
typedef void (*PFNGLREFERENCEPLANESGIXPROC_ALT)(const GLdouble *);
static inline void glReferencePlaneSGIX(const GLdouble * equation1)
{
	static PFNGLREFERENCEPLANESGIXPROC_ALT fn=(PFNGLREFERENCEPLANESGIXPROC_ALT)glaltGetProcAddressExtension("glReferencePlaneSGIX","GL_SGIX_reference_plane");
	 fn(equation1);
}
#endif
CGUARDEND

#endif

#ifndef GL_SGIX_resample
#define GL_SGIX_resample
#ifndef GL_PACK_RESAMPLE_SGIX
#define GL_PACK_RESAMPLE_SGIX 0x842C
#endif //GL_PACK_RESAMPLE_SGIX
#ifndef GL_UNPACK_RESAMPLE_SGIX
#define GL_UNPACK_RESAMPLE_SGIX 0x842D
#endif //GL_UNPACK_RESAMPLE_SGIX
#ifndef GL_RESAMPLE_REPLICATE_SGIX
#define GL_RESAMPLE_REPLICATE_SGIX 0x842E
#endif //GL_RESAMPLE_REPLICATE_SGIX
#ifndef GL_RESAMPLE_ZERO_FILL_SGIX
#define GL_RESAMPLE_ZERO_FILL_SGIX 0x842F
#endif //GL_RESAMPLE_ZERO_FILL_SGIX
#ifndef GL_RESAMPLE_DECIMATE_SGIX
#define GL_RESAMPLE_DECIMATE_SGIX 0x8430
#endif //GL_RESAMPLE_DECIMATE_SGIX
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIX_scalebias_hint
#define GL_SGIX_scalebias_hint
#ifndef GL_SCALEBIAS_HINT_SGIX
#define GL_SCALEBIAS_HINT_SGIX 0x8322
#endif //GL_SCALEBIAS_HINT_SGIX
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIX_shadow
#define GL_SGIX_shadow
#ifndef GL_TEXTURE_COMPARE_SGIX
#define GL_TEXTURE_COMPARE_SGIX 0x819A
#endif //GL_TEXTURE_COMPARE_SGIX
#ifndef GL_TEXTURE_COMPARE_OPERATOR_SGIX
#define GL_TEXTURE_COMPARE_OPERATOR_SGIX 0x819B
#endif //GL_TEXTURE_COMPARE_OPERATOR_SGIX
#ifndef GL_TEXTURE_LEQUAL_R_SGIX
#define GL_TEXTURE_LEQUAL_R_SGIX 0x819C
#endif //GL_TEXTURE_LEQUAL_R_SGIX
#ifndef GL_TEXTURE_GEQUAL_R_SGIX
#define GL_TEXTURE_GEQUAL_R_SGIX 0x819D
#endif //GL_TEXTURE_GEQUAL_R_SGIX
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIX_shadow_ambient
#define GL_SGIX_shadow_ambient
#ifndef GL_SHADOW_AMBIENT_SGIX
#define GL_SHADOW_AMBIENT_SGIX 0x80BF
#endif //GL_SHADOW_AMBIENT_SGIX
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIX_sprite
#define GL_SGIX_sprite
#ifndef GL_SPRITE_SGIX
#define GL_SPRITE_SGIX 0x8148
#endif //GL_SPRITE_SGIX
#ifndef GL_SPRITE_MODE_SGIX
#define GL_SPRITE_MODE_SGIX 0x8149
#endif //GL_SPRITE_MODE_SGIX
#ifndef GL_SPRITE_AXIS_SGIX
#define GL_SPRITE_AXIS_SGIX 0x814A
#endif //GL_SPRITE_AXIS_SGIX
#ifndef GL_SPRITE_TRANSLATION_SGIX
#define GL_SPRITE_TRANSLATION_SGIX 0x814B
#endif //GL_SPRITE_TRANSLATION_SGIX
#ifndef GL_SPRITE_AXIAL_SGIX
#define GL_SPRITE_AXIAL_SGIX 0x814C
#endif //GL_SPRITE_AXIAL_SGIX
#ifndef GL_SPRITE_OBJECT_ALIGNED_SGIX
#define GL_SPRITE_OBJECT_ALIGNED_SGIX 0x814D
#endif //GL_SPRITE_OBJECT_ALIGNED_SGIX
#ifndef GL_SPRITE_EYE_ALIGNED_SGIX
#define GL_SPRITE_EYE_ALIGNED_SGIX 0x814E
#endif //GL_SPRITE_EYE_ALIGNED_SGIX
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_SpriteParameterfSGIX
#define GL_ALT_FUNDEF_SpriteParameterfSGIX
typedef void (*PFNGLSPRITEPARAMETERFSGIXPROC_ALT)(GLenum,GLfloat);
static inline void glSpriteParameterfSGIX(GLenum pname1,GLfloat param1)
{
	static PFNGLSPRITEPARAMETERFSGIXPROC_ALT fn=(PFNGLSPRITEPARAMETERFSGIXPROC_ALT)glaltGetProcAddressExtension("glSpriteParameterfSGIX","GL_SGIX_sprite");
	 fn(pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_SpriteParameterfvSGIX
#define GL_ALT_FUNDEF_SpriteParameterfvSGIX
typedef void (*PFNGLSPRITEPARAMETERFVSGIXPROC_ALT)(GLenum,const GLfloat *);
static inline void glSpriteParameterfvSGIX(GLenum pname1,const GLfloat * params1)
{
	static PFNGLSPRITEPARAMETERFVSGIXPROC_ALT fn=(PFNGLSPRITEPARAMETERFVSGIXPROC_ALT)glaltGetProcAddressExtension("glSpriteParameterfvSGIX","GL_SGIX_sprite");
	 fn(pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_SpriteParameteriSGIX
#define GL_ALT_FUNDEF_SpriteParameteriSGIX
typedef void (*PFNGLSPRITEPARAMETERISGIXPROC_ALT)(GLenum,GLint);
static inline void glSpriteParameteriSGIX(GLenum pname1,GLint param1)
{
	static PFNGLSPRITEPARAMETERISGIXPROC_ALT fn=(PFNGLSPRITEPARAMETERISGIXPROC_ALT)glaltGetProcAddressExtension("glSpriteParameteriSGIX","GL_SGIX_sprite");
	 fn(pname1,param1);
}
#endif

#ifndef	GL_ALT_FUNDEF_SpriteParameterivSGIX
#define GL_ALT_FUNDEF_SpriteParameterivSGIX
typedef void (*PFNGLSPRITEPARAMETERIVSGIXPROC_ALT)(GLenum,const GLint *);
static inline void glSpriteParameterivSGIX(GLenum pname1,const GLint * params1)
{
	static PFNGLSPRITEPARAMETERIVSGIXPROC_ALT fn=(PFNGLSPRITEPARAMETERIVSGIXPROC_ALT)glaltGetProcAddressExtension("glSpriteParameterivSGIX","GL_SGIX_sprite");
	 fn(pname1,params1);
}
#endif
CGUARDEND

#endif

#ifndef GL_SGIX_subsample
#define GL_SGIX_subsample
#ifndef GL_PACK_SUBSAMPLE_RATE_SGIX
#define GL_PACK_SUBSAMPLE_RATE_SGIX 0x85A0
#endif //GL_PACK_SUBSAMPLE_RATE_SGIX
#ifndef GL_UNPACK_SUBSAMPLE_RATE_SGIX
#define GL_UNPACK_SUBSAMPLE_RATE_SGIX 0x85A1
#endif //GL_UNPACK_SUBSAMPLE_RATE_SGIX
#ifndef GL_PIXEL_SUBSAMPLE_4444_SGIX
#define GL_PIXEL_SUBSAMPLE_4444_SGIX 0x85A2
#endif //GL_PIXEL_SUBSAMPLE_4444_SGIX
#ifndef GL_PIXEL_SUBSAMPLE_2424_SGIX
#define GL_PIXEL_SUBSAMPLE_2424_SGIX 0x85A3
#endif //GL_PIXEL_SUBSAMPLE_2424_SGIX
#ifndef GL_PIXEL_SUBSAMPLE_4242_SGIX
#define GL_PIXEL_SUBSAMPLE_4242_SGIX 0x85A4
#endif //GL_PIXEL_SUBSAMPLE_4242_SGIX
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIX_tag_sample_buffer
#define GL_SGIX_tag_sample_buffer
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_TagSampleBufferSGIX
#define GL_ALT_FUNDEF_TagSampleBufferSGIX
typedef void (*PFNGLTAGSAMPLEBUFFERSGIXPROC_ALT)();
static inline void glTagSampleBufferSGIX()
{
	static PFNGLTAGSAMPLEBUFFERSGIXPROC_ALT fn=(PFNGLTAGSAMPLEBUFFERSGIXPROC_ALT)glaltGetProcAddressExtension("glTagSampleBufferSGIX","GL_SGIX_tag_sample_buffer");
	 fn();
}
#endif
CGUARDEND

#endif

#ifndef GL_SGIX_texture_add_env
#define GL_SGIX_texture_add_env
#ifndef GL_TEXTURE_ENV_BIAS_SGIX
#define GL_TEXTURE_ENV_BIAS_SGIX 0x80BE
#endif //GL_TEXTURE_ENV_BIAS_SGIX
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIX_texture_coordinate_clamp
#define GL_SGIX_texture_coordinate_clamp
#ifndef GL_TEXTURE_MAX_CLAMP_S_SGIX
#define GL_TEXTURE_MAX_CLAMP_S_SGIX 0x8369
#endif //GL_TEXTURE_MAX_CLAMP_S_SGIX
#ifndef GL_TEXTURE_MAX_CLAMP_T_SGIX
#define GL_TEXTURE_MAX_CLAMP_T_SGIX 0x836A
#endif //GL_TEXTURE_MAX_CLAMP_T_SGIX
#ifndef GL_TEXTURE_MAX_CLAMP_R_SGIX
#define GL_TEXTURE_MAX_CLAMP_R_SGIX 0x836B
#endif //GL_TEXTURE_MAX_CLAMP_R_SGIX
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIX_texture_lod_bias
#define GL_SGIX_texture_lod_bias
#ifndef GL_TEXTURE_LOD_BIAS_S_SGIX
#define GL_TEXTURE_LOD_BIAS_S_SGIX 0x818E
#endif //GL_TEXTURE_LOD_BIAS_S_SGIX
#ifndef GL_TEXTURE_LOD_BIAS_T_SGIX
#define GL_TEXTURE_LOD_BIAS_T_SGIX 0x818F
#endif //GL_TEXTURE_LOD_BIAS_T_SGIX
#ifndef GL_TEXTURE_LOD_BIAS_R_SGIX
#define GL_TEXTURE_LOD_BIAS_R_SGIX 0x8190
#endif //GL_TEXTURE_LOD_BIAS_R_SGIX
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIX_texture_multi_buffer
#define GL_SGIX_texture_multi_buffer
#ifndef GL_TEXTURE_MULTI_BUFFER_HINT_SGIX
#define GL_TEXTURE_MULTI_BUFFER_HINT_SGIX 0x812E
#endif //GL_TEXTURE_MULTI_BUFFER_HINT_SGIX
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIX_texture_scale_bias
#define GL_SGIX_texture_scale_bias
#ifndef GL_POST_TEXTURE_FILTER_BIAS_SGIX
#define GL_POST_TEXTURE_FILTER_BIAS_SGIX 0x8179
#endif //GL_POST_TEXTURE_FILTER_BIAS_SGIX
#ifndef GL_POST_TEXTURE_FILTER_SCALE_SGIX
#define GL_POST_TEXTURE_FILTER_SCALE_SGIX 0x817A
#endif //GL_POST_TEXTURE_FILTER_SCALE_SGIX
#ifndef GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX
#define GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX 0x817B
#endif //GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX
#ifndef GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX
#define GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX 0x817C
#endif //GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIX_vertex_preclip
#define GL_SGIX_vertex_preclip
#ifndef GL_VERTEX_PRECLIP_SGIX
#define GL_VERTEX_PRECLIP_SGIX 0x83EE
#endif //GL_VERTEX_PRECLIP_SGIX
#ifndef GL_VERTEX_PRECLIP_HINT_SGIX
#define GL_VERTEX_PRECLIP_HINT_SGIX 0x83EF
#endif //GL_VERTEX_PRECLIP_HINT_SGIX
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIX_ycrcb
#define GL_SGIX_ycrcb
#ifndef GL_YCRCB_422_SGIX
#define GL_YCRCB_422_SGIX 0x81BB
#endif //GL_YCRCB_422_SGIX
#ifndef GL_YCRCB_444_SGIX
#define GL_YCRCB_444_SGIX 0x81BC
#endif //GL_YCRCB_444_SGIX
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIX_ycrcb_subsample
#define GL_SGIX_ycrcb_subsample
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGIX_ycrcba
#define GL_SGIX_ycrcba
#ifndef GL_YCRCB_SGIX
#define GL_YCRCB_SGIX 0x8318
#endif //GL_YCRCB_SGIX
#ifndef GL_YCRCBA_SGIX
#define GL_YCRCBA_SGIX 0x8319
#endif //GL_YCRCBA_SGIX
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGI_color_matrix
#define GL_SGI_color_matrix
#ifndef GL_COLOR_MATRIX_SGI
#define GL_COLOR_MATRIX_SGI 0x80B1
#endif //GL_COLOR_MATRIX_SGI
#ifndef GL_COLOR_MATRIX_STACK_DEPTH_SGI
#define GL_COLOR_MATRIX_STACK_DEPTH_SGI 0x80B2
#endif //GL_COLOR_MATRIX_STACK_DEPTH_SGI
#ifndef GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI
#define GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI 0x80B3
#endif //GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI
#ifndef GL_POST_COLOR_MATRIX_RED_SCALE_SGI
#define GL_POST_COLOR_MATRIX_RED_SCALE_SGI 0x80B4
#endif //GL_POST_COLOR_MATRIX_RED_SCALE_SGI
#ifndef GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI
#define GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI 0x80B5
#endif //GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI
#ifndef GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI
#define GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI 0x80B6
#endif //GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI
#ifndef GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI
#define GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI 0x80B7
#endif //GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI
#ifndef GL_POST_COLOR_MATRIX_RED_BIAS_SGI
#define GL_POST_COLOR_MATRIX_RED_BIAS_SGI 0x80B8
#endif //GL_POST_COLOR_MATRIX_RED_BIAS_SGI
#ifndef GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI
#define GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI 0x80B9
#endif //GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI
#ifndef GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI
#define GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI 0x80BA
#endif //GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI
#ifndef GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI
#define GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI 0x80BB
#endif //GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SGI_color_table
#define GL_SGI_color_table
#ifndef GL_COLOR_TABLE_SGI
#define GL_COLOR_TABLE_SGI 0x80D0
#endif //GL_COLOR_TABLE_SGI
#ifndef GL_POST_CONVOLUTION_COLOR_TABLE_SGI
#define GL_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D1
#endif //GL_POST_CONVOLUTION_COLOR_TABLE_SGI
#ifndef GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI
#define GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D2
#endif //GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI
#ifndef GL_PROXY_COLOR_TABLE_SGI
#define GL_PROXY_COLOR_TABLE_SGI 0x80D3
#endif //GL_PROXY_COLOR_TABLE_SGI
#ifndef GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI
#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D4
#endif //GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI
#ifndef GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI
#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D5
#endif //GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI
#ifndef GL_COLOR_TABLE_SCALE_SGI
#define GL_COLOR_TABLE_SCALE_SGI 0x80D6
#endif //GL_COLOR_TABLE_SCALE_SGI
#ifndef GL_COLOR_TABLE_BIAS_SGI
#define GL_COLOR_TABLE_BIAS_SGI 0x80D7
#endif //GL_COLOR_TABLE_BIAS_SGI
#ifndef GL_COLOR_TABLE_FORMAT_SGI
#define GL_COLOR_TABLE_FORMAT_SGI 0x80D8
#endif //GL_COLOR_TABLE_FORMAT_SGI
#ifndef GL_COLOR_TABLE_WIDTH_SGI
#define GL_COLOR_TABLE_WIDTH_SGI 0x80D9
#endif //GL_COLOR_TABLE_WIDTH_SGI
#ifndef GL_COLOR_TABLE_RED_SIZE_SGI
#define GL_COLOR_TABLE_RED_SIZE_SGI 0x80DA
#endif //GL_COLOR_TABLE_RED_SIZE_SGI
#ifndef GL_COLOR_TABLE_GREEN_SIZE_SGI
#define GL_COLOR_TABLE_GREEN_SIZE_SGI 0x80DB
#endif //GL_COLOR_TABLE_GREEN_SIZE_SGI
#ifndef GL_COLOR_TABLE_BLUE_SIZE_SGI
#define GL_COLOR_TABLE_BLUE_SIZE_SGI 0x80DC
#endif //GL_COLOR_TABLE_BLUE_SIZE_SGI
#ifndef GL_COLOR_TABLE_ALPHA_SIZE_SGI
#define GL_COLOR_TABLE_ALPHA_SIZE_SGI 0x80DD
#endif //GL_COLOR_TABLE_ALPHA_SIZE_SGI
#ifndef GL_COLOR_TABLE_LUMINANCE_SIZE_SGI
#define GL_COLOR_TABLE_LUMINANCE_SIZE_SGI 0x80DE
#endif //GL_COLOR_TABLE_LUMINANCE_SIZE_SGI
#ifndef GL_COLOR_TABLE_INTENSITY_SIZE_SGI
#define GL_COLOR_TABLE_INTENSITY_SIZE_SGI 0x80DF
#endif //GL_COLOR_TABLE_INTENSITY_SIZE_SGI
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ColorTableParameterfvSGI
#define GL_ALT_FUNDEF_ColorTableParameterfvSGI
typedef void (*PFNGLCOLORTABLEPARAMETERFVSGIPROC_ALT)(GLenum,GLenum,const GLfloat *);
static inline void glColorTableParameterfvSGI(GLenum target1,GLenum pname1,const GLfloat * params1)
{
	static PFNGLCOLORTABLEPARAMETERFVSGIPROC_ALT fn=(PFNGLCOLORTABLEPARAMETERFVSGIPROC_ALT)glaltGetProcAddressExtension("glColorTableParameterfvSGI","GL_SGI_color_table");
	 fn(target1,pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ColorTableParameterivSGI
#define GL_ALT_FUNDEF_ColorTableParameterivSGI
typedef void (*PFNGLCOLORTABLEPARAMETERIVSGIPROC_ALT)(GLenum,GLenum,const GLint *);
static inline void glColorTableParameterivSGI(GLenum target1,GLenum pname1,const GLint * params1)
{
	static PFNGLCOLORTABLEPARAMETERIVSGIPROC_ALT fn=(PFNGLCOLORTABLEPARAMETERIVSGIPROC_ALT)glaltGetProcAddressExtension("glColorTableParameterivSGI","GL_SGI_color_table");
	 fn(target1,pname1,params1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_ColorTableSGI
#define GL_ALT_FUNDEF_ColorTableSGI
typedef void (*PFNGLCOLORTABLESGIPROC_ALT)(GLenum,GLenum,GLsizei,GLenum,GLenum,const void *);
static inline void glColorTableSGI(GLenum target1,GLenum internalformat1,GLsizei width1,GLenum format1,GLenum type1,const void * table1)
{
	static PFNGLCOLORTABLESGIPROC_ALT fn=(PFNGLCOLORTABLESGIPROC_ALT)glaltGetProcAddressExtension("glColorTableSGI","GL_SGI_color_table");
	 fn(target1,internalformat1,width1,format1,type1,table1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_CopyColorTableSGI
#define GL_ALT_FUNDEF_CopyColorTableSGI
typedef void (*PFNGLCOPYCOLORTABLESGIPROC_ALT)(GLenum,GLenum,GLint,GLint,GLsizei);
static inline void glCopyColorTableSGI(GLenum target1,GLenum internalformat1,GLint x1,GLint y1,GLsizei width1)
{
	static PFNGLCOPYCOLORTABLESGIPROC_ALT fn=(PFNGLCOPYCOLORTABLESGIPROC_ALT)glaltGetProcAddressExtension("glCopyColorTableSGI","GL_SGI_color_table");
	 fn(target1,internalformat1,x1,y1,width1);
}
#endif

//ALIAS

#ifndef	GL_ALT_FUNDEF_GetColorTableParameterfvSGI
#define GL_ALT_FUNDEF_GetColorTableParameterfvSGI
typedef void (*PFNGLGETCOLORTABLEPARAMETERFVSGIPROC_ALT)(GLenum,GLenum,GLfloat *);
static inline void glGetColorTableParameterfvSGI(GLenum target1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETCOLORTABLEPARAMETERFVSGIPROC_ALT fn=(PFNGLGETCOLORTABLEPARAMETERFVSGIPROC_ALT)glaltGetProcAddressExtension("glGetColorTableParameterfvSGI","GL_SGI_color_table");
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetColorTableParameterivSGI
#define GL_ALT_FUNDEF_GetColorTableParameterivSGI
typedef void (*PFNGLGETCOLORTABLEPARAMETERIVSGIPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetColorTableParameterivSGI(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETCOLORTABLEPARAMETERIVSGIPROC_ALT fn=(PFNGLGETCOLORTABLEPARAMETERIVSGIPROC_ALT)glaltGetProcAddressExtension("glGetColorTableParameterivSGI","GL_SGI_color_table");
	 fn(target1,pname1,params1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GetColorTableSGI
#define GL_ALT_FUNDEF_GetColorTableSGI
typedef void (*PFNGLGETCOLORTABLESGIPROC_ALT)(GLenum,GLenum,GLenum,void *);
static inline void glGetColorTableSGI(GLenum target1,GLenum format1,GLenum type1,void * table1)
{
	static PFNGLGETCOLORTABLESGIPROC_ALT fn=(PFNGLGETCOLORTABLESGIPROC_ALT)glaltGetProcAddressExtension("glGetColorTableSGI","GL_SGI_color_table");
	 fn(target1,format1,type1,table1);
}
#endif
CGUARDEND

#endif

#ifndef GL_SGI_texture_color_table
#define GL_SGI_texture_color_table
#ifndef GL_TEXTURE_COLOR_TABLE_SGI
#define GL_TEXTURE_COLOR_TABLE_SGI 0x80BC
#endif //GL_TEXTURE_COLOR_TABLE_SGI
#ifndef GL_PROXY_TEXTURE_COLOR_TABLE_SGI
#define GL_PROXY_TEXTURE_COLOR_TABLE_SGI 0x80BD
#endif //GL_PROXY_TEXTURE_COLOR_TABLE_SGI
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SUNX_constant_data
#define GL_SUNX_constant_data
#ifndef GL_UNPACK_CONSTANT_DATA_SUNX
#define GL_UNPACK_CONSTANT_DATA_SUNX 0x81D5
#endif //GL_UNPACK_CONSTANT_DATA_SUNX
#ifndef GL_TEXTURE_CONSTANT_DATA_SUNX
#define GL_TEXTURE_CONSTANT_DATA_SUNX 0x81D6
#endif //GL_TEXTURE_CONSTANT_DATA_SUNX
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_FinishTextureSUNX
#define GL_ALT_FUNDEF_FinishTextureSUNX
typedef void (*PFNGLFINISHTEXTURESUNXPROC_ALT)();
static inline void glFinishTextureSUNX()
{
	static PFNGLFINISHTEXTURESUNXPROC_ALT fn=(PFNGLFINISHTEXTURESUNXPROC_ALT)glaltGetProcAddressExtension("glFinishTextureSUNX","GL_SUNX_constant_data");
	 fn();
}
#endif
CGUARDEND

#endif

#ifndef GL_SUN_convolution_border_modes
#define GL_SUN_convolution_border_modes
#ifndef GL_WRAP_BORDER_SUN
#define GL_WRAP_BORDER_SUN 0x81D4
#endif //GL_WRAP_BORDER_SUN
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SUN_global_alpha
#define GL_SUN_global_alpha
#ifndef GL_GLOBAL_ALPHA_SUN
#define GL_GLOBAL_ALPHA_SUN 0x81D9
#endif //GL_GLOBAL_ALPHA_SUN
#ifndef GL_GLOBAL_ALPHA_FACTOR_SUN
#define GL_GLOBAL_ALPHA_FACTOR_SUN 0x81DA
#endif //GL_GLOBAL_ALPHA_FACTOR_SUN
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_GlobalAlphaFactorbSUN
#define GL_ALT_FUNDEF_GlobalAlphaFactorbSUN
typedef void (*PFNGLGLOBALALPHAFACTORBSUNPROC_ALT)(GLbyte);
static inline void glGlobalAlphaFactorbSUN(GLbyte factor1)
{
	static PFNGLGLOBALALPHAFACTORBSUNPROC_ALT fn=(PFNGLGLOBALALPHAFACTORBSUNPROC_ALT)glaltGetProcAddressExtension("glGlobalAlphaFactorbSUN","GL_SUN_global_alpha");
	 fn(factor1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GlobalAlphaFactordSUN
#define GL_ALT_FUNDEF_GlobalAlphaFactordSUN
typedef void (*PFNGLGLOBALALPHAFACTORDSUNPROC_ALT)(GLdouble);
static inline void glGlobalAlphaFactordSUN(GLdouble factor1)
{
	static PFNGLGLOBALALPHAFACTORDSUNPROC_ALT fn=(PFNGLGLOBALALPHAFACTORDSUNPROC_ALT)glaltGetProcAddressExtension("glGlobalAlphaFactordSUN","GL_SUN_global_alpha");
	 fn(factor1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GlobalAlphaFactorfSUN
#define GL_ALT_FUNDEF_GlobalAlphaFactorfSUN
typedef void (*PFNGLGLOBALALPHAFACTORFSUNPROC_ALT)(GLfloat);
static inline void glGlobalAlphaFactorfSUN(GLfloat factor1)
{
	static PFNGLGLOBALALPHAFACTORFSUNPROC_ALT fn=(PFNGLGLOBALALPHAFACTORFSUNPROC_ALT)glaltGetProcAddressExtension("glGlobalAlphaFactorfSUN","GL_SUN_global_alpha");
	 fn(factor1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GlobalAlphaFactoriSUN
#define GL_ALT_FUNDEF_GlobalAlphaFactoriSUN
typedef void (*PFNGLGLOBALALPHAFACTORISUNPROC_ALT)(GLint);
static inline void glGlobalAlphaFactoriSUN(GLint factor1)
{
	static PFNGLGLOBALALPHAFACTORISUNPROC_ALT fn=(PFNGLGLOBALALPHAFACTORISUNPROC_ALT)glaltGetProcAddressExtension("glGlobalAlphaFactoriSUN","GL_SUN_global_alpha");
	 fn(factor1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GlobalAlphaFactorsSUN
#define GL_ALT_FUNDEF_GlobalAlphaFactorsSUN
typedef void (*PFNGLGLOBALALPHAFACTORSSUNPROC_ALT)(GLshort);
static inline void glGlobalAlphaFactorsSUN(GLshort factor1)
{
	static PFNGLGLOBALALPHAFACTORSSUNPROC_ALT fn=(PFNGLGLOBALALPHAFACTORSSUNPROC_ALT)glaltGetProcAddressExtension("glGlobalAlphaFactorsSUN","GL_SUN_global_alpha");
	 fn(factor1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GlobalAlphaFactorubSUN
#define GL_ALT_FUNDEF_GlobalAlphaFactorubSUN
typedef void (*PFNGLGLOBALALPHAFACTORUBSUNPROC_ALT)(GLubyte);
static inline void glGlobalAlphaFactorubSUN(GLubyte factor1)
{
	static PFNGLGLOBALALPHAFACTORUBSUNPROC_ALT fn=(PFNGLGLOBALALPHAFACTORUBSUNPROC_ALT)glaltGetProcAddressExtension("glGlobalAlphaFactorubSUN","GL_SUN_global_alpha");
	 fn(factor1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GlobalAlphaFactoruiSUN
#define GL_ALT_FUNDEF_GlobalAlphaFactoruiSUN
typedef void (*PFNGLGLOBALALPHAFACTORUISUNPROC_ALT)(GLuint);
static inline void glGlobalAlphaFactoruiSUN(GLuint factor1)
{
	static PFNGLGLOBALALPHAFACTORUISUNPROC_ALT fn=(PFNGLGLOBALALPHAFACTORUISUNPROC_ALT)glaltGetProcAddressExtension("glGlobalAlphaFactoruiSUN","GL_SUN_global_alpha");
	 fn(factor1);
}
#endif

#ifndef	GL_ALT_FUNDEF_GlobalAlphaFactorusSUN
#define GL_ALT_FUNDEF_GlobalAlphaFactorusSUN
typedef void (*PFNGLGLOBALALPHAFACTORUSSUNPROC_ALT)(GLushort);
static inline void glGlobalAlphaFactorusSUN(GLushort factor1)
{
	static PFNGLGLOBALALPHAFACTORUSSUNPROC_ALT fn=(PFNGLGLOBALALPHAFACTORUSSUNPROC_ALT)glaltGetProcAddressExtension("glGlobalAlphaFactorusSUN","GL_SUN_global_alpha");
	 fn(factor1);
}
#endif
CGUARDEND

#endif

#ifndef GL_SUN_mesh_array
#define GL_SUN_mesh_array
#ifndef GL_QUAD_MESH_SUN
#define GL_QUAD_MESH_SUN 0x8614
#endif //GL_QUAD_MESH_SUN
#ifndef GL_TRIANGLE_MESH_SUN
#define GL_TRIANGLE_MESH_SUN 0x8615
#endif //GL_TRIANGLE_MESH_SUN
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_DrawMeshArraysSUN
#define GL_ALT_FUNDEF_DrawMeshArraysSUN
typedef void (*PFNGLDRAWMESHARRAYSSUNPROC_ALT)(GLenum,GLint,GLsizei,GLsizei);
static inline void glDrawMeshArraysSUN(GLenum mode1,GLint first1,GLsizei count1,GLsizei width1)
{
	static PFNGLDRAWMESHARRAYSSUNPROC_ALT fn=(PFNGLDRAWMESHARRAYSSUNPROC_ALT)glaltGetProcAddressExtension("glDrawMeshArraysSUN","GL_SUN_mesh_array");
	 fn(mode1,first1,count1,width1);
}
#endif
CGUARDEND

#endif

#ifndef GL_SUN_slice_accum
#define GL_SUN_slice_accum
#ifndef GL_SLICE_ACCUM_SUN
#define GL_SLICE_ACCUM_SUN 0x85CC
#endif //GL_SLICE_ACCUM_SUN
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_SUN_triangle_list
#define GL_SUN_triangle_list
#ifndef GL_RESTART_SUN
#define GL_RESTART_SUN 0x0001
#endif //GL_RESTART_SUN
#ifndef GL_REPLACE_MIDDLE_SUN
#define GL_REPLACE_MIDDLE_SUN 0x0002
#endif //GL_REPLACE_MIDDLE_SUN
#ifndef GL_REPLACE_OLDEST_SUN
#define GL_REPLACE_OLDEST_SUN 0x0003
#endif //GL_REPLACE_OLDEST_SUN
#ifndef GL_TRIANGLE_LIST_SUN
#define GL_TRIANGLE_LIST_SUN 0x81D7
#endif //GL_TRIANGLE_LIST_SUN
#ifndef GL_REPLACEMENT_CODE_SUN
#define GL_REPLACEMENT_CODE_SUN 0x81D8
#endif //GL_REPLACEMENT_CODE_SUN
#ifndef GL_REPLACEMENT_CODE_ARRAY_SUN
#define GL_REPLACEMENT_CODE_ARRAY_SUN 0x85C0
#endif //GL_REPLACEMENT_CODE_ARRAY_SUN
#ifndef GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN
#define GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN 0x85C1
#endif //GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN
#ifndef GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN
#define GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN 0x85C2
#endif //GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN
#ifndef GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN
#define GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN 0x85C3
#endif //GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN
#ifndef GL_R1UI_V3F_SUN
#define GL_R1UI_V3F_SUN 0x85C4
#endif //GL_R1UI_V3F_SUN
#ifndef GL_R1UI_C4UB_V3F_SUN
#define GL_R1UI_C4UB_V3F_SUN 0x85C5
#endif //GL_R1UI_C4UB_V3F_SUN
#ifndef GL_R1UI_C3F_V3F_SUN
#define GL_R1UI_C3F_V3F_SUN 0x85C6
#endif //GL_R1UI_C3F_V3F_SUN
#ifndef GL_R1UI_N3F_V3F_SUN
#define GL_R1UI_N3F_V3F_SUN 0x85C7
#endif //GL_R1UI_N3F_V3F_SUN
#ifndef GL_R1UI_C4F_N3F_V3F_SUN
#define GL_R1UI_C4F_N3F_V3F_SUN 0x85C8
#endif //GL_R1UI_C4F_N3F_V3F_SUN
#ifndef GL_R1UI_T2F_V3F_SUN
#define GL_R1UI_T2F_V3F_SUN 0x85C9
#endif //GL_R1UI_T2F_V3F_SUN
#ifndef GL_R1UI_T2F_N3F_V3F_SUN
#define GL_R1UI_T2F_N3F_V3F_SUN 0x85CA
#endif //GL_R1UI_T2F_N3F_V3F_SUN
#ifndef GL_R1UI_T2F_C4F_N3F_V3F_SUN
#define GL_R1UI_T2F_C4F_N3F_V3F_SUN 0x85CB
#endif //GL_R1UI_T2F_C4F_N3F_V3F_SUN
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_ReplacementCodePointerSUN
#define GL_ALT_FUNDEF_ReplacementCodePointerSUN
typedef void (*PFNGLREPLACEMENTCODEPOINTERSUNPROC_ALT)(GLenum,GLsizei,const void **);
static inline void glReplacementCodePointerSUN(GLenum type1,GLsizei stride1,const void ** pointer1)
{
	static PFNGLREPLACEMENTCODEPOINTERSUNPROC_ALT fn=(PFNGLREPLACEMENTCODEPOINTERSUNPROC_ALT)glaltGetProcAddressExtension("glReplacementCodePointerSUN","GL_SUN_triangle_list");
	 fn(type1,stride1,pointer1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ReplacementCodeubSUN
#define GL_ALT_FUNDEF_ReplacementCodeubSUN
typedef void (*PFNGLREPLACEMENTCODEUBSUNPROC_ALT)(GLubyte);
static inline void glReplacementCodeubSUN(GLubyte code1)
{
	static PFNGLREPLACEMENTCODEUBSUNPROC_ALT fn=(PFNGLREPLACEMENTCODEUBSUNPROC_ALT)glaltGetProcAddressExtension("glReplacementCodeubSUN","GL_SUN_triangle_list");
	 fn(code1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ReplacementCodeubvSUN
#define GL_ALT_FUNDEF_ReplacementCodeubvSUN
typedef void (*PFNGLREPLACEMENTCODEUBVSUNPROC_ALT)(const GLubyte *);
static inline void glReplacementCodeubvSUN(const GLubyte * code1)
{
	static PFNGLREPLACEMENTCODEUBVSUNPROC_ALT fn=(PFNGLREPLACEMENTCODEUBVSUNPROC_ALT)glaltGetProcAddressExtension("glReplacementCodeubvSUN","GL_SUN_triangle_list");
	 fn(code1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ReplacementCodeuiSUN
#define GL_ALT_FUNDEF_ReplacementCodeuiSUN
typedef void (*PFNGLREPLACEMENTCODEUISUNPROC_ALT)(GLuint);
static inline void glReplacementCodeuiSUN(GLuint code1)
{
	static PFNGLREPLACEMENTCODEUISUNPROC_ALT fn=(PFNGLREPLACEMENTCODEUISUNPROC_ALT)glaltGetProcAddressExtension("glReplacementCodeuiSUN","GL_SUN_triangle_list");
	 fn(code1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ReplacementCodeuivSUN
#define GL_ALT_FUNDEF_ReplacementCodeuivSUN
typedef void (*PFNGLREPLACEMENTCODEUIVSUNPROC_ALT)(const GLuint *);
static inline void glReplacementCodeuivSUN(const GLuint * code1)
{
	static PFNGLREPLACEMENTCODEUIVSUNPROC_ALT fn=(PFNGLREPLACEMENTCODEUIVSUNPROC_ALT)glaltGetProcAddressExtension("glReplacementCodeuivSUN","GL_SUN_triangle_list");
	 fn(code1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ReplacementCodeusSUN
#define GL_ALT_FUNDEF_ReplacementCodeusSUN
typedef void (*PFNGLREPLACEMENTCODEUSSUNPROC_ALT)(GLushort);
static inline void glReplacementCodeusSUN(GLushort code1)
{
	static PFNGLREPLACEMENTCODEUSSUNPROC_ALT fn=(PFNGLREPLACEMENTCODEUSSUNPROC_ALT)glaltGetProcAddressExtension("glReplacementCodeusSUN","GL_SUN_triangle_list");
	 fn(code1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ReplacementCodeusvSUN
#define GL_ALT_FUNDEF_ReplacementCodeusvSUN
typedef void (*PFNGLREPLACEMENTCODEUSVSUNPROC_ALT)(const GLushort *);
static inline void glReplacementCodeusvSUN(const GLushort * code1)
{
	static PFNGLREPLACEMENTCODEUSVSUNPROC_ALT fn=(PFNGLREPLACEMENTCODEUSVSUNPROC_ALT)glaltGetProcAddressExtension("glReplacementCodeusvSUN","GL_SUN_triangle_list");
	 fn(code1);
}
#endif
CGUARDEND

#endif

#ifndef GL_SUN_vertex
#define GL_SUN_vertex
CGUARDBEGIN


#ifndef	GL_ALT_FUNDEF_Color3fVertex3fSUN
#define GL_ALT_FUNDEF_Color3fVertex3fSUN
typedef void (*PFNGLCOLOR3FVERTEX3FSUNPROC_ALT)(GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glColor3fVertex3fSUN(GLfloat r1,GLfloat g1,GLfloat b1,GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLCOLOR3FVERTEX3FSUNPROC_ALT fn=(PFNGLCOLOR3FVERTEX3FSUNPROC_ALT)glaltGetProcAddressExtension("glColor3fVertex3fSUN","GL_SUN_vertex");
	 fn(r1,g1,b1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Color3fVertex3fvSUN
#define GL_ALT_FUNDEF_Color3fVertex3fvSUN
typedef void (*PFNGLCOLOR3FVERTEX3FVSUNPROC_ALT)(const GLfloat *,const GLfloat *);
static inline void glColor3fVertex3fvSUN(const GLfloat * c1,const GLfloat * v1)
{
	static PFNGLCOLOR3FVERTEX3FVSUNPROC_ALT fn=(PFNGLCOLOR3FVERTEX3FVSUNPROC_ALT)glaltGetProcAddressExtension("glColor3fVertex3fvSUN","GL_SUN_vertex");
	 fn(c1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Color4fNormal3fVertex3fSUN
#define GL_ALT_FUNDEF_Color4fNormal3fVertex3fSUN
typedef void (*PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC_ALT)(GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glColor4fNormal3fVertex3fSUN(GLfloat r1,GLfloat g1,GLfloat b1,GLfloat a1,GLfloat nx1,GLfloat ny1,GLfloat nz1,GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC_ALT fn=(PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC_ALT)glaltGetProcAddressExtension("glColor4fNormal3fVertex3fSUN","GL_SUN_vertex");
	 fn(r1,g1,b1,a1,nx1,ny1,nz1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Color4fNormal3fVertex3fvSUN
#define GL_ALT_FUNDEF_Color4fNormal3fVertex3fvSUN
typedef void (*PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC_ALT)(const GLfloat *,const GLfloat *,const GLfloat *);
static inline void glColor4fNormal3fVertex3fvSUN(const GLfloat * c1,const GLfloat * n1,const GLfloat * v1)
{
	static PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC_ALT fn=(PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC_ALT)glaltGetProcAddressExtension("glColor4fNormal3fVertex3fvSUN","GL_SUN_vertex");
	 fn(c1,n1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Color4ubVertex2fSUN
#define GL_ALT_FUNDEF_Color4ubVertex2fSUN
typedef void (*PFNGLCOLOR4UBVERTEX2FSUNPROC_ALT)(GLubyte,GLubyte,GLubyte,GLubyte,GLfloat,GLfloat);
static inline void glColor4ubVertex2fSUN(GLubyte r1,GLubyte g1,GLubyte b1,GLubyte a1,GLfloat x1,GLfloat y1)
{
	static PFNGLCOLOR4UBVERTEX2FSUNPROC_ALT fn=(PFNGLCOLOR4UBVERTEX2FSUNPROC_ALT)glaltGetProcAddressExtension("glColor4ubVertex2fSUN","GL_SUN_vertex");
	 fn(r1,g1,b1,a1,x1,y1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Color4ubVertex2fvSUN
#define GL_ALT_FUNDEF_Color4ubVertex2fvSUN
typedef void (*PFNGLCOLOR4UBVERTEX2FVSUNPROC_ALT)(const GLubyte *,const GLfloat *);
static inline void glColor4ubVertex2fvSUN(const GLubyte * c1,const GLfloat * v1)
{
	static PFNGLCOLOR4UBVERTEX2FVSUNPROC_ALT fn=(PFNGLCOLOR4UBVERTEX2FVSUNPROC_ALT)glaltGetProcAddressExtension("glColor4ubVertex2fvSUN","GL_SUN_vertex");
	 fn(c1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Color4ubVertex3fSUN
#define GL_ALT_FUNDEF_Color4ubVertex3fSUN
typedef void (*PFNGLCOLOR4UBVERTEX3FSUNPROC_ALT)(GLubyte,GLubyte,GLubyte,GLubyte,GLfloat,GLfloat,GLfloat);
static inline void glColor4ubVertex3fSUN(GLubyte r1,GLubyte g1,GLubyte b1,GLubyte a1,GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLCOLOR4UBVERTEX3FSUNPROC_ALT fn=(PFNGLCOLOR4UBVERTEX3FSUNPROC_ALT)glaltGetProcAddressExtension("glColor4ubVertex3fSUN","GL_SUN_vertex");
	 fn(r1,g1,b1,a1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Color4ubVertex3fvSUN
#define GL_ALT_FUNDEF_Color4ubVertex3fvSUN
typedef void (*PFNGLCOLOR4UBVERTEX3FVSUNPROC_ALT)(const GLubyte *,const GLfloat *);
static inline void glColor4ubVertex3fvSUN(const GLubyte * c1,const GLfloat * v1)
{
	static PFNGLCOLOR4UBVERTEX3FVSUNPROC_ALT fn=(PFNGLCOLOR4UBVERTEX3FVSUNPROC_ALT)glaltGetProcAddressExtension("glColor4ubVertex3fvSUN","GL_SUN_vertex");
	 fn(c1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Normal3fVertex3fSUN
#define GL_ALT_FUNDEF_Normal3fVertex3fSUN
typedef void (*PFNGLNORMAL3FVERTEX3FSUNPROC_ALT)(GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glNormal3fVertex3fSUN(GLfloat nx1,GLfloat ny1,GLfloat nz1,GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLNORMAL3FVERTEX3FSUNPROC_ALT fn=(PFNGLNORMAL3FVERTEX3FSUNPROC_ALT)glaltGetProcAddressExtension("glNormal3fVertex3fSUN","GL_SUN_vertex");
	 fn(nx1,ny1,nz1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_Normal3fVertex3fvSUN
#define GL_ALT_FUNDEF_Normal3fVertex3fvSUN
typedef void (*PFNGLNORMAL3FVERTEX3FVSUNPROC_ALT)(const GLfloat *,const GLfloat *);
static inline void glNormal3fVertex3fvSUN(const GLfloat * n1,const GLfloat * v1)
{
	static PFNGLNORMAL3FVERTEX3FVSUNPROC_ALT fn=(PFNGLNORMAL3FVERTEX3FVSUNPROC_ALT)glaltGetProcAddressExtension("glNormal3fVertex3fvSUN","GL_SUN_vertex");
	 fn(n1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ReplacementCodeuiColor3fVertex3fSUN
#define GL_ALT_FUNDEF_ReplacementCodeuiColor3fVertex3fSUN
typedef void (*PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC_ALT)(GLuint,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glReplacementCodeuiColor3fVertex3fSUN(GLuint rc1,GLfloat r1,GLfloat g1,GLfloat b1,GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC_ALT fn=(PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC_ALT)glaltGetProcAddressExtension("glReplacementCodeuiColor3fVertex3fSUN","GL_SUN_vertex");
	 fn(rc1,r1,g1,b1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ReplacementCodeuiColor3fVertex3fvSUN
#define GL_ALT_FUNDEF_ReplacementCodeuiColor3fVertex3fvSUN
typedef void (*PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC_ALT)(const GLuint *,const GLfloat *,const GLfloat *);
static inline void glReplacementCodeuiColor3fVertex3fvSUN(const GLuint * rc1,const GLfloat * c1,const GLfloat * v1)
{
	static PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC_ALT fn=(PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC_ALT)glaltGetProcAddressExtension("glReplacementCodeuiColor3fVertex3fvSUN","GL_SUN_vertex");
	 fn(rc1,c1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ReplacementCodeuiColor4fNormal3fVertex3fSUN
#define GL_ALT_FUNDEF_ReplacementCodeuiColor4fNormal3fVertex3fSUN
typedef void (*PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC_ALT)(GLuint,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc1,GLfloat r1,GLfloat g1,GLfloat b1,GLfloat a1,GLfloat nx1,GLfloat ny1,GLfloat nz1,GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC_ALT fn=(PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC_ALT)glaltGetProcAddressExtension("glReplacementCodeuiColor4fNormal3fVertex3fSUN","GL_SUN_vertex");
	 fn(rc1,r1,g1,b1,a1,nx1,ny1,nz1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ReplacementCodeuiColor4fNormal3fVertex3fvSUN
#define GL_ALT_FUNDEF_ReplacementCodeuiColor4fNormal3fVertex3fvSUN
typedef void (*PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC_ALT)(const GLuint *,const GLfloat *,const GLfloat *,const GLfloat *);
static inline void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint * rc1,const GLfloat * c1,const GLfloat * n1,const GLfloat * v1)
{
	static PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC_ALT fn=(PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC_ALT)glaltGetProcAddressExtension("glReplacementCodeuiColor4fNormal3fVertex3fvSUN","GL_SUN_vertex");
	 fn(rc1,c1,n1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ReplacementCodeuiColor4ubVertex3fSUN
#define GL_ALT_FUNDEF_ReplacementCodeuiColor4ubVertex3fSUN
typedef void (*PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC_ALT)(GLuint,GLubyte,GLubyte,GLubyte,GLubyte,GLfloat,GLfloat,GLfloat);
static inline void glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc1,GLubyte r1,GLubyte g1,GLubyte b1,GLubyte a1,GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC_ALT fn=(PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC_ALT)glaltGetProcAddressExtension("glReplacementCodeuiColor4ubVertex3fSUN","GL_SUN_vertex");
	 fn(rc1,r1,g1,b1,a1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ReplacementCodeuiColor4ubVertex3fvSUN
#define GL_ALT_FUNDEF_ReplacementCodeuiColor4ubVertex3fvSUN
typedef void (*PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC_ALT)(const GLuint *,const GLubyte *,const GLfloat *);
static inline void glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint * rc1,const GLubyte * c1,const GLfloat * v1)
{
	static PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC_ALT fn=(PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC_ALT)glaltGetProcAddressExtension("glReplacementCodeuiColor4ubVertex3fvSUN","GL_SUN_vertex");
	 fn(rc1,c1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ReplacementCodeuiNormal3fVertex3fSUN
#define GL_ALT_FUNDEF_ReplacementCodeuiNormal3fVertex3fSUN
typedef void (*PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC_ALT)(GLuint,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc1,GLfloat nx1,GLfloat ny1,GLfloat nz1,GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC_ALT fn=(PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC_ALT)glaltGetProcAddressExtension("glReplacementCodeuiNormal3fVertex3fSUN","GL_SUN_vertex");
	 fn(rc1,nx1,ny1,nz1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ReplacementCodeuiNormal3fVertex3fvSUN
#define GL_ALT_FUNDEF_ReplacementCodeuiNormal3fVertex3fvSUN
typedef void (*PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC_ALT)(const GLuint *,const GLfloat *,const GLfloat *);
static inline void glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint * rc1,const GLfloat * n1,const GLfloat * v1)
{
	static PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC_ALT fn=(PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC_ALT)glaltGetProcAddressExtension("glReplacementCodeuiNormal3fVertex3fvSUN","GL_SUN_vertex");
	 fn(rc1,n1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN
#define GL_ALT_FUNDEF_ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN
typedef void (*PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC_ALT)(GLuint,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc1,GLfloat s1,GLfloat t1,GLfloat r1,GLfloat g1,GLfloat b1,GLfloat a1,GLfloat nx1,GLfloat ny1,GLfloat nz1,GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC_ALT fn=(PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC_ALT)glaltGetProcAddressExtension("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN","GL_SUN_vertex");
	 fn(rc1,s1,t1,r1,g1,b1,a1,nx1,ny1,nz1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN
#define GL_ALT_FUNDEF_ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN
typedef void (*PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC_ALT)(const GLuint *,const GLfloat *,const GLfloat *,const GLfloat *,const GLfloat *);
static inline void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint * rc1,const GLfloat * tc1,const GLfloat * c1,const GLfloat * n1,const GLfloat * v1)
{
	static PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC_ALT fn=(PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC_ALT)glaltGetProcAddressExtension("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN","GL_SUN_vertex");
	 fn(rc1,tc1,c1,n1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN
#define GL_ALT_FUNDEF_ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN
typedef void (*PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC_ALT)(GLuint,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc1,GLfloat s1,GLfloat t1,GLfloat nx1,GLfloat ny1,GLfloat nz1,GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC_ALT fn=(PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC_ALT)glaltGetProcAddressExtension("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN","GL_SUN_vertex");
	 fn(rc1,s1,t1,nx1,ny1,nz1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN
#define GL_ALT_FUNDEF_ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN
typedef void (*PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC_ALT)(const GLuint *,const GLfloat *,const GLfloat *,const GLfloat *);
static inline void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint * rc1,const GLfloat * tc1,const GLfloat * n1,const GLfloat * v1)
{
	static PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC_ALT fn=(PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC_ALT)glaltGetProcAddressExtension("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN","GL_SUN_vertex");
	 fn(rc1,tc1,n1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ReplacementCodeuiTexCoord2fVertex3fSUN
#define GL_ALT_FUNDEF_ReplacementCodeuiTexCoord2fVertex3fSUN
typedef void (*PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC_ALT)(GLuint,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc1,GLfloat s1,GLfloat t1,GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC_ALT fn=(PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC_ALT)glaltGetProcAddressExtension("glReplacementCodeuiTexCoord2fVertex3fSUN","GL_SUN_vertex");
	 fn(rc1,s1,t1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ReplacementCodeuiTexCoord2fVertex3fvSUN
#define GL_ALT_FUNDEF_ReplacementCodeuiTexCoord2fVertex3fvSUN
typedef void (*PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC_ALT)(const GLuint *,const GLfloat *,const GLfloat *);
static inline void glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint * rc1,const GLfloat * tc1,const GLfloat * v1)
{
	static PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC_ALT fn=(PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC_ALT)glaltGetProcAddressExtension("glReplacementCodeuiTexCoord2fVertex3fvSUN","GL_SUN_vertex");
	 fn(rc1,tc1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ReplacementCodeuiVertex3fSUN
#define GL_ALT_FUNDEF_ReplacementCodeuiVertex3fSUN
typedef void (*PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC_ALT)(GLuint,GLfloat,GLfloat,GLfloat);
static inline void glReplacementCodeuiVertex3fSUN(GLuint rc1,GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC_ALT fn=(PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC_ALT)glaltGetProcAddressExtension("glReplacementCodeuiVertex3fSUN","GL_SUN_vertex");
	 fn(rc1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_ReplacementCodeuiVertex3fvSUN
#define GL_ALT_FUNDEF_ReplacementCodeuiVertex3fvSUN
typedef void (*PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC_ALT)(const GLuint *,const GLfloat *);
static inline void glReplacementCodeuiVertex3fvSUN(const GLuint * rc1,const GLfloat * v1)
{
	static PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC_ALT fn=(PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC_ALT)glaltGetProcAddressExtension("glReplacementCodeuiVertex3fvSUN","GL_SUN_vertex");
	 fn(rc1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord2fColor3fVertex3fSUN
#define GL_ALT_FUNDEF_TexCoord2fColor3fVertex3fSUN
typedef void (*PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC_ALT)(GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glTexCoord2fColor3fVertex3fSUN(GLfloat s1,GLfloat t1,GLfloat r1,GLfloat g1,GLfloat b1,GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC_ALT fn=(PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC_ALT)glaltGetProcAddressExtension("glTexCoord2fColor3fVertex3fSUN","GL_SUN_vertex");
	 fn(s1,t1,r1,g1,b1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord2fColor3fVertex3fvSUN
#define GL_ALT_FUNDEF_TexCoord2fColor3fVertex3fvSUN
typedef void (*PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC_ALT)(const GLfloat *,const GLfloat *,const GLfloat *);
static inline void glTexCoord2fColor3fVertex3fvSUN(const GLfloat * tc1,const GLfloat * c1,const GLfloat * v1)
{
	static PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC_ALT fn=(PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC_ALT)glaltGetProcAddressExtension("glTexCoord2fColor3fVertex3fvSUN","GL_SUN_vertex");
	 fn(tc1,c1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord2fColor4fNormal3fVertex3fSUN
#define GL_ALT_FUNDEF_TexCoord2fColor4fNormal3fVertex3fSUN
typedef void (*PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC_ALT)(GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s1,GLfloat t1,GLfloat r1,GLfloat g1,GLfloat b1,GLfloat a1,GLfloat nx1,GLfloat ny1,GLfloat nz1,GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC_ALT fn=(PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC_ALT)glaltGetProcAddressExtension("glTexCoord2fColor4fNormal3fVertex3fSUN","GL_SUN_vertex");
	 fn(s1,t1,r1,g1,b1,a1,nx1,ny1,nz1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord2fColor4fNormal3fVertex3fvSUN
#define GL_ALT_FUNDEF_TexCoord2fColor4fNormal3fVertex3fvSUN
typedef void (*PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC_ALT)(const GLfloat *,const GLfloat *,const GLfloat *,const GLfloat *);
static inline void glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat * tc1,const GLfloat * c1,const GLfloat * n1,const GLfloat * v1)
{
	static PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC_ALT fn=(PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC_ALT)glaltGetProcAddressExtension("glTexCoord2fColor4fNormal3fVertex3fvSUN","GL_SUN_vertex");
	 fn(tc1,c1,n1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord2fColor4ubVertex3fSUN
#define GL_ALT_FUNDEF_TexCoord2fColor4ubVertex3fSUN
typedef void (*PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC_ALT)(GLfloat,GLfloat,GLubyte,GLubyte,GLubyte,GLubyte,GLfloat,GLfloat,GLfloat);
static inline void glTexCoord2fColor4ubVertex3fSUN(GLfloat s1,GLfloat t1,GLubyte r1,GLubyte g1,GLubyte b1,GLubyte a1,GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC_ALT fn=(PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC_ALT)glaltGetProcAddressExtension("glTexCoord2fColor4ubVertex3fSUN","GL_SUN_vertex");
	 fn(s1,t1,r1,g1,b1,a1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord2fColor4ubVertex3fvSUN
#define GL_ALT_FUNDEF_TexCoord2fColor4ubVertex3fvSUN
typedef void (*PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC_ALT)(const GLfloat *,const GLubyte *,const GLfloat *);
static inline void glTexCoord2fColor4ubVertex3fvSUN(const GLfloat * tc1,const GLubyte * c1,const GLfloat * v1)
{
	static PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC_ALT fn=(PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC_ALT)glaltGetProcAddressExtension("glTexCoord2fColor4ubVertex3fvSUN","GL_SUN_vertex");
	 fn(tc1,c1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord2fNormal3fVertex3fSUN
#define GL_ALT_FUNDEF_TexCoord2fNormal3fVertex3fSUN
typedef void (*PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC_ALT)(GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glTexCoord2fNormal3fVertex3fSUN(GLfloat s1,GLfloat t1,GLfloat nx1,GLfloat ny1,GLfloat nz1,GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC_ALT fn=(PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC_ALT)glaltGetProcAddressExtension("glTexCoord2fNormal3fVertex3fSUN","GL_SUN_vertex");
	 fn(s1,t1,nx1,ny1,nz1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord2fNormal3fVertex3fvSUN
#define GL_ALT_FUNDEF_TexCoord2fNormal3fVertex3fvSUN
typedef void (*PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC_ALT)(const GLfloat *,const GLfloat *,const GLfloat *);
static inline void glTexCoord2fNormal3fVertex3fvSUN(const GLfloat * tc1,const GLfloat * n1,const GLfloat * v1)
{
	static PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC_ALT fn=(PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC_ALT)glaltGetProcAddressExtension("glTexCoord2fNormal3fVertex3fvSUN","GL_SUN_vertex");
	 fn(tc1,n1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord2fVertex3fSUN
#define GL_ALT_FUNDEF_TexCoord2fVertex3fSUN
typedef void (*PFNGLTEXCOORD2FVERTEX3FSUNPROC_ALT)(GLfloat,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glTexCoord2fVertex3fSUN(GLfloat s1,GLfloat t1,GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLTEXCOORD2FVERTEX3FSUNPROC_ALT fn=(PFNGLTEXCOORD2FVERTEX3FSUNPROC_ALT)glaltGetProcAddressExtension("glTexCoord2fVertex3fSUN","GL_SUN_vertex");
	 fn(s1,t1,x1,y1,z1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord2fVertex3fvSUN
#define GL_ALT_FUNDEF_TexCoord2fVertex3fvSUN
typedef void (*PFNGLTEXCOORD2FVERTEX3FVSUNPROC_ALT)(const GLfloat *,const GLfloat *);
static inline void glTexCoord2fVertex3fvSUN(const GLfloat * tc1,const GLfloat * v1)
{
	static PFNGLTEXCOORD2FVERTEX3FVSUNPROC_ALT fn=(PFNGLTEXCOORD2FVERTEX3FVSUNPROC_ALT)glaltGetProcAddressExtension("glTexCoord2fVertex3fvSUN","GL_SUN_vertex");
	 fn(tc1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord4fColor4fNormal3fVertex4fSUN
#define GL_ALT_FUNDEF_TexCoord4fColor4fNormal3fVertex4fSUN
typedef void (*PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC_ALT)(GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s1,GLfloat t1,GLfloat p1,GLfloat q1,GLfloat r1,GLfloat g1,GLfloat b1,GLfloat a1,GLfloat nx1,GLfloat ny1,GLfloat nz1,GLfloat x1,GLfloat y1,GLfloat z1,GLfloat w1)
{
	static PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC_ALT fn=(PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC_ALT)glaltGetProcAddressExtension("glTexCoord4fColor4fNormal3fVertex4fSUN","GL_SUN_vertex");
	 fn(s1,t1,p1,q1,r1,g1,b1,a1,nx1,ny1,nz1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord4fColor4fNormal3fVertex4fvSUN
#define GL_ALT_FUNDEF_TexCoord4fColor4fNormal3fVertex4fvSUN
typedef void (*PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC_ALT)(const GLfloat *,const GLfloat *,const GLfloat *,const GLfloat *);
static inline void glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat * tc1,const GLfloat * c1,const GLfloat * n1,const GLfloat * v1)
{
	static PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC_ALT fn=(PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC_ALT)glaltGetProcAddressExtension("glTexCoord4fColor4fNormal3fVertex4fvSUN","GL_SUN_vertex");
	 fn(tc1,c1,n1,v1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord4fVertex4fSUN
#define GL_ALT_FUNDEF_TexCoord4fVertex4fSUN
typedef void (*PFNGLTEXCOORD4FVERTEX4FSUNPROC_ALT)(GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glTexCoord4fVertex4fSUN(GLfloat s1,GLfloat t1,GLfloat p1,GLfloat q1,GLfloat x1,GLfloat y1,GLfloat z1,GLfloat w1)
{
	static PFNGLTEXCOORD4FVERTEX4FSUNPROC_ALT fn=(PFNGLTEXCOORD4FVERTEX4FSUNPROC_ALT)glaltGetProcAddressExtension("glTexCoord4fVertex4fSUN","GL_SUN_vertex");
	 fn(s1,t1,p1,q1,x1,y1,z1,w1);
}
#endif

#ifndef	GL_ALT_FUNDEF_TexCoord4fVertex4fvSUN
#define GL_ALT_FUNDEF_TexCoord4fVertex4fvSUN
typedef void (*PFNGLTEXCOORD4FVERTEX4FVSUNPROC_ALT)(const GLfloat *,const GLfloat *);
static inline void glTexCoord4fVertex4fvSUN(const GLfloat * tc1,const GLfloat * v1)
{
	static PFNGLTEXCOORD4FVERTEX4FVSUNPROC_ALT fn=(PFNGLTEXCOORD4FVERTEX4FVSUNPROC_ALT)glaltGetProcAddressExtension("glTexCoord4fVertex4fvSUN","GL_SUN_vertex");
	 fn(tc1,v1);
}
#endif
CGUARDEND

#endif

#ifndef GL_WIN_phong_shading
#define GL_WIN_phong_shading
#ifndef GL_PHONG_WIN
#define GL_PHONG_WIN 0x80EA
#endif //GL_PHONG_WIN
#ifndef GL_PHONG_HINT_WIN
#define GL_PHONG_HINT_WIN 0x80EB
#endif //GL_PHONG_HINT_WIN
CGUARDBEGIN

CGUARDEND

#endif

#ifndef GL_WIN_specular_fog
#define GL_WIN_specular_fog
#ifndef GL_FOG_SPECULAR_TEXTURE_WIN
#define GL_FOG_SPECULAR_TEXTURE_WIN 0x80EC
#endif //GL_FOG_SPECULAR_TEXTURE_WIN
CGUARDBEGIN

CGUARDEND

#endif

#endif
