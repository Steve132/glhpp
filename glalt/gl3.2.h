#ifndef GL_ALT_GL_VERSION_3_2_ALT
#define GL_ALT_GL_VERSION_3_2_ALT
#include "common.h"


#ifndef GL_ALT_API_NAME
#define GL_ALT_API_NAME GL_ALT_GL_API
#endif
#ifndef GL_ALT_API_VERSION
#define GL_ALT_API_VERSION 320
#endif
#ifndef GL_ZERO
#define GL_ZERO 0
#endif //GL_ZERO
#ifndef GL_NO_ERROR
#define GL_NO_ERROR 0
#endif //GL_NO_ERROR
#ifndef GL_FALSE
#define GL_FALSE 0
#endif //GL_FALSE
#ifndef GL_NONE
#define GL_NONE 0
#endif //GL_NONE
#ifndef GL_POINTS
#define GL_POINTS 0x0000
#endif //GL_POINTS
#ifndef GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#endif //GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
#ifndef GL_CONTEXT_CORE_PROFILE_BIT
#define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001
#endif //GL_CONTEXT_CORE_PROFILE_BIT
#ifndef GL_SYNC_FLUSH_COMMANDS_BIT
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#endif //GL_SYNC_FLUSH_COMMANDS_BIT
#ifndef GL_CONTEXT_COMPATIBILITY_PROFILE_BIT
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
#endif //GL_CONTEXT_COMPATIBILITY_PROFILE_BIT
#ifndef GL_DEPTH_BUFFER_BIT
#define GL_DEPTH_BUFFER_BIT 0x00000100
#endif //GL_DEPTH_BUFFER_BIT
#ifndef GL_STENCIL_BUFFER_BIT
#define GL_STENCIL_BUFFER_BIT 0x00000400
#endif //GL_STENCIL_BUFFER_BIT
#ifndef GL_COLOR_BUFFER_BIT
#define GL_COLOR_BUFFER_BIT 0x00004000
#endif //GL_COLOR_BUFFER_BIT
#ifndef GL_MAP_READ_BIT
#define GL_MAP_READ_BIT 0x0001
#endif //GL_MAP_READ_BIT
#ifndef GL_LINES
#define GL_LINES 0x0001
#endif //GL_LINES
#ifndef GL_MAP_WRITE_BIT
#define GL_MAP_WRITE_BIT 0x0002
#endif //GL_MAP_WRITE_BIT
#ifndef GL_LINE_LOOP
#define GL_LINE_LOOP 0x0002
#endif //GL_LINE_LOOP
#ifndef GL_LINE_STRIP
#define GL_LINE_STRIP 0x0003
#endif //GL_LINE_STRIP
#ifndef GL_MAP_INVALIDATE_RANGE_BIT
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#endif //GL_MAP_INVALIDATE_RANGE_BIT
#ifndef GL_TRIANGLES
#define GL_TRIANGLES 0x0004
#endif //GL_TRIANGLES
#ifndef GL_TRIANGLE_STRIP
#define GL_TRIANGLE_STRIP 0x0005
#endif //GL_TRIANGLE_STRIP
#ifndef GL_TRIANGLE_FAN
#define GL_TRIANGLE_FAN 0x0006
#endif //GL_TRIANGLE_FAN
#ifndef GL_MAP_INVALIDATE_BUFFER_BIT
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#endif //GL_MAP_INVALIDATE_BUFFER_BIT
#ifndef GL_LINES_ADJACENCY
#define GL_LINES_ADJACENCY 0x000A
#endif //GL_LINES_ADJACENCY
#ifndef GL_LINE_STRIP_ADJACENCY
#define GL_LINE_STRIP_ADJACENCY 0x000B
#endif //GL_LINE_STRIP_ADJACENCY
#ifndef GL_TRIANGLES_ADJACENCY
#define GL_TRIANGLES_ADJACENCY 0x000C
#endif //GL_TRIANGLES_ADJACENCY
#ifndef GL_TRIANGLE_STRIP_ADJACENCY
#define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
#endif //GL_TRIANGLE_STRIP_ADJACENCY
#ifndef GL_MAP_FLUSH_EXPLICIT_BIT
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#endif //GL_MAP_FLUSH_EXPLICIT_BIT
#ifndef GL_MAP_UNSYNCHRONIZED_BIT
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#endif //GL_MAP_UNSYNCHRONIZED_BIT
#ifndef GL_NEVER
#define GL_NEVER 0x0200
#endif //GL_NEVER
#ifndef GL_LESS
#define GL_LESS 0x0201
#endif //GL_LESS
#ifndef GL_EQUAL
#define GL_EQUAL 0x0202
#endif //GL_EQUAL
#ifndef GL_LEQUAL
#define GL_LEQUAL 0x0203
#endif //GL_LEQUAL
#ifndef GL_GREATER
#define GL_GREATER 0x0204
#endif //GL_GREATER
#ifndef GL_NOTEQUAL
#define GL_NOTEQUAL 0x0205
#endif //GL_NOTEQUAL
#ifndef GL_GEQUAL
#define GL_GEQUAL 0x0206
#endif //GL_GEQUAL
#ifndef GL_ALWAYS
#define GL_ALWAYS 0x0207
#endif //GL_ALWAYS
#ifndef GL_SRC_COLOR
#define GL_SRC_COLOR 0x0300
#endif //GL_SRC_COLOR
#ifndef GL_ONE_MINUS_SRC_COLOR
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#endif //GL_ONE_MINUS_SRC_COLOR
#ifndef GL_SRC_ALPHA
#define GL_SRC_ALPHA 0x0302
#endif //GL_SRC_ALPHA
#ifndef GL_ONE_MINUS_SRC_ALPHA
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#endif //GL_ONE_MINUS_SRC_ALPHA
#ifndef GL_DST_ALPHA
#define GL_DST_ALPHA 0x0304
#endif //GL_DST_ALPHA
#ifndef GL_ONE_MINUS_DST_ALPHA
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#endif //GL_ONE_MINUS_DST_ALPHA
#ifndef GL_DST_COLOR
#define GL_DST_COLOR 0x0306
#endif //GL_DST_COLOR
#ifndef GL_ONE_MINUS_DST_COLOR
#define GL_ONE_MINUS_DST_COLOR 0x0307
#endif //GL_ONE_MINUS_DST_COLOR
#ifndef GL_SRC_ALPHA_SATURATE
#define GL_SRC_ALPHA_SATURATE 0x0308
#endif //GL_SRC_ALPHA_SATURATE
#ifndef GL_FRONT_LEFT
#define GL_FRONT_LEFT 0x0400
#endif //GL_FRONT_LEFT
#ifndef GL_FRONT_RIGHT
#define GL_FRONT_RIGHT 0x0401
#endif //GL_FRONT_RIGHT
#ifndef GL_BACK_LEFT
#define GL_BACK_LEFT 0x0402
#endif //GL_BACK_LEFT
#ifndef GL_BACK_RIGHT
#define GL_BACK_RIGHT 0x0403
#endif //GL_BACK_RIGHT
#ifndef GL_FRONT
#define GL_FRONT 0x0404
#endif //GL_FRONT
#ifndef GL_BACK
#define GL_BACK 0x0405
#endif //GL_BACK
#ifndef GL_LEFT
#define GL_LEFT 0x0406
#endif //GL_LEFT
#ifndef GL_RIGHT
#define GL_RIGHT 0x0407
#endif //GL_RIGHT
#ifndef GL_FRONT_AND_BACK
#define GL_FRONT_AND_BACK 0x0408
#endif //GL_FRONT_AND_BACK
#ifndef GL_INVALID_ENUM
#define GL_INVALID_ENUM 0x0500
#endif //GL_INVALID_ENUM
#ifndef GL_INVALID_VALUE
#define GL_INVALID_VALUE 0x0501
#endif //GL_INVALID_VALUE
#ifndef GL_INVALID_OPERATION
#define GL_INVALID_OPERATION 0x0502
#endif //GL_INVALID_OPERATION
#ifndef GL_OUT_OF_MEMORY
#define GL_OUT_OF_MEMORY 0x0505
#endif //GL_OUT_OF_MEMORY
#ifndef GL_INVALID_FRAMEBUFFER_OPERATION
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#endif //GL_INVALID_FRAMEBUFFER_OPERATION
#ifndef GL_CW
#define GL_CW 0x0900
#endif //GL_CW
#ifndef GL_CCW
#define GL_CCW 0x0901
#endif //GL_CCW
#ifndef GL_POINT_SIZE
#define GL_POINT_SIZE 0x0B11
#endif //GL_POINT_SIZE
#ifndef GL_POINT_SIZE_RANGE
#define GL_POINT_SIZE_RANGE 0x0B12
#endif //GL_POINT_SIZE_RANGE
#ifndef GL_SMOOTH_POINT_SIZE_RANGE
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#endif //GL_SMOOTH_POINT_SIZE_RANGE
#ifndef GL_POINT_SIZE_GRANULARITY
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#endif //GL_POINT_SIZE_GRANULARITY
#ifndef GL_SMOOTH_POINT_SIZE_GRANULARITY
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#endif //GL_SMOOTH_POINT_SIZE_GRANULARITY
#ifndef GL_LINE_SMOOTH
#define GL_LINE_SMOOTH 0x0B20
#endif //GL_LINE_SMOOTH
#ifndef GL_LINE_WIDTH
#define GL_LINE_WIDTH 0x0B21
#endif //GL_LINE_WIDTH
#ifndef GL_LINE_WIDTH_RANGE
#define GL_LINE_WIDTH_RANGE 0x0B22
#endif //GL_LINE_WIDTH_RANGE
#ifndef GL_SMOOTH_LINE_WIDTH_RANGE
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#endif //GL_SMOOTH_LINE_WIDTH_RANGE
#ifndef GL_LINE_WIDTH_GRANULARITY
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#endif //GL_LINE_WIDTH_GRANULARITY
#ifndef GL_SMOOTH_LINE_WIDTH_GRANULARITY
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#endif //GL_SMOOTH_LINE_WIDTH_GRANULARITY
#ifndef GL_POLYGON_MODE
#define GL_POLYGON_MODE 0x0B40
#endif //GL_POLYGON_MODE
#ifndef GL_POLYGON_SMOOTH
#define GL_POLYGON_SMOOTH 0x0B41
#endif //GL_POLYGON_SMOOTH
#ifndef GL_CULL_FACE
#define GL_CULL_FACE 0x0B44
#endif //GL_CULL_FACE
#ifndef GL_CULL_FACE_MODE
#define GL_CULL_FACE_MODE 0x0B45
#endif //GL_CULL_FACE_MODE
#ifndef GL_FRONT_FACE
#define GL_FRONT_FACE 0x0B46
#endif //GL_FRONT_FACE
#ifndef GL_DEPTH_RANGE
#define GL_DEPTH_RANGE 0x0B70
#endif //GL_DEPTH_RANGE
#ifndef GL_DEPTH_TEST
#define GL_DEPTH_TEST 0x0B71
#endif //GL_DEPTH_TEST
#ifndef GL_DEPTH_WRITEMASK
#define GL_DEPTH_WRITEMASK 0x0B72
#endif //GL_DEPTH_WRITEMASK
#ifndef GL_DEPTH_CLEAR_VALUE
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#endif //GL_DEPTH_CLEAR_VALUE
#ifndef GL_DEPTH_FUNC
#define GL_DEPTH_FUNC 0x0B74
#endif //GL_DEPTH_FUNC
#ifndef GL_STENCIL_TEST
#define GL_STENCIL_TEST 0x0B90
#endif //GL_STENCIL_TEST
#ifndef GL_STENCIL_CLEAR_VALUE
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#endif //GL_STENCIL_CLEAR_VALUE
#ifndef GL_STENCIL_FUNC
#define GL_STENCIL_FUNC 0x0B92
#endif //GL_STENCIL_FUNC
#ifndef GL_STENCIL_VALUE_MASK
#define GL_STENCIL_VALUE_MASK 0x0B93
#endif //GL_STENCIL_VALUE_MASK
#ifndef GL_STENCIL_FAIL
#define GL_STENCIL_FAIL 0x0B94
#endif //GL_STENCIL_FAIL
#ifndef GL_STENCIL_PASS_DEPTH_FAIL
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#endif //GL_STENCIL_PASS_DEPTH_FAIL
#ifndef GL_STENCIL_PASS_DEPTH_PASS
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#endif //GL_STENCIL_PASS_DEPTH_PASS
#ifndef GL_STENCIL_REF
#define GL_STENCIL_REF 0x0B97
#endif //GL_STENCIL_REF
#ifndef GL_STENCIL_WRITEMASK
#define GL_STENCIL_WRITEMASK 0x0B98
#endif //GL_STENCIL_WRITEMASK
#ifndef GL_VIEWPORT
#define GL_VIEWPORT 0x0BA2
#endif //GL_VIEWPORT
#ifndef GL_DITHER
#define GL_DITHER 0x0BD0
#endif //GL_DITHER
#ifndef GL_BLEND_DST
#define GL_BLEND_DST 0x0BE0
#endif //GL_BLEND_DST
#ifndef GL_BLEND_SRC
#define GL_BLEND_SRC 0x0BE1
#endif //GL_BLEND_SRC
#ifndef GL_BLEND
#define GL_BLEND 0x0BE2
#endif //GL_BLEND
#ifndef GL_LOGIC_OP_MODE
#define GL_LOGIC_OP_MODE 0x0BF0
#endif //GL_LOGIC_OP_MODE
#ifndef GL_COLOR_LOGIC_OP
#define GL_COLOR_LOGIC_OP 0x0BF2
#endif //GL_COLOR_LOGIC_OP
#ifndef GL_DRAW_BUFFER
#define GL_DRAW_BUFFER 0x0C01
#endif //GL_DRAW_BUFFER
#ifndef GL_READ_BUFFER
#define GL_READ_BUFFER 0x0C02
#endif //GL_READ_BUFFER
#ifndef GL_SCISSOR_BOX
#define GL_SCISSOR_BOX 0x0C10
#endif //GL_SCISSOR_BOX
#ifndef GL_SCISSOR_TEST
#define GL_SCISSOR_TEST 0x0C11
#endif //GL_SCISSOR_TEST
#ifndef GL_COLOR_CLEAR_VALUE
#define GL_COLOR_CLEAR_VALUE 0x0C22
#endif //GL_COLOR_CLEAR_VALUE
#ifndef GL_COLOR_WRITEMASK
#define GL_COLOR_WRITEMASK 0x0C23
#endif //GL_COLOR_WRITEMASK
#ifndef GL_DOUBLEBUFFER
#define GL_DOUBLEBUFFER 0x0C32
#endif //GL_DOUBLEBUFFER
#ifndef GL_STEREO
#define GL_STEREO 0x0C33
#endif //GL_STEREO
#ifndef GL_LINE_SMOOTH_HINT
#define GL_LINE_SMOOTH_HINT 0x0C52
#endif //GL_LINE_SMOOTH_HINT
#ifndef GL_POLYGON_SMOOTH_HINT
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#endif //GL_POLYGON_SMOOTH_HINT
#ifndef GL_UNPACK_SWAP_BYTES
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#endif //GL_UNPACK_SWAP_BYTES
#ifndef GL_UNPACK_LSB_FIRST
#define GL_UNPACK_LSB_FIRST 0x0CF1
#endif //GL_UNPACK_LSB_FIRST
#ifndef GL_UNPACK_ROW_LENGTH
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#endif //GL_UNPACK_ROW_LENGTH
#ifndef GL_UNPACK_SKIP_ROWS
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#endif //GL_UNPACK_SKIP_ROWS
#ifndef GL_UNPACK_SKIP_PIXELS
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#endif //GL_UNPACK_SKIP_PIXELS
#ifndef GL_UNPACK_ALIGNMENT
#define GL_UNPACK_ALIGNMENT 0x0CF5
#endif //GL_UNPACK_ALIGNMENT
#ifndef GL_PACK_SWAP_BYTES
#define GL_PACK_SWAP_BYTES 0x0D00
#endif //GL_PACK_SWAP_BYTES
#ifndef GL_PACK_LSB_FIRST
#define GL_PACK_LSB_FIRST 0x0D01
#endif //GL_PACK_LSB_FIRST
#ifndef GL_PACK_ROW_LENGTH
#define GL_PACK_ROW_LENGTH 0x0D02
#endif //GL_PACK_ROW_LENGTH
#ifndef GL_PACK_SKIP_ROWS
#define GL_PACK_SKIP_ROWS 0x0D03
#endif //GL_PACK_SKIP_ROWS
#ifndef GL_PACK_SKIP_PIXELS
#define GL_PACK_SKIP_PIXELS 0x0D04
#endif //GL_PACK_SKIP_PIXELS
#ifndef GL_PACK_ALIGNMENT
#define GL_PACK_ALIGNMENT 0x0D05
#endif //GL_PACK_ALIGNMENT
#ifndef GL_MAX_CLIP_DISTANCES
#define GL_MAX_CLIP_DISTANCES 0x0D32
#endif //GL_MAX_CLIP_DISTANCES
#ifndef GL_MAX_TEXTURE_SIZE
#define GL_MAX_TEXTURE_SIZE 0x0D33
#endif //GL_MAX_TEXTURE_SIZE
#ifndef GL_MAX_VIEWPORT_DIMS
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#endif //GL_MAX_VIEWPORT_DIMS
#ifndef GL_SUBPIXEL_BITS
#define GL_SUBPIXEL_BITS 0x0D50
#endif //GL_SUBPIXEL_BITS
#ifndef GL_TEXTURE_1D
#define GL_TEXTURE_1D 0x0DE0
#endif //GL_TEXTURE_1D
#ifndef GL_TEXTURE_2D
#define GL_TEXTURE_2D 0x0DE1
#endif //GL_TEXTURE_2D
#ifndef GL_TEXTURE_WIDTH
#define GL_TEXTURE_WIDTH 0x1000
#endif //GL_TEXTURE_WIDTH
#ifndef GL_TEXTURE_HEIGHT
#define GL_TEXTURE_HEIGHT 0x1001
#endif //GL_TEXTURE_HEIGHT
#ifndef GL_TEXTURE_INTERNAL_FORMAT
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#endif //GL_TEXTURE_INTERNAL_FORMAT
#ifndef GL_TEXTURE_BORDER_COLOR
#define GL_TEXTURE_BORDER_COLOR 0x1004
#endif //GL_TEXTURE_BORDER_COLOR
#ifndef GL_DONT_CARE
#define GL_DONT_CARE 0x1100
#endif //GL_DONT_CARE
#ifndef GL_FASTEST
#define GL_FASTEST 0x1101
#endif //GL_FASTEST
#ifndef GL_NICEST
#define GL_NICEST 0x1102
#endif //GL_NICEST
#ifndef GL_BYTE
#define GL_BYTE 0x1400
#endif //GL_BYTE
#ifndef GL_UNSIGNED_BYTE
#define GL_UNSIGNED_BYTE 0x1401
#endif //GL_UNSIGNED_BYTE
#ifndef GL_SHORT
#define GL_SHORT 0x1402
#endif //GL_SHORT
#ifndef GL_UNSIGNED_SHORT
#define GL_UNSIGNED_SHORT 0x1403
#endif //GL_UNSIGNED_SHORT
#ifndef GL_INT
#define GL_INT 0x1404
#endif //GL_INT
#ifndef GL_UNSIGNED_INT
#define GL_UNSIGNED_INT 0x1405
#endif //GL_UNSIGNED_INT
#ifndef GL_FLOAT
#define GL_FLOAT 0x1406
#endif //GL_FLOAT
#ifndef GL_DOUBLE
#define GL_DOUBLE 0x140A
#endif //GL_DOUBLE
#ifndef GL_HALF_FLOAT
#define GL_HALF_FLOAT 0x140B
#endif //GL_HALF_FLOAT
#ifndef GL_CLEAR
#define GL_CLEAR 0x1500
#endif //GL_CLEAR
#ifndef GL_AND
#define GL_AND 0x1501
#endif //GL_AND
#ifndef GL_AND_REVERSE
#define GL_AND_REVERSE 0x1502
#endif //GL_AND_REVERSE
#ifndef GL_COPY
#define GL_COPY 0x1503
#endif //GL_COPY
#ifndef GL_AND_INVERTED
#define GL_AND_INVERTED 0x1504
#endif //GL_AND_INVERTED
#ifndef GL_NOOP
#define GL_NOOP 0x1505
#endif //GL_NOOP
#ifndef GL_XOR
#define GL_XOR 0x1506
#endif //GL_XOR
#ifndef GL_OR
#define GL_OR 0x1507
#endif //GL_OR
#ifndef GL_NOR
#define GL_NOR 0x1508
#endif //GL_NOR
#ifndef GL_EQUIV
#define GL_EQUIV 0x1509
#endif //GL_EQUIV
#ifndef GL_INVERT
#define GL_INVERT 0x150A
#endif //GL_INVERT
#ifndef GL_OR_REVERSE
#define GL_OR_REVERSE 0x150B
#endif //GL_OR_REVERSE
#ifndef GL_COPY_INVERTED
#define GL_COPY_INVERTED 0x150C
#endif //GL_COPY_INVERTED
#ifndef GL_OR_INVERTED
#define GL_OR_INVERTED 0x150D
#endif //GL_OR_INVERTED
#ifndef GL_NAND
#define GL_NAND 0x150E
#endif //GL_NAND
#ifndef GL_SET
#define GL_SET 0x150F
#endif //GL_SET
#ifndef GL_TEXTURE
#define GL_TEXTURE 0x1702
#endif //GL_TEXTURE
#ifndef GL_COLOR
#define GL_COLOR 0x1800
#endif //GL_COLOR
#ifndef GL_DEPTH
#define GL_DEPTH 0x1801
#endif //GL_DEPTH
#ifndef GL_STENCIL
#define GL_STENCIL 0x1802
#endif //GL_STENCIL
#ifndef GL_STENCIL_INDEX
#define GL_STENCIL_INDEX 0x1901
#endif //GL_STENCIL_INDEX
#ifndef GL_DEPTH_COMPONENT
#define GL_DEPTH_COMPONENT 0x1902
#endif //GL_DEPTH_COMPONENT
#ifndef GL_RED
#define GL_RED 0x1903
#endif //GL_RED
#ifndef GL_GREEN
#define GL_GREEN 0x1904
#endif //GL_GREEN
#ifndef GL_BLUE
#define GL_BLUE 0x1905
#endif //GL_BLUE
#ifndef GL_ALPHA
#define GL_ALPHA 0x1906
#endif //GL_ALPHA
#ifndef GL_RGB
#define GL_RGB 0x1907
#endif //GL_RGB
#ifndef GL_RGBA
#define GL_RGBA 0x1908
#endif //GL_RGBA
#ifndef GL_POINT
#define GL_POINT 0x1B00
#endif //GL_POINT
#ifndef GL_LINE
#define GL_LINE 0x1B01
#endif //GL_LINE
#ifndef GL_FILL
#define GL_FILL 0x1B02
#endif //GL_FILL
#ifndef GL_KEEP
#define GL_KEEP 0x1E00
#endif //GL_KEEP
#ifndef GL_REPLACE
#define GL_REPLACE 0x1E01
#endif //GL_REPLACE
#ifndef GL_INCR
#define GL_INCR 0x1E02
#endif //GL_INCR
#ifndef GL_DECR
#define GL_DECR 0x1E03
#endif //GL_DECR
#ifndef GL_VENDOR
#define GL_VENDOR 0x1F00
#endif //GL_VENDOR
#ifndef GL_RENDERER
#define GL_RENDERER 0x1F01
#endif //GL_RENDERER
#ifndef GL_VERSION
#define GL_VERSION 0x1F02
#endif //GL_VERSION
#ifndef GL_EXTENSIONS
#define GL_EXTENSIONS 0x1F03
#endif //GL_EXTENSIONS
#ifndef GL_NEAREST
#define GL_NEAREST 0x2600
#endif //GL_NEAREST
#ifndef GL_LINEAR
#define GL_LINEAR 0x2601
#endif //GL_LINEAR
#ifndef GL_NEAREST_MIPMAP_NEAREST
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#endif //GL_NEAREST_MIPMAP_NEAREST
#ifndef GL_LINEAR_MIPMAP_NEAREST
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#endif //GL_LINEAR_MIPMAP_NEAREST
#ifndef GL_NEAREST_MIPMAP_LINEAR
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#endif //GL_NEAREST_MIPMAP_LINEAR
#ifndef GL_LINEAR_MIPMAP_LINEAR
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#endif //GL_LINEAR_MIPMAP_LINEAR
#ifndef GL_TEXTURE_MAG_FILTER
#define GL_TEXTURE_MAG_FILTER 0x2800
#endif //GL_TEXTURE_MAG_FILTER
#ifndef GL_TEXTURE_MIN_FILTER
#define GL_TEXTURE_MIN_FILTER 0x2801
#endif //GL_TEXTURE_MIN_FILTER
#ifndef GL_TEXTURE_WRAP_S
#define GL_TEXTURE_WRAP_S 0x2802
#endif //GL_TEXTURE_WRAP_S
#ifndef GL_TEXTURE_WRAP_T
#define GL_TEXTURE_WRAP_T 0x2803
#endif //GL_TEXTURE_WRAP_T
#ifndef GL_REPEAT
#define GL_REPEAT 0x2901
#endif //GL_REPEAT
#ifndef GL_POLYGON_OFFSET_UNITS
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#endif //GL_POLYGON_OFFSET_UNITS
#ifndef GL_POLYGON_OFFSET_POINT
#define GL_POLYGON_OFFSET_POINT 0x2A01
#endif //GL_POLYGON_OFFSET_POINT
#ifndef GL_POLYGON_OFFSET_LINE
#define GL_POLYGON_OFFSET_LINE 0x2A02
#endif //GL_POLYGON_OFFSET_LINE
#ifndef GL_R3_G3_B2
#define GL_R3_G3_B2 0x2A10
#endif //GL_R3_G3_B2
#ifndef GL_CLIP_DISTANCE0
#define GL_CLIP_DISTANCE0 0x3000
#endif //GL_CLIP_DISTANCE0
#ifndef GL_CLIP_DISTANCE1
#define GL_CLIP_DISTANCE1 0x3001
#endif //GL_CLIP_DISTANCE1
#ifndef GL_CLIP_DISTANCE2
#define GL_CLIP_DISTANCE2 0x3002
#endif //GL_CLIP_DISTANCE2
#ifndef GL_CLIP_DISTANCE3
#define GL_CLIP_DISTANCE3 0x3003
#endif //GL_CLIP_DISTANCE3
#ifndef GL_CLIP_DISTANCE4
#define GL_CLIP_DISTANCE4 0x3004
#endif //GL_CLIP_DISTANCE4
#ifndef GL_CLIP_DISTANCE5
#define GL_CLIP_DISTANCE5 0x3005
#endif //GL_CLIP_DISTANCE5
#ifndef GL_CLIP_DISTANCE6
#define GL_CLIP_DISTANCE6 0x3006
#endif //GL_CLIP_DISTANCE6
#ifndef GL_CLIP_DISTANCE7
#define GL_CLIP_DISTANCE7 0x3007
#endif //GL_CLIP_DISTANCE7
#ifndef GL_CONSTANT_COLOR
#define GL_CONSTANT_COLOR 0x8001
#endif //GL_CONSTANT_COLOR
#ifndef GL_ONE_MINUS_CONSTANT_COLOR
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#endif //GL_ONE_MINUS_CONSTANT_COLOR
#ifndef GL_CONSTANT_ALPHA
#define GL_CONSTANT_ALPHA 0x8003
#endif //GL_CONSTANT_ALPHA
#ifndef GL_ONE_MINUS_CONSTANT_ALPHA
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#endif //GL_ONE_MINUS_CONSTANT_ALPHA
#ifndef GL_FUNC_ADD
#define GL_FUNC_ADD 0x8006
#endif //GL_FUNC_ADD
#ifndef GL_MIN
#define GL_MIN 0x8007
#endif //GL_MIN
#ifndef GL_MAX
#define GL_MAX 0x8008
#endif //GL_MAX
#ifndef GL_BLEND_EQUATION_RGB
#define GL_BLEND_EQUATION_RGB 0x8009
#endif //GL_BLEND_EQUATION_RGB
#ifndef GL_FUNC_SUBTRACT
#define GL_FUNC_SUBTRACT 0x800A
#endif //GL_FUNC_SUBTRACT
#ifndef GL_FUNC_REVERSE_SUBTRACT
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#endif //GL_FUNC_REVERSE_SUBTRACT
#ifndef GL_UNSIGNED_BYTE_3_3_2
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#endif //GL_UNSIGNED_BYTE_3_3_2
#ifndef GL_UNSIGNED_SHORT_4_4_4_4
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#endif //GL_UNSIGNED_SHORT_4_4_4_4
#ifndef GL_UNSIGNED_SHORT_5_5_5_1
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#endif //GL_UNSIGNED_SHORT_5_5_5_1
#ifndef GL_UNSIGNED_INT_8_8_8_8
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#endif //GL_UNSIGNED_INT_8_8_8_8
#ifndef GL_UNSIGNED_INT_10_10_10_2
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#endif //GL_UNSIGNED_INT_10_10_10_2
#ifndef GL_POLYGON_OFFSET_FILL
#define GL_POLYGON_OFFSET_FILL 0x8037
#endif //GL_POLYGON_OFFSET_FILL
#ifndef GL_POLYGON_OFFSET_FACTOR
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#endif //GL_POLYGON_OFFSET_FACTOR
#ifndef GL_RGB4
#define GL_RGB4 0x804F
#endif //GL_RGB4
#ifndef GL_RGB5
#define GL_RGB5 0x8050
#endif //GL_RGB5
#ifndef GL_RGB8
#define GL_RGB8 0x8051
#endif //GL_RGB8
#ifndef GL_RGB10
#define GL_RGB10 0x8052
#endif //GL_RGB10
#ifndef GL_RGB12
#define GL_RGB12 0x8053
#endif //GL_RGB12
#ifndef GL_RGB16
#define GL_RGB16 0x8054
#endif //GL_RGB16
#ifndef GL_RGBA2
#define GL_RGBA2 0x8055
#endif //GL_RGBA2
#ifndef GL_RGBA4
#define GL_RGBA4 0x8056
#endif //GL_RGBA4
#ifndef GL_RGB5_A1
#define GL_RGB5_A1 0x8057
#endif //GL_RGB5_A1
#ifndef GL_RGBA8
#define GL_RGBA8 0x8058
#endif //GL_RGBA8
#ifndef GL_RGB10_A2
#define GL_RGB10_A2 0x8059
#endif //GL_RGB10_A2
#ifndef GL_RGBA12
#define GL_RGBA12 0x805A
#endif //GL_RGBA12
#ifndef GL_RGBA16
#define GL_RGBA16 0x805B
#endif //GL_RGBA16
#ifndef GL_TEXTURE_RED_SIZE
#define GL_TEXTURE_RED_SIZE 0x805C
#endif //GL_TEXTURE_RED_SIZE
#ifndef GL_TEXTURE_GREEN_SIZE
#define GL_TEXTURE_GREEN_SIZE 0x805D
#endif //GL_TEXTURE_GREEN_SIZE
#ifndef GL_TEXTURE_BLUE_SIZE
#define GL_TEXTURE_BLUE_SIZE 0x805E
#endif //GL_TEXTURE_BLUE_SIZE
#ifndef GL_TEXTURE_ALPHA_SIZE
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#endif //GL_TEXTURE_ALPHA_SIZE
#ifndef GL_PROXY_TEXTURE_1D
#define GL_PROXY_TEXTURE_1D 0x8063
#endif //GL_PROXY_TEXTURE_1D
#ifndef GL_PROXY_TEXTURE_2D
#define GL_PROXY_TEXTURE_2D 0x8064
#endif //GL_PROXY_TEXTURE_2D
#ifndef GL_TEXTURE_BINDING_1D
#define GL_TEXTURE_BINDING_1D 0x8068
#endif //GL_TEXTURE_BINDING_1D
#ifndef GL_TEXTURE_BINDING_2D
#define GL_TEXTURE_BINDING_2D 0x8069
#endif //GL_TEXTURE_BINDING_2D
#ifndef GL_TEXTURE_BINDING_3D
#define GL_TEXTURE_BINDING_3D 0x806A
#endif //GL_TEXTURE_BINDING_3D
#ifndef GL_PACK_SKIP_IMAGES
#define GL_PACK_SKIP_IMAGES 0x806B
#endif //GL_PACK_SKIP_IMAGES
#ifndef GL_PACK_IMAGE_HEIGHT
#define GL_PACK_IMAGE_HEIGHT 0x806C
#endif //GL_PACK_IMAGE_HEIGHT
#ifndef GL_UNPACK_SKIP_IMAGES
#define GL_UNPACK_SKIP_IMAGES 0x806D
#endif //GL_UNPACK_SKIP_IMAGES
#ifndef GL_UNPACK_IMAGE_HEIGHT
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#endif //GL_UNPACK_IMAGE_HEIGHT
#ifndef GL_TEXTURE_3D
#define GL_TEXTURE_3D 0x806F
#endif //GL_TEXTURE_3D
#ifndef GL_PROXY_TEXTURE_3D
#define GL_PROXY_TEXTURE_3D 0x8070
#endif //GL_PROXY_TEXTURE_3D
#ifndef GL_TEXTURE_DEPTH
#define GL_TEXTURE_DEPTH 0x8071
#endif //GL_TEXTURE_DEPTH
#ifndef GL_TEXTURE_WRAP_R
#define GL_TEXTURE_WRAP_R 0x8072
#endif //GL_TEXTURE_WRAP_R
#ifndef GL_MAX_3D_TEXTURE_SIZE
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#endif //GL_MAX_3D_TEXTURE_SIZE
#ifndef GL_MULTISAMPLE
#define GL_MULTISAMPLE 0x809D
#endif //GL_MULTISAMPLE
#ifndef GL_SAMPLE_ALPHA_TO_COVERAGE
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#endif //GL_SAMPLE_ALPHA_TO_COVERAGE
#ifndef GL_SAMPLE_ALPHA_TO_ONE
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#endif //GL_SAMPLE_ALPHA_TO_ONE
#ifndef GL_SAMPLE_COVERAGE
#define GL_SAMPLE_COVERAGE 0x80A0
#endif //GL_SAMPLE_COVERAGE
#ifndef GL_SAMPLE_BUFFERS
#define GL_SAMPLE_BUFFERS 0x80A8
#endif //GL_SAMPLE_BUFFERS
#ifndef GL_SAMPLES
#define GL_SAMPLES 0x80A9
#endif //GL_SAMPLES
#ifndef GL_SAMPLE_COVERAGE_VALUE
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#endif //GL_SAMPLE_COVERAGE_VALUE
#ifndef GL_SAMPLE_COVERAGE_INVERT
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#endif //GL_SAMPLE_COVERAGE_INVERT
#ifndef GL_BLEND_DST_RGB
#define GL_BLEND_DST_RGB 0x80C8
#endif //GL_BLEND_DST_RGB
#ifndef GL_BLEND_SRC_RGB
#define GL_BLEND_SRC_RGB 0x80C9
#endif //GL_BLEND_SRC_RGB
#ifndef GL_BLEND_DST_ALPHA
#define GL_BLEND_DST_ALPHA 0x80CA
#endif //GL_BLEND_DST_ALPHA
#ifndef GL_BLEND_SRC_ALPHA
#define GL_BLEND_SRC_ALPHA 0x80CB
#endif //GL_BLEND_SRC_ALPHA
#ifndef GL_BGR
#define GL_BGR 0x80E0
#endif //GL_BGR
#ifndef GL_BGRA
#define GL_BGRA 0x80E1
#endif //GL_BGRA
#ifndef GL_MAX_ELEMENTS_VERTICES
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#endif //GL_MAX_ELEMENTS_VERTICES
#ifndef GL_MAX_ELEMENTS_INDICES
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#endif //GL_MAX_ELEMENTS_INDICES
#ifndef GL_POINT_FADE_THRESHOLD_SIZE
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#endif //GL_POINT_FADE_THRESHOLD_SIZE
#ifndef GL_CLAMP_TO_BORDER
#define GL_CLAMP_TO_BORDER 0x812D
#endif //GL_CLAMP_TO_BORDER
#ifndef GL_CLAMP_TO_EDGE
#define GL_CLAMP_TO_EDGE 0x812F
#endif //GL_CLAMP_TO_EDGE
#ifndef GL_TEXTURE_MIN_LOD
#define GL_TEXTURE_MIN_LOD 0x813A
#endif //GL_TEXTURE_MIN_LOD
#ifndef GL_TEXTURE_MAX_LOD
#define GL_TEXTURE_MAX_LOD 0x813B
#endif //GL_TEXTURE_MAX_LOD
#ifndef GL_TEXTURE_BASE_LEVEL
#define GL_TEXTURE_BASE_LEVEL 0x813C
#endif //GL_TEXTURE_BASE_LEVEL
#ifndef GL_TEXTURE_MAX_LEVEL
#define GL_TEXTURE_MAX_LEVEL 0x813D
#endif //GL_TEXTURE_MAX_LEVEL
#ifndef GL_DEPTH_COMPONENT16
#define GL_DEPTH_COMPONENT16 0x81A5
#endif //GL_DEPTH_COMPONENT16
#ifndef GL_DEPTH_COMPONENT24
#define GL_DEPTH_COMPONENT24 0x81A6
#endif //GL_DEPTH_COMPONENT24
#ifndef GL_DEPTH_COMPONENT32
#define GL_DEPTH_COMPONENT32 0x81A7
#endif //GL_DEPTH_COMPONENT32
#ifndef GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#endif //GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
#ifndef GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#endif //GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#endif //GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#endif //GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#endif //GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#endif //GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#endif //GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#endif //GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
#ifndef GL_FRAMEBUFFER_DEFAULT
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#endif //GL_FRAMEBUFFER_DEFAULT
#ifndef GL_FRAMEBUFFER_UNDEFINED
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#endif //GL_FRAMEBUFFER_UNDEFINED
#ifndef GL_DEPTH_STENCIL_ATTACHMENT
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#endif //GL_DEPTH_STENCIL_ATTACHMENT
#ifndef GL_MAJOR_VERSION
#define GL_MAJOR_VERSION 0x821B
#endif //GL_MAJOR_VERSION
#ifndef GL_MINOR_VERSION
#define GL_MINOR_VERSION 0x821C
#endif //GL_MINOR_VERSION
#ifndef GL_NUM_EXTENSIONS
#define GL_NUM_EXTENSIONS 0x821D
#endif //GL_NUM_EXTENSIONS
#ifndef GL_CONTEXT_FLAGS
#define GL_CONTEXT_FLAGS 0x821E
#endif //GL_CONTEXT_FLAGS
#ifndef GL_COMPRESSED_RED
#define GL_COMPRESSED_RED 0x8225
#endif //GL_COMPRESSED_RED
#ifndef GL_COMPRESSED_RG
#define GL_COMPRESSED_RG 0x8226
#endif //GL_COMPRESSED_RG
#ifndef GL_RG
#define GL_RG 0x8227
#endif //GL_RG
#ifndef GL_RG_INTEGER
#define GL_RG_INTEGER 0x8228
#endif //GL_RG_INTEGER
#ifndef GL_R8
#define GL_R8 0x8229
#endif //GL_R8
#ifndef GL_R16
#define GL_R16 0x822A
#endif //GL_R16
#ifndef GL_RG8
#define GL_RG8 0x822B
#endif //GL_RG8
#ifndef GL_RG16
#define GL_RG16 0x822C
#endif //GL_RG16
#ifndef GL_R16F
#define GL_R16F 0x822D
#endif //GL_R16F
#ifndef GL_R32F
#define GL_R32F 0x822E
#endif //GL_R32F
#ifndef GL_RG16F
#define GL_RG16F 0x822F
#endif //GL_RG16F
#ifndef GL_RG32F
#define GL_RG32F 0x8230
#endif //GL_RG32F
#ifndef GL_R8I
#define GL_R8I 0x8231
#endif //GL_R8I
#ifndef GL_R8UI
#define GL_R8UI 0x8232
#endif //GL_R8UI
#ifndef GL_R16I
#define GL_R16I 0x8233
#endif //GL_R16I
#ifndef GL_R16UI
#define GL_R16UI 0x8234
#endif //GL_R16UI
#ifndef GL_R32I
#define GL_R32I 0x8235
#endif //GL_R32I
#ifndef GL_R32UI
#define GL_R32UI 0x8236
#endif //GL_R32UI
#ifndef GL_RG8I
#define GL_RG8I 0x8237
#endif //GL_RG8I
#ifndef GL_RG8UI
#define GL_RG8UI 0x8238
#endif //GL_RG8UI
#ifndef GL_RG16I
#define GL_RG16I 0x8239
#endif //GL_RG16I
#ifndef GL_RG16UI
#define GL_RG16UI 0x823A
#endif //GL_RG16UI
#ifndef GL_RG32I
#define GL_RG32I 0x823B
#endif //GL_RG32I
#ifndef GL_RG32UI
#define GL_RG32UI 0x823C
#endif //GL_RG32UI
#ifndef GL_UNSIGNED_BYTE_2_3_3_REV
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#endif //GL_UNSIGNED_BYTE_2_3_3_REV
#ifndef GL_UNSIGNED_SHORT_5_6_5
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#endif //GL_UNSIGNED_SHORT_5_6_5
#ifndef GL_UNSIGNED_SHORT_5_6_5_REV
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#endif //GL_UNSIGNED_SHORT_5_6_5_REV
#ifndef GL_UNSIGNED_SHORT_4_4_4_4_REV
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#endif //GL_UNSIGNED_SHORT_4_4_4_4_REV
#ifndef GL_UNSIGNED_SHORT_1_5_5_5_REV
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#endif //GL_UNSIGNED_SHORT_1_5_5_5_REV
#ifndef GL_UNSIGNED_INT_8_8_8_8_REV
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#endif //GL_UNSIGNED_INT_8_8_8_8_REV
#ifndef GL_UNSIGNED_INT_2_10_10_10_REV
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#endif //GL_UNSIGNED_INT_2_10_10_10_REV
#ifndef GL_MIRRORED_REPEAT
#define GL_MIRRORED_REPEAT 0x8370
#endif //GL_MIRRORED_REPEAT
#ifndef GL_ALIASED_LINE_WIDTH_RANGE
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#endif //GL_ALIASED_LINE_WIDTH_RANGE
#ifndef GL_TEXTURE0
#define GL_TEXTURE0 0x84C0
#endif //GL_TEXTURE0
#ifndef GL_TEXTURE1
#define GL_TEXTURE1 0x84C1
#endif //GL_TEXTURE1
#ifndef GL_TEXTURE2
#define GL_TEXTURE2 0x84C2
#endif //GL_TEXTURE2
#ifndef GL_TEXTURE3
#define GL_TEXTURE3 0x84C3
#endif //GL_TEXTURE3
#ifndef GL_TEXTURE4
#define GL_TEXTURE4 0x84C4
#endif //GL_TEXTURE4
#ifndef GL_TEXTURE5
#define GL_TEXTURE5 0x84C5
#endif //GL_TEXTURE5
#ifndef GL_TEXTURE6
#define GL_TEXTURE6 0x84C6
#endif //GL_TEXTURE6
#ifndef GL_TEXTURE7
#define GL_TEXTURE7 0x84C7
#endif //GL_TEXTURE7
#ifndef GL_TEXTURE8
#define GL_TEXTURE8 0x84C8
#endif //GL_TEXTURE8
#ifndef GL_TEXTURE9
#define GL_TEXTURE9 0x84C9
#endif //GL_TEXTURE9
#ifndef GL_TEXTURE10
#define GL_TEXTURE10 0x84CA
#endif //GL_TEXTURE10
#ifndef GL_TEXTURE11
#define GL_TEXTURE11 0x84CB
#endif //GL_TEXTURE11
#ifndef GL_TEXTURE12
#define GL_TEXTURE12 0x84CC
#endif //GL_TEXTURE12
#ifndef GL_TEXTURE13
#define GL_TEXTURE13 0x84CD
#endif //GL_TEXTURE13
#ifndef GL_TEXTURE14
#define GL_TEXTURE14 0x84CE
#endif //GL_TEXTURE14
#ifndef GL_TEXTURE15
#define GL_TEXTURE15 0x84CF
#endif //GL_TEXTURE15
#ifndef GL_TEXTURE16
#define GL_TEXTURE16 0x84D0
#endif //GL_TEXTURE16
#ifndef GL_TEXTURE17
#define GL_TEXTURE17 0x84D1
#endif //GL_TEXTURE17
#ifndef GL_TEXTURE18
#define GL_TEXTURE18 0x84D2
#endif //GL_TEXTURE18
#ifndef GL_TEXTURE19
#define GL_TEXTURE19 0x84D3
#endif //GL_TEXTURE19
#ifndef GL_TEXTURE20
#define GL_TEXTURE20 0x84D4
#endif //GL_TEXTURE20
#ifndef GL_TEXTURE21
#define GL_TEXTURE21 0x84D5
#endif //GL_TEXTURE21
#ifndef GL_TEXTURE22
#define GL_TEXTURE22 0x84D6
#endif //GL_TEXTURE22
#ifndef GL_TEXTURE23
#define GL_TEXTURE23 0x84D7
#endif //GL_TEXTURE23
#ifndef GL_TEXTURE24
#define GL_TEXTURE24 0x84D8
#endif //GL_TEXTURE24
#ifndef GL_TEXTURE25
#define GL_TEXTURE25 0x84D9
#endif //GL_TEXTURE25
#ifndef GL_TEXTURE26
#define GL_TEXTURE26 0x84DA
#endif //GL_TEXTURE26
#ifndef GL_TEXTURE27
#define GL_TEXTURE27 0x84DB
#endif //GL_TEXTURE27
#ifndef GL_TEXTURE28
#define GL_TEXTURE28 0x84DC
#endif //GL_TEXTURE28
#ifndef GL_TEXTURE29
#define GL_TEXTURE29 0x84DD
#endif //GL_TEXTURE29
#ifndef GL_TEXTURE30
#define GL_TEXTURE30 0x84DE
#endif //GL_TEXTURE30
#ifndef GL_TEXTURE31
#define GL_TEXTURE31 0x84DF
#endif //GL_TEXTURE31
#ifndef GL_ACTIVE_TEXTURE
#define GL_ACTIVE_TEXTURE 0x84E0
#endif //GL_ACTIVE_TEXTURE
#ifndef GL_MAX_RENDERBUFFER_SIZE
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#endif //GL_MAX_RENDERBUFFER_SIZE
#ifndef GL_COMPRESSED_RGB
#define GL_COMPRESSED_RGB 0x84ED
#endif //GL_COMPRESSED_RGB
#ifndef GL_COMPRESSED_RGBA
#define GL_COMPRESSED_RGBA 0x84EE
#endif //GL_COMPRESSED_RGBA
#ifndef GL_TEXTURE_COMPRESSION_HINT
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#endif //GL_TEXTURE_COMPRESSION_HINT
#ifndef GL_TEXTURE_RECTANGLE
#define GL_TEXTURE_RECTANGLE 0x84F5
#endif //GL_TEXTURE_RECTANGLE
#ifndef GL_TEXTURE_BINDING_RECTANGLE
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#endif //GL_TEXTURE_BINDING_RECTANGLE
#ifndef GL_PROXY_TEXTURE_RECTANGLE
#define GL_PROXY_TEXTURE_RECTANGLE 0x84F7
#endif //GL_PROXY_TEXTURE_RECTANGLE
#ifndef GL_MAX_RECTANGLE_TEXTURE_SIZE
#define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8
#endif //GL_MAX_RECTANGLE_TEXTURE_SIZE
#ifndef GL_DEPTH_STENCIL
#define GL_DEPTH_STENCIL 0x84F9
#endif //GL_DEPTH_STENCIL
#ifndef GL_UNSIGNED_INT_24_8
#define GL_UNSIGNED_INT_24_8 0x84FA
#endif //GL_UNSIGNED_INT_24_8
#ifndef GL_MAX_TEXTURE_LOD_BIAS
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#endif //GL_MAX_TEXTURE_LOD_BIAS
#ifndef GL_TEXTURE_LOD_BIAS
#define GL_TEXTURE_LOD_BIAS 0x8501
#endif //GL_TEXTURE_LOD_BIAS
#ifndef GL_INCR_WRAP
#define GL_INCR_WRAP 0x8507
#endif //GL_INCR_WRAP
#ifndef GL_DECR_WRAP
#define GL_DECR_WRAP 0x8508
#endif //GL_DECR_WRAP
#ifndef GL_TEXTURE_CUBE_MAP
#define GL_TEXTURE_CUBE_MAP 0x8513
#endif //GL_TEXTURE_CUBE_MAP
#ifndef GL_TEXTURE_BINDING_CUBE_MAP
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#endif //GL_TEXTURE_BINDING_CUBE_MAP
#ifndef GL_TEXTURE_CUBE_MAP_POSITIVE_X
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#endif //GL_TEXTURE_CUBE_MAP_POSITIVE_X
#ifndef GL_TEXTURE_CUBE_MAP_NEGATIVE_X
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#endif //GL_TEXTURE_CUBE_MAP_NEGATIVE_X
#ifndef GL_TEXTURE_CUBE_MAP_POSITIVE_Y
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#endif //GL_TEXTURE_CUBE_MAP_POSITIVE_Y
#ifndef GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#endif //GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
#ifndef GL_TEXTURE_CUBE_MAP_POSITIVE_Z
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#endif //GL_TEXTURE_CUBE_MAP_POSITIVE_Z
#ifndef GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#endif //GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
#ifndef GL_PROXY_TEXTURE_CUBE_MAP
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#endif //GL_PROXY_TEXTURE_CUBE_MAP
#ifndef GL_MAX_CUBE_MAP_TEXTURE_SIZE
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#endif //GL_MAX_CUBE_MAP_TEXTURE_SIZE
#ifndef GL_SRC1_ALPHA
#define GL_SRC1_ALPHA 0x8589
#endif //GL_SRC1_ALPHA
#ifndef GL_VERTEX_ARRAY_BINDING
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#endif //GL_VERTEX_ARRAY_BINDING
#ifndef GL_VERTEX_ATTRIB_ARRAY_ENABLED
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#endif //GL_VERTEX_ATTRIB_ARRAY_ENABLED
#ifndef GL_VERTEX_ATTRIB_ARRAY_SIZE
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#endif //GL_VERTEX_ATTRIB_ARRAY_SIZE
#ifndef GL_VERTEX_ATTRIB_ARRAY_STRIDE
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#endif //GL_VERTEX_ATTRIB_ARRAY_STRIDE
#ifndef GL_VERTEX_ATTRIB_ARRAY_TYPE
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#endif //GL_VERTEX_ATTRIB_ARRAY_TYPE
#ifndef GL_CURRENT_VERTEX_ATTRIB
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#endif //GL_CURRENT_VERTEX_ATTRIB
#ifndef GL_VERTEX_PROGRAM_POINT_SIZE
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#endif //GL_VERTEX_PROGRAM_POINT_SIZE
#ifndef GL_PROGRAM_POINT_SIZE
#define GL_PROGRAM_POINT_SIZE 0x8642
#endif //GL_PROGRAM_POINT_SIZE
#ifndef GL_VERTEX_ATTRIB_ARRAY_POINTER
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#endif //GL_VERTEX_ATTRIB_ARRAY_POINTER
#ifndef GL_DEPTH_CLAMP
#define GL_DEPTH_CLAMP 0x864F
#endif //GL_DEPTH_CLAMP
#ifndef GL_TEXTURE_COMPRESSED_IMAGE_SIZE
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#endif //GL_TEXTURE_COMPRESSED_IMAGE_SIZE
#ifndef GL_TEXTURE_COMPRESSED
#define GL_TEXTURE_COMPRESSED 0x86A1
#endif //GL_TEXTURE_COMPRESSED
#ifndef GL_NUM_COMPRESSED_TEXTURE_FORMATS
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#endif //GL_NUM_COMPRESSED_TEXTURE_FORMATS
#ifndef GL_COMPRESSED_TEXTURE_FORMATS
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#endif //GL_COMPRESSED_TEXTURE_FORMATS
#ifndef GL_BUFFER_SIZE
#define GL_BUFFER_SIZE 0x8764
#endif //GL_BUFFER_SIZE
#ifndef GL_BUFFER_USAGE
#define GL_BUFFER_USAGE 0x8765
#endif //GL_BUFFER_USAGE
#ifndef GL_STENCIL_BACK_FUNC
#define GL_STENCIL_BACK_FUNC 0x8800
#endif //GL_STENCIL_BACK_FUNC
#ifndef GL_STENCIL_BACK_FAIL
#define GL_STENCIL_BACK_FAIL 0x8801
#endif //GL_STENCIL_BACK_FAIL
#ifndef GL_STENCIL_BACK_PASS_DEPTH_FAIL
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#endif //GL_STENCIL_BACK_PASS_DEPTH_FAIL
#ifndef GL_STENCIL_BACK_PASS_DEPTH_PASS
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#endif //GL_STENCIL_BACK_PASS_DEPTH_PASS
#ifndef GL_RGBA32F
#define GL_RGBA32F 0x8814
#endif //GL_RGBA32F
#ifndef GL_RGB32F
#define GL_RGB32F 0x8815
#endif //GL_RGB32F
#ifndef GL_RGBA16F
#define GL_RGBA16F 0x881A
#endif //GL_RGBA16F
#ifndef GL_RGB16F
#define GL_RGB16F 0x881B
#endif //GL_RGB16F
#ifndef GL_MAX_DRAW_BUFFERS
#define GL_MAX_DRAW_BUFFERS 0x8824
#endif //GL_MAX_DRAW_BUFFERS
#ifndef GL_DRAW_BUFFER0
#define GL_DRAW_BUFFER0 0x8825
#endif //GL_DRAW_BUFFER0
#ifndef GL_DRAW_BUFFER1
#define GL_DRAW_BUFFER1 0x8826
#endif //GL_DRAW_BUFFER1
#ifndef GL_DRAW_BUFFER2
#define GL_DRAW_BUFFER2 0x8827
#endif //GL_DRAW_BUFFER2
#ifndef GL_DRAW_BUFFER3
#define GL_DRAW_BUFFER3 0x8828
#endif //GL_DRAW_BUFFER3
#ifndef GL_DRAW_BUFFER4
#define GL_DRAW_BUFFER4 0x8829
#endif //GL_DRAW_BUFFER4
#ifndef GL_DRAW_BUFFER5
#define GL_DRAW_BUFFER5 0x882A
#endif //GL_DRAW_BUFFER5
#ifndef GL_DRAW_BUFFER6
#define GL_DRAW_BUFFER6 0x882B
#endif //GL_DRAW_BUFFER6
#ifndef GL_DRAW_BUFFER7
#define GL_DRAW_BUFFER7 0x882C
#endif //GL_DRAW_BUFFER7
#ifndef GL_DRAW_BUFFER8
#define GL_DRAW_BUFFER8 0x882D
#endif //GL_DRAW_BUFFER8
#ifndef GL_DRAW_BUFFER9
#define GL_DRAW_BUFFER9 0x882E
#endif //GL_DRAW_BUFFER9
#ifndef GL_DRAW_BUFFER10
#define GL_DRAW_BUFFER10 0x882F
#endif //GL_DRAW_BUFFER10
#ifndef GL_DRAW_BUFFER11
#define GL_DRAW_BUFFER11 0x8830
#endif //GL_DRAW_BUFFER11
#ifndef GL_DRAW_BUFFER12
#define GL_DRAW_BUFFER12 0x8831
#endif //GL_DRAW_BUFFER12
#ifndef GL_DRAW_BUFFER13
#define GL_DRAW_BUFFER13 0x8832
#endif //GL_DRAW_BUFFER13
#ifndef GL_DRAW_BUFFER14
#define GL_DRAW_BUFFER14 0x8833
#endif //GL_DRAW_BUFFER14
#ifndef GL_DRAW_BUFFER15
#define GL_DRAW_BUFFER15 0x8834
#endif //GL_DRAW_BUFFER15
#ifndef GL_BLEND_EQUATION_ALPHA
#define GL_BLEND_EQUATION_ALPHA 0x883D
#endif //GL_BLEND_EQUATION_ALPHA
#ifndef GL_TEXTURE_DEPTH_SIZE
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#endif //GL_TEXTURE_DEPTH_SIZE
#ifndef GL_TEXTURE_COMPARE_MODE
#define GL_TEXTURE_COMPARE_MODE 0x884C
#endif //GL_TEXTURE_COMPARE_MODE
#ifndef GL_TEXTURE_COMPARE_FUNC
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#endif //GL_TEXTURE_COMPARE_FUNC
#ifndef GL_COMPARE_REF_TO_TEXTURE
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#endif //GL_COMPARE_REF_TO_TEXTURE
#ifndef GL_TEXTURE_CUBE_MAP_SEAMLESS
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#endif //GL_TEXTURE_CUBE_MAP_SEAMLESS
#ifndef GL_QUERY_COUNTER_BITS
#define GL_QUERY_COUNTER_BITS 0x8864
#endif //GL_QUERY_COUNTER_BITS
#ifndef GL_CURRENT_QUERY
#define GL_CURRENT_QUERY 0x8865
#endif //GL_CURRENT_QUERY
#ifndef GL_QUERY_RESULT
#define GL_QUERY_RESULT 0x8866
#endif //GL_QUERY_RESULT
#ifndef GL_QUERY_RESULT_AVAILABLE
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#endif //GL_QUERY_RESULT_AVAILABLE
#ifndef GL_MAX_VERTEX_ATTRIBS
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#endif //GL_MAX_VERTEX_ATTRIBS
#ifndef GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#endif //GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
#ifndef GL_MAX_TEXTURE_IMAGE_UNITS
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#endif //GL_MAX_TEXTURE_IMAGE_UNITS
#ifndef GL_ARRAY_BUFFER
#define GL_ARRAY_BUFFER 0x8892
#endif //GL_ARRAY_BUFFER
#ifndef GL_ELEMENT_ARRAY_BUFFER
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#endif //GL_ELEMENT_ARRAY_BUFFER
#ifndef GL_ARRAY_BUFFER_BINDING
#define GL_ARRAY_BUFFER_BINDING 0x8894
#endif //GL_ARRAY_BUFFER_BINDING
#ifndef GL_ELEMENT_ARRAY_BUFFER_BINDING
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#endif //GL_ELEMENT_ARRAY_BUFFER_BINDING
#ifndef GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#endif //GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
#ifndef GL_READ_ONLY
#define GL_READ_ONLY 0x88B8
#endif //GL_READ_ONLY
#ifndef GL_WRITE_ONLY
#define GL_WRITE_ONLY 0x88B9
#endif //GL_WRITE_ONLY
#ifndef GL_READ_WRITE
#define GL_READ_WRITE 0x88BA
#endif //GL_READ_WRITE
#ifndef GL_BUFFER_ACCESS
#define GL_BUFFER_ACCESS 0x88BB
#endif //GL_BUFFER_ACCESS
#ifndef GL_BUFFER_MAPPED
#define GL_BUFFER_MAPPED 0x88BC
#endif //GL_BUFFER_MAPPED
#ifndef GL_BUFFER_MAP_POINTER
#define GL_BUFFER_MAP_POINTER 0x88BD
#endif //GL_BUFFER_MAP_POINTER
#ifndef GL_STREAM_DRAW
#define GL_STREAM_DRAW 0x88E0
#endif //GL_STREAM_DRAW
#ifndef GL_STREAM_READ
#define GL_STREAM_READ 0x88E1
#endif //GL_STREAM_READ
#ifndef GL_STREAM_COPY
#define GL_STREAM_COPY 0x88E2
#endif //GL_STREAM_COPY
#ifndef GL_STATIC_DRAW
#define GL_STATIC_DRAW 0x88E4
#endif //GL_STATIC_DRAW
#ifndef GL_STATIC_READ
#define GL_STATIC_READ 0x88E5
#endif //GL_STATIC_READ
#ifndef GL_STATIC_COPY
#define GL_STATIC_COPY 0x88E6
#endif //GL_STATIC_COPY
#ifndef GL_DYNAMIC_DRAW
#define GL_DYNAMIC_DRAW 0x88E8
#endif //GL_DYNAMIC_DRAW
#ifndef GL_DYNAMIC_READ
#define GL_DYNAMIC_READ 0x88E9
#endif //GL_DYNAMIC_READ
#ifndef GL_DYNAMIC_COPY
#define GL_DYNAMIC_COPY 0x88EA
#endif //GL_DYNAMIC_COPY
#ifndef GL_PIXEL_PACK_BUFFER
#define GL_PIXEL_PACK_BUFFER 0x88EB
#endif //GL_PIXEL_PACK_BUFFER
#ifndef GL_PIXEL_UNPACK_BUFFER
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#endif //GL_PIXEL_UNPACK_BUFFER
#ifndef GL_PIXEL_PACK_BUFFER_BINDING
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#endif //GL_PIXEL_PACK_BUFFER_BINDING
#ifndef GL_PIXEL_UNPACK_BUFFER_BINDING
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#endif //GL_PIXEL_UNPACK_BUFFER_BINDING
#ifndef GL_DEPTH24_STENCIL8
#define GL_DEPTH24_STENCIL8 0x88F0
#endif //GL_DEPTH24_STENCIL8
#ifndef GL_TEXTURE_STENCIL_SIZE
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#endif //GL_TEXTURE_STENCIL_SIZE
#ifndef GL_VERTEX_ATTRIB_ARRAY_INTEGER
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#endif //GL_VERTEX_ATTRIB_ARRAY_INTEGER
#ifndef GL_MAX_ARRAY_TEXTURE_LAYERS
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#endif //GL_MAX_ARRAY_TEXTURE_LAYERS
#ifndef GL_MIN_PROGRAM_TEXEL_OFFSET
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#endif //GL_MIN_PROGRAM_TEXEL_OFFSET
#ifndef GL_MAX_PROGRAM_TEXEL_OFFSET
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#endif //GL_MAX_PROGRAM_TEXEL_OFFSET
#ifndef GL_SAMPLES_PASSED
#define GL_SAMPLES_PASSED 0x8914
#endif //GL_SAMPLES_PASSED
#ifndef GL_GEOMETRY_VERTICES_OUT
#define GL_GEOMETRY_VERTICES_OUT 0x8916
#endif //GL_GEOMETRY_VERTICES_OUT
#ifndef GL_GEOMETRY_INPUT_TYPE
#define GL_GEOMETRY_INPUT_TYPE 0x8917
#endif //GL_GEOMETRY_INPUT_TYPE
#ifndef GL_GEOMETRY_OUTPUT_TYPE
#define GL_GEOMETRY_OUTPUT_TYPE 0x8918
#endif //GL_GEOMETRY_OUTPUT_TYPE
#ifndef GL_CLAMP_READ_COLOR
#define GL_CLAMP_READ_COLOR 0x891C
#endif //GL_CLAMP_READ_COLOR
#ifndef GL_FIXED_ONLY
#define GL_FIXED_ONLY 0x891D
#endif //GL_FIXED_ONLY
#ifndef GL_UNIFORM_BUFFER
#define GL_UNIFORM_BUFFER 0x8A11
#endif //GL_UNIFORM_BUFFER
#ifndef GL_UNIFORM_BUFFER_BINDING
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#endif //GL_UNIFORM_BUFFER_BINDING
#ifndef GL_UNIFORM_BUFFER_START
#define GL_UNIFORM_BUFFER_START 0x8A29
#endif //GL_UNIFORM_BUFFER_START
#ifndef GL_UNIFORM_BUFFER_SIZE
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#endif //GL_UNIFORM_BUFFER_SIZE
#ifndef GL_MAX_VERTEX_UNIFORM_BLOCKS
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#endif //GL_MAX_VERTEX_UNIFORM_BLOCKS
#ifndef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#endif //GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#ifndef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#endif //GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#ifndef GL_MAX_COMBINED_UNIFORM_BLOCKS
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#endif //GL_MAX_COMBINED_UNIFORM_BLOCKS
#ifndef GL_MAX_UNIFORM_BUFFER_BINDINGS
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#endif //GL_MAX_UNIFORM_BUFFER_BINDINGS
#ifndef GL_MAX_UNIFORM_BLOCK_SIZE
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#endif //GL_MAX_UNIFORM_BLOCK_SIZE
#ifndef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#endif //GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#ifndef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#endif //GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#ifndef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#endif //GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#ifndef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#endif //GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#ifndef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#endif //GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#ifndef GL_ACTIVE_UNIFORM_BLOCKS
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#endif //GL_ACTIVE_UNIFORM_BLOCKS
#ifndef GL_UNIFORM_TYPE
#define GL_UNIFORM_TYPE 0x8A37
#endif //GL_UNIFORM_TYPE
#ifndef GL_UNIFORM_SIZE
#define GL_UNIFORM_SIZE 0x8A38
#endif //GL_UNIFORM_SIZE
#ifndef GL_UNIFORM_NAME_LENGTH
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif //GL_UNIFORM_NAME_LENGTH
#ifndef GL_UNIFORM_BLOCK_INDEX
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#endif //GL_UNIFORM_BLOCK_INDEX
#ifndef GL_UNIFORM_OFFSET
#define GL_UNIFORM_OFFSET 0x8A3B
#endif //GL_UNIFORM_OFFSET
#ifndef GL_UNIFORM_ARRAY_STRIDE
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#endif //GL_UNIFORM_ARRAY_STRIDE
#ifndef GL_UNIFORM_MATRIX_STRIDE
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#endif //GL_UNIFORM_MATRIX_STRIDE
#ifndef GL_UNIFORM_IS_ROW_MAJOR
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#endif //GL_UNIFORM_IS_ROW_MAJOR
#ifndef GL_UNIFORM_BLOCK_BINDING
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#endif //GL_UNIFORM_BLOCK_BINDING
#ifndef GL_UNIFORM_BLOCK_DATA_SIZE
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#endif //GL_UNIFORM_BLOCK_DATA_SIZE
#ifndef GL_UNIFORM_BLOCK_NAME_LENGTH
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#endif //GL_UNIFORM_BLOCK_NAME_LENGTH
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#endif //GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#endif //GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#endif //GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#endif //GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#endif //GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#ifndef GL_FRAGMENT_SHADER
#define GL_FRAGMENT_SHADER 0x8B30
#endif //GL_FRAGMENT_SHADER
#ifndef GL_VERTEX_SHADER
#define GL_VERTEX_SHADER 0x8B31
#endif //GL_VERTEX_SHADER
#ifndef GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#endif //GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
#ifndef GL_MAX_VERTEX_UNIFORM_COMPONENTS
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#endif //GL_MAX_VERTEX_UNIFORM_COMPONENTS
#ifndef GL_MAX_VARYING_COMPONENTS
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#endif //GL_MAX_VARYING_COMPONENTS
#ifndef GL_MAX_VARYING_FLOATS
#define GL_MAX_VARYING_FLOATS 0x8B4B
#endif //GL_MAX_VARYING_FLOATS
#ifndef GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#endif //GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
#ifndef GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#endif //GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
#ifndef GL_SHADER_TYPE
#define GL_SHADER_TYPE 0x8B4F
#endif //GL_SHADER_TYPE
#ifndef GL_FLOAT_VEC2
#define GL_FLOAT_VEC2 0x8B50
#endif //GL_FLOAT_VEC2
#ifndef GL_FLOAT_VEC3
#define GL_FLOAT_VEC3 0x8B51
#endif //GL_FLOAT_VEC3
#ifndef GL_FLOAT_VEC4
#define GL_FLOAT_VEC4 0x8B52
#endif //GL_FLOAT_VEC4
#ifndef GL_INT_VEC2
#define GL_INT_VEC2 0x8B53
#endif //GL_INT_VEC2
#ifndef GL_INT_VEC3
#define GL_INT_VEC3 0x8B54
#endif //GL_INT_VEC3
#ifndef GL_INT_VEC4
#define GL_INT_VEC4 0x8B55
#endif //GL_INT_VEC4
#ifndef GL_BOOL
#define GL_BOOL 0x8B56
#endif //GL_BOOL
#ifndef GL_BOOL_VEC2
#define GL_BOOL_VEC2 0x8B57
#endif //GL_BOOL_VEC2
#ifndef GL_BOOL_VEC3
#define GL_BOOL_VEC3 0x8B58
#endif //GL_BOOL_VEC3
#ifndef GL_BOOL_VEC4
#define GL_BOOL_VEC4 0x8B59
#endif //GL_BOOL_VEC4
#ifndef GL_FLOAT_MAT2
#define GL_FLOAT_MAT2 0x8B5A
#endif //GL_FLOAT_MAT2
#ifndef GL_FLOAT_MAT3
#define GL_FLOAT_MAT3 0x8B5B
#endif //GL_FLOAT_MAT3
#ifndef GL_FLOAT_MAT4
#define GL_FLOAT_MAT4 0x8B5C
#endif //GL_FLOAT_MAT4
#ifndef GL_SAMPLER_1D
#define GL_SAMPLER_1D 0x8B5D
#endif //GL_SAMPLER_1D
#ifndef GL_SAMPLER_2D
#define GL_SAMPLER_2D 0x8B5E
#endif //GL_SAMPLER_2D
#ifndef GL_SAMPLER_3D
#define GL_SAMPLER_3D 0x8B5F
#endif //GL_SAMPLER_3D
#ifndef GL_SAMPLER_CUBE
#define GL_SAMPLER_CUBE 0x8B60
#endif //GL_SAMPLER_CUBE
#ifndef GL_SAMPLER_1D_SHADOW
#define GL_SAMPLER_1D_SHADOW 0x8B61
#endif //GL_SAMPLER_1D_SHADOW
#ifndef GL_SAMPLER_2D_SHADOW
#define GL_SAMPLER_2D_SHADOW 0x8B62
#endif //GL_SAMPLER_2D_SHADOW
#ifndef GL_SAMPLER_2D_RECT
#define GL_SAMPLER_2D_RECT 0x8B63
#endif //GL_SAMPLER_2D_RECT
#ifndef GL_SAMPLER_2D_RECT_SHADOW
#define GL_SAMPLER_2D_RECT_SHADOW 0x8B64
#endif //GL_SAMPLER_2D_RECT_SHADOW
#ifndef GL_FLOAT_MAT2x3
#define GL_FLOAT_MAT2x3 0x8B65
#endif //GL_FLOAT_MAT2x3
#ifndef GL_FLOAT_MAT2x4
#define GL_FLOAT_MAT2x4 0x8B66
#endif //GL_FLOAT_MAT2x4
#ifndef GL_FLOAT_MAT3x2
#define GL_FLOAT_MAT3x2 0x8B67
#endif //GL_FLOAT_MAT3x2
#ifndef GL_FLOAT_MAT3x4
#define GL_FLOAT_MAT3x4 0x8B68
#endif //GL_FLOAT_MAT3x4
#ifndef GL_FLOAT_MAT4x2
#define GL_FLOAT_MAT4x2 0x8B69
#endif //GL_FLOAT_MAT4x2
#ifndef GL_FLOAT_MAT4x3
#define GL_FLOAT_MAT4x3 0x8B6A
#endif //GL_FLOAT_MAT4x3
#ifndef GL_DELETE_STATUS
#define GL_DELETE_STATUS 0x8B80
#endif //GL_DELETE_STATUS
#ifndef GL_COMPILE_STATUS
#define GL_COMPILE_STATUS 0x8B81
#endif //GL_COMPILE_STATUS
#ifndef GL_LINK_STATUS
#define GL_LINK_STATUS 0x8B82
#endif //GL_LINK_STATUS
#ifndef GL_VALIDATE_STATUS
#define GL_VALIDATE_STATUS 0x8B83
#endif //GL_VALIDATE_STATUS
#ifndef GL_INFO_LOG_LENGTH
#define GL_INFO_LOG_LENGTH 0x8B84
#endif //GL_INFO_LOG_LENGTH
#ifndef GL_ATTACHED_SHADERS
#define GL_ATTACHED_SHADERS 0x8B85
#endif //GL_ATTACHED_SHADERS
#ifndef GL_ACTIVE_UNIFORMS
#define GL_ACTIVE_UNIFORMS 0x8B86
#endif //GL_ACTIVE_UNIFORMS
#ifndef GL_ACTIVE_UNIFORM_MAX_LENGTH
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#endif //GL_ACTIVE_UNIFORM_MAX_LENGTH
#ifndef GL_SHADER_SOURCE_LENGTH
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#endif //GL_SHADER_SOURCE_LENGTH
#ifndef GL_ACTIVE_ATTRIBUTES
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#endif //GL_ACTIVE_ATTRIBUTES
#ifndef GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#endif //GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
#ifndef GL_FRAGMENT_SHADER_DERIVATIVE_HINT
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#endif //GL_FRAGMENT_SHADER_DERIVATIVE_HINT
#ifndef GL_SHADING_LANGUAGE_VERSION
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#endif //GL_SHADING_LANGUAGE_VERSION
#ifndef GL_CURRENT_PROGRAM
#define GL_CURRENT_PROGRAM 0x8B8D
#endif //GL_CURRENT_PROGRAM
#ifndef GL_TEXTURE_RED_TYPE
#define GL_TEXTURE_RED_TYPE 0x8C10
#endif //GL_TEXTURE_RED_TYPE
#ifndef GL_TEXTURE_GREEN_TYPE
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#endif //GL_TEXTURE_GREEN_TYPE
#ifndef GL_TEXTURE_BLUE_TYPE
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#endif //GL_TEXTURE_BLUE_TYPE
#ifndef GL_TEXTURE_ALPHA_TYPE
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#endif //GL_TEXTURE_ALPHA_TYPE
#ifndef GL_TEXTURE_DEPTH_TYPE
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#endif //GL_TEXTURE_DEPTH_TYPE
#ifndef GL_UNSIGNED_NORMALIZED
#define GL_UNSIGNED_NORMALIZED 0x8C17
#endif //GL_UNSIGNED_NORMALIZED
#ifndef GL_TEXTURE_1D_ARRAY
#define GL_TEXTURE_1D_ARRAY 0x8C18
#endif //GL_TEXTURE_1D_ARRAY
#ifndef GL_PROXY_TEXTURE_1D_ARRAY
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#endif //GL_PROXY_TEXTURE_1D_ARRAY
#ifndef GL_TEXTURE_2D_ARRAY
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#endif //GL_TEXTURE_2D_ARRAY
#ifndef GL_PROXY_TEXTURE_2D_ARRAY
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#endif //GL_PROXY_TEXTURE_2D_ARRAY
#ifndef GL_TEXTURE_BINDING_1D_ARRAY
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#endif //GL_TEXTURE_BINDING_1D_ARRAY
#ifndef GL_TEXTURE_BINDING_2D_ARRAY
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#endif //GL_TEXTURE_BINDING_2D_ARRAY
#ifndef GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#endif //GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
#ifndef GL_TEXTURE_BUFFER
#define GL_TEXTURE_BUFFER 0x8C2A
#endif //GL_TEXTURE_BUFFER
#ifndef GL_MAX_TEXTURE_BUFFER_SIZE
#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
#endif //GL_MAX_TEXTURE_BUFFER_SIZE
#ifndef GL_TEXTURE_BINDING_BUFFER
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#endif //GL_TEXTURE_BINDING_BUFFER
#ifndef GL_TEXTURE_BUFFER_DATA_STORE_BINDING
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#endif //GL_TEXTURE_BUFFER_DATA_STORE_BINDING
#ifndef GL_R11F_G11F_B10F
#define GL_R11F_G11F_B10F 0x8C3A
#endif //GL_R11F_G11F_B10F
#ifndef GL_UNSIGNED_INT_10F_11F_11F_REV
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#endif //GL_UNSIGNED_INT_10F_11F_11F_REV
#ifndef GL_RGB9_E5
#define GL_RGB9_E5 0x8C3D
#endif //GL_RGB9_E5
#ifndef GL_UNSIGNED_INT_5_9_9_9_REV
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#endif //GL_UNSIGNED_INT_5_9_9_9_REV
#ifndef GL_TEXTURE_SHARED_SIZE
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#endif //GL_TEXTURE_SHARED_SIZE
#ifndef GL_SRGB
#define GL_SRGB 0x8C40
#endif //GL_SRGB
#ifndef GL_SRGB8
#define GL_SRGB8 0x8C41
#endif //GL_SRGB8
#ifndef GL_SRGB_ALPHA
#define GL_SRGB_ALPHA 0x8C42
#endif //GL_SRGB_ALPHA
#ifndef GL_SRGB8_ALPHA8
#define GL_SRGB8_ALPHA8 0x8C43
#endif //GL_SRGB8_ALPHA8
#ifndef GL_COMPRESSED_SRGB
#define GL_COMPRESSED_SRGB 0x8C48
#endif //GL_COMPRESSED_SRGB
#ifndef GL_COMPRESSED_SRGB_ALPHA
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
#endif //GL_COMPRESSED_SRGB_ALPHA
#ifndef GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#endif //GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_MODE
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_MODE
#ifndef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#endif //GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
#ifndef GL_TRANSFORM_FEEDBACK_VARYINGS
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#endif //GL_TRANSFORM_FEEDBACK_VARYINGS
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_START
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_START
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
#ifndef GL_PRIMITIVES_GENERATED
#define GL_PRIMITIVES_GENERATED 0x8C87
#endif //GL_PRIMITIVES_GENERATED
#ifndef GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#endif //GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
#ifndef GL_RASTERIZER_DISCARD
#define GL_RASTERIZER_DISCARD 0x8C89
#endif //GL_RASTERIZER_DISCARD
#ifndef GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#endif //GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
#ifndef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#endif //GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
#ifndef GL_INTERLEAVED_ATTRIBS
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#endif //GL_INTERLEAVED_ATTRIBS
#ifndef GL_SEPARATE_ATTRIBS
#define GL_SEPARATE_ATTRIBS 0x8C8D
#endif //GL_SEPARATE_ATTRIBS
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#endif //GL_TRANSFORM_FEEDBACK_BUFFER
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
#ifndef GL_POINT_SPRITE_COORD_ORIGIN
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#endif //GL_POINT_SPRITE_COORD_ORIGIN
#ifndef GL_LOWER_LEFT
#define GL_LOWER_LEFT 0x8CA1
#endif //GL_LOWER_LEFT
#ifndef GL_UPPER_LEFT
#define GL_UPPER_LEFT 0x8CA2
#endif //GL_UPPER_LEFT
#ifndef GL_STENCIL_BACK_REF
#define GL_STENCIL_BACK_REF 0x8CA3
#endif //GL_STENCIL_BACK_REF
#ifndef GL_STENCIL_BACK_VALUE_MASK
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#endif //GL_STENCIL_BACK_VALUE_MASK
#ifndef GL_STENCIL_BACK_WRITEMASK
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#endif //GL_STENCIL_BACK_WRITEMASK
#ifndef GL_FRAMEBUFFER_BINDING
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#endif //GL_FRAMEBUFFER_BINDING
#ifndef GL_DRAW_FRAMEBUFFER_BINDING
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#endif //GL_DRAW_FRAMEBUFFER_BINDING
#ifndef GL_RENDERBUFFER_BINDING
#define GL_RENDERBUFFER_BINDING 0x8CA7
#endif //GL_RENDERBUFFER_BINDING
#ifndef GL_READ_FRAMEBUFFER
#define GL_READ_FRAMEBUFFER 0x8CA8
#endif //GL_READ_FRAMEBUFFER
#ifndef GL_DRAW_FRAMEBUFFER
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#endif //GL_DRAW_FRAMEBUFFER
#ifndef GL_READ_FRAMEBUFFER_BINDING
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#endif //GL_READ_FRAMEBUFFER_BINDING
#ifndef GL_RENDERBUFFER_SAMPLES
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#endif //GL_RENDERBUFFER_SAMPLES
#ifndef GL_DEPTH_COMPONENT32F
#define GL_DEPTH_COMPONENT32F 0x8CAC
#endif //GL_DEPTH_COMPONENT32F
#ifndef GL_DEPTH32F_STENCIL8
#define GL_DEPTH32F_STENCIL8 0x8CAD
#endif //GL_DEPTH32F_STENCIL8
#ifndef GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#endif //GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#endif //GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
#ifndef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#endif //GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
#ifndef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#endif //GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#endif //GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
#ifndef GL_FRAMEBUFFER_COMPLETE
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#endif //GL_FRAMEBUFFER_COMPLETE
#ifndef GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#endif //GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
#ifndef GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#endif //GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
#ifndef GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#endif //GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
#ifndef GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#endif //GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
#ifndef GL_FRAMEBUFFER_UNSUPPORTED
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#endif //GL_FRAMEBUFFER_UNSUPPORTED
#ifndef GL_MAX_COLOR_ATTACHMENTS
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#endif //GL_MAX_COLOR_ATTACHMENTS
#ifndef GL_COLOR_ATTACHMENT0
#define GL_COLOR_ATTACHMENT0 0x8CE0
#endif //GL_COLOR_ATTACHMENT0
#ifndef GL_COLOR_ATTACHMENT1
#define GL_COLOR_ATTACHMENT1 0x8CE1
#endif //GL_COLOR_ATTACHMENT1
#ifndef GL_COLOR_ATTACHMENT2
#define GL_COLOR_ATTACHMENT2 0x8CE2
#endif //GL_COLOR_ATTACHMENT2
#ifndef GL_COLOR_ATTACHMENT3
#define GL_COLOR_ATTACHMENT3 0x8CE3
#endif //GL_COLOR_ATTACHMENT3
#ifndef GL_COLOR_ATTACHMENT4
#define GL_COLOR_ATTACHMENT4 0x8CE4
#endif //GL_COLOR_ATTACHMENT4
#ifndef GL_COLOR_ATTACHMENT5
#define GL_COLOR_ATTACHMENT5 0x8CE5
#endif //GL_COLOR_ATTACHMENT5
#ifndef GL_COLOR_ATTACHMENT6
#define GL_COLOR_ATTACHMENT6 0x8CE6
#endif //GL_COLOR_ATTACHMENT6
#ifndef GL_COLOR_ATTACHMENT7
#define GL_COLOR_ATTACHMENT7 0x8CE7
#endif //GL_COLOR_ATTACHMENT7
#ifndef GL_COLOR_ATTACHMENT8
#define GL_COLOR_ATTACHMENT8 0x8CE8
#endif //GL_COLOR_ATTACHMENT8
#ifndef GL_COLOR_ATTACHMENT9
#define GL_COLOR_ATTACHMENT9 0x8CE9
#endif //GL_COLOR_ATTACHMENT9
#ifndef GL_COLOR_ATTACHMENT10
#define GL_COLOR_ATTACHMENT10 0x8CEA
#endif //GL_COLOR_ATTACHMENT10
#ifndef GL_COLOR_ATTACHMENT11
#define GL_COLOR_ATTACHMENT11 0x8CEB
#endif //GL_COLOR_ATTACHMENT11
#ifndef GL_COLOR_ATTACHMENT12
#define GL_COLOR_ATTACHMENT12 0x8CEC
#endif //GL_COLOR_ATTACHMENT12
#ifndef GL_COLOR_ATTACHMENT13
#define GL_COLOR_ATTACHMENT13 0x8CED
#endif //GL_COLOR_ATTACHMENT13
#ifndef GL_COLOR_ATTACHMENT14
#define GL_COLOR_ATTACHMENT14 0x8CEE
#endif //GL_COLOR_ATTACHMENT14
#ifndef GL_COLOR_ATTACHMENT15
#define GL_COLOR_ATTACHMENT15 0x8CEF
#endif //GL_COLOR_ATTACHMENT15
#ifndef GL_DEPTH_ATTACHMENT
#define GL_DEPTH_ATTACHMENT 0x8D00
#endif //GL_DEPTH_ATTACHMENT
#ifndef GL_STENCIL_ATTACHMENT
#define GL_STENCIL_ATTACHMENT 0x8D20
#endif //GL_STENCIL_ATTACHMENT
#ifndef GL_FRAMEBUFFER
#define GL_FRAMEBUFFER 0x8D40
#endif //GL_FRAMEBUFFER
#ifndef GL_RENDERBUFFER
#define GL_RENDERBUFFER 0x8D41
#endif //GL_RENDERBUFFER
#ifndef GL_RENDERBUFFER_WIDTH
#define GL_RENDERBUFFER_WIDTH 0x8D42
#endif //GL_RENDERBUFFER_WIDTH
#ifndef GL_RENDERBUFFER_HEIGHT
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#endif //GL_RENDERBUFFER_HEIGHT
#ifndef GL_RENDERBUFFER_INTERNAL_FORMAT
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#endif //GL_RENDERBUFFER_INTERNAL_FORMAT
#ifndef GL_STENCIL_INDEX1
#define GL_STENCIL_INDEX1 0x8D46
#endif //GL_STENCIL_INDEX1
#ifndef GL_STENCIL_INDEX4
#define GL_STENCIL_INDEX4 0x8D47
#endif //GL_STENCIL_INDEX4
#ifndef GL_STENCIL_INDEX8
#define GL_STENCIL_INDEX8 0x8D48
#endif //GL_STENCIL_INDEX8
#ifndef GL_STENCIL_INDEX16
#define GL_STENCIL_INDEX16 0x8D49
#endif //GL_STENCIL_INDEX16
#ifndef GL_RENDERBUFFER_RED_SIZE
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#endif //GL_RENDERBUFFER_RED_SIZE
#ifndef GL_RENDERBUFFER_GREEN_SIZE
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#endif //GL_RENDERBUFFER_GREEN_SIZE
#ifndef GL_RENDERBUFFER_BLUE_SIZE
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#endif //GL_RENDERBUFFER_BLUE_SIZE
#ifndef GL_RENDERBUFFER_ALPHA_SIZE
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#endif //GL_RENDERBUFFER_ALPHA_SIZE
#ifndef GL_RENDERBUFFER_DEPTH_SIZE
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#endif //GL_RENDERBUFFER_DEPTH_SIZE
#ifndef GL_RENDERBUFFER_STENCIL_SIZE
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#endif //GL_RENDERBUFFER_STENCIL_SIZE
#ifndef GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#endif //GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
#ifndef GL_MAX_SAMPLES
#define GL_MAX_SAMPLES 0x8D57
#endif //GL_MAX_SAMPLES
#ifndef GL_RGBA32UI
#define GL_RGBA32UI 0x8D70
#endif //GL_RGBA32UI
#ifndef GL_RGB32UI
#define GL_RGB32UI 0x8D71
#endif //GL_RGB32UI
#ifndef GL_RGBA16UI
#define GL_RGBA16UI 0x8D76
#endif //GL_RGBA16UI
#ifndef GL_RGB16UI
#define GL_RGB16UI 0x8D77
#endif //GL_RGB16UI
#ifndef GL_RGBA8UI
#define GL_RGBA8UI 0x8D7C
#endif //GL_RGBA8UI
#ifndef GL_RGB8UI
#define GL_RGB8UI 0x8D7D
#endif //GL_RGB8UI
#ifndef GL_RGBA32I
#define GL_RGBA32I 0x8D82
#endif //GL_RGBA32I
#ifndef GL_RGB32I
#define GL_RGB32I 0x8D83
#endif //GL_RGB32I
#ifndef GL_RGBA16I
#define GL_RGBA16I 0x8D88
#endif //GL_RGBA16I
#ifndef GL_RGB16I
#define GL_RGB16I 0x8D89
#endif //GL_RGB16I
#ifndef GL_RGBA8I
#define GL_RGBA8I 0x8D8E
#endif //GL_RGBA8I
#ifndef GL_RGB8I
#define GL_RGB8I 0x8D8F
#endif //GL_RGB8I
#ifndef GL_RED_INTEGER
#define GL_RED_INTEGER 0x8D94
#endif //GL_RED_INTEGER
#ifndef GL_GREEN_INTEGER
#define GL_GREEN_INTEGER 0x8D95
#endif //GL_GREEN_INTEGER
#ifndef GL_BLUE_INTEGER
#define GL_BLUE_INTEGER 0x8D96
#endif //GL_BLUE_INTEGER
#ifndef GL_RGB_INTEGER
#define GL_RGB_INTEGER 0x8D98
#endif //GL_RGB_INTEGER
#ifndef GL_RGBA_INTEGER
#define GL_RGBA_INTEGER 0x8D99
#endif //GL_RGBA_INTEGER
#ifndef GL_BGR_INTEGER
#define GL_BGR_INTEGER 0x8D9A
#endif //GL_BGR_INTEGER
#ifndef GL_BGRA_INTEGER
#define GL_BGRA_INTEGER 0x8D9B
#endif //GL_BGRA_INTEGER
#ifndef GL_FRAMEBUFFER_ATTACHMENT_LAYERED
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#endif //GL_FRAMEBUFFER_ATTACHMENT_LAYERED
#ifndef GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#endif //GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
#ifndef GL_FLOAT_32_UNSIGNED_INT_24_8_REV
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#endif //GL_FLOAT_32_UNSIGNED_INT_24_8_REV
#ifndef GL_FRAMEBUFFER_SRGB
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#endif //GL_FRAMEBUFFER_SRGB
#ifndef GL_COMPRESSED_RED_RGTC1
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#endif //GL_COMPRESSED_RED_RGTC1
#ifndef GL_COMPRESSED_SIGNED_RED_RGTC1
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#endif //GL_COMPRESSED_SIGNED_RED_RGTC1
#ifndef GL_COMPRESSED_RG_RGTC2
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#endif //GL_COMPRESSED_RG_RGTC2
#ifndef GL_COMPRESSED_SIGNED_RG_RGTC2
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#endif //GL_COMPRESSED_SIGNED_RG_RGTC2
#ifndef GL_SAMPLER_1D_ARRAY
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#endif //GL_SAMPLER_1D_ARRAY
#ifndef GL_SAMPLER_2D_ARRAY
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#endif //GL_SAMPLER_2D_ARRAY
#ifndef GL_SAMPLER_BUFFER
#define GL_SAMPLER_BUFFER 0x8DC2
#endif //GL_SAMPLER_BUFFER
#ifndef GL_SAMPLER_1D_ARRAY_SHADOW
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#endif //GL_SAMPLER_1D_ARRAY_SHADOW
#ifndef GL_SAMPLER_2D_ARRAY_SHADOW
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#endif //GL_SAMPLER_2D_ARRAY_SHADOW
#ifndef GL_SAMPLER_CUBE_SHADOW
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#endif //GL_SAMPLER_CUBE_SHADOW
#ifndef GL_UNSIGNED_INT_VEC2
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#endif //GL_UNSIGNED_INT_VEC2
#ifndef GL_UNSIGNED_INT_VEC3
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#endif //GL_UNSIGNED_INT_VEC3
#ifndef GL_UNSIGNED_INT_VEC4
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#endif //GL_UNSIGNED_INT_VEC4
#ifndef GL_INT_SAMPLER_1D
#define GL_INT_SAMPLER_1D 0x8DC9
#endif //GL_INT_SAMPLER_1D
#ifndef GL_INT_SAMPLER_2D
#define GL_INT_SAMPLER_2D 0x8DCA
#endif //GL_INT_SAMPLER_2D
#ifndef GL_INT_SAMPLER_3D
#define GL_INT_SAMPLER_3D 0x8DCB
#endif //GL_INT_SAMPLER_3D
#ifndef GL_INT_SAMPLER_CUBE
#define GL_INT_SAMPLER_CUBE 0x8DCC
#endif //GL_INT_SAMPLER_CUBE
#ifndef GL_INT_SAMPLER_2D_RECT
#define GL_INT_SAMPLER_2D_RECT 0x8DCD
#endif //GL_INT_SAMPLER_2D_RECT
#ifndef GL_INT_SAMPLER_1D_ARRAY
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#endif //GL_INT_SAMPLER_1D_ARRAY
#ifndef GL_INT_SAMPLER_2D_ARRAY
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#endif //GL_INT_SAMPLER_2D_ARRAY
#ifndef GL_INT_SAMPLER_BUFFER
#define GL_INT_SAMPLER_BUFFER 0x8DD0
#endif //GL_INT_SAMPLER_BUFFER
#ifndef GL_UNSIGNED_INT_SAMPLER_1D
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#endif //GL_UNSIGNED_INT_SAMPLER_1D
#ifndef GL_UNSIGNED_INT_SAMPLER_2D
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#endif //GL_UNSIGNED_INT_SAMPLER_2D
#ifndef GL_UNSIGNED_INT_SAMPLER_3D
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#endif //GL_UNSIGNED_INT_SAMPLER_3D
#ifndef GL_UNSIGNED_INT_SAMPLER_CUBE
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#endif //GL_UNSIGNED_INT_SAMPLER_CUBE
#ifndef GL_UNSIGNED_INT_SAMPLER_2D_RECT
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5
#endif //GL_UNSIGNED_INT_SAMPLER_2D_RECT
#ifndef GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#endif //GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
#ifndef GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#endif //GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
#ifndef GL_UNSIGNED_INT_SAMPLER_BUFFER
#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
#endif //GL_UNSIGNED_INT_SAMPLER_BUFFER
#ifndef GL_GEOMETRY_SHADER
#define GL_GEOMETRY_SHADER 0x8DD9
#endif //GL_GEOMETRY_SHADER
#ifndef GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#endif //GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
#ifndef GL_MAX_GEOMETRY_OUTPUT_VERTICES
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
#endif //GL_MAX_GEOMETRY_OUTPUT_VERTICES
#ifndef GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#endif //GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
#ifndef GL_QUERY_WAIT
#define GL_QUERY_WAIT 0x8E13
#endif //GL_QUERY_WAIT
#ifndef GL_QUERY_NO_WAIT
#define GL_QUERY_NO_WAIT 0x8E14
#endif //GL_QUERY_NO_WAIT
#ifndef GL_QUERY_BY_REGION_WAIT
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#endif //GL_QUERY_BY_REGION_WAIT
#ifndef GL_QUERY_BY_REGION_NO_WAIT
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#endif //GL_QUERY_BY_REGION_NO_WAIT
#ifndef GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#endif //GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
#ifndef GL_FIRST_VERTEX_CONVENTION
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#endif //GL_FIRST_VERTEX_CONVENTION
#ifndef GL_LAST_VERTEX_CONVENTION
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#endif //GL_LAST_VERTEX_CONVENTION
#ifndef GL_PROVOKING_VERTEX
#define GL_PROVOKING_VERTEX 0x8E4F
#endif //GL_PROVOKING_VERTEX
#ifndef GL_SAMPLE_POSITION
#define GL_SAMPLE_POSITION 0x8E50
#endif //GL_SAMPLE_POSITION
#ifndef GL_SAMPLE_MASK
#define GL_SAMPLE_MASK 0x8E51
#endif //GL_SAMPLE_MASK
#ifndef GL_SAMPLE_MASK_VALUE
#define GL_SAMPLE_MASK_VALUE 0x8E52
#endif //GL_SAMPLE_MASK_VALUE
#ifndef GL_MAX_SAMPLE_MASK_WORDS
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#endif //GL_MAX_SAMPLE_MASK_WORDS
#ifndef GL_COPY_READ_BUFFER
#define GL_COPY_READ_BUFFER 0x8F36
#endif //GL_COPY_READ_BUFFER
#ifndef GL_COPY_WRITE_BUFFER
#define GL_COPY_WRITE_BUFFER 0x8F37
#endif //GL_COPY_WRITE_BUFFER
#ifndef GL_R8_SNORM
#define GL_R8_SNORM 0x8F94
#endif //GL_R8_SNORM
#ifndef GL_RG8_SNORM
#define GL_RG8_SNORM 0x8F95
#endif //GL_RG8_SNORM
#ifndef GL_RGB8_SNORM
#define GL_RGB8_SNORM 0x8F96
#endif //GL_RGB8_SNORM
#ifndef GL_RGBA8_SNORM
#define GL_RGBA8_SNORM 0x8F97
#endif //GL_RGBA8_SNORM
#ifndef GL_R16_SNORM
#define GL_R16_SNORM 0x8F98
#endif //GL_R16_SNORM
#ifndef GL_RG16_SNORM
#define GL_RG16_SNORM 0x8F99
#endif //GL_RG16_SNORM
#ifndef GL_RGB16_SNORM
#define GL_RGB16_SNORM 0x8F9A
#endif //GL_RGB16_SNORM
#ifndef GL_RGBA16_SNORM
#define GL_RGBA16_SNORM 0x8F9B
#endif //GL_RGBA16_SNORM
#ifndef GL_SIGNED_NORMALIZED
#define GL_SIGNED_NORMALIZED 0x8F9C
#endif //GL_SIGNED_NORMALIZED
#ifndef GL_PRIMITIVE_RESTART
#define GL_PRIMITIVE_RESTART 0x8F9D
#endif //GL_PRIMITIVE_RESTART
#ifndef GL_PRIMITIVE_RESTART_INDEX
#define GL_PRIMITIVE_RESTART_INDEX 0x8F9E
#endif //GL_PRIMITIVE_RESTART_INDEX
#ifndef GL_TEXTURE_2D_MULTISAMPLE
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#endif //GL_TEXTURE_2D_MULTISAMPLE
#ifndef GL_PROXY_TEXTURE_2D_MULTISAMPLE
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
#endif //GL_PROXY_TEXTURE_2D_MULTISAMPLE
#ifndef GL_TEXTURE_2D_MULTISAMPLE_ARRAY
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#endif //GL_TEXTURE_2D_MULTISAMPLE_ARRAY
#ifndef GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#endif //GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
#ifndef GL_TEXTURE_BINDING_2D_MULTISAMPLE
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#endif //GL_TEXTURE_BINDING_2D_MULTISAMPLE
#ifndef GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#endif //GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
#ifndef GL_TEXTURE_SAMPLES
#define GL_TEXTURE_SAMPLES 0x9106
#endif //GL_TEXTURE_SAMPLES
#ifndef GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#endif //GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
#ifndef GL_SAMPLER_2D_MULTISAMPLE
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#endif //GL_SAMPLER_2D_MULTISAMPLE
#ifndef GL_INT_SAMPLER_2D_MULTISAMPLE
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#endif //GL_INT_SAMPLER_2D_MULTISAMPLE
#ifndef GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#endif //GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
#ifndef GL_SAMPLER_2D_MULTISAMPLE_ARRAY
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#endif //GL_SAMPLER_2D_MULTISAMPLE_ARRAY
#ifndef GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#endif //GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
#ifndef GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#endif //GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
#ifndef GL_MAX_COLOR_TEXTURE_SAMPLES
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#endif //GL_MAX_COLOR_TEXTURE_SAMPLES
#ifndef GL_MAX_DEPTH_TEXTURE_SAMPLES
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#endif //GL_MAX_DEPTH_TEXTURE_SAMPLES
#ifndef GL_MAX_INTEGER_SAMPLES
#define GL_MAX_INTEGER_SAMPLES 0x9110
#endif //GL_MAX_INTEGER_SAMPLES
#ifndef GL_MAX_SERVER_WAIT_TIMEOUT
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#endif //GL_MAX_SERVER_WAIT_TIMEOUT
#ifndef GL_OBJECT_TYPE
#define GL_OBJECT_TYPE 0x9112
#endif //GL_OBJECT_TYPE
#ifndef GL_SYNC_CONDITION
#define GL_SYNC_CONDITION 0x9113
#endif //GL_SYNC_CONDITION
#ifndef GL_SYNC_STATUS
#define GL_SYNC_STATUS 0x9114
#endif //GL_SYNC_STATUS
#ifndef GL_SYNC_FLAGS
#define GL_SYNC_FLAGS 0x9115
#endif //GL_SYNC_FLAGS
#ifndef GL_SYNC_FENCE
#define GL_SYNC_FENCE 0x9116
#endif //GL_SYNC_FENCE
#ifndef GL_SYNC_GPU_COMMANDS_COMPLETE
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#endif //GL_SYNC_GPU_COMMANDS_COMPLETE
#ifndef GL_UNSIGNALED
#define GL_UNSIGNALED 0x9118
#endif //GL_UNSIGNALED
#ifndef GL_SIGNALED
#define GL_SIGNALED 0x9119
#endif //GL_SIGNALED
#ifndef GL_ALREADY_SIGNALED
#define GL_ALREADY_SIGNALED 0x911A
#endif //GL_ALREADY_SIGNALED
#ifndef GL_TIMEOUT_EXPIRED
#define GL_TIMEOUT_EXPIRED 0x911B
#endif //GL_TIMEOUT_EXPIRED
#ifndef GL_CONDITION_SATISFIED
#define GL_CONDITION_SATISFIED 0x911C
#endif //GL_CONDITION_SATISFIED
#ifndef GL_WAIT_FAILED
#define GL_WAIT_FAILED 0x911D
#endif //GL_WAIT_FAILED
#ifndef GL_BUFFER_ACCESS_FLAGS
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#endif //GL_BUFFER_ACCESS_FLAGS
#ifndef GL_BUFFER_MAP_LENGTH
#define GL_BUFFER_MAP_LENGTH 0x9120
#endif //GL_BUFFER_MAP_LENGTH
#ifndef GL_BUFFER_MAP_OFFSET
#define GL_BUFFER_MAP_OFFSET 0x9121
#endif //GL_BUFFER_MAP_OFFSET
#ifndef GL_MAX_VERTEX_OUTPUT_COMPONENTS
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
#endif //GL_MAX_VERTEX_OUTPUT_COMPONENTS
#ifndef GL_MAX_GEOMETRY_INPUT_COMPONENTS
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
#endif //GL_MAX_GEOMETRY_INPUT_COMPONENTS
#ifndef GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#endif //GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
#ifndef GL_MAX_FRAGMENT_INPUT_COMPONENTS
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
#endif //GL_MAX_FRAGMENT_INPUT_COMPONENTS
#ifndef GL_CONTEXT_PROFILE_MASK
#define GL_CONTEXT_PROFILE_MASK 0x9126
#endif //GL_CONTEXT_PROFILE_MASK
#ifndef GL_INVALID_INDEX
#define GL_INVALID_INDEX 0xFFFFFFFF
#endif //GL_INVALID_INDEX
#ifndef GL_TIMEOUT_IGNORED
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFF
#endif //GL_TIMEOUT_IGNORED
#ifndef GL_ONE
#define GL_ONE 1
#endif //GL_ONE
#ifndef GL_TRUE
#define GL_TRUE 1
#endif //GL_TRUE
CGUARDBEGIN

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_BindTexture
#define GL_ALT_FUNDEF_BindTexture
extern void glBindTexture(GLenum,GLuint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_BlendFunc
#define GL_ALT_FUNDEF_BlendFunc
extern void glBlendFunc(GLenum,GLenum);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Clear
#define GL_ALT_FUNDEF_Clear
extern void glClear(GLbitfield);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_ClearColor
#define GL_ALT_FUNDEF_ClearColor
extern void glClearColor(GLfloat,GLfloat,GLfloat,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_ClearDepth
#define GL_ALT_FUNDEF_ClearDepth
extern void glClearDepth(GLdouble);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_ClearStencil
#define GL_ALT_FUNDEF_ClearStencil
extern void glClearStencil(GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_ColorMask
#define GL_ALT_FUNDEF_ColorMask
extern void glColorMask(GLboolean,GLboolean,GLboolean,GLboolean);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_CopyTexImage1D
#define GL_ALT_FUNDEF_CopyTexImage1D
extern void glCopyTexImage1D(GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLint);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_CopyTexImage2D
#define GL_ALT_FUNDEF_CopyTexImage2D
extern void glCopyTexImage2D(GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLsizei,GLint);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_CopyTexSubImage1D
#define GL_ALT_FUNDEF_CopyTexSubImage1D
extern void glCopyTexSubImage1D(GLenum,GLint,GLint,GLint,GLint,GLsizei);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_CopyTexSubImage2D
#define GL_ALT_FUNDEF_CopyTexSubImage2D
extern void glCopyTexSubImage2D(GLenum,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_CullFace
#define GL_ALT_FUNDEF_CullFace
extern void glCullFace(GLenum);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_DeleteTextures
#define GL_ALT_FUNDEF_DeleteTextures
extern void glDeleteTextures(GLsizei,const GLuint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_DepthFunc
#define GL_ALT_FUNDEF_DepthFunc
extern void glDepthFunc(GLenum);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_DepthMask
#define GL_ALT_FUNDEF_DepthMask
extern void glDepthMask(GLboolean);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_DepthRange
#define GL_ALT_FUNDEF_DepthRange
extern void glDepthRange(GLdouble,GLdouble);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Disable
#define GL_ALT_FUNDEF_Disable
extern void glDisable(GLenum);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_DrawArrays
#define GL_ALT_FUNDEF_DrawArrays
extern void glDrawArrays(GLenum,GLint,GLsizei);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_DrawBuffer
#define GL_ALT_FUNDEF_DrawBuffer
extern void glDrawBuffer(GLenum);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_DrawElements
#define GL_ALT_FUNDEF_DrawElements
extern void glDrawElements(GLenum,GLsizei,GLenum,const void *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Enable
#define GL_ALT_FUNDEF_Enable
extern void glEnable(GLenum);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Finish
#define GL_ALT_FUNDEF_Finish
extern void glFinish();
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Flush
#define GL_ALT_FUNDEF_Flush
extern void glFlush();
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_FrontFace
#define GL_ALT_FUNDEF_FrontFace
extern void glFrontFace(GLenum);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_GenTextures
#define GL_ALT_FUNDEF_GenTextures
extern void glGenTextures(GLsizei,GLuint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetBooleanv
#define GL_ALT_FUNDEF_GetBooleanv
extern void glGetBooleanv(GLenum,GLboolean *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetDoublev
#define GL_ALT_FUNDEF_GetDoublev
extern void glGetDoublev(GLenum,GLdouble *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetError
#define GL_ALT_FUNDEF_GetError
extern GLenum glGetError();
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetFloatv
#define GL_ALT_FUNDEF_GetFloatv
extern void glGetFloatv(GLenum,GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetIntegerv
#define GL_ALT_FUNDEF_GetIntegerv
extern void glGetIntegerv(GLenum,GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetString
#define GL_ALT_FUNDEF_GetString
extern const GLubyte * glGetString(GLenum);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetTexImage
#define GL_ALT_FUNDEF_GetTexImage
extern void glGetTexImage(GLenum,GLint,GLenum,GLenum,void *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetTexLevelParameterfv
#define GL_ALT_FUNDEF_GetTexLevelParameterfv
extern void glGetTexLevelParameterfv(GLenum,GLint,GLenum,GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetTexLevelParameteriv
#define GL_ALT_FUNDEF_GetTexLevelParameteriv
extern void glGetTexLevelParameteriv(GLenum,GLint,GLenum,GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetTexParameterfv
#define GL_ALT_FUNDEF_GetTexParameterfv
extern void glGetTexParameterfv(GLenum,GLenum,GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetTexParameteriv
#define GL_ALT_FUNDEF_GetTexParameteriv
extern void glGetTexParameteriv(GLenum,GLenum,GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Hint
#define GL_ALT_FUNDEF_Hint
extern void glHint(GLenum,GLenum);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_IsEnabled
#define GL_ALT_FUNDEF_IsEnabled
extern GLboolean glIsEnabled(GLenum);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_IsTexture
#define GL_ALT_FUNDEF_IsTexture
extern GLboolean glIsTexture(GLuint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_LineWidth
#define GL_ALT_FUNDEF_LineWidth
extern void glLineWidth(GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_LogicOp
#define GL_ALT_FUNDEF_LogicOp
extern void glLogicOp(GLenum);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_PixelStoref
#define GL_ALT_FUNDEF_PixelStoref
extern void glPixelStoref(GLenum,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_PixelStorei
#define GL_ALT_FUNDEF_PixelStorei
extern void glPixelStorei(GLenum,GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_PointSize
#define GL_ALT_FUNDEF_PointSize
extern void glPointSize(GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_PolygonMode
#define GL_ALT_FUNDEF_PolygonMode
extern void glPolygonMode(GLenum,GLenum);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_PolygonOffset
#define GL_ALT_FUNDEF_PolygonOffset
extern void glPolygonOffset(GLfloat,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_ReadBuffer
#define GL_ALT_FUNDEF_ReadBuffer
extern void glReadBuffer(GLenum);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_ReadPixels
#define GL_ALT_FUNDEF_ReadPixels
extern void glReadPixels(GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,void *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Scissor
#define GL_ALT_FUNDEF_Scissor
extern void glScissor(GLint,GLint,GLsizei,GLsizei);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_StencilFunc
#define GL_ALT_FUNDEF_StencilFunc
extern void glStencilFunc(GLenum,GLint,GLuint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_StencilMask
#define GL_ALT_FUNDEF_StencilMask
extern void glStencilMask(GLuint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_StencilOp
#define GL_ALT_FUNDEF_StencilOp
extern void glStencilOp(GLenum,GLenum,GLenum);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexImage1D
#define GL_ALT_FUNDEF_TexImage1D
extern void glTexImage1D(GLenum,GLint,GLint,GLsizei,GLint,GLenum,GLenum,const void *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexImage2D
#define GL_ALT_FUNDEF_TexImage2D
extern void glTexImage2D(GLenum,GLint,GLint,GLsizei,GLsizei,GLint,GLenum,GLenum,const void *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexParameterf
#define GL_ALT_FUNDEF_TexParameterf
extern void glTexParameterf(GLenum,GLenum,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexParameterfv
#define GL_ALT_FUNDEF_TexParameterfv
extern void glTexParameterfv(GLenum,GLenum,const GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexParameteri
#define GL_ALT_FUNDEF_TexParameteri
extern void glTexParameteri(GLenum,GLenum,GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexParameteriv
#define GL_ALT_FUNDEF_TexParameteriv
extern void glTexParameteriv(GLenum,GLenum,const GLint *);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_TexSubImage1D
#define GL_ALT_FUNDEF_TexSubImage1D
extern void glTexSubImage1D(GLenum,GLint,GLint,GLsizei,GLenum,GLenum,const void *);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_TexSubImage2D
#define GL_ALT_FUNDEF_TexSubImage2D
extern void glTexSubImage2D(GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,const void *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Viewport
#define GL_ALT_FUNDEF_Viewport
extern void glViewport(GLint,GLint,GLsizei,GLsizei);
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_ActiveTexture
#define GL_ALT_FUNDEF_ActiveTexture
typedef void (*PFNGLACTIVETEXTUREPROC_ALT)(GLenum);
static inline void glActiveTexture(GLenum texture1)
{
#ifdef __cplusplus
	static PFNGLACTIVETEXTUREPROC_ALT fn=(PFNGLACTIVETEXTUREPROC_ALT)glaltGetProcAddressVersion("glActiveTexture",3,2);
#else
	static PFNGLACTIVETEXTUREPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLACTIVETEXTUREPROC_ALT)glaltGetProcAddressVersion("glActiveTexture",3,2); }
#endif
	 fn(texture1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_AttachShader
#define GL_ALT_FUNDEF_AttachShader
typedef void (*PFNGLATTACHSHADERPROC_ALT)(GLuint,GLuint);
static inline void glAttachShader(GLuint program1,GLuint shader1)
{
#ifdef __cplusplus
	static PFNGLATTACHSHADERPROC_ALT fn=(PFNGLATTACHSHADERPROC_ALT)glaltGetProcAddressVersion("glAttachShader",3,2);
#else
	static PFNGLATTACHSHADERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLATTACHSHADERPROC_ALT)glaltGetProcAddressVersion("glAttachShader",3,2); }
#endif
	 fn(program1,shader1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_BeginConditionalRender
#define GL_ALT_FUNDEF_BeginConditionalRender
typedef void (*PFNGLBEGINCONDITIONALRENDERPROC_ALT)(GLuint,GLenum);
static inline void glBeginConditionalRender(GLuint id1,GLenum mode1)
{
#ifdef __cplusplus
	static PFNGLBEGINCONDITIONALRENDERPROC_ALT fn=(PFNGLBEGINCONDITIONALRENDERPROC_ALT)glaltGetProcAddressVersion("glBeginConditionalRender",3,2);
#else
	static PFNGLBEGINCONDITIONALRENDERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBEGINCONDITIONALRENDERPROC_ALT)glaltGetProcAddressVersion("glBeginConditionalRender",3,2); }
#endif
	 fn(id1,mode1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_BeginQuery
#define GL_ALT_FUNDEF_BeginQuery
typedef void (*PFNGLBEGINQUERYPROC_ALT)(GLenum,GLuint);
static inline void glBeginQuery(GLenum target1,GLuint id1)
{
#ifdef __cplusplus
	static PFNGLBEGINQUERYPROC_ALT fn=(PFNGLBEGINQUERYPROC_ALT)glaltGetProcAddressVersion("glBeginQuery",3,2);
#else
	static PFNGLBEGINQUERYPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBEGINQUERYPROC_ALT)glaltGetProcAddressVersion("glBeginQuery",3,2); }
#endif
	 fn(target1,id1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_BeginTransformFeedback
#define GL_ALT_FUNDEF_BeginTransformFeedback
typedef void (*PFNGLBEGINTRANSFORMFEEDBACKPROC_ALT)(GLenum);
static inline void glBeginTransformFeedback(GLenum primitiveMode1)
{
#ifdef __cplusplus
	static PFNGLBEGINTRANSFORMFEEDBACKPROC_ALT fn=(PFNGLBEGINTRANSFORMFEEDBACKPROC_ALT)glaltGetProcAddressVersion("glBeginTransformFeedback",3,2);
#else
	static PFNGLBEGINTRANSFORMFEEDBACKPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBEGINTRANSFORMFEEDBACKPROC_ALT)glaltGetProcAddressVersion("glBeginTransformFeedback",3,2); }
#endif
	 fn(primitiveMode1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_BindAttribLocation
#define GL_ALT_FUNDEF_BindAttribLocation
typedef void (*PFNGLBINDATTRIBLOCATIONPROC_ALT)(GLuint,GLuint,const GLchar *);
static inline void glBindAttribLocation(GLuint program1,GLuint index1,const GLchar * name1)
{
#ifdef __cplusplus
	static PFNGLBINDATTRIBLOCATIONPROC_ALT fn=(PFNGLBINDATTRIBLOCATIONPROC_ALT)glaltGetProcAddressVersion("glBindAttribLocation",3,2);
#else
	static PFNGLBINDATTRIBLOCATIONPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBINDATTRIBLOCATIONPROC_ALT)glaltGetProcAddressVersion("glBindAttribLocation",3,2); }
#endif
	 fn(program1,index1,name1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_BindBuffer
#define GL_ALT_FUNDEF_BindBuffer
typedef void (*PFNGLBINDBUFFERPROC_ALT)(GLenum,GLuint);
static inline void glBindBuffer(GLenum target1,GLuint buffer1)
{
#ifdef __cplusplus
	static PFNGLBINDBUFFERPROC_ALT fn=(PFNGLBINDBUFFERPROC_ALT)glaltGetProcAddressVersion("glBindBuffer",3,2);
#else
	static PFNGLBINDBUFFERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBINDBUFFERPROC_ALT)glaltGetProcAddressVersion("glBindBuffer",3,2); }
#endif
	 fn(target1,buffer1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_BindBufferBase
#define GL_ALT_FUNDEF_BindBufferBase
typedef void (*PFNGLBINDBUFFERBASEPROC_ALT)(GLenum,GLuint,GLuint);
static inline void glBindBufferBase(GLenum target1,GLuint index1,GLuint buffer1)
{
#ifdef __cplusplus
	static PFNGLBINDBUFFERBASEPROC_ALT fn=(PFNGLBINDBUFFERBASEPROC_ALT)glaltGetProcAddressVersion("glBindBufferBase",3,2);
#else
	static PFNGLBINDBUFFERBASEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBINDBUFFERBASEPROC_ALT)glaltGetProcAddressVersion("glBindBufferBase",3,2); }
#endif
	 fn(target1,index1,buffer1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_BindBufferRange
#define GL_ALT_FUNDEF_BindBufferRange
typedef void (*PFNGLBINDBUFFERRANGEPROC_ALT)(GLenum,GLuint,GLuint,GLintptr,GLsizeiptr);
static inline void glBindBufferRange(GLenum target1,GLuint index1,GLuint buffer1,GLintptr offset1,GLsizeiptr size1)
{
#ifdef __cplusplus
	static PFNGLBINDBUFFERRANGEPROC_ALT fn=(PFNGLBINDBUFFERRANGEPROC_ALT)glaltGetProcAddressVersion("glBindBufferRange",3,2);
#else
	static PFNGLBINDBUFFERRANGEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBINDBUFFERRANGEPROC_ALT)glaltGetProcAddressVersion("glBindBufferRange",3,2); }
#endif
	 fn(target1,index1,buffer1,offset1,size1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_BindFragDataLocation
#define GL_ALT_FUNDEF_BindFragDataLocation
typedef void (*PFNGLBINDFRAGDATALOCATIONPROC_ALT)(GLuint,GLuint,const GLchar *);
static inline void glBindFragDataLocation(GLuint program1,GLuint color1,const GLchar * name1)
{
#ifdef __cplusplus
	static PFNGLBINDFRAGDATALOCATIONPROC_ALT fn=(PFNGLBINDFRAGDATALOCATIONPROC_ALT)glaltGetProcAddressVersion("glBindFragDataLocation",3,2);
#else
	static PFNGLBINDFRAGDATALOCATIONPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBINDFRAGDATALOCATIONPROC_ALT)glaltGetProcAddressVersion("glBindFragDataLocation",3,2); }
#endif
	 fn(program1,color1,name1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_BindFramebuffer
#define GL_ALT_FUNDEF_BindFramebuffer
typedef void (*PFNGLBINDFRAMEBUFFERPROC_ALT)(GLenum,GLuint);
static inline void glBindFramebuffer(GLenum target1,GLuint framebuffer1)
{
#ifdef __cplusplus
	static PFNGLBINDFRAMEBUFFERPROC_ALT fn=(PFNGLBINDFRAMEBUFFERPROC_ALT)glaltGetProcAddressVersion("glBindFramebuffer",3,2);
#else
	static PFNGLBINDFRAMEBUFFERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBINDFRAMEBUFFERPROC_ALT)glaltGetProcAddressVersion("glBindFramebuffer",3,2); }
#endif
	 fn(target1,framebuffer1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_BindRenderbuffer
#define GL_ALT_FUNDEF_BindRenderbuffer
typedef void (*PFNGLBINDRENDERBUFFERPROC_ALT)(GLenum,GLuint);
static inline void glBindRenderbuffer(GLenum target1,GLuint renderbuffer1)
{
#ifdef __cplusplus
	static PFNGLBINDRENDERBUFFERPROC_ALT fn=(PFNGLBINDRENDERBUFFERPROC_ALT)glaltGetProcAddressVersion("glBindRenderbuffer",3,2);
#else
	static PFNGLBINDRENDERBUFFERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBINDRENDERBUFFERPROC_ALT)glaltGetProcAddressVersion("glBindRenderbuffer",3,2); }
#endif
	 fn(target1,renderbuffer1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_BindVertexArray
#define GL_ALT_FUNDEF_BindVertexArray
typedef void (*PFNGLBINDVERTEXARRAYPROC_ALT)(GLuint);
static inline void glBindVertexArray(GLuint array1)
{
#ifdef __cplusplus
	static PFNGLBINDVERTEXARRAYPROC_ALT fn=(PFNGLBINDVERTEXARRAYPROC_ALT)glaltGetProcAddressVersion("glBindVertexArray",3,2);
#else
	static PFNGLBINDVERTEXARRAYPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBINDVERTEXARRAYPROC_ALT)glaltGetProcAddressVersion("glBindVertexArray",3,2); }
#endif
	 fn(array1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_BlendColor
#define GL_ALT_FUNDEF_BlendColor
typedef void (*PFNGLBLENDCOLORPROC_ALT)(GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glBlendColor(GLfloat red1,GLfloat green1,GLfloat blue1,GLfloat alpha1)
{
#ifdef __cplusplus
	static PFNGLBLENDCOLORPROC_ALT fn=(PFNGLBLENDCOLORPROC_ALT)glaltGetProcAddressVersion("glBlendColor",3,2);
#else
	static PFNGLBLENDCOLORPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBLENDCOLORPROC_ALT)glaltGetProcAddressVersion("glBlendColor",3,2); }
#endif
	 fn(red1,green1,blue1,alpha1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_BlendEquation
#define GL_ALT_FUNDEF_BlendEquation
typedef void (*PFNGLBLENDEQUATIONPROC_ALT)(GLenum);
static inline void glBlendEquation(GLenum mode1)
{
#ifdef __cplusplus
	static PFNGLBLENDEQUATIONPROC_ALT fn=(PFNGLBLENDEQUATIONPROC_ALT)glaltGetProcAddressVersion("glBlendEquation",3,2);
#else
	static PFNGLBLENDEQUATIONPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBLENDEQUATIONPROC_ALT)glaltGetProcAddressVersion("glBlendEquation",3,2); }
#endif
	 fn(mode1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_BlendEquationSeparate
#define GL_ALT_FUNDEF_BlendEquationSeparate
typedef void (*PFNGLBLENDEQUATIONSEPARATEPROC_ALT)(GLenum,GLenum);
static inline void glBlendEquationSeparate(GLenum modeRGB1,GLenum modeAlpha1)
{
#ifdef __cplusplus
	static PFNGLBLENDEQUATIONSEPARATEPROC_ALT fn=(PFNGLBLENDEQUATIONSEPARATEPROC_ALT)glaltGetProcAddressVersion("glBlendEquationSeparate",3,2);
#else
	static PFNGLBLENDEQUATIONSEPARATEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBLENDEQUATIONSEPARATEPROC_ALT)glaltGetProcAddressVersion("glBlendEquationSeparate",3,2); }
#endif
	 fn(modeRGB1,modeAlpha1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_BlendFuncSeparate
#define GL_ALT_FUNDEF_BlendFuncSeparate
typedef void (*PFNGLBLENDFUNCSEPARATEPROC_ALT)(GLenum,GLenum,GLenum,GLenum);
static inline void glBlendFuncSeparate(GLenum sfactorRGB1,GLenum dfactorRGB1,GLenum sfactorAlpha1,GLenum dfactorAlpha1)
{
#ifdef __cplusplus
	static PFNGLBLENDFUNCSEPARATEPROC_ALT fn=(PFNGLBLENDFUNCSEPARATEPROC_ALT)glaltGetProcAddressVersion("glBlendFuncSeparate",3,2);
#else
	static PFNGLBLENDFUNCSEPARATEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBLENDFUNCSEPARATEPROC_ALT)glaltGetProcAddressVersion("glBlendFuncSeparate",3,2); }
#endif
	 fn(sfactorRGB1,dfactorRGB1,sfactorAlpha1,dfactorAlpha1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_BlitFramebuffer
#define GL_ALT_FUNDEF_BlitFramebuffer
typedef void (*PFNGLBLITFRAMEBUFFERPROC_ALT)(GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLbitfield,GLenum);
static inline void glBlitFramebuffer(GLint srcX01,GLint srcY01,GLint srcX11,GLint srcY11,GLint dstX01,GLint dstY01,GLint dstX11,GLint dstY11,GLbitfield mask1,GLenum filter1)
{
#ifdef __cplusplus
	static PFNGLBLITFRAMEBUFFERPROC_ALT fn=(PFNGLBLITFRAMEBUFFERPROC_ALT)glaltGetProcAddressVersion("glBlitFramebuffer",3,2);
#else
	static PFNGLBLITFRAMEBUFFERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBLITFRAMEBUFFERPROC_ALT)glaltGetProcAddressVersion("glBlitFramebuffer",3,2); }
#endif
	 fn(srcX01,srcY01,srcX11,srcY11,dstX01,dstY01,dstX11,dstY11,mask1,filter1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_BufferData
#define GL_ALT_FUNDEF_BufferData
typedef void (*PFNGLBUFFERDATAPROC_ALT)(GLenum,GLsizeiptr,const void *,GLenum);
static inline void glBufferData(GLenum target1,GLsizeiptr size1,const void * data1,GLenum usage1)
{
#ifdef __cplusplus
	static PFNGLBUFFERDATAPROC_ALT fn=(PFNGLBUFFERDATAPROC_ALT)glaltGetProcAddressVersion("glBufferData",3,2);
#else
	static PFNGLBUFFERDATAPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBUFFERDATAPROC_ALT)glaltGetProcAddressVersion("glBufferData",3,2); }
#endif
	 fn(target1,size1,data1,usage1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_BufferSubData
#define GL_ALT_FUNDEF_BufferSubData
typedef void (*PFNGLBUFFERSUBDATAPROC_ALT)(GLenum,GLintptr,GLsizeiptr,const void *);
static inline void glBufferSubData(GLenum target1,GLintptr offset1,GLsizeiptr size1,const void * data1)
{
#ifdef __cplusplus
	static PFNGLBUFFERSUBDATAPROC_ALT fn=(PFNGLBUFFERSUBDATAPROC_ALT)glaltGetProcAddressVersion("glBufferSubData",3,2);
#else
	static PFNGLBUFFERSUBDATAPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBUFFERSUBDATAPROC_ALT)glaltGetProcAddressVersion("glBufferSubData",3,2); }
#endif
	 fn(target1,offset1,size1,data1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_CheckFramebufferStatus
#define GL_ALT_FUNDEF_CheckFramebufferStatus
typedef GLenum (*PFNGLCHECKFRAMEBUFFERSTATUSPROC_ALT)(GLenum);
static inline GLenum glCheckFramebufferStatus(GLenum target1)
{
#ifdef __cplusplus
	static PFNGLCHECKFRAMEBUFFERSTATUSPROC_ALT fn=(PFNGLCHECKFRAMEBUFFERSTATUSPROC_ALT)glaltGetProcAddressVersion("glCheckFramebufferStatus",3,2);
#else
	static PFNGLCHECKFRAMEBUFFERSTATUSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCHECKFRAMEBUFFERSTATUSPROC_ALT)glaltGetProcAddressVersion("glCheckFramebufferStatus",3,2); }
#endif
	return fn(target1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_ClampColor
#define GL_ALT_FUNDEF_ClampColor
typedef void (*PFNGLCLAMPCOLORPROC_ALT)(GLenum,GLenum);
static inline void glClampColor(GLenum target1,GLenum clamp1)
{
#ifdef __cplusplus
	static PFNGLCLAMPCOLORPROC_ALT fn=(PFNGLCLAMPCOLORPROC_ALT)glaltGetProcAddressVersion("glClampColor",3,2);
#else
	static PFNGLCLAMPCOLORPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCLAMPCOLORPROC_ALT)glaltGetProcAddressVersion("glClampColor",3,2); }
#endif
	 fn(target1,clamp1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_ClearBufferfi
#define GL_ALT_FUNDEF_ClearBufferfi
typedef void (*PFNGLCLEARBUFFERFIPROC_ALT)(GLenum,GLint,GLfloat,GLint);
static inline void glClearBufferfi(GLenum buffer1,GLint drawbuffer1,GLfloat depth1,GLint stencil1)
{
#ifdef __cplusplus
	static PFNGLCLEARBUFFERFIPROC_ALT fn=(PFNGLCLEARBUFFERFIPROC_ALT)glaltGetProcAddressVersion("glClearBufferfi",3,2);
#else
	static PFNGLCLEARBUFFERFIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCLEARBUFFERFIPROC_ALT)glaltGetProcAddressVersion("glClearBufferfi",3,2); }
#endif
	 fn(buffer1,drawbuffer1,depth1,stencil1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_ClearBufferfv
#define GL_ALT_FUNDEF_ClearBufferfv
typedef void (*PFNGLCLEARBUFFERFVPROC_ALT)(GLenum,GLint,const GLfloat *);
static inline void glClearBufferfv(GLenum buffer1,GLint drawbuffer1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLCLEARBUFFERFVPROC_ALT fn=(PFNGLCLEARBUFFERFVPROC_ALT)glaltGetProcAddressVersion("glClearBufferfv",3,2);
#else
	static PFNGLCLEARBUFFERFVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCLEARBUFFERFVPROC_ALT)glaltGetProcAddressVersion("glClearBufferfv",3,2); }
#endif
	 fn(buffer1,drawbuffer1,value1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_ClearBufferiv
#define GL_ALT_FUNDEF_ClearBufferiv
typedef void (*PFNGLCLEARBUFFERIVPROC_ALT)(GLenum,GLint,const GLint *);
static inline void glClearBufferiv(GLenum buffer1,GLint drawbuffer1,const GLint * value1)
{
#ifdef __cplusplus
	static PFNGLCLEARBUFFERIVPROC_ALT fn=(PFNGLCLEARBUFFERIVPROC_ALT)glaltGetProcAddressVersion("glClearBufferiv",3,2);
#else
	static PFNGLCLEARBUFFERIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCLEARBUFFERIVPROC_ALT)glaltGetProcAddressVersion("glClearBufferiv",3,2); }
#endif
	 fn(buffer1,drawbuffer1,value1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_ClearBufferuiv
#define GL_ALT_FUNDEF_ClearBufferuiv
typedef void (*PFNGLCLEARBUFFERUIVPROC_ALT)(GLenum,GLint,const GLuint *);
static inline void glClearBufferuiv(GLenum buffer1,GLint drawbuffer1,const GLuint * value1)
{
#ifdef __cplusplus
	static PFNGLCLEARBUFFERUIVPROC_ALT fn=(PFNGLCLEARBUFFERUIVPROC_ALT)glaltGetProcAddressVersion("glClearBufferuiv",3,2);
#else
	static PFNGLCLEARBUFFERUIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCLEARBUFFERUIVPROC_ALT)glaltGetProcAddressVersion("glClearBufferuiv",3,2); }
#endif
	 fn(buffer1,drawbuffer1,value1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_ClientWaitSync
#define GL_ALT_FUNDEF_ClientWaitSync
typedef GLenum (*PFNGLCLIENTWAITSYNCPROC_ALT)(GLsync,GLbitfield,GLuint64);
static inline GLenum glClientWaitSync(GLsync sync1,GLbitfield flags1,GLuint64 timeout1)
{
#ifdef __cplusplus
	static PFNGLCLIENTWAITSYNCPROC_ALT fn=(PFNGLCLIENTWAITSYNCPROC_ALT)glaltGetProcAddressVersion("glClientWaitSync",3,2);
#else
	static PFNGLCLIENTWAITSYNCPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCLIENTWAITSYNCPROC_ALT)glaltGetProcAddressVersion("glClientWaitSync",3,2); }
#endif
	return fn(sync1,flags1,timeout1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_ColorMaski
#define GL_ALT_FUNDEF_ColorMaski
typedef void (*PFNGLCOLORMASKIPROC_ALT)(GLuint,GLboolean,GLboolean,GLboolean,GLboolean);
static inline void glColorMaski(GLuint index1,GLboolean r1,GLboolean g1,GLboolean b1,GLboolean a1)
{
#ifdef __cplusplus
	static PFNGLCOLORMASKIPROC_ALT fn=(PFNGLCOLORMASKIPROC_ALT)glaltGetProcAddressVersion("glColorMaski",3,2);
#else
	static PFNGLCOLORMASKIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCOLORMASKIPROC_ALT)glaltGetProcAddressVersion("glColorMaski",3,2); }
#endif
	 fn(index1,r1,g1,b1,a1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_CompileShader
#define GL_ALT_FUNDEF_CompileShader
typedef void (*PFNGLCOMPILESHADERPROC_ALT)(GLuint);
static inline void glCompileShader(GLuint shader1)
{
#ifdef __cplusplus
	static PFNGLCOMPILESHADERPROC_ALT fn=(PFNGLCOMPILESHADERPROC_ALT)glaltGetProcAddressVersion("glCompileShader",3,2);
#else
	static PFNGLCOMPILESHADERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCOMPILESHADERPROC_ALT)glaltGetProcAddressVersion("glCompileShader",3,2); }
#endif
	 fn(shader1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_CompressedTexImage1D
#define GL_ALT_FUNDEF_CompressedTexImage1D
typedef void (*PFNGLCOMPRESSEDTEXIMAGE1DPROC_ALT)(GLenum,GLint,GLenum,GLsizei,GLint,GLsizei,const void *);
static inline void glCompressedTexImage1D(GLenum target1,GLint level1,GLenum internalformat1,GLsizei width1,GLint border1,GLsizei imageSize1,const void * data1)
{
#ifdef __cplusplus
	static PFNGLCOMPRESSEDTEXIMAGE1DPROC_ALT fn=(PFNGLCOMPRESSEDTEXIMAGE1DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexImage1D",3,2);
#else
	static PFNGLCOMPRESSEDTEXIMAGE1DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCOMPRESSEDTEXIMAGE1DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexImage1D",3,2); }
#endif
	 fn(target1,level1,internalformat1,width1,border1,imageSize1,data1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_CompressedTexImage2D
#define GL_ALT_FUNDEF_CompressedTexImage2D
typedef void (*PFNGLCOMPRESSEDTEXIMAGE2DPROC_ALT)(GLenum,GLint,GLenum,GLsizei,GLsizei,GLint,GLsizei,const void *);
static inline void glCompressedTexImage2D(GLenum target1,GLint level1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLint border1,GLsizei imageSize1,const void * data1)
{
#ifdef __cplusplus
	static PFNGLCOMPRESSEDTEXIMAGE2DPROC_ALT fn=(PFNGLCOMPRESSEDTEXIMAGE2DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexImage2D",3,2);
#else
	static PFNGLCOMPRESSEDTEXIMAGE2DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCOMPRESSEDTEXIMAGE2DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexImage2D",3,2); }
#endif
	 fn(target1,level1,internalformat1,width1,height1,border1,imageSize1,data1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_CompressedTexImage3D
#define GL_ALT_FUNDEF_CompressedTexImage3D
typedef void (*PFNGLCOMPRESSEDTEXIMAGE3DPROC_ALT)(GLenum,GLint,GLenum,GLsizei,GLsizei,GLsizei,GLint,GLsizei,const void *);
static inline void glCompressedTexImage3D(GLenum target1,GLint level1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLint border1,GLsizei imageSize1,const void * data1)
{
#ifdef __cplusplus
	static PFNGLCOMPRESSEDTEXIMAGE3DPROC_ALT fn=(PFNGLCOMPRESSEDTEXIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexImage3D",3,2);
#else
	static PFNGLCOMPRESSEDTEXIMAGE3DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCOMPRESSEDTEXIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexImage3D",3,2); }
#endif
	 fn(target1,level1,internalformat1,width1,height1,depth1,border1,imageSize1,data1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_CompressedTexSubImage1D
#define GL_ALT_FUNDEF_CompressedTexSubImage1D
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC_ALT)(GLenum,GLint,GLint,GLsizei,GLenum,GLsizei,const void *);
static inline void glCompressedTexSubImage1D(GLenum target1,GLint level1,GLint xoffset1,GLsizei width1,GLenum format1,GLsizei imageSize1,const void * data1)
{
#ifdef __cplusplus
	static PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC_ALT fn=(PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexSubImage1D",3,2);
#else
	static PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexSubImage1D",3,2); }
#endif
	 fn(target1,level1,xoffset1,width1,format1,imageSize1,data1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_CompressedTexSubImage2D
#define GL_ALT_FUNDEF_CompressedTexSubImage2D
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC_ALT)(GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLsizei,const void *);
static inline void glCompressedTexSubImage2D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLsizei width1,GLsizei height1,GLenum format1,GLsizei imageSize1,const void * data1)
{
#ifdef __cplusplus
	static PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC_ALT fn=(PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexSubImage2D",3,2);
#else
	static PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexSubImage2D",3,2); }
#endif
	 fn(target1,level1,xoffset1,yoffset1,width1,height1,format1,imageSize1,data1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_CompressedTexSubImage3D
#define GL_ALT_FUNDEF_CompressedTexSubImage3D
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC_ALT)(GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLsizei,const void *);
static inline void glCompressedTexSubImage3D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLsizei width1,GLsizei height1,GLsizei depth1,GLenum format1,GLsizei imageSize1,const void * data1)
{
#ifdef __cplusplus
	static PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC_ALT fn=(PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexSubImage3D",3,2);
#else
	static PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexSubImage3D",3,2); }
#endif
	 fn(target1,level1,xoffset1,yoffset1,zoffset1,width1,height1,depth1,format1,imageSize1,data1);
}
#endif
#endif

#ifndef GL_VERSION_3_1
#ifndef	GL_ALT_FUNDEF_CopyBufferSubData
#define GL_ALT_FUNDEF_CopyBufferSubData
typedef void (*PFNGLCOPYBUFFERSUBDATAPROC_ALT)(GLenum,GLenum,GLintptr,GLintptr,GLsizeiptr);
static inline void glCopyBufferSubData(GLenum readTarget1,GLenum writeTarget1,GLintptr readOffset1,GLintptr writeOffset1,GLsizeiptr size1)
{
#ifdef __cplusplus
	static PFNGLCOPYBUFFERSUBDATAPROC_ALT fn=(PFNGLCOPYBUFFERSUBDATAPROC_ALT)glaltGetProcAddressVersion("glCopyBufferSubData",3,2);
#else
	static PFNGLCOPYBUFFERSUBDATAPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCOPYBUFFERSUBDATAPROC_ALT)glaltGetProcAddressVersion("glCopyBufferSubData",3,2); }
#endif
	 fn(readTarget1,writeTarget1,readOffset1,writeOffset1,size1);
}
#endif
#endif

#ifndef GL_VERSION_1_2
#ifndef	GL_ALT_FUNDEF_CopyTexSubImage3D
#define GL_ALT_FUNDEF_CopyTexSubImage3D
typedef void (*PFNGLCOPYTEXSUBIMAGE3DPROC_ALT)(GLenum,GLint,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
static inline void glCopyTexSubImage3D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
#ifdef __cplusplus
	static PFNGLCOPYTEXSUBIMAGE3DPROC_ALT fn=(PFNGLCOPYTEXSUBIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glCopyTexSubImage3D",3,2);
#else
	static PFNGLCOPYTEXSUBIMAGE3DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCOPYTEXSUBIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glCopyTexSubImage3D",3,2); }
#endif
	 fn(target1,level1,xoffset1,yoffset1,zoffset1,x1,y1,width1,height1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_CreateProgram
#define GL_ALT_FUNDEF_CreateProgram
typedef GLuint (*PFNGLCREATEPROGRAMPROC_ALT)();
static inline GLuint glCreateProgram()
{
#ifdef __cplusplus
	static PFNGLCREATEPROGRAMPROC_ALT fn=(PFNGLCREATEPROGRAMPROC_ALT)glaltGetProcAddressVersion("glCreateProgram",3,2);
#else
	static PFNGLCREATEPROGRAMPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCREATEPROGRAMPROC_ALT)glaltGetProcAddressVersion("glCreateProgram",3,2); }
#endif
	return fn();
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_CreateShader
#define GL_ALT_FUNDEF_CreateShader
typedef GLuint (*PFNGLCREATESHADERPROC_ALT)(GLenum);
static inline GLuint glCreateShader(GLenum type1)
{
#ifdef __cplusplus
	static PFNGLCREATESHADERPROC_ALT fn=(PFNGLCREATESHADERPROC_ALT)glaltGetProcAddressVersion("glCreateShader",3,2);
#else
	static PFNGLCREATESHADERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCREATESHADERPROC_ALT)glaltGetProcAddressVersion("glCreateShader",3,2); }
#endif
	return fn(type1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_DeleteBuffers
#define GL_ALT_FUNDEF_DeleteBuffers
typedef void (*PFNGLDELETEBUFFERSPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteBuffers(GLsizei n1,const GLuint * buffers1)
{
#ifdef __cplusplus
	static PFNGLDELETEBUFFERSPROC_ALT fn=(PFNGLDELETEBUFFERSPROC_ALT)glaltGetProcAddressVersion("glDeleteBuffers",3,2);
#else
	static PFNGLDELETEBUFFERSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDELETEBUFFERSPROC_ALT)glaltGetProcAddressVersion("glDeleteBuffers",3,2); }
#endif
	 fn(n1,buffers1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_DeleteFramebuffers
#define GL_ALT_FUNDEF_DeleteFramebuffers
typedef void (*PFNGLDELETEFRAMEBUFFERSPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteFramebuffers(GLsizei n1,const GLuint * framebuffers1)
{
#ifdef __cplusplus
	static PFNGLDELETEFRAMEBUFFERSPROC_ALT fn=(PFNGLDELETEFRAMEBUFFERSPROC_ALT)glaltGetProcAddressVersion("glDeleteFramebuffers",3,2);
#else
	static PFNGLDELETEFRAMEBUFFERSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDELETEFRAMEBUFFERSPROC_ALT)glaltGetProcAddressVersion("glDeleteFramebuffers",3,2); }
#endif
	 fn(n1,framebuffers1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_DeleteProgram
#define GL_ALT_FUNDEF_DeleteProgram
typedef void (*PFNGLDELETEPROGRAMPROC_ALT)(GLuint);
static inline void glDeleteProgram(GLuint program1)
{
#ifdef __cplusplus
	static PFNGLDELETEPROGRAMPROC_ALT fn=(PFNGLDELETEPROGRAMPROC_ALT)glaltGetProcAddressVersion("glDeleteProgram",3,2);
#else
	static PFNGLDELETEPROGRAMPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDELETEPROGRAMPROC_ALT)glaltGetProcAddressVersion("glDeleteProgram",3,2); }
#endif
	 fn(program1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_DeleteQueries
#define GL_ALT_FUNDEF_DeleteQueries
typedef void (*PFNGLDELETEQUERIESPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteQueries(GLsizei n1,const GLuint * ids1)
{
#ifdef __cplusplus
	static PFNGLDELETEQUERIESPROC_ALT fn=(PFNGLDELETEQUERIESPROC_ALT)glaltGetProcAddressVersion("glDeleteQueries",3,2);
#else
	static PFNGLDELETEQUERIESPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDELETEQUERIESPROC_ALT)glaltGetProcAddressVersion("glDeleteQueries",3,2); }
#endif
	 fn(n1,ids1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_DeleteRenderbuffers
#define GL_ALT_FUNDEF_DeleteRenderbuffers
typedef void (*PFNGLDELETERENDERBUFFERSPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteRenderbuffers(GLsizei n1,const GLuint * renderbuffers1)
{
#ifdef __cplusplus
	static PFNGLDELETERENDERBUFFERSPROC_ALT fn=(PFNGLDELETERENDERBUFFERSPROC_ALT)glaltGetProcAddressVersion("glDeleteRenderbuffers",3,2);
#else
	static PFNGLDELETERENDERBUFFERSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDELETERENDERBUFFERSPROC_ALT)glaltGetProcAddressVersion("glDeleteRenderbuffers",3,2); }
#endif
	 fn(n1,renderbuffers1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_DeleteShader
#define GL_ALT_FUNDEF_DeleteShader
typedef void (*PFNGLDELETESHADERPROC_ALT)(GLuint);
static inline void glDeleteShader(GLuint shader1)
{
#ifdef __cplusplus
	static PFNGLDELETESHADERPROC_ALT fn=(PFNGLDELETESHADERPROC_ALT)glaltGetProcAddressVersion("glDeleteShader",3,2);
#else
	static PFNGLDELETESHADERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDELETESHADERPROC_ALT)glaltGetProcAddressVersion("glDeleteShader",3,2); }
#endif
	 fn(shader1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_DeleteSync
#define GL_ALT_FUNDEF_DeleteSync
typedef void (*PFNGLDELETESYNCPROC_ALT)(GLsync);
static inline void glDeleteSync(GLsync sync1)
{
#ifdef __cplusplus
	static PFNGLDELETESYNCPROC_ALT fn=(PFNGLDELETESYNCPROC_ALT)glaltGetProcAddressVersion("glDeleteSync",3,2);
#else
	static PFNGLDELETESYNCPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDELETESYNCPROC_ALT)glaltGetProcAddressVersion("glDeleteSync",3,2); }
#endif
	 fn(sync1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_DeleteVertexArrays
#define GL_ALT_FUNDEF_DeleteVertexArrays
typedef void (*PFNGLDELETEVERTEXARRAYSPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteVertexArrays(GLsizei n1,const GLuint * arrays1)
{
#ifdef __cplusplus
	static PFNGLDELETEVERTEXARRAYSPROC_ALT fn=(PFNGLDELETEVERTEXARRAYSPROC_ALT)glaltGetProcAddressVersion("glDeleteVertexArrays",3,2);
#else
	static PFNGLDELETEVERTEXARRAYSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDELETEVERTEXARRAYSPROC_ALT)glaltGetProcAddressVersion("glDeleteVertexArrays",3,2); }
#endif
	 fn(n1,arrays1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_DetachShader
#define GL_ALT_FUNDEF_DetachShader
typedef void (*PFNGLDETACHSHADERPROC_ALT)(GLuint,GLuint);
static inline void glDetachShader(GLuint program1,GLuint shader1)
{
#ifdef __cplusplus
	static PFNGLDETACHSHADERPROC_ALT fn=(PFNGLDETACHSHADERPROC_ALT)glaltGetProcAddressVersion("glDetachShader",3,2);
#else
	static PFNGLDETACHSHADERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDETACHSHADERPROC_ALT)glaltGetProcAddressVersion("glDetachShader",3,2); }
#endif
	 fn(program1,shader1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_DisableVertexAttribArray
#define GL_ALT_FUNDEF_DisableVertexAttribArray
typedef void (*PFNGLDISABLEVERTEXATTRIBARRAYPROC_ALT)(GLuint);
static inline void glDisableVertexAttribArray(GLuint index1)
{
#ifdef __cplusplus
	static PFNGLDISABLEVERTEXATTRIBARRAYPROC_ALT fn=(PFNGLDISABLEVERTEXATTRIBARRAYPROC_ALT)glaltGetProcAddressVersion("glDisableVertexAttribArray",3,2);
#else
	static PFNGLDISABLEVERTEXATTRIBARRAYPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDISABLEVERTEXATTRIBARRAYPROC_ALT)glaltGetProcAddressVersion("glDisableVertexAttribArray",3,2); }
#endif
	 fn(index1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_Disablei
#define GL_ALT_FUNDEF_Disablei
typedef void (*PFNGLDISABLEIPROC_ALT)(GLenum,GLuint);
static inline void glDisablei(GLenum target1,GLuint index1)
{
#ifdef __cplusplus
	static PFNGLDISABLEIPROC_ALT fn=(PFNGLDISABLEIPROC_ALT)glaltGetProcAddressVersion("glDisablei",3,2);
#else
	static PFNGLDISABLEIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDISABLEIPROC_ALT)glaltGetProcAddressVersion("glDisablei",3,2); }
#endif
	 fn(target1,index1);
}
#endif
#endif

#ifndef GL_VERSION_3_1
#ifndef	GL_ALT_FUNDEF_DrawArraysInstanced
#define GL_ALT_FUNDEF_DrawArraysInstanced
typedef void (*PFNGLDRAWARRAYSINSTANCEDPROC_ALT)(GLenum,GLint,GLsizei,GLsizei);
static inline void glDrawArraysInstanced(GLenum mode1,GLint first1,GLsizei count1,GLsizei instancecount1)
{
#ifdef __cplusplus
	static PFNGLDRAWARRAYSINSTANCEDPROC_ALT fn=(PFNGLDRAWARRAYSINSTANCEDPROC_ALT)glaltGetProcAddressVersion("glDrawArraysInstanced",3,2);
#else
	static PFNGLDRAWARRAYSINSTANCEDPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDRAWARRAYSINSTANCEDPROC_ALT)glaltGetProcAddressVersion("glDrawArraysInstanced",3,2); }
#endif
	 fn(mode1,first1,count1,instancecount1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_DrawBuffers
#define GL_ALT_FUNDEF_DrawBuffers
typedef void (*PFNGLDRAWBUFFERSPROC_ALT)(GLsizei,const GLenum *);
static inline void glDrawBuffers(GLsizei n1,const GLenum * bufs1)
{
#ifdef __cplusplus
	static PFNGLDRAWBUFFERSPROC_ALT fn=(PFNGLDRAWBUFFERSPROC_ALT)glaltGetProcAddressVersion("glDrawBuffers",3,2);
#else
	static PFNGLDRAWBUFFERSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDRAWBUFFERSPROC_ALT)glaltGetProcAddressVersion("glDrawBuffers",3,2); }
#endif
	 fn(n1,bufs1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_DrawElementsBaseVertex
#define GL_ALT_FUNDEF_DrawElementsBaseVertex
typedef void (*PFNGLDRAWELEMENTSBASEVERTEXPROC_ALT)(GLenum,GLsizei,GLenum,const void *,GLint);
static inline void glDrawElementsBaseVertex(GLenum mode1,GLsizei count1,GLenum type1,const void * indices1,GLint basevertex1)
{
#ifdef __cplusplus
	static PFNGLDRAWELEMENTSBASEVERTEXPROC_ALT fn=(PFNGLDRAWELEMENTSBASEVERTEXPROC_ALT)glaltGetProcAddressVersion("glDrawElementsBaseVertex",3,2);
#else
	static PFNGLDRAWELEMENTSBASEVERTEXPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDRAWELEMENTSBASEVERTEXPROC_ALT)glaltGetProcAddressVersion("glDrawElementsBaseVertex",3,2); }
#endif
	 fn(mode1,count1,type1,indices1,basevertex1);
}
#endif
#endif

#ifndef GL_VERSION_3_1
#ifndef	GL_ALT_FUNDEF_DrawElementsInstanced
#define GL_ALT_FUNDEF_DrawElementsInstanced
typedef void (*PFNGLDRAWELEMENTSINSTANCEDPROC_ALT)(GLenum,GLsizei,GLenum,const void *,GLsizei);
static inline void glDrawElementsInstanced(GLenum mode1,GLsizei count1,GLenum type1,const void * indices1,GLsizei instancecount1)
{
#ifdef __cplusplus
	static PFNGLDRAWELEMENTSINSTANCEDPROC_ALT fn=(PFNGLDRAWELEMENTSINSTANCEDPROC_ALT)glaltGetProcAddressVersion("glDrawElementsInstanced",3,2);
#else
	static PFNGLDRAWELEMENTSINSTANCEDPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDRAWELEMENTSINSTANCEDPROC_ALT)glaltGetProcAddressVersion("glDrawElementsInstanced",3,2); }
#endif
	 fn(mode1,count1,type1,indices1,instancecount1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_DrawElementsInstancedBaseVertex
#define GL_ALT_FUNDEF_DrawElementsInstancedBaseVertex
typedef void (*PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC_ALT)(GLenum,GLsizei,GLenum,const void *,GLsizei,GLint);
static inline void glDrawElementsInstancedBaseVertex(GLenum mode1,GLsizei count1,GLenum type1,const void * indices1,GLsizei instancecount1,GLint basevertex1)
{
#ifdef __cplusplus
	static PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC_ALT fn=(PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC_ALT)glaltGetProcAddressVersion("glDrawElementsInstancedBaseVertex",3,2);
#else
	static PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC_ALT)glaltGetProcAddressVersion("glDrawElementsInstancedBaseVertex",3,2); }
#endif
	 fn(mode1,count1,type1,indices1,instancecount1,basevertex1);
}
#endif
#endif

#ifndef GL_VERSION_1_2
#ifndef	GL_ALT_FUNDEF_DrawRangeElements
#define GL_ALT_FUNDEF_DrawRangeElements
typedef void (*PFNGLDRAWRANGEELEMENTSPROC_ALT)(GLenum,GLuint,GLuint,GLsizei,GLenum,const void *);
static inline void glDrawRangeElements(GLenum mode1,GLuint start1,GLuint end1,GLsizei count1,GLenum type1,const void * indices1)
{
#ifdef __cplusplus
	static PFNGLDRAWRANGEELEMENTSPROC_ALT fn=(PFNGLDRAWRANGEELEMENTSPROC_ALT)glaltGetProcAddressVersion("glDrawRangeElements",3,2);
#else
	static PFNGLDRAWRANGEELEMENTSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDRAWRANGEELEMENTSPROC_ALT)glaltGetProcAddressVersion("glDrawRangeElements",3,2); }
#endif
	 fn(mode1,start1,end1,count1,type1,indices1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_DrawRangeElementsBaseVertex
#define GL_ALT_FUNDEF_DrawRangeElementsBaseVertex
typedef void (*PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC_ALT)(GLenum,GLuint,GLuint,GLsizei,GLenum,const void *,GLint);
static inline void glDrawRangeElementsBaseVertex(GLenum mode1,GLuint start1,GLuint end1,GLsizei count1,GLenum type1,const void * indices1,GLint basevertex1)
{
#ifdef __cplusplus
	static PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC_ALT fn=(PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC_ALT)glaltGetProcAddressVersion("glDrawRangeElementsBaseVertex",3,2);
#else
	static PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC_ALT)glaltGetProcAddressVersion("glDrawRangeElementsBaseVertex",3,2); }
#endif
	 fn(mode1,start1,end1,count1,type1,indices1,basevertex1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_EnableVertexAttribArray
#define GL_ALT_FUNDEF_EnableVertexAttribArray
typedef void (*PFNGLENABLEVERTEXATTRIBARRAYPROC_ALT)(GLuint);
static inline void glEnableVertexAttribArray(GLuint index1)
{
#ifdef __cplusplus
	static PFNGLENABLEVERTEXATTRIBARRAYPROC_ALT fn=(PFNGLENABLEVERTEXATTRIBARRAYPROC_ALT)glaltGetProcAddressVersion("glEnableVertexAttribArray",3,2);
#else
	static PFNGLENABLEVERTEXATTRIBARRAYPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLENABLEVERTEXATTRIBARRAYPROC_ALT)glaltGetProcAddressVersion("glEnableVertexAttribArray",3,2); }
#endif
	 fn(index1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_Enablei
#define GL_ALT_FUNDEF_Enablei
typedef void (*PFNGLENABLEIPROC_ALT)(GLenum,GLuint);
static inline void glEnablei(GLenum target1,GLuint index1)
{
#ifdef __cplusplus
	static PFNGLENABLEIPROC_ALT fn=(PFNGLENABLEIPROC_ALT)glaltGetProcAddressVersion("glEnablei",3,2);
#else
	static PFNGLENABLEIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLENABLEIPROC_ALT)glaltGetProcAddressVersion("glEnablei",3,2); }
#endif
	 fn(target1,index1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_EndConditionalRender
#define GL_ALT_FUNDEF_EndConditionalRender
typedef void (*PFNGLENDCONDITIONALRENDERPROC_ALT)();
static inline void glEndConditionalRender()
{
#ifdef __cplusplus
	static PFNGLENDCONDITIONALRENDERPROC_ALT fn=(PFNGLENDCONDITIONALRENDERPROC_ALT)glaltGetProcAddressVersion("glEndConditionalRender",3,2);
#else
	static PFNGLENDCONDITIONALRENDERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLENDCONDITIONALRENDERPROC_ALT)glaltGetProcAddressVersion("glEndConditionalRender",3,2); }
#endif
	 fn();
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_EndQuery
#define GL_ALT_FUNDEF_EndQuery
typedef void (*PFNGLENDQUERYPROC_ALT)(GLenum);
static inline void glEndQuery(GLenum target1)
{
#ifdef __cplusplus
	static PFNGLENDQUERYPROC_ALT fn=(PFNGLENDQUERYPROC_ALT)glaltGetProcAddressVersion("glEndQuery",3,2);
#else
	static PFNGLENDQUERYPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLENDQUERYPROC_ALT)glaltGetProcAddressVersion("glEndQuery",3,2); }
#endif
	 fn(target1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_EndTransformFeedback
#define GL_ALT_FUNDEF_EndTransformFeedback
typedef void (*PFNGLENDTRANSFORMFEEDBACKPROC_ALT)();
static inline void glEndTransformFeedback()
{
#ifdef __cplusplus
	static PFNGLENDTRANSFORMFEEDBACKPROC_ALT fn=(PFNGLENDTRANSFORMFEEDBACKPROC_ALT)glaltGetProcAddressVersion("glEndTransformFeedback",3,2);
#else
	static PFNGLENDTRANSFORMFEEDBACKPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLENDTRANSFORMFEEDBACKPROC_ALT)glaltGetProcAddressVersion("glEndTransformFeedback",3,2); }
#endif
	 fn();
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_FenceSync
#define GL_ALT_FUNDEF_FenceSync
typedef GLsync (*PFNGLFENCESYNCPROC_ALT)(GLenum,GLbitfield);
static inline GLsync glFenceSync(GLenum condition1,GLbitfield flags1)
{
#ifdef __cplusplus
	static PFNGLFENCESYNCPROC_ALT fn=(PFNGLFENCESYNCPROC_ALT)glaltGetProcAddressVersion("glFenceSync",3,2);
#else
	static PFNGLFENCESYNCPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLFENCESYNCPROC_ALT)glaltGetProcAddressVersion("glFenceSync",3,2); }
#endif
	return fn(condition1,flags1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_FlushMappedBufferRange
#define GL_ALT_FUNDEF_FlushMappedBufferRange
typedef void (*PFNGLFLUSHMAPPEDBUFFERRANGEPROC_ALT)(GLenum,GLintptr,GLsizeiptr);
static inline void glFlushMappedBufferRange(GLenum target1,GLintptr offset1,GLsizeiptr length1)
{
#ifdef __cplusplus
	static PFNGLFLUSHMAPPEDBUFFERRANGEPROC_ALT fn=(PFNGLFLUSHMAPPEDBUFFERRANGEPROC_ALT)glaltGetProcAddressVersion("glFlushMappedBufferRange",3,2);
#else
	static PFNGLFLUSHMAPPEDBUFFERRANGEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLFLUSHMAPPEDBUFFERRANGEPROC_ALT)glaltGetProcAddressVersion("glFlushMappedBufferRange",3,2); }
#endif
	 fn(target1,offset1,length1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_FramebufferRenderbuffer
#define GL_ALT_FUNDEF_FramebufferRenderbuffer
typedef void (*PFNGLFRAMEBUFFERRENDERBUFFERPROC_ALT)(GLenum,GLenum,GLenum,GLuint);
static inline void glFramebufferRenderbuffer(GLenum target1,GLenum attachment1,GLenum renderbuffertarget1,GLuint renderbuffer1)
{
#ifdef __cplusplus
	static PFNGLFRAMEBUFFERRENDERBUFFERPROC_ALT fn=(PFNGLFRAMEBUFFERRENDERBUFFERPROC_ALT)glaltGetProcAddressVersion("glFramebufferRenderbuffer",3,2);
#else
	static PFNGLFRAMEBUFFERRENDERBUFFERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLFRAMEBUFFERRENDERBUFFERPROC_ALT)glaltGetProcAddressVersion("glFramebufferRenderbuffer",3,2); }
#endif
	 fn(target1,attachment1,renderbuffertarget1,renderbuffer1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_FramebufferTexture
#define GL_ALT_FUNDEF_FramebufferTexture
typedef void (*PFNGLFRAMEBUFFERTEXTUREPROC_ALT)(GLenum,GLenum,GLuint,GLint);
static inline void glFramebufferTexture(GLenum target1,GLenum attachment1,GLuint texture1,GLint level1)
{
#ifdef __cplusplus
	static PFNGLFRAMEBUFFERTEXTUREPROC_ALT fn=(PFNGLFRAMEBUFFERTEXTUREPROC_ALT)glaltGetProcAddressVersion("glFramebufferTexture",3,2);
#else
	static PFNGLFRAMEBUFFERTEXTUREPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLFRAMEBUFFERTEXTUREPROC_ALT)glaltGetProcAddressVersion("glFramebufferTexture",3,2); }
#endif
	 fn(target1,attachment1,texture1,level1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_FramebufferTexture1D
#define GL_ALT_FUNDEF_FramebufferTexture1D
typedef void (*PFNGLFRAMEBUFFERTEXTURE1DPROC_ALT)(GLenum,GLenum,GLenum,GLuint,GLint);
static inline void glFramebufferTexture1D(GLenum target1,GLenum attachment1,GLenum textarget1,GLuint texture1,GLint level1)
{
#ifdef __cplusplus
	static PFNGLFRAMEBUFFERTEXTURE1DPROC_ALT fn=(PFNGLFRAMEBUFFERTEXTURE1DPROC_ALT)glaltGetProcAddressVersion("glFramebufferTexture1D",3,2);
#else
	static PFNGLFRAMEBUFFERTEXTURE1DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLFRAMEBUFFERTEXTURE1DPROC_ALT)glaltGetProcAddressVersion("glFramebufferTexture1D",3,2); }
#endif
	 fn(target1,attachment1,textarget1,texture1,level1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_FramebufferTexture2D
#define GL_ALT_FUNDEF_FramebufferTexture2D
typedef void (*PFNGLFRAMEBUFFERTEXTURE2DPROC_ALT)(GLenum,GLenum,GLenum,GLuint,GLint);
static inline void glFramebufferTexture2D(GLenum target1,GLenum attachment1,GLenum textarget1,GLuint texture1,GLint level1)
{
#ifdef __cplusplus
	static PFNGLFRAMEBUFFERTEXTURE2DPROC_ALT fn=(PFNGLFRAMEBUFFERTEXTURE2DPROC_ALT)glaltGetProcAddressVersion("glFramebufferTexture2D",3,2);
#else
	static PFNGLFRAMEBUFFERTEXTURE2DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLFRAMEBUFFERTEXTURE2DPROC_ALT)glaltGetProcAddressVersion("glFramebufferTexture2D",3,2); }
#endif
	 fn(target1,attachment1,textarget1,texture1,level1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_FramebufferTexture3D
#define GL_ALT_FUNDEF_FramebufferTexture3D
typedef void (*PFNGLFRAMEBUFFERTEXTURE3DPROC_ALT)(GLenum,GLenum,GLenum,GLuint,GLint,GLint);
static inline void glFramebufferTexture3D(GLenum target1,GLenum attachment1,GLenum textarget1,GLuint texture1,GLint level1,GLint zoffset1)
{
#ifdef __cplusplus
	static PFNGLFRAMEBUFFERTEXTURE3DPROC_ALT fn=(PFNGLFRAMEBUFFERTEXTURE3DPROC_ALT)glaltGetProcAddressVersion("glFramebufferTexture3D",3,2);
#else
	static PFNGLFRAMEBUFFERTEXTURE3DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLFRAMEBUFFERTEXTURE3DPROC_ALT)glaltGetProcAddressVersion("glFramebufferTexture3D",3,2); }
#endif
	 fn(target1,attachment1,textarget1,texture1,level1,zoffset1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_FramebufferTextureLayer
#define GL_ALT_FUNDEF_FramebufferTextureLayer
typedef void (*PFNGLFRAMEBUFFERTEXTURELAYERPROC_ALT)(GLenum,GLenum,GLuint,GLint,GLint);
static inline void glFramebufferTextureLayer(GLenum target1,GLenum attachment1,GLuint texture1,GLint level1,GLint layer1)
{
#ifdef __cplusplus
	static PFNGLFRAMEBUFFERTEXTURELAYERPROC_ALT fn=(PFNGLFRAMEBUFFERTEXTURELAYERPROC_ALT)glaltGetProcAddressVersion("glFramebufferTextureLayer",3,2);
#else
	static PFNGLFRAMEBUFFERTEXTURELAYERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLFRAMEBUFFERTEXTURELAYERPROC_ALT)glaltGetProcAddressVersion("glFramebufferTextureLayer",3,2); }
#endif
	 fn(target1,attachment1,texture1,level1,layer1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_GenBuffers
#define GL_ALT_FUNDEF_GenBuffers
typedef void (*PFNGLGENBUFFERSPROC_ALT)(GLsizei,GLuint *);
static inline void glGenBuffers(GLsizei n1,GLuint * buffers1)
{
#ifdef __cplusplus
	static PFNGLGENBUFFERSPROC_ALT fn=(PFNGLGENBUFFERSPROC_ALT)glaltGetProcAddressVersion("glGenBuffers",3,2);
#else
	static PFNGLGENBUFFERSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGENBUFFERSPROC_ALT)glaltGetProcAddressVersion("glGenBuffers",3,2); }
#endif
	 fn(n1,buffers1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GenFramebuffers
#define GL_ALT_FUNDEF_GenFramebuffers
typedef void (*PFNGLGENFRAMEBUFFERSPROC_ALT)(GLsizei,GLuint *);
static inline void glGenFramebuffers(GLsizei n1,GLuint * framebuffers1)
{
#ifdef __cplusplus
	static PFNGLGENFRAMEBUFFERSPROC_ALT fn=(PFNGLGENFRAMEBUFFERSPROC_ALT)glaltGetProcAddressVersion("glGenFramebuffers",3,2);
#else
	static PFNGLGENFRAMEBUFFERSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGENFRAMEBUFFERSPROC_ALT)glaltGetProcAddressVersion("glGenFramebuffers",3,2); }
#endif
	 fn(n1,framebuffers1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_GenQueries
#define GL_ALT_FUNDEF_GenQueries
typedef void (*PFNGLGENQUERIESPROC_ALT)(GLsizei,GLuint *);
static inline void glGenQueries(GLsizei n1,GLuint * ids1)
{
#ifdef __cplusplus
	static PFNGLGENQUERIESPROC_ALT fn=(PFNGLGENQUERIESPROC_ALT)glaltGetProcAddressVersion("glGenQueries",3,2);
#else
	static PFNGLGENQUERIESPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGENQUERIESPROC_ALT)glaltGetProcAddressVersion("glGenQueries",3,2); }
#endif
	 fn(n1,ids1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GenRenderbuffers
#define GL_ALT_FUNDEF_GenRenderbuffers
typedef void (*PFNGLGENRENDERBUFFERSPROC_ALT)(GLsizei,GLuint *);
static inline void glGenRenderbuffers(GLsizei n1,GLuint * renderbuffers1)
{
#ifdef __cplusplus
	static PFNGLGENRENDERBUFFERSPROC_ALT fn=(PFNGLGENRENDERBUFFERSPROC_ALT)glaltGetProcAddressVersion("glGenRenderbuffers",3,2);
#else
	static PFNGLGENRENDERBUFFERSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGENRENDERBUFFERSPROC_ALT)glaltGetProcAddressVersion("glGenRenderbuffers",3,2); }
#endif
	 fn(n1,renderbuffers1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GenVertexArrays
#define GL_ALT_FUNDEF_GenVertexArrays
typedef void (*PFNGLGENVERTEXARRAYSPROC_ALT)(GLsizei,GLuint *);
static inline void glGenVertexArrays(GLsizei n1,GLuint * arrays1)
{
#ifdef __cplusplus
	static PFNGLGENVERTEXARRAYSPROC_ALT fn=(PFNGLGENVERTEXARRAYSPROC_ALT)glaltGetProcAddressVersion("glGenVertexArrays",3,2);
#else
	static PFNGLGENVERTEXARRAYSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGENVERTEXARRAYSPROC_ALT)glaltGetProcAddressVersion("glGenVertexArrays",3,2); }
#endif
	 fn(n1,arrays1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GenerateMipmap
#define GL_ALT_FUNDEF_GenerateMipmap
typedef void (*PFNGLGENERATEMIPMAPPROC_ALT)(GLenum);
static inline void glGenerateMipmap(GLenum target1)
{
#ifdef __cplusplus
	static PFNGLGENERATEMIPMAPPROC_ALT fn=(PFNGLGENERATEMIPMAPPROC_ALT)glaltGetProcAddressVersion("glGenerateMipmap",3,2);
#else
	static PFNGLGENERATEMIPMAPPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGENERATEMIPMAPPROC_ALT)glaltGetProcAddressVersion("glGenerateMipmap",3,2); }
#endif
	 fn(target1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetActiveAttrib
#define GL_ALT_FUNDEF_GetActiveAttrib
typedef void (*PFNGLGETACTIVEATTRIBPROC_ALT)(GLuint,GLuint,GLsizei,GLsizei *,GLint *,GLenum *,GLchar *);
static inline void glGetActiveAttrib(GLuint program1,GLuint index1,GLsizei bufSize1,GLsizei * length1,GLint * size1,GLenum * type1,GLchar * name1)
{
#ifdef __cplusplus
	static PFNGLGETACTIVEATTRIBPROC_ALT fn=(PFNGLGETACTIVEATTRIBPROC_ALT)glaltGetProcAddressVersion("glGetActiveAttrib",3,2);
#else
	static PFNGLGETACTIVEATTRIBPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETACTIVEATTRIBPROC_ALT)glaltGetProcAddressVersion("glGetActiveAttrib",3,2); }
#endif
	 fn(program1,index1,bufSize1,length1,size1,type1,name1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetActiveUniform
#define GL_ALT_FUNDEF_GetActiveUniform
typedef void (*PFNGLGETACTIVEUNIFORMPROC_ALT)(GLuint,GLuint,GLsizei,GLsizei *,GLint *,GLenum *,GLchar *);
static inline void glGetActiveUniform(GLuint program1,GLuint index1,GLsizei bufSize1,GLsizei * length1,GLint * size1,GLenum * type1,GLchar * name1)
{
#ifdef __cplusplus
	static PFNGLGETACTIVEUNIFORMPROC_ALT fn=(PFNGLGETACTIVEUNIFORMPROC_ALT)glaltGetProcAddressVersion("glGetActiveUniform",3,2);
#else
	static PFNGLGETACTIVEUNIFORMPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETACTIVEUNIFORMPROC_ALT)glaltGetProcAddressVersion("glGetActiveUniform",3,2); }
#endif
	 fn(program1,index1,bufSize1,length1,size1,type1,name1);
}
#endif
#endif

#ifndef GL_VERSION_3_1
#ifndef	GL_ALT_FUNDEF_GetActiveUniformBlockName
#define GL_ALT_FUNDEF_GetActiveUniformBlockName
typedef void (*PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC_ALT)(GLuint,GLuint,GLsizei,GLsizei *,GLchar *);
static inline void glGetActiveUniformBlockName(GLuint program1,GLuint uniformBlockIndex1,GLsizei bufSize1,GLsizei * length1,GLchar * uniformBlockName1)
{
#ifdef __cplusplus
	static PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC_ALT fn=(PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC_ALT)glaltGetProcAddressVersion("glGetActiveUniformBlockName",3,2);
#else
	static PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC_ALT)glaltGetProcAddressVersion("glGetActiveUniformBlockName",3,2); }
#endif
	 fn(program1,uniformBlockIndex1,bufSize1,length1,uniformBlockName1);
}
#endif
#endif

#ifndef GL_VERSION_3_1
#ifndef	GL_ALT_FUNDEF_GetActiveUniformBlockiv
#define GL_ALT_FUNDEF_GetActiveUniformBlockiv
typedef void (*PFNGLGETACTIVEUNIFORMBLOCKIVPROC_ALT)(GLuint,GLuint,GLenum,GLint *);
static inline void glGetActiveUniformBlockiv(GLuint program1,GLuint uniformBlockIndex1,GLenum pname1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETACTIVEUNIFORMBLOCKIVPROC_ALT fn=(PFNGLGETACTIVEUNIFORMBLOCKIVPROC_ALT)glaltGetProcAddressVersion("glGetActiveUniformBlockiv",3,2);
#else
	static PFNGLGETACTIVEUNIFORMBLOCKIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETACTIVEUNIFORMBLOCKIVPROC_ALT)glaltGetProcAddressVersion("glGetActiveUniformBlockiv",3,2); }
#endif
	 fn(program1,uniformBlockIndex1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_1
#ifndef	GL_ALT_FUNDEF_GetActiveUniformName
#define GL_ALT_FUNDEF_GetActiveUniformName
typedef void (*PFNGLGETACTIVEUNIFORMNAMEPROC_ALT)(GLuint,GLuint,GLsizei,GLsizei *,GLchar *);
static inline void glGetActiveUniformName(GLuint program1,GLuint uniformIndex1,GLsizei bufSize1,GLsizei * length1,GLchar * uniformName1)
{
#ifdef __cplusplus
	static PFNGLGETACTIVEUNIFORMNAMEPROC_ALT fn=(PFNGLGETACTIVEUNIFORMNAMEPROC_ALT)glaltGetProcAddressVersion("glGetActiveUniformName",3,2);
#else
	static PFNGLGETACTIVEUNIFORMNAMEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETACTIVEUNIFORMNAMEPROC_ALT)glaltGetProcAddressVersion("glGetActiveUniformName",3,2); }
#endif
	 fn(program1,uniformIndex1,bufSize1,length1,uniformName1);
}
#endif
#endif

#ifndef GL_VERSION_3_1
#ifndef	GL_ALT_FUNDEF_GetActiveUniformsiv
#define GL_ALT_FUNDEF_GetActiveUniformsiv
typedef void (*PFNGLGETACTIVEUNIFORMSIVPROC_ALT)(GLuint,GLsizei,const GLuint *,GLenum,GLint *);
static inline void glGetActiveUniformsiv(GLuint program1,GLsizei uniformCount1,const GLuint * uniformIndices1,GLenum pname1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETACTIVEUNIFORMSIVPROC_ALT fn=(PFNGLGETACTIVEUNIFORMSIVPROC_ALT)glaltGetProcAddressVersion("glGetActiveUniformsiv",3,2);
#else
	static PFNGLGETACTIVEUNIFORMSIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETACTIVEUNIFORMSIVPROC_ALT)glaltGetProcAddressVersion("glGetActiveUniformsiv",3,2); }
#endif
	 fn(program1,uniformCount1,uniformIndices1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetAttachedShaders
#define GL_ALT_FUNDEF_GetAttachedShaders
typedef void (*PFNGLGETATTACHEDSHADERSPROC_ALT)(GLuint,GLsizei,GLsizei *,GLuint *);
static inline void glGetAttachedShaders(GLuint program1,GLsizei maxCount1,GLsizei * count1,GLuint * shaders1)
{
#ifdef __cplusplus
	static PFNGLGETATTACHEDSHADERSPROC_ALT fn=(PFNGLGETATTACHEDSHADERSPROC_ALT)glaltGetProcAddressVersion("glGetAttachedShaders",3,2);
#else
	static PFNGLGETATTACHEDSHADERSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETATTACHEDSHADERSPROC_ALT)glaltGetProcAddressVersion("glGetAttachedShaders",3,2); }
#endif
	 fn(program1,maxCount1,count1,shaders1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetAttribLocation
#define GL_ALT_FUNDEF_GetAttribLocation
typedef GLint (*PFNGLGETATTRIBLOCATIONPROC_ALT)(GLuint,const GLchar *);
static inline GLint glGetAttribLocation(GLuint program1,const GLchar * name1)
{
#ifdef __cplusplus
	static PFNGLGETATTRIBLOCATIONPROC_ALT fn=(PFNGLGETATTRIBLOCATIONPROC_ALT)glaltGetProcAddressVersion("glGetAttribLocation",3,2);
#else
	static PFNGLGETATTRIBLOCATIONPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETATTRIBLOCATIONPROC_ALT)glaltGetProcAddressVersion("glGetAttribLocation",3,2); }
#endif
	return fn(program1,name1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetBooleani_v
#define GL_ALT_FUNDEF_GetBooleani_v
typedef void (*PFNGLGETBOOLEANI_VPROC_ALT)(GLenum,GLuint,GLboolean *);
static inline void glGetBooleani_v(GLenum target1,GLuint index1,GLboolean * data1)
{
#ifdef __cplusplus
	static PFNGLGETBOOLEANI_VPROC_ALT fn=(PFNGLGETBOOLEANI_VPROC_ALT)glaltGetProcAddressVersion("glGetBooleani_v",3,2);
#else
	static PFNGLGETBOOLEANI_VPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETBOOLEANI_VPROC_ALT)glaltGetProcAddressVersion("glGetBooleani_v",3,2); }
#endif
	 fn(target1,index1,data1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_GetBufferParameteri64v
#define GL_ALT_FUNDEF_GetBufferParameteri64v
typedef void (*PFNGLGETBUFFERPARAMETERI64VPROC_ALT)(GLenum,GLenum,GLint64 *);
static inline void glGetBufferParameteri64v(GLenum target1,GLenum pname1,GLint64 * params1)
{
#ifdef __cplusplus
	static PFNGLGETBUFFERPARAMETERI64VPROC_ALT fn=(PFNGLGETBUFFERPARAMETERI64VPROC_ALT)glaltGetProcAddressVersion("glGetBufferParameteri64v",3,2);
#else
	static PFNGLGETBUFFERPARAMETERI64VPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETBUFFERPARAMETERI64VPROC_ALT)glaltGetProcAddressVersion("glGetBufferParameteri64v",3,2); }
#endif
	 fn(target1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_GetBufferParameteriv
#define GL_ALT_FUNDEF_GetBufferParameteriv
typedef void (*PFNGLGETBUFFERPARAMETERIVPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetBufferParameteriv(GLenum target1,GLenum pname1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETBUFFERPARAMETERIVPROC_ALT fn=(PFNGLGETBUFFERPARAMETERIVPROC_ALT)glaltGetProcAddressVersion("glGetBufferParameteriv",3,2);
#else
	static PFNGLGETBUFFERPARAMETERIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETBUFFERPARAMETERIVPROC_ALT)glaltGetProcAddressVersion("glGetBufferParameteriv",3,2); }
#endif
	 fn(target1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_GetBufferPointerv
#define GL_ALT_FUNDEF_GetBufferPointerv
typedef void (*PFNGLGETBUFFERPOINTERVPROC_ALT)(GLenum,GLenum,void **);
static inline void glGetBufferPointerv(GLenum target1,GLenum pname1,void ** params1)
{
#ifdef __cplusplus
	static PFNGLGETBUFFERPOINTERVPROC_ALT fn=(PFNGLGETBUFFERPOINTERVPROC_ALT)glaltGetProcAddressVersion("glGetBufferPointerv",3,2);
#else
	static PFNGLGETBUFFERPOINTERVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETBUFFERPOINTERVPROC_ALT)glaltGetProcAddressVersion("glGetBufferPointerv",3,2); }
#endif
	 fn(target1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_GetBufferSubData
#define GL_ALT_FUNDEF_GetBufferSubData
typedef void (*PFNGLGETBUFFERSUBDATAPROC_ALT)(GLenum,GLintptr,GLsizeiptr,void *);
static inline void glGetBufferSubData(GLenum target1,GLintptr offset1,GLsizeiptr size1,void * data1)
{
#ifdef __cplusplus
	static PFNGLGETBUFFERSUBDATAPROC_ALT fn=(PFNGLGETBUFFERSUBDATAPROC_ALT)glaltGetProcAddressVersion("glGetBufferSubData",3,2);
#else
	static PFNGLGETBUFFERSUBDATAPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETBUFFERSUBDATAPROC_ALT)glaltGetProcAddressVersion("glGetBufferSubData",3,2); }
#endif
	 fn(target1,offset1,size1,data1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_GetCompressedTexImage
#define GL_ALT_FUNDEF_GetCompressedTexImage
typedef void (*PFNGLGETCOMPRESSEDTEXIMAGEPROC_ALT)(GLenum,GLint,void *);
static inline void glGetCompressedTexImage(GLenum target1,GLint level1,void * img1)
{
#ifdef __cplusplus
	static PFNGLGETCOMPRESSEDTEXIMAGEPROC_ALT fn=(PFNGLGETCOMPRESSEDTEXIMAGEPROC_ALT)glaltGetProcAddressVersion("glGetCompressedTexImage",3,2);
#else
	static PFNGLGETCOMPRESSEDTEXIMAGEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETCOMPRESSEDTEXIMAGEPROC_ALT)glaltGetProcAddressVersion("glGetCompressedTexImage",3,2); }
#endif
	 fn(target1,level1,img1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetFragDataLocation
#define GL_ALT_FUNDEF_GetFragDataLocation
typedef GLint (*PFNGLGETFRAGDATALOCATIONPROC_ALT)(GLuint,const GLchar *);
static inline GLint glGetFragDataLocation(GLuint program1,const GLchar * name1)
{
#ifdef __cplusplus
	static PFNGLGETFRAGDATALOCATIONPROC_ALT fn=(PFNGLGETFRAGDATALOCATIONPROC_ALT)glaltGetProcAddressVersion("glGetFragDataLocation",3,2);
#else
	static PFNGLGETFRAGDATALOCATIONPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETFRAGDATALOCATIONPROC_ALT)glaltGetProcAddressVersion("glGetFragDataLocation",3,2); }
#endif
	return fn(program1,name1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetFramebufferAttachmentParameteriv
#define GL_ALT_FUNDEF_GetFramebufferAttachmentParameteriv
typedef void (*PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC_ALT)(GLenum,GLenum,GLenum,GLint *);
static inline void glGetFramebufferAttachmentParameteriv(GLenum target1,GLenum attachment1,GLenum pname1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC_ALT fn=(PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC_ALT)glaltGetProcAddressVersion("glGetFramebufferAttachmentParameteriv",3,2);
#else
	static PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC_ALT)glaltGetProcAddressVersion("glGetFramebufferAttachmentParameteriv",3,2); }
#endif
	 fn(target1,attachment1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_GetInteger64i_v
#define GL_ALT_FUNDEF_GetInteger64i_v
typedef void (*PFNGLGETINTEGER64I_VPROC_ALT)(GLenum,GLuint,GLint64 *);
static inline void glGetInteger64i_v(GLenum target1,GLuint index1,GLint64 * data1)
{
#ifdef __cplusplus
	static PFNGLGETINTEGER64I_VPROC_ALT fn=(PFNGLGETINTEGER64I_VPROC_ALT)glaltGetProcAddressVersion("glGetInteger64i_v",3,2);
#else
	static PFNGLGETINTEGER64I_VPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETINTEGER64I_VPROC_ALT)glaltGetProcAddressVersion("glGetInteger64i_v",3,2); }
#endif
	 fn(target1,index1,data1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_GetInteger64v
#define GL_ALT_FUNDEF_GetInteger64v
typedef void (*PFNGLGETINTEGER64VPROC_ALT)(GLenum,GLint64 *);
static inline void glGetInteger64v(GLenum pname1,GLint64 * data1)
{
#ifdef __cplusplus
	static PFNGLGETINTEGER64VPROC_ALT fn=(PFNGLGETINTEGER64VPROC_ALT)glaltGetProcAddressVersion("glGetInteger64v",3,2);
#else
	static PFNGLGETINTEGER64VPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETINTEGER64VPROC_ALT)glaltGetProcAddressVersion("glGetInteger64v",3,2); }
#endif
	 fn(pname1,data1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetIntegeri_v
#define GL_ALT_FUNDEF_GetIntegeri_v
typedef void (*PFNGLGETINTEGERI_VPROC_ALT)(GLenum,GLuint,GLint *);
static inline void glGetIntegeri_v(GLenum target1,GLuint index1,GLint * data1)
{
#ifdef __cplusplus
	static PFNGLGETINTEGERI_VPROC_ALT fn=(PFNGLGETINTEGERI_VPROC_ALT)glaltGetProcAddressVersion("glGetIntegeri_v",3,2);
#else
	static PFNGLGETINTEGERI_VPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETINTEGERI_VPROC_ALT)glaltGetProcAddressVersion("glGetIntegeri_v",3,2); }
#endif
	 fn(target1,index1,data1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_GetMultisamplefv
#define GL_ALT_FUNDEF_GetMultisamplefv
typedef void (*PFNGLGETMULTISAMPLEFVPROC_ALT)(GLenum,GLuint,GLfloat *);
static inline void glGetMultisamplefv(GLenum pname1,GLuint index1,GLfloat * val1)
{
#ifdef __cplusplus
	static PFNGLGETMULTISAMPLEFVPROC_ALT fn=(PFNGLGETMULTISAMPLEFVPROC_ALT)glaltGetProcAddressVersion("glGetMultisamplefv",3,2);
#else
	static PFNGLGETMULTISAMPLEFVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETMULTISAMPLEFVPROC_ALT)glaltGetProcAddressVersion("glGetMultisamplefv",3,2); }
#endif
	 fn(pname1,index1,val1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetProgramInfoLog
#define GL_ALT_FUNDEF_GetProgramInfoLog
typedef void (*PFNGLGETPROGRAMINFOLOGPROC_ALT)(GLuint,GLsizei,GLsizei *,GLchar *);
static inline void glGetProgramInfoLog(GLuint program1,GLsizei bufSize1,GLsizei * length1,GLchar * infoLog1)
{
#ifdef __cplusplus
	static PFNGLGETPROGRAMINFOLOGPROC_ALT fn=(PFNGLGETPROGRAMINFOLOGPROC_ALT)glaltGetProcAddressVersion("glGetProgramInfoLog",3,2);
#else
	static PFNGLGETPROGRAMINFOLOGPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETPROGRAMINFOLOGPROC_ALT)glaltGetProcAddressVersion("glGetProgramInfoLog",3,2); }
#endif
	 fn(program1,bufSize1,length1,infoLog1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetProgramiv
#define GL_ALT_FUNDEF_GetProgramiv
typedef void (*PFNGLGETPROGRAMIVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetProgramiv(GLuint program1,GLenum pname1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETPROGRAMIVPROC_ALT fn=(PFNGLGETPROGRAMIVPROC_ALT)glaltGetProcAddressVersion("glGetProgramiv",3,2);
#else
	static PFNGLGETPROGRAMIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETPROGRAMIVPROC_ALT)glaltGetProcAddressVersion("glGetProgramiv",3,2); }
#endif
	 fn(program1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_GetQueryObjectiv
#define GL_ALT_FUNDEF_GetQueryObjectiv
typedef void (*PFNGLGETQUERYOBJECTIVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetQueryObjectiv(GLuint id1,GLenum pname1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETQUERYOBJECTIVPROC_ALT fn=(PFNGLGETQUERYOBJECTIVPROC_ALT)glaltGetProcAddressVersion("glGetQueryObjectiv",3,2);
#else
	static PFNGLGETQUERYOBJECTIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETQUERYOBJECTIVPROC_ALT)glaltGetProcAddressVersion("glGetQueryObjectiv",3,2); }
#endif
	 fn(id1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_GetQueryObjectuiv
#define GL_ALT_FUNDEF_GetQueryObjectuiv
typedef void (*PFNGLGETQUERYOBJECTUIVPROC_ALT)(GLuint,GLenum,GLuint *);
static inline void glGetQueryObjectuiv(GLuint id1,GLenum pname1,GLuint * params1)
{
#ifdef __cplusplus
	static PFNGLGETQUERYOBJECTUIVPROC_ALT fn=(PFNGLGETQUERYOBJECTUIVPROC_ALT)glaltGetProcAddressVersion("glGetQueryObjectuiv",3,2);
#else
	static PFNGLGETQUERYOBJECTUIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETQUERYOBJECTUIVPROC_ALT)glaltGetProcAddressVersion("glGetQueryObjectuiv",3,2); }
#endif
	 fn(id1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_GetQueryiv
#define GL_ALT_FUNDEF_GetQueryiv
typedef void (*PFNGLGETQUERYIVPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetQueryiv(GLenum target1,GLenum pname1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETQUERYIVPROC_ALT fn=(PFNGLGETQUERYIVPROC_ALT)glaltGetProcAddressVersion("glGetQueryiv",3,2);
#else
	static PFNGLGETQUERYIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETQUERYIVPROC_ALT)glaltGetProcAddressVersion("glGetQueryiv",3,2); }
#endif
	 fn(target1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetRenderbufferParameteriv
#define GL_ALT_FUNDEF_GetRenderbufferParameteriv
typedef void (*PFNGLGETRENDERBUFFERPARAMETERIVPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetRenderbufferParameteriv(GLenum target1,GLenum pname1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETRENDERBUFFERPARAMETERIVPROC_ALT fn=(PFNGLGETRENDERBUFFERPARAMETERIVPROC_ALT)glaltGetProcAddressVersion("glGetRenderbufferParameteriv",3,2);
#else
	static PFNGLGETRENDERBUFFERPARAMETERIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETRENDERBUFFERPARAMETERIVPROC_ALT)glaltGetProcAddressVersion("glGetRenderbufferParameteriv",3,2); }
#endif
	 fn(target1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetShaderInfoLog
#define GL_ALT_FUNDEF_GetShaderInfoLog
typedef void (*PFNGLGETSHADERINFOLOGPROC_ALT)(GLuint,GLsizei,GLsizei *,GLchar *);
static inline void glGetShaderInfoLog(GLuint shader1,GLsizei bufSize1,GLsizei * length1,GLchar * infoLog1)
{
#ifdef __cplusplus
	static PFNGLGETSHADERINFOLOGPROC_ALT fn=(PFNGLGETSHADERINFOLOGPROC_ALT)glaltGetProcAddressVersion("glGetShaderInfoLog",3,2);
#else
	static PFNGLGETSHADERINFOLOGPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETSHADERINFOLOGPROC_ALT)glaltGetProcAddressVersion("glGetShaderInfoLog",3,2); }
#endif
	 fn(shader1,bufSize1,length1,infoLog1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetShaderSource
#define GL_ALT_FUNDEF_GetShaderSource
typedef void (*PFNGLGETSHADERSOURCEPROC_ALT)(GLuint,GLsizei,GLsizei *,GLchar *);
static inline void glGetShaderSource(GLuint shader1,GLsizei bufSize1,GLsizei * length1,GLchar * source1)
{
#ifdef __cplusplus
	static PFNGLGETSHADERSOURCEPROC_ALT fn=(PFNGLGETSHADERSOURCEPROC_ALT)glaltGetProcAddressVersion("glGetShaderSource",3,2);
#else
	static PFNGLGETSHADERSOURCEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETSHADERSOURCEPROC_ALT)glaltGetProcAddressVersion("glGetShaderSource",3,2); }
#endif
	 fn(shader1,bufSize1,length1,source1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetShaderiv
#define GL_ALT_FUNDEF_GetShaderiv
typedef void (*PFNGLGETSHADERIVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetShaderiv(GLuint shader1,GLenum pname1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETSHADERIVPROC_ALT fn=(PFNGLGETSHADERIVPROC_ALT)glaltGetProcAddressVersion("glGetShaderiv",3,2);
#else
	static PFNGLGETSHADERIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETSHADERIVPROC_ALT)glaltGetProcAddressVersion("glGetShaderiv",3,2); }
#endif
	 fn(shader1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetStringi
#define GL_ALT_FUNDEF_GetStringi
typedef const GLubyte * (*PFNGLGETSTRINGIPROC_ALT)(GLenum,GLuint);
static inline const GLubyte * glGetStringi(GLenum name1,GLuint index1)
{
#ifdef __cplusplus
	static PFNGLGETSTRINGIPROC_ALT fn=(PFNGLGETSTRINGIPROC_ALT)glaltGetProcAddressVersion("glGetStringi",3,2);
#else
	static PFNGLGETSTRINGIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETSTRINGIPROC_ALT)glaltGetProcAddressVersion("glGetStringi",3,2); }
#endif
	return fn(name1,index1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_GetSynciv
#define GL_ALT_FUNDEF_GetSynciv
typedef void (*PFNGLGETSYNCIVPROC_ALT)(GLsync,GLenum,GLsizei,GLsizei *,GLint *);
static inline void glGetSynciv(GLsync sync1,GLenum pname1,GLsizei bufSize1,GLsizei * length1,GLint * values1)
{
#ifdef __cplusplus
	static PFNGLGETSYNCIVPROC_ALT fn=(PFNGLGETSYNCIVPROC_ALT)glaltGetProcAddressVersion("glGetSynciv",3,2);
#else
	static PFNGLGETSYNCIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETSYNCIVPROC_ALT)glaltGetProcAddressVersion("glGetSynciv",3,2); }
#endif
	 fn(sync1,pname1,bufSize1,length1,values1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetTexParameterIiv
#define GL_ALT_FUNDEF_GetTexParameterIiv
typedef void (*PFNGLGETTEXPARAMETERIIVPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetTexParameterIiv(GLenum target1,GLenum pname1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETTEXPARAMETERIIVPROC_ALT fn=(PFNGLGETTEXPARAMETERIIVPROC_ALT)glaltGetProcAddressVersion("glGetTexParameterIiv",3,2);
#else
	static PFNGLGETTEXPARAMETERIIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETTEXPARAMETERIIVPROC_ALT)glaltGetProcAddressVersion("glGetTexParameterIiv",3,2); }
#endif
	 fn(target1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetTexParameterIuiv
#define GL_ALT_FUNDEF_GetTexParameterIuiv
typedef void (*PFNGLGETTEXPARAMETERIUIVPROC_ALT)(GLenum,GLenum,GLuint *);
static inline void glGetTexParameterIuiv(GLenum target1,GLenum pname1,GLuint * params1)
{
#ifdef __cplusplus
	static PFNGLGETTEXPARAMETERIUIVPROC_ALT fn=(PFNGLGETTEXPARAMETERIUIVPROC_ALT)glaltGetProcAddressVersion("glGetTexParameterIuiv",3,2);
#else
	static PFNGLGETTEXPARAMETERIUIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETTEXPARAMETERIUIVPROC_ALT)glaltGetProcAddressVersion("glGetTexParameterIuiv",3,2); }
#endif
	 fn(target1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetTransformFeedbackVarying
#define GL_ALT_FUNDEF_GetTransformFeedbackVarying
typedef void (*PFNGLGETTRANSFORMFEEDBACKVARYINGPROC_ALT)(GLuint,GLuint,GLsizei,GLsizei *,GLsizei *,GLenum *,GLchar *);
static inline void glGetTransformFeedbackVarying(GLuint program1,GLuint index1,GLsizei bufSize1,GLsizei * length1,GLsizei * size1,GLenum * type1,GLchar * name1)
{
#ifdef __cplusplus
	static PFNGLGETTRANSFORMFEEDBACKVARYINGPROC_ALT fn=(PFNGLGETTRANSFORMFEEDBACKVARYINGPROC_ALT)glaltGetProcAddressVersion("glGetTransformFeedbackVarying",3,2);
#else
	static PFNGLGETTRANSFORMFEEDBACKVARYINGPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETTRANSFORMFEEDBACKVARYINGPROC_ALT)glaltGetProcAddressVersion("glGetTransformFeedbackVarying",3,2); }
#endif
	 fn(program1,index1,bufSize1,length1,size1,type1,name1);
}
#endif
#endif

#ifndef GL_VERSION_3_1
#ifndef	GL_ALT_FUNDEF_GetUniformBlockIndex
#define GL_ALT_FUNDEF_GetUniformBlockIndex
typedef GLuint (*PFNGLGETUNIFORMBLOCKINDEXPROC_ALT)(GLuint,const GLchar *);
static inline GLuint glGetUniformBlockIndex(GLuint program1,const GLchar * uniformBlockName1)
{
#ifdef __cplusplus
	static PFNGLGETUNIFORMBLOCKINDEXPROC_ALT fn=(PFNGLGETUNIFORMBLOCKINDEXPROC_ALT)glaltGetProcAddressVersion("glGetUniformBlockIndex",3,2);
#else
	static PFNGLGETUNIFORMBLOCKINDEXPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETUNIFORMBLOCKINDEXPROC_ALT)glaltGetProcAddressVersion("glGetUniformBlockIndex",3,2); }
#endif
	return fn(program1,uniformBlockName1);
}
#endif
#endif

#ifndef GL_VERSION_3_1
#ifndef	GL_ALT_FUNDEF_GetUniformIndices
#define GL_ALT_FUNDEF_GetUniformIndices
typedef void (*PFNGLGETUNIFORMINDICESPROC_ALT)(GLuint,GLsizei,const GLchar *const*,GLuint *);
static inline void glGetUniformIndices(GLuint program1,GLsizei uniformCount1,const GLchar *const* uniformNames1,GLuint * uniformIndices1)
{
#ifdef __cplusplus
	static PFNGLGETUNIFORMINDICESPROC_ALT fn=(PFNGLGETUNIFORMINDICESPROC_ALT)glaltGetProcAddressVersion("glGetUniformIndices",3,2);
#else
	static PFNGLGETUNIFORMINDICESPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETUNIFORMINDICESPROC_ALT)glaltGetProcAddressVersion("glGetUniformIndices",3,2); }
#endif
	 fn(program1,uniformCount1,uniformNames1,uniformIndices1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetUniformLocation
#define GL_ALT_FUNDEF_GetUniformLocation
typedef GLint (*PFNGLGETUNIFORMLOCATIONPROC_ALT)(GLuint,const GLchar *);
static inline GLint glGetUniformLocation(GLuint program1,const GLchar * name1)
{
#ifdef __cplusplus
	static PFNGLGETUNIFORMLOCATIONPROC_ALT fn=(PFNGLGETUNIFORMLOCATIONPROC_ALT)glaltGetProcAddressVersion("glGetUniformLocation",3,2);
#else
	static PFNGLGETUNIFORMLOCATIONPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETUNIFORMLOCATIONPROC_ALT)glaltGetProcAddressVersion("glGetUniformLocation",3,2); }
#endif
	return fn(program1,name1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetUniformfv
#define GL_ALT_FUNDEF_GetUniformfv
typedef void (*PFNGLGETUNIFORMFVPROC_ALT)(GLuint,GLint,GLfloat *);
static inline void glGetUniformfv(GLuint program1,GLint location1,GLfloat * params1)
{
#ifdef __cplusplus
	static PFNGLGETUNIFORMFVPROC_ALT fn=(PFNGLGETUNIFORMFVPROC_ALT)glaltGetProcAddressVersion("glGetUniformfv",3,2);
#else
	static PFNGLGETUNIFORMFVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETUNIFORMFVPROC_ALT)glaltGetProcAddressVersion("glGetUniformfv",3,2); }
#endif
	 fn(program1,location1,params1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetUniformiv
#define GL_ALT_FUNDEF_GetUniformiv
typedef void (*PFNGLGETUNIFORMIVPROC_ALT)(GLuint,GLint,GLint *);
static inline void glGetUniformiv(GLuint program1,GLint location1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETUNIFORMIVPROC_ALT fn=(PFNGLGETUNIFORMIVPROC_ALT)glaltGetProcAddressVersion("glGetUniformiv",3,2);
#else
	static PFNGLGETUNIFORMIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETUNIFORMIVPROC_ALT)glaltGetProcAddressVersion("glGetUniformiv",3,2); }
#endif
	 fn(program1,location1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetUniformuiv
#define GL_ALT_FUNDEF_GetUniformuiv
typedef void (*PFNGLGETUNIFORMUIVPROC_ALT)(GLuint,GLint,GLuint *);
static inline void glGetUniformuiv(GLuint program1,GLint location1,GLuint * params1)
{
#ifdef __cplusplus
	static PFNGLGETUNIFORMUIVPROC_ALT fn=(PFNGLGETUNIFORMUIVPROC_ALT)glaltGetProcAddressVersion("glGetUniformuiv",3,2);
#else
	static PFNGLGETUNIFORMUIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETUNIFORMUIVPROC_ALT)glaltGetProcAddressVersion("glGetUniformuiv",3,2); }
#endif
	 fn(program1,location1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetVertexAttribIiv
#define GL_ALT_FUNDEF_GetVertexAttribIiv
typedef void (*PFNGLGETVERTEXATTRIBIIVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetVertexAttribIiv(GLuint index1,GLenum pname1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETVERTEXATTRIBIIVPROC_ALT fn=(PFNGLGETVERTEXATTRIBIIVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribIiv",3,2);
#else
	static PFNGLGETVERTEXATTRIBIIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETVERTEXATTRIBIIVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribIiv",3,2); }
#endif
	 fn(index1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetVertexAttribIuiv
#define GL_ALT_FUNDEF_GetVertexAttribIuiv
typedef void (*PFNGLGETVERTEXATTRIBIUIVPROC_ALT)(GLuint,GLenum,GLuint *);
static inline void glGetVertexAttribIuiv(GLuint index1,GLenum pname1,GLuint * params1)
{
#ifdef __cplusplus
	static PFNGLGETVERTEXATTRIBIUIVPROC_ALT fn=(PFNGLGETVERTEXATTRIBIUIVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribIuiv",3,2);
#else
	static PFNGLGETVERTEXATTRIBIUIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETVERTEXATTRIBIUIVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribIuiv",3,2); }
#endif
	 fn(index1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetVertexAttribPointerv
#define GL_ALT_FUNDEF_GetVertexAttribPointerv
typedef void (*PFNGLGETVERTEXATTRIBPOINTERVPROC_ALT)(GLuint,GLenum,void **);
static inline void glGetVertexAttribPointerv(GLuint index1,GLenum pname1,void ** pointer1)
{
#ifdef __cplusplus
	static PFNGLGETVERTEXATTRIBPOINTERVPROC_ALT fn=(PFNGLGETVERTEXATTRIBPOINTERVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribPointerv",3,2);
#else
	static PFNGLGETVERTEXATTRIBPOINTERVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETVERTEXATTRIBPOINTERVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribPointerv",3,2); }
#endif
	 fn(index1,pname1,pointer1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetVertexAttribdv
#define GL_ALT_FUNDEF_GetVertexAttribdv
typedef void (*PFNGLGETVERTEXATTRIBDVPROC_ALT)(GLuint,GLenum,GLdouble *);
static inline void glGetVertexAttribdv(GLuint index1,GLenum pname1,GLdouble * params1)
{
#ifdef __cplusplus
	static PFNGLGETVERTEXATTRIBDVPROC_ALT fn=(PFNGLGETVERTEXATTRIBDVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribdv",3,2);
#else
	static PFNGLGETVERTEXATTRIBDVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETVERTEXATTRIBDVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribdv",3,2); }
#endif
	 fn(index1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetVertexAttribfv
#define GL_ALT_FUNDEF_GetVertexAttribfv
typedef void (*PFNGLGETVERTEXATTRIBFVPROC_ALT)(GLuint,GLenum,GLfloat *);
static inline void glGetVertexAttribfv(GLuint index1,GLenum pname1,GLfloat * params1)
{
#ifdef __cplusplus
	static PFNGLGETVERTEXATTRIBFVPROC_ALT fn=(PFNGLGETVERTEXATTRIBFVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribfv",3,2);
#else
	static PFNGLGETVERTEXATTRIBFVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETVERTEXATTRIBFVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribfv",3,2); }
#endif
	 fn(index1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetVertexAttribiv
#define GL_ALT_FUNDEF_GetVertexAttribiv
typedef void (*PFNGLGETVERTEXATTRIBIVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetVertexAttribiv(GLuint index1,GLenum pname1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETVERTEXATTRIBIVPROC_ALT fn=(PFNGLGETVERTEXATTRIBIVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribiv",3,2);
#else
	static PFNGLGETVERTEXATTRIBIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETVERTEXATTRIBIVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribiv",3,2); }
#endif
	 fn(index1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_IsBuffer
#define GL_ALT_FUNDEF_IsBuffer
typedef GLboolean (*PFNGLISBUFFERPROC_ALT)(GLuint);
static inline GLboolean glIsBuffer(GLuint buffer1)
{
#ifdef __cplusplus
	static PFNGLISBUFFERPROC_ALT fn=(PFNGLISBUFFERPROC_ALT)glaltGetProcAddressVersion("glIsBuffer",3,2);
#else
	static PFNGLISBUFFERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLISBUFFERPROC_ALT)glaltGetProcAddressVersion("glIsBuffer",3,2); }
#endif
	return fn(buffer1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_IsEnabledi
#define GL_ALT_FUNDEF_IsEnabledi
typedef GLboolean (*PFNGLISENABLEDIPROC_ALT)(GLenum,GLuint);
static inline GLboolean glIsEnabledi(GLenum target1,GLuint index1)
{
#ifdef __cplusplus
	static PFNGLISENABLEDIPROC_ALT fn=(PFNGLISENABLEDIPROC_ALT)glaltGetProcAddressVersion("glIsEnabledi",3,2);
#else
	static PFNGLISENABLEDIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLISENABLEDIPROC_ALT)glaltGetProcAddressVersion("glIsEnabledi",3,2); }
#endif
	return fn(target1,index1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_IsFramebuffer
#define GL_ALT_FUNDEF_IsFramebuffer
typedef GLboolean (*PFNGLISFRAMEBUFFERPROC_ALT)(GLuint);
static inline GLboolean glIsFramebuffer(GLuint framebuffer1)
{
#ifdef __cplusplus
	static PFNGLISFRAMEBUFFERPROC_ALT fn=(PFNGLISFRAMEBUFFERPROC_ALT)glaltGetProcAddressVersion("glIsFramebuffer",3,2);
#else
	static PFNGLISFRAMEBUFFERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLISFRAMEBUFFERPROC_ALT)glaltGetProcAddressVersion("glIsFramebuffer",3,2); }
#endif
	return fn(framebuffer1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_IsProgram
#define GL_ALT_FUNDEF_IsProgram
typedef GLboolean (*PFNGLISPROGRAMPROC_ALT)(GLuint);
static inline GLboolean glIsProgram(GLuint program1)
{
#ifdef __cplusplus
	static PFNGLISPROGRAMPROC_ALT fn=(PFNGLISPROGRAMPROC_ALT)glaltGetProcAddressVersion("glIsProgram",3,2);
#else
	static PFNGLISPROGRAMPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLISPROGRAMPROC_ALT)glaltGetProcAddressVersion("glIsProgram",3,2); }
#endif
	return fn(program1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_IsQuery
#define GL_ALT_FUNDEF_IsQuery
typedef GLboolean (*PFNGLISQUERYPROC_ALT)(GLuint);
static inline GLboolean glIsQuery(GLuint id1)
{
#ifdef __cplusplus
	static PFNGLISQUERYPROC_ALT fn=(PFNGLISQUERYPROC_ALT)glaltGetProcAddressVersion("glIsQuery",3,2);
#else
	static PFNGLISQUERYPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLISQUERYPROC_ALT)glaltGetProcAddressVersion("glIsQuery",3,2); }
#endif
	return fn(id1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_IsRenderbuffer
#define GL_ALT_FUNDEF_IsRenderbuffer
typedef GLboolean (*PFNGLISRENDERBUFFERPROC_ALT)(GLuint);
static inline GLboolean glIsRenderbuffer(GLuint renderbuffer1)
{
#ifdef __cplusplus
	static PFNGLISRENDERBUFFERPROC_ALT fn=(PFNGLISRENDERBUFFERPROC_ALT)glaltGetProcAddressVersion("glIsRenderbuffer",3,2);
#else
	static PFNGLISRENDERBUFFERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLISRENDERBUFFERPROC_ALT)glaltGetProcAddressVersion("glIsRenderbuffer",3,2); }
#endif
	return fn(renderbuffer1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_IsShader
#define GL_ALT_FUNDEF_IsShader
typedef GLboolean (*PFNGLISSHADERPROC_ALT)(GLuint);
static inline GLboolean glIsShader(GLuint shader1)
{
#ifdef __cplusplus
	static PFNGLISSHADERPROC_ALT fn=(PFNGLISSHADERPROC_ALT)glaltGetProcAddressVersion("glIsShader",3,2);
#else
	static PFNGLISSHADERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLISSHADERPROC_ALT)glaltGetProcAddressVersion("glIsShader",3,2); }
#endif
	return fn(shader1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_IsSync
#define GL_ALT_FUNDEF_IsSync
typedef GLboolean (*PFNGLISSYNCPROC_ALT)(GLsync);
static inline GLboolean glIsSync(GLsync sync1)
{
#ifdef __cplusplus
	static PFNGLISSYNCPROC_ALT fn=(PFNGLISSYNCPROC_ALT)glaltGetProcAddressVersion("glIsSync",3,2);
#else
	static PFNGLISSYNCPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLISSYNCPROC_ALT)glaltGetProcAddressVersion("glIsSync",3,2); }
#endif
	return fn(sync1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_IsVertexArray
#define GL_ALT_FUNDEF_IsVertexArray
typedef GLboolean (*PFNGLISVERTEXARRAYPROC_ALT)(GLuint);
static inline GLboolean glIsVertexArray(GLuint array1)
{
#ifdef __cplusplus
	static PFNGLISVERTEXARRAYPROC_ALT fn=(PFNGLISVERTEXARRAYPROC_ALT)glaltGetProcAddressVersion("glIsVertexArray",3,2);
#else
	static PFNGLISVERTEXARRAYPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLISVERTEXARRAYPROC_ALT)glaltGetProcAddressVersion("glIsVertexArray",3,2); }
#endif
	return fn(array1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_LinkProgram
#define GL_ALT_FUNDEF_LinkProgram
typedef void (*PFNGLLINKPROGRAMPROC_ALT)(GLuint);
static inline void glLinkProgram(GLuint program1)
{
#ifdef __cplusplus
	static PFNGLLINKPROGRAMPROC_ALT fn=(PFNGLLINKPROGRAMPROC_ALT)glaltGetProcAddressVersion("glLinkProgram",3,2);
#else
	static PFNGLLINKPROGRAMPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLLINKPROGRAMPROC_ALT)glaltGetProcAddressVersion("glLinkProgram",3,2); }
#endif
	 fn(program1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_MapBuffer
#define GL_ALT_FUNDEF_MapBuffer
typedef void * (*PFNGLMAPBUFFERPROC_ALT)(GLenum,GLenum);
static inline void * glMapBuffer(GLenum target1,GLenum access1)
{
#ifdef __cplusplus
	static PFNGLMAPBUFFERPROC_ALT fn=(PFNGLMAPBUFFERPROC_ALT)glaltGetProcAddressVersion("glMapBuffer",3,2);
#else
	static PFNGLMAPBUFFERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMAPBUFFERPROC_ALT)glaltGetProcAddressVersion("glMapBuffer",3,2); }
#endif
	return fn(target1,access1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_MapBufferRange
#define GL_ALT_FUNDEF_MapBufferRange
typedef void * (*PFNGLMAPBUFFERRANGEPROC_ALT)(GLenum,GLintptr,GLsizeiptr,GLbitfield);
static inline void * glMapBufferRange(GLenum target1,GLintptr offset1,GLsizeiptr length1,GLbitfield access1)
{
#ifdef __cplusplus
	static PFNGLMAPBUFFERRANGEPROC_ALT fn=(PFNGLMAPBUFFERRANGEPROC_ALT)glaltGetProcAddressVersion("glMapBufferRange",3,2);
#else
	static PFNGLMAPBUFFERRANGEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMAPBUFFERRANGEPROC_ALT)glaltGetProcAddressVersion("glMapBufferRange",3,2); }
#endif
	return fn(target1,offset1,length1,access1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_MultiDrawArrays
#define GL_ALT_FUNDEF_MultiDrawArrays
typedef void (*PFNGLMULTIDRAWARRAYSPROC_ALT)(GLenum,const GLint *,const GLsizei *,GLsizei);
static inline void glMultiDrawArrays(GLenum mode1,const GLint * first1,const GLsizei * count1,GLsizei drawcount1)
{
#ifdef __cplusplus
	static PFNGLMULTIDRAWARRAYSPROC_ALT fn=(PFNGLMULTIDRAWARRAYSPROC_ALT)glaltGetProcAddressVersion("glMultiDrawArrays",3,2);
#else
	static PFNGLMULTIDRAWARRAYSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTIDRAWARRAYSPROC_ALT)glaltGetProcAddressVersion("glMultiDrawArrays",3,2); }
#endif
	 fn(mode1,first1,count1,drawcount1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_MultiDrawElements
#define GL_ALT_FUNDEF_MultiDrawElements
typedef void (*PFNGLMULTIDRAWELEMENTSPROC_ALT)(GLenum,const GLsizei *,GLenum,const void *const*,GLsizei);
static inline void glMultiDrawElements(GLenum mode1,const GLsizei * count1,GLenum type1,const void *const* indices1,GLsizei drawcount1)
{
#ifdef __cplusplus
	static PFNGLMULTIDRAWELEMENTSPROC_ALT fn=(PFNGLMULTIDRAWELEMENTSPROC_ALT)glaltGetProcAddressVersion("glMultiDrawElements",3,2);
#else
	static PFNGLMULTIDRAWELEMENTSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTIDRAWELEMENTSPROC_ALT)glaltGetProcAddressVersion("glMultiDrawElements",3,2); }
#endif
	 fn(mode1,count1,type1,indices1,drawcount1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_MultiDrawElementsBaseVertex
#define GL_ALT_FUNDEF_MultiDrawElementsBaseVertex
typedef void (*PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC_ALT)(GLenum,const GLsizei *,GLenum,const void *const*,GLsizei,const GLint *);
static inline void glMultiDrawElementsBaseVertex(GLenum mode1,const GLsizei * count1,GLenum type1,const void *const* indices1,GLsizei drawcount1,const GLint * basevertex1)
{
#ifdef __cplusplus
	static PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC_ALT fn=(PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC_ALT)glaltGetProcAddressVersion("glMultiDrawElementsBaseVertex",3,2);
#else
	static PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC_ALT)glaltGetProcAddressVersion("glMultiDrawElementsBaseVertex",3,2); }
#endif
	 fn(mode1,count1,type1,indices1,drawcount1,basevertex1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_PointParameterf
#define GL_ALT_FUNDEF_PointParameterf
typedef void (*PFNGLPOINTPARAMETERFPROC_ALT)(GLenum,GLfloat);
static inline void glPointParameterf(GLenum pname1,GLfloat param1)
{
#ifdef __cplusplus
	static PFNGLPOINTPARAMETERFPROC_ALT fn=(PFNGLPOINTPARAMETERFPROC_ALT)glaltGetProcAddressVersion("glPointParameterf",3,2);
#else
	static PFNGLPOINTPARAMETERFPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPOINTPARAMETERFPROC_ALT)glaltGetProcAddressVersion("glPointParameterf",3,2); }
#endif
	 fn(pname1,param1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_PointParameterfv
#define GL_ALT_FUNDEF_PointParameterfv
typedef void (*PFNGLPOINTPARAMETERFVPROC_ALT)(GLenum,const GLfloat *);
static inline void glPointParameterfv(GLenum pname1,const GLfloat * params1)
{
#ifdef __cplusplus
	static PFNGLPOINTPARAMETERFVPROC_ALT fn=(PFNGLPOINTPARAMETERFVPROC_ALT)glaltGetProcAddressVersion("glPointParameterfv",3,2);
#else
	static PFNGLPOINTPARAMETERFVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPOINTPARAMETERFVPROC_ALT)glaltGetProcAddressVersion("glPointParameterfv",3,2); }
#endif
	 fn(pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_PointParameteri
#define GL_ALT_FUNDEF_PointParameteri
typedef void (*PFNGLPOINTPARAMETERIPROC_ALT)(GLenum,GLint);
static inline void glPointParameteri(GLenum pname1,GLint param1)
{
#ifdef __cplusplus
	static PFNGLPOINTPARAMETERIPROC_ALT fn=(PFNGLPOINTPARAMETERIPROC_ALT)glaltGetProcAddressVersion("glPointParameteri",3,2);
#else
	static PFNGLPOINTPARAMETERIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPOINTPARAMETERIPROC_ALT)glaltGetProcAddressVersion("glPointParameteri",3,2); }
#endif
	 fn(pname1,param1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_PointParameteriv
#define GL_ALT_FUNDEF_PointParameteriv
typedef void (*PFNGLPOINTPARAMETERIVPROC_ALT)(GLenum,const GLint *);
static inline void glPointParameteriv(GLenum pname1,const GLint * params1)
{
#ifdef __cplusplus
	static PFNGLPOINTPARAMETERIVPROC_ALT fn=(PFNGLPOINTPARAMETERIVPROC_ALT)glaltGetProcAddressVersion("glPointParameteriv",3,2);
#else
	static PFNGLPOINTPARAMETERIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPOINTPARAMETERIVPROC_ALT)glaltGetProcAddressVersion("glPointParameteriv",3,2); }
#endif
	 fn(pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_1
#ifndef	GL_ALT_FUNDEF_PrimitiveRestartIndex
#define GL_ALT_FUNDEF_PrimitiveRestartIndex
typedef void (*PFNGLPRIMITIVERESTARTINDEXPROC_ALT)(GLuint);
static inline void glPrimitiveRestartIndex(GLuint index1)
{
#ifdef __cplusplus
	static PFNGLPRIMITIVERESTARTINDEXPROC_ALT fn=(PFNGLPRIMITIVERESTARTINDEXPROC_ALT)glaltGetProcAddressVersion("glPrimitiveRestartIndex",3,2);
#else
	static PFNGLPRIMITIVERESTARTINDEXPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPRIMITIVERESTARTINDEXPROC_ALT)glaltGetProcAddressVersion("glPrimitiveRestartIndex",3,2); }
#endif
	 fn(index1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_ProvokingVertex
#define GL_ALT_FUNDEF_ProvokingVertex
typedef void (*PFNGLPROVOKINGVERTEXPROC_ALT)(GLenum);
static inline void glProvokingVertex(GLenum mode1)
{
#ifdef __cplusplus
	static PFNGLPROVOKINGVERTEXPROC_ALT fn=(PFNGLPROVOKINGVERTEXPROC_ALT)glaltGetProcAddressVersion("glProvokingVertex",3,2);
#else
	static PFNGLPROVOKINGVERTEXPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROVOKINGVERTEXPROC_ALT)glaltGetProcAddressVersion("glProvokingVertex",3,2); }
#endif
	 fn(mode1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_RenderbufferStorage
#define GL_ALT_FUNDEF_RenderbufferStorage
typedef void (*PFNGLRENDERBUFFERSTORAGEPROC_ALT)(GLenum,GLenum,GLsizei,GLsizei);
static inline void glRenderbufferStorage(GLenum target1,GLenum internalformat1,GLsizei width1,GLsizei height1)
{
#ifdef __cplusplus
	static PFNGLRENDERBUFFERSTORAGEPROC_ALT fn=(PFNGLRENDERBUFFERSTORAGEPROC_ALT)glaltGetProcAddressVersion("glRenderbufferStorage",3,2);
#else
	static PFNGLRENDERBUFFERSTORAGEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLRENDERBUFFERSTORAGEPROC_ALT)glaltGetProcAddressVersion("glRenderbufferStorage",3,2); }
#endif
	 fn(target1,internalformat1,width1,height1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_RenderbufferStorageMultisample
#define GL_ALT_FUNDEF_RenderbufferStorageMultisample
typedef void (*PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC_ALT)(GLenum,GLsizei,GLenum,GLsizei,GLsizei);
static inline void glRenderbufferStorageMultisample(GLenum target1,GLsizei samples1,GLenum internalformat1,GLsizei width1,GLsizei height1)
{
#ifdef __cplusplus
	static PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC_ALT fn=(PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC_ALT)glaltGetProcAddressVersion("glRenderbufferStorageMultisample",3,2);
#else
	static PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC_ALT)glaltGetProcAddressVersion("glRenderbufferStorageMultisample",3,2); }
#endif
	 fn(target1,samples1,internalformat1,width1,height1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_SampleCoverage
#define GL_ALT_FUNDEF_SampleCoverage
typedef void (*PFNGLSAMPLECOVERAGEPROC_ALT)(GLfloat,GLboolean);
static inline void glSampleCoverage(GLfloat value1,GLboolean invert1)
{
#ifdef __cplusplus
	static PFNGLSAMPLECOVERAGEPROC_ALT fn=(PFNGLSAMPLECOVERAGEPROC_ALT)glaltGetProcAddressVersion("glSampleCoverage",3,2);
#else
	static PFNGLSAMPLECOVERAGEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLSAMPLECOVERAGEPROC_ALT)glaltGetProcAddressVersion("glSampleCoverage",3,2); }
#endif
	 fn(value1,invert1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_SampleMaski
#define GL_ALT_FUNDEF_SampleMaski
typedef void (*PFNGLSAMPLEMASKIPROC_ALT)(GLuint,GLbitfield);
static inline void glSampleMaski(GLuint maskNumber1,GLbitfield mask1)
{
#ifdef __cplusplus
	static PFNGLSAMPLEMASKIPROC_ALT fn=(PFNGLSAMPLEMASKIPROC_ALT)glaltGetProcAddressVersion("glSampleMaski",3,2);
#else
	static PFNGLSAMPLEMASKIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLSAMPLEMASKIPROC_ALT)glaltGetProcAddressVersion("glSampleMaski",3,2); }
#endif
	 fn(maskNumber1,mask1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_ShaderSource
#define GL_ALT_FUNDEF_ShaderSource
typedef void (*PFNGLSHADERSOURCEPROC_ALT)(GLuint,GLsizei,const GLchar *const*,const GLint *);
static inline void glShaderSource(GLuint shader1,GLsizei count1,const GLchar *const* string1,const GLint * length1)
{
#ifdef __cplusplus
	static PFNGLSHADERSOURCEPROC_ALT fn=(PFNGLSHADERSOURCEPROC_ALT)glaltGetProcAddressVersion("glShaderSource",3,2);
#else
	static PFNGLSHADERSOURCEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLSHADERSOURCEPROC_ALT)glaltGetProcAddressVersion("glShaderSource",3,2); }
#endif
	 fn(shader1,count1,string1,length1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_StencilFuncSeparate
#define GL_ALT_FUNDEF_StencilFuncSeparate
typedef void (*PFNGLSTENCILFUNCSEPARATEPROC_ALT)(GLenum,GLenum,GLint,GLuint);
static inline void glStencilFuncSeparate(GLenum face1,GLenum func1,GLint ref1,GLuint mask1)
{
#ifdef __cplusplus
	static PFNGLSTENCILFUNCSEPARATEPROC_ALT fn=(PFNGLSTENCILFUNCSEPARATEPROC_ALT)glaltGetProcAddressVersion("glStencilFuncSeparate",3,2);
#else
	static PFNGLSTENCILFUNCSEPARATEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLSTENCILFUNCSEPARATEPROC_ALT)glaltGetProcAddressVersion("glStencilFuncSeparate",3,2); }
#endif
	 fn(face1,func1,ref1,mask1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_StencilMaskSeparate
#define GL_ALT_FUNDEF_StencilMaskSeparate
typedef void (*PFNGLSTENCILMASKSEPARATEPROC_ALT)(GLenum,GLuint);
static inline void glStencilMaskSeparate(GLenum face1,GLuint mask1)
{
#ifdef __cplusplus
	static PFNGLSTENCILMASKSEPARATEPROC_ALT fn=(PFNGLSTENCILMASKSEPARATEPROC_ALT)glaltGetProcAddressVersion("glStencilMaskSeparate",3,2);
#else
	static PFNGLSTENCILMASKSEPARATEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLSTENCILMASKSEPARATEPROC_ALT)glaltGetProcAddressVersion("glStencilMaskSeparate",3,2); }
#endif
	 fn(face1,mask1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_StencilOpSeparate
#define GL_ALT_FUNDEF_StencilOpSeparate
typedef void (*PFNGLSTENCILOPSEPARATEPROC_ALT)(GLenum,GLenum,GLenum,GLenum);
static inline void glStencilOpSeparate(GLenum face1,GLenum sfail1,GLenum dpfail1,GLenum dppass1)
{
#ifdef __cplusplus
	static PFNGLSTENCILOPSEPARATEPROC_ALT fn=(PFNGLSTENCILOPSEPARATEPROC_ALT)glaltGetProcAddressVersion("glStencilOpSeparate",3,2);
#else
	static PFNGLSTENCILOPSEPARATEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLSTENCILOPSEPARATEPROC_ALT)glaltGetProcAddressVersion("glStencilOpSeparate",3,2); }
#endif
	 fn(face1,sfail1,dpfail1,dppass1);
}
#endif
#endif

#ifndef GL_VERSION_3_1
#ifndef	GL_ALT_FUNDEF_TexBuffer
#define GL_ALT_FUNDEF_TexBuffer
typedef void (*PFNGLTEXBUFFERPROC_ALT)(GLenum,GLenum,GLuint);
static inline void glTexBuffer(GLenum target1,GLenum internalformat1,GLuint buffer1)
{
#ifdef __cplusplus
	static PFNGLTEXBUFFERPROC_ALT fn=(PFNGLTEXBUFFERPROC_ALT)glaltGetProcAddressVersion("glTexBuffer",3,2);
#else
	static PFNGLTEXBUFFERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLTEXBUFFERPROC_ALT)glaltGetProcAddressVersion("glTexBuffer",3,2); }
#endif
	 fn(target1,internalformat1,buffer1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_TexImage2DMultisample
#define GL_ALT_FUNDEF_TexImage2DMultisample
typedef void (*PFNGLTEXIMAGE2DMULTISAMPLEPROC_ALT)(GLenum,GLsizei,GLenum,GLsizei,GLsizei,GLboolean);
static inline void glTexImage2DMultisample(GLenum target1,GLsizei samples1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLboolean fixedsamplelocations1)
{
#ifdef __cplusplus
	static PFNGLTEXIMAGE2DMULTISAMPLEPROC_ALT fn=(PFNGLTEXIMAGE2DMULTISAMPLEPROC_ALT)glaltGetProcAddressVersion("glTexImage2DMultisample",3,2);
#else
	static PFNGLTEXIMAGE2DMULTISAMPLEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLTEXIMAGE2DMULTISAMPLEPROC_ALT)glaltGetProcAddressVersion("glTexImage2DMultisample",3,2); }
#endif
	 fn(target1,samples1,internalformat1,width1,height1,fixedsamplelocations1);
}
#endif
#endif

#ifndef GL_VERSION_1_2
#ifndef	GL_ALT_FUNDEF_TexImage3D
#define GL_ALT_FUNDEF_TexImage3D
typedef void (*PFNGLTEXIMAGE3DPROC_ALT)(GLenum,GLint,GLint,GLsizei,GLsizei,GLsizei,GLint,GLenum,GLenum,const void *);
static inline void glTexImage3D(GLenum target1,GLint level1,GLint internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLint border1,GLenum format1,GLenum type1,const void * pixels1)
{
#ifdef __cplusplus
	static PFNGLTEXIMAGE3DPROC_ALT fn=(PFNGLTEXIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glTexImage3D",3,2);
#else
	static PFNGLTEXIMAGE3DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLTEXIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glTexImage3D",3,2); }
#endif
	 fn(target1,level1,internalformat1,width1,height1,depth1,border1,format1,type1,pixels1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_TexImage3DMultisample
#define GL_ALT_FUNDEF_TexImage3DMultisample
typedef void (*PFNGLTEXIMAGE3DMULTISAMPLEPROC_ALT)(GLenum,GLsizei,GLenum,GLsizei,GLsizei,GLsizei,GLboolean);
static inline void glTexImage3DMultisample(GLenum target1,GLsizei samples1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLboolean fixedsamplelocations1)
{
#ifdef __cplusplus
	static PFNGLTEXIMAGE3DMULTISAMPLEPROC_ALT fn=(PFNGLTEXIMAGE3DMULTISAMPLEPROC_ALT)glaltGetProcAddressVersion("glTexImage3DMultisample",3,2);
#else
	static PFNGLTEXIMAGE3DMULTISAMPLEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLTEXIMAGE3DMULTISAMPLEPROC_ALT)glaltGetProcAddressVersion("glTexImage3DMultisample",3,2); }
#endif
	 fn(target1,samples1,internalformat1,width1,height1,depth1,fixedsamplelocations1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_TexParameterIiv
#define GL_ALT_FUNDEF_TexParameterIiv
typedef void (*PFNGLTEXPARAMETERIIVPROC_ALT)(GLenum,GLenum,const GLint *);
static inline void glTexParameterIiv(GLenum target1,GLenum pname1,const GLint * params1)
{
#ifdef __cplusplus
	static PFNGLTEXPARAMETERIIVPROC_ALT fn=(PFNGLTEXPARAMETERIIVPROC_ALT)glaltGetProcAddressVersion("glTexParameterIiv",3,2);
#else
	static PFNGLTEXPARAMETERIIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLTEXPARAMETERIIVPROC_ALT)glaltGetProcAddressVersion("glTexParameterIiv",3,2); }
#endif
	 fn(target1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_TexParameterIuiv
#define GL_ALT_FUNDEF_TexParameterIuiv
typedef void (*PFNGLTEXPARAMETERIUIVPROC_ALT)(GLenum,GLenum,const GLuint *);
static inline void glTexParameterIuiv(GLenum target1,GLenum pname1,const GLuint * params1)
{
#ifdef __cplusplus
	static PFNGLTEXPARAMETERIUIVPROC_ALT fn=(PFNGLTEXPARAMETERIUIVPROC_ALT)glaltGetProcAddressVersion("glTexParameterIuiv",3,2);
#else
	static PFNGLTEXPARAMETERIUIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLTEXPARAMETERIUIVPROC_ALT)glaltGetProcAddressVersion("glTexParameterIuiv",3,2); }
#endif
	 fn(target1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_1_2
#ifndef	GL_ALT_FUNDEF_TexSubImage3D
#define GL_ALT_FUNDEF_TexSubImage3D
typedef void (*PFNGLTEXSUBIMAGE3DPROC_ALT)(GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,const void *);
static inline void glTexSubImage3D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLsizei width1,GLsizei height1,GLsizei depth1,GLenum format1,GLenum type1,const void * pixels1)
{
#ifdef __cplusplus
	static PFNGLTEXSUBIMAGE3DPROC_ALT fn=(PFNGLTEXSUBIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glTexSubImage3D",3,2);
#else
	static PFNGLTEXSUBIMAGE3DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLTEXSUBIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glTexSubImage3D",3,2); }
#endif
	 fn(target1,level1,xoffset1,yoffset1,zoffset1,width1,height1,depth1,format1,type1,pixels1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_TransformFeedbackVaryings
#define GL_ALT_FUNDEF_TransformFeedbackVaryings
typedef void (*PFNGLTRANSFORMFEEDBACKVARYINGSPROC_ALT)(GLuint,GLsizei,const GLchar *const*,GLenum);
static inline void glTransformFeedbackVaryings(GLuint program1,GLsizei count1,const GLchar *const* varyings1,GLenum bufferMode1)
{
#ifdef __cplusplus
	static PFNGLTRANSFORMFEEDBACKVARYINGSPROC_ALT fn=(PFNGLTRANSFORMFEEDBACKVARYINGSPROC_ALT)glaltGetProcAddressVersion("glTransformFeedbackVaryings",3,2);
#else
	static PFNGLTRANSFORMFEEDBACKVARYINGSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLTRANSFORMFEEDBACKVARYINGSPROC_ALT)glaltGetProcAddressVersion("glTransformFeedbackVaryings",3,2); }
#endif
	 fn(program1,count1,varyings1,bufferMode1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform1f
#define GL_ALT_FUNDEF_Uniform1f
typedef void (*PFNGLUNIFORM1FPROC_ALT)(GLint,GLfloat);
static inline void glUniform1f(GLint location1,GLfloat v01)
{
#ifdef __cplusplus
	static PFNGLUNIFORM1FPROC_ALT fn=(PFNGLUNIFORM1FPROC_ALT)glaltGetProcAddressVersion("glUniform1f",3,2);
#else
	static PFNGLUNIFORM1FPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM1FPROC_ALT)glaltGetProcAddressVersion("glUniform1f",3,2); }
#endif
	 fn(location1,v01);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform1fv
#define GL_ALT_FUNDEF_Uniform1fv
typedef void (*PFNGLUNIFORM1FVPROC_ALT)(GLint,GLsizei,const GLfloat *);
static inline void glUniform1fv(GLint location1,GLsizei count1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM1FVPROC_ALT fn=(PFNGLUNIFORM1FVPROC_ALT)glaltGetProcAddressVersion("glUniform1fv",3,2);
#else
	static PFNGLUNIFORM1FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM1FVPROC_ALT)glaltGetProcAddressVersion("glUniform1fv",3,2); }
#endif
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform1i
#define GL_ALT_FUNDEF_Uniform1i
typedef void (*PFNGLUNIFORM1IPROC_ALT)(GLint,GLint);
static inline void glUniform1i(GLint location1,GLint v01)
{
#ifdef __cplusplus
	static PFNGLUNIFORM1IPROC_ALT fn=(PFNGLUNIFORM1IPROC_ALT)glaltGetProcAddressVersion("glUniform1i",3,2);
#else
	static PFNGLUNIFORM1IPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM1IPROC_ALT)glaltGetProcAddressVersion("glUniform1i",3,2); }
#endif
	 fn(location1,v01);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform1iv
#define GL_ALT_FUNDEF_Uniform1iv
typedef void (*PFNGLUNIFORM1IVPROC_ALT)(GLint,GLsizei,const GLint *);
static inline void glUniform1iv(GLint location1,GLsizei count1,const GLint * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM1IVPROC_ALT fn=(PFNGLUNIFORM1IVPROC_ALT)glaltGetProcAddressVersion("glUniform1iv",3,2);
#else
	static PFNGLUNIFORM1IVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM1IVPROC_ALT)glaltGetProcAddressVersion("glUniform1iv",3,2); }
#endif
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_Uniform1ui
#define GL_ALT_FUNDEF_Uniform1ui
typedef void (*PFNGLUNIFORM1UIPROC_ALT)(GLint,GLuint);
static inline void glUniform1ui(GLint location1,GLuint v01)
{
#ifdef __cplusplus
	static PFNGLUNIFORM1UIPROC_ALT fn=(PFNGLUNIFORM1UIPROC_ALT)glaltGetProcAddressVersion("glUniform1ui",3,2);
#else
	static PFNGLUNIFORM1UIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM1UIPROC_ALT)glaltGetProcAddressVersion("glUniform1ui",3,2); }
#endif
	 fn(location1,v01);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_Uniform1uiv
#define GL_ALT_FUNDEF_Uniform1uiv
typedef void (*PFNGLUNIFORM1UIVPROC_ALT)(GLint,GLsizei,const GLuint *);
static inline void glUniform1uiv(GLint location1,GLsizei count1,const GLuint * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM1UIVPROC_ALT fn=(PFNGLUNIFORM1UIVPROC_ALT)glaltGetProcAddressVersion("glUniform1uiv",3,2);
#else
	static PFNGLUNIFORM1UIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM1UIVPROC_ALT)glaltGetProcAddressVersion("glUniform1uiv",3,2); }
#endif
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform2f
#define GL_ALT_FUNDEF_Uniform2f
typedef void (*PFNGLUNIFORM2FPROC_ALT)(GLint,GLfloat,GLfloat);
static inline void glUniform2f(GLint location1,GLfloat v01,GLfloat v11)
{
#ifdef __cplusplus
	static PFNGLUNIFORM2FPROC_ALT fn=(PFNGLUNIFORM2FPROC_ALT)glaltGetProcAddressVersion("glUniform2f",3,2);
#else
	static PFNGLUNIFORM2FPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM2FPROC_ALT)glaltGetProcAddressVersion("glUniform2f",3,2); }
#endif
	 fn(location1,v01,v11);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform2fv
#define GL_ALT_FUNDEF_Uniform2fv
typedef void (*PFNGLUNIFORM2FVPROC_ALT)(GLint,GLsizei,const GLfloat *);
static inline void glUniform2fv(GLint location1,GLsizei count1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM2FVPROC_ALT fn=(PFNGLUNIFORM2FVPROC_ALT)glaltGetProcAddressVersion("glUniform2fv",3,2);
#else
	static PFNGLUNIFORM2FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM2FVPROC_ALT)glaltGetProcAddressVersion("glUniform2fv",3,2); }
#endif
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform2i
#define GL_ALT_FUNDEF_Uniform2i
typedef void (*PFNGLUNIFORM2IPROC_ALT)(GLint,GLint,GLint);
static inline void glUniform2i(GLint location1,GLint v01,GLint v11)
{
#ifdef __cplusplus
	static PFNGLUNIFORM2IPROC_ALT fn=(PFNGLUNIFORM2IPROC_ALT)glaltGetProcAddressVersion("glUniform2i",3,2);
#else
	static PFNGLUNIFORM2IPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM2IPROC_ALT)glaltGetProcAddressVersion("glUniform2i",3,2); }
#endif
	 fn(location1,v01,v11);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform2iv
#define GL_ALT_FUNDEF_Uniform2iv
typedef void (*PFNGLUNIFORM2IVPROC_ALT)(GLint,GLsizei,const GLint *);
static inline void glUniform2iv(GLint location1,GLsizei count1,const GLint * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM2IVPROC_ALT fn=(PFNGLUNIFORM2IVPROC_ALT)glaltGetProcAddressVersion("glUniform2iv",3,2);
#else
	static PFNGLUNIFORM2IVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM2IVPROC_ALT)glaltGetProcAddressVersion("glUniform2iv",3,2); }
#endif
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_Uniform2ui
#define GL_ALT_FUNDEF_Uniform2ui
typedef void (*PFNGLUNIFORM2UIPROC_ALT)(GLint,GLuint,GLuint);
static inline void glUniform2ui(GLint location1,GLuint v01,GLuint v11)
{
#ifdef __cplusplus
	static PFNGLUNIFORM2UIPROC_ALT fn=(PFNGLUNIFORM2UIPROC_ALT)glaltGetProcAddressVersion("glUniform2ui",3,2);
#else
	static PFNGLUNIFORM2UIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM2UIPROC_ALT)glaltGetProcAddressVersion("glUniform2ui",3,2); }
#endif
	 fn(location1,v01,v11);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_Uniform2uiv
#define GL_ALT_FUNDEF_Uniform2uiv
typedef void (*PFNGLUNIFORM2UIVPROC_ALT)(GLint,GLsizei,const GLuint *);
static inline void glUniform2uiv(GLint location1,GLsizei count1,const GLuint * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM2UIVPROC_ALT fn=(PFNGLUNIFORM2UIVPROC_ALT)glaltGetProcAddressVersion("glUniform2uiv",3,2);
#else
	static PFNGLUNIFORM2UIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM2UIVPROC_ALT)glaltGetProcAddressVersion("glUniform2uiv",3,2); }
#endif
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform3f
#define GL_ALT_FUNDEF_Uniform3f
typedef void (*PFNGLUNIFORM3FPROC_ALT)(GLint,GLfloat,GLfloat,GLfloat);
static inline void glUniform3f(GLint location1,GLfloat v01,GLfloat v11,GLfloat v21)
{
#ifdef __cplusplus
	static PFNGLUNIFORM3FPROC_ALT fn=(PFNGLUNIFORM3FPROC_ALT)glaltGetProcAddressVersion("glUniform3f",3,2);
#else
	static PFNGLUNIFORM3FPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM3FPROC_ALT)glaltGetProcAddressVersion("glUniform3f",3,2); }
#endif
	 fn(location1,v01,v11,v21);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform3fv
#define GL_ALT_FUNDEF_Uniform3fv
typedef void (*PFNGLUNIFORM3FVPROC_ALT)(GLint,GLsizei,const GLfloat *);
static inline void glUniform3fv(GLint location1,GLsizei count1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM3FVPROC_ALT fn=(PFNGLUNIFORM3FVPROC_ALT)glaltGetProcAddressVersion("glUniform3fv",3,2);
#else
	static PFNGLUNIFORM3FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM3FVPROC_ALT)glaltGetProcAddressVersion("glUniform3fv",3,2); }
#endif
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform3i
#define GL_ALT_FUNDEF_Uniform3i
typedef void (*PFNGLUNIFORM3IPROC_ALT)(GLint,GLint,GLint,GLint);
static inline void glUniform3i(GLint location1,GLint v01,GLint v11,GLint v21)
{
#ifdef __cplusplus
	static PFNGLUNIFORM3IPROC_ALT fn=(PFNGLUNIFORM3IPROC_ALT)glaltGetProcAddressVersion("glUniform3i",3,2);
#else
	static PFNGLUNIFORM3IPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM3IPROC_ALT)glaltGetProcAddressVersion("glUniform3i",3,2); }
#endif
	 fn(location1,v01,v11,v21);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform3iv
#define GL_ALT_FUNDEF_Uniform3iv
typedef void (*PFNGLUNIFORM3IVPROC_ALT)(GLint,GLsizei,const GLint *);
static inline void glUniform3iv(GLint location1,GLsizei count1,const GLint * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM3IVPROC_ALT fn=(PFNGLUNIFORM3IVPROC_ALT)glaltGetProcAddressVersion("glUniform3iv",3,2);
#else
	static PFNGLUNIFORM3IVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM3IVPROC_ALT)glaltGetProcAddressVersion("glUniform3iv",3,2); }
#endif
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_Uniform3ui
#define GL_ALT_FUNDEF_Uniform3ui
typedef void (*PFNGLUNIFORM3UIPROC_ALT)(GLint,GLuint,GLuint,GLuint);
static inline void glUniform3ui(GLint location1,GLuint v01,GLuint v11,GLuint v21)
{
#ifdef __cplusplus
	static PFNGLUNIFORM3UIPROC_ALT fn=(PFNGLUNIFORM3UIPROC_ALT)glaltGetProcAddressVersion("glUniform3ui",3,2);
#else
	static PFNGLUNIFORM3UIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM3UIPROC_ALT)glaltGetProcAddressVersion("glUniform3ui",3,2); }
#endif
	 fn(location1,v01,v11,v21);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_Uniform3uiv
#define GL_ALT_FUNDEF_Uniform3uiv
typedef void (*PFNGLUNIFORM3UIVPROC_ALT)(GLint,GLsizei,const GLuint *);
static inline void glUniform3uiv(GLint location1,GLsizei count1,const GLuint * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM3UIVPROC_ALT fn=(PFNGLUNIFORM3UIVPROC_ALT)glaltGetProcAddressVersion("glUniform3uiv",3,2);
#else
	static PFNGLUNIFORM3UIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM3UIVPROC_ALT)glaltGetProcAddressVersion("glUniform3uiv",3,2); }
#endif
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform4f
#define GL_ALT_FUNDEF_Uniform4f
typedef void (*PFNGLUNIFORM4FPROC_ALT)(GLint,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glUniform4f(GLint location1,GLfloat v01,GLfloat v11,GLfloat v21,GLfloat v31)
{
#ifdef __cplusplus
	static PFNGLUNIFORM4FPROC_ALT fn=(PFNGLUNIFORM4FPROC_ALT)glaltGetProcAddressVersion("glUniform4f",3,2);
#else
	static PFNGLUNIFORM4FPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM4FPROC_ALT)glaltGetProcAddressVersion("glUniform4f",3,2); }
#endif
	 fn(location1,v01,v11,v21,v31);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform4fv
#define GL_ALT_FUNDEF_Uniform4fv
typedef void (*PFNGLUNIFORM4FVPROC_ALT)(GLint,GLsizei,const GLfloat *);
static inline void glUniform4fv(GLint location1,GLsizei count1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM4FVPROC_ALT fn=(PFNGLUNIFORM4FVPROC_ALT)glaltGetProcAddressVersion("glUniform4fv",3,2);
#else
	static PFNGLUNIFORM4FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM4FVPROC_ALT)glaltGetProcAddressVersion("glUniform4fv",3,2); }
#endif
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform4i
#define GL_ALT_FUNDEF_Uniform4i
typedef void (*PFNGLUNIFORM4IPROC_ALT)(GLint,GLint,GLint,GLint,GLint);
static inline void glUniform4i(GLint location1,GLint v01,GLint v11,GLint v21,GLint v31)
{
#ifdef __cplusplus
	static PFNGLUNIFORM4IPROC_ALT fn=(PFNGLUNIFORM4IPROC_ALT)glaltGetProcAddressVersion("glUniform4i",3,2);
#else
	static PFNGLUNIFORM4IPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM4IPROC_ALT)glaltGetProcAddressVersion("glUniform4i",3,2); }
#endif
	 fn(location1,v01,v11,v21,v31);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform4iv
#define GL_ALT_FUNDEF_Uniform4iv
typedef void (*PFNGLUNIFORM4IVPROC_ALT)(GLint,GLsizei,const GLint *);
static inline void glUniform4iv(GLint location1,GLsizei count1,const GLint * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM4IVPROC_ALT fn=(PFNGLUNIFORM4IVPROC_ALT)glaltGetProcAddressVersion("glUniform4iv",3,2);
#else
	static PFNGLUNIFORM4IVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM4IVPROC_ALT)glaltGetProcAddressVersion("glUniform4iv",3,2); }
#endif
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_Uniform4ui
#define GL_ALT_FUNDEF_Uniform4ui
typedef void (*PFNGLUNIFORM4UIPROC_ALT)(GLint,GLuint,GLuint,GLuint,GLuint);
static inline void glUniform4ui(GLint location1,GLuint v01,GLuint v11,GLuint v21,GLuint v31)
{
#ifdef __cplusplus
	static PFNGLUNIFORM4UIPROC_ALT fn=(PFNGLUNIFORM4UIPROC_ALT)glaltGetProcAddressVersion("glUniform4ui",3,2);
#else
	static PFNGLUNIFORM4UIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM4UIPROC_ALT)glaltGetProcAddressVersion("glUniform4ui",3,2); }
#endif
	 fn(location1,v01,v11,v21,v31);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_Uniform4uiv
#define GL_ALT_FUNDEF_Uniform4uiv
typedef void (*PFNGLUNIFORM4UIVPROC_ALT)(GLint,GLsizei,const GLuint *);
static inline void glUniform4uiv(GLint location1,GLsizei count1,const GLuint * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM4UIVPROC_ALT fn=(PFNGLUNIFORM4UIVPROC_ALT)glaltGetProcAddressVersion("glUniform4uiv",3,2);
#else
	static PFNGLUNIFORM4UIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM4UIVPROC_ALT)glaltGetProcAddressVersion("glUniform4uiv",3,2); }
#endif
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_3_1
#ifndef	GL_ALT_FUNDEF_UniformBlockBinding
#define GL_ALT_FUNDEF_UniformBlockBinding
typedef void (*PFNGLUNIFORMBLOCKBINDINGPROC_ALT)(GLuint,GLuint,GLuint);
static inline void glUniformBlockBinding(GLuint program1,GLuint uniformBlockIndex1,GLuint uniformBlockBinding1)
{
#ifdef __cplusplus
	static PFNGLUNIFORMBLOCKBINDINGPROC_ALT fn=(PFNGLUNIFORMBLOCKBINDINGPROC_ALT)glaltGetProcAddressVersion("glUniformBlockBinding",3,2);
#else
	static PFNGLUNIFORMBLOCKBINDINGPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORMBLOCKBINDINGPROC_ALT)glaltGetProcAddressVersion("glUniformBlockBinding",3,2); }
#endif
	 fn(program1,uniformBlockIndex1,uniformBlockBinding1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_UniformMatrix2fv
#define GL_ALT_FUNDEF_UniformMatrix2fv
typedef void (*PFNGLUNIFORMMATRIX2FVPROC_ALT)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glUniformMatrix2fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORMMATRIX2FVPROC_ALT fn=(PFNGLUNIFORMMATRIX2FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix2fv",3,2);
#else
	static PFNGLUNIFORMMATRIX2FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORMMATRIX2FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix2fv",3,2); }
#endif
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_1
#ifndef	GL_ALT_FUNDEF_UniformMatrix2x3fv
#define GL_ALT_FUNDEF_UniformMatrix2x3fv
typedef void (*PFNGLUNIFORMMATRIX2X3FVPROC_ALT)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glUniformMatrix2x3fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORMMATRIX2X3FVPROC_ALT fn=(PFNGLUNIFORMMATRIX2X3FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix2x3fv",3,2);
#else
	static PFNGLUNIFORMMATRIX2X3FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORMMATRIX2X3FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix2x3fv",3,2); }
#endif
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_1
#ifndef	GL_ALT_FUNDEF_UniformMatrix2x4fv
#define GL_ALT_FUNDEF_UniformMatrix2x4fv
typedef void (*PFNGLUNIFORMMATRIX2X4FVPROC_ALT)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glUniformMatrix2x4fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORMMATRIX2X4FVPROC_ALT fn=(PFNGLUNIFORMMATRIX2X4FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix2x4fv",3,2);
#else
	static PFNGLUNIFORMMATRIX2X4FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORMMATRIX2X4FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix2x4fv",3,2); }
#endif
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_UniformMatrix3fv
#define GL_ALT_FUNDEF_UniformMatrix3fv
typedef void (*PFNGLUNIFORMMATRIX3FVPROC_ALT)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glUniformMatrix3fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORMMATRIX3FVPROC_ALT fn=(PFNGLUNIFORMMATRIX3FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix3fv",3,2);
#else
	static PFNGLUNIFORMMATRIX3FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORMMATRIX3FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix3fv",3,2); }
#endif
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_1
#ifndef	GL_ALT_FUNDEF_UniformMatrix3x2fv
#define GL_ALT_FUNDEF_UniformMatrix3x2fv
typedef void (*PFNGLUNIFORMMATRIX3X2FVPROC_ALT)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glUniformMatrix3x2fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORMMATRIX3X2FVPROC_ALT fn=(PFNGLUNIFORMMATRIX3X2FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix3x2fv",3,2);
#else
	static PFNGLUNIFORMMATRIX3X2FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORMMATRIX3X2FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix3x2fv",3,2); }
#endif
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_1
#ifndef	GL_ALT_FUNDEF_UniformMatrix3x4fv
#define GL_ALT_FUNDEF_UniformMatrix3x4fv
typedef void (*PFNGLUNIFORMMATRIX3X4FVPROC_ALT)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glUniformMatrix3x4fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORMMATRIX3X4FVPROC_ALT fn=(PFNGLUNIFORMMATRIX3X4FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix3x4fv",3,2);
#else
	static PFNGLUNIFORMMATRIX3X4FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORMMATRIX3X4FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix3x4fv",3,2); }
#endif
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_UniformMatrix4fv
#define GL_ALT_FUNDEF_UniformMatrix4fv
typedef void (*PFNGLUNIFORMMATRIX4FVPROC_ALT)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glUniformMatrix4fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORMMATRIX4FVPROC_ALT fn=(PFNGLUNIFORMMATRIX4FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix4fv",3,2);
#else
	static PFNGLUNIFORMMATRIX4FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORMMATRIX4FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix4fv",3,2); }
#endif
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_1
#ifndef	GL_ALT_FUNDEF_UniformMatrix4x2fv
#define GL_ALT_FUNDEF_UniformMatrix4x2fv
typedef void (*PFNGLUNIFORMMATRIX4X2FVPROC_ALT)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glUniformMatrix4x2fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORMMATRIX4X2FVPROC_ALT fn=(PFNGLUNIFORMMATRIX4X2FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix4x2fv",3,2);
#else
	static PFNGLUNIFORMMATRIX4X2FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORMMATRIX4X2FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix4x2fv",3,2); }
#endif
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_1
#ifndef	GL_ALT_FUNDEF_UniformMatrix4x3fv
#define GL_ALT_FUNDEF_UniformMatrix4x3fv
typedef void (*PFNGLUNIFORMMATRIX4X3FVPROC_ALT)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glUniformMatrix4x3fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORMMATRIX4X3FVPROC_ALT fn=(PFNGLUNIFORMMATRIX4X3FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix4x3fv",3,2);
#else
	static PFNGLUNIFORMMATRIX4X3FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORMMATRIX4X3FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix4x3fv",3,2); }
#endif
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_UnmapBuffer
#define GL_ALT_FUNDEF_UnmapBuffer
typedef GLboolean (*PFNGLUNMAPBUFFERPROC_ALT)(GLenum);
static inline GLboolean glUnmapBuffer(GLenum target1)
{
#ifdef __cplusplus
	static PFNGLUNMAPBUFFERPROC_ALT fn=(PFNGLUNMAPBUFFERPROC_ALT)glaltGetProcAddressVersion("glUnmapBuffer",3,2);
#else
	static PFNGLUNMAPBUFFERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNMAPBUFFERPROC_ALT)glaltGetProcAddressVersion("glUnmapBuffer",3,2); }
#endif
	return fn(target1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_UseProgram
#define GL_ALT_FUNDEF_UseProgram
typedef void (*PFNGLUSEPROGRAMPROC_ALT)(GLuint);
static inline void glUseProgram(GLuint program1)
{
#ifdef __cplusplus
	static PFNGLUSEPROGRAMPROC_ALT fn=(PFNGLUSEPROGRAMPROC_ALT)glaltGetProcAddressVersion("glUseProgram",3,2);
#else
	static PFNGLUSEPROGRAMPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUSEPROGRAMPROC_ALT)glaltGetProcAddressVersion("glUseProgram",3,2); }
#endif
	 fn(program1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_ValidateProgram
#define GL_ALT_FUNDEF_ValidateProgram
typedef void (*PFNGLVALIDATEPROGRAMPROC_ALT)(GLuint);
static inline void glValidateProgram(GLuint program1)
{
#ifdef __cplusplus
	static PFNGLVALIDATEPROGRAMPROC_ALT fn=(PFNGLVALIDATEPROGRAMPROC_ALT)glaltGetProcAddressVersion("glValidateProgram",3,2);
#else
	static PFNGLVALIDATEPROGRAMPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVALIDATEPROGRAMPROC_ALT)glaltGetProcAddressVersion("glValidateProgram",3,2); }
#endif
	 fn(program1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib1d
#define GL_ALT_FUNDEF_VertexAttrib1d
typedef void (*PFNGLVERTEXATTRIB1DPROC_ALT)(GLuint,GLdouble);
static inline void glVertexAttrib1d(GLuint index1,GLdouble x1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB1DPROC_ALT fn=(PFNGLVERTEXATTRIB1DPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib1d",3,2);
#else
	static PFNGLVERTEXATTRIB1DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB1DPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib1d",3,2); }
#endif
	 fn(index1,x1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib1dv
#define GL_ALT_FUNDEF_VertexAttrib1dv
typedef void (*PFNGLVERTEXATTRIB1DVPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttrib1dv(GLuint index1,const GLdouble * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB1DVPROC_ALT fn=(PFNGLVERTEXATTRIB1DVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib1dv",3,2);
#else
	static PFNGLVERTEXATTRIB1DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB1DVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib1dv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib1f
#define GL_ALT_FUNDEF_VertexAttrib1f
typedef void (*PFNGLVERTEXATTRIB1FPROC_ALT)(GLuint,GLfloat);
static inline void glVertexAttrib1f(GLuint index1,GLfloat x1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB1FPROC_ALT fn=(PFNGLVERTEXATTRIB1FPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib1f",3,2);
#else
	static PFNGLVERTEXATTRIB1FPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB1FPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib1f",3,2); }
#endif
	 fn(index1,x1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib1fv
#define GL_ALT_FUNDEF_VertexAttrib1fv
typedef void (*PFNGLVERTEXATTRIB1FVPROC_ALT)(GLuint,const GLfloat *);
static inline void glVertexAttrib1fv(GLuint index1,const GLfloat * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB1FVPROC_ALT fn=(PFNGLVERTEXATTRIB1FVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib1fv",3,2);
#else
	static PFNGLVERTEXATTRIB1FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB1FVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib1fv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib1s
#define GL_ALT_FUNDEF_VertexAttrib1s
typedef void (*PFNGLVERTEXATTRIB1SPROC_ALT)(GLuint,GLshort);
static inline void glVertexAttrib1s(GLuint index1,GLshort x1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB1SPROC_ALT fn=(PFNGLVERTEXATTRIB1SPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib1s",3,2);
#else
	static PFNGLVERTEXATTRIB1SPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB1SPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib1s",3,2); }
#endif
	 fn(index1,x1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib1sv
#define GL_ALT_FUNDEF_VertexAttrib1sv
typedef void (*PFNGLVERTEXATTRIB1SVPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttrib1sv(GLuint index1,const GLshort * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB1SVPROC_ALT fn=(PFNGLVERTEXATTRIB1SVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib1sv",3,2);
#else
	static PFNGLVERTEXATTRIB1SVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB1SVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib1sv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib2d
#define GL_ALT_FUNDEF_VertexAttrib2d
typedef void (*PFNGLVERTEXATTRIB2DPROC_ALT)(GLuint,GLdouble,GLdouble);
static inline void glVertexAttrib2d(GLuint index1,GLdouble x1,GLdouble y1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB2DPROC_ALT fn=(PFNGLVERTEXATTRIB2DPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib2d",3,2);
#else
	static PFNGLVERTEXATTRIB2DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB2DPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib2d",3,2); }
#endif
	 fn(index1,x1,y1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib2dv
#define GL_ALT_FUNDEF_VertexAttrib2dv
typedef void (*PFNGLVERTEXATTRIB2DVPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttrib2dv(GLuint index1,const GLdouble * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB2DVPROC_ALT fn=(PFNGLVERTEXATTRIB2DVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib2dv",3,2);
#else
	static PFNGLVERTEXATTRIB2DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB2DVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib2dv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib2f
#define GL_ALT_FUNDEF_VertexAttrib2f
typedef void (*PFNGLVERTEXATTRIB2FPROC_ALT)(GLuint,GLfloat,GLfloat);
static inline void glVertexAttrib2f(GLuint index1,GLfloat x1,GLfloat y1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB2FPROC_ALT fn=(PFNGLVERTEXATTRIB2FPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib2f",3,2);
#else
	static PFNGLVERTEXATTRIB2FPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB2FPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib2f",3,2); }
#endif
	 fn(index1,x1,y1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib2fv
#define GL_ALT_FUNDEF_VertexAttrib2fv
typedef void (*PFNGLVERTEXATTRIB2FVPROC_ALT)(GLuint,const GLfloat *);
static inline void glVertexAttrib2fv(GLuint index1,const GLfloat * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB2FVPROC_ALT fn=(PFNGLVERTEXATTRIB2FVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib2fv",3,2);
#else
	static PFNGLVERTEXATTRIB2FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB2FVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib2fv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib2s
#define GL_ALT_FUNDEF_VertexAttrib2s
typedef void (*PFNGLVERTEXATTRIB2SPROC_ALT)(GLuint,GLshort,GLshort);
static inline void glVertexAttrib2s(GLuint index1,GLshort x1,GLshort y1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB2SPROC_ALT fn=(PFNGLVERTEXATTRIB2SPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib2s",3,2);
#else
	static PFNGLVERTEXATTRIB2SPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB2SPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib2s",3,2); }
#endif
	 fn(index1,x1,y1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib2sv
#define GL_ALT_FUNDEF_VertexAttrib2sv
typedef void (*PFNGLVERTEXATTRIB2SVPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttrib2sv(GLuint index1,const GLshort * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB2SVPROC_ALT fn=(PFNGLVERTEXATTRIB2SVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib2sv",3,2);
#else
	static PFNGLVERTEXATTRIB2SVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB2SVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib2sv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib3d
#define GL_ALT_FUNDEF_VertexAttrib3d
typedef void (*PFNGLVERTEXATTRIB3DPROC_ALT)(GLuint,GLdouble,GLdouble,GLdouble);
static inline void glVertexAttrib3d(GLuint index1,GLdouble x1,GLdouble y1,GLdouble z1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB3DPROC_ALT fn=(PFNGLVERTEXATTRIB3DPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib3d",3,2);
#else
	static PFNGLVERTEXATTRIB3DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB3DPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib3d",3,2); }
#endif
	 fn(index1,x1,y1,z1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib3dv
#define GL_ALT_FUNDEF_VertexAttrib3dv
typedef void (*PFNGLVERTEXATTRIB3DVPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttrib3dv(GLuint index1,const GLdouble * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB3DVPROC_ALT fn=(PFNGLVERTEXATTRIB3DVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib3dv",3,2);
#else
	static PFNGLVERTEXATTRIB3DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB3DVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib3dv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib3f
#define GL_ALT_FUNDEF_VertexAttrib3f
typedef void (*PFNGLVERTEXATTRIB3FPROC_ALT)(GLuint,GLfloat,GLfloat,GLfloat);
static inline void glVertexAttrib3f(GLuint index1,GLfloat x1,GLfloat y1,GLfloat z1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB3FPROC_ALT fn=(PFNGLVERTEXATTRIB3FPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib3f",3,2);
#else
	static PFNGLVERTEXATTRIB3FPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB3FPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib3f",3,2); }
#endif
	 fn(index1,x1,y1,z1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib3fv
#define GL_ALT_FUNDEF_VertexAttrib3fv
typedef void (*PFNGLVERTEXATTRIB3FVPROC_ALT)(GLuint,const GLfloat *);
static inline void glVertexAttrib3fv(GLuint index1,const GLfloat * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB3FVPROC_ALT fn=(PFNGLVERTEXATTRIB3FVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib3fv",3,2);
#else
	static PFNGLVERTEXATTRIB3FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB3FVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib3fv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib3s
#define GL_ALT_FUNDEF_VertexAttrib3s
typedef void (*PFNGLVERTEXATTRIB3SPROC_ALT)(GLuint,GLshort,GLshort,GLshort);
static inline void glVertexAttrib3s(GLuint index1,GLshort x1,GLshort y1,GLshort z1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB3SPROC_ALT fn=(PFNGLVERTEXATTRIB3SPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib3s",3,2);
#else
	static PFNGLVERTEXATTRIB3SPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB3SPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib3s",3,2); }
#endif
	 fn(index1,x1,y1,z1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib3sv
#define GL_ALT_FUNDEF_VertexAttrib3sv
typedef void (*PFNGLVERTEXATTRIB3SVPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttrib3sv(GLuint index1,const GLshort * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB3SVPROC_ALT fn=(PFNGLVERTEXATTRIB3SVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib3sv",3,2);
#else
	static PFNGLVERTEXATTRIB3SVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB3SVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib3sv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4Nbv
#define GL_ALT_FUNDEF_VertexAttrib4Nbv
typedef void (*PFNGLVERTEXATTRIB4NBVPROC_ALT)(GLuint,const GLbyte *);
static inline void glVertexAttrib4Nbv(GLuint index1,const GLbyte * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4NBVPROC_ALT fn=(PFNGLVERTEXATTRIB4NBVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Nbv",3,2);
#else
	static PFNGLVERTEXATTRIB4NBVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4NBVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Nbv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4Niv
#define GL_ALT_FUNDEF_VertexAttrib4Niv
typedef void (*PFNGLVERTEXATTRIB4NIVPROC_ALT)(GLuint,const GLint *);
static inline void glVertexAttrib4Niv(GLuint index1,const GLint * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4NIVPROC_ALT fn=(PFNGLVERTEXATTRIB4NIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Niv",3,2);
#else
	static PFNGLVERTEXATTRIB4NIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4NIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Niv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4Nsv
#define GL_ALT_FUNDEF_VertexAttrib4Nsv
typedef void (*PFNGLVERTEXATTRIB4NSVPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttrib4Nsv(GLuint index1,const GLshort * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4NSVPROC_ALT fn=(PFNGLVERTEXATTRIB4NSVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Nsv",3,2);
#else
	static PFNGLVERTEXATTRIB4NSVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4NSVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Nsv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4Nub
#define GL_ALT_FUNDEF_VertexAttrib4Nub
typedef void (*PFNGLVERTEXATTRIB4NUBPROC_ALT)(GLuint,GLubyte,GLubyte,GLubyte,GLubyte);
static inline void glVertexAttrib4Nub(GLuint index1,GLubyte x1,GLubyte y1,GLubyte z1,GLubyte w1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4NUBPROC_ALT fn=(PFNGLVERTEXATTRIB4NUBPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Nub",3,2);
#else
	static PFNGLVERTEXATTRIB4NUBPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4NUBPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Nub",3,2); }
#endif
	 fn(index1,x1,y1,z1,w1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4Nubv
#define GL_ALT_FUNDEF_VertexAttrib4Nubv
typedef void (*PFNGLVERTEXATTRIB4NUBVPROC_ALT)(GLuint,const GLubyte *);
static inline void glVertexAttrib4Nubv(GLuint index1,const GLubyte * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4NUBVPROC_ALT fn=(PFNGLVERTEXATTRIB4NUBVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Nubv",3,2);
#else
	static PFNGLVERTEXATTRIB4NUBVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4NUBVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Nubv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4Nuiv
#define GL_ALT_FUNDEF_VertexAttrib4Nuiv
typedef void (*PFNGLVERTEXATTRIB4NUIVPROC_ALT)(GLuint,const GLuint *);
static inline void glVertexAttrib4Nuiv(GLuint index1,const GLuint * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4NUIVPROC_ALT fn=(PFNGLVERTEXATTRIB4NUIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Nuiv",3,2);
#else
	static PFNGLVERTEXATTRIB4NUIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4NUIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Nuiv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4Nusv
#define GL_ALT_FUNDEF_VertexAttrib4Nusv
typedef void (*PFNGLVERTEXATTRIB4NUSVPROC_ALT)(GLuint,const GLushort *);
static inline void glVertexAttrib4Nusv(GLuint index1,const GLushort * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4NUSVPROC_ALT fn=(PFNGLVERTEXATTRIB4NUSVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Nusv",3,2);
#else
	static PFNGLVERTEXATTRIB4NUSVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4NUSVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Nusv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4bv
#define GL_ALT_FUNDEF_VertexAttrib4bv
typedef void (*PFNGLVERTEXATTRIB4BVPROC_ALT)(GLuint,const GLbyte *);
static inline void glVertexAttrib4bv(GLuint index1,const GLbyte * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4BVPROC_ALT fn=(PFNGLVERTEXATTRIB4BVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4bv",3,2);
#else
	static PFNGLVERTEXATTRIB4BVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4BVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4bv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4d
#define GL_ALT_FUNDEF_VertexAttrib4d
typedef void (*PFNGLVERTEXATTRIB4DPROC_ALT)(GLuint,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void glVertexAttrib4d(GLuint index1,GLdouble x1,GLdouble y1,GLdouble z1,GLdouble w1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4DPROC_ALT fn=(PFNGLVERTEXATTRIB4DPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4d",3,2);
#else
	static PFNGLVERTEXATTRIB4DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4DPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4d",3,2); }
#endif
	 fn(index1,x1,y1,z1,w1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4dv
#define GL_ALT_FUNDEF_VertexAttrib4dv
typedef void (*PFNGLVERTEXATTRIB4DVPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttrib4dv(GLuint index1,const GLdouble * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4DVPROC_ALT fn=(PFNGLVERTEXATTRIB4DVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4dv",3,2);
#else
	static PFNGLVERTEXATTRIB4DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4DVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4dv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4f
#define GL_ALT_FUNDEF_VertexAttrib4f
typedef void (*PFNGLVERTEXATTRIB4FPROC_ALT)(GLuint,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glVertexAttrib4f(GLuint index1,GLfloat x1,GLfloat y1,GLfloat z1,GLfloat w1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4FPROC_ALT fn=(PFNGLVERTEXATTRIB4FPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4f",3,2);
#else
	static PFNGLVERTEXATTRIB4FPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4FPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4f",3,2); }
#endif
	 fn(index1,x1,y1,z1,w1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4fv
#define GL_ALT_FUNDEF_VertexAttrib4fv
typedef void (*PFNGLVERTEXATTRIB4FVPROC_ALT)(GLuint,const GLfloat *);
static inline void glVertexAttrib4fv(GLuint index1,const GLfloat * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4FVPROC_ALT fn=(PFNGLVERTEXATTRIB4FVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4fv",3,2);
#else
	static PFNGLVERTEXATTRIB4FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4FVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4fv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4iv
#define GL_ALT_FUNDEF_VertexAttrib4iv
typedef void (*PFNGLVERTEXATTRIB4IVPROC_ALT)(GLuint,const GLint *);
static inline void glVertexAttrib4iv(GLuint index1,const GLint * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4IVPROC_ALT fn=(PFNGLVERTEXATTRIB4IVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4iv",3,2);
#else
	static PFNGLVERTEXATTRIB4IVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4IVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4iv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4s
#define GL_ALT_FUNDEF_VertexAttrib4s
typedef void (*PFNGLVERTEXATTRIB4SPROC_ALT)(GLuint,GLshort,GLshort,GLshort,GLshort);
static inline void glVertexAttrib4s(GLuint index1,GLshort x1,GLshort y1,GLshort z1,GLshort w1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4SPROC_ALT fn=(PFNGLVERTEXATTRIB4SPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4s",3,2);
#else
	static PFNGLVERTEXATTRIB4SPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4SPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4s",3,2); }
#endif
	 fn(index1,x1,y1,z1,w1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4sv
#define GL_ALT_FUNDEF_VertexAttrib4sv
typedef void (*PFNGLVERTEXATTRIB4SVPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttrib4sv(GLuint index1,const GLshort * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4SVPROC_ALT fn=(PFNGLVERTEXATTRIB4SVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4sv",3,2);
#else
	static PFNGLVERTEXATTRIB4SVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4SVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4sv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4ubv
#define GL_ALT_FUNDEF_VertexAttrib4ubv
typedef void (*PFNGLVERTEXATTRIB4UBVPROC_ALT)(GLuint,const GLubyte *);
static inline void glVertexAttrib4ubv(GLuint index1,const GLubyte * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4UBVPROC_ALT fn=(PFNGLVERTEXATTRIB4UBVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4ubv",3,2);
#else
	static PFNGLVERTEXATTRIB4UBVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4UBVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4ubv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4uiv
#define GL_ALT_FUNDEF_VertexAttrib4uiv
typedef void (*PFNGLVERTEXATTRIB4UIVPROC_ALT)(GLuint,const GLuint *);
static inline void glVertexAttrib4uiv(GLuint index1,const GLuint * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4UIVPROC_ALT fn=(PFNGLVERTEXATTRIB4UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4uiv",3,2);
#else
	static PFNGLVERTEXATTRIB4UIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4uiv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4usv
#define GL_ALT_FUNDEF_VertexAttrib4usv
typedef void (*PFNGLVERTEXATTRIB4USVPROC_ALT)(GLuint,const GLushort *);
static inline void glVertexAttrib4usv(GLuint index1,const GLushort * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4USVPROC_ALT fn=(PFNGLVERTEXATTRIB4USVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4usv",3,2);
#else
	static PFNGLVERTEXATTRIB4USVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4USVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4usv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI1i
#define GL_ALT_FUNDEF_VertexAttribI1i
typedef void (*PFNGLVERTEXATTRIBI1IPROC_ALT)(GLuint,GLint);
static inline void glVertexAttribI1i(GLuint index1,GLint x1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI1IPROC_ALT fn=(PFNGLVERTEXATTRIBI1IPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI1i",3,2);
#else
	static PFNGLVERTEXATTRIBI1IPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI1IPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI1i",3,2); }
#endif
	 fn(index1,x1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI1iv
#define GL_ALT_FUNDEF_VertexAttribI1iv
typedef void (*PFNGLVERTEXATTRIBI1IVPROC_ALT)(GLuint,const GLint *);
static inline void glVertexAttribI1iv(GLuint index1,const GLint * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI1IVPROC_ALT fn=(PFNGLVERTEXATTRIBI1IVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI1iv",3,2);
#else
	static PFNGLVERTEXATTRIBI1IVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI1IVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI1iv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI1ui
#define GL_ALT_FUNDEF_VertexAttribI1ui
typedef void (*PFNGLVERTEXATTRIBI1UIPROC_ALT)(GLuint,GLuint);
static inline void glVertexAttribI1ui(GLuint index1,GLuint x1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI1UIPROC_ALT fn=(PFNGLVERTEXATTRIBI1UIPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI1ui",3,2);
#else
	static PFNGLVERTEXATTRIBI1UIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI1UIPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI1ui",3,2); }
#endif
	 fn(index1,x1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI1uiv
#define GL_ALT_FUNDEF_VertexAttribI1uiv
typedef void (*PFNGLVERTEXATTRIBI1UIVPROC_ALT)(GLuint,const GLuint *);
static inline void glVertexAttribI1uiv(GLuint index1,const GLuint * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI1UIVPROC_ALT fn=(PFNGLVERTEXATTRIBI1UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI1uiv",3,2);
#else
	static PFNGLVERTEXATTRIBI1UIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI1UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI1uiv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI2i
#define GL_ALT_FUNDEF_VertexAttribI2i
typedef void (*PFNGLVERTEXATTRIBI2IPROC_ALT)(GLuint,GLint,GLint);
static inline void glVertexAttribI2i(GLuint index1,GLint x1,GLint y1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI2IPROC_ALT fn=(PFNGLVERTEXATTRIBI2IPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI2i",3,2);
#else
	static PFNGLVERTEXATTRIBI2IPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI2IPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI2i",3,2); }
#endif
	 fn(index1,x1,y1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI2iv
#define GL_ALT_FUNDEF_VertexAttribI2iv
typedef void (*PFNGLVERTEXATTRIBI2IVPROC_ALT)(GLuint,const GLint *);
static inline void glVertexAttribI2iv(GLuint index1,const GLint * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI2IVPROC_ALT fn=(PFNGLVERTEXATTRIBI2IVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI2iv",3,2);
#else
	static PFNGLVERTEXATTRIBI2IVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI2IVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI2iv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI2ui
#define GL_ALT_FUNDEF_VertexAttribI2ui
typedef void (*PFNGLVERTEXATTRIBI2UIPROC_ALT)(GLuint,GLuint,GLuint);
static inline void glVertexAttribI2ui(GLuint index1,GLuint x1,GLuint y1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI2UIPROC_ALT fn=(PFNGLVERTEXATTRIBI2UIPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI2ui",3,2);
#else
	static PFNGLVERTEXATTRIBI2UIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI2UIPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI2ui",3,2); }
#endif
	 fn(index1,x1,y1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI2uiv
#define GL_ALT_FUNDEF_VertexAttribI2uiv
typedef void (*PFNGLVERTEXATTRIBI2UIVPROC_ALT)(GLuint,const GLuint *);
static inline void glVertexAttribI2uiv(GLuint index1,const GLuint * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI2UIVPROC_ALT fn=(PFNGLVERTEXATTRIBI2UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI2uiv",3,2);
#else
	static PFNGLVERTEXATTRIBI2UIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI2UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI2uiv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI3i
#define GL_ALT_FUNDEF_VertexAttribI3i
typedef void (*PFNGLVERTEXATTRIBI3IPROC_ALT)(GLuint,GLint,GLint,GLint);
static inline void glVertexAttribI3i(GLuint index1,GLint x1,GLint y1,GLint z1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI3IPROC_ALT fn=(PFNGLVERTEXATTRIBI3IPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI3i",3,2);
#else
	static PFNGLVERTEXATTRIBI3IPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI3IPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI3i",3,2); }
#endif
	 fn(index1,x1,y1,z1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI3iv
#define GL_ALT_FUNDEF_VertexAttribI3iv
typedef void (*PFNGLVERTEXATTRIBI3IVPROC_ALT)(GLuint,const GLint *);
static inline void glVertexAttribI3iv(GLuint index1,const GLint * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI3IVPROC_ALT fn=(PFNGLVERTEXATTRIBI3IVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI3iv",3,2);
#else
	static PFNGLVERTEXATTRIBI3IVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI3IVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI3iv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI3ui
#define GL_ALT_FUNDEF_VertexAttribI3ui
typedef void (*PFNGLVERTEXATTRIBI3UIPROC_ALT)(GLuint,GLuint,GLuint,GLuint);
static inline void glVertexAttribI3ui(GLuint index1,GLuint x1,GLuint y1,GLuint z1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI3UIPROC_ALT fn=(PFNGLVERTEXATTRIBI3UIPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI3ui",3,2);
#else
	static PFNGLVERTEXATTRIBI3UIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI3UIPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI3ui",3,2); }
#endif
	 fn(index1,x1,y1,z1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI3uiv
#define GL_ALT_FUNDEF_VertexAttribI3uiv
typedef void (*PFNGLVERTEXATTRIBI3UIVPROC_ALT)(GLuint,const GLuint *);
static inline void glVertexAttribI3uiv(GLuint index1,const GLuint * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI3UIVPROC_ALT fn=(PFNGLVERTEXATTRIBI3UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI3uiv",3,2);
#else
	static PFNGLVERTEXATTRIBI3UIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI3UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI3uiv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI4bv
#define GL_ALT_FUNDEF_VertexAttribI4bv
typedef void (*PFNGLVERTEXATTRIBI4BVPROC_ALT)(GLuint,const GLbyte *);
static inline void glVertexAttribI4bv(GLuint index1,const GLbyte * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI4BVPROC_ALT fn=(PFNGLVERTEXATTRIBI4BVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4bv",3,2);
#else
	static PFNGLVERTEXATTRIBI4BVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI4BVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4bv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI4i
#define GL_ALT_FUNDEF_VertexAttribI4i
typedef void (*PFNGLVERTEXATTRIBI4IPROC_ALT)(GLuint,GLint,GLint,GLint,GLint);
static inline void glVertexAttribI4i(GLuint index1,GLint x1,GLint y1,GLint z1,GLint w1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI4IPROC_ALT fn=(PFNGLVERTEXATTRIBI4IPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4i",3,2);
#else
	static PFNGLVERTEXATTRIBI4IPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI4IPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4i",3,2); }
#endif
	 fn(index1,x1,y1,z1,w1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI4iv
#define GL_ALT_FUNDEF_VertexAttribI4iv
typedef void (*PFNGLVERTEXATTRIBI4IVPROC_ALT)(GLuint,const GLint *);
static inline void glVertexAttribI4iv(GLuint index1,const GLint * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI4IVPROC_ALT fn=(PFNGLVERTEXATTRIBI4IVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4iv",3,2);
#else
	static PFNGLVERTEXATTRIBI4IVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI4IVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4iv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI4sv
#define GL_ALT_FUNDEF_VertexAttribI4sv
typedef void (*PFNGLVERTEXATTRIBI4SVPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttribI4sv(GLuint index1,const GLshort * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI4SVPROC_ALT fn=(PFNGLVERTEXATTRIBI4SVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4sv",3,2);
#else
	static PFNGLVERTEXATTRIBI4SVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI4SVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4sv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI4ubv
#define GL_ALT_FUNDEF_VertexAttribI4ubv
typedef void (*PFNGLVERTEXATTRIBI4UBVPROC_ALT)(GLuint,const GLubyte *);
static inline void glVertexAttribI4ubv(GLuint index1,const GLubyte * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI4UBVPROC_ALT fn=(PFNGLVERTEXATTRIBI4UBVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4ubv",3,2);
#else
	static PFNGLVERTEXATTRIBI4UBVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI4UBVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4ubv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI4ui
#define GL_ALT_FUNDEF_VertexAttribI4ui
typedef void (*PFNGLVERTEXATTRIBI4UIPROC_ALT)(GLuint,GLuint,GLuint,GLuint,GLuint);
static inline void glVertexAttribI4ui(GLuint index1,GLuint x1,GLuint y1,GLuint z1,GLuint w1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI4UIPROC_ALT fn=(PFNGLVERTEXATTRIBI4UIPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4ui",3,2);
#else
	static PFNGLVERTEXATTRIBI4UIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI4UIPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4ui",3,2); }
#endif
	 fn(index1,x1,y1,z1,w1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI4uiv
#define GL_ALT_FUNDEF_VertexAttribI4uiv
typedef void (*PFNGLVERTEXATTRIBI4UIVPROC_ALT)(GLuint,const GLuint *);
static inline void glVertexAttribI4uiv(GLuint index1,const GLuint * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI4UIVPROC_ALT fn=(PFNGLVERTEXATTRIBI4UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4uiv",3,2);
#else
	static PFNGLVERTEXATTRIBI4UIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI4UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4uiv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI4usv
#define GL_ALT_FUNDEF_VertexAttribI4usv
typedef void (*PFNGLVERTEXATTRIBI4USVPROC_ALT)(GLuint,const GLushort *);
static inline void glVertexAttribI4usv(GLuint index1,const GLushort * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI4USVPROC_ALT fn=(PFNGLVERTEXATTRIBI4USVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4usv",3,2);
#else
	static PFNGLVERTEXATTRIBI4USVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI4USVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4usv",3,2); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribIPointer
#define GL_ALT_FUNDEF_VertexAttribIPointer
typedef void (*PFNGLVERTEXATTRIBIPOINTERPROC_ALT)(GLuint,GLint,GLenum,GLsizei,const void *);
static inline void glVertexAttribIPointer(GLuint index1,GLint size1,GLenum type1,GLsizei stride1,const void * pointer1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBIPOINTERPROC_ALT fn=(PFNGLVERTEXATTRIBIPOINTERPROC_ALT)glaltGetProcAddressVersion("glVertexAttribIPointer",3,2);
#else
	static PFNGLVERTEXATTRIBIPOINTERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBIPOINTERPROC_ALT)glaltGetProcAddressVersion("glVertexAttribIPointer",3,2); }
#endif
	 fn(index1,size1,type1,stride1,pointer1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttribPointer
#define GL_ALT_FUNDEF_VertexAttribPointer
typedef void (*PFNGLVERTEXATTRIBPOINTERPROC_ALT)(GLuint,GLint,GLenum,GLboolean,GLsizei,const void *);
static inline void glVertexAttribPointer(GLuint index1,GLint size1,GLenum type1,GLboolean normalized1,GLsizei stride1,const void * pointer1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBPOINTERPROC_ALT fn=(PFNGLVERTEXATTRIBPOINTERPROC_ALT)glaltGetProcAddressVersion("glVertexAttribPointer",3,2);
#else
	static PFNGLVERTEXATTRIBPOINTERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBPOINTERPROC_ALT)glaltGetProcAddressVersion("glVertexAttribPointer",3,2); }
#endif
	 fn(index1,size1,type1,normalized1,stride1,pointer1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_WaitSync
#define GL_ALT_FUNDEF_WaitSync
typedef void (*PFNGLWAITSYNCPROC_ALT)(GLsync,GLbitfield,GLuint64);
static inline void glWaitSync(GLsync sync1,GLbitfield flags1,GLuint64 timeout1)
{
#ifdef __cplusplus
	static PFNGLWAITSYNCPROC_ALT fn=(PFNGLWAITSYNCPROC_ALT)glaltGetProcAddressVersion("glWaitSync",3,2);
#else
	static PFNGLWAITSYNCPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLWAITSYNCPROC_ALT)glaltGetProcAddressVersion("glWaitSync",3,2); }
#endif
	 fn(sync1,flags1,timeout1);
}
#endif
#endif

CGUARDEND

#endif
