#ifndef GL_ALT_GL_VERSION_3_0_ALT
#define GL_ALT_GL_VERSION_3_0_ALT
#include "common.h"


#ifndef GL_ALT_API_NAME
#define GL_ALT_API_NAME GL_ALT_GL_API
#endif
#ifndef GL_ALT_API_VERSION
#define GL_ALT_API_VERSION 300
#endif
#ifndef GL_NO_ERROR
#define GL_NO_ERROR 0
#endif //GL_NO_ERROR
#ifndef GL_FALSE
#define GL_FALSE 0
#endif //GL_FALSE
#ifndef GL_NONE
#define GL_NONE 0
#endif //GL_NONE
#ifndef GL_ZERO
#define GL_ZERO 0
#endif //GL_ZERO
#ifndef GL_POINTS
#define GL_POINTS 0x0000
#endif //GL_POINTS
#ifndef GL_CURRENT_BIT
#define GL_CURRENT_BIT 0x00000001
#endif //GL_CURRENT_BIT
#ifndef GL_CLIENT_PIXEL_STORE_BIT
#define GL_CLIENT_PIXEL_STORE_BIT 0x00000001
#endif //GL_CLIENT_PIXEL_STORE_BIT
#ifndef GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#endif //GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
#ifndef GL_POINT_BIT
#define GL_POINT_BIT 0x00000002
#endif //GL_POINT_BIT
#ifndef GL_CLIENT_VERTEX_ARRAY_BIT
#define GL_CLIENT_VERTEX_ARRAY_BIT 0x00000002
#endif //GL_CLIENT_VERTEX_ARRAY_BIT
#ifndef GL_LINE_BIT
#define GL_LINE_BIT 0x00000004
#endif //GL_LINE_BIT
#ifndef GL_POLYGON_BIT
#define GL_POLYGON_BIT 0x00000008
#endif //GL_POLYGON_BIT
#ifndef GL_POLYGON_STIPPLE_BIT
#define GL_POLYGON_STIPPLE_BIT 0x00000010
#endif //GL_POLYGON_STIPPLE_BIT
#ifndef GL_PIXEL_MODE_BIT
#define GL_PIXEL_MODE_BIT 0x00000020
#endif //GL_PIXEL_MODE_BIT
#ifndef GL_LIGHTING_BIT
#define GL_LIGHTING_BIT 0x00000040
#endif //GL_LIGHTING_BIT
#ifndef GL_FOG_BIT
#define GL_FOG_BIT 0x00000080
#endif //GL_FOG_BIT
#ifndef GL_DEPTH_BUFFER_BIT
#define GL_DEPTH_BUFFER_BIT 0x00000100
#endif //GL_DEPTH_BUFFER_BIT
#ifndef GL_ACCUM_BUFFER_BIT
#define GL_ACCUM_BUFFER_BIT 0x00000200
#endif //GL_ACCUM_BUFFER_BIT
#ifndef GL_STENCIL_BUFFER_BIT
#define GL_STENCIL_BUFFER_BIT 0x00000400
#endif //GL_STENCIL_BUFFER_BIT
#ifndef GL_VIEWPORT_BIT
#define GL_VIEWPORT_BIT 0x00000800
#endif //GL_VIEWPORT_BIT
#ifndef GL_TRANSFORM_BIT
#define GL_TRANSFORM_BIT 0x00001000
#endif //GL_TRANSFORM_BIT
#ifndef GL_ENABLE_BIT
#define GL_ENABLE_BIT 0x00002000
#endif //GL_ENABLE_BIT
#ifndef GL_COLOR_BUFFER_BIT
#define GL_COLOR_BUFFER_BIT 0x00004000
#endif //GL_COLOR_BUFFER_BIT
#ifndef GL_HINT_BIT
#define GL_HINT_BIT 0x00008000
#endif //GL_HINT_BIT
#ifndef GL_MAP_READ_BIT
#define GL_MAP_READ_BIT 0x0001
#endif //GL_MAP_READ_BIT
#ifndef GL_LINES
#define GL_LINES 0x0001
#endif //GL_LINES
#ifndef GL_EVAL_BIT
#define GL_EVAL_BIT 0x00010000
#endif //GL_EVAL_BIT
#ifndef GL_MAP_WRITE_BIT
#define GL_MAP_WRITE_BIT 0x0002
#endif //GL_MAP_WRITE_BIT
#ifndef GL_LINE_LOOP
#define GL_LINE_LOOP 0x0002
#endif //GL_LINE_LOOP
#ifndef GL_LIST_BIT
#define GL_LIST_BIT 0x00020000
#endif //GL_LIST_BIT
#ifndef GL_LINE_STRIP
#define GL_LINE_STRIP 0x0003
#endif //GL_LINE_STRIP
#ifndef GL_MAP_INVALIDATE_RANGE_BIT
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#endif //GL_MAP_INVALIDATE_RANGE_BIT
#ifndef GL_TRIANGLES
#define GL_TRIANGLES 0x0004
#endif //GL_TRIANGLES
#ifndef GL_TEXTURE_BIT
#define GL_TEXTURE_BIT 0x00040000
#endif //GL_TEXTURE_BIT
#ifndef GL_TRIANGLE_STRIP
#define GL_TRIANGLE_STRIP 0x0005
#endif //GL_TRIANGLE_STRIP
#ifndef GL_TRIANGLE_FAN
#define GL_TRIANGLE_FAN 0x0006
#endif //GL_TRIANGLE_FAN
#ifndef GL_QUADS
#define GL_QUADS 0x0007
#endif //GL_QUADS
#ifndef GL_MAP_INVALIDATE_BUFFER_BIT
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#endif //GL_MAP_INVALIDATE_BUFFER_BIT
#ifndef GL_QUAD_STRIP
#define GL_QUAD_STRIP 0x0008
#endif //GL_QUAD_STRIP
#ifndef GL_SCISSOR_BIT
#define GL_SCISSOR_BIT 0x00080000
#endif //GL_SCISSOR_BIT
#ifndef GL_POLYGON
#define GL_POLYGON 0x0009
#endif //GL_POLYGON
#ifndef GL_MAP_FLUSH_EXPLICIT_BIT
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#endif //GL_MAP_FLUSH_EXPLICIT_BIT
#ifndef GL_MAP_UNSYNCHRONIZED_BIT
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#endif //GL_MAP_UNSYNCHRONIZED_BIT
#ifndef GL_ACCUM
#define GL_ACCUM 0x0100
#endif //GL_ACCUM
#ifndef GL_LOAD
#define GL_LOAD 0x0101
#endif //GL_LOAD
#ifndef GL_RETURN
#define GL_RETURN 0x0102
#endif //GL_RETURN
#ifndef GL_MULT
#define GL_MULT 0x0103
#endif //GL_MULT
#ifndef GL_ADD
#define GL_ADD 0x0104
#endif //GL_ADD
#ifndef GL_NEVER
#define GL_NEVER 0x0200
#endif //GL_NEVER
#ifndef GL_LESS
#define GL_LESS 0x0201
#endif //GL_LESS
#ifndef GL_EQUAL
#define GL_EQUAL 0x0202
#endif //GL_EQUAL
#ifndef GL_LEQUAL
#define GL_LEQUAL 0x0203
#endif //GL_LEQUAL
#ifndef GL_GREATER
#define GL_GREATER 0x0204
#endif //GL_GREATER
#ifndef GL_NOTEQUAL
#define GL_NOTEQUAL 0x0205
#endif //GL_NOTEQUAL
#ifndef GL_GEQUAL
#define GL_GEQUAL 0x0206
#endif //GL_GEQUAL
#ifndef GL_ALWAYS
#define GL_ALWAYS 0x0207
#endif //GL_ALWAYS
#ifndef GL_SRC_COLOR
#define GL_SRC_COLOR 0x0300
#endif //GL_SRC_COLOR
#ifndef GL_ONE_MINUS_SRC_COLOR
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#endif //GL_ONE_MINUS_SRC_COLOR
#ifndef GL_SRC_ALPHA
#define GL_SRC_ALPHA 0x0302
#endif //GL_SRC_ALPHA
#ifndef GL_ONE_MINUS_SRC_ALPHA
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#endif //GL_ONE_MINUS_SRC_ALPHA
#ifndef GL_DST_ALPHA
#define GL_DST_ALPHA 0x0304
#endif //GL_DST_ALPHA
#ifndef GL_ONE_MINUS_DST_ALPHA
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#endif //GL_ONE_MINUS_DST_ALPHA
#ifndef GL_DST_COLOR
#define GL_DST_COLOR 0x0306
#endif //GL_DST_COLOR
#ifndef GL_ONE_MINUS_DST_COLOR
#define GL_ONE_MINUS_DST_COLOR 0x0307
#endif //GL_ONE_MINUS_DST_COLOR
#ifndef GL_SRC_ALPHA_SATURATE
#define GL_SRC_ALPHA_SATURATE 0x0308
#endif //GL_SRC_ALPHA_SATURATE
#ifndef GL_FRONT_LEFT
#define GL_FRONT_LEFT 0x0400
#endif //GL_FRONT_LEFT
#ifndef GL_FRONT_RIGHT
#define GL_FRONT_RIGHT 0x0401
#endif //GL_FRONT_RIGHT
#ifndef GL_BACK_LEFT
#define GL_BACK_LEFT 0x0402
#endif //GL_BACK_LEFT
#ifndef GL_BACK_RIGHT
#define GL_BACK_RIGHT 0x0403
#endif //GL_BACK_RIGHT
#ifndef GL_FRONT
#define GL_FRONT 0x0404
#endif //GL_FRONT
#ifndef GL_BACK
#define GL_BACK 0x0405
#endif //GL_BACK
#ifndef GL_LEFT
#define GL_LEFT 0x0406
#endif //GL_LEFT
#ifndef GL_RIGHT
#define GL_RIGHT 0x0407
#endif //GL_RIGHT
#ifndef GL_FRONT_AND_BACK
#define GL_FRONT_AND_BACK 0x0408
#endif //GL_FRONT_AND_BACK
#ifndef GL_AUX0
#define GL_AUX0 0x0409
#endif //GL_AUX0
#ifndef GL_AUX1
#define GL_AUX1 0x040A
#endif //GL_AUX1
#ifndef GL_AUX2
#define GL_AUX2 0x040B
#endif //GL_AUX2
#ifndef GL_AUX3
#define GL_AUX3 0x040C
#endif //GL_AUX3
#ifndef GL_INVALID_ENUM
#define GL_INVALID_ENUM 0x0500
#endif //GL_INVALID_ENUM
#ifndef GL_INVALID_VALUE
#define GL_INVALID_VALUE 0x0501
#endif //GL_INVALID_VALUE
#ifndef GL_INVALID_OPERATION
#define GL_INVALID_OPERATION 0x0502
#endif //GL_INVALID_OPERATION
#ifndef GL_STACK_OVERFLOW
#define GL_STACK_OVERFLOW 0x0503
#endif //GL_STACK_OVERFLOW
#ifndef GL_STACK_UNDERFLOW
#define GL_STACK_UNDERFLOW 0x0504
#endif //GL_STACK_UNDERFLOW
#ifndef GL_OUT_OF_MEMORY
#define GL_OUT_OF_MEMORY 0x0505
#endif //GL_OUT_OF_MEMORY
#ifndef GL_INVALID_FRAMEBUFFER_OPERATION
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#endif //GL_INVALID_FRAMEBUFFER_OPERATION
#ifndef GL_2D
#define GL_2D 0x0600
#endif //GL_2D
#ifndef GL_3D
#define GL_3D 0x0601
#endif //GL_3D
#ifndef GL_3D_COLOR
#define GL_3D_COLOR 0x0602
#endif //GL_3D_COLOR
#ifndef GL_3D_COLOR_TEXTURE
#define GL_3D_COLOR_TEXTURE 0x0603
#endif //GL_3D_COLOR_TEXTURE
#ifndef GL_4D_COLOR_TEXTURE
#define GL_4D_COLOR_TEXTURE 0x0604
#endif //GL_4D_COLOR_TEXTURE
#ifndef GL_PASS_THROUGH_TOKEN
#define GL_PASS_THROUGH_TOKEN 0x0700
#endif //GL_PASS_THROUGH_TOKEN
#ifndef GL_POINT_TOKEN
#define GL_POINT_TOKEN 0x0701
#endif //GL_POINT_TOKEN
#ifndef GL_LINE_TOKEN
#define GL_LINE_TOKEN 0x0702
#endif //GL_LINE_TOKEN
#ifndef GL_POLYGON_TOKEN
#define GL_POLYGON_TOKEN 0x0703
#endif //GL_POLYGON_TOKEN
#ifndef GL_BITMAP_TOKEN
#define GL_BITMAP_TOKEN 0x0704
#endif //GL_BITMAP_TOKEN
#ifndef GL_DRAW_PIXEL_TOKEN
#define GL_DRAW_PIXEL_TOKEN 0x0705
#endif //GL_DRAW_PIXEL_TOKEN
#ifndef GL_COPY_PIXEL_TOKEN
#define GL_COPY_PIXEL_TOKEN 0x0706
#endif //GL_COPY_PIXEL_TOKEN
#ifndef GL_LINE_RESET_TOKEN
#define GL_LINE_RESET_TOKEN 0x0707
#endif //GL_LINE_RESET_TOKEN
#ifndef GL_EXP
#define GL_EXP 0x0800
#endif //GL_EXP
#ifndef GL_EXP2
#define GL_EXP2 0x0801
#endif //GL_EXP2
#ifndef GL_CW
#define GL_CW 0x0900
#endif //GL_CW
#ifndef GL_CCW
#define GL_CCW 0x0901
#endif //GL_CCW
#ifndef GL_COEFF
#define GL_COEFF 0x0A00
#endif //GL_COEFF
#ifndef GL_ORDER
#define GL_ORDER 0x0A01
#endif //GL_ORDER
#ifndef GL_DOMAIN
#define GL_DOMAIN 0x0A02
#endif //GL_DOMAIN
#ifndef GL_CURRENT_COLOR
#define GL_CURRENT_COLOR 0x0B00
#endif //GL_CURRENT_COLOR
#ifndef GL_CURRENT_INDEX
#define GL_CURRENT_INDEX 0x0B01
#endif //GL_CURRENT_INDEX
#ifndef GL_CURRENT_NORMAL
#define GL_CURRENT_NORMAL 0x0B02
#endif //GL_CURRENT_NORMAL
#ifndef GL_CURRENT_TEXTURE_COORDS
#define GL_CURRENT_TEXTURE_COORDS 0x0B03
#endif //GL_CURRENT_TEXTURE_COORDS
#ifndef GL_CURRENT_RASTER_COLOR
#define GL_CURRENT_RASTER_COLOR 0x0B04
#endif //GL_CURRENT_RASTER_COLOR
#ifndef GL_CURRENT_RASTER_INDEX
#define GL_CURRENT_RASTER_INDEX 0x0B05
#endif //GL_CURRENT_RASTER_INDEX
#ifndef GL_CURRENT_RASTER_TEXTURE_COORDS
#define GL_CURRENT_RASTER_TEXTURE_COORDS 0x0B06
#endif //GL_CURRENT_RASTER_TEXTURE_COORDS
#ifndef GL_CURRENT_RASTER_POSITION
#define GL_CURRENT_RASTER_POSITION 0x0B07
#endif //GL_CURRENT_RASTER_POSITION
#ifndef GL_CURRENT_RASTER_POSITION_VALID
#define GL_CURRENT_RASTER_POSITION_VALID 0x0B08
#endif //GL_CURRENT_RASTER_POSITION_VALID
#ifndef GL_CURRENT_RASTER_DISTANCE
#define GL_CURRENT_RASTER_DISTANCE 0x0B09
#endif //GL_CURRENT_RASTER_DISTANCE
#ifndef GL_POINT_SMOOTH
#define GL_POINT_SMOOTH 0x0B10
#endif //GL_POINT_SMOOTH
#ifndef GL_POINT_SIZE
#define GL_POINT_SIZE 0x0B11
#endif //GL_POINT_SIZE
#ifndef GL_SMOOTH_POINT_SIZE_RANGE
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#endif //GL_SMOOTH_POINT_SIZE_RANGE
#ifndef GL_POINT_SIZE_RANGE
#define GL_POINT_SIZE_RANGE 0x0B12
#endif //GL_POINT_SIZE_RANGE
#ifndef GL_POINT_SIZE_GRANULARITY
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#endif //GL_POINT_SIZE_GRANULARITY
#ifndef GL_SMOOTH_POINT_SIZE_GRANULARITY
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#endif //GL_SMOOTH_POINT_SIZE_GRANULARITY
#ifndef GL_LINE_SMOOTH
#define GL_LINE_SMOOTH 0x0B20
#endif //GL_LINE_SMOOTH
#ifndef GL_LINE_WIDTH
#define GL_LINE_WIDTH 0x0B21
#endif //GL_LINE_WIDTH
#ifndef GL_LINE_WIDTH_RANGE
#define GL_LINE_WIDTH_RANGE 0x0B22
#endif //GL_LINE_WIDTH_RANGE
#ifndef GL_SMOOTH_LINE_WIDTH_RANGE
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#endif //GL_SMOOTH_LINE_WIDTH_RANGE
#ifndef GL_LINE_WIDTH_GRANULARITY
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#endif //GL_LINE_WIDTH_GRANULARITY
#ifndef GL_SMOOTH_LINE_WIDTH_GRANULARITY
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#endif //GL_SMOOTH_LINE_WIDTH_GRANULARITY
#ifndef GL_LINE_STIPPLE
#define GL_LINE_STIPPLE 0x0B24
#endif //GL_LINE_STIPPLE
#ifndef GL_LINE_STIPPLE_PATTERN
#define GL_LINE_STIPPLE_PATTERN 0x0B25
#endif //GL_LINE_STIPPLE_PATTERN
#ifndef GL_LINE_STIPPLE_REPEAT
#define GL_LINE_STIPPLE_REPEAT 0x0B26
#endif //GL_LINE_STIPPLE_REPEAT
#ifndef GL_LIST_MODE
#define GL_LIST_MODE 0x0B30
#endif //GL_LIST_MODE
#ifndef GL_MAX_LIST_NESTING
#define GL_MAX_LIST_NESTING 0x0B31
#endif //GL_MAX_LIST_NESTING
#ifndef GL_LIST_BASE
#define GL_LIST_BASE 0x0B32
#endif //GL_LIST_BASE
#ifndef GL_LIST_INDEX
#define GL_LIST_INDEX 0x0B33
#endif //GL_LIST_INDEX
#ifndef GL_POLYGON_MODE
#define GL_POLYGON_MODE 0x0B40
#endif //GL_POLYGON_MODE
#ifndef GL_POLYGON_SMOOTH
#define GL_POLYGON_SMOOTH 0x0B41
#endif //GL_POLYGON_SMOOTH
#ifndef GL_POLYGON_STIPPLE
#define GL_POLYGON_STIPPLE 0x0B42
#endif //GL_POLYGON_STIPPLE
#ifndef GL_EDGE_FLAG
#define GL_EDGE_FLAG 0x0B43
#endif //GL_EDGE_FLAG
#ifndef GL_CULL_FACE
#define GL_CULL_FACE 0x0B44
#endif //GL_CULL_FACE
#ifndef GL_CULL_FACE_MODE
#define GL_CULL_FACE_MODE 0x0B45
#endif //GL_CULL_FACE_MODE
#ifndef GL_FRONT_FACE
#define GL_FRONT_FACE 0x0B46
#endif //GL_FRONT_FACE
#ifndef GL_LIGHTING
#define GL_LIGHTING 0x0B50
#endif //GL_LIGHTING
#ifndef GL_LIGHT_MODEL_LOCAL_VIEWER
#define GL_LIGHT_MODEL_LOCAL_VIEWER 0x0B51
#endif //GL_LIGHT_MODEL_LOCAL_VIEWER
#ifndef GL_LIGHT_MODEL_TWO_SIDE
#define GL_LIGHT_MODEL_TWO_SIDE 0x0B52
#endif //GL_LIGHT_MODEL_TWO_SIDE
#ifndef GL_LIGHT_MODEL_AMBIENT
#define GL_LIGHT_MODEL_AMBIENT 0x0B53
#endif //GL_LIGHT_MODEL_AMBIENT
#ifndef GL_SHADE_MODEL
#define GL_SHADE_MODEL 0x0B54
#endif //GL_SHADE_MODEL
#ifndef GL_COLOR_MATERIAL_FACE
#define GL_COLOR_MATERIAL_FACE 0x0B55
#endif //GL_COLOR_MATERIAL_FACE
#ifndef GL_COLOR_MATERIAL_PARAMETER
#define GL_COLOR_MATERIAL_PARAMETER 0x0B56
#endif //GL_COLOR_MATERIAL_PARAMETER
#ifndef GL_COLOR_MATERIAL
#define GL_COLOR_MATERIAL 0x0B57
#endif //GL_COLOR_MATERIAL
#ifndef GL_FOG
#define GL_FOG 0x0B60
#endif //GL_FOG
#ifndef GL_FOG_INDEX
#define GL_FOG_INDEX 0x0B61
#endif //GL_FOG_INDEX
#ifndef GL_FOG_DENSITY
#define GL_FOG_DENSITY 0x0B62
#endif //GL_FOG_DENSITY
#ifndef GL_FOG_START
#define GL_FOG_START 0x0B63
#endif //GL_FOG_START
#ifndef GL_FOG_END
#define GL_FOG_END 0x0B64
#endif //GL_FOG_END
#ifndef GL_FOG_MODE
#define GL_FOG_MODE 0x0B65
#endif //GL_FOG_MODE
#ifndef GL_FOG_COLOR
#define GL_FOG_COLOR 0x0B66
#endif //GL_FOG_COLOR
#ifndef GL_DEPTH_RANGE
#define GL_DEPTH_RANGE 0x0B70
#endif //GL_DEPTH_RANGE
#ifndef GL_DEPTH_TEST
#define GL_DEPTH_TEST 0x0B71
#endif //GL_DEPTH_TEST
#ifndef GL_DEPTH_WRITEMASK
#define GL_DEPTH_WRITEMASK 0x0B72
#endif //GL_DEPTH_WRITEMASK
#ifndef GL_DEPTH_CLEAR_VALUE
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#endif //GL_DEPTH_CLEAR_VALUE
#ifndef GL_DEPTH_FUNC
#define GL_DEPTH_FUNC 0x0B74
#endif //GL_DEPTH_FUNC
#ifndef GL_ACCUM_CLEAR_VALUE
#define GL_ACCUM_CLEAR_VALUE 0x0B80
#endif //GL_ACCUM_CLEAR_VALUE
#ifndef GL_STENCIL_TEST
#define GL_STENCIL_TEST 0x0B90
#endif //GL_STENCIL_TEST
#ifndef GL_STENCIL_CLEAR_VALUE
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#endif //GL_STENCIL_CLEAR_VALUE
#ifndef GL_STENCIL_FUNC
#define GL_STENCIL_FUNC 0x0B92
#endif //GL_STENCIL_FUNC
#ifndef GL_STENCIL_VALUE_MASK
#define GL_STENCIL_VALUE_MASK 0x0B93
#endif //GL_STENCIL_VALUE_MASK
#ifndef GL_STENCIL_FAIL
#define GL_STENCIL_FAIL 0x0B94
#endif //GL_STENCIL_FAIL
#ifndef GL_STENCIL_PASS_DEPTH_FAIL
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#endif //GL_STENCIL_PASS_DEPTH_FAIL
#ifndef GL_STENCIL_PASS_DEPTH_PASS
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#endif //GL_STENCIL_PASS_DEPTH_PASS
#ifndef GL_STENCIL_REF
#define GL_STENCIL_REF 0x0B97
#endif //GL_STENCIL_REF
#ifndef GL_STENCIL_WRITEMASK
#define GL_STENCIL_WRITEMASK 0x0B98
#endif //GL_STENCIL_WRITEMASK
#ifndef GL_MATRIX_MODE
#define GL_MATRIX_MODE 0x0BA0
#endif //GL_MATRIX_MODE
#ifndef GL_NORMALIZE
#define GL_NORMALIZE 0x0BA1
#endif //GL_NORMALIZE
#ifndef GL_VIEWPORT
#define GL_VIEWPORT 0x0BA2
#endif //GL_VIEWPORT
#ifndef GL_MODELVIEW_STACK_DEPTH
#define GL_MODELVIEW_STACK_DEPTH 0x0BA3
#endif //GL_MODELVIEW_STACK_DEPTH
#ifndef GL_PROJECTION_STACK_DEPTH
#define GL_PROJECTION_STACK_DEPTH 0x0BA4
#endif //GL_PROJECTION_STACK_DEPTH
#ifndef GL_TEXTURE_STACK_DEPTH
#define GL_TEXTURE_STACK_DEPTH 0x0BA5
#endif //GL_TEXTURE_STACK_DEPTH
#ifndef GL_MODELVIEW_MATRIX
#define GL_MODELVIEW_MATRIX 0x0BA6
#endif //GL_MODELVIEW_MATRIX
#ifndef GL_PROJECTION_MATRIX
#define GL_PROJECTION_MATRIX 0x0BA7
#endif //GL_PROJECTION_MATRIX
#ifndef GL_TEXTURE_MATRIX
#define GL_TEXTURE_MATRIX 0x0BA8
#endif //GL_TEXTURE_MATRIX
#ifndef GL_ATTRIB_STACK_DEPTH
#define GL_ATTRIB_STACK_DEPTH 0x0BB0
#endif //GL_ATTRIB_STACK_DEPTH
#ifndef GL_CLIENT_ATTRIB_STACK_DEPTH
#define GL_CLIENT_ATTRIB_STACK_DEPTH 0x0BB1
#endif //GL_CLIENT_ATTRIB_STACK_DEPTH
#ifndef GL_ALPHA_TEST
#define GL_ALPHA_TEST 0x0BC0
#endif //GL_ALPHA_TEST
#ifndef GL_ALPHA_TEST_FUNC
#define GL_ALPHA_TEST_FUNC 0x0BC1
#endif //GL_ALPHA_TEST_FUNC
#ifndef GL_ALPHA_TEST_REF
#define GL_ALPHA_TEST_REF 0x0BC2
#endif //GL_ALPHA_TEST_REF
#ifndef GL_DITHER
#define GL_DITHER 0x0BD0
#endif //GL_DITHER
#ifndef GL_BLEND_DST
#define GL_BLEND_DST 0x0BE0
#endif //GL_BLEND_DST
#ifndef GL_BLEND_SRC
#define GL_BLEND_SRC 0x0BE1
#endif //GL_BLEND_SRC
#ifndef GL_BLEND
#define GL_BLEND 0x0BE2
#endif //GL_BLEND
#ifndef GL_LOGIC_OP_MODE
#define GL_LOGIC_OP_MODE 0x0BF0
#endif //GL_LOGIC_OP_MODE
#ifndef GL_LOGIC_OP
#define GL_LOGIC_OP 0x0BF1
#endif //GL_LOGIC_OP
#ifndef GL_INDEX_LOGIC_OP
#define GL_INDEX_LOGIC_OP 0x0BF1
#endif //GL_INDEX_LOGIC_OP
#ifndef GL_COLOR_LOGIC_OP
#define GL_COLOR_LOGIC_OP 0x0BF2
#endif //GL_COLOR_LOGIC_OP
#ifndef GL_AUX_BUFFERS
#define GL_AUX_BUFFERS 0x0C00
#endif //GL_AUX_BUFFERS
#ifndef GL_DRAW_BUFFER
#define GL_DRAW_BUFFER 0x0C01
#endif //GL_DRAW_BUFFER
#ifndef GL_READ_BUFFER
#define GL_READ_BUFFER 0x0C02
#endif //GL_READ_BUFFER
#ifndef GL_SCISSOR_BOX
#define GL_SCISSOR_BOX 0x0C10
#endif //GL_SCISSOR_BOX
#ifndef GL_SCISSOR_TEST
#define GL_SCISSOR_TEST 0x0C11
#endif //GL_SCISSOR_TEST
#ifndef GL_INDEX_CLEAR_VALUE
#define GL_INDEX_CLEAR_VALUE 0x0C20
#endif //GL_INDEX_CLEAR_VALUE
#ifndef GL_INDEX_WRITEMASK
#define GL_INDEX_WRITEMASK 0x0C21
#endif //GL_INDEX_WRITEMASK
#ifndef GL_COLOR_CLEAR_VALUE
#define GL_COLOR_CLEAR_VALUE 0x0C22
#endif //GL_COLOR_CLEAR_VALUE
#ifndef GL_COLOR_WRITEMASK
#define GL_COLOR_WRITEMASK 0x0C23
#endif //GL_COLOR_WRITEMASK
#ifndef GL_INDEX_MODE
#define GL_INDEX_MODE 0x0C30
#endif //GL_INDEX_MODE
#ifndef GL_RGBA_MODE
#define GL_RGBA_MODE 0x0C31
#endif //GL_RGBA_MODE
#ifndef GL_DOUBLEBUFFER
#define GL_DOUBLEBUFFER 0x0C32
#endif //GL_DOUBLEBUFFER
#ifndef GL_STEREO
#define GL_STEREO 0x0C33
#endif //GL_STEREO
#ifndef GL_RENDER_MODE
#define GL_RENDER_MODE 0x0C40
#endif //GL_RENDER_MODE
#ifndef GL_PERSPECTIVE_CORRECTION_HINT
#define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50
#endif //GL_PERSPECTIVE_CORRECTION_HINT
#ifndef GL_POINT_SMOOTH_HINT
#define GL_POINT_SMOOTH_HINT 0x0C51
#endif //GL_POINT_SMOOTH_HINT
#ifndef GL_LINE_SMOOTH_HINT
#define GL_LINE_SMOOTH_HINT 0x0C52
#endif //GL_LINE_SMOOTH_HINT
#ifndef GL_POLYGON_SMOOTH_HINT
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#endif //GL_POLYGON_SMOOTH_HINT
#ifndef GL_FOG_HINT
#define GL_FOG_HINT 0x0C54
#endif //GL_FOG_HINT
#ifndef GL_TEXTURE_GEN_S
#define GL_TEXTURE_GEN_S 0x0C60
#endif //GL_TEXTURE_GEN_S
#ifndef GL_TEXTURE_GEN_T
#define GL_TEXTURE_GEN_T 0x0C61
#endif //GL_TEXTURE_GEN_T
#ifndef GL_TEXTURE_GEN_R
#define GL_TEXTURE_GEN_R 0x0C62
#endif //GL_TEXTURE_GEN_R
#ifndef GL_TEXTURE_GEN_Q
#define GL_TEXTURE_GEN_Q 0x0C63
#endif //GL_TEXTURE_GEN_Q
#ifndef GL_PIXEL_MAP_I_TO_I
#define GL_PIXEL_MAP_I_TO_I 0x0C70
#endif //GL_PIXEL_MAP_I_TO_I
#ifndef GL_PIXEL_MAP_S_TO_S
#define GL_PIXEL_MAP_S_TO_S 0x0C71
#endif //GL_PIXEL_MAP_S_TO_S
#ifndef GL_PIXEL_MAP_I_TO_R
#define GL_PIXEL_MAP_I_TO_R 0x0C72
#endif //GL_PIXEL_MAP_I_TO_R
#ifndef GL_PIXEL_MAP_I_TO_G
#define GL_PIXEL_MAP_I_TO_G 0x0C73
#endif //GL_PIXEL_MAP_I_TO_G
#ifndef GL_PIXEL_MAP_I_TO_B
#define GL_PIXEL_MAP_I_TO_B 0x0C74
#endif //GL_PIXEL_MAP_I_TO_B
#ifndef GL_PIXEL_MAP_I_TO_A
#define GL_PIXEL_MAP_I_TO_A 0x0C75
#endif //GL_PIXEL_MAP_I_TO_A
#ifndef GL_PIXEL_MAP_R_TO_R
#define GL_PIXEL_MAP_R_TO_R 0x0C76
#endif //GL_PIXEL_MAP_R_TO_R
#ifndef GL_PIXEL_MAP_G_TO_G
#define GL_PIXEL_MAP_G_TO_G 0x0C77
#endif //GL_PIXEL_MAP_G_TO_G
#ifndef GL_PIXEL_MAP_B_TO_B
#define GL_PIXEL_MAP_B_TO_B 0x0C78
#endif //GL_PIXEL_MAP_B_TO_B
#ifndef GL_PIXEL_MAP_A_TO_A
#define GL_PIXEL_MAP_A_TO_A 0x0C79
#endif //GL_PIXEL_MAP_A_TO_A
#ifndef GL_PIXEL_MAP_I_TO_I_SIZE
#define GL_PIXEL_MAP_I_TO_I_SIZE 0x0CB0
#endif //GL_PIXEL_MAP_I_TO_I_SIZE
#ifndef GL_PIXEL_MAP_S_TO_S_SIZE
#define GL_PIXEL_MAP_S_TO_S_SIZE 0x0CB1
#endif //GL_PIXEL_MAP_S_TO_S_SIZE
#ifndef GL_PIXEL_MAP_I_TO_R_SIZE
#define GL_PIXEL_MAP_I_TO_R_SIZE 0x0CB2
#endif //GL_PIXEL_MAP_I_TO_R_SIZE
#ifndef GL_PIXEL_MAP_I_TO_G_SIZE
#define GL_PIXEL_MAP_I_TO_G_SIZE 0x0CB3
#endif //GL_PIXEL_MAP_I_TO_G_SIZE
#ifndef GL_PIXEL_MAP_I_TO_B_SIZE
#define GL_PIXEL_MAP_I_TO_B_SIZE 0x0CB4
#endif //GL_PIXEL_MAP_I_TO_B_SIZE
#ifndef GL_PIXEL_MAP_I_TO_A_SIZE
#define GL_PIXEL_MAP_I_TO_A_SIZE 0x0CB5
#endif //GL_PIXEL_MAP_I_TO_A_SIZE
#ifndef GL_PIXEL_MAP_R_TO_R_SIZE
#define GL_PIXEL_MAP_R_TO_R_SIZE 0x0CB6
#endif //GL_PIXEL_MAP_R_TO_R_SIZE
#ifndef GL_PIXEL_MAP_G_TO_G_SIZE
#define GL_PIXEL_MAP_G_TO_G_SIZE 0x0CB7
#endif //GL_PIXEL_MAP_G_TO_G_SIZE
#ifndef GL_PIXEL_MAP_B_TO_B_SIZE
#define GL_PIXEL_MAP_B_TO_B_SIZE 0x0CB8
#endif //GL_PIXEL_MAP_B_TO_B_SIZE
#ifndef GL_PIXEL_MAP_A_TO_A_SIZE
#define GL_PIXEL_MAP_A_TO_A_SIZE 0x0CB9
#endif //GL_PIXEL_MAP_A_TO_A_SIZE
#ifndef GL_UNPACK_SWAP_BYTES
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#endif //GL_UNPACK_SWAP_BYTES
#ifndef GL_UNPACK_LSB_FIRST
#define GL_UNPACK_LSB_FIRST 0x0CF1
#endif //GL_UNPACK_LSB_FIRST
#ifndef GL_UNPACK_ROW_LENGTH
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#endif //GL_UNPACK_ROW_LENGTH
#ifndef GL_UNPACK_SKIP_ROWS
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#endif //GL_UNPACK_SKIP_ROWS
#ifndef GL_UNPACK_SKIP_PIXELS
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#endif //GL_UNPACK_SKIP_PIXELS
#ifndef GL_UNPACK_ALIGNMENT
#define GL_UNPACK_ALIGNMENT 0x0CF5
#endif //GL_UNPACK_ALIGNMENT
#ifndef GL_PACK_SWAP_BYTES
#define GL_PACK_SWAP_BYTES 0x0D00
#endif //GL_PACK_SWAP_BYTES
#ifndef GL_PACK_LSB_FIRST
#define GL_PACK_LSB_FIRST 0x0D01
#endif //GL_PACK_LSB_FIRST
#ifndef GL_PACK_ROW_LENGTH
#define GL_PACK_ROW_LENGTH 0x0D02
#endif //GL_PACK_ROW_LENGTH
#ifndef GL_PACK_SKIP_ROWS
#define GL_PACK_SKIP_ROWS 0x0D03
#endif //GL_PACK_SKIP_ROWS
#ifndef GL_PACK_SKIP_PIXELS
#define GL_PACK_SKIP_PIXELS 0x0D04
#endif //GL_PACK_SKIP_PIXELS
#ifndef GL_PACK_ALIGNMENT
#define GL_PACK_ALIGNMENT 0x0D05
#endif //GL_PACK_ALIGNMENT
#ifndef GL_MAP_COLOR
#define GL_MAP_COLOR 0x0D10
#endif //GL_MAP_COLOR
#ifndef GL_MAP_STENCIL
#define GL_MAP_STENCIL 0x0D11
#endif //GL_MAP_STENCIL
#ifndef GL_INDEX_SHIFT
#define GL_INDEX_SHIFT 0x0D12
#endif //GL_INDEX_SHIFT
#ifndef GL_INDEX_OFFSET
#define GL_INDEX_OFFSET 0x0D13
#endif //GL_INDEX_OFFSET
#ifndef GL_RED_SCALE
#define GL_RED_SCALE 0x0D14
#endif //GL_RED_SCALE
#ifndef GL_RED_BIAS
#define GL_RED_BIAS 0x0D15
#endif //GL_RED_BIAS
#ifndef GL_ZOOM_X
#define GL_ZOOM_X 0x0D16
#endif //GL_ZOOM_X
#ifndef GL_ZOOM_Y
#define GL_ZOOM_Y 0x0D17
#endif //GL_ZOOM_Y
#ifndef GL_GREEN_SCALE
#define GL_GREEN_SCALE 0x0D18
#endif //GL_GREEN_SCALE
#ifndef GL_GREEN_BIAS
#define GL_GREEN_BIAS 0x0D19
#endif //GL_GREEN_BIAS
#ifndef GL_BLUE_SCALE
#define GL_BLUE_SCALE 0x0D1A
#endif //GL_BLUE_SCALE
#ifndef GL_BLUE_BIAS
#define GL_BLUE_BIAS 0x0D1B
#endif //GL_BLUE_BIAS
#ifndef GL_ALPHA_SCALE
#define GL_ALPHA_SCALE 0x0D1C
#endif //GL_ALPHA_SCALE
#ifndef GL_ALPHA_BIAS
#define GL_ALPHA_BIAS 0x0D1D
#endif //GL_ALPHA_BIAS
#ifndef GL_DEPTH_SCALE
#define GL_DEPTH_SCALE 0x0D1E
#endif //GL_DEPTH_SCALE
#ifndef GL_DEPTH_BIAS
#define GL_DEPTH_BIAS 0x0D1F
#endif //GL_DEPTH_BIAS
#ifndef GL_MAX_EVAL_ORDER
#define GL_MAX_EVAL_ORDER 0x0D30
#endif //GL_MAX_EVAL_ORDER
#ifndef GL_MAX_LIGHTS
#define GL_MAX_LIGHTS 0x0D31
#endif //GL_MAX_LIGHTS
#ifndef GL_MAX_CLIP_PLANES
#define GL_MAX_CLIP_PLANES 0x0D32
#endif //GL_MAX_CLIP_PLANES
#ifndef GL_MAX_CLIP_DISTANCES
#define GL_MAX_CLIP_DISTANCES 0x0D32
#endif //GL_MAX_CLIP_DISTANCES
#ifndef GL_MAX_TEXTURE_SIZE
#define GL_MAX_TEXTURE_SIZE 0x0D33
#endif //GL_MAX_TEXTURE_SIZE
#ifndef GL_MAX_PIXEL_MAP_TABLE
#define GL_MAX_PIXEL_MAP_TABLE 0x0D34
#endif //GL_MAX_PIXEL_MAP_TABLE
#ifndef GL_MAX_ATTRIB_STACK_DEPTH
#define GL_MAX_ATTRIB_STACK_DEPTH 0x0D35
#endif //GL_MAX_ATTRIB_STACK_DEPTH
#ifndef GL_MAX_MODELVIEW_STACK_DEPTH
#define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36
#endif //GL_MAX_MODELVIEW_STACK_DEPTH
#ifndef GL_MAX_NAME_STACK_DEPTH
#define GL_MAX_NAME_STACK_DEPTH 0x0D37
#endif //GL_MAX_NAME_STACK_DEPTH
#ifndef GL_MAX_PROJECTION_STACK_DEPTH
#define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38
#endif //GL_MAX_PROJECTION_STACK_DEPTH
#ifndef GL_MAX_TEXTURE_STACK_DEPTH
#define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39
#endif //GL_MAX_TEXTURE_STACK_DEPTH
#ifndef GL_MAX_VIEWPORT_DIMS
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#endif //GL_MAX_VIEWPORT_DIMS
#ifndef GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0x0D3B
#endif //GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
#ifndef GL_SUBPIXEL_BITS
#define GL_SUBPIXEL_BITS 0x0D50
#endif //GL_SUBPIXEL_BITS
#ifndef GL_INDEX_BITS
#define GL_INDEX_BITS 0x0D51
#endif //GL_INDEX_BITS
#ifndef GL_RED_BITS
#define GL_RED_BITS 0x0D52
#endif //GL_RED_BITS
#ifndef GL_GREEN_BITS
#define GL_GREEN_BITS 0x0D53
#endif //GL_GREEN_BITS
#ifndef GL_BLUE_BITS
#define GL_BLUE_BITS 0x0D54
#endif //GL_BLUE_BITS
#ifndef GL_ALPHA_BITS
#define GL_ALPHA_BITS 0x0D55
#endif //GL_ALPHA_BITS
#ifndef GL_DEPTH_BITS
#define GL_DEPTH_BITS 0x0D56
#endif //GL_DEPTH_BITS
#ifndef GL_STENCIL_BITS
#define GL_STENCIL_BITS 0x0D57
#endif //GL_STENCIL_BITS
#ifndef GL_ACCUM_RED_BITS
#define GL_ACCUM_RED_BITS 0x0D58
#endif //GL_ACCUM_RED_BITS
#ifndef GL_ACCUM_GREEN_BITS
#define GL_ACCUM_GREEN_BITS 0x0D59
#endif //GL_ACCUM_GREEN_BITS
#ifndef GL_ACCUM_BLUE_BITS
#define GL_ACCUM_BLUE_BITS 0x0D5A
#endif //GL_ACCUM_BLUE_BITS
#ifndef GL_ACCUM_ALPHA_BITS
#define GL_ACCUM_ALPHA_BITS 0x0D5B
#endif //GL_ACCUM_ALPHA_BITS
#ifndef GL_NAME_STACK_DEPTH
#define GL_NAME_STACK_DEPTH 0x0D70
#endif //GL_NAME_STACK_DEPTH
#ifndef GL_AUTO_NORMAL
#define GL_AUTO_NORMAL 0x0D80
#endif //GL_AUTO_NORMAL
#ifndef GL_MAP1_COLOR_4
#define GL_MAP1_COLOR_4 0x0D90
#endif //GL_MAP1_COLOR_4
#ifndef GL_MAP1_INDEX
#define GL_MAP1_INDEX 0x0D91
#endif //GL_MAP1_INDEX
#ifndef GL_MAP1_NORMAL
#define GL_MAP1_NORMAL 0x0D92
#endif //GL_MAP1_NORMAL
#ifndef GL_MAP1_TEXTURE_COORD_1
#define GL_MAP1_TEXTURE_COORD_1 0x0D93
#endif //GL_MAP1_TEXTURE_COORD_1
#ifndef GL_MAP1_TEXTURE_COORD_2
#define GL_MAP1_TEXTURE_COORD_2 0x0D94
#endif //GL_MAP1_TEXTURE_COORD_2
#ifndef GL_MAP1_TEXTURE_COORD_3
#define GL_MAP1_TEXTURE_COORD_3 0x0D95
#endif //GL_MAP1_TEXTURE_COORD_3
#ifndef GL_MAP1_TEXTURE_COORD_4
#define GL_MAP1_TEXTURE_COORD_4 0x0D96
#endif //GL_MAP1_TEXTURE_COORD_4
#ifndef GL_MAP1_VERTEX_3
#define GL_MAP1_VERTEX_3 0x0D97
#endif //GL_MAP1_VERTEX_3
#ifndef GL_MAP1_VERTEX_4
#define GL_MAP1_VERTEX_4 0x0D98
#endif //GL_MAP1_VERTEX_4
#ifndef GL_MAP2_COLOR_4
#define GL_MAP2_COLOR_4 0x0DB0
#endif //GL_MAP2_COLOR_4
#ifndef GL_MAP2_INDEX
#define GL_MAP2_INDEX 0x0DB1
#endif //GL_MAP2_INDEX
#ifndef GL_MAP2_NORMAL
#define GL_MAP2_NORMAL 0x0DB2
#endif //GL_MAP2_NORMAL
#ifndef GL_MAP2_TEXTURE_COORD_1
#define GL_MAP2_TEXTURE_COORD_1 0x0DB3
#endif //GL_MAP2_TEXTURE_COORD_1
#ifndef GL_MAP2_TEXTURE_COORD_2
#define GL_MAP2_TEXTURE_COORD_2 0x0DB4
#endif //GL_MAP2_TEXTURE_COORD_2
#ifndef GL_MAP2_TEXTURE_COORD_3
#define GL_MAP2_TEXTURE_COORD_3 0x0DB5
#endif //GL_MAP2_TEXTURE_COORD_3
#ifndef GL_MAP2_TEXTURE_COORD_4
#define GL_MAP2_TEXTURE_COORD_4 0x0DB6
#endif //GL_MAP2_TEXTURE_COORD_4
#ifndef GL_MAP2_VERTEX_3
#define GL_MAP2_VERTEX_3 0x0DB7
#endif //GL_MAP2_VERTEX_3
#ifndef GL_MAP2_VERTEX_4
#define GL_MAP2_VERTEX_4 0x0DB8
#endif //GL_MAP2_VERTEX_4
#ifndef GL_MAP1_GRID_DOMAIN
#define GL_MAP1_GRID_DOMAIN 0x0DD0
#endif //GL_MAP1_GRID_DOMAIN
#ifndef GL_MAP1_GRID_SEGMENTS
#define GL_MAP1_GRID_SEGMENTS 0x0DD1
#endif //GL_MAP1_GRID_SEGMENTS
#ifndef GL_MAP2_GRID_DOMAIN
#define GL_MAP2_GRID_DOMAIN 0x0DD2
#endif //GL_MAP2_GRID_DOMAIN
#ifndef GL_MAP2_GRID_SEGMENTS
#define GL_MAP2_GRID_SEGMENTS 0x0DD3
#endif //GL_MAP2_GRID_SEGMENTS
#ifndef GL_TEXTURE_1D
#define GL_TEXTURE_1D 0x0DE0
#endif //GL_TEXTURE_1D
#ifndef GL_TEXTURE_2D
#define GL_TEXTURE_2D 0x0DE1
#endif //GL_TEXTURE_2D
#ifndef GL_FEEDBACK_BUFFER_POINTER
#define GL_FEEDBACK_BUFFER_POINTER 0x0DF0
#endif //GL_FEEDBACK_BUFFER_POINTER
#ifndef GL_FEEDBACK_BUFFER_SIZE
#define GL_FEEDBACK_BUFFER_SIZE 0x0DF1
#endif //GL_FEEDBACK_BUFFER_SIZE
#ifndef GL_FEEDBACK_BUFFER_TYPE
#define GL_FEEDBACK_BUFFER_TYPE 0x0DF2
#endif //GL_FEEDBACK_BUFFER_TYPE
#ifndef GL_SELECTION_BUFFER_POINTER
#define GL_SELECTION_BUFFER_POINTER 0x0DF3
#endif //GL_SELECTION_BUFFER_POINTER
#ifndef GL_SELECTION_BUFFER_SIZE
#define GL_SELECTION_BUFFER_SIZE 0x0DF4
#endif //GL_SELECTION_BUFFER_SIZE
#ifndef GL_TEXTURE_WIDTH
#define GL_TEXTURE_WIDTH 0x1000
#endif //GL_TEXTURE_WIDTH
#ifndef GL_TEXTURE_HEIGHT
#define GL_TEXTURE_HEIGHT 0x1001
#endif //GL_TEXTURE_HEIGHT
#ifndef GL_TEXTURE_COMPONENTS
#define GL_TEXTURE_COMPONENTS 0x1003
#endif //GL_TEXTURE_COMPONENTS
#ifndef GL_TEXTURE_INTERNAL_FORMAT
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#endif //GL_TEXTURE_INTERNAL_FORMAT
#ifndef GL_TEXTURE_BORDER_COLOR
#define GL_TEXTURE_BORDER_COLOR 0x1004
#endif //GL_TEXTURE_BORDER_COLOR
#ifndef GL_TEXTURE_BORDER
#define GL_TEXTURE_BORDER 0x1005
#endif //GL_TEXTURE_BORDER
#ifndef GL_DONT_CARE
#define GL_DONT_CARE 0x1100
#endif //GL_DONT_CARE
#ifndef GL_FASTEST
#define GL_FASTEST 0x1101
#endif //GL_FASTEST
#ifndef GL_NICEST
#define GL_NICEST 0x1102
#endif //GL_NICEST
#ifndef GL_AMBIENT
#define GL_AMBIENT 0x1200
#endif //GL_AMBIENT
#ifndef GL_DIFFUSE
#define GL_DIFFUSE 0x1201
#endif //GL_DIFFUSE
#ifndef GL_SPECULAR
#define GL_SPECULAR 0x1202
#endif //GL_SPECULAR
#ifndef GL_POSITION
#define GL_POSITION 0x1203
#endif //GL_POSITION
#ifndef GL_SPOT_DIRECTION
#define GL_SPOT_DIRECTION 0x1204
#endif //GL_SPOT_DIRECTION
#ifndef GL_SPOT_EXPONENT
#define GL_SPOT_EXPONENT 0x1205
#endif //GL_SPOT_EXPONENT
#ifndef GL_SPOT_CUTOFF
#define GL_SPOT_CUTOFF 0x1206
#endif //GL_SPOT_CUTOFF
#ifndef GL_CONSTANT_ATTENUATION
#define GL_CONSTANT_ATTENUATION 0x1207
#endif //GL_CONSTANT_ATTENUATION
#ifndef GL_LINEAR_ATTENUATION
#define GL_LINEAR_ATTENUATION 0x1208
#endif //GL_LINEAR_ATTENUATION
#ifndef GL_QUADRATIC_ATTENUATION
#define GL_QUADRATIC_ATTENUATION 0x1209
#endif //GL_QUADRATIC_ATTENUATION
#ifndef GL_COMPILE
#define GL_COMPILE 0x1300
#endif //GL_COMPILE
#ifndef GL_COMPILE_AND_EXECUTE
#define GL_COMPILE_AND_EXECUTE 0x1301
#endif //GL_COMPILE_AND_EXECUTE
#ifndef GL_BYTE
#define GL_BYTE 0x1400
#endif //GL_BYTE
#ifndef GL_UNSIGNED_BYTE
#define GL_UNSIGNED_BYTE 0x1401
#endif //GL_UNSIGNED_BYTE
#ifndef GL_SHORT
#define GL_SHORT 0x1402
#endif //GL_SHORT
#ifndef GL_UNSIGNED_SHORT
#define GL_UNSIGNED_SHORT 0x1403
#endif //GL_UNSIGNED_SHORT
#ifndef GL_INT
#define GL_INT 0x1404
#endif //GL_INT
#ifndef GL_UNSIGNED_INT
#define GL_UNSIGNED_INT 0x1405
#endif //GL_UNSIGNED_INT
#ifndef GL_FLOAT
#define GL_FLOAT 0x1406
#endif //GL_FLOAT
#ifndef GL_2_BYTES
#define GL_2_BYTES 0x1407
#endif //GL_2_BYTES
#ifndef GL_3_BYTES
#define GL_3_BYTES 0x1408
#endif //GL_3_BYTES
#ifndef GL_4_BYTES
#define GL_4_BYTES 0x1409
#endif //GL_4_BYTES
#ifndef GL_DOUBLE
#define GL_DOUBLE 0x140A
#endif //GL_DOUBLE
#ifndef GL_HALF_FLOAT
#define GL_HALF_FLOAT 0x140B
#endif //GL_HALF_FLOAT
#ifndef GL_CLEAR
#define GL_CLEAR 0x1500
#endif //GL_CLEAR
#ifndef GL_AND
#define GL_AND 0x1501
#endif //GL_AND
#ifndef GL_AND_REVERSE
#define GL_AND_REVERSE 0x1502
#endif //GL_AND_REVERSE
#ifndef GL_COPY
#define GL_COPY 0x1503
#endif //GL_COPY
#ifndef GL_AND_INVERTED
#define GL_AND_INVERTED 0x1504
#endif //GL_AND_INVERTED
#ifndef GL_NOOP
#define GL_NOOP 0x1505
#endif //GL_NOOP
#ifndef GL_XOR
#define GL_XOR 0x1506
#endif //GL_XOR
#ifndef GL_OR
#define GL_OR 0x1507
#endif //GL_OR
#ifndef GL_NOR
#define GL_NOR 0x1508
#endif //GL_NOR
#ifndef GL_EQUIV
#define GL_EQUIV 0x1509
#endif //GL_EQUIV
#ifndef GL_INVERT
#define GL_INVERT 0x150A
#endif //GL_INVERT
#ifndef GL_OR_REVERSE
#define GL_OR_REVERSE 0x150B
#endif //GL_OR_REVERSE
#ifndef GL_COPY_INVERTED
#define GL_COPY_INVERTED 0x150C
#endif //GL_COPY_INVERTED
#ifndef GL_OR_INVERTED
#define GL_OR_INVERTED 0x150D
#endif //GL_OR_INVERTED
#ifndef GL_NAND
#define GL_NAND 0x150E
#endif //GL_NAND
#ifndef GL_SET
#define GL_SET 0x150F
#endif //GL_SET
#ifndef GL_EMISSION
#define GL_EMISSION 0x1600
#endif //GL_EMISSION
#ifndef GL_SHININESS
#define GL_SHININESS 0x1601
#endif //GL_SHININESS
#ifndef GL_AMBIENT_AND_DIFFUSE
#define GL_AMBIENT_AND_DIFFUSE 0x1602
#endif //GL_AMBIENT_AND_DIFFUSE
#ifndef GL_COLOR_INDEXES
#define GL_COLOR_INDEXES 0x1603
#endif //GL_COLOR_INDEXES
#ifndef GL_MODELVIEW
#define GL_MODELVIEW 0x1700
#endif //GL_MODELVIEW
#ifndef GL_PROJECTION
#define GL_PROJECTION 0x1701
#endif //GL_PROJECTION
#ifndef GL_TEXTURE
#define GL_TEXTURE 0x1702
#endif //GL_TEXTURE
#ifndef GL_COLOR
#define GL_COLOR 0x1800
#endif //GL_COLOR
#ifndef GL_DEPTH
#define GL_DEPTH 0x1801
#endif //GL_DEPTH
#ifndef GL_STENCIL
#define GL_STENCIL 0x1802
#endif //GL_STENCIL
#ifndef GL_COLOR_INDEX
#define GL_COLOR_INDEX 0x1900
#endif //GL_COLOR_INDEX
#ifndef GL_STENCIL_INDEX
#define GL_STENCIL_INDEX 0x1901
#endif //GL_STENCIL_INDEX
#ifndef GL_DEPTH_COMPONENT
#define GL_DEPTH_COMPONENT 0x1902
#endif //GL_DEPTH_COMPONENT
#ifndef GL_RED
#define GL_RED 0x1903
#endif //GL_RED
#ifndef GL_GREEN
#define GL_GREEN 0x1904
#endif //GL_GREEN
#ifndef GL_BLUE
#define GL_BLUE 0x1905
#endif //GL_BLUE
#ifndef GL_ALPHA
#define GL_ALPHA 0x1906
#endif //GL_ALPHA
#ifndef GL_RGB
#define GL_RGB 0x1907
#endif //GL_RGB
#ifndef GL_RGBA
#define GL_RGBA 0x1908
#endif //GL_RGBA
#ifndef GL_LUMINANCE
#define GL_LUMINANCE 0x1909
#endif //GL_LUMINANCE
#ifndef GL_LUMINANCE_ALPHA
#define GL_LUMINANCE_ALPHA 0x190A
#endif //GL_LUMINANCE_ALPHA
#ifndef GL_BITMAP
#define GL_BITMAP 0x1A00
#endif //GL_BITMAP
#ifndef GL_POINT
#define GL_POINT 0x1B00
#endif //GL_POINT
#ifndef GL_LINE
#define GL_LINE 0x1B01
#endif //GL_LINE
#ifndef GL_FILL
#define GL_FILL 0x1B02
#endif //GL_FILL
#ifndef GL_RENDER
#define GL_RENDER 0x1C00
#endif //GL_RENDER
#ifndef GL_FEEDBACK
#define GL_FEEDBACK 0x1C01
#endif //GL_FEEDBACK
#ifndef GL_SELECT
#define GL_SELECT 0x1C02
#endif //GL_SELECT
#ifndef GL_FLAT
#define GL_FLAT 0x1D00
#endif //GL_FLAT
#ifndef GL_SMOOTH
#define GL_SMOOTH 0x1D01
#endif //GL_SMOOTH
#ifndef GL_KEEP
#define GL_KEEP 0x1E00
#endif //GL_KEEP
#ifndef GL_REPLACE
#define GL_REPLACE 0x1E01
#endif //GL_REPLACE
#ifndef GL_INCR
#define GL_INCR 0x1E02
#endif //GL_INCR
#ifndef GL_DECR
#define GL_DECR 0x1E03
#endif //GL_DECR
#ifndef GL_VENDOR
#define GL_VENDOR 0x1F00
#endif //GL_VENDOR
#ifndef GL_RENDERER
#define GL_RENDERER 0x1F01
#endif //GL_RENDERER
#ifndef GL_VERSION
#define GL_VERSION 0x1F02
#endif //GL_VERSION
#ifndef GL_EXTENSIONS
#define GL_EXTENSIONS 0x1F03
#endif //GL_EXTENSIONS
#ifndef GL_S
#define GL_S 0x2000
#endif //GL_S
#ifndef GL_MULTISAMPLE_BIT
#define GL_MULTISAMPLE_BIT 0x20000000
#endif //GL_MULTISAMPLE_BIT
#ifndef GL_T
#define GL_T 0x2001
#endif //GL_T
#ifndef GL_R
#define GL_R 0x2002
#endif //GL_R
#ifndef GL_Q
#define GL_Q 0x2003
#endif //GL_Q
#ifndef GL_MODULATE
#define GL_MODULATE 0x2100
#endif //GL_MODULATE
#ifndef GL_DECAL
#define GL_DECAL 0x2101
#endif //GL_DECAL
#ifndef GL_TEXTURE_ENV_MODE
#define GL_TEXTURE_ENV_MODE 0x2200
#endif //GL_TEXTURE_ENV_MODE
#ifndef GL_TEXTURE_ENV_COLOR
#define GL_TEXTURE_ENV_COLOR 0x2201
#endif //GL_TEXTURE_ENV_COLOR
#ifndef GL_TEXTURE_ENV
#define GL_TEXTURE_ENV 0x2300
#endif //GL_TEXTURE_ENV
#ifndef GL_EYE_LINEAR
#define GL_EYE_LINEAR 0x2400
#endif //GL_EYE_LINEAR
#ifndef GL_OBJECT_LINEAR
#define GL_OBJECT_LINEAR 0x2401
#endif //GL_OBJECT_LINEAR
#ifndef GL_SPHERE_MAP
#define GL_SPHERE_MAP 0x2402
#endif //GL_SPHERE_MAP
#ifndef GL_TEXTURE_GEN_MODE
#define GL_TEXTURE_GEN_MODE 0x2500
#endif //GL_TEXTURE_GEN_MODE
#ifndef GL_OBJECT_PLANE
#define GL_OBJECT_PLANE 0x2501
#endif //GL_OBJECT_PLANE
#ifndef GL_EYE_PLANE
#define GL_EYE_PLANE 0x2502
#endif //GL_EYE_PLANE
#ifndef GL_NEAREST
#define GL_NEAREST 0x2600
#endif //GL_NEAREST
#ifndef GL_LINEAR
#define GL_LINEAR 0x2601
#endif //GL_LINEAR
#ifndef GL_NEAREST_MIPMAP_NEAREST
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#endif //GL_NEAREST_MIPMAP_NEAREST
#ifndef GL_LINEAR_MIPMAP_NEAREST
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#endif //GL_LINEAR_MIPMAP_NEAREST
#ifndef GL_NEAREST_MIPMAP_LINEAR
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#endif //GL_NEAREST_MIPMAP_LINEAR
#ifndef GL_LINEAR_MIPMAP_LINEAR
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#endif //GL_LINEAR_MIPMAP_LINEAR
#ifndef GL_TEXTURE_MAG_FILTER
#define GL_TEXTURE_MAG_FILTER 0x2800
#endif //GL_TEXTURE_MAG_FILTER
#ifndef GL_TEXTURE_MIN_FILTER
#define GL_TEXTURE_MIN_FILTER 0x2801
#endif //GL_TEXTURE_MIN_FILTER
#ifndef GL_TEXTURE_WRAP_S
#define GL_TEXTURE_WRAP_S 0x2802
#endif //GL_TEXTURE_WRAP_S
#ifndef GL_TEXTURE_WRAP_T
#define GL_TEXTURE_WRAP_T 0x2803
#endif //GL_TEXTURE_WRAP_T
#ifndef GL_CLAMP
#define GL_CLAMP 0x2900
#endif //GL_CLAMP
#ifndef GL_REPEAT
#define GL_REPEAT 0x2901
#endif //GL_REPEAT
#ifndef GL_POLYGON_OFFSET_UNITS
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#endif //GL_POLYGON_OFFSET_UNITS
#ifndef GL_POLYGON_OFFSET_POINT
#define GL_POLYGON_OFFSET_POINT 0x2A01
#endif //GL_POLYGON_OFFSET_POINT
#ifndef GL_POLYGON_OFFSET_LINE
#define GL_POLYGON_OFFSET_LINE 0x2A02
#endif //GL_POLYGON_OFFSET_LINE
#ifndef GL_R3_G3_B2
#define GL_R3_G3_B2 0x2A10
#endif //GL_R3_G3_B2
#ifndef GL_V2F
#define GL_V2F 0x2A20
#endif //GL_V2F
#ifndef GL_V3F
#define GL_V3F 0x2A21
#endif //GL_V3F
#ifndef GL_C4UB_V2F
#define GL_C4UB_V2F 0x2A22
#endif //GL_C4UB_V2F
#ifndef GL_C4UB_V3F
#define GL_C4UB_V3F 0x2A23
#endif //GL_C4UB_V3F
#ifndef GL_C3F_V3F
#define GL_C3F_V3F 0x2A24
#endif //GL_C3F_V3F
#ifndef GL_N3F_V3F
#define GL_N3F_V3F 0x2A25
#endif //GL_N3F_V3F
#ifndef GL_C4F_N3F_V3F
#define GL_C4F_N3F_V3F 0x2A26
#endif //GL_C4F_N3F_V3F
#ifndef GL_T2F_V3F
#define GL_T2F_V3F 0x2A27
#endif //GL_T2F_V3F
#ifndef GL_T4F_V4F
#define GL_T4F_V4F 0x2A28
#endif //GL_T4F_V4F
#ifndef GL_T2F_C4UB_V3F
#define GL_T2F_C4UB_V3F 0x2A29
#endif //GL_T2F_C4UB_V3F
#ifndef GL_T2F_C3F_V3F
#define GL_T2F_C3F_V3F 0x2A2A
#endif //GL_T2F_C3F_V3F
#ifndef GL_T2F_N3F_V3F
#define GL_T2F_N3F_V3F 0x2A2B
#endif //GL_T2F_N3F_V3F
#ifndef GL_T2F_C4F_N3F_V3F
#define GL_T2F_C4F_N3F_V3F 0x2A2C
#endif //GL_T2F_C4F_N3F_V3F
#ifndef GL_T4F_C4F_N3F_V4F
#define GL_T4F_C4F_N3F_V4F 0x2A2D
#endif //GL_T4F_C4F_N3F_V4F
#ifndef GL_CLIP_PLANE0
#define GL_CLIP_PLANE0 0x3000
#endif //GL_CLIP_PLANE0
#ifndef GL_CLIP_DISTANCE0
#define GL_CLIP_DISTANCE0 0x3000
#endif //GL_CLIP_DISTANCE0
#ifndef GL_CLIP_DISTANCE1
#define GL_CLIP_DISTANCE1 0x3001
#endif //GL_CLIP_DISTANCE1
#ifndef GL_CLIP_PLANE1
#define GL_CLIP_PLANE1 0x3001
#endif //GL_CLIP_PLANE1
#ifndef GL_CLIP_DISTANCE2
#define GL_CLIP_DISTANCE2 0x3002
#endif //GL_CLIP_DISTANCE2
#ifndef GL_CLIP_PLANE2
#define GL_CLIP_PLANE2 0x3002
#endif //GL_CLIP_PLANE2
#ifndef GL_CLIP_PLANE3
#define GL_CLIP_PLANE3 0x3003
#endif //GL_CLIP_PLANE3
#ifndef GL_CLIP_DISTANCE3
#define GL_CLIP_DISTANCE3 0x3003
#endif //GL_CLIP_DISTANCE3
#ifndef GL_CLIP_PLANE4
#define GL_CLIP_PLANE4 0x3004
#endif //GL_CLIP_PLANE4
#ifndef GL_CLIP_DISTANCE4
#define GL_CLIP_DISTANCE4 0x3004
#endif //GL_CLIP_DISTANCE4
#ifndef GL_CLIP_DISTANCE5
#define GL_CLIP_DISTANCE5 0x3005
#endif //GL_CLIP_DISTANCE5
#ifndef GL_CLIP_PLANE5
#define GL_CLIP_PLANE5 0x3005
#endif //GL_CLIP_PLANE5
#ifndef GL_CLIP_DISTANCE6
#define GL_CLIP_DISTANCE6 0x3006
#endif //GL_CLIP_DISTANCE6
#ifndef GL_CLIP_DISTANCE7
#define GL_CLIP_DISTANCE7 0x3007
#endif //GL_CLIP_DISTANCE7
#ifndef GL_LIGHT0
#define GL_LIGHT0 0x4000
#endif //GL_LIGHT0
#ifndef GL_LIGHT1
#define GL_LIGHT1 0x4001
#endif //GL_LIGHT1
#ifndef GL_LIGHT2
#define GL_LIGHT2 0x4002
#endif //GL_LIGHT2
#ifndef GL_LIGHT3
#define GL_LIGHT3 0x4003
#endif //GL_LIGHT3
#ifndef GL_LIGHT4
#define GL_LIGHT4 0x4004
#endif //GL_LIGHT4
#ifndef GL_LIGHT5
#define GL_LIGHT5 0x4005
#endif //GL_LIGHT5
#ifndef GL_LIGHT6
#define GL_LIGHT6 0x4006
#endif //GL_LIGHT6
#ifndef GL_LIGHT7
#define GL_LIGHT7 0x4007
#endif //GL_LIGHT7
#ifndef GL_CONSTANT_COLOR
#define GL_CONSTANT_COLOR 0x8001
#endif //GL_CONSTANT_COLOR
#ifndef GL_ONE_MINUS_CONSTANT_COLOR
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#endif //GL_ONE_MINUS_CONSTANT_COLOR
#ifndef GL_CONSTANT_ALPHA
#define GL_CONSTANT_ALPHA 0x8003
#endif //GL_CONSTANT_ALPHA
#ifndef GL_ONE_MINUS_CONSTANT_ALPHA
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#endif //GL_ONE_MINUS_CONSTANT_ALPHA
#ifndef GL_FUNC_ADD
#define GL_FUNC_ADD 0x8006
#endif //GL_FUNC_ADD
#ifndef GL_MIN
#define GL_MIN 0x8007
#endif //GL_MIN
#ifndef GL_MAX
#define GL_MAX 0x8008
#endif //GL_MAX
#ifndef GL_BLEND_EQUATION_RGB
#define GL_BLEND_EQUATION_RGB 0x8009
#endif //GL_BLEND_EQUATION_RGB
#ifndef GL_FUNC_SUBTRACT
#define GL_FUNC_SUBTRACT 0x800A
#endif //GL_FUNC_SUBTRACT
#ifndef GL_FUNC_REVERSE_SUBTRACT
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#endif //GL_FUNC_REVERSE_SUBTRACT
#ifndef GL_UNSIGNED_BYTE_3_3_2
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#endif //GL_UNSIGNED_BYTE_3_3_2
#ifndef GL_UNSIGNED_SHORT_4_4_4_4
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#endif //GL_UNSIGNED_SHORT_4_4_4_4
#ifndef GL_UNSIGNED_SHORT_5_5_5_1
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#endif //GL_UNSIGNED_SHORT_5_5_5_1
#ifndef GL_UNSIGNED_INT_8_8_8_8
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#endif //GL_UNSIGNED_INT_8_8_8_8
#ifndef GL_UNSIGNED_INT_10_10_10_2
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#endif //GL_UNSIGNED_INT_10_10_10_2
#ifndef GL_POLYGON_OFFSET_FILL
#define GL_POLYGON_OFFSET_FILL 0x8037
#endif //GL_POLYGON_OFFSET_FILL
#ifndef GL_POLYGON_OFFSET_FACTOR
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#endif //GL_POLYGON_OFFSET_FACTOR
#ifndef GL_RESCALE_NORMAL
#define GL_RESCALE_NORMAL 0x803A
#endif //GL_RESCALE_NORMAL
#ifndef GL_ALPHA4
#define GL_ALPHA4 0x803B
#endif //GL_ALPHA4
#ifndef GL_ALPHA8
#define GL_ALPHA8 0x803C
#endif //GL_ALPHA8
#ifndef GL_ALPHA12
#define GL_ALPHA12 0x803D
#endif //GL_ALPHA12
#ifndef GL_ALPHA16
#define GL_ALPHA16 0x803E
#endif //GL_ALPHA16
#ifndef GL_LUMINANCE4
#define GL_LUMINANCE4 0x803F
#endif //GL_LUMINANCE4
#ifndef GL_LUMINANCE8
#define GL_LUMINANCE8 0x8040
#endif //GL_LUMINANCE8
#ifndef GL_LUMINANCE12
#define GL_LUMINANCE12 0x8041
#endif //GL_LUMINANCE12
#ifndef GL_LUMINANCE16
#define GL_LUMINANCE16 0x8042
#endif //GL_LUMINANCE16
#ifndef GL_LUMINANCE4_ALPHA4
#define GL_LUMINANCE4_ALPHA4 0x8043
#endif //GL_LUMINANCE4_ALPHA4
#ifndef GL_LUMINANCE6_ALPHA2
#define GL_LUMINANCE6_ALPHA2 0x8044
#endif //GL_LUMINANCE6_ALPHA2
#ifndef GL_LUMINANCE8_ALPHA8
#define GL_LUMINANCE8_ALPHA8 0x8045
#endif //GL_LUMINANCE8_ALPHA8
#ifndef GL_LUMINANCE12_ALPHA4
#define GL_LUMINANCE12_ALPHA4 0x8046
#endif //GL_LUMINANCE12_ALPHA4
#ifndef GL_LUMINANCE12_ALPHA12
#define GL_LUMINANCE12_ALPHA12 0x8047
#endif //GL_LUMINANCE12_ALPHA12
#ifndef GL_LUMINANCE16_ALPHA16
#define GL_LUMINANCE16_ALPHA16 0x8048
#endif //GL_LUMINANCE16_ALPHA16
#ifndef GL_INTENSITY
#define GL_INTENSITY 0x8049
#endif //GL_INTENSITY
#ifndef GL_INTENSITY4
#define GL_INTENSITY4 0x804A
#endif //GL_INTENSITY4
#ifndef GL_INTENSITY8
#define GL_INTENSITY8 0x804B
#endif //GL_INTENSITY8
#ifndef GL_INTENSITY12
#define GL_INTENSITY12 0x804C
#endif //GL_INTENSITY12
#ifndef GL_INTENSITY16
#define GL_INTENSITY16 0x804D
#endif //GL_INTENSITY16
#ifndef GL_RGB4
#define GL_RGB4 0x804F
#endif //GL_RGB4
#ifndef GL_RGB5
#define GL_RGB5 0x8050
#endif //GL_RGB5
#ifndef GL_RGB8
#define GL_RGB8 0x8051
#endif //GL_RGB8
#ifndef GL_RGB10
#define GL_RGB10 0x8052
#endif //GL_RGB10
#ifndef GL_RGB12
#define GL_RGB12 0x8053
#endif //GL_RGB12
#ifndef GL_RGB16
#define GL_RGB16 0x8054
#endif //GL_RGB16
#ifndef GL_RGBA2
#define GL_RGBA2 0x8055
#endif //GL_RGBA2
#ifndef GL_RGBA4
#define GL_RGBA4 0x8056
#endif //GL_RGBA4
#ifndef GL_RGB5_A1
#define GL_RGB5_A1 0x8057
#endif //GL_RGB5_A1
#ifndef GL_RGBA8
#define GL_RGBA8 0x8058
#endif //GL_RGBA8
#ifndef GL_RGB10_A2
#define GL_RGB10_A2 0x8059
#endif //GL_RGB10_A2
#ifndef GL_RGBA12
#define GL_RGBA12 0x805A
#endif //GL_RGBA12
#ifndef GL_RGBA16
#define GL_RGBA16 0x805B
#endif //GL_RGBA16
#ifndef GL_TEXTURE_RED_SIZE
#define GL_TEXTURE_RED_SIZE 0x805C
#endif //GL_TEXTURE_RED_SIZE
#ifndef GL_TEXTURE_GREEN_SIZE
#define GL_TEXTURE_GREEN_SIZE 0x805D
#endif //GL_TEXTURE_GREEN_SIZE
#ifndef GL_TEXTURE_BLUE_SIZE
#define GL_TEXTURE_BLUE_SIZE 0x805E
#endif //GL_TEXTURE_BLUE_SIZE
#ifndef GL_TEXTURE_ALPHA_SIZE
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#endif //GL_TEXTURE_ALPHA_SIZE
#ifndef GL_TEXTURE_LUMINANCE_SIZE
#define GL_TEXTURE_LUMINANCE_SIZE 0x8060
#endif //GL_TEXTURE_LUMINANCE_SIZE
#ifndef GL_TEXTURE_INTENSITY_SIZE
#define GL_TEXTURE_INTENSITY_SIZE 0x8061
#endif //GL_TEXTURE_INTENSITY_SIZE
#ifndef GL_PROXY_TEXTURE_1D
#define GL_PROXY_TEXTURE_1D 0x8063
#endif //GL_PROXY_TEXTURE_1D
#ifndef GL_PROXY_TEXTURE_2D
#define GL_PROXY_TEXTURE_2D 0x8064
#endif //GL_PROXY_TEXTURE_2D
#ifndef GL_TEXTURE_PRIORITY
#define GL_TEXTURE_PRIORITY 0x8066
#endif //GL_TEXTURE_PRIORITY
#ifndef GL_TEXTURE_RESIDENT
#define GL_TEXTURE_RESIDENT 0x8067
#endif //GL_TEXTURE_RESIDENT
#ifndef GL_TEXTURE_BINDING_1D
#define GL_TEXTURE_BINDING_1D 0x8068
#endif //GL_TEXTURE_BINDING_1D
#ifndef GL_TEXTURE_BINDING_2D
#define GL_TEXTURE_BINDING_2D 0x8069
#endif //GL_TEXTURE_BINDING_2D
#ifndef GL_TEXTURE_BINDING_3D
#define GL_TEXTURE_BINDING_3D 0x806A
#endif //GL_TEXTURE_BINDING_3D
#ifndef GL_PACK_SKIP_IMAGES
#define GL_PACK_SKIP_IMAGES 0x806B
#endif //GL_PACK_SKIP_IMAGES
#ifndef GL_PACK_IMAGE_HEIGHT
#define GL_PACK_IMAGE_HEIGHT 0x806C
#endif //GL_PACK_IMAGE_HEIGHT
#ifndef GL_UNPACK_SKIP_IMAGES
#define GL_UNPACK_SKIP_IMAGES 0x806D
#endif //GL_UNPACK_SKIP_IMAGES
#ifndef GL_UNPACK_IMAGE_HEIGHT
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#endif //GL_UNPACK_IMAGE_HEIGHT
#ifndef GL_TEXTURE_3D
#define GL_TEXTURE_3D 0x806F
#endif //GL_TEXTURE_3D
#ifndef GL_PROXY_TEXTURE_3D
#define GL_PROXY_TEXTURE_3D 0x8070
#endif //GL_PROXY_TEXTURE_3D
#ifndef GL_TEXTURE_DEPTH
#define GL_TEXTURE_DEPTH 0x8071
#endif //GL_TEXTURE_DEPTH
#ifndef GL_TEXTURE_WRAP_R
#define GL_TEXTURE_WRAP_R 0x8072
#endif //GL_TEXTURE_WRAP_R
#ifndef GL_MAX_3D_TEXTURE_SIZE
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#endif //GL_MAX_3D_TEXTURE_SIZE
#ifndef GL_VERTEX_ARRAY
#define GL_VERTEX_ARRAY 0x8074
#endif //GL_VERTEX_ARRAY
#ifndef GL_NORMAL_ARRAY
#define GL_NORMAL_ARRAY 0x8075
#endif //GL_NORMAL_ARRAY
#ifndef GL_COLOR_ARRAY
#define GL_COLOR_ARRAY 0x8076
#endif //GL_COLOR_ARRAY
#ifndef GL_INDEX_ARRAY
#define GL_INDEX_ARRAY 0x8077
#endif //GL_INDEX_ARRAY
#ifndef GL_TEXTURE_COORD_ARRAY
#define GL_TEXTURE_COORD_ARRAY 0x8078
#endif //GL_TEXTURE_COORD_ARRAY
#ifndef GL_EDGE_FLAG_ARRAY
#define GL_EDGE_FLAG_ARRAY 0x8079
#endif //GL_EDGE_FLAG_ARRAY
#ifndef GL_VERTEX_ARRAY_SIZE
#define GL_VERTEX_ARRAY_SIZE 0x807A
#endif //GL_VERTEX_ARRAY_SIZE
#ifndef GL_VERTEX_ARRAY_TYPE
#define GL_VERTEX_ARRAY_TYPE 0x807B
#endif //GL_VERTEX_ARRAY_TYPE
#ifndef GL_VERTEX_ARRAY_STRIDE
#define GL_VERTEX_ARRAY_STRIDE 0x807C
#endif //GL_VERTEX_ARRAY_STRIDE
#ifndef GL_NORMAL_ARRAY_TYPE
#define GL_NORMAL_ARRAY_TYPE 0x807E
#endif //GL_NORMAL_ARRAY_TYPE
#ifndef GL_NORMAL_ARRAY_STRIDE
#define GL_NORMAL_ARRAY_STRIDE 0x807F
#endif //GL_NORMAL_ARRAY_STRIDE
#ifndef GL_COLOR_ARRAY_SIZE
#define GL_COLOR_ARRAY_SIZE 0x8081
#endif //GL_COLOR_ARRAY_SIZE
#ifndef GL_COLOR_ARRAY_TYPE
#define GL_COLOR_ARRAY_TYPE 0x8082
#endif //GL_COLOR_ARRAY_TYPE
#ifndef GL_COLOR_ARRAY_STRIDE
#define GL_COLOR_ARRAY_STRIDE 0x8083
#endif //GL_COLOR_ARRAY_STRIDE
#ifndef GL_INDEX_ARRAY_TYPE
#define GL_INDEX_ARRAY_TYPE 0x8085
#endif //GL_INDEX_ARRAY_TYPE
#ifndef GL_INDEX_ARRAY_STRIDE
#define GL_INDEX_ARRAY_STRIDE 0x8086
#endif //GL_INDEX_ARRAY_STRIDE
#ifndef GL_TEXTURE_COORD_ARRAY_SIZE
#define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088
#endif //GL_TEXTURE_COORD_ARRAY_SIZE
#ifndef GL_TEXTURE_COORD_ARRAY_TYPE
#define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089
#endif //GL_TEXTURE_COORD_ARRAY_TYPE
#ifndef GL_TEXTURE_COORD_ARRAY_STRIDE
#define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A
#endif //GL_TEXTURE_COORD_ARRAY_STRIDE
#ifndef GL_EDGE_FLAG_ARRAY_STRIDE
#define GL_EDGE_FLAG_ARRAY_STRIDE 0x808C
#endif //GL_EDGE_FLAG_ARRAY_STRIDE
#ifndef GL_VERTEX_ARRAY_POINTER
#define GL_VERTEX_ARRAY_POINTER 0x808E
#endif //GL_VERTEX_ARRAY_POINTER
#ifndef GL_NORMAL_ARRAY_POINTER
#define GL_NORMAL_ARRAY_POINTER 0x808F
#endif //GL_NORMAL_ARRAY_POINTER
#ifndef GL_COLOR_ARRAY_POINTER
#define GL_COLOR_ARRAY_POINTER 0x8090
#endif //GL_COLOR_ARRAY_POINTER
#ifndef GL_INDEX_ARRAY_POINTER
#define GL_INDEX_ARRAY_POINTER 0x8091
#endif //GL_INDEX_ARRAY_POINTER
#ifndef GL_TEXTURE_COORD_ARRAY_POINTER
#define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092
#endif //GL_TEXTURE_COORD_ARRAY_POINTER
#ifndef GL_EDGE_FLAG_ARRAY_POINTER
#define GL_EDGE_FLAG_ARRAY_POINTER 0x8093
#endif //GL_EDGE_FLAG_ARRAY_POINTER
#ifndef GL_MULTISAMPLE
#define GL_MULTISAMPLE 0x809D
#endif //GL_MULTISAMPLE
#ifndef GL_SAMPLE_ALPHA_TO_COVERAGE
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#endif //GL_SAMPLE_ALPHA_TO_COVERAGE
#ifndef GL_SAMPLE_ALPHA_TO_ONE
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#endif //GL_SAMPLE_ALPHA_TO_ONE
#ifndef GL_SAMPLE_COVERAGE
#define GL_SAMPLE_COVERAGE 0x80A0
#endif //GL_SAMPLE_COVERAGE
#ifndef GL_SAMPLE_BUFFERS
#define GL_SAMPLE_BUFFERS 0x80A8
#endif //GL_SAMPLE_BUFFERS
#ifndef GL_SAMPLES
#define GL_SAMPLES 0x80A9
#endif //GL_SAMPLES
#ifndef GL_SAMPLE_COVERAGE_VALUE
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#endif //GL_SAMPLE_COVERAGE_VALUE
#ifndef GL_SAMPLE_COVERAGE_INVERT
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#endif //GL_SAMPLE_COVERAGE_INVERT
#ifndef GL_BLEND_DST_RGB
#define GL_BLEND_DST_RGB 0x80C8
#endif //GL_BLEND_DST_RGB
#ifndef GL_BLEND_SRC_RGB
#define GL_BLEND_SRC_RGB 0x80C9
#endif //GL_BLEND_SRC_RGB
#ifndef GL_BLEND_DST_ALPHA
#define GL_BLEND_DST_ALPHA 0x80CA
#endif //GL_BLEND_DST_ALPHA
#ifndef GL_BLEND_SRC_ALPHA
#define GL_BLEND_SRC_ALPHA 0x80CB
#endif //GL_BLEND_SRC_ALPHA
#ifndef GL_BGR
#define GL_BGR 0x80E0
#endif //GL_BGR
#ifndef GL_BGRA
#define GL_BGRA 0x80E1
#endif //GL_BGRA
#ifndef GL_MAX_ELEMENTS_VERTICES
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#endif //GL_MAX_ELEMENTS_VERTICES
#ifndef GL_MAX_ELEMENTS_INDICES
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#endif //GL_MAX_ELEMENTS_INDICES
#ifndef GL_POINT_SIZE_MIN
#define GL_POINT_SIZE_MIN 0x8126
#endif //GL_POINT_SIZE_MIN
#ifndef GL_POINT_SIZE_MAX
#define GL_POINT_SIZE_MAX 0x8127
#endif //GL_POINT_SIZE_MAX
#ifndef GL_POINT_FADE_THRESHOLD_SIZE
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#endif //GL_POINT_FADE_THRESHOLD_SIZE
#ifndef GL_POINT_DISTANCE_ATTENUATION
#define GL_POINT_DISTANCE_ATTENUATION 0x8129
#endif //GL_POINT_DISTANCE_ATTENUATION
#ifndef GL_CLAMP_TO_BORDER
#define GL_CLAMP_TO_BORDER 0x812D
#endif //GL_CLAMP_TO_BORDER
#ifndef GL_CLAMP_TO_EDGE
#define GL_CLAMP_TO_EDGE 0x812F
#endif //GL_CLAMP_TO_EDGE
#ifndef GL_TEXTURE_MIN_LOD
#define GL_TEXTURE_MIN_LOD 0x813A
#endif //GL_TEXTURE_MIN_LOD
#ifndef GL_TEXTURE_MAX_LOD
#define GL_TEXTURE_MAX_LOD 0x813B
#endif //GL_TEXTURE_MAX_LOD
#ifndef GL_TEXTURE_BASE_LEVEL
#define GL_TEXTURE_BASE_LEVEL 0x813C
#endif //GL_TEXTURE_BASE_LEVEL
#ifndef GL_TEXTURE_MAX_LEVEL
#define GL_TEXTURE_MAX_LEVEL 0x813D
#endif //GL_TEXTURE_MAX_LEVEL
#ifndef GL_GENERATE_MIPMAP
#define GL_GENERATE_MIPMAP 0x8191
#endif //GL_GENERATE_MIPMAP
#ifndef GL_GENERATE_MIPMAP_HINT
#define GL_GENERATE_MIPMAP_HINT 0x8192
#endif //GL_GENERATE_MIPMAP_HINT
#ifndef GL_DEPTH_COMPONENT16
#define GL_DEPTH_COMPONENT16 0x81A5
#endif //GL_DEPTH_COMPONENT16
#ifndef GL_DEPTH_COMPONENT24
#define GL_DEPTH_COMPONENT24 0x81A6
#endif //GL_DEPTH_COMPONENT24
#ifndef GL_DEPTH_COMPONENT32
#define GL_DEPTH_COMPONENT32 0x81A7
#endif //GL_DEPTH_COMPONENT32
#ifndef GL_LIGHT_MODEL_COLOR_CONTROL
#define GL_LIGHT_MODEL_COLOR_CONTROL 0x81F8
#endif //GL_LIGHT_MODEL_COLOR_CONTROL
#ifndef GL_SINGLE_COLOR
#define GL_SINGLE_COLOR 0x81F9
#endif //GL_SINGLE_COLOR
#ifndef GL_SEPARATE_SPECULAR_COLOR
#define GL_SEPARATE_SPECULAR_COLOR 0x81FA
#endif //GL_SEPARATE_SPECULAR_COLOR
#ifndef GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#endif //GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
#ifndef GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#endif //GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#endif //GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#endif //GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#endif //GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#endif //GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#endif //GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#endif //GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
#ifndef GL_FRAMEBUFFER_DEFAULT
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#endif //GL_FRAMEBUFFER_DEFAULT
#ifndef GL_FRAMEBUFFER_UNDEFINED
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#endif //GL_FRAMEBUFFER_UNDEFINED
#ifndef GL_DEPTH_STENCIL_ATTACHMENT
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#endif //GL_DEPTH_STENCIL_ATTACHMENT
#ifndef GL_MAJOR_VERSION
#define GL_MAJOR_VERSION 0x821B
#endif //GL_MAJOR_VERSION
#ifndef GL_MINOR_VERSION
#define GL_MINOR_VERSION 0x821C
#endif //GL_MINOR_VERSION
#ifndef GL_NUM_EXTENSIONS
#define GL_NUM_EXTENSIONS 0x821D
#endif //GL_NUM_EXTENSIONS
#ifndef GL_CONTEXT_FLAGS
#define GL_CONTEXT_FLAGS 0x821E
#endif //GL_CONTEXT_FLAGS
#ifndef GL_COMPRESSED_RED
#define GL_COMPRESSED_RED 0x8225
#endif //GL_COMPRESSED_RED
#ifndef GL_COMPRESSED_RG
#define GL_COMPRESSED_RG 0x8226
#endif //GL_COMPRESSED_RG
#ifndef GL_RG
#define GL_RG 0x8227
#endif //GL_RG
#ifndef GL_RG_INTEGER
#define GL_RG_INTEGER 0x8228
#endif //GL_RG_INTEGER
#ifndef GL_R8
#define GL_R8 0x8229
#endif //GL_R8
#ifndef GL_R16
#define GL_R16 0x822A
#endif //GL_R16
#ifndef GL_RG8
#define GL_RG8 0x822B
#endif //GL_RG8
#ifndef GL_RG16
#define GL_RG16 0x822C
#endif //GL_RG16
#ifndef GL_R16F
#define GL_R16F 0x822D
#endif //GL_R16F
#ifndef GL_R32F
#define GL_R32F 0x822E
#endif //GL_R32F
#ifndef GL_RG16F
#define GL_RG16F 0x822F
#endif //GL_RG16F
#ifndef GL_RG32F
#define GL_RG32F 0x8230
#endif //GL_RG32F
#ifndef GL_R8I
#define GL_R8I 0x8231
#endif //GL_R8I
#ifndef GL_R8UI
#define GL_R8UI 0x8232
#endif //GL_R8UI
#ifndef GL_R16I
#define GL_R16I 0x8233
#endif //GL_R16I
#ifndef GL_R16UI
#define GL_R16UI 0x8234
#endif //GL_R16UI
#ifndef GL_R32I
#define GL_R32I 0x8235
#endif //GL_R32I
#ifndef GL_R32UI
#define GL_R32UI 0x8236
#endif //GL_R32UI
#ifndef GL_RG8I
#define GL_RG8I 0x8237
#endif //GL_RG8I
#ifndef GL_RG8UI
#define GL_RG8UI 0x8238
#endif //GL_RG8UI
#ifndef GL_RG16I
#define GL_RG16I 0x8239
#endif //GL_RG16I
#ifndef GL_RG16UI
#define GL_RG16UI 0x823A
#endif //GL_RG16UI
#ifndef GL_RG32I
#define GL_RG32I 0x823B
#endif //GL_RG32I
#ifndef GL_RG32UI
#define GL_RG32UI 0x823C
#endif //GL_RG32UI
#ifndef GL_UNSIGNED_BYTE_2_3_3_REV
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#endif //GL_UNSIGNED_BYTE_2_3_3_REV
#ifndef GL_UNSIGNED_SHORT_5_6_5
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#endif //GL_UNSIGNED_SHORT_5_6_5
#ifndef GL_UNSIGNED_SHORT_5_6_5_REV
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#endif //GL_UNSIGNED_SHORT_5_6_5_REV
#ifndef GL_UNSIGNED_SHORT_4_4_4_4_REV
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#endif //GL_UNSIGNED_SHORT_4_4_4_4_REV
#ifndef GL_UNSIGNED_SHORT_1_5_5_5_REV
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#endif //GL_UNSIGNED_SHORT_1_5_5_5_REV
#ifndef GL_UNSIGNED_INT_8_8_8_8_REV
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#endif //GL_UNSIGNED_INT_8_8_8_8_REV
#ifndef GL_UNSIGNED_INT_2_10_10_10_REV
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#endif //GL_UNSIGNED_INT_2_10_10_10_REV
#ifndef GL_MIRRORED_REPEAT
#define GL_MIRRORED_REPEAT 0x8370
#endif //GL_MIRRORED_REPEAT
#ifndef GL_FOG_COORDINATE_SOURCE
#define GL_FOG_COORDINATE_SOURCE 0x8450
#endif //GL_FOG_COORDINATE_SOURCE
#ifndef GL_FOG_COORD_SRC
#define GL_FOG_COORD_SRC 0x8450
#endif //GL_FOG_COORD_SRC
#ifndef GL_FOG_COORDINATE
#define GL_FOG_COORDINATE 0x8451
#endif //GL_FOG_COORDINATE
#ifndef GL_FOG_COORD
#define GL_FOG_COORD 0x8451
#endif //GL_FOG_COORD
#ifndef GL_FRAGMENT_DEPTH
#define GL_FRAGMENT_DEPTH 0x8452
#endif //GL_FRAGMENT_DEPTH
#ifndef GL_CURRENT_FOG_COORD
#define GL_CURRENT_FOG_COORD 0x8453
#endif //GL_CURRENT_FOG_COORD
#ifndef GL_CURRENT_FOG_COORDINATE
#define GL_CURRENT_FOG_COORDINATE 0x8453
#endif //GL_CURRENT_FOG_COORDINATE
#ifndef GL_FOG_COORDINATE_ARRAY_TYPE
#define GL_FOG_COORDINATE_ARRAY_TYPE 0x8454
#endif //GL_FOG_COORDINATE_ARRAY_TYPE
#ifndef GL_FOG_COORD_ARRAY_TYPE
#define GL_FOG_COORD_ARRAY_TYPE 0x8454
#endif //GL_FOG_COORD_ARRAY_TYPE
#ifndef GL_FOG_COORD_ARRAY_STRIDE
#define GL_FOG_COORD_ARRAY_STRIDE 0x8455
#endif //GL_FOG_COORD_ARRAY_STRIDE
#ifndef GL_FOG_COORDINATE_ARRAY_STRIDE
#define GL_FOG_COORDINATE_ARRAY_STRIDE 0x8455
#endif //GL_FOG_COORDINATE_ARRAY_STRIDE
#ifndef GL_FOG_COORDINATE_ARRAY_POINTER
#define GL_FOG_COORDINATE_ARRAY_POINTER 0x8456
#endif //GL_FOG_COORDINATE_ARRAY_POINTER
#ifndef GL_FOG_COORD_ARRAY_POINTER
#define GL_FOG_COORD_ARRAY_POINTER 0x8456
#endif //GL_FOG_COORD_ARRAY_POINTER
#ifndef GL_FOG_COORD_ARRAY
#define GL_FOG_COORD_ARRAY 0x8457
#endif //GL_FOG_COORD_ARRAY
#ifndef GL_FOG_COORDINATE_ARRAY
#define GL_FOG_COORDINATE_ARRAY 0x8457
#endif //GL_FOG_COORDINATE_ARRAY
#ifndef GL_COLOR_SUM
#define GL_COLOR_SUM 0x8458
#endif //GL_COLOR_SUM
#ifndef GL_CURRENT_SECONDARY_COLOR
#define GL_CURRENT_SECONDARY_COLOR 0x8459
#endif //GL_CURRENT_SECONDARY_COLOR
#ifndef GL_SECONDARY_COLOR_ARRAY_SIZE
#define GL_SECONDARY_COLOR_ARRAY_SIZE 0x845A
#endif //GL_SECONDARY_COLOR_ARRAY_SIZE
#ifndef GL_SECONDARY_COLOR_ARRAY_TYPE
#define GL_SECONDARY_COLOR_ARRAY_TYPE 0x845B
#endif //GL_SECONDARY_COLOR_ARRAY_TYPE
#ifndef GL_SECONDARY_COLOR_ARRAY_STRIDE
#define GL_SECONDARY_COLOR_ARRAY_STRIDE 0x845C
#endif //GL_SECONDARY_COLOR_ARRAY_STRIDE
#ifndef GL_SECONDARY_COLOR_ARRAY_POINTER
#define GL_SECONDARY_COLOR_ARRAY_POINTER 0x845D
#endif //GL_SECONDARY_COLOR_ARRAY_POINTER
#ifndef GL_SECONDARY_COLOR_ARRAY
#define GL_SECONDARY_COLOR_ARRAY 0x845E
#endif //GL_SECONDARY_COLOR_ARRAY
#ifndef GL_CURRENT_RASTER_SECONDARY_COLOR
#define GL_CURRENT_RASTER_SECONDARY_COLOR 0x845F
#endif //GL_CURRENT_RASTER_SECONDARY_COLOR
#ifndef GL_ALIASED_POINT_SIZE_RANGE
#define GL_ALIASED_POINT_SIZE_RANGE 0x846D
#endif //GL_ALIASED_POINT_SIZE_RANGE
#ifndef GL_ALIASED_LINE_WIDTH_RANGE
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#endif //GL_ALIASED_LINE_WIDTH_RANGE
#ifndef GL_TEXTURE0
#define GL_TEXTURE0 0x84C0
#endif //GL_TEXTURE0
#ifndef GL_TEXTURE1
#define GL_TEXTURE1 0x84C1
#endif //GL_TEXTURE1
#ifndef GL_TEXTURE2
#define GL_TEXTURE2 0x84C2
#endif //GL_TEXTURE2
#ifndef GL_TEXTURE3
#define GL_TEXTURE3 0x84C3
#endif //GL_TEXTURE3
#ifndef GL_TEXTURE4
#define GL_TEXTURE4 0x84C4
#endif //GL_TEXTURE4
#ifndef GL_TEXTURE5
#define GL_TEXTURE5 0x84C5
#endif //GL_TEXTURE5
#ifndef GL_TEXTURE6
#define GL_TEXTURE6 0x84C6
#endif //GL_TEXTURE6
#ifndef GL_TEXTURE7
#define GL_TEXTURE7 0x84C7
#endif //GL_TEXTURE7
#ifndef GL_TEXTURE8
#define GL_TEXTURE8 0x84C8
#endif //GL_TEXTURE8
#ifndef GL_TEXTURE9
#define GL_TEXTURE9 0x84C9
#endif //GL_TEXTURE9
#ifndef GL_TEXTURE10
#define GL_TEXTURE10 0x84CA
#endif //GL_TEXTURE10
#ifndef GL_TEXTURE11
#define GL_TEXTURE11 0x84CB
#endif //GL_TEXTURE11
#ifndef GL_TEXTURE12
#define GL_TEXTURE12 0x84CC
#endif //GL_TEXTURE12
#ifndef GL_TEXTURE13
#define GL_TEXTURE13 0x84CD
#endif //GL_TEXTURE13
#ifndef GL_TEXTURE14
#define GL_TEXTURE14 0x84CE
#endif //GL_TEXTURE14
#ifndef GL_TEXTURE15
#define GL_TEXTURE15 0x84CF
#endif //GL_TEXTURE15
#ifndef GL_TEXTURE16
#define GL_TEXTURE16 0x84D0
#endif //GL_TEXTURE16
#ifndef GL_TEXTURE17
#define GL_TEXTURE17 0x84D1
#endif //GL_TEXTURE17
#ifndef GL_TEXTURE18
#define GL_TEXTURE18 0x84D2
#endif //GL_TEXTURE18
#ifndef GL_TEXTURE19
#define GL_TEXTURE19 0x84D3
#endif //GL_TEXTURE19
#ifndef GL_TEXTURE20
#define GL_TEXTURE20 0x84D4
#endif //GL_TEXTURE20
#ifndef GL_TEXTURE21
#define GL_TEXTURE21 0x84D5
#endif //GL_TEXTURE21
#ifndef GL_TEXTURE22
#define GL_TEXTURE22 0x84D6
#endif //GL_TEXTURE22
#ifndef GL_TEXTURE23
#define GL_TEXTURE23 0x84D7
#endif //GL_TEXTURE23
#ifndef GL_TEXTURE24
#define GL_TEXTURE24 0x84D8
#endif //GL_TEXTURE24
#ifndef GL_TEXTURE25
#define GL_TEXTURE25 0x84D9
#endif //GL_TEXTURE25
#ifndef GL_TEXTURE26
#define GL_TEXTURE26 0x84DA
#endif //GL_TEXTURE26
#ifndef GL_TEXTURE27
#define GL_TEXTURE27 0x84DB
#endif //GL_TEXTURE27
#ifndef GL_TEXTURE28
#define GL_TEXTURE28 0x84DC
#endif //GL_TEXTURE28
#ifndef GL_TEXTURE29
#define GL_TEXTURE29 0x84DD
#endif //GL_TEXTURE29
#ifndef GL_TEXTURE30
#define GL_TEXTURE30 0x84DE
#endif //GL_TEXTURE30
#ifndef GL_TEXTURE31
#define GL_TEXTURE31 0x84DF
#endif //GL_TEXTURE31
#ifndef GL_ACTIVE_TEXTURE
#define GL_ACTIVE_TEXTURE 0x84E0
#endif //GL_ACTIVE_TEXTURE
#ifndef GL_CLIENT_ACTIVE_TEXTURE
#define GL_CLIENT_ACTIVE_TEXTURE 0x84E1
#endif //GL_CLIENT_ACTIVE_TEXTURE
#ifndef GL_MAX_TEXTURE_UNITS
#define GL_MAX_TEXTURE_UNITS 0x84E2
#endif //GL_MAX_TEXTURE_UNITS
#ifndef GL_TRANSPOSE_MODELVIEW_MATRIX
#define GL_TRANSPOSE_MODELVIEW_MATRIX 0x84E3
#endif //GL_TRANSPOSE_MODELVIEW_MATRIX
#ifndef GL_TRANSPOSE_PROJECTION_MATRIX
#define GL_TRANSPOSE_PROJECTION_MATRIX 0x84E4
#endif //GL_TRANSPOSE_PROJECTION_MATRIX
#ifndef GL_TRANSPOSE_TEXTURE_MATRIX
#define GL_TRANSPOSE_TEXTURE_MATRIX 0x84E5
#endif //GL_TRANSPOSE_TEXTURE_MATRIX
#ifndef GL_TRANSPOSE_COLOR_MATRIX
#define GL_TRANSPOSE_COLOR_MATRIX 0x84E6
#endif //GL_TRANSPOSE_COLOR_MATRIX
#ifndef GL_SUBTRACT
#define GL_SUBTRACT 0x84E7
#endif //GL_SUBTRACT
#ifndef GL_MAX_RENDERBUFFER_SIZE
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#endif //GL_MAX_RENDERBUFFER_SIZE
#ifndef GL_COMPRESSED_ALPHA
#define GL_COMPRESSED_ALPHA 0x84E9
#endif //GL_COMPRESSED_ALPHA
#ifndef GL_COMPRESSED_LUMINANCE
#define GL_COMPRESSED_LUMINANCE 0x84EA
#endif //GL_COMPRESSED_LUMINANCE
#ifndef GL_COMPRESSED_LUMINANCE_ALPHA
#define GL_COMPRESSED_LUMINANCE_ALPHA 0x84EB
#endif //GL_COMPRESSED_LUMINANCE_ALPHA
#ifndef GL_COMPRESSED_INTENSITY
#define GL_COMPRESSED_INTENSITY 0x84EC
#endif //GL_COMPRESSED_INTENSITY
#ifndef GL_COMPRESSED_RGB
#define GL_COMPRESSED_RGB 0x84ED
#endif //GL_COMPRESSED_RGB
#ifndef GL_COMPRESSED_RGBA
#define GL_COMPRESSED_RGBA 0x84EE
#endif //GL_COMPRESSED_RGBA
#ifndef GL_TEXTURE_COMPRESSION_HINT
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#endif //GL_TEXTURE_COMPRESSION_HINT
#ifndef GL_DEPTH_STENCIL
#define GL_DEPTH_STENCIL 0x84F9
#endif //GL_DEPTH_STENCIL
#ifndef GL_UNSIGNED_INT_24_8
#define GL_UNSIGNED_INT_24_8 0x84FA
#endif //GL_UNSIGNED_INT_24_8
#ifndef GL_MAX_TEXTURE_LOD_BIAS
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#endif //GL_MAX_TEXTURE_LOD_BIAS
#ifndef GL_TEXTURE_FILTER_CONTROL
#define GL_TEXTURE_FILTER_CONTROL 0x8500
#endif //GL_TEXTURE_FILTER_CONTROL
#ifndef GL_TEXTURE_LOD_BIAS
#define GL_TEXTURE_LOD_BIAS 0x8501
#endif //GL_TEXTURE_LOD_BIAS
#ifndef GL_INCR_WRAP
#define GL_INCR_WRAP 0x8507
#endif //GL_INCR_WRAP
#ifndef GL_DECR_WRAP
#define GL_DECR_WRAP 0x8508
#endif //GL_DECR_WRAP
#ifndef GL_NORMAL_MAP
#define GL_NORMAL_MAP 0x8511
#endif //GL_NORMAL_MAP
#ifndef GL_REFLECTION_MAP
#define GL_REFLECTION_MAP 0x8512
#endif //GL_REFLECTION_MAP
#ifndef GL_TEXTURE_CUBE_MAP
#define GL_TEXTURE_CUBE_MAP 0x8513
#endif //GL_TEXTURE_CUBE_MAP
#ifndef GL_TEXTURE_BINDING_CUBE_MAP
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#endif //GL_TEXTURE_BINDING_CUBE_MAP
#ifndef GL_TEXTURE_CUBE_MAP_POSITIVE_X
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#endif //GL_TEXTURE_CUBE_MAP_POSITIVE_X
#ifndef GL_TEXTURE_CUBE_MAP_NEGATIVE_X
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#endif //GL_TEXTURE_CUBE_MAP_NEGATIVE_X
#ifndef GL_TEXTURE_CUBE_MAP_POSITIVE_Y
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#endif //GL_TEXTURE_CUBE_MAP_POSITIVE_Y
#ifndef GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#endif //GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
#ifndef GL_TEXTURE_CUBE_MAP_POSITIVE_Z
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#endif //GL_TEXTURE_CUBE_MAP_POSITIVE_Z
#ifndef GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#endif //GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
#ifndef GL_PROXY_TEXTURE_CUBE_MAP
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#endif //GL_PROXY_TEXTURE_CUBE_MAP
#ifndef GL_MAX_CUBE_MAP_TEXTURE_SIZE
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#endif //GL_MAX_CUBE_MAP_TEXTURE_SIZE
#ifndef GL_COMBINE
#define GL_COMBINE 0x8570
#endif //GL_COMBINE
#ifndef GL_COMBINE_RGB
#define GL_COMBINE_RGB 0x8571
#endif //GL_COMBINE_RGB
#ifndef GL_COMBINE_ALPHA
#define GL_COMBINE_ALPHA 0x8572
#endif //GL_COMBINE_ALPHA
#ifndef GL_RGB_SCALE
#define GL_RGB_SCALE 0x8573
#endif //GL_RGB_SCALE
#ifndef GL_ADD_SIGNED
#define GL_ADD_SIGNED 0x8574
#endif //GL_ADD_SIGNED
#ifndef GL_INTERPOLATE
#define GL_INTERPOLATE 0x8575
#endif //GL_INTERPOLATE
#ifndef GL_CONSTANT
#define GL_CONSTANT 0x8576
#endif //GL_CONSTANT
#ifndef GL_PRIMARY_COLOR
#define GL_PRIMARY_COLOR 0x8577
#endif //GL_PRIMARY_COLOR
#ifndef GL_PREVIOUS
#define GL_PREVIOUS 0x8578
#endif //GL_PREVIOUS
#ifndef GL_SRC0_RGB
#define GL_SRC0_RGB 0x8580
#endif //GL_SRC0_RGB
#ifndef GL_SOURCE0_RGB
#define GL_SOURCE0_RGB 0x8580
#endif //GL_SOURCE0_RGB
#ifndef GL_SOURCE1_RGB
#define GL_SOURCE1_RGB 0x8581
#endif //GL_SOURCE1_RGB
#ifndef GL_SRC1_RGB
#define GL_SRC1_RGB 0x8581
#endif //GL_SRC1_RGB
#ifndef GL_SOURCE2_RGB
#define GL_SOURCE2_RGB 0x8582
#endif //GL_SOURCE2_RGB
#ifndef GL_SRC2_RGB
#define GL_SRC2_RGB 0x8582
#endif //GL_SRC2_RGB
#ifndef GL_SOURCE0_ALPHA
#define GL_SOURCE0_ALPHA 0x8588
#endif //GL_SOURCE0_ALPHA
#ifndef GL_SRC0_ALPHA
#define GL_SRC0_ALPHA 0x8588
#endif //GL_SRC0_ALPHA
#ifndef GL_SOURCE1_ALPHA
#define GL_SOURCE1_ALPHA 0x8589
#endif //GL_SOURCE1_ALPHA
#ifndef GL_SRC1_ALPHA
#define GL_SRC1_ALPHA 0x8589
#endif //GL_SRC1_ALPHA
#ifndef GL_SOURCE2_ALPHA
#define GL_SOURCE2_ALPHA 0x858A
#endif //GL_SOURCE2_ALPHA
#ifndef GL_SRC2_ALPHA
#define GL_SRC2_ALPHA 0x858A
#endif //GL_SRC2_ALPHA
#ifndef GL_OPERAND0_RGB
#define GL_OPERAND0_RGB 0x8590
#endif //GL_OPERAND0_RGB
#ifndef GL_OPERAND1_RGB
#define GL_OPERAND1_RGB 0x8591
#endif //GL_OPERAND1_RGB
#ifndef GL_OPERAND2_RGB
#define GL_OPERAND2_RGB 0x8592
#endif //GL_OPERAND2_RGB
#ifndef GL_OPERAND0_ALPHA
#define GL_OPERAND0_ALPHA 0x8598
#endif //GL_OPERAND0_ALPHA
#ifndef GL_OPERAND1_ALPHA
#define GL_OPERAND1_ALPHA 0x8599
#endif //GL_OPERAND1_ALPHA
#ifndef GL_OPERAND2_ALPHA
#define GL_OPERAND2_ALPHA 0x859A
#endif //GL_OPERAND2_ALPHA
#ifndef GL_VERTEX_ARRAY_BINDING
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#endif //GL_VERTEX_ARRAY_BINDING
#ifndef GL_VERTEX_ATTRIB_ARRAY_ENABLED
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#endif //GL_VERTEX_ATTRIB_ARRAY_ENABLED
#ifndef GL_VERTEX_ATTRIB_ARRAY_SIZE
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#endif //GL_VERTEX_ATTRIB_ARRAY_SIZE
#ifndef GL_VERTEX_ATTRIB_ARRAY_STRIDE
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#endif //GL_VERTEX_ATTRIB_ARRAY_STRIDE
#ifndef GL_VERTEX_ATTRIB_ARRAY_TYPE
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#endif //GL_VERTEX_ATTRIB_ARRAY_TYPE
#ifndef GL_CURRENT_VERTEX_ATTRIB
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#endif //GL_CURRENT_VERTEX_ATTRIB
#ifndef GL_VERTEX_PROGRAM_POINT_SIZE
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#endif //GL_VERTEX_PROGRAM_POINT_SIZE
#ifndef GL_VERTEX_PROGRAM_TWO_SIDE
#define GL_VERTEX_PROGRAM_TWO_SIDE 0x8643
#endif //GL_VERTEX_PROGRAM_TWO_SIDE
#ifndef GL_VERTEX_ATTRIB_ARRAY_POINTER
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#endif //GL_VERTEX_ATTRIB_ARRAY_POINTER
#ifndef GL_TEXTURE_COMPRESSED_IMAGE_SIZE
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#endif //GL_TEXTURE_COMPRESSED_IMAGE_SIZE
#ifndef GL_TEXTURE_COMPRESSED
#define GL_TEXTURE_COMPRESSED 0x86A1
#endif //GL_TEXTURE_COMPRESSED
#ifndef GL_NUM_COMPRESSED_TEXTURE_FORMATS
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#endif //GL_NUM_COMPRESSED_TEXTURE_FORMATS
#ifndef GL_COMPRESSED_TEXTURE_FORMATS
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#endif //GL_COMPRESSED_TEXTURE_FORMATS
#ifndef GL_DOT3_RGB
#define GL_DOT3_RGB 0x86AE
#endif //GL_DOT3_RGB
#ifndef GL_DOT3_RGBA
#define GL_DOT3_RGBA 0x86AF
#endif //GL_DOT3_RGBA
#ifndef GL_BUFFER_SIZE
#define GL_BUFFER_SIZE 0x8764
#endif //GL_BUFFER_SIZE
#ifndef GL_BUFFER_USAGE
#define GL_BUFFER_USAGE 0x8765
#endif //GL_BUFFER_USAGE
#ifndef GL_STENCIL_BACK_FUNC
#define GL_STENCIL_BACK_FUNC 0x8800
#endif //GL_STENCIL_BACK_FUNC
#ifndef GL_STENCIL_BACK_FAIL
#define GL_STENCIL_BACK_FAIL 0x8801
#endif //GL_STENCIL_BACK_FAIL
#ifndef GL_STENCIL_BACK_PASS_DEPTH_FAIL
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#endif //GL_STENCIL_BACK_PASS_DEPTH_FAIL
#ifndef GL_STENCIL_BACK_PASS_DEPTH_PASS
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#endif //GL_STENCIL_BACK_PASS_DEPTH_PASS
#ifndef GL_RGBA32F
#define GL_RGBA32F 0x8814
#endif //GL_RGBA32F
#ifndef GL_RGB32F
#define GL_RGB32F 0x8815
#endif //GL_RGB32F
#ifndef GL_RGBA16F
#define GL_RGBA16F 0x881A
#endif //GL_RGBA16F
#ifndef GL_RGB16F
#define GL_RGB16F 0x881B
#endif //GL_RGB16F
#ifndef GL_MAX_DRAW_BUFFERS
#define GL_MAX_DRAW_BUFFERS 0x8824
#endif //GL_MAX_DRAW_BUFFERS
#ifndef GL_DRAW_BUFFER0
#define GL_DRAW_BUFFER0 0x8825
#endif //GL_DRAW_BUFFER0
#ifndef GL_DRAW_BUFFER1
#define GL_DRAW_BUFFER1 0x8826
#endif //GL_DRAW_BUFFER1
#ifndef GL_DRAW_BUFFER2
#define GL_DRAW_BUFFER2 0x8827
#endif //GL_DRAW_BUFFER2
#ifndef GL_DRAW_BUFFER3
#define GL_DRAW_BUFFER3 0x8828
#endif //GL_DRAW_BUFFER3
#ifndef GL_DRAW_BUFFER4
#define GL_DRAW_BUFFER4 0x8829
#endif //GL_DRAW_BUFFER4
#ifndef GL_DRAW_BUFFER5
#define GL_DRAW_BUFFER5 0x882A
#endif //GL_DRAW_BUFFER5
#ifndef GL_DRAW_BUFFER6
#define GL_DRAW_BUFFER6 0x882B
#endif //GL_DRAW_BUFFER6
#ifndef GL_DRAW_BUFFER7
#define GL_DRAW_BUFFER7 0x882C
#endif //GL_DRAW_BUFFER7
#ifndef GL_DRAW_BUFFER8
#define GL_DRAW_BUFFER8 0x882D
#endif //GL_DRAW_BUFFER8
#ifndef GL_DRAW_BUFFER9
#define GL_DRAW_BUFFER9 0x882E
#endif //GL_DRAW_BUFFER9
#ifndef GL_DRAW_BUFFER10
#define GL_DRAW_BUFFER10 0x882F
#endif //GL_DRAW_BUFFER10
#ifndef GL_DRAW_BUFFER11
#define GL_DRAW_BUFFER11 0x8830
#endif //GL_DRAW_BUFFER11
#ifndef GL_DRAW_BUFFER12
#define GL_DRAW_BUFFER12 0x8831
#endif //GL_DRAW_BUFFER12
#ifndef GL_DRAW_BUFFER13
#define GL_DRAW_BUFFER13 0x8832
#endif //GL_DRAW_BUFFER13
#ifndef GL_DRAW_BUFFER14
#define GL_DRAW_BUFFER14 0x8833
#endif //GL_DRAW_BUFFER14
#ifndef GL_DRAW_BUFFER15
#define GL_DRAW_BUFFER15 0x8834
#endif //GL_DRAW_BUFFER15
#ifndef GL_BLEND_EQUATION_ALPHA
#define GL_BLEND_EQUATION_ALPHA 0x883D
#endif //GL_BLEND_EQUATION_ALPHA
#ifndef GL_TEXTURE_DEPTH_SIZE
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#endif //GL_TEXTURE_DEPTH_SIZE
#ifndef GL_DEPTH_TEXTURE_MODE
#define GL_DEPTH_TEXTURE_MODE 0x884B
#endif //GL_DEPTH_TEXTURE_MODE
#ifndef GL_TEXTURE_COMPARE_MODE
#define GL_TEXTURE_COMPARE_MODE 0x884C
#endif //GL_TEXTURE_COMPARE_MODE
#ifndef GL_TEXTURE_COMPARE_FUNC
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#endif //GL_TEXTURE_COMPARE_FUNC
#ifndef GL_COMPARE_REF_TO_TEXTURE
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#endif //GL_COMPARE_REF_TO_TEXTURE
#ifndef GL_COMPARE_R_TO_TEXTURE
#define GL_COMPARE_R_TO_TEXTURE 0x884E
#endif //GL_COMPARE_R_TO_TEXTURE
#ifndef GL_POINT_SPRITE
#define GL_POINT_SPRITE 0x8861
#endif //GL_POINT_SPRITE
#ifndef GL_COORD_REPLACE
#define GL_COORD_REPLACE 0x8862
#endif //GL_COORD_REPLACE
#ifndef GL_QUERY_COUNTER_BITS
#define GL_QUERY_COUNTER_BITS 0x8864
#endif //GL_QUERY_COUNTER_BITS
#ifndef GL_CURRENT_QUERY
#define GL_CURRENT_QUERY 0x8865
#endif //GL_CURRENT_QUERY
#ifndef GL_QUERY_RESULT
#define GL_QUERY_RESULT 0x8866
#endif //GL_QUERY_RESULT
#ifndef GL_QUERY_RESULT_AVAILABLE
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#endif //GL_QUERY_RESULT_AVAILABLE
#ifndef GL_MAX_VERTEX_ATTRIBS
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#endif //GL_MAX_VERTEX_ATTRIBS
#ifndef GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#endif //GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
#ifndef GL_MAX_TEXTURE_COORDS
#define GL_MAX_TEXTURE_COORDS 0x8871
#endif //GL_MAX_TEXTURE_COORDS
#ifndef GL_MAX_TEXTURE_IMAGE_UNITS
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#endif //GL_MAX_TEXTURE_IMAGE_UNITS
#ifndef GL_ARRAY_BUFFER
#define GL_ARRAY_BUFFER 0x8892
#endif //GL_ARRAY_BUFFER
#ifndef GL_ELEMENT_ARRAY_BUFFER
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#endif //GL_ELEMENT_ARRAY_BUFFER
#ifndef GL_ARRAY_BUFFER_BINDING
#define GL_ARRAY_BUFFER_BINDING 0x8894
#endif //GL_ARRAY_BUFFER_BINDING
#ifndef GL_ELEMENT_ARRAY_BUFFER_BINDING
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#endif //GL_ELEMENT_ARRAY_BUFFER_BINDING
#ifndef GL_VERTEX_ARRAY_BUFFER_BINDING
#define GL_VERTEX_ARRAY_BUFFER_BINDING 0x8896
#endif //GL_VERTEX_ARRAY_BUFFER_BINDING
#ifndef GL_NORMAL_ARRAY_BUFFER_BINDING
#define GL_NORMAL_ARRAY_BUFFER_BINDING 0x8897
#endif //GL_NORMAL_ARRAY_BUFFER_BINDING
#ifndef GL_COLOR_ARRAY_BUFFER_BINDING
#define GL_COLOR_ARRAY_BUFFER_BINDING 0x8898
#endif //GL_COLOR_ARRAY_BUFFER_BINDING
#ifndef GL_INDEX_ARRAY_BUFFER_BINDING
#define GL_INDEX_ARRAY_BUFFER_BINDING 0x8899
#endif //GL_INDEX_ARRAY_BUFFER_BINDING
#ifndef GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
#endif //GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
#ifndef GL_EDGE_FLAG_ARRAY_BUFFER_BINDING
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B
#endif //GL_EDGE_FLAG_ARRAY_BUFFER_BINDING
#ifndef GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C
#endif //GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING
#ifndef GL_FOG_COORD_ARRAY_BUFFER_BINDING
#define GL_FOG_COORD_ARRAY_BUFFER_BINDING 0x889D
#endif //GL_FOG_COORD_ARRAY_BUFFER_BINDING
#ifndef GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D
#endif //GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
#ifndef GL_WEIGHT_ARRAY_BUFFER_BINDING
#define GL_WEIGHT_ARRAY_BUFFER_BINDING 0x889E
#endif //GL_WEIGHT_ARRAY_BUFFER_BINDING
#ifndef GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#endif //GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
#ifndef GL_READ_ONLY
#define GL_READ_ONLY 0x88B8
#endif //GL_READ_ONLY
#ifndef GL_WRITE_ONLY
#define GL_WRITE_ONLY 0x88B9
#endif //GL_WRITE_ONLY
#ifndef GL_READ_WRITE
#define GL_READ_WRITE 0x88BA
#endif //GL_READ_WRITE
#ifndef GL_BUFFER_ACCESS
#define GL_BUFFER_ACCESS 0x88BB
#endif //GL_BUFFER_ACCESS
#ifndef GL_BUFFER_MAPPED
#define GL_BUFFER_MAPPED 0x88BC
#endif //GL_BUFFER_MAPPED
#ifndef GL_BUFFER_MAP_POINTER
#define GL_BUFFER_MAP_POINTER 0x88BD
#endif //GL_BUFFER_MAP_POINTER
#ifndef GL_STREAM_DRAW
#define GL_STREAM_DRAW 0x88E0
#endif //GL_STREAM_DRAW
#ifndef GL_STREAM_READ
#define GL_STREAM_READ 0x88E1
#endif //GL_STREAM_READ
#ifndef GL_STREAM_COPY
#define GL_STREAM_COPY 0x88E2
#endif //GL_STREAM_COPY
#ifndef GL_STATIC_DRAW
#define GL_STATIC_DRAW 0x88E4
#endif //GL_STATIC_DRAW
#ifndef GL_STATIC_READ
#define GL_STATIC_READ 0x88E5
#endif //GL_STATIC_READ
#ifndef GL_STATIC_COPY
#define GL_STATIC_COPY 0x88E6
#endif //GL_STATIC_COPY
#ifndef GL_DYNAMIC_DRAW
#define GL_DYNAMIC_DRAW 0x88E8
#endif //GL_DYNAMIC_DRAW
#ifndef GL_DYNAMIC_READ
#define GL_DYNAMIC_READ 0x88E9
#endif //GL_DYNAMIC_READ
#ifndef GL_DYNAMIC_COPY
#define GL_DYNAMIC_COPY 0x88EA
#endif //GL_DYNAMIC_COPY
#ifndef GL_PIXEL_PACK_BUFFER
#define GL_PIXEL_PACK_BUFFER 0x88EB
#endif //GL_PIXEL_PACK_BUFFER
#ifndef GL_PIXEL_UNPACK_BUFFER
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#endif //GL_PIXEL_UNPACK_BUFFER
#ifndef GL_PIXEL_PACK_BUFFER_BINDING
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#endif //GL_PIXEL_PACK_BUFFER_BINDING
#ifndef GL_PIXEL_UNPACK_BUFFER_BINDING
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#endif //GL_PIXEL_UNPACK_BUFFER_BINDING
#ifndef GL_DEPTH24_STENCIL8
#define GL_DEPTH24_STENCIL8 0x88F0
#endif //GL_DEPTH24_STENCIL8
#ifndef GL_TEXTURE_STENCIL_SIZE
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#endif //GL_TEXTURE_STENCIL_SIZE
#ifndef GL_VERTEX_ATTRIB_ARRAY_INTEGER
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#endif //GL_VERTEX_ATTRIB_ARRAY_INTEGER
#ifndef GL_MAX_ARRAY_TEXTURE_LAYERS
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#endif //GL_MAX_ARRAY_TEXTURE_LAYERS
#ifndef GL_MIN_PROGRAM_TEXEL_OFFSET
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#endif //GL_MIN_PROGRAM_TEXEL_OFFSET
#ifndef GL_MAX_PROGRAM_TEXEL_OFFSET
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#endif //GL_MAX_PROGRAM_TEXEL_OFFSET
#ifndef GL_SAMPLES_PASSED
#define GL_SAMPLES_PASSED 0x8914
#endif //GL_SAMPLES_PASSED
#ifndef GL_CLAMP_VERTEX_COLOR
#define GL_CLAMP_VERTEX_COLOR 0x891A
#endif //GL_CLAMP_VERTEX_COLOR
#ifndef GL_CLAMP_FRAGMENT_COLOR
#define GL_CLAMP_FRAGMENT_COLOR 0x891B
#endif //GL_CLAMP_FRAGMENT_COLOR
#ifndef GL_CLAMP_READ_COLOR
#define GL_CLAMP_READ_COLOR 0x891C
#endif //GL_CLAMP_READ_COLOR
#ifndef GL_FIXED_ONLY
#define GL_FIXED_ONLY 0x891D
#endif //GL_FIXED_ONLY
#ifndef GL_FRAGMENT_SHADER
#define GL_FRAGMENT_SHADER 0x8B30
#endif //GL_FRAGMENT_SHADER
#ifndef GL_VERTEX_SHADER
#define GL_VERTEX_SHADER 0x8B31
#endif //GL_VERTEX_SHADER
#ifndef GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#endif //GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
#ifndef GL_MAX_VERTEX_UNIFORM_COMPONENTS
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#endif //GL_MAX_VERTEX_UNIFORM_COMPONENTS
#ifndef GL_MAX_VARYING_COMPONENTS
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#endif //GL_MAX_VARYING_COMPONENTS
#ifndef GL_MAX_VARYING_FLOATS
#define GL_MAX_VARYING_FLOATS 0x8B4B
#endif //GL_MAX_VARYING_FLOATS
#ifndef GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#endif //GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
#ifndef GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#endif //GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
#ifndef GL_SHADER_TYPE
#define GL_SHADER_TYPE 0x8B4F
#endif //GL_SHADER_TYPE
#ifndef GL_FLOAT_VEC2
#define GL_FLOAT_VEC2 0x8B50
#endif //GL_FLOAT_VEC2
#ifndef GL_FLOAT_VEC3
#define GL_FLOAT_VEC3 0x8B51
#endif //GL_FLOAT_VEC3
#ifndef GL_FLOAT_VEC4
#define GL_FLOAT_VEC4 0x8B52
#endif //GL_FLOAT_VEC4
#ifndef GL_INT_VEC2
#define GL_INT_VEC2 0x8B53
#endif //GL_INT_VEC2
#ifndef GL_INT_VEC3
#define GL_INT_VEC3 0x8B54
#endif //GL_INT_VEC3
#ifndef GL_INT_VEC4
#define GL_INT_VEC4 0x8B55
#endif //GL_INT_VEC4
#ifndef GL_BOOL
#define GL_BOOL 0x8B56
#endif //GL_BOOL
#ifndef GL_BOOL_VEC2
#define GL_BOOL_VEC2 0x8B57
#endif //GL_BOOL_VEC2
#ifndef GL_BOOL_VEC3
#define GL_BOOL_VEC3 0x8B58
#endif //GL_BOOL_VEC3
#ifndef GL_BOOL_VEC4
#define GL_BOOL_VEC4 0x8B59
#endif //GL_BOOL_VEC4
#ifndef GL_FLOAT_MAT2
#define GL_FLOAT_MAT2 0x8B5A
#endif //GL_FLOAT_MAT2
#ifndef GL_FLOAT_MAT3
#define GL_FLOAT_MAT3 0x8B5B
#endif //GL_FLOAT_MAT3
#ifndef GL_FLOAT_MAT4
#define GL_FLOAT_MAT4 0x8B5C
#endif //GL_FLOAT_MAT4
#ifndef GL_SAMPLER_1D
#define GL_SAMPLER_1D 0x8B5D
#endif //GL_SAMPLER_1D
#ifndef GL_SAMPLER_2D
#define GL_SAMPLER_2D 0x8B5E
#endif //GL_SAMPLER_2D
#ifndef GL_SAMPLER_3D
#define GL_SAMPLER_3D 0x8B5F
#endif //GL_SAMPLER_3D
#ifndef GL_SAMPLER_CUBE
#define GL_SAMPLER_CUBE 0x8B60
#endif //GL_SAMPLER_CUBE
#ifndef GL_SAMPLER_1D_SHADOW
#define GL_SAMPLER_1D_SHADOW 0x8B61
#endif //GL_SAMPLER_1D_SHADOW
#ifndef GL_SAMPLER_2D_SHADOW
#define GL_SAMPLER_2D_SHADOW 0x8B62
#endif //GL_SAMPLER_2D_SHADOW
#ifndef GL_FLOAT_MAT2x3
#define GL_FLOAT_MAT2x3 0x8B65
#endif //GL_FLOAT_MAT2x3
#ifndef GL_FLOAT_MAT2x4
#define GL_FLOAT_MAT2x4 0x8B66
#endif //GL_FLOAT_MAT2x4
#ifndef GL_FLOAT_MAT3x2
#define GL_FLOAT_MAT3x2 0x8B67
#endif //GL_FLOAT_MAT3x2
#ifndef GL_FLOAT_MAT3x4
#define GL_FLOAT_MAT3x4 0x8B68
#endif //GL_FLOAT_MAT3x4
#ifndef GL_FLOAT_MAT4x2
#define GL_FLOAT_MAT4x2 0x8B69
#endif //GL_FLOAT_MAT4x2
#ifndef GL_FLOAT_MAT4x3
#define GL_FLOAT_MAT4x3 0x8B6A
#endif //GL_FLOAT_MAT4x3
#ifndef GL_DELETE_STATUS
#define GL_DELETE_STATUS 0x8B80
#endif //GL_DELETE_STATUS
#ifndef GL_COMPILE_STATUS
#define GL_COMPILE_STATUS 0x8B81
#endif //GL_COMPILE_STATUS
#ifndef GL_LINK_STATUS
#define GL_LINK_STATUS 0x8B82
#endif //GL_LINK_STATUS
#ifndef GL_VALIDATE_STATUS
#define GL_VALIDATE_STATUS 0x8B83
#endif //GL_VALIDATE_STATUS
#ifndef GL_INFO_LOG_LENGTH
#define GL_INFO_LOG_LENGTH 0x8B84
#endif //GL_INFO_LOG_LENGTH
#ifndef GL_ATTACHED_SHADERS
#define GL_ATTACHED_SHADERS 0x8B85
#endif //GL_ATTACHED_SHADERS
#ifndef GL_ACTIVE_UNIFORMS
#define GL_ACTIVE_UNIFORMS 0x8B86
#endif //GL_ACTIVE_UNIFORMS
#ifndef GL_ACTIVE_UNIFORM_MAX_LENGTH
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#endif //GL_ACTIVE_UNIFORM_MAX_LENGTH
#ifndef GL_SHADER_SOURCE_LENGTH
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#endif //GL_SHADER_SOURCE_LENGTH
#ifndef GL_ACTIVE_ATTRIBUTES
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#endif //GL_ACTIVE_ATTRIBUTES
#ifndef GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#endif //GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
#ifndef GL_FRAGMENT_SHADER_DERIVATIVE_HINT
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#endif //GL_FRAGMENT_SHADER_DERIVATIVE_HINT
#ifndef GL_SHADING_LANGUAGE_VERSION
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#endif //GL_SHADING_LANGUAGE_VERSION
#ifndef GL_CURRENT_PROGRAM
#define GL_CURRENT_PROGRAM 0x8B8D
#endif //GL_CURRENT_PROGRAM
#ifndef GL_TEXTURE_RED_TYPE
#define GL_TEXTURE_RED_TYPE 0x8C10
#endif //GL_TEXTURE_RED_TYPE
#ifndef GL_TEXTURE_GREEN_TYPE
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#endif //GL_TEXTURE_GREEN_TYPE
#ifndef GL_TEXTURE_BLUE_TYPE
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#endif //GL_TEXTURE_BLUE_TYPE
#ifndef GL_TEXTURE_ALPHA_TYPE
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#endif //GL_TEXTURE_ALPHA_TYPE
#ifndef GL_TEXTURE_DEPTH_TYPE
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#endif //GL_TEXTURE_DEPTH_TYPE
#ifndef GL_UNSIGNED_NORMALIZED
#define GL_UNSIGNED_NORMALIZED 0x8C17
#endif //GL_UNSIGNED_NORMALIZED
#ifndef GL_TEXTURE_1D_ARRAY
#define GL_TEXTURE_1D_ARRAY 0x8C18
#endif //GL_TEXTURE_1D_ARRAY
#ifndef GL_PROXY_TEXTURE_1D_ARRAY
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#endif //GL_PROXY_TEXTURE_1D_ARRAY
#ifndef GL_TEXTURE_2D_ARRAY
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#endif //GL_TEXTURE_2D_ARRAY
#ifndef GL_PROXY_TEXTURE_2D_ARRAY
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#endif //GL_PROXY_TEXTURE_2D_ARRAY
#ifndef GL_TEXTURE_BINDING_1D_ARRAY
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#endif //GL_TEXTURE_BINDING_1D_ARRAY
#ifndef GL_TEXTURE_BINDING_2D_ARRAY
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#endif //GL_TEXTURE_BINDING_2D_ARRAY
#ifndef GL_R11F_G11F_B10F
#define GL_R11F_G11F_B10F 0x8C3A
#endif //GL_R11F_G11F_B10F
#ifndef GL_UNSIGNED_INT_10F_11F_11F_REV
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#endif //GL_UNSIGNED_INT_10F_11F_11F_REV
#ifndef GL_RGB9_E5
#define GL_RGB9_E5 0x8C3D
#endif //GL_RGB9_E5
#ifndef GL_UNSIGNED_INT_5_9_9_9_REV
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#endif //GL_UNSIGNED_INT_5_9_9_9_REV
#ifndef GL_TEXTURE_SHARED_SIZE
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#endif //GL_TEXTURE_SHARED_SIZE
#ifndef GL_SRGB
#define GL_SRGB 0x8C40
#endif //GL_SRGB
#ifndef GL_SRGB8
#define GL_SRGB8 0x8C41
#endif //GL_SRGB8
#ifndef GL_SRGB_ALPHA
#define GL_SRGB_ALPHA 0x8C42
#endif //GL_SRGB_ALPHA
#ifndef GL_SRGB8_ALPHA8
#define GL_SRGB8_ALPHA8 0x8C43
#endif //GL_SRGB8_ALPHA8
#ifndef GL_SLUMINANCE_ALPHA
#define GL_SLUMINANCE_ALPHA 0x8C44
#endif //GL_SLUMINANCE_ALPHA
#ifndef GL_SLUMINANCE8_ALPHA8
#define GL_SLUMINANCE8_ALPHA8 0x8C45
#endif //GL_SLUMINANCE8_ALPHA8
#ifndef GL_SLUMINANCE
#define GL_SLUMINANCE 0x8C46
#endif //GL_SLUMINANCE
#ifndef GL_SLUMINANCE8
#define GL_SLUMINANCE8 0x8C47
#endif //GL_SLUMINANCE8
#ifndef GL_COMPRESSED_SRGB
#define GL_COMPRESSED_SRGB 0x8C48
#endif //GL_COMPRESSED_SRGB
#ifndef GL_COMPRESSED_SRGB_ALPHA
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
#endif //GL_COMPRESSED_SRGB_ALPHA
#ifndef GL_COMPRESSED_SLUMINANCE
#define GL_COMPRESSED_SLUMINANCE 0x8C4A
#endif //GL_COMPRESSED_SLUMINANCE
#ifndef GL_COMPRESSED_SLUMINANCE_ALPHA
#define GL_COMPRESSED_SLUMINANCE_ALPHA 0x8C4B
#endif //GL_COMPRESSED_SLUMINANCE_ALPHA
#ifndef GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#endif //GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_MODE
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_MODE
#ifndef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#endif //GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
#ifndef GL_TRANSFORM_FEEDBACK_VARYINGS
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#endif //GL_TRANSFORM_FEEDBACK_VARYINGS
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_START
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_START
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
#ifndef GL_PRIMITIVES_GENERATED
#define GL_PRIMITIVES_GENERATED 0x8C87
#endif //GL_PRIMITIVES_GENERATED
#ifndef GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#endif //GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
#ifndef GL_RASTERIZER_DISCARD
#define GL_RASTERIZER_DISCARD 0x8C89
#endif //GL_RASTERIZER_DISCARD
#ifndef GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#endif //GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
#ifndef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#endif //GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
#ifndef GL_INTERLEAVED_ATTRIBS
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#endif //GL_INTERLEAVED_ATTRIBS
#ifndef GL_SEPARATE_ATTRIBS
#define GL_SEPARATE_ATTRIBS 0x8C8D
#endif //GL_SEPARATE_ATTRIBS
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#endif //GL_TRANSFORM_FEEDBACK_BUFFER
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
#ifndef GL_POINT_SPRITE_COORD_ORIGIN
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#endif //GL_POINT_SPRITE_COORD_ORIGIN
#ifndef GL_LOWER_LEFT
#define GL_LOWER_LEFT 0x8CA1
#endif //GL_LOWER_LEFT
#ifndef GL_UPPER_LEFT
#define GL_UPPER_LEFT 0x8CA2
#endif //GL_UPPER_LEFT
#ifndef GL_STENCIL_BACK_REF
#define GL_STENCIL_BACK_REF 0x8CA3
#endif //GL_STENCIL_BACK_REF
#ifndef GL_STENCIL_BACK_VALUE_MASK
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#endif //GL_STENCIL_BACK_VALUE_MASK
#ifndef GL_STENCIL_BACK_WRITEMASK
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#endif //GL_STENCIL_BACK_WRITEMASK
#ifndef GL_DRAW_FRAMEBUFFER_BINDING
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#endif //GL_DRAW_FRAMEBUFFER_BINDING
#ifndef GL_FRAMEBUFFER_BINDING
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#endif //GL_FRAMEBUFFER_BINDING
#ifndef GL_RENDERBUFFER_BINDING
#define GL_RENDERBUFFER_BINDING 0x8CA7
#endif //GL_RENDERBUFFER_BINDING
#ifndef GL_READ_FRAMEBUFFER
#define GL_READ_FRAMEBUFFER 0x8CA8
#endif //GL_READ_FRAMEBUFFER
#ifndef GL_DRAW_FRAMEBUFFER
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#endif //GL_DRAW_FRAMEBUFFER
#ifndef GL_READ_FRAMEBUFFER_BINDING
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#endif //GL_READ_FRAMEBUFFER_BINDING
#ifndef GL_RENDERBUFFER_SAMPLES
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#endif //GL_RENDERBUFFER_SAMPLES
#ifndef GL_DEPTH_COMPONENT32F
#define GL_DEPTH_COMPONENT32F 0x8CAC
#endif //GL_DEPTH_COMPONENT32F
#ifndef GL_DEPTH32F_STENCIL8
#define GL_DEPTH32F_STENCIL8 0x8CAD
#endif //GL_DEPTH32F_STENCIL8
#ifndef GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#endif //GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#endif //GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
#ifndef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#endif //GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
#ifndef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#endif //GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#endif //GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
#ifndef GL_FRAMEBUFFER_COMPLETE
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#endif //GL_FRAMEBUFFER_COMPLETE
#ifndef GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#endif //GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
#ifndef GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#endif //GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
#ifndef GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#endif //GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
#ifndef GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#endif //GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
#ifndef GL_FRAMEBUFFER_UNSUPPORTED
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#endif //GL_FRAMEBUFFER_UNSUPPORTED
#ifndef GL_MAX_COLOR_ATTACHMENTS
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#endif //GL_MAX_COLOR_ATTACHMENTS
#ifndef GL_COLOR_ATTACHMENT0
#define GL_COLOR_ATTACHMENT0 0x8CE0
#endif //GL_COLOR_ATTACHMENT0
#ifndef GL_COLOR_ATTACHMENT1
#define GL_COLOR_ATTACHMENT1 0x8CE1
#endif //GL_COLOR_ATTACHMENT1
#ifndef GL_COLOR_ATTACHMENT2
#define GL_COLOR_ATTACHMENT2 0x8CE2
#endif //GL_COLOR_ATTACHMENT2
#ifndef GL_COLOR_ATTACHMENT3
#define GL_COLOR_ATTACHMENT3 0x8CE3
#endif //GL_COLOR_ATTACHMENT3
#ifndef GL_COLOR_ATTACHMENT4
#define GL_COLOR_ATTACHMENT4 0x8CE4
#endif //GL_COLOR_ATTACHMENT4
#ifndef GL_COLOR_ATTACHMENT5
#define GL_COLOR_ATTACHMENT5 0x8CE5
#endif //GL_COLOR_ATTACHMENT5
#ifndef GL_COLOR_ATTACHMENT6
#define GL_COLOR_ATTACHMENT6 0x8CE6
#endif //GL_COLOR_ATTACHMENT6
#ifndef GL_COLOR_ATTACHMENT7
#define GL_COLOR_ATTACHMENT7 0x8CE7
#endif //GL_COLOR_ATTACHMENT7
#ifndef GL_COLOR_ATTACHMENT8
#define GL_COLOR_ATTACHMENT8 0x8CE8
#endif //GL_COLOR_ATTACHMENT8
#ifndef GL_COLOR_ATTACHMENT9
#define GL_COLOR_ATTACHMENT9 0x8CE9
#endif //GL_COLOR_ATTACHMENT9
#ifndef GL_COLOR_ATTACHMENT10
#define GL_COLOR_ATTACHMENT10 0x8CEA
#endif //GL_COLOR_ATTACHMENT10
#ifndef GL_COLOR_ATTACHMENT11
#define GL_COLOR_ATTACHMENT11 0x8CEB
#endif //GL_COLOR_ATTACHMENT11
#ifndef GL_COLOR_ATTACHMENT12
#define GL_COLOR_ATTACHMENT12 0x8CEC
#endif //GL_COLOR_ATTACHMENT12
#ifndef GL_COLOR_ATTACHMENT13
#define GL_COLOR_ATTACHMENT13 0x8CED
#endif //GL_COLOR_ATTACHMENT13
#ifndef GL_COLOR_ATTACHMENT14
#define GL_COLOR_ATTACHMENT14 0x8CEE
#endif //GL_COLOR_ATTACHMENT14
#ifndef GL_COLOR_ATTACHMENT15
#define GL_COLOR_ATTACHMENT15 0x8CEF
#endif //GL_COLOR_ATTACHMENT15
#ifndef GL_DEPTH_ATTACHMENT
#define GL_DEPTH_ATTACHMENT 0x8D00
#endif //GL_DEPTH_ATTACHMENT
#ifndef GL_STENCIL_ATTACHMENT
#define GL_STENCIL_ATTACHMENT 0x8D20
#endif //GL_STENCIL_ATTACHMENT
#ifndef GL_FRAMEBUFFER
#define GL_FRAMEBUFFER 0x8D40
#endif //GL_FRAMEBUFFER
#ifndef GL_RENDERBUFFER
#define GL_RENDERBUFFER 0x8D41
#endif //GL_RENDERBUFFER
#ifndef GL_RENDERBUFFER_WIDTH
#define GL_RENDERBUFFER_WIDTH 0x8D42
#endif //GL_RENDERBUFFER_WIDTH
#ifndef GL_RENDERBUFFER_HEIGHT
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#endif //GL_RENDERBUFFER_HEIGHT
#ifndef GL_RENDERBUFFER_INTERNAL_FORMAT
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#endif //GL_RENDERBUFFER_INTERNAL_FORMAT
#ifndef GL_STENCIL_INDEX1
#define GL_STENCIL_INDEX1 0x8D46
#endif //GL_STENCIL_INDEX1
#ifndef GL_STENCIL_INDEX4
#define GL_STENCIL_INDEX4 0x8D47
#endif //GL_STENCIL_INDEX4
#ifndef GL_STENCIL_INDEX8
#define GL_STENCIL_INDEX8 0x8D48
#endif //GL_STENCIL_INDEX8
#ifndef GL_STENCIL_INDEX16
#define GL_STENCIL_INDEX16 0x8D49
#endif //GL_STENCIL_INDEX16
#ifndef GL_RENDERBUFFER_RED_SIZE
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#endif //GL_RENDERBUFFER_RED_SIZE
#ifndef GL_RENDERBUFFER_GREEN_SIZE
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#endif //GL_RENDERBUFFER_GREEN_SIZE
#ifndef GL_RENDERBUFFER_BLUE_SIZE
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#endif //GL_RENDERBUFFER_BLUE_SIZE
#ifndef GL_RENDERBUFFER_ALPHA_SIZE
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#endif //GL_RENDERBUFFER_ALPHA_SIZE
#ifndef GL_RENDERBUFFER_DEPTH_SIZE
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#endif //GL_RENDERBUFFER_DEPTH_SIZE
#ifndef GL_RENDERBUFFER_STENCIL_SIZE
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#endif //GL_RENDERBUFFER_STENCIL_SIZE
#ifndef GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#endif //GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
#ifndef GL_MAX_SAMPLES
#define GL_MAX_SAMPLES 0x8D57
#endif //GL_MAX_SAMPLES
#ifndef GL_RGBA32UI
#define GL_RGBA32UI 0x8D70
#endif //GL_RGBA32UI
#ifndef GL_RGB32UI
#define GL_RGB32UI 0x8D71
#endif //GL_RGB32UI
#ifndef GL_RGBA16UI
#define GL_RGBA16UI 0x8D76
#endif //GL_RGBA16UI
#ifndef GL_RGB16UI
#define GL_RGB16UI 0x8D77
#endif //GL_RGB16UI
#ifndef GL_RGBA8UI
#define GL_RGBA8UI 0x8D7C
#endif //GL_RGBA8UI
#ifndef GL_RGB8UI
#define GL_RGB8UI 0x8D7D
#endif //GL_RGB8UI
#ifndef GL_RGBA32I
#define GL_RGBA32I 0x8D82
#endif //GL_RGBA32I
#ifndef GL_RGB32I
#define GL_RGB32I 0x8D83
#endif //GL_RGB32I
#ifndef GL_RGBA16I
#define GL_RGBA16I 0x8D88
#endif //GL_RGBA16I
#ifndef GL_RGB16I
#define GL_RGB16I 0x8D89
#endif //GL_RGB16I
#ifndef GL_RGBA8I
#define GL_RGBA8I 0x8D8E
#endif //GL_RGBA8I
#ifndef GL_RGB8I
#define GL_RGB8I 0x8D8F
#endif //GL_RGB8I
#ifndef GL_RED_INTEGER
#define GL_RED_INTEGER 0x8D94
#endif //GL_RED_INTEGER
#ifndef GL_GREEN_INTEGER
#define GL_GREEN_INTEGER 0x8D95
#endif //GL_GREEN_INTEGER
#ifndef GL_BLUE_INTEGER
#define GL_BLUE_INTEGER 0x8D96
#endif //GL_BLUE_INTEGER
#ifndef GL_ALPHA_INTEGER
#define GL_ALPHA_INTEGER 0x8D97
#endif //GL_ALPHA_INTEGER
#ifndef GL_RGB_INTEGER
#define GL_RGB_INTEGER 0x8D98
#endif //GL_RGB_INTEGER
#ifndef GL_RGBA_INTEGER
#define GL_RGBA_INTEGER 0x8D99
#endif //GL_RGBA_INTEGER
#ifndef GL_BGR_INTEGER
#define GL_BGR_INTEGER 0x8D9A
#endif //GL_BGR_INTEGER
#ifndef GL_BGRA_INTEGER
#define GL_BGRA_INTEGER 0x8D9B
#endif //GL_BGRA_INTEGER
#ifndef GL_FLOAT_32_UNSIGNED_INT_24_8_REV
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#endif //GL_FLOAT_32_UNSIGNED_INT_24_8_REV
#ifndef GL_FRAMEBUFFER_SRGB
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#endif //GL_FRAMEBUFFER_SRGB
#ifndef GL_COMPRESSED_RED_RGTC1
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#endif //GL_COMPRESSED_RED_RGTC1
#ifndef GL_COMPRESSED_SIGNED_RED_RGTC1
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#endif //GL_COMPRESSED_SIGNED_RED_RGTC1
#ifndef GL_COMPRESSED_RG_RGTC2
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#endif //GL_COMPRESSED_RG_RGTC2
#ifndef GL_COMPRESSED_SIGNED_RG_RGTC2
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#endif //GL_COMPRESSED_SIGNED_RG_RGTC2
#ifndef GL_SAMPLER_1D_ARRAY
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#endif //GL_SAMPLER_1D_ARRAY
#ifndef GL_SAMPLER_2D_ARRAY
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#endif //GL_SAMPLER_2D_ARRAY
#ifndef GL_SAMPLER_1D_ARRAY_SHADOW
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#endif //GL_SAMPLER_1D_ARRAY_SHADOW
#ifndef GL_SAMPLER_2D_ARRAY_SHADOW
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#endif //GL_SAMPLER_2D_ARRAY_SHADOW
#ifndef GL_SAMPLER_CUBE_SHADOW
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#endif //GL_SAMPLER_CUBE_SHADOW
#ifndef GL_UNSIGNED_INT_VEC2
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#endif //GL_UNSIGNED_INT_VEC2
#ifndef GL_UNSIGNED_INT_VEC3
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#endif //GL_UNSIGNED_INT_VEC3
#ifndef GL_UNSIGNED_INT_VEC4
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#endif //GL_UNSIGNED_INT_VEC4
#ifndef GL_INT_SAMPLER_1D
#define GL_INT_SAMPLER_1D 0x8DC9
#endif //GL_INT_SAMPLER_1D
#ifndef GL_INT_SAMPLER_2D
#define GL_INT_SAMPLER_2D 0x8DCA
#endif //GL_INT_SAMPLER_2D
#ifndef GL_INT_SAMPLER_3D
#define GL_INT_SAMPLER_3D 0x8DCB
#endif //GL_INT_SAMPLER_3D
#ifndef GL_INT_SAMPLER_CUBE
#define GL_INT_SAMPLER_CUBE 0x8DCC
#endif //GL_INT_SAMPLER_CUBE
#ifndef GL_INT_SAMPLER_1D_ARRAY
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#endif //GL_INT_SAMPLER_1D_ARRAY
#ifndef GL_INT_SAMPLER_2D_ARRAY
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#endif //GL_INT_SAMPLER_2D_ARRAY
#ifndef GL_UNSIGNED_INT_SAMPLER_1D
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#endif //GL_UNSIGNED_INT_SAMPLER_1D
#ifndef GL_UNSIGNED_INT_SAMPLER_2D
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#endif //GL_UNSIGNED_INT_SAMPLER_2D
#ifndef GL_UNSIGNED_INT_SAMPLER_3D
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#endif //GL_UNSIGNED_INT_SAMPLER_3D
#ifndef GL_UNSIGNED_INT_SAMPLER_CUBE
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#endif //GL_UNSIGNED_INT_SAMPLER_CUBE
#ifndef GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#endif //GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
#ifndef GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#endif //GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
#ifndef GL_QUERY_WAIT
#define GL_QUERY_WAIT 0x8E13
#endif //GL_QUERY_WAIT
#ifndef GL_QUERY_NO_WAIT
#define GL_QUERY_NO_WAIT 0x8E14
#endif //GL_QUERY_NO_WAIT
#ifndef GL_QUERY_BY_REGION_WAIT
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#endif //GL_QUERY_BY_REGION_WAIT
#ifndef GL_QUERY_BY_REGION_NO_WAIT
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#endif //GL_QUERY_BY_REGION_NO_WAIT
#ifndef GL_BUFFER_ACCESS_FLAGS
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#endif //GL_BUFFER_ACCESS_FLAGS
#ifndef GL_BUFFER_MAP_LENGTH
#define GL_BUFFER_MAP_LENGTH 0x9120
#endif //GL_BUFFER_MAP_LENGTH
#ifndef GL_BUFFER_MAP_OFFSET
#define GL_BUFFER_MAP_OFFSET 0x9121
#endif //GL_BUFFER_MAP_OFFSET
#ifndef GL_ALL_ATTRIB_BITS
#define GL_ALL_ATTRIB_BITS 0xFFFFFFFF
#endif //GL_ALL_ATTRIB_BITS
#ifndef GL_CLIENT_ALL_ATTRIB_BITS
#define GL_CLIENT_ALL_ATTRIB_BITS 0xFFFFFFFF
#endif //GL_CLIENT_ALL_ATTRIB_BITS
#ifndef GL_ONE
#define GL_ONE 1
#endif //GL_ONE
#ifndef GL_TRUE
#define GL_TRUE 1
#endif //GL_TRUE
CGUARDBEGIN

#ifndef GL_VERSION_1_0
extern void glAccum(GLenum,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glAlphaFunc(GLenum,GLfloat);
#endif

#ifndef GL_VERSION_1_1
extern GLboolean glAreTexturesResident(GLsizei,const GLuint *,GLboolean *);
#endif

#ifndef GL_VERSION_1_1
extern void glArrayElement(GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glBegin(GLenum);
#endif

#ifndef GL_VERSION_1_1
extern void glBindTexture(GLenum,GLuint);
#endif

#ifndef GL_VERSION_1_0
extern void glBitmap(GLsizei,GLsizei,GLfloat,GLfloat,GLfloat,GLfloat,const GLubyte *);
#endif

#ifndef GL_VERSION_1_0
extern void glBlendFunc(GLenum,GLenum);
#endif

#ifndef GL_VERSION_1_0
extern void glCallList(GLuint);
#endif

#ifndef GL_VERSION_1_0
extern void glCallLists(GLsizei,GLenum,const void *);
#endif

#ifndef GL_VERSION_1_0
extern void glClear(GLbitfield);
#endif

#ifndef GL_VERSION_1_0
extern void glClearAccum(GLfloat,GLfloat,GLfloat,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glClearColor(GLfloat,GLfloat,GLfloat,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glClearDepth(GLdouble);
#endif

#ifndef GL_VERSION_1_0
extern void glClearIndex(GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glClearStencil(GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glClipPlane(GLenum,const GLdouble *);
#endif

#ifndef GL_VERSION_1_0
extern void glColor3b(GLbyte,GLbyte,GLbyte);
#endif

#ifndef GL_VERSION_1_0
extern void glColor3bv(const GLbyte *);
#endif

#ifndef GL_VERSION_1_0
extern void glColor3d(GLdouble,GLdouble,GLdouble);
#endif

#ifndef GL_VERSION_1_0
extern void glColor3dv(const GLdouble *);
#endif

#ifndef GL_VERSION_1_0
extern void glColor3f(GLfloat,GLfloat,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glColor3fv(const GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glColor3i(GLint,GLint,GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glColor3iv(const GLint *);
#endif

#ifndef GL_VERSION_1_0
extern void glColor3s(GLshort,GLshort,GLshort);
#endif

#ifndef GL_VERSION_1_0
extern void glColor3sv(const GLshort *);
#endif

#ifndef GL_VERSION_1_0
extern void glColor3ub(GLubyte,GLubyte,GLubyte);
#endif

#ifndef GL_VERSION_1_0
extern void glColor3ubv(const GLubyte *);
#endif

#ifndef GL_VERSION_1_0
extern void glColor3ui(GLuint,GLuint,GLuint);
#endif

#ifndef GL_VERSION_1_0
extern void glColor3uiv(const GLuint *);
#endif

#ifndef GL_VERSION_1_0
extern void glColor3us(GLushort,GLushort,GLushort);
#endif

#ifndef GL_VERSION_1_0
extern void glColor3usv(const GLushort *);
#endif

#ifndef GL_VERSION_1_0
extern void glColor4b(GLbyte,GLbyte,GLbyte,GLbyte);
#endif

#ifndef GL_VERSION_1_0
extern void glColor4bv(const GLbyte *);
#endif

#ifndef GL_VERSION_1_0
extern void glColor4d(GLdouble,GLdouble,GLdouble,GLdouble);
#endif

#ifndef GL_VERSION_1_0
extern void glColor4dv(const GLdouble *);
#endif

#ifndef GL_VERSION_1_0
extern void glColor4f(GLfloat,GLfloat,GLfloat,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glColor4fv(const GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glColor4i(GLint,GLint,GLint,GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glColor4iv(const GLint *);
#endif

#ifndef GL_VERSION_1_0
extern void glColor4s(GLshort,GLshort,GLshort,GLshort);
#endif

#ifndef GL_VERSION_1_0
extern void glColor4sv(const GLshort *);
#endif

#ifndef GL_VERSION_1_0
extern void glColor4ub(GLubyte,GLubyte,GLubyte,GLubyte);
#endif

#ifndef GL_VERSION_1_0
extern void glColor4ubv(const GLubyte *);
#endif

#ifndef GL_VERSION_1_0
extern void glColor4ui(GLuint,GLuint,GLuint,GLuint);
#endif

#ifndef GL_VERSION_1_0
extern void glColor4uiv(const GLuint *);
#endif

#ifndef GL_VERSION_1_0
extern void glColor4us(GLushort,GLushort,GLushort,GLushort);
#endif

#ifndef GL_VERSION_1_0
extern void glColor4usv(const GLushort *);
#endif

#ifndef GL_VERSION_1_0
extern void glColorMask(GLboolean,GLboolean,GLboolean,GLboolean);
#endif

#ifndef GL_VERSION_1_0
extern void glColorMaterial(GLenum,GLenum);
#endif

#ifndef GL_VERSION_1_1
extern void glColorPointer(GLint,GLenum,GLsizei,const void *);
#endif

#ifndef GL_VERSION_1_0
extern void glCopyPixels(GLint,GLint,GLsizei,GLsizei,GLenum);
#endif

#ifndef GL_VERSION_1_1
extern void glCopyTexImage1D(GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLint);
#endif

#ifndef GL_VERSION_1_1
extern void glCopyTexImage2D(GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLsizei,GLint);
#endif

#ifndef GL_VERSION_1_1
extern void glCopyTexSubImage1D(GLenum,GLint,GLint,GLint,GLint,GLsizei);
#endif

#ifndef GL_VERSION_1_1
extern void glCopyTexSubImage2D(GLenum,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
#endif

#ifndef GL_VERSION_1_0
extern void glCullFace(GLenum);
#endif

#ifndef GL_VERSION_1_0
extern void glDeleteLists(GLuint,GLsizei);
#endif

#ifndef GL_VERSION_1_1
extern void glDeleteTextures(GLsizei,const GLuint *);
#endif

#ifndef GL_VERSION_1_0
extern void glDepthFunc(GLenum);
#endif

#ifndef GL_VERSION_1_0
extern void glDepthMask(GLboolean);
#endif

#ifndef GL_VERSION_1_0
extern void glDepthRange(GLdouble,GLdouble);
#endif

#ifndef GL_VERSION_1_0
extern void glDisable(GLenum);
#endif

#ifndef GL_VERSION_1_1
extern void glDisableClientState(GLenum);
#endif

#ifndef GL_VERSION_1_1
extern void glDrawArrays(GLenum,GLint,GLsizei);
#endif

#ifndef GL_VERSION_1_0
extern void glDrawBuffer(GLenum);
#endif

#ifndef GL_VERSION_1_1
extern void glDrawElements(GLenum,GLsizei,GLenum,const void *);
#endif

#ifndef GL_VERSION_1_0
extern void glDrawPixels(GLsizei,GLsizei,GLenum,GLenum,const void *);
#endif

#ifndef GL_VERSION_1_0
extern void glEdgeFlag(GLboolean);
#endif

#ifndef GL_VERSION_1_1
extern void glEdgeFlagPointer(GLsizei,const void *);
#endif

#ifndef GL_VERSION_1_0
extern void glEdgeFlagv(const GLboolean *);
#endif

#ifndef GL_VERSION_1_0
extern void glEnable(GLenum);
#endif

#ifndef GL_VERSION_1_1
extern void glEnableClientState(GLenum);
#endif

#ifndef GL_VERSION_1_0
extern void glEnd();
#endif

#ifndef GL_VERSION_1_0
extern void glEndList();
#endif

#ifndef GL_VERSION_1_0
extern void glEvalCoord1d(GLdouble);
#endif

#ifndef GL_VERSION_1_0
extern void glEvalCoord1dv(const GLdouble *);
#endif

#ifndef GL_VERSION_1_0
extern void glEvalCoord1f(GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glEvalCoord1fv(const GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glEvalCoord2d(GLdouble,GLdouble);
#endif

#ifndef GL_VERSION_1_0
extern void glEvalCoord2dv(const GLdouble *);
#endif

#ifndef GL_VERSION_1_0
extern void glEvalCoord2f(GLfloat,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glEvalCoord2fv(const GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glEvalMesh1(GLenum,GLint,GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glEvalMesh2(GLenum,GLint,GLint,GLint,GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glEvalPoint1(GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glEvalPoint2(GLint,GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glFeedbackBuffer(GLsizei,GLenum,GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glFinish();
#endif

#ifndef GL_VERSION_1_0
extern void glFlush();
#endif

#ifndef GL_VERSION_1_0
extern void glFogf(GLenum,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glFogfv(GLenum,const GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glFogi(GLenum,GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glFogiv(GLenum,const GLint *);
#endif

#ifndef GL_VERSION_1_0
extern void glFrontFace(GLenum);
#endif

#ifndef GL_VERSION_1_0
extern void glFrustum(GLdouble,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble);
#endif

#ifndef GL_VERSION_1_0
extern GLuint glGenLists(GLsizei);
#endif

#ifndef GL_VERSION_1_1
extern void glGenTextures(GLsizei,GLuint *);
#endif

#ifndef GL_VERSION_1_0
extern void glGetBooleanv(GLenum,GLboolean *);
#endif

#ifndef GL_VERSION_1_0
extern void glGetClipPlane(GLenum,GLdouble *);
#endif

#ifndef GL_VERSION_1_0
extern void glGetDoublev(GLenum,GLdouble *);
#endif

#ifndef GL_VERSION_1_0
extern GLenum glGetError();
#endif

#ifndef GL_VERSION_1_0
extern void glGetFloatv(GLenum,GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glGetIntegerv(GLenum,GLint *);
#endif

#ifndef GL_VERSION_1_0
extern void glGetLightfv(GLenum,GLenum,GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glGetLightiv(GLenum,GLenum,GLint *);
#endif

#ifndef GL_VERSION_1_0
extern void glGetMapdv(GLenum,GLenum,GLdouble *);
#endif

#ifndef GL_VERSION_1_0
extern void glGetMapfv(GLenum,GLenum,GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glGetMapiv(GLenum,GLenum,GLint *);
#endif

#ifndef GL_VERSION_1_0
extern void glGetMaterialfv(GLenum,GLenum,GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glGetMaterialiv(GLenum,GLenum,GLint *);
#endif

#ifndef GL_VERSION_1_0
extern void glGetPixelMapfv(GLenum,GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glGetPixelMapuiv(GLenum,GLuint *);
#endif

#ifndef GL_VERSION_1_0
extern void glGetPixelMapusv(GLenum,GLushort *);
#endif

#ifndef GL_VERSION_1_1
extern void glGetPointerv(GLenum,void **);
#endif

#ifndef GL_VERSION_1_0
extern void glGetPolygonStipple(GLubyte *);
#endif

#ifndef GL_VERSION_1_0
extern const GLubyte * glGetString(GLenum);
#endif

#ifndef GL_VERSION_1_0
extern void glGetTexEnvfv(GLenum,GLenum,GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glGetTexEnviv(GLenum,GLenum,GLint *);
#endif

#ifndef GL_VERSION_1_0
extern void glGetTexGendv(GLenum,GLenum,GLdouble *);
#endif

#ifndef GL_VERSION_1_0
extern void glGetTexGenfv(GLenum,GLenum,GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glGetTexGeniv(GLenum,GLenum,GLint *);
#endif

#ifndef GL_VERSION_1_0
extern void glGetTexImage(GLenum,GLint,GLenum,GLenum,void *);
#endif

#ifndef GL_VERSION_1_0
extern void glGetTexLevelParameterfv(GLenum,GLint,GLenum,GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glGetTexLevelParameteriv(GLenum,GLint,GLenum,GLint *);
#endif

#ifndef GL_VERSION_1_0
extern void glGetTexParameterfv(GLenum,GLenum,GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glGetTexParameteriv(GLenum,GLenum,GLint *);
#endif

#ifndef GL_VERSION_1_0
extern void glHint(GLenum,GLenum);
#endif

#ifndef GL_VERSION_1_0
extern void glIndexMask(GLuint);
#endif

#ifndef GL_VERSION_1_1
extern void glIndexPointer(GLenum,GLsizei,const void *);
#endif

#ifndef GL_VERSION_1_0
extern void glIndexd(GLdouble);
#endif

#ifndef GL_VERSION_1_0
extern void glIndexdv(const GLdouble *);
#endif

#ifndef GL_VERSION_1_0
extern void glIndexf(GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glIndexfv(const GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glIndexi(GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glIndexiv(const GLint *);
#endif

#ifndef GL_VERSION_1_0
extern void glIndexs(GLshort);
#endif

#ifndef GL_VERSION_1_0
extern void glIndexsv(const GLshort *);
#endif

#ifndef GL_VERSION_1_1
extern void glIndexub(GLubyte);
#endif

#ifndef GL_VERSION_1_1
extern void glIndexubv(const GLubyte *);
#endif

#ifndef GL_VERSION_1_0
extern void glInitNames();
#endif

#ifndef GL_VERSION_1_1
extern void glInterleavedArrays(GLenum,GLsizei,const void *);
#endif

#ifndef GL_VERSION_1_0
extern GLboolean glIsEnabled(GLenum);
#endif

#ifndef GL_VERSION_1_0
extern GLboolean glIsList(GLuint);
#endif

#ifndef GL_VERSION_1_1
extern GLboolean glIsTexture(GLuint);
#endif

#ifndef GL_VERSION_1_0
extern void glLightModelf(GLenum,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glLightModelfv(GLenum,const GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glLightModeli(GLenum,GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glLightModeliv(GLenum,const GLint *);
#endif

#ifndef GL_VERSION_1_0
extern void glLightf(GLenum,GLenum,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glLightfv(GLenum,GLenum,const GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glLighti(GLenum,GLenum,GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glLightiv(GLenum,GLenum,const GLint *);
#endif

#ifndef GL_VERSION_1_0
extern void glLineStipple(GLint,GLushort);
#endif

#ifndef GL_VERSION_1_0
extern void glLineWidth(GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glListBase(GLuint);
#endif

#ifndef GL_VERSION_1_0
extern void glLoadIdentity();
#endif

#ifndef GL_VERSION_1_0
extern void glLoadMatrixd(const GLdouble *);
#endif

#ifndef GL_VERSION_1_0
extern void glLoadMatrixf(const GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glLoadName(GLuint);
#endif

#ifndef GL_VERSION_1_0
extern void glLogicOp(GLenum);
#endif

#ifndef GL_VERSION_1_0
extern void glMap1d(GLenum,GLdouble,GLdouble,GLint,GLint,const GLdouble *);
#endif

#ifndef GL_VERSION_1_0
extern void glMap1f(GLenum,GLfloat,GLfloat,GLint,GLint,const GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glMap2d(GLenum,GLdouble,GLdouble,GLint,GLint,GLdouble,GLdouble,GLint,GLint,const GLdouble *);
#endif

#ifndef GL_VERSION_1_0
extern void glMap2f(GLenum,GLfloat,GLfloat,GLint,GLint,GLfloat,GLfloat,GLint,GLint,const GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glMapGrid1d(GLint,GLdouble,GLdouble);
#endif

#ifndef GL_VERSION_1_0
extern void glMapGrid1f(GLint,GLfloat,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glMapGrid2d(GLint,GLdouble,GLdouble,GLint,GLdouble,GLdouble);
#endif

#ifndef GL_VERSION_1_0
extern void glMapGrid2f(GLint,GLfloat,GLfloat,GLint,GLfloat,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glMaterialf(GLenum,GLenum,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glMaterialfv(GLenum,GLenum,const GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glMateriali(GLenum,GLenum,GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glMaterialiv(GLenum,GLenum,const GLint *);
#endif

#ifndef GL_VERSION_1_0
extern void glMatrixMode(GLenum);
#endif

#ifndef GL_VERSION_1_0
extern void glMultMatrixd(const GLdouble *);
#endif

#ifndef GL_VERSION_1_0
extern void glMultMatrixf(const GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glNewList(GLuint,GLenum);
#endif

#ifndef GL_VERSION_1_0
extern void glNormal3b(GLbyte,GLbyte,GLbyte);
#endif

#ifndef GL_VERSION_1_0
extern void glNormal3bv(const GLbyte *);
#endif

#ifndef GL_VERSION_1_0
extern void glNormal3d(GLdouble,GLdouble,GLdouble);
#endif

#ifndef GL_VERSION_1_0
extern void glNormal3dv(const GLdouble *);
#endif

#ifndef GL_VERSION_1_0
extern void glNormal3f(GLfloat,GLfloat,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glNormal3fv(const GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glNormal3i(GLint,GLint,GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glNormal3iv(const GLint *);
#endif

#ifndef GL_VERSION_1_0
extern void glNormal3s(GLshort,GLshort,GLshort);
#endif

#ifndef GL_VERSION_1_0
extern void glNormal3sv(const GLshort *);
#endif

#ifndef GL_VERSION_1_1
extern void glNormalPointer(GLenum,GLsizei,const void *);
#endif

#ifndef GL_VERSION_1_0
extern void glOrtho(GLdouble,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble);
#endif

#ifndef GL_VERSION_1_0
extern void glPassThrough(GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glPixelMapfv(GLenum,GLsizei,const GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glPixelMapuiv(GLenum,GLsizei,const GLuint *);
#endif

#ifndef GL_VERSION_1_0
extern void glPixelMapusv(GLenum,GLsizei,const GLushort *);
#endif

#ifndef GL_VERSION_1_0
extern void glPixelStoref(GLenum,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glPixelStorei(GLenum,GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glPixelTransferf(GLenum,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glPixelTransferi(GLenum,GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glPixelZoom(GLfloat,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glPointSize(GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glPolygonMode(GLenum,GLenum);
#endif

#ifndef GL_VERSION_1_1
extern void glPolygonOffset(GLfloat,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glPolygonStipple(const GLubyte *);
#endif

#ifndef GL_VERSION_1_0
extern void glPopAttrib();
#endif

#ifndef GL_VERSION_1_1
extern void glPopClientAttrib();
#endif

#ifndef GL_VERSION_1_0
extern void glPopMatrix();
#endif

#ifndef GL_VERSION_1_0
extern void glPopName();
#endif

#ifndef GL_VERSION_1_1
extern void glPrioritizeTextures(GLsizei,const GLuint *,const GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glPushAttrib(GLbitfield);
#endif

#ifndef GL_VERSION_1_1
extern void glPushClientAttrib(GLbitfield);
#endif

#ifndef GL_VERSION_1_0
extern void glPushMatrix();
#endif

#ifndef GL_VERSION_1_0
extern void glPushName(GLuint);
#endif

#ifndef GL_VERSION_1_0
extern void glRasterPos2d(GLdouble,GLdouble);
#endif

#ifndef GL_VERSION_1_0
extern void glRasterPos2dv(const GLdouble *);
#endif

#ifndef GL_VERSION_1_0
extern void glRasterPos2f(GLfloat,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glRasterPos2fv(const GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glRasterPos2i(GLint,GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glRasterPos2iv(const GLint *);
#endif

#ifndef GL_VERSION_1_0
extern void glRasterPos2s(GLshort,GLshort);
#endif

#ifndef GL_VERSION_1_0
extern void glRasterPos2sv(const GLshort *);
#endif

#ifndef GL_VERSION_1_0
extern void glRasterPos3d(GLdouble,GLdouble,GLdouble);
#endif

#ifndef GL_VERSION_1_0
extern void glRasterPos3dv(const GLdouble *);
#endif

#ifndef GL_VERSION_1_0
extern void glRasterPos3f(GLfloat,GLfloat,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glRasterPos3fv(const GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glRasterPos3i(GLint,GLint,GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glRasterPos3iv(const GLint *);
#endif

#ifndef GL_VERSION_1_0
extern void glRasterPos3s(GLshort,GLshort,GLshort);
#endif

#ifndef GL_VERSION_1_0
extern void glRasterPos3sv(const GLshort *);
#endif

#ifndef GL_VERSION_1_0
extern void glRasterPos4d(GLdouble,GLdouble,GLdouble,GLdouble);
#endif

#ifndef GL_VERSION_1_0
extern void glRasterPos4dv(const GLdouble *);
#endif

#ifndef GL_VERSION_1_0
extern void glRasterPos4f(GLfloat,GLfloat,GLfloat,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glRasterPos4fv(const GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glRasterPos4i(GLint,GLint,GLint,GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glRasterPos4iv(const GLint *);
#endif

#ifndef GL_VERSION_1_0
extern void glRasterPos4s(GLshort,GLshort,GLshort,GLshort);
#endif

#ifndef GL_VERSION_1_0
extern void glRasterPos4sv(const GLshort *);
#endif

#ifndef GL_VERSION_1_0
extern void glReadBuffer(GLenum);
#endif

#ifndef GL_VERSION_1_0
extern void glReadPixels(GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,void *);
#endif

#ifndef GL_VERSION_1_0
extern void glRectd(GLdouble,GLdouble,GLdouble,GLdouble);
#endif

#ifndef GL_VERSION_1_0
extern void glRectdv(const GLdouble *,const GLdouble *);
#endif

#ifndef GL_VERSION_1_0
extern void glRectf(GLfloat,GLfloat,GLfloat,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glRectfv(const GLfloat *,const GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glRecti(GLint,GLint,GLint,GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glRectiv(const GLint *,const GLint *);
#endif

#ifndef GL_VERSION_1_0
extern void glRects(GLshort,GLshort,GLshort,GLshort);
#endif

#ifndef GL_VERSION_1_0
extern void glRectsv(const GLshort *,const GLshort *);
#endif

#ifndef GL_VERSION_1_0
extern GLint glRenderMode(GLenum);
#endif

#ifndef GL_VERSION_1_0
extern void glRotated(GLdouble,GLdouble,GLdouble,GLdouble);
#endif

#ifndef GL_VERSION_1_0
extern void glRotatef(GLfloat,GLfloat,GLfloat,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glScaled(GLdouble,GLdouble,GLdouble);
#endif

#ifndef GL_VERSION_1_0
extern void glScalef(GLfloat,GLfloat,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glScissor(GLint,GLint,GLsizei,GLsizei);
#endif

#ifndef GL_VERSION_1_0
extern void glSelectBuffer(GLsizei,GLuint *);
#endif

#ifndef GL_VERSION_1_0
extern void glShadeModel(GLenum);
#endif

#ifndef GL_VERSION_1_0
extern void glStencilFunc(GLenum,GLint,GLuint);
#endif

#ifndef GL_VERSION_1_0
extern void glStencilMask(GLuint);
#endif

#ifndef GL_VERSION_1_0
extern void glStencilOp(GLenum,GLenum,GLenum);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord1d(GLdouble);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord1dv(const GLdouble *);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord1f(GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord1fv(const GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord1i(GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord1iv(const GLint *);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord1s(GLshort);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord1sv(const GLshort *);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord2d(GLdouble,GLdouble);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord2dv(const GLdouble *);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord2f(GLfloat,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord2fv(const GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord2i(GLint,GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord2iv(const GLint *);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord2s(GLshort,GLshort);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord2sv(const GLshort *);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord3d(GLdouble,GLdouble,GLdouble);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord3dv(const GLdouble *);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord3f(GLfloat,GLfloat,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord3fv(const GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord3i(GLint,GLint,GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord3iv(const GLint *);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord3s(GLshort,GLshort,GLshort);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord3sv(const GLshort *);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord4d(GLdouble,GLdouble,GLdouble,GLdouble);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord4dv(const GLdouble *);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord4f(GLfloat,GLfloat,GLfloat,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord4fv(const GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord4i(GLint,GLint,GLint,GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord4iv(const GLint *);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord4s(GLshort,GLshort,GLshort,GLshort);
#endif

#ifndef GL_VERSION_1_0
extern void glTexCoord4sv(const GLshort *);
#endif

#ifndef GL_VERSION_1_1
extern void glTexCoordPointer(GLint,GLenum,GLsizei,const void *);
#endif

#ifndef GL_VERSION_1_0
extern void glTexEnvf(GLenum,GLenum,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glTexEnvfv(GLenum,GLenum,const GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glTexEnvi(GLenum,GLenum,GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glTexEnviv(GLenum,GLenum,const GLint *);
#endif

#ifndef GL_VERSION_1_0
extern void glTexGend(GLenum,GLenum,GLdouble);
#endif

#ifndef GL_VERSION_1_0
extern void glTexGendv(GLenum,GLenum,const GLdouble *);
#endif

#ifndef GL_VERSION_1_0
extern void glTexGenf(GLenum,GLenum,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glTexGenfv(GLenum,GLenum,const GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glTexGeni(GLenum,GLenum,GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glTexGeniv(GLenum,GLenum,const GLint *);
#endif

#ifndef GL_VERSION_1_0
extern void glTexImage1D(GLenum,GLint,GLint,GLsizei,GLint,GLenum,GLenum,const void *);
#endif

#ifndef GL_VERSION_1_0
extern void glTexImage2D(GLenum,GLint,GLint,GLsizei,GLsizei,GLint,GLenum,GLenum,const void *);
#endif

#ifndef GL_VERSION_1_0
extern void glTexParameterf(GLenum,GLenum,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glTexParameterfv(GLenum,GLenum,const GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glTexParameteri(GLenum,GLenum,GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glTexParameteriv(GLenum,GLenum,const GLint *);
#endif

#ifndef GL_VERSION_1_1
extern void glTexSubImage1D(GLenum,GLint,GLint,GLsizei,GLenum,GLenum,const void *);
#endif

#ifndef GL_VERSION_1_1
extern void glTexSubImage2D(GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,const void *);
#endif

#ifndef GL_VERSION_1_0
extern void glTranslated(GLdouble,GLdouble,GLdouble);
#endif

#ifndef GL_VERSION_1_0
extern void glTranslatef(GLfloat,GLfloat,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glVertex2d(GLdouble,GLdouble);
#endif

#ifndef GL_VERSION_1_0
extern void glVertex2dv(const GLdouble *);
#endif

#ifndef GL_VERSION_1_0
extern void glVertex2f(GLfloat,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glVertex2fv(const GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glVertex2i(GLint,GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glVertex2iv(const GLint *);
#endif

#ifndef GL_VERSION_1_0
extern void glVertex2s(GLshort,GLshort);
#endif

#ifndef GL_VERSION_1_0
extern void glVertex2sv(const GLshort *);
#endif

#ifndef GL_VERSION_1_0
extern void glVertex3d(GLdouble,GLdouble,GLdouble);
#endif

#ifndef GL_VERSION_1_0
extern void glVertex3dv(const GLdouble *);
#endif

#ifndef GL_VERSION_1_0
extern void glVertex3f(GLfloat,GLfloat,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glVertex3fv(const GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glVertex3i(GLint,GLint,GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glVertex3iv(const GLint *);
#endif

#ifndef GL_VERSION_1_0
extern void glVertex3s(GLshort,GLshort,GLshort);
#endif

#ifndef GL_VERSION_1_0
extern void glVertex3sv(const GLshort *);
#endif

#ifndef GL_VERSION_1_0
extern void glVertex4d(GLdouble,GLdouble,GLdouble,GLdouble);
#endif

#ifndef GL_VERSION_1_0
extern void glVertex4dv(const GLdouble *);
#endif

#ifndef GL_VERSION_1_0
extern void glVertex4f(GLfloat,GLfloat,GLfloat,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glVertex4fv(const GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glVertex4i(GLint,GLint,GLint,GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glVertex4iv(const GLint *);
#endif

#ifndef GL_VERSION_1_0
extern void glVertex4s(GLshort,GLshort,GLshort,GLshort);
#endif

#ifndef GL_VERSION_1_0
extern void glVertex4sv(const GLshort *);
#endif

#ifndef GL_VERSION_1_1
extern void glVertexPointer(GLint,GLenum,GLsizei,const void *);
#endif

#ifndef GL_VERSION_1_0
extern void glViewport(GLint,GLint,GLsizei,GLsizei);
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_ActiveTexture
#define GL_ALT_FUNDEF_ActiveTexture
typedef void (*PFNGLACTIVETEXTUREPROC_ALT)(GLenum);
static inline void glActiveTexture(GLenum texture1)
{
	static PFNGLACTIVETEXTUREPROC_ALT fn=(PFNGLACTIVETEXTUREPROC_ALT)glaltGetProcAddressVersion("glActiveTexture",3,0);
	 fn(texture1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_AttachShader
#define GL_ALT_FUNDEF_AttachShader
typedef void (*PFNGLATTACHSHADERPROC_ALT)(GLuint,GLuint);
static inline void glAttachShader(GLuint program1,GLuint shader1)
{
	static PFNGLATTACHSHADERPROC_ALT fn=(PFNGLATTACHSHADERPROC_ALT)glaltGetProcAddressVersion("glAttachShader",3,0);
	 fn(program1,shader1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_BeginConditionalRender
#define GL_ALT_FUNDEF_BeginConditionalRender
typedef void (*PFNGLBEGINCONDITIONALRENDERPROC_ALT)(GLuint,GLenum);
static inline void glBeginConditionalRender(GLuint id1,GLenum mode1)
{
	static PFNGLBEGINCONDITIONALRENDERPROC_ALT fn=(PFNGLBEGINCONDITIONALRENDERPROC_ALT)glaltGetProcAddressVersion("glBeginConditionalRender",3,0);
	 fn(id1,mode1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_BeginQuery
#define GL_ALT_FUNDEF_BeginQuery
typedef void (*PFNGLBEGINQUERYPROC_ALT)(GLenum,GLuint);
static inline void glBeginQuery(GLenum target1,GLuint id1)
{
	static PFNGLBEGINQUERYPROC_ALT fn=(PFNGLBEGINQUERYPROC_ALT)glaltGetProcAddressVersion("glBeginQuery",3,0);
	 fn(target1,id1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_BeginTransformFeedback
#define GL_ALT_FUNDEF_BeginTransformFeedback
typedef void (*PFNGLBEGINTRANSFORMFEEDBACKPROC_ALT)(GLenum);
static inline void glBeginTransformFeedback(GLenum primitiveMode1)
{
	static PFNGLBEGINTRANSFORMFEEDBACKPROC_ALT fn=(PFNGLBEGINTRANSFORMFEEDBACKPROC_ALT)glaltGetProcAddressVersion("glBeginTransformFeedback",3,0);
	 fn(primitiveMode1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_BindAttribLocation
#define GL_ALT_FUNDEF_BindAttribLocation
typedef void (*PFNGLBINDATTRIBLOCATIONPROC_ALT)(GLuint,GLuint,const GLchar *);
static inline void glBindAttribLocation(GLuint program1,GLuint index1,const GLchar * name1)
{
	static PFNGLBINDATTRIBLOCATIONPROC_ALT fn=(PFNGLBINDATTRIBLOCATIONPROC_ALT)glaltGetProcAddressVersion("glBindAttribLocation",3,0);
	 fn(program1,index1,name1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_BindBuffer
#define GL_ALT_FUNDEF_BindBuffer
typedef void (*PFNGLBINDBUFFERPROC_ALT)(GLenum,GLuint);
static inline void glBindBuffer(GLenum target1,GLuint buffer1)
{
	static PFNGLBINDBUFFERPROC_ALT fn=(PFNGLBINDBUFFERPROC_ALT)glaltGetProcAddressVersion("glBindBuffer",3,0);
	 fn(target1,buffer1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_BindBufferBase
#define GL_ALT_FUNDEF_BindBufferBase
typedef void (*PFNGLBINDBUFFERBASEPROC_ALT)(GLenum,GLuint,GLuint);
static inline void glBindBufferBase(GLenum target1,GLuint index1,GLuint buffer1)
{
	static PFNGLBINDBUFFERBASEPROC_ALT fn=(PFNGLBINDBUFFERBASEPROC_ALT)glaltGetProcAddressVersion("glBindBufferBase",3,0);
	 fn(target1,index1,buffer1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_BindBufferRange
#define GL_ALT_FUNDEF_BindBufferRange
typedef void (*PFNGLBINDBUFFERRANGEPROC_ALT)(GLenum,GLuint,GLuint,GLintptr,GLsizeiptr);
static inline void glBindBufferRange(GLenum target1,GLuint index1,GLuint buffer1,GLintptr offset1,GLsizeiptr size1)
{
	static PFNGLBINDBUFFERRANGEPROC_ALT fn=(PFNGLBINDBUFFERRANGEPROC_ALT)glaltGetProcAddressVersion("glBindBufferRange",3,0);
	 fn(target1,index1,buffer1,offset1,size1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_BindFragDataLocation
#define GL_ALT_FUNDEF_BindFragDataLocation
typedef void (*PFNGLBINDFRAGDATALOCATIONPROC_ALT)(GLuint,GLuint,const GLchar *);
static inline void glBindFragDataLocation(GLuint program1,GLuint color1,const GLchar * name1)
{
	static PFNGLBINDFRAGDATALOCATIONPROC_ALT fn=(PFNGLBINDFRAGDATALOCATIONPROC_ALT)glaltGetProcAddressVersion("glBindFragDataLocation",3,0);
	 fn(program1,color1,name1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_BindFramebuffer
#define GL_ALT_FUNDEF_BindFramebuffer
typedef void (*PFNGLBINDFRAMEBUFFERPROC_ALT)(GLenum,GLuint);
static inline void glBindFramebuffer(GLenum target1,GLuint framebuffer1)
{
	static PFNGLBINDFRAMEBUFFERPROC_ALT fn=(PFNGLBINDFRAMEBUFFERPROC_ALT)glaltGetProcAddressVersion("glBindFramebuffer",3,0);
	 fn(target1,framebuffer1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_BindRenderbuffer
#define GL_ALT_FUNDEF_BindRenderbuffer
typedef void (*PFNGLBINDRENDERBUFFERPROC_ALT)(GLenum,GLuint);
static inline void glBindRenderbuffer(GLenum target1,GLuint renderbuffer1)
{
	static PFNGLBINDRENDERBUFFERPROC_ALT fn=(PFNGLBINDRENDERBUFFERPROC_ALT)glaltGetProcAddressVersion("glBindRenderbuffer",3,0);
	 fn(target1,renderbuffer1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_BindVertexArray
#define GL_ALT_FUNDEF_BindVertexArray
typedef void (*PFNGLBINDVERTEXARRAYPROC_ALT)(GLuint);
static inline void glBindVertexArray(GLuint array1)
{
	static PFNGLBINDVERTEXARRAYPROC_ALT fn=(PFNGLBINDVERTEXARRAYPROC_ALT)glaltGetProcAddressVersion("glBindVertexArray",3,0);
	 fn(array1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_BlendColor
#define GL_ALT_FUNDEF_BlendColor
typedef void (*PFNGLBLENDCOLORPROC_ALT)(GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glBlendColor(GLfloat red1,GLfloat green1,GLfloat blue1,GLfloat alpha1)
{
	static PFNGLBLENDCOLORPROC_ALT fn=(PFNGLBLENDCOLORPROC_ALT)glaltGetProcAddressVersion("glBlendColor",3,0);
	 fn(red1,green1,blue1,alpha1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_BlendEquation
#define GL_ALT_FUNDEF_BlendEquation
typedef void (*PFNGLBLENDEQUATIONPROC_ALT)(GLenum);
static inline void glBlendEquation(GLenum mode1)
{
	static PFNGLBLENDEQUATIONPROC_ALT fn=(PFNGLBLENDEQUATIONPROC_ALT)glaltGetProcAddressVersion("glBlendEquation",3,0);
	 fn(mode1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_BlendEquationSeparate
#define GL_ALT_FUNDEF_BlendEquationSeparate
typedef void (*PFNGLBLENDEQUATIONSEPARATEPROC_ALT)(GLenum,GLenum);
static inline void glBlendEquationSeparate(GLenum modeRGB1,GLenum modeAlpha1)
{
	static PFNGLBLENDEQUATIONSEPARATEPROC_ALT fn=(PFNGLBLENDEQUATIONSEPARATEPROC_ALT)glaltGetProcAddressVersion("glBlendEquationSeparate",3,0);
	 fn(modeRGB1,modeAlpha1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_BlendFuncSeparate
#define GL_ALT_FUNDEF_BlendFuncSeparate
typedef void (*PFNGLBLENDFUNCSEPARATEPROC_ALT)(GLenum,GLenum,GLenum,GLenum);
static inline void glBlendFuncSeparate(GLenum sfactorRGB1,GLenum dfactorRGB1,GLenum sfactorAlpha1,GLenum dfactorAlpha1)
{
	static PFNGLBLENDFUNCSEPARATEPROC_ALT fn=(PFNGLBLENDFUNCSEPARATEPROC_ALT)glaltGetProcAddressVersion("glBlendFuncSeparate",3,0);
	 fn(sfactorRGB1,dfactorRGB1,sfactorAlpha1,dfactorAlpha1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_BlitFramebuffer
#define GL_ALT_FUNDEF_BlitFramebuffer
typedef void (*PFNGLBLITFRAMEBUFFERPROC_ALT)(GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLbitfield,GLenum);
static inline void glBlitFramebuffer(GLint srcX01,GLint srcY01,GLint srcX11,GLint srcY11,GLint dstX01,GLint dstY01,GLint dstX11,GLint dstY11,GLbitfield mask1,GLenum filter1)
{
	static PFNGLBLITFRAMEBUFFERPROC_ALT fn=(PFNGLBLITFRAMEBUFFERPROC_ALT)glaltGetProcAddressVersion("glBlitFramebuffer",3,0);
	 fn(srcX01,srcY01,srcX11,srcY11,dstX01,dstY01,dstX11,dstY11,mask1,filter1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_BufferData
#define GL_ALT_FUNDEF_BufferData
typedef void (*PFNGLBUFFERDATAPROC_ALT)(GLenum,GLsizeiptr,const void *,GLenum);
static inline void glBufferData(GLenum target1,GLsizeiptr size1,const void * data1,GLenum usage1)
{
	static PFNGLBUFFERDATAPROC_ALT fn=(PFNGLBUFFERDATAPROC_ALT)glaltGetProcAddressVersion("glBufferData",3,0);
	 fn(target1,size1,data1,usage1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_BufferSubData
#define GL_ALT_FUNDEF_BufferSubData
typedef void (*PFNGLBUFFERSUBDATAPROC_ALT)(GLenum,GLintptr,GLsizeiptr,const void *);
static inline void glBufferSubData(GLenum target1,GLintptr offset1,GLsizeiptr size1,const void * data1)
{
	static PFNGLBUFFERSUBDATAPROC_ALT fn=(PFNGLBUFFERSUBDATAPROC_ALT)glaltGetProcAddressVersion("glBufferSubData",3,0);
	 fn(target1,offset1,size1,data1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_CheckFramebufferStatus
#define GL_ALT_FUNDEF_CheckFramebufferStatus
typedef GLenum (*PFNGLCHECKFRAMEBUFFERSTATUSPROC_ALT)(GLenum);
static inline GLenum glCheckFramebufferStatus(GLenum target1)
{
	static PFNGLCHECKFRAMEBUFFERSTATUSPROC_ALT fn=(PFNGLCHECKFRAMEBUFFERSTATUSPROC_ALT)glaltGetProcAddressVersion("glCheckFramebufferStatus",3,0);
	return fn(target1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_ClampColor
#define GL_ALT_FUNDEF_ClampColor
typedef void (*PFNGLCLAMPCOLORPROC_ALT)(GLenum,GLenum);
static inline void glClampColor(GLenum target1,GLenum clamp1)
{
	static PFNGLCLAMPCOLORPROC_ALT fn=(PFNGLCLAMPCOLORPROC_ALT)glaltGetProcAddressVersion("glClampColor",3,0);
	 fn(target1,clamp1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_ClearBufferfi
#define GL_ALT_FUNDEF_ClearBufferfi
typedef void (*PFNGLCLEARBUFFERFIPROC_ALT)(GLenum,GLint,GLfloat,GLint);
static inline void glClearBufferfi(GLenum buffer1,GLint drawbuffer1,GLfloat depth1,GLint stencil1)
{
	static PFNGLCLEARBUFFERFIPROC_ALT fn=(PFNGLCLEARBUFFERFIPROC_ALT)glaltGetProcAddressVersion("glClearBufferfi",3,0);
	 fn(buffer1,drawbuffer1,depth1,stencil1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_ClearBufferfv
#define GL_ALT_FUNDEF_ClearBufferfv
typedef void (*PFNGLCLEARBUFFERFVPROC_ALT)(GLenum,GLint,const GLfloat *);
static inline void glClearBufferfv(GLenum buffer1,GLint drawbuffer1,const GLfloat * value1)
{
	static PFNGLCLEARBUFFERFVPROC_ALT fn=(PFNGLCLEARBUFFERFVPROC_ALT)glaltGetProcAddressVersion("glClearBufferfv",3,0);
	 fn(buffer1,drawbuffer1,value1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_ClearBufferiv
#define GL_ALT_FUNDEF_ClearBufferiv
typedef void (*PFNGLCLEARBUFFERIVPROC_ALT)(GLenum,GLint,const GLint *);
static inline void glClearBufferiv(GLenum buffer1,GLint drawbuffer1,const GLint * value1)
{
	static PFNGLCLEARBUFFERIVPROC_ALT fn=(PFNGLCLEARBUFFERIVPROC_ALT)glaltGetProcAddressVersion("glClearBufferiv",3,0);
	 fn(buffer1,drawbuffer1,value1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_ClearBufferuiv
#define GL_ALT_FUNDEF_ClearBufferuiv
typedef void (*PFNGLCLEARBUFFERUIVPROC_ALT)(GLenum,GLint,const GLuint *);
static inline void glClearBufferuiv(GLenum buffer1,GLint drawbuffer1,const GLuint * value1)
{
	static PFNGLCLEARBUFFERUIVPROC_ALT fn=(PFNGLCLEARBUFFERUIVPROC_ALT)glaltGetProcAddressVersion("glClearBufferuiv",3,0);
	 fn(buffer1,drawbuffer1,value1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_ClientActiveTexture
#define GL_ALT_FUNDEF_ClientActiveTexture
typedef void (*PFNGLCLIENTACTIVETEXTUREPROC_ALT)(GLenum);
static inline void glClientActiveTexture(GLenum texture1)
{
	static PFNGLCLIENTACTIVETEXTUREPROC_ALT fn=(PFNGLCLIENTACTIVETEXTUREPROC_ALT)glaltGetProcAddressVersion("glClientActiveTexture",3,0);
	 fn(texture1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_ColorMaski
#define GL_ALT_FUNDEF_ColorMaski
typedef void (*PFNGLCOLORMASKIPROC_ALT)(GLuint,GLboolean,GLboolean,GLboolean,GLboolean);
static inline void glColorMaski(GLuint index1,GLboolean r1,GLboolean g1,GLboolean b1,GLboolean a1)
{
	static PFNGLCOLORMASKIPROC_ALT fn=(PFNGLCOLORMASKIPROC_ALT)glaltGetProcAddressVersion("glColorMaski",3,0);
	 fn(index1,r1,g1,b1,a1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_CompileShader
#define GL_ALT_FUNDEF_CompileShader
typedef void (*PFNGLCOMPILESHADERPROC_ALT)(GLuint);
static inline void glCompileShader(GLuint shader1)
{
	static PFNGLCOMPILESHADERPROC_ALT fn=(PFNGLCOMPILESHADERPROC_ALT)glaltGetProcAddressVersion("glCompileShader",3,0);
	 fn(shader1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_CompressedTexImage1D
#define GL_ALT_FUNDEF_CompressedTexImage1D
typedef void (*PFNGLCOMPRESSEDTEXIMAGE1DPROC_ALT)(GLenum,GLint,GLenum,GLsizei,GLint,GLsizei,const void *);
static inline void glCompressedTexImage1D(GLenum target1,GLint level1,GLenum internalformat1,GLsizei width1,GLint border1,GLsizei imageSize1,const void * data1)
{
	static PFNGLCOMPRESSEDTEXIMAGE1DPROC_ALT fn=(PFNGLCOMPRESSEDTEXIMAGE1DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexImage1D",3,0);
	 fn(target1,level1,internalformat1,width1,border1,imageSize1,data1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_CompressedTexImage2D
#define GL_ALT_FUNDEF_CompressedTexImage2D
typedef void (*PFNGLCOMPRESSEDTEXIMAGE2DPROC_ALT)(GLenum,GLint,GLenum,GLsizei,GLsizei,GLint,GLsizei,const void *);
static inline void glCompressedTexImage2D(GLenum target1,GLint level1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLint border1,GLsizei imageSize1,const void * data1)
{
	static PFNGLCOMPRESSEDTEXIMAGE2DPROC_ALT fn=(PFNGLCOMPRESSEDTEXIMAGE2DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexImage2D",3,0);
	 fn(target1,level1,internalformat1,width1,height1,border1,imageSize1,data1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_CompressedTexImage3D
#define GL_ALT_FUNDEF_CompressedTexImage3D
typedef void (*PFNGLCOMPRESSEDTEXIMAGE3DPROC_ALT)(GLenum,GLint,GLenum,GLsizei,GLsizei,GLsizei,GLint,GLsizei,const void *);
static inline void glCompressedTexImage3D(GLenum target1,GLint level1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLint border1,GLsizei imageSize1,const void * data1)
{
	static PFNGLCOMPRESSEDTEXIMAGE3DPROC_ALT fn=(PFNGLCOMPRESSEDTEXIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexImage3D",3,0);
	 fn(target1,level1,internalformat1,width1,height1,depth1,border1,imageSize1,data1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_CompressedTexSubImage1D
#define GL_ALT_FUNDEF_CompressedTexSubImage1D
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC_ALT)(GLenum,GLint,GLint,GLsizei,GLenum,GLsizei,const void *);
static inline void glCompressedTexSubImage1D(GLenum target1,GLint level1,GLint xoffset1,GLsizei width1,GLenum format1,GLsizei imageSize1,const void * data1)
{
	static PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC_ALT fn=(PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexSubImage1D",3,0);
	 fn(target1,level1,xoffset1,width1,format1,imageSize1,data1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_CompressedTexSubImage2D
#define GL_ALT_FUNDEF_CompressedTexSubImage2D
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC_ALT)(GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLsizei,const void *);
static inline void glCompressedTexSubImage2D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLsizei width1,GLsizei height1,GLenum format1,GLsizei imageSize1,const void * data1)
{
	static PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC_ALT fn=(PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexSubImage2D",3,0);
	 fn(target1,level1,xoffset1,yoffset1,width1,height1,format1,imageSize1,data1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_CompressedTexSubImage3D
#define GL_ALT_FUNDEF_CompressedTexSubImage3D
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC_ALT)(GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLsizei,const void *);
static inline void glCompressedTexSubImage3D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLsizei width1,GLsizei height1,GLsizei depth1,GLenum format1,GLsizei imageSize1,const void * data1)
{
	static PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC_ALT fn=(PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexSubImage3D",3,0);
	 fn(target1,level1,xoffset1,yoffset1,zoffset1,width1,height1,depth1,format1,imageSize1,data1);
}
#endif
#endif

#ifndef GL_VERSION_1_2
#ifndef	GL_ALT_FUNDEF_CopyTexSubImage3D
#define GL_ALT_FUNDEF_CopyTexSubImage3D
typedef void (*PFNGLCOPYTEXSUBIMAGE3DPROC_ALT)(GLenum,GLint,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
static inline void glCopyTexSubImage3D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
	static PFNGLCOPYTEXSUBIMAGE3DPROC_ALT fn=(PFNGLCOPYTEXSUBIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glCopyTexSubImage3D",3,0);
	 fn(target1,level1,xoffset1,yoffset1,zoffset1,x1,y1,width1,height1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_CreateProgram
#define GL_ALT_FUNDEF_CreateProgram
typedef GLuint (*PFNGLCREATEPROGRAMPROC_ALT)();
static inline GLuint glCreateProgram()
{
	static PFNGLCREATEPROGRAMPROC_ALT fn=(PFNGLCREATEPROGRAMPROC_ALT)glaltGetProcAddressVersion("glCreateProgram",3,0);
	return fn();
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_CreateShader
#define GL_ALT_FUNDEF_CreateShader
typedef GLuint (*PFNGLCREATESHADERPROC_ALT)(GLenum);
static inline GLuint glCreateShader(GLenum type1)
{
	static PFNGLCREATESHADERPROC_ALT fn=(PFNGLCREATESHADERPROC_ALT)glaltGetProcAddressVersion("glCreateShader",3,0);
	return fn(type1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_DeleteBuffers
#define GL_ALT_FUNDEF_DeleteBuffers
typedef void (*PFNGLDELETEBUFFERSPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteBuffers(GLsizei n1,const GLuint * buffers1)
{
	static PFNGLDELETEBUFFERSPROC_ALT fn=(PFNGLDELETEBUFFERSPROC_ALT)glaltGetProcAddressVersion("glDeleteBuffers",3,0);
	 fn(n1,buffers1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_DeleteFramebuffers
#define GL_ALT_FUNDEF_DeleteFramebuffers
typedef void (*PFNGLDELETEFRAMEBUFFERSPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteFramebuffers(GLsizei n1,const GLuint * framebuffers1)
{
	static PFNGLDELETEFRAMEBUFFERSPROC_ALT fn=(PFNGLDELETEFRAMEBUFFERSPROC_ALT)glaltGetProcAddressVersion("glDeleteFramebuffers",3,0);
	 fn(n1,framebuffers1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_DeleteProgram
#define GL_ALT_FUNDEF_DeleteProgram
typedef void (*PFNGLDELETEPROGRAMPROC_ALT)(GLuint);
static inline void glDeleteProgram(GLuint program1)
{
	static PFNGLDELETEPROGRAMPROC_ALT fn=(PFNGLDELETEPROGRAMPROC_ALT)glaltGetProcAddressVersion("glDeleteProgram",3,0);
	 fn(program1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_DeleteQueries
#define GL_ALT_FUNDEF_DeleteQueries
typedef void (*PFNGLDELETEQUERIESPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteQueries(GLsizei n1,const GLuint * ids1)
{
	static PFNGLDELETEQUERIESPROC_ALT fn=(PFNGLDELETEQUERIESPROC_ALT)glaltGetProcAddressVersion("glDeleteQueries",3,0);
	 fn(n1,ids1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_DeleteRenderbuffers
#define GL_ALT_FUNDEF_DeleteRenderbuffers
typedef void (*PFNGLDELETERENDERBUFFERSPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteRenderbuffers(GLsizei n1,const GLuint * renderbuffers1)
{
	static PFNGLDELETERENDERBUFFERSPROC_ALT fn=(PFNGLDELETERENDERBUFFERSPROC_ALT)glaltGetProcAddressVersion("glDeleteRenderbuffers",3,0);
	 fn(n1,renderbuffers1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_DeleteShader
#define GL_ALT_FUNDEF_DeleteShader
typedef void (*PFNGLDELETESHADERPROC_ALT)(GLuint);
static inline void glDeleteShader(GLuint shader1)
{
	static PFNGLDELETESHADERPROC_ALT fn=(PFNGLDELETESHADERPROC_ALT)glaltGetProcAddressVersion("glDeleteShader",3,0);
	 fn(shader1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_DeleteVertexArrays
#define GL_ALT_FUNDEF_DeleteVertexArrays
typedef void (*PFNGLDELETEVERTEXARRAYSPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteVertexArrays(GLsizei n1,const GLuint * arrays1)
{
	static PFNGLDELETEVERTEXARRAYSPROC_ALT fn=(PFNGLDELETEVERTEXARRAYSPROC_ALT)glaltGetProcAddressVersion("glDeleteVertexArrays",3,0);
	 fn(n1,arrays1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_DetachShader
#define GL_ALT_FUNDEF_DetachShader
typedef void (*PFNGLDETACHSHADERPROC_ALT)(GLuint,GLuint);
static inline void glDetachShader(GLuint program1,GLuint shader1)
{
	static PFNGLDETACHSHADERPROC_ALT fn=(PFNGLDETACHSHADERPROC_ALT)glaltGetProcAddressVersion("glDetachShader",3,0);
	 fn(program1,shader1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_DisableVertexAttribArray
#define GL_ALT_FUNDEF_DisableVertexAttribArray
typedef void (*PFNGLDISABLEVERTEXATTRIBARRAYPROC_ALT)(GLuint);
static inline void glDisableVertexAttribArray(GLuint index1)
{
	static PFNGLDISABLEVERTEXATTRIBARRAYPROC_ALT fn=(PFNGLDISABLEVERTEXATTRIBARRAYPROC_ALT)glaltGetProcAddressVersion("glDisableVertexAttribArray",3,0);
	 fn(index1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_Disablei
#define GL_ALT_FUNDEF_Disablei
typedef void (*PFNGLDISABLEIPROC_ALT)(GLenum,GLuint);
static inline void glDisablei(GLenum target1,GLuint index1)
{
	static PFNGLDISABLEIPROC_ALT fn=(PFNGLDISABLEIPROC_ALT)glaltGetProcAddressVersion("glDisablei",3,0);
	 fn(target1,index1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_DrawBuffers
#define GL_ALT_FUNDEF_DrawBuffers
typedef void (*PFNGLDRAWBUFFERSPROC_ALT)(GLsizei,const GLenum *);
static inline void glDrawBuffers(GLsizei n1,const GLenum * bufs1)
{
	static PFNGLDRAWBUFFERSPROC_ALT fn=(PFNGLDRAWBUFFERSPROC_ALT)glaltGetProcAddressVersion("glDrawBuffers",3,0);
	 fn(n1,bufs1);
}
#endif
#endif

#ifndef GL_VERSION_1_2
#ifndef	GL_ALT_FUNDEF_DrawRangeElements
#define GL_ALT_FUNDEF_DrawRangeElements
typedef void (*PFNGLDRAWRANGEELEMENTSPROC_ALT)(GLenum,GLuint,GLuint,GLsizei,GLenum,const void *);
static inline void glDrawRangeElements(GLenum mode1,GLuint start1,GLuint end1,GLsizei count1,GLenum type1,const void * indices1)
{
	static PFNGLDRAWRANGEELEMENTSPROC_ALT fn=(PFNGLDRAWRANGEELEMENTSPROC_ALT)glaltGetProcAddressVersion("glDrawRangeElements",3,0);
	 fn(mode1,start1,end1,count1,type1,indices1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_EnableVertexAttribArray
#define GL_ALT_FUNDEF_EnableVertexAttribArray
typedef void (*PFNGLENABLEVERTEXATTRIBARRAYPROC_ALT)(GLuint);
static inline void glEnableVertexAttribArray(GLuint index1)
{
	static PFNGLENABLEVERTEXATTRIBARRAYPROC_ALT fn=(PFNGLENABLEVERTEXATTRIBARRAYPROC_ALT)glaltGetProcAddressVersion("glEnableVertexAttribArray",3,0);
	 fn(index1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_Enablei
#define GL_ALT_FUNDEF_Enablei
typedef void (*PFNGLENABLEIPROC_ALT)(GLenum,GLuint);
static inline void glEnablei(GLenum target1,GLuint index1)
{
	static PFNGLENABLEIPROC_ALT fn=(PFNGLENABLEIPROC_ALT)glaltGetProcAddressVersion("glEnablei",3,0);
	 fn(target1,index1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_EndConditionalRender
#define GL_ALT_FUNDEF_EndConditionalRender
typedef void (*PFNGLENDCONDITIONALRENDERPROC_ALT)();
static inline void glEndConditionalRender()
{
	static PFNGLENDCONDITIONALRENDERPROC_ALT fn=(PFNGLENDCONDITIONALRENDERPROC_ALT)glaltGetProcAddressVersion("glEndConditionalRender",3,0);
	 fn();
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_EndQuery
#define GL_ALT_FUNDEF_EndQuery
typedef void (*PFNGLENDQUERYPROC_ALT)(GLenum);
static inline void glEndQuery(GLenum target1)
{
	static PFNGLENDQUERYPROC_ALT fn=(PFNGLENDQUERYPROC_ALT)glaltGetProcAddressVersion("glEndQuery",3,0);
	 fn(target1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_EndTransformFeedback
#define GL_ALT_FUNDEF_EndTransformFeedback
typedef void (*PFNGLENDTRANSFORMFEEDBACKPROC_ALT)();
static inline void glEndTransformFeedback()
{
	static PFNGLENDTRANSFORMFEEDBACKPROC_ALT fn=(PFNGLENDTRANSFORMFEEDBACKPROC_ALT)glaltGetProcAddressVersion("glEndTransformFeedback",3,0);
	 fn();
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_FlushMappedBufferRange
#define GL_ALT_FUNDEF_FlushMappedBufferRange
typedef void (*PFNGLFLUSHMAPPEDBUFFERRANGEPROC_ALT)(GLenum,GLintptr,GLsizeiptr);
static inline void glFlushMappedBufferRange(GLenum target1,GLintptr offset1,GLsizeiptr length1)
{
	static PFNGLFLUSHMAPPEDBUFFERRANGEPROC_ALT fn=(PFNGLFLUSHMAPPEDBUFFERRANGEPROC_ALT)glaltGetProcAddressVersion("glFlushMappedBufferRange",3,0);
	 fn(target1,offset1,length1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_FogCoordPointer
#define GL_ALT_FUNDEF_FogCoordPointer
typedef void (*PFNGLFOGCOORDPOINTERPROC_ALT)(GLenum,GLsizei,const void *);
static inline void glFogCoordPointer(GLenum type1,GLsizei stride1,const void * pointer1)
{
	static PFNGLFOGCOORDPOINTERPROC_ALT fn=(PFNGLFOGCOORDPOINTERPROC_ALT)glaltGetProcAddressVersion("glFogCoordPointer",3,0);
	 fn(type1,stride1,pointer1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_FogCoordd
#define GL_ALT_FUNDEF_FogCoordd
typedef void (*PFNGLFOGCOORDDPROC_ALT)(GLdouble);
static inline void glFogCoordd(GLdouble coord1)
{
	static PFNGLFOGCOORDDPROC_ALT fn=(PFNGLFOGCOORDDPROC_ALT)glaltGetProcAddressVersion("glFogCoordd",3,0);
	 fn(coord1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_FogCoorddv
#define GL_ALT_FUNDEF_FogCoorddv
typedef void (*PFNGLFOGCOORDDVPROC_ALT)(const GLdouble *);
static inline void glFogCoorddv(const GLdouble * coord1)
{
	static PFNGLFOGCOORDDVPROC_ALT fn=(PFNGLFOGCOORDDVPROC_ALT)glaltGetProcAddressVersion("glFogCoorddv",3,0);
	 fn(coord1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_FogCoordf
#define GL_ALT_FUNDEF_FogCoordf
typedef void (*PFNGLFOGCOORDFPROC_ALT)(GLfloat);
static inline void glFogCoordf(GLfloat coord1)
{
	static PFNGLFOGCOORDFPROC_ALT fn=(PFNGLFOGCOORDFPROC_ALT)glaltGetProcAddressVersion("glFogCoordf",3,0);
	 fn(coord1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_FogCoordfv
#define GL_ALT_FUNDEF_FogCoordfv
typedef void (*PFNGLFOGCOORDFVPROC_ALT)(const GLfloat *);
static inline void glFogCoordfv(const GLfloat * coord1)
{
	static PFNGLFOGCOORDFVPROC_ALT fn=(PFNGLFOGCOORDFVPROC_ALT)glaltGetProcAddressVersion("glFogCoordfv",3,0);
	 fn(coord1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_FramebufferRenderbuffer
#define GL_ALT_FUNDEF_FramebufferRenderbuffer
typedef void (*PFNGLFRAMEBUFFERRENDERBUFFERPROC_ALT)(GLenum,GLenum,GLenum,GLuint);
static inline void glFramebufferRenderbuffer(GLenum target1,GLenum attachment1,GLenum renderbuffertarget1,GLuint renderbuffer1)
{
	static PFNGLFRAMEBUFFERRENDERBUFFERPROC_ALT fn=(PFNGLFRAMEBUFFERRENDERBUFFERPROC_ALT)glaltGetProcAddressVersion("glFramebufferRenderbuffer",3,0);
	 fn(target1,attachment1,renderbuffertarget1,renderbuffer1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_FramebufferTexture1D
#define GL_ALT_FUNDEF_FramebufferTexture1D
typedef void (*PFNGLFRAMEBUFFERTEXTURE1DPROC_ALT)(GLenum,GLenum,GLenum,GLuint,GLint);
static inline void glFramebufferTexture1D(GLenum target1,GLenum attachment1,GLenum textarget1,GLuint texture1,GLint level1)
{
	static PFNGLFRAMEBUFFERTEXTURE1DPROC_ALT fn=(PFNGLFRAMEBUFFERTEXTURE1DPROC_ALT)glaltGetProcAddressVersion("glFramebufferTexture1D",3,0);
	 fn(target1,attachment1,textarget1,texture1,level1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_FramebufferTexture2D
#define GL_ALT_FUNDEF_FramebufferTexture2D
typedef void (*PFNGLFRAMEBUFFERTEXTURE2DPROC_ALT)(GLenum,GLenum,GLenum,GLuint,GLint);
static inline void glFramebufferTexture2D(GLenum target1,GLenum attachment1,GLenum textarget1,GLuint texture1,GLint level1)
{
	static PFNGLFRAMEBUFFERTEXTURE2DPROC_ALT fn=(PFNGLFRAMEBUFFERTEXTURE2DPROC_ALT)glaltGetProcAddressVersion("glFramebufferTexture2D",3,0);
	 fn(target1,attachment1,textarget1,texture1,level1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_FramebufferTexture3D
#define GL_ALT_FUNDEF_FramebufferTexture3D
typedef void (*PFNGLFRAMEBUFFERTEXTURE3DPROC_ALT)(GLenum,GLenum,GLenum,GLuint,GLint,GLint);
static inline void glFramebufferTexture3D(GLenum target1,GLenum attachment1,GLenum textarget1,GLuint texture1,GLint level1,GLint zoffset1)
{
	static PFNGLFRAMEBUFFERTEXTURE3DPROC_ALT fn=(PFNGLFRAMEBUFFERTEXTURE3DPROC_ALT)glaltGetProcAddressVersion("glFramebufferTexture3D",3,0);
	 fn(target1,attachment1,textarget1,texture1,level1,zoffset1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_FramebufferTextureLayer
#define GL_ALT_FUNDEF_FramebufferTextureLayer
typedef void (*PFNGLFRAMEBUFFERTEXTURELAYERPROC_ALT)(GLenum,GLenum,GLuint,GLint,GLint);
static inline void glFramebufferTextureLayer(GLenum target1,GLenum attachment1,GLuint texture1,GLint level1,GLint layer1)
{
	static PFNGLFRAMEBUFFERTEXTURELAYERPROC_ALT fn=(PFNGLFRAMEBUFFERTEXTURELAYERPROC_ALT)glaltGetProcAddressVersion("glFramebufferTextureLayer",3,0);
	 fn(target1,attachment1,texture1,level1,layer1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_GenBuffers
#define GL_ALT_FUNDEF_GenBuffers
typedef void (*PFNGLGENBUFFERSPROC_ALT)(GLsizei,GLuint *);
static inline void glGenBuffers(GLsizei n1,GLuint * buffers1)
{
	static PFNGLGENBUFFERSPROC_ALT fn=(PFNGLGENBUFFERSPROC_ALT)glaltGetProcAddressVersion("glGenBuffers",3,0);
	 fn(n1,buffers1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GenFramebuffers
#define GL_ALT_FUNDEF_GenFramebuffers
typedef void (*PFNGLGENFRAMEBUFFERSPROC_ALT)(GLsizei,GLuint *);
static inline void glGenFramebuffers(GLsizei n1,GLuint * framebuffers1)
{
	static PFNGLGENFRAMEBUFFERSPROC_ALT fn=(PFNGLGENFRAMEBUFFERSPROC_ALT)glaltGetProcAddressVersion("glGenFramebuffers",3,0);
	 fn(n1,framebuffers1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_GenQueries
#define GL_ALT_FUNDEF_GenQueries
typedef void (*PFNGLGENQUERIESPROC_ALT)(GLsizei,GLuint *);
static inline void glGenQueries(GLsizei n1,GLuint * ids1)
{
	static PFNGLGENQUERIESPROC_ALT fn=(PFNGLGENQUERIESPROC_ALT)glaltGetProcAddressVersion("glGenQueries",3,0);
	 fn(n1,ids1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GenRenderbuffers
#define GL_ALT_FUNDEF_GenRenderbuffers
typedef void (*PFNGLGENRENDERBUFFERSPROC_ALT)(GLsizei,GLuint *);
static inline void glGenRenderbuffers(GLsizei n1,GLuint * renderbuffers1)
{
	static PFNGLGENRENDERBUFFERSPROC_ALT fn=(PFNGLGENRENDERBUFFERSPROC_ALT)glaltGetProcAddressVersion("glGenRenderbuffers",3,0);
	 fn(n1,renderbuffers1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GenVertexArrays
#define GL_ALT_FUNDEF_GenVertexArrays
typedef void (*PFNGLGENVERTEXARRAYSPROC_ALT)(GLsizei,GLuint *);
static inline void glGenVertexArrays(GLsizei n1,GLuint * arrays1)
{
	static PFNGLGENVERTEXARRAYSPROC_ALT fn=(PFNGLGENVERTEXARRAYSPROC_ALT)glaltGetProcAddressVersion("glGenVertexArrays",3,0);
	 fn(n1,arrays1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GenerateMipmap
#define GL_ALT_FUNDEF_GenerateMipmap
typedef void (*PFNGLGENERATEMIPMAPPROC_ALT)(GLenum);
static inline void glGenerateMipmap(GLenum target1)
{
	static PFNGLGENERATEMIPMAPPROC_ALT fn=(PFNGLGENERATEMIPMAPPROC_ALT)glaltGetProcAddressVersion("glGenerateMipmap",3,0);
	 fn(target1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetActiveAttrib
#define GL_ALT_FUNDEF_GetActiveAttrib
typedef void (*PFNGLGETACTIVEATTRIBPROC_ALT)(GLuint,GLuint,GLsizei,GLsizei *,GLint *,GLenum *,GLchar *);
static inline void glGetActiveAttrib(GLuint program1,GLuint index1,GLsizei bufSize1,GLsizei * length1,GLint * size1,GLenum * type1,GLchar * name1)
{
	static PFNGLGETACTIVEATTRIBPROC_ALT fn=(PFNGLGETACTIVEATTRIBPROC_ALT)glaltGetProcAddressVersion("glGetActiveAttrib",3,0);
	 fn(program1,index1,bufSize1,length1,size1,type1,name1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetActiveUniform
#define GL_ALT_FUNDEF_GetActiveUniform
typedef void (*PFNGLGETACTIVEUNIFORMPROC_ALT)(GLuint,GLuint,GLsizei,GLsizei *,GLint *,GLenum *,GLchar *);
static inline void glGetActiveUniform(GLuint program1,GLuint index1,GLsizei bufSize1,GLsizei * length1,GLint * size1,GLenum * type1,GLchar * name1)
{
	static PFNGLGETACTIVEUNIFORMPROC_ALT fn=(PFNGLGETACTIVEUNIFORMPROC_ALT)glaltGetProcAddressVersion("glGetActiveUniform",3,0);
	 fn(program1,index1,bufSize1,length1,size1,type1,name1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetAttachedShaders
#define GL_ALT_FUNDEF_GetAttachedShaders
typedef void (*PFNGLGETATTACHEDSHADERSPROC_ALT)(GLuint,GLsizei,GLsizei *,GLuint *);
static inline void glGetAttachedShaders(GLuint program1,GLsizei maxCount1,GLsizei * count1,GLuint * shaders1)
{
	static PFNGLGETATTACHEDSHADERSPROC_ALT fn=(PFNGLGETATTACHEDSHADERSPROC_ALT)glaltGetProcAddressVersion("glGetAttachedShaders",3,0);
	 fn(program1,maxCount1,count1,shaders1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetAttribLocation
#define GL_ALT_FUNDEF_GetAttribLocation
typedef GLint (*PFNGLGETATTRIBLOCATIONPROC_ALT)(GLuint,const GLchar *);
static inline GLint glGetAttribLocation(GLuint program1,const GLchar * name1)
{
	static PFNGLGETATTRIBLOCATIONPROC_ALT fn=(PFNGLGETATTRIBLOCATIONPROC_ALT)glaltGetProcAddressVersion("glGetAttribLocation",3,0);
	return fn(program1,name1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetBooleani_v
#define GL_ALT_FUNDEF_GetBooleani_v
typedef void (*PFNGLGETBOOLEANI_VPROC_ALT)(GLenum,GLuint,GLboolean *);
static inline void glGetBooleani_v(GLenum target1,GLuint index1,GLboolean * data1)
{
	static PFNGLGETBOOLEANI_VPROC_ALT fn=(PFNGLGETBOOLEANI_VPROC_ALT)glaltGetProcAddressVersion("glGetBooleani_v",3,0);
	 fn(target1,index1,data1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_GetBufferParameteriv
#define GL_ALT_FUNDEF_GetBufferParameteriv
typedef void (*PFNGLGETBUFFERPARAMETERIVPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetBufferParameteriv(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETBUFFERPARAMETERIVPROC_ALT fn=(PFNGLGETBUFFERPARAMETERIVPROC_ALT)glaltGetProcAddressVersion("glGetBufferParameteriv",3,0);
	 fn(target1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_GetBufferPointerv
#define GL_ALT_FUNDEF_GetBufferPointerv
typedef void (*PFNGLGETBUFFERPOINTERVPROC_ALT)(GLenum,GLenum,void **);
static inline void glGetBufferPointerv(GLenum target1,GLenum pname1,void ** params1)
{
	static PFNGLGETBUFFERPOINTERVPROC_ALT fn=(PFNGLGETBUFFERPOINTERVPROC_ALT)glaltGetProcAddressVersion("glGetBufferPointerv",3,0);
	 fn(target1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_GetBufferSubData
#define GL_ALT_FUNDEF_GetBufferSubData
typedef void (*PFNGLGETBUFFERSUBDATAPROC_ALT)(GLenum,GLintptr,GLsizeiptr,void *);
static inline void glGetBufferSubData(GLenum target1,GLintptr offset1,GLsizeiptr size1,void * data1)
{
	static PFNGLGETBUFFERSUBDATAPROC_ALT fn=(PFNGLGETBUFFERSUBDATAPROC_ALT)glaltGetProcAddressVersion("glGetBufferSubData",3,0);
	 fn(target1,offset1,size1,data1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_GetCompressedTexImage
#define GL_ALT_FUNDEF_GetCompressedTexImage
typedef void (*PFNGLGETCOMPRESSEDTEXIMAGEPROC_ALT)(GLenum,GLint,void *);
static inline void glGetCompressedTexImage(GLenum target1,GLint level1,void * img1)
{
	static PFNGLGETCOMPRESSEDTEXIMAGEPROC_ALT fn=(PFNGLGETCOMPRESSEDTEXIMAGEPROC_ALT)glaltGetProcAddressVersion("glGetCompressedTexImage",3,0);
	 fn(target1,level1,img1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetFragDataLocation
#define GL_ALT_FUNDEF_GetFragDataLocation
typedef GLint (*PFNGLGETFRAGDATALOCATIONPROC_ALT)(GLuint,const GLchar *);
static inline GLint glGetFragDataLocation(GLuint program1,const GLchar * name1)
{
	static PFNGLGETFRAGDATALOCATIONPROC_ALT fn=(PFNGLGETFRAGDATALOCATIONPROC_ALT)glaltGetProcAddressVersion("glGetFragDataLocation",3,0);
	return fn(program1,name1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetFramebufferAttachmentParameteriv
#define GL_ALT_FUNDEF_GetFramebufferAttachmentParameteriv
typedef void (*PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC_ALT)(GLenum,GLenum,GLenum,GLint *);
static inline void glGetFramebufferAttachmentParameteriv(GLenum target1,GLenum attachment1,GLenum pname1,GLint * params1)
{
	static PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC_ALT fn=(PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC_ALT)glaltGetProcAddressVersion("glGetFramebufferAttachmentParameteriv",3,0);
	 fn(target1,attachment1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetIntegeri_v
#define GL_ALT_FUNDEF_GetIntegeri_v
typedef void (*PFNGLGETINTEGERI_VPROC_ALT)(GLenum,GLuint,GLint *);
static inline void glGetIntegeri_v(GLenum target1,GLuint index1,GLint * data1)
{
	static PFNGLGETINTEGERI_VPROC_ALT fn=(PFNGLGETINTEGERI_VPROC_ALT)glaltGetProcAddressVersion("glGetIntegeri_v",3,0);
	 fn(target1,index1,data1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetProgramInfoLog
#define GL_ALT_FUNDEF_GetProgramInfoLog
typedef void (*PFNGLGETPROGRAMINFOLOGPROC_ALT)(GLuint,GLsizei,GLsizei *,GLchar *);
static inline void glGetProgramInfoLog(GLuint program1,GLsizei bufSize1,GLsizei * length1,GLchar * infoLog1)
{
	static PFNGLGETPROGRAMINFOLOGPROC_ALT fn=(PFNGLGETPROGRAMINFOLOGPROC_ALT)glaltGetProcAddressVersion("glGetProgramInfoLog",3,0);
	 fn(program1,bufSize1,length1,infoLog1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetProgramiv
#define GL_ALT_FUNDEF_GetProgramiv
typedef void (*PFNGLGETPROGRAMIVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetProgramiv(GLuint program1,GLenum pname1,GLint * params1)
{
	static PFNGLGETPROGRAMIVPROC_ALT fn=(PFNGLGETPROGRAMIVPROC_ALT)glaltGetProcAddressVersion("glGetProgramiv",3,0);
	 fn(program1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_GetQueryObjectiv
#define GL_ALT_FUNDEF_GetQueryObjectiv
typedef void (*PFNGLGETQUERYOBJECTIVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetQueryObjectiv(GLuint id1,GLenum pname1,GLint * params1)
{
	static PFNGLGETQUERYOBJECTIVPROC_ALT fn=(PFNGLGETQUERYOBJECTIVPROC_ALT)glaltGetProcAddressVersion("glGetQueryObjectiv",3,0);
	 fn(id1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_GetQueryObjectuiv
#define GL_ALT_FUNDEF_GetQueryObjectuiv
typedef void (*PFNGLGETQUERYOBJECTUIVPROC_ALT)(GLuint,GLenum,GLuint *);
static inline void glGetQueryObjectuiv(GLuint id1,GLenum pname1,GLuint * params1)
{
	static PFNGLGETQUERYOBJECTUIVPROC_ALT fn=(PFNGLGETQUERYOBJECTUIVPROC_ALT)glaltGetProcAddressVersion("glGetQueryObjectuiv",3,0);
	 fn(id1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_GetQueryiv
#define GL_ALT_FUNDEF_GetQueryiv
typedef void (*PFNGLGETQUERYIVPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetQueryiv(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETQUERYIVPROC_ALT fn=(PFNGLGETQUERYIVPROC_ALT)glaltGetProcAddressVersion("glGetQueryiv",3,0);
	 fn(target1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetRenderbufferParameteriv
#define GL_ALT_FUNDEF_GetRenderbufferParameteriv
typedef void (*PFNGLGETRENDERBUFFERPARAMETERIVPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetRenderbufferParameteriv(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETRENDERBUFFERPARAMETERIVPROC_ALT fn=(PFNGLGETRENDERBUFFERPARAMETERIVPROC_ALT)glaltGetProcAddressVersion("glGetRenderbufferParameteriv",3,0);
	 fn(target1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetShaderInfoLog
#define GL_ALT_FUNDEF_GetShaderInfoLog
typedef void (*PFNGLGETSHADERINFOLOGPROC_ALT)(GLuint,GLsizei,GLsizei *,GLchar *);
static inline void glGetShaderInfoLog(GLuint shader1,GLsizei bufSize1,GLsizei * length1,GLchar * infoLog1)
{
	static PFNGLGETSHADERINFOLOGPROC_ALT fn=(PFNGLGETSHADERINFOLOGPROC_ALT)glaltGetProcAddressVersion("glGetShaderInfoLog",3,0);
	 fn(shader1,bufSize1,length1,infoLog1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetShaderSource
#define GL_ALT_FUNDEF_GetShaderSource
typedef void (*PFNGLGETSHADERSOURCEPROC_ALT)(GLuint,GLsizei,GLsizei *,GLchar *);
static inline void glGetShaderSource(GLuint shader1,GLsizei bufSize1,GLsizei * length1,GLchar * source1)
{
	static PFNGLGETSHADERSOURCEPROC_ALT fn=(PFNGLGETSHADERSOURCEPROC_ALT)glaltGetProcAddressVersion("glGetShaderSource",3,0);
	 fn(shader1,bufSize1,length1,source1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetShaderiv
#define GL_ALT_FUNDEF_GetShaderiv
typedef void (*PFNGLGETSHADERIVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetShaderiv(GLuint shader1,GLenum pname1,GLint * params1)
{
	static PFNGLGETSHADERIVPROC_ALT fn=(PFNGLGETSHADERIVPROC_ALT)glaltGetProcAddressVersion("glGetShaderiv",3,0);
	 fn(shader1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetStringi
#define GL_ALT_FUNDEF_GetStringi
typedef const GLubyte * (*PFNGLGETSTRINGIPROC_ALT)(GLenum,GLuint);
static inline const GLubyte * glGetStringi(GLenum name1,GLuint index1)
{
	static PFNGLGETSTRINGIPROC_ALT fn=(PFNGLGETSTRINGIPROC_ALT)glaltGetProcAddressVersion("glGetStringi",3,0);
	return fn(name1,index1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetTexParameterIiv
#define GL_ALT_FUNDEF_GetTexParameterIiv
typedef void (*PFNGLGETTEXPARAMETERIIVPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetTexParameterIiv(GLenum target1,GLenum pname1,GLint * params1)
{
	static PFNGLGETTEXPARAMETERIIVPROC_ALT fn=(PFNGLGETTEXPARAMETERIIVPROC_ALT)glaltGetProcAddressVersion("glGetTexParameterIiv",3,0);
	 fn(target1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetTexParameterIuiv
#define GL_ALT_FUNDEF_GetTexParameterIuiv
typedef void (*PFNGLGETTEXPARAMETERIUIVPROC_ALT)(GLenum,GLenum,GLuint *);
static inline void glGetTexParameterIuiv(GLenum target1,GLenum pname1,GLuint * params1)
{
	static PFNGLGETTEXPARAMETERIUIVPROC_ALT fn=(PFNGLGETTEXPARAMETERIUIVPROC_ALT)glaltGetProcAddressVersion("glGetTexParameterIuiv",3,0);
	 fn(target1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetTransformFeedbackVarying
#define GL_ALT_FUNDEF_GetTransformFeedbackVarying
typedef void (*PFNGLGETTRANSFORMFEEDBACKVARYINGPROC_ALT)(GLuint,GLuint,GLsizei,GLsizei *,GLsizei *,GLenum *,GLchar *);
static inline void glGetTransformFeedbackVarying(GLuint program1,GLuint index1,GLsizei bufSize1,GLsizei * length1,GLsizei * size1,GLenum * type1,GLchar * name1)
{
	static PFNGLGETTRANSFORMFEEDBACKVARYINGPROC_ALT fn=(PFNGLGETTRANSFORMFEEDBACKVARYINGPROC_ALT)glaltGetProcAddressVersion("glGetTransformFeedbackVarying",3,0);
	 fn(program1,index1,bufSize1,length1,size1,type1,name1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetUniformLocation
#define GL_ALT_FUNDEF_GetUniformLocation
typedef GLint (*PFNGLGETUNIFORMLOCATIONPROC_ALT)(GLuint,const GLchar *);
static inline GLint glGetUniformLocation(GLuint program1,const GLchar * name1)
{
	static PFNGLGETUNIFORMLOCATIONPROC_ALT fn=(PFNGLGETUNIFORMLOCATIONPROC_ALT)glaltGetProcAddressVersion("glGetUniformLocation",3,0);
	return fn(program1,name1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetUniformfv
#define GL_ALT_FUNDEF_GetUniformfv
typedef void (*PFNGLGETUNIFORMFVPROC_ALT)(GLuint,GLint,GLfloat *);
static inline void glGetUniformfv(GLuint program1,GLint location1,GLfloat * params1)
{
	static PFNGLGETUNIFORMFVPROC_ALT fn=(PFNGLGETUNIFORMFVPROC_ALT)glaltGetProcAddressVersion("glGetUniformfv",3,0);
	 fn(program1,location1,params1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetUniformiv
#define GL_ALT_FUNDEF_GetUniformiv
typedef void (*PFNGLGETUNIFORMIVPROC_ALT)(GLuint,GLint,GLint *);
static inline void glGetUniformiv(GLuint program1,GLint location1,GLint * params1)
{
	static PFNGLGETUNIFORMIVPROC_ALT fn=(PFNGLGETUNIFORMIVPROC_ALT)glaltGetProcAddressVersion("glGetUniformiv",3,0);
	 fn(program1,location1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetUniformuiv
#define GL_ALT_FUNDEF_GetUniformuiv
typedef void (*PFNGLGETUNIFORMUIVPROC_ALT)(GLuint,GLint,GLuint *);
static inline void glGetUniformuiv(GLuint program1,GLint location1,GLuint * params1)
{
	static PFNGLGETUNIFORMUIVPROC_ALT fn=(PFNGLGETUNIFORMUIVPROC_ALT)glaltGetProcAddressVersion("glGetUniformuiv",3,0);
	 fn(program1,location1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetVertexAttribIiv
#define GL_ALT_FUNDEF_GetVertexAttribIiv
typedef void (*PFNGLGETVERTEXATTRIBIIVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetVertexAttribIiv(GLuint index1,GLenum pname1,GLint * params1)
{
	static PFNGLGETVERTEXATTRIBIIVPROC_ALT fn=(PFNGLGETVERTEXATTRIBIIVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribIiv",3,0);
	 fn(index1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetVertexAttribIuiv
#define GL_ALT_FUNDEF_GetVertexAttribIuiv
typedef void (*PFNGLGETVERTEXATTRIBIUIVPROC_ALT)(GLuint,GLenum,GLuint *);
static inline void glGetVertexAttribIuiv(GLuint index1,GLenum pname1,GLuint * params1)
{
	static PFNGLGETVERTEXATTRIBIUIVPROC_ALT fn=(PFNGLGETVERTEXATTRIBIUIVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribIuiv",3,0);
	 fn(index1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetVertexAttribPointerv
#define GL_ALT_FUNDEF_GetVertexAttribPointerv
typedef void (*PFNGLGETVERTEXATTRIBPOINTERVPROC_ALT)(GLuint,GLenum,void **);
static inline void glGetVertexAttribPointerv(GLuint index1,GLenum pname1,void ** pointer1)
{
	static PFNGLGETVERTEXATTRIBPOINTERVPROC_ALT fn=(PFNGLGETVERTEXATTRIBPOINTERVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribPointerv",3,0);
	 fn(index1,pname1,pointer1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetVertexAttribdv
#define GL_ALT_FUNDEF_GetVertexAttribdv
typedef void (*PFNGLGETVERTEXATTRIBDVPROC_ALT)(GLuint,GLenum,GLdouble *);
static inline void glGetVertexAttribdv(GLuint index1,GLenum pname1,GLdouble * params1)
{
	static PFNGLGETVERTEXATTRIBDVPROC_ALT fn=(PFNGLGETVERTEXATTRIBDVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribdv",3,0);
	 fn(index1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetVertexAttribfv
#define GL_ALT_FUNDEF_GetVertexAttribfv
typedef void (*PFNGLGETVERTEXATTRIBFVPROC_ALT)(GLuint,GLenum,GLfloat *);
static inline void glGetVertexAttribfv(GLuint index1,GLenum pname1,GLfloat * params1)
{
	static PFNGLGETVERTEXATTRIBFVPROC_ALT fn=(PFNGLGETVERTEXATTRIBFVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribfv",3,0);
	 fn(index1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetVertexAttribiv
#define GL_ALT_FUNDEF_GetVertexAttribiv
typedef void (*PFNGLGETVERTEXATTRIBIVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetVertexAttribiv(GLuint index1,GLenum pname1,GLint * params1)
{
	static PFNGLGETVERTEXATTRIBIVPROC_ALT fn=(PFNGLGETVERTEXATTRIBIVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribiv",3,0);
	 fn(index1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_IsBuffer
#define GL_ALT_FUNDEF_IsBuffer
typedef GLboolean (*PFNGLISBUFFERPROC_ALT)(GLuint);
static inline GLboolean glIsBuffer(GLuint buffer1)
{
	static PFNGLISBUFFERPROC_ALT fn=(PFNGLISBUFFERPROC_ALT)glaltGetProcAddressVersion("glIsBuffer",3,0);
	return fn(buffer1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_IsEnabledi
#define GL_ALT_FUNDEF_IsEnabledi
typedef GLboolean (*PFNGLISENABLEDIPROC_ALT)(GLenum,GLuint);
static inline GLboolean glIsEnabledi(GLenum target1,GLuint index1)
{
	static PFNGLISENABLEDIPROC_ALT fn=(PFNGLISENABLEDIPROC_ALT)glaltGetProcAddressVersion("glIsEnabledi",3,0);
	return fn(target1,index1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_IsFramebuffer
#define GL_ALT_FUNDEF_IsFramebuffer
typedef GLboolean (*PFNGLISFRAMEBUFFERPROC_ALT)(GLuint);
static inline GLboolean glIsFramebuffer(GLuint framebuffer1)
{
	static PFNGLISFRAMEBUFFERPROC_ALT fn=(PFNGLISFRAMEBUFFERPROC_ALT)glaltGetProcAddressVersion("glIsFramebuffer",3,0);
	return fn(framebuffer1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_IsProgram
#define GL_ALT_FUNDEF_IsProgram
typedef GLboolean (*PFNGLISPROGRAMPROC_ALT)(GLuint);
static inline GLboolean glIsProgram(GLuint program1)
{
	static PFNGLISPROGRAMPROC_ALT fn=(PFNGLISPROGRAMPROC_ALT)glaltGetProcAddressVersion("glIsProgram",3,0);
	return fn(program1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_IsQuery
#define GL_ALT_FUNDEF_IsQuery
typedef GLboolean (*PFNGLISQUERYPROC_ALT)(GLuint);
static inline GLboolean glIsQuery(GLuint id1)
{
	static PFNGLISQUERYPROC_ALT fn=(PFNGLISQUERYPROC_ALT)glaltGetProcAddressVersion("glIsQuery",3,0);
	return fn(id1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_IsRenderbuffer
#define GL_ALT_FUNDEF_IsRenderbuffer
typedef GLboolean (*PFNGLISRENDERBUFFERPROC_ALT)(GLuint);
static inline GLboolean glIsRenderbuffer(GLuint renderbuffer1)
{
	static PFNGLISRENDERBUFFERPROC_ALT fn=(PFNGLISRENDERBUFFERPROC_ALT)glaltGetProcAddressVersion("glIsRenderbuffer",3,0);
	return fn(renderbuffer1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_IsShader
#define GL_ALT_FUNDEF_IsShader
typedef GLboolean (*PFNGLISSHADERPROC_ALT)(GLuint);
static inline GLboolean glIsShader(GLuint shader1)
{
	static PFNGLISSHADERPROC_ALT fn=(PFNGLISSHADERPROC_ALT)glaltGetProcAddressVersion("glIsShader",3,0);
	return fn(shader1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_IsVertexArray
#define GL_ALT_FUNDEF_IsVertexArray
typedef GLboolean (*PFNGLISVERTEXARRAYPROC_ALT)(GLuint);
static inline GLboolean glIsVertexArray(GLuint array1)
{
	static PFNGLISVERTEXARRAYPROC_ALT fn=(PFNGLISVERTEXARRAYPROC_ALT)glaltGetProcAddressVersion("glIsVertexArray",3,0);
	return fn(array1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_LinkProgram
#define GL_ALT_FUNDEF_LinkProgram
typedef void (*PFNGLLINKPROGRAMPROC_ALT)(GLuint);
static inline void glLinkProgram(GLuint program1)
{
	static PFNGLLINKPROGRAMPROC_ALT fn=(PFNGLLINKPROGRAMPROC_ALT)glaltGetProcAddressVersion("glLinkProgram",3,0);
	 fn(program1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_LoadTransposeMatrixd
#define GL_ALT_FUNDEF_LoadTransposeMatrixd
typedef void (*PFNGLLOADTRANSPOSEMATRIXDPROC_ALT)(const GLdouble *);
static inline void glLoadTransposeMatrixd(const GLdouble * m1)
{
	static PFNGLLOADTRANSPOSEMATRIXDPROC_ALT fn=(PFNGLLOADTRANSPOSEMATRIXDPROC_ALT)glaltGetProcAddressVersion("glLoadTransposeMatrixd",3,0);
	 fn(m1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_LoadTransposeMatrixf
#define GL_ALT_FUNDEF_LoadTransposeMatrixf
typedef void (*PFNGLLOADTRANSPOSEMATRIXFPROC_ALT)(const GLfloat *);
static inline void glLoadTransposeMatrixf(const GLfloat * m1)
{
	static PFNGLLOADTRANSPOSEMATRIXFPROC_ALT fn=(PFNGLLOADTRANSPOSEMATRIXFPROC_ALT)glaltGetProcAddressVersion("glLoadTransposeMatrixf",3,0);
	 fn(m1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_MapBuffer
#define GL_ALT_FUNDEF_MapBuffer
typedef void * (*PFNGLMAPBUFFERPROC_ALT)(GLenum,GLenum);
static inline void * glMapBuffer(GLenum target1,GLenum access1)
{
	static PFNGLMAPBUFFERPROC_ALT fn=(PFNGLMAPBUFFERPROC_ALT)glaltGetProcAddressVersion("glMapBuffer",3,0);
	return fn(target1,access1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_MapBufferRange
#define GL_ALT_FUNDEF_MapBufferRange
typedef void * (*PFNGLMAPBUFFERRANGEPROC_ALT)(GLenum,GLintptr,GLsizeiptr,GLbitfield);
static inline void * glMapBufferRange(GLenum target1,GLintptr offset1,GLsizeiptr length1,GLbitfield access1)
{
	static PFNGLMAPBUFFERRANGEPROC_ALT fn=(PFNGLMAPBUFFERRANGEPROC_ALT)glaltGetProcAddressVersion("glMapBufferRange",3,0);
	return fn(target1,offset1,length1,access1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultTransposeMatrixd
#define GL_ALT_FUNDEF_MultTransposeMatrixd
typedef void (*PFNGLMULTTRANSPOSEMATRIXDPROC_ALT)(const GLdouble *);
static inline void glMultTransposeMatrixd(const GLdouble * m1)
{
	static PFNGLMULTTRANSPOSEMATRIXDPROC_ALT fn=(PFNGLMULTTRANSPOSEMATRIXDPROC_ALT)glaltGetProcAddressVersion("glMultTransposeMatrixd",3,0);
	 fn(m1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultTransposeMatrixf
#define GL_ALT_FUNDEF_MultTransposeMatrixf
typedef void (*PFNGLMULTTRANSPOSEMATRIXFPROC_ALT)(const GLfloat *);
static inline void glMultTransposeMatrixf(const GLfloat * m1)
{
	static PFNGLMULTTRANSPOSEMATRIXFPROC_ALT fn=(PFNGLMULTTRANSPOSEMATRIXFPROC_ALT)glaltGetProcAddressVersion("glMultTransposeMatrixf",3,0);
	 fn(m1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_MultiDrawArrays
#define GL_ALT_FUNDEF_MultiDrawArrays
typedef void (*PFNGLMULTIDRAWARRAYSPROC_ALT)(GLenum,const GLint *,const GLsizei *,GLsizei);
static inline void glMultiDrawArrays(GLenum mode1,const GLint * first1,const GLsizei * count1,GLsizei drawcount1)
{
	static PFNGLMULTIDRAWARRAYSPROC_ALT fn=(PFNGLMULTIDRAWARRAYSPROC_ALT)glaltGetProcAddressVersion("glMultiDrawArrays",3,0);
	 fn(mode1,first1,count1,drawcount1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_MultiDrawElements
#define GL_ALT_FUNDEF_MultiDrawElements
typedef void (*PFNGLMULTIDRAWELEMENTSPROC_ALT)(GLenum,const GLsizei *,GLenum,const void *const*,GLsizei);
static inline void glMultiDrawElements(GLenum mode1,const GLsizei * count1,GLenum type1,const void *const* indices1,GLsizei drawcount1)
{
	static PFNGLMULTIDRAWELEMENTSPROC_ALT fn=(PFNGLMULTIDRAWELEMENTSPROC_ALT)glaltGetProcAddressVersion("glMultiDrawElements",3,0);
	 fn(mode1,count1,type1,indices1,drawcount1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord1d
#define GL_ALT_FUNDEF_MultiTexCoord1d
typedef void (*PFNGLMULTITEXCOORD1DPROC_ALT)(GLenum,GLdouble);
static inline void glMultiTexCoord1d(GLenum target1,GLdouble s1)
{
	static PFNGLMULTITEXCOORD1DPROC_ALT fn=(PFNGLMULTITEXCOORD1DPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord1d",3,0);
	 fn(target1,s1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord1dv
#define GL_ALT_FUNDEF_MultiTexCoord1dv
typedef void (*PFNGLMULTITEXCOORD1DVPROC_ALT)(GLenum,const GLdouble *);
static inline void glMultiTexCoord1dv(GLenum target1,const GLdouble * v1)
{
	static PFNGLMULTITEXCOORD1DVPROC_ALT fn=(PFNGLMULTITEXCOORD1DVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord1dv",3,0);
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord1f
#define GL_ALT_FUNDEF_MultiTexCoord1f
typedef void (*PFNGLMULTITEXCOORD1FPROC_ALT)(GLenum,GLfloat);
static inline void glMultiTexCoord1f(GLenum target1,GLfloat s1)
{
	static PFNGLMULTITEXCOORD1FPROC_ALT fn=(PFNGLMULTITEXCOORD1FPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord1f",3,0);
	 fn(target1,s1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord1fv
#define GL_ALT_FUNDEF_MultiTexCoord1fv
typedef void (*PFNGLMULTITEXCOORD1FVPROC_ALT)(GLenum,const GLfloat *);
static inline void glMultiTexCoord1fv(GLenum target1,const GLfloat * v1)
{
	static PFNGLMULTITEXCOORD1FVPROC_ALT fn=(PFNGLMULTITEXCOORD1FVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord1fv",3,0);
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord1i
#define GL_ALT_FUNDEF_MultiTexCoord1i
typedef void (*PFNGLMULTITEXCOORD1IPROC_ALT)(GLenum,GLint);
static inline void glMultiTexCoord1i(GLenum target1,GLint s1)
{
	static PFNGLMULTITEXCOORD1IPROC_ALT fn=(PFNGLMULTITEXCOORD1IPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord1i",3,0);
	 fn(target1,s1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord1iv
#define GL_ALT_FUNDEF_MultiTexCoord1iv
typedef void (*PFNGLMULTITEXCOORD1IVPROC_ALT)(GLenum,const GLint *);
static inline void glMultiTexCoord1iv(GLenum target1,const GLint * v1)
{
	static PFNGLMULTITEXCOORD1IVPROC_ALT fn=(PFNGLMULTITEXCOORD1IVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord1iv",3,0);
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord1s
#define GL_ALT_FUNDEF_MultiTexCoord1s
typedef void (*PFNGLMULTITEXCOORD1SPROC_ALT)(GLenum,GLshort);
static inline void glMultiTexCoord1s(GLenum target1,GLshort s1)
{
	static PFNGLMULTITEXCOORD1SPROC_ALT fn=(PFNGLMULTITEXCOORD1SPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord1s",3,0);
	 fn(target1,s1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord1sv
#define GL_ALT_FUNDEF_MultiTexCoord1sv
typedef void (*PFNGLMULTITEXCOORD1SVPROC_ALT)(GLenum,const GLshort *);
static inline void glMultiTexCoord1sv(GLenum target1,const GLshort * v1)
{
	static PFNGLMULTITEXCOORD1SVPROC_ALT fn=(PFNGLMULTITEXCOORD1SVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord1sv",3,0);
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord2d
#define GL_ALT_FUNDEF_MultiTexCoord2d
typedef void (*PFNGLMULTITEXCOORD2DPROC_ALT)(GLenum,GLdouble,GLdouble);
static inline void glMultiTexCoord2d(GLenum target1,GLdouble s1,GLdouble t1)
{
	static PFNGLMULTITEXCOORD2DPROC_ALT fn=(PFNGLMULTITEXCOORD2DPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord2d",3,0);
	 fn(target1,s1,t1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord2dv
#define GL_ALT_FUNDEF_MultiTexCoord2dv
typedef void (*PFNGLMULTITEXCOORD2DVPROC_ALT)(GLenum,const GLdouble *);
static inline void glMultiTexCoord2dv(GLenum target1,const GLdouble * v1)
{
	static PFNGLMULTITEXCOORD2DVPROC_ALT fn=(PFNGLMULTITEXCOORD2DVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord2dv",3,0);
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord2f
#define GL_ALT_FUNDEF_MultiTexCoord2f
typedef void (*PFNGLMULTITEXCOORD2FPROC_ALT)(GLenum,GLfloat,GLfloat);
static inline void glMultiTexCoord2f(GLenum target1,GLfloat s1,GLfloat t1)
{
	static PFNGLMULTITEXCOORD2FPROC_ALT fn=(PFNGLMULTITEXCOORD2FPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord2f",3,0);
	 fn(target1,s1,t1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord2fv
#define GL_ALT_FUNDEF_MultiTexCoord2fv
typedef void (*PFNGLMULTITEXCOORD2FVPROC_ALT)(GLenum,const GLfloat *);
static inline void glMultiTexCoord2fv(GLenum target1,const GLfloat * v1)
{
	static PFNGLMULTITEXCOORD2FVPROC_ALT fn=(PFNGLMULTITEXCOORD2FVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord2fv",3,0);
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord2i
#define GL_ALT_FUNDEF_MultiTexCoord2i
typedef void (*PFNGLMULTITEXCOORD2IPROC_ALT)(GLenum,GLint,GLint);
static inline void glMultiTexCoord2i(GLenum target1,GLint s1,GLint t1)
{
	static PFNGLMULTITEXCOORD2IPROC_ALT fn=(PFNGLMULTITEXCOORD2IPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord2i",3,0);
	 fn(target1,s1,t1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord2iv
#define GL_ALT_FUNDEF_MultiTexCoord2iv
typedef void (*PFNGLMULTITEXCOORD2IVPROC_ALT)(GLenum,const GLint *);
static inline void glMultiTexCoord2iv(GLenum target1,const GLint * v1)
{
	static PFNGLMULTITEXCOORD2IVPROC_ALT fn=(PFNGLMULTITEXCOORD2IVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord2iv",3,0);
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord2s
#define GL_ALT_FUNDEF_MultiTexCoord2s
typedef void (*PFNGLMULTITEXCOORD2SPROC_ALT)(GLenum,GLshort,GLshort);
static inline void glMultiTexCoord2s(GLenum target1,GLshort s1,GLshort t1)
{
	static PFNGLMULTITEXCOORD2SPROC_ALT fn=(PFNGLMULTITEXCOORD2SPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord2s",3,0);
	 fn(target1,s1,t1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord2sv
#define GL_ALT_FUNDEF_MultiTexCoord2sv
typedef void (*PFNGLMULTITEXCOORD2SVPROC_ALT)(GLenum,const GLshort *);
static inline void glMultiTexCoord2sv(GLenum target1,const GLshort * v1)
{
	static PFNGLMULTITEXCOORD2SVPROC_ALT fn=(PFNGLMULTITEXCOORD2SVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord2sv",3,0);
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord3d
#define GL_ALT_FUNDEF_MultiTexCoord3d
typedef void (*PFNGLMULTITEXCOORD3DPROC_ALT)(GLenum,GLdouble,GLdouble,GLdouble);
static inline void glMultiTexCoord3d(GLenum target1,GLdouble s1,GLdouble t1,GLdouble r1)
{
	static PFNGLMULTITEXCOORD3DPROC_ALT fn=(PFNGLMULTITEXCOORD3DPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord3d",3,0);
	 fn(target1,s1,t1,r1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord3dv
#define GL_ALT_FUNDEF_MultiTexCoord3dv
typedef void (*PFNGLMULTITEXCOORD3DVPROC_ALT)(GLenum,const GLdouble *);
static inline void glMultiTexCoord3dv(GLenum target1,const GLdouble * v1)
{
	static PFNGLMULTITEXCOORD3DVPROC_ALT fn=(PFNGLMULTITEXCOORD3DVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord3dv",3,0);
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord3f
#define GL_ALT_FUNDEF_MultiTexCoord3f
typedef void (*PFNGLMULTITEXCOORD3FPROC_ALT)(GLenum,GLfloat,GLfloat,GLfloat);
static inline void glMultiTexCoord3f(GLenum target1,GLfloat s1,GLfloat t1,GLfloat r1)
{
	static PFNGLMULTITEXCOORD3FPROC_ALT fn=(PFNGLMULTITEXCOORD3FPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord3f",3,0);
	 fn(target1,s1,t1,r1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord3fv
#define GL_ALT_FUNDEF_MultiTexCoord3fv
typedef void (*PFNGLMULTITEXCOORD3FVPROC_ALT)(GLenum,const GLfloat *);
static inline void glMultiTexCoord3fv(GLenum target1,const GLfloat * v1)
{
	static PFNGLMULTITEXCOORD3FVPROC_ALT fn=(PFNGLMULTITEXCOORD3FVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord3fv",3,0);
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord3i
#define GL_ALT_FUNDEF_MultiTexCoord3i
typedef void (*PFNGLMULTITEXCOORD3IPROC_ALT)(GLenum,GLint,GLint,GLint);
static inline void glMultiTexCoord3i(GLenum target1,GLint s1,GLint t1,GLint r1)
{
	static PFNGLMULTITEXCOORD3IPROC_ALT fn=(PFNGLMULTITEXCOORD3IPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord3i",3,0);
	 fn(target1,s1,t1,r1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord3iv
#define GL_ALT_FUNDEF_MultiTexCoord3iv
typedef void (*PFNGLMULTITEXCOORD3IVPROC_ALT)(GLenum,const GLint *);
static inline void glMultiTexCoord3iv(GLenum target1,const GLint * v1)
{
	static PFNGLMULTITEXCOORD3IVPROC_ALT fn=(PFNGLMULTITEXCOORD3IVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord3iv",3,0);
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord3s
#define GL_ALT_FUNDEF_MultiTexCoord3s
typedef void (*PFNGLMULTITEXCOORD3SPROC_ALT)(GLenum,GLshort,GLshort,GLshort);
static inline void glMultiTexCoord3s(GLenum target1,GLshort s1,GLshort t1,GLshort r1)
{
	static PFNGLMULTITEXCOORD3SPROC_ALT fn=(PFNGLMULTITEXCOORD3SPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord3s",3,0);
	 fn(target1,s1,t1,r1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord3sv
#define GL_ALT_FUNDEF_MultiTexCoord3sv
typedef void (*PFNGLMULTITEXCOORD3SVPROC_ALT)(GLenum,const GLshort *);
static inline void glMultiTexCoord3sv(GLenum target1,const GLshort * v1)
{
	static PFNGLMULTITEXCOORD3SVPROC_ALT fn=(PFNGLMULTITEXCOORD3SVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord3sv",3,0);
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord4d
#define GL_ALT_FUNDEF_MultiTexCoord4d
typedef void (*PFNGLMULTITEXCOORD4DPROC_ALT)(GLenum,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void glMultiTexCoord4d(GLenum target1,GLdouble s1,GLdouble t1,GLdouble r1,GLdouble q1)
{
	static PFNGLMULTITEXCOORD4DPROC_ALT fn=(PFNGLMULTITEXCOORD4DPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord4d",3,0);
	 fn(target1,s1,t1,r1,q1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord4dv
#define GL_ALT_FUNDEF_MultiTexCoord4dv
typedef void (*PFNGLMULTITEXCOORD4DVPROC_ALT)(GLenum,const GLdouble *);
static inline void glMultiTexCoord4dv(GLenum target1,const GLdouble * v1)
{
	static PFNGLMULTITEXCOORD4DVPROC_ALT fn=(PFNGLMULTITEXCOORD4DVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord4dv",3,0);
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord4f
#define GL_ALT_FUNDEF_MultiTexCoord4f
typedef void (*PFNGLMULTITEXCOORD4FPROC_ALT)(GLenum,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glMultiTexCoord4f(GLenum target1,GLfloat s1,GLfloat t1,GLfloat r1,GLfloat q1)
{
	static PFNGLMULTITEXCOORD4FPROC_ALT fn=(PFNGLMULTITEXCOORD4FPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord4f",3,0);
	 fn(target1,s1,t1,r1,q1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord4fv
#define GL_ALT_FUNDEF_MultiTexCoord4fv
typedef void (*PFNGLMULTITEXCOORD4FVPROC_ALT)(GLenum,const GLfloat *);
static inline void glMultiTexCoord4fv(GLenum target1,const GLfloat * v1)
{
	static PFNGLMULTITEXCOORD4FVPROC_ALT fn=(PFNGLMULTITEXCOORD4FVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord4fv",3,0);
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord4i
#define GL_ALT_FUNDEF_MultiTexCoord4i
typedef void (*PFNGLMULTITEXCOORD4IPROC_ALT)(GLenum,GLint,GLint,GLint,GLint);
static inline void glMultiTexCoord4i(GLenum target1,GLint s1,GLint t1,GLint r1,GLint q1)
{
	static PFNGLMULTITEXCOORD4IPROC_ALT fn=(PFNGLMULTITEXCOORD4IPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord4i",3,0);
	 fn(target1,s1,t1,r1,q1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord4iv
#define GL_ALT_FUNDEF_MultiTexCoord4iv
typedef void (*PFNGLMULTITEXCOORD4IVPROC_ALT)(GLenum,const GLint *);
static inline void glMultiTexCoord4iv(GLenum target1,const GLint * v1)
{
	static PFNGLMULTITEXCOORD4IVPROC_ALT fn=(PFNGLMULTITEXCOORD4IVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord4iv",3,0);
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord4s
#define GL_ALT_FUNDEF_MultiTexCoord4s
typedef void (*PFNGLMULTITEXCOORD4SPROC_ALT)(GLenum,GLshort,GLshort,GLshort,GLshort);
static inline void glMultiTexCoord4s(GLenum target1,GLshort s1,GLshort t1,GLshort r1,GLshort q1)
{
	static PFNGLMULTITEXCOORD4SPROC_ALT fn=(PFNGLMULTITEXCOORD4SPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord4s",3,0);
	 fn(target1,s1,t1,r1,q1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord4sv
#define GL_ALT_FUNDEF_MultiTexCoord4sv
typedef void (*PFNGLMULTITEXCOORD4SVPROC_ALT)(GLenum,const GLshort *);
static inline void glMultiTexCoord4sv(GLenum target1,const GLshort * v1)
{
	static PFNGLMULTITEXCOORD4SVPROC_ALT fn=(PFNGLMULTITEXCOORD4SVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord4sv",3,0);
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_PointParameterf
#define GL_ALT_FUNDEF_PointParameterf
typedef void (*PFNGLPOINTPARAMETERFPROC_ALT)(GLenum,GLfloat);
static inline void glPointParameterf(GLenum pname1,GLfloat param1)
{
	static PFNGLPOINTPARAMETERFPROC_ALT fn=(PFNGLPOINTPARAMETERFPROC_ALT)glaltGetProcAddressVersion("glPointParameterf",3,0);
	 fn(pname1,param1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_PointParameterfv
#define GL_ALT_FUNDEF_PointParameterfv
typedef void (*PFNGLPOINTPARAMETERFVPROC_ALT)(GLenum,const GLfloat *);
static inline void glPointParameterfv(GLenum pname1,const GLfloat * params1)
{
	static PFNGLPOINTPARAMETERFVPROC_ALT fn=(PFNGLPOINTPARAMETERFVPROC_ALT)glaltGetProcAddressVersion("glPointParameterfv",3,0);
	 fn(pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_PointParameteri
#define GL_ALT_FUNDEF_PointParameteri
typedef void (*PFNGLPOINTPARAMETERIPROC_ALT)(GLenum,GLint);
static inline void glPointParameteri(GLenum pname1,GLint param1)
{
	static PFNGLPOINTPARAMETERIPROC_ALT fn=(PFNGLPOINTPARAMETERIPROC_ALT)glaltGetProcAddressVersion("glPointParameteri",3,0);
	 fn(pname1,param1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_PointParameteriv
#define GL_ALT_FUNDEF_PointParameteriv
typedef void (*PFNGLPOINTPARAMETERIVPROC_ALT)(GLenum,const GLint *);
static inline void glPointParameteriv(GLenum pname1,const GLint * params1)
{
	static PFNGLPOINTPARAMETERIVPROC_ALT fn=(PFNGLPOINTPARAMETERIVPROC_ALT)glaltGetProcAddressVersion("glPointParameteriv",3,0);
	 fn(pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_RenderbufferStorage
#define GL_ALT_FUNDEF_RenderbufferStorage
typedef void (*PFNGLRENDERBUFFERSTORAGEPROC_ALT)(GLenum,GLenum,GLsizei,GLsizei);
static inline void glRenderbufferStorage(GLenum target1,GLenum internalformat1,GLsizei width1,GLsizei height1)
{
	static PFNGLRENDERBUFFERSTORAGEPROC_ALT fn=(PFNGLRENDERBUFFERSTORAGEPROC_ALT)glaltGetProcAddressVersion("glRenderbufferStorage",3,0);
	 fn(target1,internalformat1,width1,height1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_RenderbufferStorageMultisample
#define GL_ALT_FUNDEF_RenderbufferStorageMultisample
typedef void (*PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC_ALT)(GLenum,GLsizei,GLenum,GLsizei,GLsizei);
static inline void glRenderbufferStorageMultisample(GLenum target1,GLsizei samples1,GLenum internalformat1,GLsizei width1,GLsizei height1)
{
	static PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC_ALT fn=(PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC_ALT)glaltGetProcAddressVersion("glRenderbufferStorageMultisample",3,0);
	 fn(target1,samples1,internalformat1,width1,height1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_SampleCoverage
#define GL_ALT_FUNDEF_SampleCoverage
typedef void (*PFNGLSAMPLECOVERAGEPROC_ALT)(GLfloat,GLboolean);
static inline void glSampleCoverage(GLfloat value1,GLboolean invert1)
{
	static PFNGLSAMPLECOVERAGEPROC_ALT fn=(PFNGLSAMPLECOVERAGEPROC_ALT)glaltGetProcAddressVersion("glSampleCoverage",3,0);
	 fn(value1,invert1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_SecondaryColor3b
#define GL_ALT_FUNDEF_SecondaryColor3b
typedef void (*PFNGLSECONDARYCOLOR3BPROC_ALT)(GLbyte,GLbyte,GLbyte);
static inline void glSecondaryColor3b(GLbyte red1,GLbyte green1,GLbyte blue1)
{
	static PFNGLSECONDARYCOLOR3BPROC_ALT fn=(PFNGLSECONDARYCOLOR3BPROC_ALT)glaltGetProcAddressVersion("glSecondaryColor3b",3,0);
	 fn(red1,green1,blue1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_SecondaryColor3bv
#define GL_ALT_FUNDEF_SecondaryColor3bv
typedef void (*PFNGLSECONDARYCOLOR3BVPROC_ALT)(const GLbyte *);
static inline void glSecondaryColor3bv(const GLbyte * v1)
{
	static PFNGLSECONDARYCOLOR3BVPROC_ALT fn=(PFNGLSECONDARYCOLOR3BVPROC_ALT)glaltGetProcAddressVersion("glSecondaryColor3bv",3,0);
	 fn(v1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_SecondaryColor3d
#define GL_ALT_FUNDEF_SecondaryColor3d
typedef void (*PFNGLSECONDARYCOLOR3DPROC_ALT)(GLdouble,GLdouble,GLdouble);
static inline void glSecondaryColor3d(GLdouble red1,GLdouble green1,GLdouble blue1)
{
	static PFNGLSECONDARYCOLOR3DPROC_ALT fn=(PFNGLSECONDARYCOLOR3DPROC_ALT)glaltGetProcAddressVersion("glSecondaryColor3d",3,0);
	 fn(red1,green1,blue1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_SecondaryColor3dv
#define GL_ALT_FUNDEF_SecondaryColor3dv
typedef void (*PFNGLSECONDARYCOLOR3DVPROC_ALT)(const GLdouble *);
static inline void glSecondaryColor3dv(const GLdouble * v1)
{
	static PFNGLSECONDARYCOLOR3DVPROC_ALT fn=(PFNGLSECONDARYCOLOR3DVPROC_ALT)glaltGetProcAddressVersion("glSecondaryColor3dv",3,0);
	 fn(v1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_SecondaryColor3f
#define GL_ALT_FUNDEF_SecondaryColor3f
typedef void (*PFNGLSECONDARYCOLOR3FPROC_ALT)(GLfloat,GLfloat,GLfloat);
static inline void glSecondaryColor3f(GLfloat red1,GLfloat green1,GLfloat blue1)
{
	static PFNGLSECONDARYCOLOR3FPROC_ALT fn=(PFNGLSECONDARYCOLOR3FPROC_ALT)glaltGetProcAddressVersion("glSecondaryColor3f",3,0);
	 fn(red1,green1,blue1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_SecondaryColor3fv
#define GL_ALT_FUNDEF_SecondaryColor3fv
typedef void (*PFNGLSECONDARYCOLOR3FVPROC_ALT)(const GLfloat *);
static inline void glSecondaryColor3fv(const GLfloat * v1)
{
	static PFNGLSECONDARYCOLOR3FVPROC_ALT fn=(PFNGLSECONDARYCOLOR3FVPROC_ALT)glaltGetProcAddressVersion("glSecondaryColor3fv",3,0);
	 fn(v1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_SecondaryColor3i
#define GL_ALT_FUNDEF_SecondaryColor3i
typedef void (*PFNGLSECONDARYCOLOR3IPROC_ALT)(GLint,GLint,GLint);
static inline void glSecondaryColor3i(GLint red1,GLint green1,GLint blue1)
{
	static PFNGLSECONDARYCOLOR3IPROC_ALT fn=(PFNGLSECONDARYCOLOR3IPROC_ALT)glaltGetProcAddressVersion("glSecondaryColor3i",3,0);
	 fn(red1,green1,blue1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_SecondaryColor3iv
#define GL_ALT_FUNDEF_SecondaryColor3iv
typedef void (*PFNGLSECONDARYCOLOR3IVPROC_ALT)(const GLint *);
static inline void glSecondaryColor3iv(const GLint * v1)
{
	static PFNGLSECONDARYCOLOR3IVPROC_ALT fn=(PFNGLSECONDARYCOLOR3IVPROC_ALT)glaltGetProcAddressVersion("glSecondaryColor3iv",3,0);
	 fn(v1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_SecondaryColor3s
#define GL_ALT_FUNDEF_SecondaryColor3s
typedef void (*PFNGLSECONDARYCOLOR3SPROC_ALT)(GLshort,GLshort,GLshort);
static inline void glSecondaryColor3s(GLshort red1,GLshort green1,GLshort blue1)
{
	static PFNGLSECONDARYCOLOR3SPROC_ALT fn=(PFNGLSECONDARYCOLOR3SPROC_ALT)glaltGetProcAddressVersion("glSecondaryColor3s",3,0);
	 fn(red1,green1,blue1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_SecondaryColor3sv
#define GL_ALT_FUNDEF_SecondaryColor3sv
typedef void (*PFNGLSECONDARYCOLOR3SVPROC_ALT)(const GLshort *);
static inline void glSecondaryColor3sv(const GLshort * v1)
{
	static PFNGLSECONDARYCOLOR3SVPROC_ALT fn=(PFNGLSECONDARYCOLOR3SVPROC_ALT)glaltGetProcAddressVersion("glSecondaryColor3sv",3,0);
	 fn(v1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_SecondaryColor3ub
#define GL_ALT_FUNDEF_SecondaryColor3ub
typedef void (*PFNGLSECONDARYCOLOR3UBPROC_ALT)(GLubyte,GLubyte,GLubyte);
static inline void glSecondaryColor3ub(GLubyte red1,GLubyte green1,GLubyte blue1)
{
	static PFNGLSECONDARYCOLOR3UBPROC_ALT fn=(PFNGLSECONDARYCOLOR3UBPROC_ALT)glaltGetProcAddressVersion("glSecondaryColor3ub",3,0);
	 fn(red1,green1,blue1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_SecondaryColor3ubv
#define GL_ALT_FUNDEF_SecondaryColor3ubv
typedef void (*PFNGLSECONDARYCOLOR3UBVPROC_ALT)(const GLubyte *);
static inline void glSecondaryColor3ubv(const GLubyte * v1)
{
	static PFNGLSECONDARYCOLOR3UBVPROC_ALT fn=(PFNGLSECONDARYCOLOR3UBVPROC_ALT)glaltGetProcAddressVersion("glSecondaryColor3ubv",3,0);
	 fn(v1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_SecondaryColor3ui
#define GL_ALT_FUNDEF_SecondaryColor3ui
typedef void (*PFNGLSECONDARYCOLOR3UIPROC_ALT)(GLuint,GLuint,GLuint);
static inline void glSecondaryColor3ui(GLuint red1,GLuint green1,GLuint blue1)
{
	static PFNGLSECONDARYCOLOR3UIPROC_ALT fn=(PFNGLSECONDARYCOLOR3UIPROC_ALT)glaltGetProcAddressVersion("glSecondaryColor3ui",3,0);
	 fn(red1,green1,blue1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_SecondaryColor3uiv
#define GL_ALT_FUNDEF_SecondaryColor3uiv
typedef void (*PFNGLSECONDARYCOLOR3UIVPROC_ALT)(const GLuint *);
static inline void glSecondaryColor3uiv(const GLuint * v1)
{
	static PFNGLSECONDARYCOLOR3UIVPROC_ALT fn=(PFNGLSECONDARYCOLOR3UIVPROC_ALT)glaltGetProcAddressVersion("glSecondaryColor3uiv",3,0);
	 fn(v1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_SecondaryColor3us
#define GL_ALT_FUNDEF_SecondaryColor3us
typedef void (*PFNGLSECONDARYCOLOR3USPROC_ALT)(GLushort,GLushort,GLushort);
static inline void glSecondaryColor3us(GLushort red1,GLushort green1,GLushort blue1)
{
	static PFNGLSECONDARYCOLOR3USPROC_ALT fn=(PFNGLSECONDARYCOLOR3USPROC_ALT)glaltGetProcAddressVersion("glSecondaryColor3us",3,0);
	 fn(red1,green1,blue1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_SecondaryColor3usv
#define GL_ALT_FUNDEF_SecondaryColor3usv
typedef void (*PFNGLSECONDARYCOLOR3USVPROC_ALT)(const GLushort *);
static inline void glSecondaryColor3usv(const GLushort * v1)
{
	static PFNGLSECONDARYCOLOR3USVPROC_ALT fn=(PFNGLSECONDARYCOLOR3USVPROC_ALT)glaltGetProcAddressVersion("glSecondaryColor3usv",3,0);
	 fn(v1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_SecondaryColorPointer
#define GL_ALT_FUNDEF_SecondaryColorPointer
typedef void (*PFNGLSECONDARYCOLORPOINTERPROC_ALT)(GLint,GLenum,GLsizei,const void *);
static inline void glSecondaryColorPointer(GLint size1,GLenum type1,GLsizei stride1,const void * pointer1)
{
	static PFNGLSECONDARYCOLORPOINTERPROC_ALT fn=(PFNGLSECONDARYCOLORPOINTERPROC_ALT)glaltGetProcAddressVersion("glSecondaryColorPointer",3,0);
	 fn(size1,type1,stride1,pointer1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_ShaderSource
#define GL_ALT_FUNDEF_ShaderSource
typedef void (*PFNGLSHADERSOURCEPROC_ALT)(GLuint,GLsizei,const GLchar *const*,const GLint *);
static inline void glShaderSource(GLuint shader1,GLsizei count1,const GLchar *const* string1,const GLint * length1)
{
	static PFNGLSHADERSOURCEPROC_ALT fn=(PFNGLSHADERSOURCEPROC_ALT)glaltGetProcAddressVersion("glShaderSource",3,0);
	 fn(shader1,count1,string1,length1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_StencilFuncSeparate
#define GL_ALT_FUNDEF_StencilFuncSeparate
typedef void (*PFNGLSTENCILFUNCSEPARATEPROC_ALT)(GLenum,GLenum,GLint,GLuint);
static inline void glStencilFuncSeparate(GLenum face1,GLenum func1,GLint ref1,GLuint mask1)
{
	static PFNGLSTENCILFUNCSEPARATEPROC_ALT fn=(PFNGLSTENCILFUNCSEPARATEPROC_ALT)glaltGetProcAddressVersion("glStencilFuncSeparate",3,0);
	 fn(face1,func1,ref1,mask1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_StencilMaskSeparate
#define GL_ALT_FUNDEF_StencilMaskSeparate
typedef void (*PFNGLSTENCILMASKSEPARATEPROC_ALT)(GLenum,GLuint);
static inline void glStencilMaskSeparate(GLenum face1,GLuint mask1)
{
	static PFNGLSTENCILMASKSEPARATEPROC_ALT fn=(PFNGLSTENCILMASKSEPARATEPROC_ALT)glaltGetProcAddressVersion("glStencilMaskSeparate",3,0);
	 fn(face1,mask1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_StencilOpSeparate
#define GL_ALT_FUNDEF_StencilOpSeparate
typedef void (*PFNGLSTENCILOPSEPARATEPROC_ALT)(GLenum,GLenum,GLenum,GLenum);
static inline void glStencilOpSeparate(GLenum face1,GLenum sfail1,GLenum dpfail1,GLenum dppass1)
{
	static PFNGLSTENCILOPSEPARATEPROC_ALT fn=(PFNGLSTENCILOPSEPARATEPROC_ALT)glaltGetProcAddressVersion("glStencilOpSeparate",3,0);
	 fn(face1,sfail1,dpfail1,dppass1);
}
#endif
#endif

#ifndef GL_VERSION_1_2
#ifndef	GL_ALT_FUNDEF_TexImage3D
#define GL_ALT_FUNDEF_TexImage3D
typedef void (*PFNGLTEXIMAGE3DPROC_ALT)(GLenum,GLint,GLint,GLsizei,GLsizei,GLsizei,GLint,GLenum,GLenum,const void *);
static inline void glTexImage3D(GLenum target1,GLint level1,GLint internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLint border1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXIMAGE3DPROC_ALT fn=(PFNGLTEXIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glTexImage3D",3,0);
	 fn(target1,level1,internalformat1,width1,height1,depth1,border1,format1,type1,pixels1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_TexParameterIiv
#define GL_ALT_FUNDEF_TexParameterIiv
typedef void (*PFNGLTEXPARAMETERIIVPROC_ALT)(GLenum,GLenum,const GLint *);
static inline void glTexParameterIiv(GLenum target1,GLenum pname1,const GLint * params1)
{
	static PFNGLTEXPARAMETERIIVPROC_ALT fn=(PFNGLTEXPARAMETERIIVPROC_ALT)glaltGetProcAddressVersion("glTexParameterIiv",3,0);
	 fn(target1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_TexParameterIuiv
#define GL_ALT_FUNDEF_TexParameterIuiv
typedef void (*PFNGLTEXPARAMETERIUIVPROC_ALT)(GLenum,GLenum,const GLuint *);
static inline void glTexParameterIuiv(GLenum target1,GLenum pname1,const GLuint * params1)
{
	static PFNGLTEXPARAMETERIUIVPROC_ALT fn=(PFNGLTEXPARAMETERIUIVPROC_ALT)glaltGetProcAddressVersion("glTexParameterIuiv",3,0);
	 fn(target1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_1_2
#ifndef	GL_ALT_FUNDEF_TexSubImage3D
#define GL_ALT_FUNDEF_TexSubImage3D
typedef void (*PFNGLTEXSUBIMAGE3DPROC_ALT)(GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,const void *);
static inline void glTexSubImage3D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLsizei width1,GLsizei height1,GLsizei depth1,GLenum format1,GLenum type1,const void * pixels1)
{
	static PFNGLTEXSUBIMAGE3DPROC_ALT fn=(PFNGLTEXSUBIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glTexSubImage3D",3,0);
	 fn(target1,level1,xoffset1,yoffset1,zoffset1,width1,height1,depth1,format1,type1,pixels1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_TransformFeedbackVaryings
#define GL_ALT_FUNDEF_TransformFeedbackVaryings
typedef void (*PFNGLTRANSFORMFEEDBACKVARYINGSPROC_ALT)(GLuint,GLsizei,const GLchar *const*,GLenum);
static inline void glTransformFeedbackVaryings(GLuint program1,GLsizei count1,const GLchar *const* varyings1,GLenum bufferMode1)
{
	static PFNGLTRANSFORMFEEDBACKVARYINGSPROC_ALT fn=(PFNGLTRANSFORMFEEDBACKVARYINGSPROC_ALT)glaltGetProcAddressVersion("glTransformFeedbackVaryings",3,0);
	 fn(program1,count1,varyings1,bufferMode1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform1f
#define GL_ALT_FUNDEF_Uniform1f
typedef void (*PFNGLUNIFORM1FPROC_ALT)(GLint,GLfloat);
static inline void glUniform1f(GLint location1,GLfloat v01)
{
	static PFNGLUNIFORM1FPROC_ALT fn=(PFNGLUNIFORM1FPROC_ALT)glaltGetProcAddressVersion("glUniform1f",3,0);
	 fn(location1,v01);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform1fv
#define GL_ALT_FUNDEF_Uniform1fv
typedef void (*PFNGLUNIFORM1FVPROC_ALT)(GLint,GLsizei,const GLfloat *);
static inline void glUniform1fv(GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLUNIFORM1FVPROC_ALT fn=(PFNGLUNIFORM1FVPROC_ALT)glaltGetProcAddressVersion("glUniform1fv",3,0);
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform1i
#define GL_ALT_FUNDEF_Uniform1i
typedef void (*PFNGLUNIFORM1IPROC_ALT)(GLint,GLint);
static inline void glUniform1i(GLint location1,GLint v01)
{
	static PFNGLUNIFORM1IPROC_ALT fn=(PFNGLUNIFORM1IPROC_ALT)glaltGetProcAddressVersion("glUniform1i",3,0);
	 fn(location1,v01);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform1iv
#define GL_ALT_FUNDEF_Uniform1iv
typedef void (*PFNGLUNIFORM1IVPROC_ALT)(GLint,GLsizei,const GLint *);
static inline void glUniform1iv(GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLUNIFORM1IVPROC_ALT fn=(PFNGLUNIFORM1IVPROC_ALT)glaltGetProcAddressVersion("glUniform1iv",3,0);
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_Uniform1ui
#define GL_ALT_FUNDEF_Uniform1ui
typedef void (*PFNGLUNIFORM1UIPROC_ALT)(GLint,GLuint);
static inline void glUniform1ui(GLint location1,GLuint v01)
{
	static PFNGLUNIFORM1UIPROC_ALT fn=(PFNGLUNIFORM1UIPROC_ALT)glaltGetProcAddressVersion("glUniform1ui",3,0);
	 fn(location1,v01);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_Uniform1uiv
#define GL_ALT_FUNDEF_Uniform1uiv
typedef void (*PFNGLUNIFORM1UIVPROC_ALT)(GLint,GLsizei,const GLuint *);
static inline void glUniform1uiv(GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLUNIFORM1UIVPROC_ALT fn=(PFNGLUNIFORM1UIVPROC_ALT)glaltGetProcAddressVersion("glUniform1uiv",3,0);
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform2f
#define GL_ALT_FUNDEF_Uniform2f
typedef void (*PFNGLUNIFORM2FPROC_ALT)(GLint,GLfloat,GLfloat);
static inline void glUniform2f(GLint location1,GLfloat v01,GLfloat v11)
{
	static PFNGLUNIFORM2FPROC_ALT fn=(PFNGLUNIFORM2FPROC_ALT)glaltGetProcAddressVersion("glUniform2f",3,0);
	 fn(location1,v01,v11);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform2fv
#define GL_ALT_FUNDEF_Uniform2fv
typedef void (*PFNGLUNIFORM2FVPROC_ALT)(GLint,GLsizei,const GLfloat *);
static inline void glUniform2fv(GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLUNIFORM2FVPROC_ALT fn=(PFNGLUNIFORM2FVPROC_ALT)glaltGetProcAddressVersion("glUniform2fv",3,0);
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform2i
#define GL_ALT_FUNDEF_Uniform2i
typedef void (*PFNGLUNIFORM2IPROC_ALT)(GLint,GLint,GLint);
static inline void glUniform2i(GLint location1,GLint v01,GLint v11)
{
	static PFNGLUNIFORM2IPROC_ALT fn=(PFNGLUNIFORM2IPROC_ALT)glaltGetProcAddressVersion("glUniform2i",3,0);
	 fn(location1,v01,v11);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform2iv
#define GL_ALT_FUNDEF_Uniform2iv
typedef void (*PFNGLUNIFORM2IVPROC_ALT)(GLint,GLsizei,const GLint *);
static inline void glUniform2iv(GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLUNIFORM2IVPROC_ALT fn=(PFNGLUNIFORM2IVPROC_ALT)glaltGetProcAddressVersion("glUniform2iv",3,0);
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_Uniform2ui
#define GL_ALT_FUNDEF_Uniform2ui
typedef void (*PFNGLUNIFORM2UIPROC_ALT)(GLint,GLuint,GLuint);
static inline void glUniform2ui(GLint location1,GLuint v01,GLuint v11)
{
	static PFNGLUNIFORM2UIPROC_ALT fn=(PFNGLUNIFORM2UIPROC_ALT)glaltGetProcAddressVersion("glUniform2ui",3,0);
	 fn(location1,v01,v11);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_Uniform2uiv
#define GL_ALT_FUNDEF_Uniform2uiv
typedef void (*PFNGLUNIFORM2UIVPROC_ALT)(GLint,GLsizei,const GLuint *);
static inline void glUniform2uiv(GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLUNIFORM2UIVPROC_ALT fn=(PFNGLUNIFORM2UIVPROC_ALT)glaltGetProcAddressVersion("glUniform2uiv",3,0);
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform3f
#define GL_ALT_FUNDEF_Uniform3f
typedef void (*PFNGLUNIFORM3FPROC_ALT)(GLint,GLfloat,GLfloat,GLfloat);
static inline void glUniform3f(GLint location1,GLfloat v01,GLfloat v11,GLfloat v21)
{
	static PFNGLUNIFORM3FPROC_ALT fn=(PFNGLUNIFORM3FPROC_ALT)glaltGetProcAddressVersion("glUniform3f",3,0);
	 fn(location1,v01,v11,v21);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform3fv
#define GL_ALT_FUNDEF_Uniform3fv
typedef void (*PFNGLUNIFORM3FVPROC_ALT)(GLint,GLsizei,const GLfloat *);
static inline void glUniform3fv(GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLUNIFORM3FVPROC_ALT fn=(PFNGLUNIFORM3FVPROC_ALT)glaltGetProcAddressVersion("glUniform3fv",3,0);
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform3i
#define GL_ALT_FUNDEF_Uniform3i
typedef void (*PFNGLUNIFORM3IPROC_ALT)(GLint,GLint,GLint,GLint);
static inline void glUniform3i(GLint location1,GLint v01,GLint v11,GLint v21)
{
	static PFNGLUNIFORM3IPROC_ALT fn=(PFNGLUNIFORM3IPROC_ALT)glaltGetProcAddressVersion("glUniform3i",3,0);
	 fn(location1,v01,v11,v21);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform3iv
#define GL_ALT_FUNDEF_Uniform3iv
typedef void (*PFNGLUNIFORM3IVPROC_ALT)(GLint,GLsizei,const GLint *);
static inline void glUniform3iv(GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLUNIFORM3IVPROC_ALT fn=(PFNGLUNIFORM3IVPROC_ALT)glaltGetProcAddressVersion("glUniform3iv",3,0);
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_Uniform3ui
#define GL_ALT_FUNDEF_Uniform3ui
typedef void (*PFNGLUNIFORM3UIPROC_ALT)(GLint,GLuint,GLuint,GLuint);
static inline void glUniform3ui(GLint location1,GLuint v01,GLuint v11,GLuint v21)
{
	static PFNGLUNIFORM3UIPROC_ALT fn=(PFNGLUNIFORM3UIPROC_ALT)glaltGetProcAddressVersion("glUniform3ui",3,0);
	 fn(location1,v01,v11,v21);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_Uniform3uiv
#define GL_ALT_FUNDEF_Uniform3uiv
typedef void (*PFNGLUNIFORM3UIVPROC_ALT)(GLint,GLsizei,const GLuint *);
static inline void glUniform3uiv(GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLUNIFORM3UIVPROC_ALT fn=(PFNGLUNIFORM3UIVPROC_ALT)glaltGetProcAddressVersion("glUniform3uiv",3,0);
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform4f
#define GL_ALT_FUNDEF_Uniform4f
typedef void (*PFNGLUNIFORM4FPROC_ALT)(GLint,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glUniform4f(GLint location1,GLfloat v01,GLfloat v11,GLfloat v21,GLfloat v31)
{
	static PFNGLUNIFORM4FPROC_ALT fn=(PFNGLUNIFORM4FPROC_ALT)glaltGetProcAddressVersion("glUniform4f",3,0);
	 fn(location1,v01,v11,v21,v31);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform4fv
#define GL_ALT_FUNDEF_Uniform4fv
typedef void (*PFNGLUNIFORM4FVPROC_ALT)(GLint,GLsizei,const GLfloat *);
static inline void glUniform4fv(GLint location1,GLsizei count1,const GLfloat * value1)
{
	static PFNGLUNIFORM4FVPROC_ALT fn=(PFNGLUNIFORM4FVPROC_ALT)glaltGetProcAddressVersion("glUniform4fv",3,0);
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform4i
#define GL_ALT_FUNDEF_Uniform4i
typedef void (*PFNGLUNIFORM4IPROC_ALT)(GLint,GLint,GLint,GLint,GLint);
static inline void glUniform4i(GLint location1,GLint v01,GLint v11,GLint v21,GLint v31)
{
	static PFNGLUNIFORM4IPROC_ALT fn=(PFNGLUNIFORM4IPROC_ALT)glaltGetProcAddressVersion("glUniform4i",3,0);
	 fn(location1,v01,v11,v21,v31);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform4iv
#define GL_ALT_FUNDEF_Uniform4iv
typedef void (*PFNGLUNIFORM4IVPROC_ALT)(GLint,GLsizei,const GLint *);
static inline void glUniform4iv(GLint location1,GLsizei count1,const GLint * value1)
{
	static PFNGLUNIFORM4IVPROC_ALT fn=(PFNGLUNIFORM4IVPROC_ALT)glaltGetProcAddressVersion("glUniform4iv",3,0);
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_Uniform4ui
#define GL_ALT_FUNDEF_Uniform4ui
typedef void (*PFNGLUNIFORM4UIPROC_ALT)(GLint,GLuint,GLuint,GLuint,GLuint);
static inline void glUniform4ui(GLint location1,GLuint v01,GLuint v11,GLuint v21,GLuint v31)
{
	static PFNGLUNIFORM4UIPROC_ALT fn=(PFNGLUNIFORM4UIPROC_ALT)glaltGetProcAddressVersion("glUniform4ui",3,0);
	 fn(location1,v01,v11,v21,v31);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_Uniform4uiv
#define GL_ALT_FUNDEF_Uniform4uiv
typedef void (*PFNGLUNIFORM4UIVPROC_ALT)(GLint,GLsizei,const GLuint *);
static inline void glUniform4uiv(GLint location1,GLsizei count1,const GLuint * value1)
{
	static PFNGLUNIFORM4UIVPROC_ALT fn=(PFNGLUNIFORM4UIVPROC_ALT)glaltGetProcAddressVersion("glUniform4uiv",3,0);
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_UniformMatrix2fv
#define GL_ALT_FUNDEF_UniformMatrix2fv
typedef void (*PFNGLUNIFORMMATRIX2FVPROC_ALT)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glUniformMatrix2fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX2FVPROC_ALT fn=(PFNGLUNIFORMMATRIX2FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix2fv",3,0);
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_1
#ifndef	GL_ALT_FUNDEF_UniformMatrix2x3fv
#define GL_ALT_FUNDEF_UniformMatrix2x3fv
typedef void (*PFNGLUNIFORMMATRIX2X3FVPROC_ALT)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glUniformMatrix2x3fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX2X3FVPROC_ALT fn=(PFNGLUNIFORMMATRIX2X3FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix2x3fv",3,0);
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_1
#ifndef	GL_ALT_FUNDEF_UniformMatrix2x4fv
#define GL_ALT_FUNDEF_UniformMatrix2x4fv
typedef void (*PFNGLUNIFORMMATRIX2X4FVPROC_ALT)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glUniformMatrix2x4fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX2X4FVPROC_ALT fn=(PFNGLUNIFORMMATRIX2X4FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix2x4fv",3,0);
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_UniformMatrix3fv
#define GL_ALT_FUNDEF_UniformMatrix3fv
typedef void (*PFNGLUNIFORMMATRIX3FVPROC_ALT)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glUniformMatrix3fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX3FVPROC_ALT fn=(PFNGLUNIFORMMATRIX3FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix3fv",3,0);
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_1
#ifndef	GL_ALT_FUNDEF_UniformMatrix3x2fv
#define GL_ALT_FUNDEF_UniformMatrix3x2fv
typedef void (*PFNGLUNIFORMMATRIX3X2FVPROC_ALT)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glUniformMatrix3x2fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX3X2FVPROC_ALT fn=(PFNGLUNIFORMMATRIX3X2FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix3x2fv",3,0);
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_1
#ifndef	GL_ALT_FUNDEF_UniformMatrix3x4fv
#define GL_ALT_FUNDEF_UniformMatrix3x4fv
typedef void (*PFNGLUNIFORMMATRIX3X4FVPROC_ALT)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glUniformMatrix3x4fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX3X4FVPROC_ALT fn=(PFNGLUNIFORMMATRIX3X4FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix3x4fv",3,0);
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_UniformMatrix4fv
#define GL_ALT_FUNDEF_UniformMatrix4fv
typedef void (*PFNGLUNIFORMMATRIX4FVPROC_ALT)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glUniformMatrix4fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX4FVPROC_ALT fn=(PFNGLUNIFORMMATRIX4FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix4fv",3,0);
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_1
#ifndef	GL_ALT_FUNDEF_UniformMatrix4x2fv
#define GL_ALT_FUNDEF_UniformMatrix4x2fv
typedef void (*PFNGLUNIFORMMATRIX4X2FVPROC_ALT)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glUniformMatrix4x2fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX4X2FVPROC_ALT fn=(PFNGLUNIFORMMATRIX4X2FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix4x2fv",3,0);
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_1
#ifndef	GL_ALT_FUNDEF_UniformMatrix4x3fv
#define GL_ALT_FUNDEF_UniformMatrix4x3fv
typedef void (*PFNGLUNIFORMMATRIX4X3FVPROC_ALT)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glUniformMatrix4x3fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
	static PFNGLUNIFORMMATRIX4X3FVPROC_ALT fn=(PFNGLUNIFORMMATRIX4X3FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix4x3fv",3,0);
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_UnmapBuffer
#define GL_ALT_FUNDEF_UnmapBuffer
typedef GLboolean (*PFNGLUNMAPBUFFERPROC_ALT)(GLenum);
static inline GLboolean glUnmapBuffer(GLenum target1)
{
	static PFNGLUNMAPBUFFERPROC_ALT fn=(PFNGLUNMAPBUFFERPROC_ALT)glaltGetProcAddressVersion("glUnmapBuffer",3,0);
	return fn(target1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_UseProgram
#define GL_ALT_FUNDEF_UseProgram
typedef void (*PFNGLUSEPROGRAMPROC_ALT)(GLuint);
static inline void glUseProgram(GLuint program1)
{
	static PFNGLUSEPROGRAMPROC_ALT fn=(PFNGLUSEPROGRAMPROC_ALT)glaltGetProcAddressVersion("glUseProgram",3,0);
	 fn(program1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_ValidateProgram
#define GL_ALT_FUNDEF_ValidateProgram
typedef void (*PFNGLVALIDATEPROGRAMPROC_ALT)(GLuint);
static inline void glValidateProgram(GLuint program1)
{
	static PFNGLVALIDATEPROGRAMPROC_ALT fn=(PFNGLVALIDATEPROGRAMPROC_ALT)glaltGetProcAddressVersion("glValidateProgram",3,0);
	 fn(program1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib1d
#define GL_ALT_FUNDEF_VertexAttrib1d
typedef void (*PFNGLVERTEXATTRIB1DPROC_ALT)(GLuint,GLdouble);
static inline void glVertexAttrib1d(GLuint index1,GLdouble x1)
{
	static PFNGLVERTEXATTRIB1DPROC_ALT fn=(PFNGLVERTEXATTRIB1DPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib1d",3,0);
	 fn(index1,x1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib1dv
#define GL_ALT_FUNDEF_VertexAttrib1dv
typedef void (*PFNGLVERTEXATTRIB1DVPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttrib1dv(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIB1DVPROC_ALT fn=(PFNGLVERTEXATTRIB1DVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib1dv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib1f
#define GL_ALT_FUNDEF_VertexAttrib1f
typedef void (*PFNGLVERTEXATTRIB1FPROC_ALT)(GLuint,GLfloat);
static inline void glVertexAttrib1f(GLuint index1,GLfloat x1)
{
	static PFNGLVERTEXATTRIB1FPROC_ALT fn=(PFNGLVERTEXATTRIB1FPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib1f",3,0);
	 fn(index1,x1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib1fv
#define GL_ALT_FUNDEF_VertexAttrib1fv
typedef void (*PFNGLVERTEXATTRIB1FVPROC_ALT)(GLuint,const GLfloat *);
static inline void glVertexAttrib1fv(GLuint index1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIB1FVPROC_ALT fn=(PFNGLVERTEXATTRIB1FVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib1fv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib1s
#define GL_ALT_FUNDEF_VertexAttrib1s
typedef void (*PFNGLVERTEXATTRIB1SPROC_ALT)(GLuint,GLshort);
static inline void glVertexAttrib1s(GLuint index1,GLshort x1)
{
	static PFNGLVERTEXATTRIB1SPROC_ALT fn=(PFNGLVERTEXATTRIB1SPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib1s",3,0);
	 fn(index1,x1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib1sv
#define GL_ALT_FUNDEF_VertexAttrib1sv
typedef void (*PFNGLVERTEXATTRIB1SVPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttrib1sv(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIB1SVPROC_ALT fn=(PFNGLVERTEXATTRIB1SVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib1sv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib2d
#define GL_ALT_FUNDEF_VertexAttrib2d
typedef void (*PFNGLVERTEXATTRIB2DPROC_ALT)(GLuint,GLdouble,GLdouble);
static inline void glVertexAttrib2d(GLuint index1,GLdouble x1,GLdouble y1)
{
	static PFNGLVERTEXATTRIB2DPROC_ALT fn=(PFNGLVERTEXATTRIB2DPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib2d",3,0);
	 fn(index1,x1,y1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib2dv
#define GL_ALT_FUNDEF_VertexAttrib2dv
typedef void (*PFNGLVERTEXATTRIB2DVPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttrib2dv(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIB2DVPROC_ALT fn=(PFNGLVERTEXATTRIB2DVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib2dv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib2f
#define GL_ALT_FUNDEF_VertexAttrib2f
typedef void (*PFNGLVERTEXATTRIB2FPROC_ALT)(GLuint,GLfloat,GLfloat);
static inline void glVertexAttrib2f(GLuint index1,GLfloat x1,GLfloat y1)
{
	static PFNGLVERTEXATTRIB2FPROC_ALT fn=(PFNGLVERTEXATTRIB2FPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib2f",3,0);
	 fn(index1,x1,y1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib2fv
#define GL_ALT_FUNDEF_VertexAttrib2fv
typedef void (*PFNGLVERTEXATTRIB2FVPROC_ALT)(GLuint,const GLfloat *);
static inline void glVertexAttrib2fv(GLuint index1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIB2FVPROC_ALT fn=(PFNGLVERTEXATTRIB2FVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib2fv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib2s
#define GL_ALT_FUNDEF_VertexAttrib2s
typedef void (*PFNGLVERTEXATTRIB2SPROC_ALT)(GLuint,GLshort,GLshort);
static inline void glVertexAttrib2s(GLuint index1,GLshort x1,GLshort y1)
{
	static PFNGLVERTEXATTRIB2SPROC_ALT fn=(PFNGLVERTEXATTRIB2SPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib2s",3,0);
	 fn(index1,x1,y1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib2sv
#define GL_ALT_FUNDEF_VertexAttrib2sv
typedef void (*PFNGLVERTEXATTRIB2SVPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttrib2sv(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIB2SVPROC_ALT fn=(PFNGLVERTEXATTRIB2SVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib2sv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib3d
#define GL_ALT_FUNDEF_VertexAttrib3d
typedef void (*PFNGLVERTEXATTRIB3DPROC_ALT)(GLuint,GLdouble,GLdouble,GLdouble);
static inline void glVertexAttrib3d(GLuint index1,GLdouble x1,GLdouble y1,GLdouble z1)
{
	static PFNGLVERTEXATTRIB3DPROC_ALT fn=(PFNGLVERTEXATTRIB3DPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib3d",3,0);
	 fn(index1,x1,y1,z1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib3dv
#define GL_ALT_FUNDEF_VertexAttrib3dv
typedef void (*PFNGLVERTEXATTRIB3DVPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttrib3dv(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIB3DVPROC_ALT fn=(PFNGLVERTEXATTRIB3DVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib3dv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib3f
#define GL_ALT_FUNDEF_VertexAttrib3f
typedef void (*PFNGLVERTEXATTRIB3FPROC_ALT)(GLuint,GLfloat,GLfloat,GLfloat);
static inline void glVertexAttrib3f(GLuint index1,GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLVERTEXATTRIB3FPROC_ALT fn=(PFNGLVERTEXATTRIB3FPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib3f",3,0);
	 fn(index1,x1,y1,z1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib3fv
#define GL_ALT_FUNDEF_VertexAttrib3fv
typedef void (*PFNGLVERTEXATTRIB3FVPROC_ALT)(GLuint,const GLfloat *);
static inline void glVertexAttrib3fv(GLuint index1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIB3FVPROC_ALT fn=(PFNGLVERTEXATTRIB3FVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib3fv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib3s
#define GL_ALT_FUNDEF_VertexAttrib3s
typedef void (*PFNGLVERTEXATTRIB3SPROC_ALT)(GLuint,GLshort,GLshort,GLshort);
static inline void glVertexAttrib3s(GLuint index1,GLshort x1,GLshort y1,GLshort z1)
{
	static PFNGLVERTEXATTRIB3SPROC_ALT fn=(PFNGLVERTEXATTRIB3SPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib3s",3,0);
	 fn(index1,x1,y1,z1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib3sv
#define GL_ALT_FUNDEF_VertexAttrib3sv
typedef void (*PFNGLVERTEXATTRIB3SVPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttrib3sv(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIB3SVPROC_ALT fn=(PFNGLVERTEXATTRIB3SVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib3sv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4Nbv
#define GL_ALT_FUNDEF_VertexAttrib4Nbv
typedef void (*PFNGLVERTEXATTRIB4NBVPROC_ALT)(GLuint,const GLbyte *);
static inline void glVertexAttrib4Nbv(GLuint index1,const GLbyte * v1)
{
	static PFNGLVERTEXATTRIB4NBVPROC_ALT fn=(PFNGLVERTEXATTRIB4NBVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Nbv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4Niv
#define GL_ALT_FUNDEF_VertexAttrib4Niv
typedef void (*PFNGLVERTEXATTRIB4NIVPROC_ALT)(GLuint,const GLint *);
static inline void glVertexAttrib4Niv(GLuint index1,const GLint * v1)
{
	static PFNGLVERTEXATTRIB4NIVPROC_ALT fn=(PFNGLVERTEXATTRIB4NIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Niv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4Nsv
#define GL_ALT_FUNDEF_VertexAttrib4Nsv
typedef void (*PFNGLVERTEXATTRIB4NSVPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttrib4Nsv(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIB4NSVPROC_ALT fn=(PFNGLVERTEXATTRIB4NSVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Nsv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4Nub
#define GL_ALT_FUNDEF_VertexAttrib4Nub
typedef void (*PFNGLVERTEXATTRIB4NUBPROC_ALT)(GLuint,GLubyte,GLubyte,GLubyte,GLubyte);
static inline void glVertexAttrib4Nub(GLuint index1,GLubyte x1,GLubyte y1,GLubyte z1,GLubyte w1)
{
	static PFNGLVERTEXATTRIB4NUBPROC_ALT fn=(PFNGLVERTEXATTRIB4NUBPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Nub",3,0);
	 fn(index1,x1,y1,z1,w1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4Nubv
#define GL_ALT_FUNDEF_VertexAttrib4Nubv
typedef void (*PFNGLVERTEXATTRIB4NUBVPROC_ALT)(GLuint,const GLubyte *);
static inline void glVertexAttrib4Nubv(GLuint index1,const GLubyte * v1)
{
	static PFNGLVERTEXATTRIB4NUBVPROC_ALT fn=(PFNGLVERTEXATTRIB4NUBVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Nubv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4Nuiv
#define GL_ALT_FUNDEF_VertexAttrib4Nuiv
typedef void (*PFNGLVERTEXATTRIB4NUIVPROC_ALT)(GLuint,const GLuint *);
static inline void glVertexAttrib4Nuiv(GLuint index1,const GLuint * v1)
{
	static PFNGLVERTEXATTRIB4NUIVPROC_ALT fn=(PFNGLVERTEXATTRIB4NUIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Nuiv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4Nusv
#define GL_ALT_FUNDEF_VertexAttrib4Nusv
typedef void (*PFNGLVERTEXATTRIB4NUSVPROC_ALT)(GLuint,const GLushort *);
static inline void glVertexAttrib4Nusv(GLuint index1,const GLushort * v1)
{
	static PFNGLVERTEXATTRIB4NUSVPROC_ALT fn=(PFNGLVERTEXATTRIB4NUSVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Nusv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4bv
#define GL_ALT_FUNDEF_VertexAttrib4bv
typedef void (*PFNGLVERTEXATTRIB4BVPROC_ALT)(GLuint,const GLbyte *);
static inline void glVertexAttrib4bv(GLuint index1,const GLbyte * v1)
{
	static PFNGLVERTEXATTRIB4BVPROC_ALT fn=(PFNGLVERTEXATTRIB4BVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4bv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4d
#define GL_ALT_FUNDEF_VertexAttrib4d
typedef void (*PFNGLVERTEXATTRIB4DPROC_ALT)(GLuint,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void glVertexAttrib4d(GLuint index1,GLdouble x1,GLdouble y1,GLdouble z1,GLdouble w1)
{
	static PFNGLVERTEXATTRIB4DPROC_ALT fn=(PFNGLVERTEXATTRIB4DPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4d",3,0);
	 fn(index1,x1,y1,z1,w1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4dv
#define GL_ALT_FUNDEF_VertexAttrib4dv
typedef void (*PFNGLVERTEXATTRIB4DVPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttrib4dv(GLuint index1,const GLdouble * v1)
{
	static PFNGLVERTEXATTRIB4DVPROC_ALT fn=(PFNGLVERTEXATTRIB4DVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4dv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4f
#define GL_ALT_FUNDEF_VertexAttrib4f
typedef void (*PFNGLVERTEXATTRIB4FPROC_ALT)(GLuint,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glVertexAttrib4f(GLuint index1,GLfloat x1,GLfloat y1,GLfloat z1,GLfloat w1)
{
	static PFNGLVERTEXATTRIB4FPROC_ALT fn=(PFNGLVERTEXATTRIB4FPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4f",3,0);
	 fn(index1,x1,y1,z1,w1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4fv
#define GL_ALT_FUNDEF_VertexAttrib4fv
typedef void (*PFNGLVERTEXATTRIB4FVPROC_ALT)(GLuint,const GLfloat *);
static inline void glVertexAttrib4fv(GLuint index1,const GLfloat * v1)
{
	static PFNGLVERTEXATTRIB4FVPROC_ALT fn=(PFNGLVERTEXATTRIB4FVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4fv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4iv
#define GL_ALT_FUNDEF_VertexAttrib4iv
typedef void (*PFNGLVERTEXATTRIB4IVPROC_ALT)(GLuint,const GLint *);
static inline void glVertexAttrib4iv(GLuint index1,const GLint * v1)
{
	static PFNGLVERTEXATTRIB4IVPROC_ALT fn=(PFNGLVERTEXATTRIB4IVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4iv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4s
#define GL_ALT_FUNDEF_VertexAttrib4s
typedef void (*PFNGLVERTEXATTRIB4SPROC_ALT)(GLuint,GLshort,GLshort,GLshort,GLshort);
static inline void glVertexAttrib4s(GLuint index1,GLshort x1,GLshort y1,GLshort z1,GLshort w1)
{
	static PFNGLVERTEXATTRIB4SPROC_ALT fn=(PFNGLVERTEXATTRIB4SPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4s",3,0);
	 fn(index1,x1,y1,z1,w1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4sv
#define GL_ALT_FUNDEF_VertexAttrib4sv
typedef void (*PFNGLVERTEXATTRIB4SVPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttrib4sv(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIB4SVPROC_ALT fn=(PFNGLVERTEXATTRIB4SVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4sv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4ubv
#define GL_ALT_FUNDEF_VertexAttrib4ubv
typedef void (*PFNGLVERTEXATTRIB4UBVPROC_ALT)(GLuint,const GLubyte *);
static inline void glVertexAttrib4ubv(GLuint index1,const GLubyte * v1)
{
	static PFNGLVERTEXATTRIB4UBVPROC_ALT fn=(PFNGLVERTEXATTRIB4UBVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4ubv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4uiv
#define GL_ALT_FUNDEF_VertexAttrib4uiv
typedef void (*PFNGLVERTEXATTRIB4UIVPROC_ALT)(GLuint,const GLuint *);
static inline void glVertexAttrib4uiv(GLuint index1,const GLuint * v1)
{
	static PFNGLVERTEXATTRIB4UIVPROC_ALT fn=(PFNGLVERTEXATTRIB4UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4uiv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4usv
#define GL_ALT_FUNDEF_VertexAttrib4usv
typedef void (*PFNGLVERTEXATTRIB4USVPROC_ALT)(GLuint,const GLushort *);
static inline void glVertexAttrib4usv(GLuint index1,const GLushort * v1)
{
	static PFNGLVERTEXATTRIB4USVPROC_ALT fn=(PFNGLVERTEXATTRIB4USVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4usv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI1i
#define GL_ALT_FUNDEF_VertexAttribI1i
typedef void (*PFNGLVERTEXATTRIBI1IPROC_ALT)(GLuint,GLint);
static inline void glVertexAttribI1i(GLuint index1,GLint x1)
{
	static PFNGLVERTEXATTRIBI1IPROC_ALT fn=(PFNGLVERTEXATTRIBI1IPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI1i",3,0);
	 fn(index1,x1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI1iv
#define GL_ALT_FUNDEF_VertexAttribI1iv
typedef void (*PFNGLVERTEXATTRIBI1IVPROC_ALT)(GLuint,const GLint *);
static inline void glVertexAttribI1iv(GLuint index1,const GLint * v1)
{
	static PFNGLVERTEXATTRIBI1IVPROC_ALT fn=(PFNGLVERTEXATTRIBI1IVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI1iv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI1ui
#define GL_ALT_FUNDEF_VertexAttribI1ui
typedef void (*PFNGLVERTEXATTRIBI1UIPROC_ALT)(GLuint,GLuint);
static inline void glVertexAttribI1ui(GLuint index1,GLuint x1)
{
	static PFNGLVERTEXATTRIBI1UIPROC_ALT fn=(PFNGLVERTEXATTRIBI1UIPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI1ui",3,0);
	 fn(index1,x1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI1uiv
#define GL_ALT_FUNDEF_VertexAttribI1uiv
typedef void (*PFNGLVERTEXATTRIBI1UIVPROC_ALT)(GLuint,const GLuint *);
static inline void glVertexAttribI1uiv(GLuint index1,const GLuint * v1)
{
	static PFNGLVERTEXATTRIBI1UIVPROC_ALT fn=(PFNGLVERTEXATTRIBI1UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI1uiv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI2i
#define GL_ALT_FUNDEF_VertexAttribI2i
typedef void (*PFNGLVERTEXATTRIBI2IPROC_ALT)(GLuint,GLint,GLint);
static inline void glVertexAttribI2i(GLuint index1,GLint x1,GLint y1)
{
	static PFNGLVERTEXATTRIBI2IPROC_ALT fn=(PFNGLVERTEXATTRIBI2IPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI2i",3,0);
	 fn(index1,x1,y1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI2iv
#define GL_ALT_FUNDEF_VertexAttribI2iv
typedef void (*PFNGLVERTEXATTRIBI2IVPROC_ALT)(GLuint,const GLint *);
static inline void glVertexAttribI2iv(GLuint index1,const GLint * v1)
{
	static PFNGLVERTEXATTRIBI2IVPROC_ALT fn=(PFNGLVERTEXATTRIBI2IVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI2iv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI2ui
#define GL_ALT_FUNDEF_VertexAttribI2ui
typedef void (*PFNGLVERTEXATTRIBI2UIPROC_ALT)(GLuint,GLuint,GLuint);
static inline void glVertexAttribI2ui(GLuint index1,GLuint x1,GLuint y1)
{
	static PFNGLVERTEXATTRIBI2UIPROC_ALT fn=(PFNGLVERTEXATTRIBI2UIPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI2ui",3,0);
	 fn(index1,x1,y1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI2uiv
#define GL_ALT_FUNDEF_VertexAttribI2uiv
typedef void (*PFNGLVERTEXATTRIBI2UIVPROC_ALT)(GLuint,const GLuint *);
static inline void glVertexAttribI2uiv(GLuint index1,const GLuint * v1)
{
	static PFNGLVERTEXATTRIBI2UIVPROC_ALT fn=(PFNGLVERTEXATTRIBI2UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI2uiv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI3i
#define GL_ALT_FUNDEF_VertexAttribI3i
typedef void (*PFNGLVERTEXATTRIBI3IPROC_ALT)(GLuint,GLint,GLint,GLint);
static inline void glVertexAttribI3i(GLuint index1,GLint x1,GLint y1,GLint z1)
{
	static PFNGLVERTEXATTRIBI3IPROC_ALT fn=(PFNGLVERTEXATTRIBI3IPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI3i",3,0);
	 fn(index1,x1,y1,z1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI3iv
#define GL_ALT_FUNDEF_VertexAttribI3iv
typedef void (*PFNGLVERTEXATTRIBI3IVPROC_ALT)(GLuint,const GLint *);
static inline void glVertexAttribI3iv(GLuint index1,const GLint * v1)
{
	static PFNGLVERTEXATTRIBI3IVPROC_ALT fn=(PFNGLVERTEXATTRIBI3IVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI3iv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI3ui
#define GL_ALT_FUNDEF_VertexAttribI3ui
typedef void (*PFNGLVERTEXATTRIBI3UIPROC_ALT)(GLuint,GLuint,GLuint,GLuint);
static inline void glVertexAttribI3ui(GLuint index1,GLuint x1,GLuint y1,GLuint z1)
{
	static PFNGLVERTEXATTRIBI3UIPROC_ALT fn=(PFNGLVERTEXATTRIBI3UIPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI3ui",3,0);
	 fn(index1,x1,y1,z1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI3uiv
#define GL_ALT_FUNDEF_VertexAttribI3uiv
typedef void (*PFNGLVERTEXATTRIBI3UIVPROC_ALT)(GLuint,const GLuint *);
static inline void glVertexAttribI3uiv(GLuint index1,const GLuint * v1)
{
	static PFNGLVERTEXATTRIBI3UIVPROC_ALT fn=(PFNGLVERTEXATTRIBI3UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI3uiv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI4bv
#define GL_ALT_FUNDEF_VertexAttribI4bv
typedef void (*PFNGLVERTEXATTRIBI4BVPROC_ALT)(GLuint,const GLbyte *);
static inline void glVertexAttribI4bv(GLuint index1,const GLbyte * v1)
{
	static PFNGLVERTEXATTRIBI4BVPROC_ALT fn=(PFNGLVERTEXATTRIBI4BVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4bv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI4i
#define GL_ALT_FUNDEF_VertexAttribI4i
typedef void (*PFNGLVERTEXATTRIBI4IPROC_ALT)(GLuint,GLint,GLint,GLint,GLint);
static inline void glVertexAttribI4i(GLuint index1,GLint x1,GLint y1,GLint z1,GLint w1)
{
	static PFNGLVERTEXATTRIBI4IPROC_ALT fn=(PFNGLVERTEXATTRIBI4IPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4i",3,0);
	 fn(index1,x1,y1,z1,w1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI4iv
#define GL_ALT_FUNDEF_VertexAttribI4iv
typedef void (*PFNGLVERTEXATTRIBI4IVPROC_ALT)(GLuint,const GLint *);
static inline void glVertexAttribI4iv(GLuint index1,const GLint * v1)
{
	static PFNGLVERTEXATTRIBI4IVPROC_ALT fn=(PFNGLVERTEXATTRIBI4IVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4iv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI4sv
#define GL_ALT_FUNDEF_VertexAttribI4sv
typedef void (*PFNGLVERTEXATTRIBI4SVPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttribI4sv(GLuint index1,const GLshort * v1)
{
	static PFNGLVERTEXATTRIBI4SVPROC_ALT fn=(PFNGLVERTEXATTRIBI4SVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4sv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI4ubv
#define GL_ALT_FUNDEF_VertexAttribI4ubv
typedef void (*PFNGLVERTEXATTRIBI4UBVPROC_ALT)(GLuint,const GLubyte *);
static inline void glVertexAttribI4ubv(GLuint index1,const GLubyte * v1)
{
	static PFNGLVERTEXATTRIBI4UBVPROC_ALT fn=(PFNGLVERTEXATTRIBI4UBVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4ubv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI4ui
#define GL_ALT_FUNDEF_VertexAttribI4ui
typedef void (*PFNGLVERTEXATTRIBI4UIPROC_ALT)(GLuint,GLuint,GLuint,GLuint,GLuint);
static inline void glVertexAttribI4ui(GLuint index1,GLuint x1,GLuint y1,GLuint z1,GLuint w1)
{
	static PFNGLVERTEXATTRIBI4UIPROC_ALT fn=(PFNGLVERTEXATTRIBI4UIPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4ui",3,0);
	 fn(index1,x1,y1,z1,w1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI4uiv
#define GL_ALT_FUNDEF_VertexAttribI4uiv
typedef void (*PFNGLVERTEXATTRIBI4UIVPROC_ALT)(GLuint,const GLuint *);
static inline void glVertexAttribI4uiv(GLuint index1,const GLuint * v1)
{
	static PFNGLVERTEXATTRIBI4UIVPROC_ALT fn=(PFNGLVERTEXATTRIBI4UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4uiv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI4usv
#define GL_ALT_FUNDEF_VertexAttribI4usv
typedef void (*PFNGLVERTEXATTRIBI4USVPROC_ALT)(GLuint,const GLushort *);
static inline void glVertexAttribI4usv(GLuint index1,const GLushort * v1)
{
	static PFNGLVERTEXATTRIBI4USVPROC_ALT fn=(PFNGLVERTEXATTRIBI4USVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4usv",3,0);
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribIPointer
#define GL_ALT_FUNDEF_VertexAttribIPointer
typedef void (*PFNGLVERTEXATTRIBIPOINTERPROC_ALT)(GLuint,GLint,GLenum,GLsizei,const void *);
static inline void glVertexAttribIPointer(GLuint index1,GLint size1,GLenum type1,GLsizei stride1,const void * pointer1)
{
	static PFNGLVERTEXATTRIBIPOINTERPROC_ALT fn=(PFNGLVERTEXATTRIBIPOINTERPROC_ALT)glaltGetProcAddressVersion("glVertexAttribIPointer",3,0);
	 fn(index1,size1,type1,stride1,pointer1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttribPointer
#define GL_ALT_FUNDEF_VertexAttribPointer
typedef void (*PFNGLVERTEXATTRIBPOINTERPROC_ALT)(GLuint,GLint,GLenum,GLboolean,GLsizei,const void *);
static inline void glVertexAttribPointer(GLuint index1,GLint size1,GLenum type1,GLboolean normalized1,GLsizei stride1,const void * pointer1)
{
	static PFNGLVERTEXATTRIBPOINTERPROC_ALT fn=(PFNGLVERTEXATTRIBPOINTERPROC_ALT)glaltGetProcAddressVersion("glVertexAttribPointer",3,0);
	 fn(index1,size1,type1,normalized1,stride1,pointer1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_WindowPos2d
#define GL_ALT_FUNDEF_WindowPos2d
typedef void (*PFNGLWINDOWPOS2DPROC_ALT)(GLdouble,GLdouble);
static inline void glWindowPos2d(GLdouble x1,GLdouble y1)
{
	static PFNGLWINDOWPOS2DPROC_ALT fn=(PFNGLWINDOWPOS2DPROC_ALT)glaltGetProcAddressVersion("glWindowPos2d",3,0);
	 fn(x1,y1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_WindowPos2dv
#define GL_ALT_FUNDEF_WindowPos2dv
typedef void (*PFNGLWINDOWPOS2DVPROC_ALT)(const GLdouble *);
static inline void glWindowPos2dv(const GLdouble * v1)
{
	static PFNGLWINDOWPOS2DVPROC_ALT fn=(PFNGLWINDOWPOS2DVPROC_ALT)glaltGetProcAddressVersion("glWindowPos2dv",3,0);
	 fn(v1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_WindowPos2f
#define GL_ALT_FUNDEF_WindowPos2f
typedef void (*PFNGLWINDOWPOS2FPROC_ALT)(GLfloat,GLfloat);
static inline void glWindowPos2f(GLfloat x1,GLfloat y1)
{
	static PFNGLWINDOWPOS2FPROC_ALT fn=(PFNGLWINDOWPOS2FPROC_ALT)glaltGetProcAddressVersion("glWindowPos2f",3,0);
	 fn(x1,y1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_WindowPos2fv
#define GL_ALT_FUNDEF_WindowPos2fv
typedef void (*PFNGLWINDOWPOS2FVPROC_ALT)(const GLfloat *);
static inline void glWindowPos2fv(const GLfloat * v1)
{
	static PFNGLWINDOWPOS2FVPROC_ALT fn=(PFNGLWINDOWPOS2FVPROC_ALT)glaltGetProcAddressVersion("glWindowPos2fv",3,0);
	 fn(v1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_WindowPos2i
#define GL_ALT_FUNDEF_WindowPos2i
typedef void (*PFNGLWINDOWPOS2IPROC_ALT)(GLint,GLint);
static inline void glWindowPos2i(GLint x1,GLint y1)
{
	static PFNGLWINDOWPOS2IPROC_ALT fn=(PFNGLWINDOWPOS2IPROC_ALT)glaltGetProcAddressVersion("glWindowPos2i",3,0);
	 fn(x1,y1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_WindowPos2iv
#define GL_ALT_FUNDEF_WindowPos2iv
typedef void (*PFNGLWINDOWPOS2IVPROC_ALT)(const GLint *);
static inline void glWindowPos2iv(const GLint * v1)
{
	static PFNGLWINDOWPOS2IVPROC_ALT fn=(PFNGLWINDOWPOS2IVPROC_ALT)glaltGetProcAddressVersion("glWindowPos2iv",3,0);
	 fn(v1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_WindowPos2s
#define GL_ALT_FUNDEF_WindowPos2s
typedef void (*PFNGLWINDOWPOS2SPROC_ALT)(GLshort,GLshort);
static inline void glWindowPos2s(GLshort x1,GLshort y1)
{
	static PFNGLWINDOWPOS2SPROC_ALT fn=(PFNGLWINDOWPOS2SPROC_ALT)glaltGetProcAddressVersion("glWindowPos2s",3,0);
	 fn(x1,y1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_WindowPos2sv
#define GL_ALT_FUNDEF_WindowPos2sv
typedef void (*PFNGLWINDOWPOS2SVPROC_ALT)(const GLshort *);
static inline void glWindowPos2sv(const GLshort * v1)
{
	static PFNGLWINDOWPOS2SVPROC_ALT fn=(PFNGLWINDOWPOS2SVPROC_ALT)glaltGetProcAddressVersion("glWindowPos2sv",3,0);
	 fn(v1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_WindowPos3d
#define GL_ALT_FUNDEF_WindowPos3d
typedef void (*PFNGLWINDOWPOS3DPROC_ALT)(GLdouble,GLdouble,GLdouble);
static inline void glWindowPos3d(GLdouble x1,GLdouble y1,GLdouble z1)
{
	static PFNGLWINDOWPOS3DPROC_ALT fn=(PFNGLWINDOWPOS3DPROC_ALT)glaltGetProcAddressVersion("glWindowPos3d",3,0);
	 fn(x1,y1,z1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_WindowPos3dv
#define GL_ALT_FUNDEF_WindowPos3dv
typedef void (*PFNGLWINDOWPOS3DVPROC_ALT)(const GLdouble *);
static inline void glWindowPos3dv(const GLdouble * v1)
{
	static PFNGLWINDOWPOS3DVPROC_ALT fn=(PFNGLWINDOWPOS3DVPROC_ALT)glaltGetProcAddressVersion("glWindowPos3dv",3,0);
	 fn(v1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_WindowPos3f
#define GL_ALT_FUNDEF_WindowPos3f
typedef void (*PFNGLWINDOWPOS3FPROC_ALT)(GLfloat,GLfloat,GLfloat);
static inline void glWindowPos3f(GLfloat x1,GLfloat y1,GLfloat z1)
{
	static PFNGLWINDOWPOS3FPROC_ALT fn=(PFNGLWINDOWPOS3FPROC_ALT)glaltGetProcAddressVersion("glWindowPos3f",3,0);
	 fn(x1,y1,z1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_WindowPos3fv
#define GL_ALT_FUNDEF_WindowPos3fv
typedef void (*PFNGLWINDOWPOS3FVPROC_ALT)(const GLfloat *);
static inline void glWindowPos3fv(const GLfloat * v1)
{
	static PFNGLWINDOWPOS3FVPROC_ALT fn=(PFNGLWINDOWPOS3FVPROC_ALT)glaltGetProcAddressVersion("glWindowPos3fv",3,0);
	 fn(v1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_WindowPos3i
#define GL_ALT_FUNDEF_WindowPos3i
typedef void (*PFNGLWINDOWPOS3IPROC_ALT)(GLint,GLint,GLint);
static inline void glWindowPos3i(GLint x1,GLint y1,GLint z1)
{
	static PFNGLWINDOWPOS3IPROC_ALT fn=(PFNGLWINDOWPOS3IPROC_ALT)glaltGetProcAddressVersion("glWindowPos3i",3,0);
	 fn(x1,y1,z1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_WindowPos3iv
#define GL_ALT_FUNDEF_WindowPos3iv
typedef void (*PFNGLWINDOWPOS3IVPROC_ALT)(const GLint *);
static inline void glWindowPos3iv(const GLint * v1)
{
	static PFNGLWINDOWPOS3IVPROC_ALT fn=(PFNGLWINDOWPOS3IVPROC_ALT)glaltGetProcAddressVersion("glWindowPos3iv",3,0);
	 fn(v1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_WindowPos3s
#define GL_ALT_FUNDEF_WindowPos3s
typedef void (*PFNGLWINDOWPOS3SPROC_ALT)(GLshort,GLshort,GLshort);
static inline void glWindowPos3s(GLshort x1,GLshort y1,GLshort z1)
{
	static PFNGLWINDOWPOS3SPROC_ALT fn=(PFNGLWINDOWPOS3SPROC_ALT)glaltGetProcAddressVersion("glWindowPos3s",3,0);
	 fn(x1,y1,z1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_WindowPos3sv
#define GL_ALT_FUNDEF_WindowPos3sv
typedef void (*PFNGLWINDOWPOS3SVPROC_ALT)(const GLshort *);
static inline void glWindowPos3sv(const GLshort * v1)
{
	static PFNGLWINDOWPOS3SVPROC_ALT fn=(PFNGLWINDOWPOS3SVPROC_ALT)glaltGetProcAddressVersion("glWindowPos3sv",3,0);
	 fn(v1);
}
#endif
#endif

CGUARDEND

#endif
