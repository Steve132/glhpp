#ifndef GL_ALT_GL_VERSION_4_3_ALT
#define GL_ALT_GL_VERSION_4_3_ALT
#include "common.h"


#ifndef GL_ALT_API_NAME
#define GL_ALT_API_NAME GL_ALT_GL_API
#endif
#ifndef GL_ALT_API_VERSION
#define GL_ALT_API_VERSION 430
#endif
#ifndef GL_NO_ERROR
#define GL_NO_ERROR 0
#endif //GL_NO_ERROR
#ifndef GL_FALSE
#define GL_FALSE 0
#endif //GL_FALSE
#ifndef GL_NONE
#define GL_NONE 0
#endif //GL_NONE
#ifndef GL_ZERO
#define GL_ZERO 0
#endif //GL_ZERO
#ifndef GL_POINTS
#define GL_POINTS 0x0000
#endif //GL_POINTS
#ifndef GL_VERTEX_SHADER_BIT
#define GL_VERTEX_SHADER_BIT 0x00000001
#endif //GL_VERTEX_SHADER_BIT
#ifndef GL_CONTEXT_CORE_PROFILE_BIT
#define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001
#endif //GL_CONTEXT_CORE_PROFILE_BIT
#ifndef GL_SYNC_FLUSH_COMMANDS_BIT
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#endif //GL_SYNC_FLUSH_COMMANDS_BIT
#ifndef GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#endif //GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
#ifndef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#endif //GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#ifndef GL_FRAGMENT_SHADER_BIT
#define GL_FRAGMENT_SHADER_BIT 0x00000002
#endif //GL_FRAGMENT_SHADER_BIT
#ifndef GL_CONTEXT_FLAG_DEBUG_BIT
#define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#endif //GL_CONTEXT_FLAG_DEBUG_BIT
#ifndef GL_ELEMENT_ARRAY_BARRIER_BIT
#define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#endif //GL_ELEMENT_ARRAY_BARRIER_BIT
#ifndef GL_CONTEXT_COMPATIBILITY_PROFILE_BIT
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
#endif //GL_CONTEXT_COMPATIBILITY_PROFILE_BIT
#ifndef GL_GEOMETRY_SHADER_BIT
#define GL_GEOMETRY_SHADER_BIT 0x00000004
#endif //GL_GEOMETRY_SHADER_BIT
#ifndef GL_UNIFORM_BARRIER_BIT
#define GL_UNIFORM_BARRIER_BIT 0x00000004
#endif //GL_UNIFORM_BARRIER_BIT
#ifndef GL_TESS_CONTROL_SHADER_BIT
#define GL_TESS_CONTROL_SHADER_BIT 0x00000008
#endif //GL_TESS_CONTROL_SHADER_BIT
#ifndef GL_TEXTURE_FETCH_BARRIER_BIT
#define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#endif //GL_TEXTURE_FETCH_BARRIER_BIT
#ifndef GL_TESS_EVALUATION_SHADER_BIT
#define GL_TESS_EVALUATION_SHADER_BIT 0x00000010
#endif //GL_TESS_EVALUATION_SHADER_BIT
#ifndef GL_COMPUTE_SHADER_BIT
#define GL_COMPUTE_SHADER_BIT 0x00000020
#endif //GL_COMPUTE_SHADER_BIT
#ifndef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#endif //GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#ifndef GL_COMMAND_BARRIER_BIT
#define GL_COMMAND_BARRIER_BIT 0x00000040
#endif //GL_COMMAND_BARRIER_BIT
#ifndef GL_PIXEL_BUFFER_BARRIER_BIT
#define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#endif //GL_PIXEL_BUFFER_BARRIER_BIT
#ifndef GL_DEPTH_BUFFER_BIT
#define GL_DEPTH_BUFFER_BIT 0x00000100
#endif //GL_DEPTH_BUFFER_BIT
#ifndef GL_TEXTURE_UPDATE_BARRIER_BIT
#define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#endif //GL_TEXTURE_UPDATE_BARRIER_BIT
#ifndef GL_BUFFER_UPDATE_BARRIER_BIT
#define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#endif //GL_BUFFER_UPDATE_BARRIER_BIT
#ifndef GL_FRAMEBUFFER_BARRIER_BIT
#define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#endif //GL_FRAMEBUFFER_BARRIER_BIT
#ifndef GL_STENCIL_BUFFER_BIT
#define GL_STENCIL_BUFFER_BIT 0x00000400
#endif //GL_STENCIL_BUFFER_BIT
#ifndef GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#endif //GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#ifndef GL_ATOMIC_COUNTER_BARRIER_BIT
#define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#endif //GL_ATOMIC_COUNTER_BARRIER_BIT
#ifndef GL_SHADER_STORAGE_BARRIER_BIT
#define GL_SHADER_STORAGE_BARRIER_BIT 0x00002000
#endif //GL_SHADER_STORAGE_BARRIER_BIT
#ifndef GL_COLOR_BUFFER_BIT
#define GL_COLOR_BUFFER_BIT 0x00004000
#endif //GL_COLOR_BUFFER_BIT
#ifndef GL_MAP_READ_BIT
#define GL_MAP_READ_BIT 0x0001
#endif //GL_MAP_READ_BIT
#ifndef GL_LINES
#define GL_LINES 0x0001
#endif //GL_LINES
#ifndef GL_MAP_WRITE_BIT
#define GL_MAP_WRITE_BIT 0x0002
#endif //GL_MAP_WRITE_BIT
#ifndef GL_LINE_LOOP
#define GL_LINE_LOOP 0x0002
#endif //GL_LINE_LOOP
#ifndef GL_LINE_STRIP
#define GL_LINE_STRIP 0x0003
#endif //GL_LINE_STRIP
#ifndef GL_MAP_INVALIDATE_RANGE_BIT
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#endif //GL_MAP_INVALIDATE_RANGE_BIT
#ifndef GL_TRIANGLES
#define GL_TRIANGLES 0x0004
#endif //GL_TRIANGLES
#ifndef GL_TRIANGLE_STRIP
#define GL_TRIANGLE_STRIP 0x0005
#endif //GL_TRIANGLE_STRIP
#ifndef GL_TRIANGLE_FAN
#define GL_TRIANGLE_FAN 0x0006
#endif //GL_TRIANGLE_FAN
#ifndef GL_MAP_INVALIDATE_BUFFER_BIT
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#endif //GL_MAP_INVALIDATE_BUFFER_BIT
#ifndef GL_LINES_ADJACENCY
#define GL_LINES_ADJACENCY 0x000A
#endif //GL_LINES_ADJACENCY
#ifndef GL_LINE_STRIP_ADJACENCY
#define GL_LINE_STRIP_ADJACENCY 0x000B
#endif //GL_LINE_STRIP_ADJACENCY
#ifndef GL_TRIANGLES_ADJACENCY
#define GL_TRIANGLES_ADJACENCY 0x000C
#endif //GL_TRIANGLES_ADJACENCY
#ifndef GL_TRIANGLE_STRIP_ADJACENCY
#define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
#endif //GL_TRIANGLE_STRIP_ADJACENCY
#ifndef GL_PATCHES
#define GL_PATCHES 0x000E
#endif //GL_PATCHES
#ifndef GL_MAP_FLUSH_EXPLICIT_BIT
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#endif //GL_MAP_FLUSH_EXPLICIT_BIT
#ifndef GL_MAP_UNSYNCHRONIZED_BIT
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#endif //GL_MAP_UNSYNCHRONIZED_BIT
#ifndef GL_NEVER
#define GL_NEVER 0x0200
#endif //GL_NEVER
#ifndef GL_LESS
#define GL_LESS 0x0201
#endif //GL_LESS
#ifndef GL_EQUAL
#define GL_EQUAL 0x0202
#endif //GL_EQUAL
#ifndef GL_LEQUAL
#define GL_LEQUAL 0x0203
#endif //GL_LEQUAL
#ifndef GL_GREATER
#define GL_GREATER 0x0204
#endif //GL_GREATER
#ifndef GL_NOTEQUAL
#define GL_NOTEQUAL 0x0205
#endif //GL_NOTEQUAL
#ifndef GL_GEQUAL
#define GL_GEQUAL 0x0206
#endif //GL_GEQUAL
#ifndef GL_ALWAYS
#define GL_ALWAYS 0x0207
#endif //GL_ALWAYS
#ifndef GL_SRC_COLOR
#define GL_SRC_COLOR 0x0300
#endif //GL_SRC_COLOR
#ifndef GL_ONE_MINUS_SRC_COLOR
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#endif //GL_ONE_MINUS_SRC_COLOR
#ifndef GL_SRC_ALPHA
#define GL_SRC_ALPHA 0x0302
#endif //GL_SRC_ALPHA
#ifndef GL_ONE_MINUS_SRC_ALPHA
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#endif //GL_ONE_MINUS_SRC_ALPHA
#ifndef GL_DST_ALPHA
#define GL_DST_ALPHA 0x0304
#endif //GL_DST_ALPHA
#ifndef GL_ONE_MINUS_DST_ALPHA
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#endif //GL_ONE_MINUS_DST_ALPHA
#ifndef GL_DST_COLOR
#define GL_DST_COLOR 0x0306
#endif //GL_DST_COLOR
#ifndef GL_ONE_MINUS_DST_COLOR
#define GL_ONE_MINUS_DST_COLOR 0x0307
#endif //GL_ONE_MINUS_DST_COLOR
#ifndef GL_SRC_ALPHA_SATURATE
#define GL_SRC_ALPHA_SATURATE 0x0308
#endif //GL_SRC_ALPHA_SATURATE
#ifndef GL_FRONT_LEFT
#define GL_FRONT_LEFT 0x0400
#endif //GL_FRONT_LEFT
#ifndef GL_FRONT_RIGHT
#define GL_FRONT_RIGHT 0x0401
#endif //GL_FRONT_RIGHT
#ifndef GL_BACK_LEFT
#define GL_BACK_LEFT 0x0402
#endif //GL_BACK_LEFT
#ifndef GL_BACK_RIGHT
#define GL_BACK_RIGHT 0x0403
#endif //GL_BACK_RIGHT
#ifndef GL_FRONT
#define GL_FRONT 0x0404
#endif //GL_FRONT
#ifndef GL_BACK
#define GL_BACK 0x0405
#endif //GL_BACK
#ifndef GL_LEFT
#define GL_LEFT 0x0406
#endif //GL_LEFT
#ifndef GL_RIGHT
#define GL_RIGHT 0x0407
#endif //GL_RIGHT
#ifndef GL_FRONT_AND_BACK
#define GL_FRONT_AND_BACK 0x0408
#endif //GL_FRONT_AND_BACK
#ifndef GL_INVALID_ENUM
#define GL_INVALID_ENUM 0x0500
#endif //GL_INVALID_ENUM
#ifndef GL_INVALID_VALUE
#define GL_INVALID_VALUE 0x0501
#endif //GL_INVALID_VALUE
#ifndef GL_INVALID_OPERATION
#define GL_INVALID_OPERATION 0x0502
#endif //GL_INVALID_OPERATION
#ifndef GL_OUT_OF_MEMORY
#define GL_OUT_OF_MEMORY 0x0505
#endif //GL_OUT_OF_MEMORY
#ifndef GL_INVALID_FRAMEBUFFER_OPERATION
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#endif //GL_INVALID_FRAMEBUFFER_OPERATION
#ifndef GL_CW
#define GL_CW 0x0900
#endif //GL_CW
#ifndef GL_CCW
#define GL_CCW 0x0901
#endif //GL_CCW
#ifndef GL_POINT_SIZE
#define GL_POINT_SIZE 0x0B11
#endif //GL_POINT_SIZE
#ifndef GL_SMOOTH_POINT_SIZE_RANGE
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#endif //GL_SMOOTH_POINT_SIZE_RANGE
#ifndef GL_POINT_SIZE_RANGE
#define GL_POINT_SIZE_RANGE 0x0B12
#endif //GL_POINT_SIZE_RANGE
#ifndef GL_POINT_SIZE_GRANULARITY
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#endif //GL_POINT_SIZE_GRANULARITY
#ifndef GL_SMOOTH_POINT_SIZE_GRANULARITY
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#endif //GL_SMOOTH_POINT_SIZE_GRANULARITY
#ifndef GL_LINE_SMOOTH
#define GL_LINE_SMOOTH 0x0B20
#endif //GL_LINE_SMOOTH
#ifndef GL_LINE_WIDTH
#define GL_LINE_WIDTH 0x0B21
#endif //GL_LINE_WIDTH
#ifndef GL_SMOOTH_LINE_WIDTH_RANGE
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#endif //GL_SMOOTH_LINE_WIDTH_RANGE
#ifndef GL_LINE_WIDTH_RANGE
#define GL_LINE_WIDTH_RANGE 0x0B22
#endif //GL_LINE_WIDTH_RANGE
#ifndef GL_SMOOTH_LINE_WIDTH_GRANULARITY
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#endif //GL_SMOOTH_LINE_WIDTH_GRANULARITY
#ifndef GL_LINE_WIDTH_GRANULARITY
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#endif //GL_LINE_WIDTH_GRANULARITY
#ifndef GL_POLYGON_MODE
#define GL_POLYGON_MODE 0x0B40
#endif //GL_POLYGON_MODE
#ifndef GL_POLYGON_SMOOTH
#define GL_POLYGON_SMOOTH 0x0B41
#endif //GL_POLYGON_SMOOTH
#ifndef GL_CULL_FACE
#define GL_CULL_FACE 0x0B44
#endif //GL_CULL_FACE
#ifndef GL_CULL_FACE_MODE
#define GL_CULL_FACE_MODE 0x0B45
#endif //GL_CULL_FACE_MODE
#ifndef GL_FRONT_FACE
#define GL_FRONT_FACE 0x0B46
#endif //GL_FRONT_FACE
#ifndef GL_DEPTH_RANGE
#define GL_DEPTH_RANGE 0x0B70
#endif //GL_DEPTH_RANGE
#ifndef GL_DEPTH_TEST
#define GL_DEPTH_TEST 0x0B71
#endif //GL_DEPTH_TEST
#ifndef GL_DEPTH_WRITEMASK
#define GL_DEPTH_WRITEMASK 0x0B72
#endif //GL_DEPTH_WRITEMASK
#ifndef GL_DEPTH_CLEAR_VALUE
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#endif //GL_DEPTH_CLEAR_VALUE
#ifndef GL_DEPTH_FUNC
#define GL_DEPTH_FUNC 0x0B74
#endif //GL_DEPTH_FUNC
#ifndef GL_STENCIL_TEST
#define GL_STENCIL_TEST 0x0B90
#endif //GL_STENCIL_TEST
#ifndef GL_STENCIL_CLEAR_VALUE
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#endif //GL_STENCIL_CLEAR_VALUE
#ifndef GL_STENCIL_FUNC
#define GL_STENCIL_FUNC 0x0B92
#endif //GL_STENCIL_FUNC
#ifndef GL_STENCIL_VALUE_MASK
#define GL_STENCIL_VALUE_MASK 0x0B93
#endif //GL_STENCIL_VALUE_MASK
#ifndef GL_STENCIL_FAIL
#define GL_STENCIL_FAIL 0x0B94
#endif //GL_STENCIL_FAIL
#ifndef GL_STENCIL_PASS_DEPTH_FAIL
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#endif //GL_STENCIL_PASS_DEPTH_FAIL
#ifndef GL_STENCIL_PASS_DEPTH_PASS
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#endif //GL_STENCIL_PASS_DEPTH_PASS
#ifndef GL_STENCIL_REF
#define GL_STENCIL_REF 0x0B97
#endif //GL_STENCIL_REF
#ifndef GL_STENCIL_WRITEMASK
#define GL_STENCIL_WRITEMASK 0x0B98
#endif //GL_STENCIL_WRITEMASK
#ifndef GL_VIEWPORT
#define GL_VIEWPORT 0x0BA2
#endif //GL_VIEWPORT
#ifndef GL_DITHER
#define GL_DITHER 0x0BD0
#endif //GL_DITHER
#ifndef GL_BLEND_DST
#define GL_BLEND_DST 0x0BE0
#endif //GL_BLEND_DST
#ifndef GL_BLEND_SRC
#define GL_BLEND_SRC 0x0BE1
#endif //GL_BLEND_SRC
#ifndef GL_BLEND
#define GL_BLEND 0x0BE2
#endif //GL_BLEND
#ifndef GL_LOGIC_OP_MODE
#define GL_LOGIC_OP_MODE 0x0BF0
#endif //GL_LOGIC_OP_MODE
#ifndef GL_COLOR_LOGIC_OP
#define GL_COLOR_LOGIC_OP 0x0BF2
#endif //GL_COLOR_LOGIC_OP
#ifndef GL_DRAW_BUFFER
#define GL_DRAW_BUFFER 0x0C01
#endif //GL_DRAW_BUFFER
#ifndef GL_READ_BUFFER
#define GL_READ_BUFFER 0x0C02
#endif //GL_READ_BUFFER
#ifndef GL_SCISSOR_BOX
#define GL_SCISSOR_BOX 0x0C10
#endif //GL_SCISSOR_BOX
#ifndef GL_SCISSOR_TEST
#define GL_SCISSOR_TEST 0x0C11
#endif //GL_SCISSOR_TEST
#ifndef GL_COLOR_CLEAR_VALUE
#define GL_COLOR_CLEAR_VALUE 0x0C22
#endif //GL_COLOR_CLEAR_VALUE
#ifndef GL_COLOR_WRITEMASK
#define GL_COLOR_WRITEMASK 0x0C23
#endif //GL_COLOR_WRITEMASK
#ifndef GL_DOUBLEBUFFER
#define GL_DOUBLEBUFFER 0x0C32
#endif //GL_DOUBLEBUFFER
#ifndef GL_STEREO
#define GL_STEREO 0x0C33
#endif //GL_STEREO
#ifndef GL_LINE_SMOOTH_HINT
#define GL_LINE_SMOOTH_HINT 0x0C52
#endif //GL_LINE_SMOOTH_HINT
#ifndef GL_POLYGON_SMOOTH_HINT
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#endif //GL_POLYGON_SMOOTH_HINT
#ifndef GL_UNPACK_SWAP_BYTES
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#endif //GL_UNPACK_SWAP_BYTES
#ifndef GL_UNPACK_LSB_FIRST
#define GL_UNPACK_LSB_FIRST 0x0CF1
#endif //GL_UNPACK_LSB_FIRST
#ifndef GL_UNPACK_ROW_LENGTH
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#endif //GL_UNPACK_ROW_LENGTH
#ifndef GL_UNPACK_SKIP_ROWS
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#endif //GL_UNPACK_SKIP_ROWS
#ifndef GL_UNPACK_SKIP_PIXELS
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#endif //GL_UNPACK_SKIP_PIXELS
#ifndef GL_UNPACK_ALIGNMENT
#define GL_UNPACK_ALIGNMENT 0x0CF5
#endif //GL_UNPACK_ALIGNMENT
#ifndef GL_PACK_SWAP_BYTES
#define GL_PACK_SWAP_BYTES 0x0D00
#endif //GL_PACK_SWAP_BYTES
#ifndef GL_PACK_LSB_FIRST
#define GL_PACK_LSB_FIRST 0x0D01
#endif //GL_PACK_LSB_FIRST
#ifndef GL_PACK_ROW_LENGTH
#define GL_PACK_ROW_LENGTH 0x0D02
#endif //GL_PACK_ROW_LENGTH
#ifndef GL_PACK_SKIP_ROWS
#define GL_PACK_SKIP_ROWS 0x0D03
#endif //GL_PACK_SKIP_ROWS
#ifndef GL_PACK_SKIP_PIXELS
#define GL_PACK_SKIP_PIXELS 0x0D04
#endif //GL_PACK_SKIP_PIXELS
#ifndef GL_PACK_ALIGNMENT
#define GL_PACK_ALIGNMENT 0x0D05
#endif //GL_PACK_ALIGNMENT
#ifndef GL_MAX_CLIP_DISTANCES
#define GL_MAX_CLIP_DISTANCES 0x0D32
#endif //GL_MAX_CLIP_DISTANCES
#ifndef GL_MAX_TEXTURE_SIZE
#define GL_MAX_TEXTURE_SIZE 0x0D33
#endif //GL_MAX_TEXTURE_SIZE
#ifndef GL_MAX_VIEWPORT_DIMS
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#endif //GL_MAX_VIEWPORT_DIMS
#ifndef GL_SUBPIXEL_BITS
#define GL_SUBPIXEL_BITS 0x0D50
#endif //GL_SUBPIXEL_BITS
#ifndef GL_TEXTURE_1D
#define GL_TEXTURE_1D 0x0DE0
#endif //GL_TEXTURE_1D
#ifndef GL_TEXTURE_2D
#define GL_TEXTURE_2D 0x0DE1
#endif //GL_TEXTURE_2D
#ifndef GL_TEXTURE_WIDTH
#define GL_TEXTURE_WIDTH 0x1000
#endif //GL_TEXTURE_WIDTH
#ifndef GL_TEXTURE_HEIGHT
#define GL_TEXTURE_HEIGHT 0x1001
#endif //GL_TEXTURE_HEIGHT
#ifndef GL_TEXTURE_INTERNAL_FORMAT
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#endif //GL_TEXTURE_INTERNAL_FORMAT
#ifndef GL_TEXTURE_BORDER_COLOR
#define GL_TEXTURE_BORDER_COLOR 0x1004
#endif //GL_TEXTURE_BORDER_COLOR
#ifndef GL_DONT_CARE
#define GL_DONT_CARE 0x1100
#endif //GL_DONT_CARE
#ifndef GL_FASTEST
#define GL_FASTEST 0x1101
#endif //GL_FASTEST
#ifndef GL_NICEST
#define GL_NICEST 0x1102
#endif //GL_NICEST
#ifndef GL_BYTE
#define GL_BYTE 0x1400
#endif //GL_BYTE
#ifndef GL_UNSIGNED_BYTE
#define GL_UNSIGNED_BYTE 0x1401
#endif //GL_UNSIGNED_BYTE
#ifndef GL_SHORT
#define GL_SHORT 0x1402
#endif //GL_SHORT
#ifndef GL_UNSIGNED_SHORT
#define GL_UNSIGNED_SHORT 0x1403
#endif //GL_UNSIGNED_SHORT
#ifndef GL_INT
#define GL_INT 0x1404
#endif //GL_INT
#ifndef GL_UNSIGNED_INT
#define GL_UNSIGNED_INT 0x1405
#endif //GL_UNSIGNED_INT
#ifndef GL_FLOAT
#define GL_FLOAT 0x1406
#endif //GL_FLOAT
#ifndef GL_DOUBLE
#define GL_DOUBLE 0x140A
#endif //GL_DOUBLE
#ifndef GL_HALF_FLOAT
#define GL_HALF_FLOAT 0x140B
#endif //GL_HALF_FLOAT
#ifndef GL_FIXED
#define GL_FIXED 0x140C
#endif //GL_FIXED
#ifndef GL_CLEAR
#define GL_CLEAR 0x1500
#endif //GL_CLEAR
#ifndef GL_AND
#define GL_AND 0x1501
#endif //GL_AND
#ifndef GL_AND_REVERSE
#define GL_AND_REVERSE 0x1502
#endif //GL_AND_REVERSE
#ifndef GL_COPY
#define GL_COPY 0x1503
#endif //GL_COPY
#ifndef GL_AND_INVERTED
#define GL_AND_INVERTED 0x1504
#endif //GL_AND_INVERTED
#ifndef GL_NOOP
#define GL_NOOP 0x1505
#endif //GL_NOOP
#ifndef GL_XOR
#define GL_XOR 0x1506
#endif //GL_XOR
#ifndef GL_OR
#define GL_OR 0x1507
#endif //GL_OR
#ifndef GL_NOR
#define GL_NOR 0x1508
#endif //GL_NOR
#ifndef GL_EQUIV
#define GL_EQUIV 0x1509
#endif //GL_EQUIV
#ifndef GL_INVERT
#define GL_INVERT 0x150A
#endif //GL_INVERT
#ifndef GL_OR_REVERSE
#define GL_OR_REVERSE 0x150B
#endif //GL_OR_REVERSE
#ifndef GL_COPY_INVERTED
#define GL_COPY_INVERTED 0x150C
#endif //GL_COPY_INVERTED
#ifndef GL_OR_INVERTED
#define GL_OR_INVERTED 0x150D
#endif //GL_OR_INVERTED
#ifndef GL_NAND
#define GL_NAND 0x150E
#endif //GL_NAND
#ifndef GL_SET
#define GL_SET 0x150F
#endif //GL_SET
#ifndef GL_TEXTURE
#define GL_TEXTURE 0x1702
#endif //GL_TEXTURE
#ifndef GL_COLOR
#define GL_COLOR 0x1800
#endif //GL_COLOR
#ifndef GL_DEPTH
#define GL_DEPTH 0x1801
#endif //GL_DEPTH
#ifndef GL_STENCIL
#define GL_STENCIL 0x1802
#endif //GL_STENCIL
#ifndef GL_STENCIL_INDEX
#define GL_STENCIL_INDEX 0x1901
#endif //GL_STENCIL_INDEX
#ifndef GL_DEPTH_COMPONENT
#define GL_DEPTH_COMPONENT 0x1902
#endif //GL_DEPTH_COMPONENT
#ifndef GL_RED
#define GL_RED 0x1903
#endif //GL_RED
#ifndef GL_GREEN
#define GL_GREEN 0x1904
#endif //GL_GREEN
#ifndef GL_BLUE
#define GL_BLUE 0x1905
#endif //GL_BLUE
#ifndef GL_ALPHA
#define GL_ALPHA 0x1906
#endif //GL_ALPHA
#ifndef GL_RGB
#define GL_RGB 0x1907
#endif //GL_RGB
#ifndef GL_RGBA
#define GL_RGBA 0x1908
#endif //GL_RGBA
#ifndef GL_POINT
#define GL_POINT 0x1B00
#endif //GL_POINT
#ifndef GL_LINE
#define GL_LINE 0x1B01
#endif //GL_LINE
#ifndef GL_FILL
#define GL_FILL 0x1B02
#endif //GL_FILL
#ifndef GL_KEEP
#define GL_KEEP 0x1E00
#endif //GL_KEEP
#ifndef GL_REPLACE
#define GL_REPLACE 0x1E01
#endif //GL_REPLACE
#ifndef GL_INCR
#define GL_INCR 0x1E02
#endif //GL_INCR
#ifndef GL_DECR
#define GL_DECR 0x1E03
#endif //GL_DECR
#ifndef GL_VENDOR
#define GL_VENDOR 0x1F00
#endif //GL_VENDOR
#ifndef GL_RENDERER
#define GL_RENDERER 0x1F01
#endif //GL_RENDERER
#ifndef GL_VERSION
#define GL_VERSION 0x1F02
#endif //GL_VERSION
#ifndef GL_EXTENSIONS
#define GL_EXTENSIONS 0x1F03
#endif //GL_EXTENSIONS
#ifndef GL_NEAREST
#define GL_NEAREST 0x2600
#endif //GL_NEAREST
#ifndef GL_LINEAR
#define GL_LINEAR 0x2601
#endif //GL_LINEAR
#ifndef GL_NEAREST_MIPMAP_NEAREST
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#endif //GL_NEAREST_MIPMAP_NEAREST
#ifndef GL_LINEAR_MIPMAP_NEAREST
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#endif //GL_LINEAR_MIPMAP_NEAREST
#ifndef GL_NEAREST_MIPMAP_LINEAR
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#endif //GL_NEAREST_MIPMAP_LINEAR
#ifndef GL_LINEAR_MIPMAP_LINEAR
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#endif //GL_LINEAR_MIPMAP_LINEAR
#ifndef GL_TEXTURE_MAG_FILTER
#define GL_TEXTURE_MAG_FILTER 0x2800
#endif //GL_TEXTURE_MAG_FILTER
#ifndef GL_TEXTURE_MIN_FILTER
#define GL_TEXTURE_MIN_FILTER 0x2801
#endif //GL_TEXTURE_MIN_FILTER
#ifndef GL_TEXTURE_WRAP_S
#define GL_TEXTURE_WRAP_S 0x2802
#endif //GL_TEXTURE_WRAP_S
#ifndef GL_TEXTURE_WRAP_T
#define GL_TEXTURE_WRAP_T 0x2803
#endif //GL_TEXTURE_WRAP_T
#ifndef GL_REPEAT
#define GL_REPEAT 0x2901
#endif //GL_REPEAT
#ifndef GL_POLYGON_OFFSET_UNITS
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#endif //GL_POLYGON_OFFSET_UNITS
#ifndef GL_POLYGON_OFFSET_POINT
#define GL_POLYGON_OFFSET_POINT 0x2A01
#endif //GL_POLYGON_OFFSET_POINT
#ifndef GL_POLYGON_OFFSET_LINE
#define GL_POLYGON_OFFSET_LINE 0x2A02
#endif //GL_POLYGON_OFFSET_LINE
#ifndef GL_R3_G3_B2
#define GL_R3_G3_B2 0x2A10
#endif //GL_R3_G3_B2
#ifndef GL_CLIP_DISTANCE0
#define GL_CLIP_DISTANCE0 0x3000
#endif //GL_CLIP_DISTANCE0
#ifndef GL_CLIP_DISTANCE1
#define GL_CLIP_DISTANCE1 0x3001
#endif //GL_CLIP_DISTANCE1
#ifndef GL_CLIP_DISTANCE2
#define GL_CLIP_DISTANCE2 0x3002
#endif //GL_CLIP_DISTANCE2
#ifndef GL_CLIP_DISTANCE3
#define GL_CLIP_DISTANCE3 0x3003
#endif //GL_CLIP_DISTANCE3
#ifndef GL_CLIP_DISTANCE4
#define GL_CLIP_DISTANCE4 0x3004
#endif //GL_CLIP_DISTANCE4
#ifndef GL_CLIP_DISTANCE5
#define GL_CLIP_DISTANCE5 0x3005
#endif //GL_CLIP_DISTANCE5
#ifndef GL_CLIP_DISTANCE6
#define GL_CLIP_DISTANCE6 0x3006
#endif //GL_CLIP_DISTANCE6
#ifndef GL_CLIP_DISTANCE7
#define GL_CLIP_DISTANCE7 0x3007
#endif //GL_CLIP_DISTANCE7
#ifndef GL_CONSTANT_COLOR
#define GL_CONSTANT_COLOR 0x8001
#endif //GL_CONSTANT_COLOR
#ifndef GL_ONE_MINUS_CONSTANT_COLOR
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#endif //GL_ONE_MINUS_CONSTANT_COLOR
#ifndef GL_CONSTANT_ALPHA
#define GL_CONSTANT_ALPHA 0x8003
#endif //GL_CONSTANT_ALPHA
#ifndef GL_ONE_MINUS_CONSTANT_ALPHA
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#endif //GL_ONE_MINUS_CONSTANT_ALPHA
#ifndef GL_FUNC_ADD
#define GL_FUNC_ADD 0x8006
#endif //GL_FUNC_ADD
#ifndef GL_MIN
#define GL_MIN 0x8007
#endif //GL_MIN
#ifndef GL_MAX
#define GL_MAX 0x8008
#endif //GL_MAX
#ifndef GL_BLEND_EQUATION_RGB
#define GL_BLEND_EQUATION_RGB 0x8009
#endif //GL_BLEND_EQUATION_RGB
#ifndef GL_FUNC_SUBTRACT
#define GL_FUNC_SUBTRACT 0x800A
#endif //GL_FUNC_SUBTRACT
#ifndef GL_FUNC_REVERSE_SUBTRACT
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#endif //GL_FUNC_REVERSE_SUBTRACT
#ifndef GL_UNSIGNED_BYTE_3_3_2
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#endif //GL_UNSIGNED_BYTE_3_3_2
#ifndef GL_UNSIGNED_SHORT_4_4_4_4
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#endif //GL_UNSIGNED_SHORT_4_4_4_4
#ifndef GL_UNSIGNED_SHORT_5_5_5_1
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#endif //GL_UNSIGNED_SHORT_5_5_5_1
#ifndef GL_UNSIGNED_INT_8_8_8_8
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#endif //GL_UNSIGNED_INT_8_8_8_8
#ifndef GL_UNSIGNED_INT_10_10_10_2
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#endif //GL_UNSIGNED_INT_10_10_10_2
#ifndef GL_POLYGON_OFFSET_FILL
#define GL_POLYGON_OFFSET_FILL 0x8037
#endif //GL_POLYGON_OFFSET_FILL
#ifndef GL_POLYGON_OFFSET_FACTOR
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#endif //GL_POLYGON_OFFSET_FACTOR
#ifndef GL_RGB4
#define GL_RGB4 0x804F
#endif //GL_RGB4
#ifndef GL_RGB5
#define GL_RGB5 0x8050
#endif //GL_RGB5
#ifndef GL_RGB8
#define GL_RGB8 0x8051
#endif //GL_RGB8
#ifndef GL_RGB10
#define GL_RGB10 0x8052
#endif //GL_RGB10
#ifndef GL_RGB12
#define GL_RGB12 0x8053
#endif //GL_RGB12
#ifndef GL_RGB16
#define GL_RGB16 0x8054
#endif //GL_RGB16
#ifndef GL_RGBA2
#define GL_RGBA2 0x8055
#endif //GL_RGBA2
#ifndef GL_RGBA4
#define GL_RGBA4 0x8056
#endif //GL_RGBA4
#ifndef GL_RGB5_A1
#define GL_RGB5_A1 0x8057
#endif //GL_RGB5_A1
#ifndef GL_RGBA8
#define GL_RGBA8 0x8058
#endif //GL_RGBA8
#ifndef GL_RGB10_A2
#define GL_RGB10_A2 0x8059
#endif //GL_RGB10_A2
#ifndef GL_RGBA12
#define GL_RGBA12 0x805A
#endif //GL_RGBA12
#ifndef GL_RGBA16
#define GL_RGBA16 0x805B
#endif //GL_RGBA16
#ifndef GL_TEXTURE_RED_SIZE
#define GL_TEXTURE_RED_SIZE 0x805C
#endif //GL_TEXTURE_RED_SIZE
#ifndef GL_TEXTURE_GREEN_SIZE
#define GL_TEXTURE_GREEN_SIZE 0x805D
#endif //GL_TEXTURE_GREEN_SIZE
#ifndef GL_TEXTURE_BLUE_SIZE
#define GL_TEXTURE_BLUE_SIZE 0x805E
#endif //GL_TEXTURE_BLUE_SIZE
#ifndef GL_TEXTURE_ALPHA_SIZE
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#endif //GL_TEXTURE_ALPHA_SIZE
#ifndef GL_PROXY_TEXTURE_1D
#define GL_PROXY_TEXTURE_1D 0x8063
#endif //GL_PROXY_TEXTURE_1D
#ifndef GL_PROXY_TEXTURE_2D
#define GL_PROXY_TEXTURE_2D 0x8064
#endif //GL_PROXY_TEXTURE_2D
#ifndef GL_TEXTURE_BINDING_1D
#define GL_TEXTURE_BINDING_1D 0x8068
#endif //GL_TEXTURE_BINDING_1D
#ifndef GL_TEXTURE_BINDING_2D
#define GL_TEXTURE_BINDING_2D 0x8069
#endif //GL_TEXTURE_BINDING_2D
#ifndef GL_TEXTURE_BINDING_3D
#define GL_TEXTURE_BINDING_3D 0x806A
#endif //GL_TEXTURE_BINDING_3D
#ifndef GL_PACK_SKIP_IMAGES
#define GL_PACK_SKIP_IMAGES 0x806B
#endif //GL_PACK_SKIP_IMAGES
#ifndef GL_PACK_IMAGE_HEIGHT
#define GL_PACK_IMAGE_HEIGHT 0x806C
#endif //GL_PACK_IMAGE_HEIGHT
#ifndef GL_UNPACK_SKIP_IMAGES
#define GL_UNPACK_SKIP_IMAGES 0x806D
#endif //GL_UNPACK_SKIP_IMAGES
#ifndef GL_UNPACK_IMAGE_HEIGHT
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#endif //GL_UNPACK_IMAGE_HEIGHT
#ifndef GL_TEXTURE_3D
#define GL_TEXTURE_3D 0x806F
#endif //GL_TEXTURE_3D
#ifndef GL_PROXY_TEXTURE_3D
#define GL_PROXY_TEXTURE_3D 0x8070
#endif //GL_PROXY_TEXTURE_3D
#ifndef GL_TEXTURE_DEPTH
#define GL_TEXTURE_DEPTH 0x8071
#endif //GL_TEXTURE_DEPTH
#ifndef GL_TEXTURE_WRAP_R
#define GL_TEXTURE_WRAP_R 0x8072
#endif //GL_TEXTURE_WRAP_R
#ifndef GL_MAX_3D_TEXTURE_SIZE
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#endif //GL_MAX_3D_TEXTURE_SIZE
#ifndef GL_MULTISAMPLE
#define GL_MULTISAMPLE 0x809D
#endif //GL_MULTISAMPLE
#ifndef GL_SAMPLE_ALPHA_TO_COVERAGE
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#endif //GL_SAMPLE_ALPHA_TO_COVERAGE
#ifndef GL_SAMPLE_ALPHA_TO_ONE
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#endif //GL_SAMPLE_ALPHA_TO_ONE
#ifndef GL_SAMPLE_COVERAGE
#define GL_SAMPLE_COVERAGE 0x80A0
#endif //GL_SAMPLE_COVERAGE
#ifndef GL_SAMPLE_BUFFERS
#define GL_SAMPLE_BUFFERS 0x80A8
#endif //GL_SAMPLE_BUFFERS
#ifndef GL_SAMPLES
#define GL_SAMPLES 0x80A9
#endif //GL_SAMPLES
#ifndef GL_SAMPLE_COVERAGE_VALUE
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#endif //GL_SAMPLE_COVERAGE_VALUE
#ifndef GL_SAMPLE_COVERAGE_INVERT
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#endif //GL_SAMPLE_COVERAGE_INVERT
#ifndef GL_BLEND_DST_RGB
#define GL_BLEND_DST_RGB 0x80C8
#endif //GL_BLEND_DST_RGB
#ifndef GL_BLEND_SRC_RGB
#define GL_BLEND_SRC_RGB 0x80C9
#endif //GL_BLEND_SRC_RGB
#ifndef GL_BLEND_DST_ALPHA
#define GL_BLEND_DST_ALPHA 0x80CA
#endif //GL_BLEND_DST_ALPHA
#ifndef GL_BLEND_SRC_ALPHA
#define GL_BLEND_SRC_ALPHA 0x80CB
#endif //GL_BLEND_SRC_ALPHA
#ifndef GL_BGR
#define GL_BGR 0x80E0
#endif //GL_BGR
#ifndef GL_BGRA
#define GL_BGRA 0x80E1
#endif //GL_BGRA
#ifndef GL_MAX_ELEMENTS_VERTICES
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#endif //GL_MAX_ELEMENTS_VERTICES
#ifndef GL_MAX_ELEMENTS_INDICES
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#endif //GL_MAX_ELEMENTS_INDICES
#ifndef GL_POINT_FADE_THRESHOLD_SIZE
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#endif //GL_POINT_FADE_THRESHOLD_SIZE
#ifndef GL_CLAMP_TO_BORDER
#define GL_CLAMP_TO_BORDER 0x812D
#endif //GL_CLAMP_TO_BORDER
#ifndef GL_CLAMP_TO_EDGE
#define GL_CLAMP_TO_EDGE 0x812F
#endif //GL_CLAMP_TO_EDGE
#ifndef GL_TEXTURE_MIN_LOD
#define GL_TEXTURE_MIN_LOD 0x813A
#endif //GL_TEXTURE_MIN_LOD
#ifndef GL_TEXTURE_MAX_LOD
#define GL_TEXTURE_MAX_LOD 0x813B
#endif //GL_TEXTURE_MAX_LOD
#ifndef GL_TEXTURE_BASE_LEVEL
#define GL_TEXTURE_BASE_LEVEL 0x813C
#endif //GL_TEXTURE_BASE_LEVEL
#ifndef GL_TEXTURE_MAX_LEVEL
#define GL_TEXTURE_MAX_LEVEL 0x813D
#endif //GL_TEXTURE_MAX_LEVEL
#ifndef GL_DEPTH_COMPONENT16
#define GL_DEPTH_COMPONENT16 0x81A5
#endif //GL_DEPTH_COMPONENT16
#ifndef GL_DEPTH_COMPONENT24
#define GL_DEPTH_COMPONENT24 0x81A6
#endif //GL_DEPTH_COMPONENT24
#ifndef GL_DEPTH_COMPONENT32
#define GL_DEPTH_COMPONENT32 0x81A7
#endif //GL_DEPTH_COMPONENT32
#ifndef GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#endif //GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
#ifndef GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#endif //GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#endif //GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#endif //GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#endif //GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#endif //GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#endif //GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#endif //GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
#ifndef GL_FRAMEBUFFER_DEFAULT
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#endif //GL_FRAMEBUFFER_DEFAULT
#ifndef GL_FRAMEBUFFER_UNDEFINED
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#endif //GL_FRAMEBUFFER_UNDEFINED
#ifndef GL_DEPTH_STENCIL_ATTACHMENT
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#endif //GL_DEPTH_STENCIL_ATTACHMENT
#ifndef GL_MAJOR_VERSION
#define GL_MAJOR_VERSION 0x821B
#endif //GL_MAJOR_VERSION
#ifndef GL_MINOR_VERSION
#define GL_MINOR_VERSION 0x821C
#endif //GL_MINOR_VERSION
#ifndef GL_NUM_EXTENSIONS
#define GL_NUM_EXTENSIONS 0x821D
#endif //GL_NUM_EXTENSIONS
#ifndef GL_CONTEXT_FLAGS
#define GL_CONTEXT_FLAGS 0x821E
#endif //GL_CONTEXT_FLAGS
#ifndef GL_COMPRESSED_RED
#define GL_COMPRESSED_RED 0x8225
#endif //GL_COMPRESSED_RED
#ifndef GL_COMPRESSED_RG
#define GL_COMPRESSED_RG 0x8226
#endif //GL_COMPRESSED_RG
#ifndef GL_RG
#define GL_RG 0x8227
#endif //GL_RG
#ifndef GL_RG_INTEGER
#define GL_RG_INTEGER 0x8228
#endif //GL_RG_INTEGER
#ifndef GL_R8
#define GL_R8 0x8229
#endif //GL_R8
#ifndef GL_R16
#define GL_R16 0x822A
#endif //GL_R16
#ifndef GL_RG8
#define GL_RG8 0x822B
#endif //GL_RG8
#ifndef GL_RG16
#define GL_RG16 0x822C
#endif //GL_RG16
#ifndef GL_R16F
#define GL_R16F 0x822D
#endif //GL_R16F
#ifndef GL_R32F
#define GL_R32F 0x822E
#endif //GL_R32F
#ifndef GL_RG16F
#define GL_RG16F 0x822F
#endif //GL_RG16F
#ifndef GL_RG32F
#define GL_RG32F 0x8230
#endif //GL_RG32F
#ifndef GL_R8I
#define GL_R8I 0x8231
#endif //GL_R8I
#ifndef GL_R8UI
#define GL_R8UI 0x8232
#endif //GL_R8UI
#ifndef GL_R16I
#define GL_R16I 0x8233
#endif //GL_R16I
#ifndef GL_R16UI
#define GL_R16UI 0x8234
#endif //GL_R16UI
#ifndef GL_R32I
#define GL_R32I 0x8235
#endif //GL_R32I
#ifndef GL_R32UI
#define GL_R32UI 0x8236
#endif //GL_R32UI
#ifndef GL_RG8I
#define GL_RG8I 0x8237
#endif //GL_RG8I
#ifndef GL_RG8UI
#define GL_RG8UI 0x8238
#endif //GL_RG8UI
#ifndef GL_RG16I
#define GL_RG16I 0x8239
#endif //GL_RG16I
#ifndef GL_RG16UI
#define GL_RG16UI 0x823A
#endif //GL_RG16UI
#ifndef GL_RG32I
#define GL_RG32I 0x823B
#endif //GL_RG32I
#ifndef GL_RG32UI
#define GL_RG32UI 0x823C
#endif //GL_RG32UI
#ifndef GL_DEBUG_OUTPUT_SYNCHRONOUS
#define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#endif //GL_DEBUG_OUTPUT_SYNCHRONOUS
#ifndef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#endif //GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#ifndef GL_DEBUG_CALLBACK_FUNCTION
#define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#endif //GL_DEBUG_CALLBACK_FUNCTION
#ifndef GL_DEBUG_CALLBACK_USER_PARAM
#define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#endif //GL_DEBUG_CALLBACK_USER_PARAM
#ifndef GL_DEBUG_SOURCE_API
#define GL_DEBUG_SOURCE_API 0x8246
#endif //GL_DEBUG_SOURCE_API
#ifndef GL_DEBUG_SOURCE_WINDOW_SYSTEM
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#endif //GL_DEBUG_SOURCE_WINDOW_SYSTEM
#ifndef GL_DEBUG_SOURCE_SHADER_COMPILER
#define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#endif //GL_DEBUG_SOURCE_SHADER_COMPILER
#ifndef GL_DEBUG_SOURCE_THIRD_PARTY
#define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#endif //GL_DEBUG_SOURCE_THIRD_PARTY
#ifndef GL_DEBUG_SOURCE_APPLICATION
#define GL_DEBUG_SOURCE_APPLICATION 0x824A
#endif //GL_DEBUG_SOURCE_APPLICATION
#ifndef GL_DEBUG_SOURCE_OTHER
#define GL_DEBUG_SOURCE_OTHER 0x824B
#endif //GL_DEBUG_SOURCE_OTHER
#ifndef GL_DEBUG_TYPE_ERROR
#define GL_DEBUG_TYPE_ERROR 0x824C
#endif //GL_DEBUG_TYPE_ERROR
#ifndef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#endif //GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#ifndef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#endif //GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#ifndef GL_DEBUG_TYPE_PORTABILITY
#define GL_DEBUG_TYPE_PORTABILITY 0x824F
#endif //GL_DEBUG_TYPE_PORTABILITY
#ifndef GL_DEBUG_TYPE_PERFORMANCE
#define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#endif //GL_DEBUG_TYPE_PERFORMANCE
#ifndef GL_DEBUG_TYPE_OTHER
#define GL_DEBUG_TYPE_OTHER 0x8251
#endif //GL_DEBUG_TYPE_OTHER
#ifndef GL_PROGRAM_BINARY_RETRIEVABLE_HINT
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#endif //GL_PROGRAM_BINARY_RETRIEVABLE_HINT
#ifndef GL_PROGRAM_SEPARABLE
#define GL_PROGRAM_SEPARABLE 0x8258
#endif //GL_PROGRAM_SEPARABLE
#ifndef GL_ACTIVE_PROGRAM
#define GL_ACTIVE_PROGRAM 0x8259
#endif //GL_ACTIVE_PROGRAM
#ifndef GL_PROGRAM_PIPELINE_BINDING
#define GL_PROGRAM_PIPELINE_BINDING 0x825A
#endif //GL_PROGRAM_PIPELINE_BINDING
#ifndef GL_MAX_VIEWPORTS
#define GL_MAX_VIEWPORTS 0x825B
#endif //GL_MAX_VIEWPORTS
#ifndef GL_VIEWPORT_SUBPIXEL_BITS
#define GL_VIEWPORT_SUBPIXEL_BITS 0x825C
#endif //GL_VIEWPORT_SUBPIXEL_BITS
#ifndef GL_VIEWPORT_BOUNDS_RANGE
#define GL_VIEWPORT_BOUNDS_RANGE 0x825D
#endif //GL_VIEWPORT_BOUNDS_RANGE
#ifndef GL_LAYER_PROVOKING_VERTEX
#define GL_LAYER_PROVOKING_VERTEX 0x825E
#endif //GL_LAYER_PROVOKING_VERTEX
#ifndef GL_VIEWPORT_INDEX_PROVOKING_VERTEX
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
#endif //GL_VIEWPORT_INDEX_PROVOKING_VERTEX
#ifndef GL_UNDEFINED_VERTEX
#define GL_UNDEFINED_VERTEX 0x8260
#endif //GL_UNDEFINED_VERTEX
#ifndef GL_MAX_COMPUTE_SHARED_MEMORY_SIZE
#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0x8262
#endif //GL_MAX_COMPUTE_SHARED_MEMORY_SIZE
#ifndef GL_MAX_COMPUTE_UNIFORM_COMPONENTS
#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0x8263
#endif //GL_MAX_COMPUTE_UNIFORM_COMPONENTS
#ifndef GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS
#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0x8264
#endif //GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS
#ifndef GL_MAX_COMPUTE_ATOMIC_COUNTERS
#define GL_MAX_COMPUTE_ATOMIC_COUNTERS 0x8265
#endif //GL_MAX_COMPUTE_ATOMIC_COUNTERS
#ifndef GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS
#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0x8266
#endif //GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS
#ifndef GL_COMPUTE_WORK_GROUP_SIZE
#define GL_COMPUTE_WORK_GROUP_SIZE 0x8267
#endif //GL_COMPUTE_WORK_GROUP_SIZE
#ifndef GL_DEBUG_TYPE_MARKER
#define GL_DEBUG_TYPE_MARKER 0x8268
#endif //GL_DEBUG_TYPE_MARKER
#ifndef GL_DEBUG_TYPE_PUSH_GROUP
#define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#endif //GL_DEBUG_TYPE_PUSH_GROUP
#ifndef GL_DEBUG_TYPE_POP_GROUP
#define GL_DEBUG_TYPE_POP_GROUP 0x826A
#endif //GL_DEBUG_TYPE_POP_GROUP
#ifndef GL_DEBUG_SEVERITY_NOTIFICATION
#define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#endif //GL_DEBUG_SEVERITY_NOTIFICATION
#ifndef GL_MAX_DEBUG_GROUP_STACK_DEPTH
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#endif //GL_MAX_DEBUG_GROUP_STACK_DEPTH
#ifndef GL_DEBUG_GROUP_STACK_DEPTH
#define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#endif //GL_DEBUG_GROUP_STACK_DEPTH
#ifndef GL_MAX_UNIFORM_LOCATIONS
#define GL_MAX_UNIFORM_LOCATIONS 0x826E
#endif //GL_MAX_UNIFORM_LOCATIONS
#ifndef GL_INTERNALFORMAT_SUPPORTED
#define GL_INTERNALFORMAT_SUPPORTED 0x826F
#endif //GL_INTERNALFORMAT_SUPPORTED
#ifndef GL_INTERNALFORMAT_PREFERRED
#define GL_INTERNALFORMAT_PREFERRED 0x8270
#endif //GL_INTERNALFORMAT_PREFERRED
#ifndef GL_INTERNALFORMAT_RED_SIZE
#define GL_INTERNALFORMAT_RED_SIZE 0x8271
#endif //GL_INTERNALFORMAT_RED_SIZE
#ifndef GL_INTERNALFORMAT_GREEN_SIZE
#define GL_INTERNALFORMAT_GREEN_SIZE 0x8272
#endif //GL_INTERNALFORMAT_GREEN_SIZE
#ifndef GL_INTERNALFORMAT_BLUE_SIZE
#define GL_INTERNALFORMAT_BLUE_SIZE 0x8273
#endif //GL_INTERNALFORMAT_BLUE_SIZE
#ifndef GL_INTERNALFORMAT_ALPHA_SIZE
#define GL_INTERNALFORMAT_ALPHA_SIZE 0x8274
#endif //GL_INTERNALFORMAT_ALPHA_SIZE
#ifndef GL_INTERNALFORMAT_DEPTH_SIZE
#define GL_INTERNALFORMAT_DEPTH_SIZE 0x8275
#endif //GL_INTERNALFORMAT_DEPTH_SIZE
#ifndef GL_INTERNALFORMAT_STENCIL_SIZE
#define GL_INTERNALFORMAT_STENCIL_SIZE 0x8276
#endif //GL_INTERNALFORMAT_STENCIL_SIZE
#ifndef GL_INTERNALFORMAT_SHARED_SIZE
#define GL_INTERNALFORMAT_SHARED_SIZE 0x8277
#endif //GL_INTERNALFORMAT_SHARED_SIZE
#ifndef GL_INTERNALFORMAT_RED_TYPE
#define GL_INTERNALFORMAT_RED_TYPE 0x8278
#endif //GL_INTERNALFORMAT_RED_TYPE
#ifndef GL_INTERNALFORMAT_GREEN_TYPE
#define GL_INTERNALFORMAT_GREEN_TYPE 0x8279
#endif //GL_INTERNALFORMAT_GREEN_TYPE
#ifndef GL_INTERNALFORMAT_BLUE_TYPE
#define GL_INTERNALFORMAT_BLUE_TYPE 0x827A
#endif //GL_INTERNALFORMAT_BLUE_TYPE
#ifndef GL_INTERNALFORMAT_ALPHA_TYPE
#define GL_INTERNALFORMAT_ALPHA_TYPE 0x827B
#endif //GL_INTERNALFORMAT_ALPHA_TYPE
#ifndef GL_INTERNALFORMAT_DEPTH_TYPE
#define GL_INTERNALFORMAT_DEPTH_TYPE 0x827C
#endif //GL_INTERNALFORMAT_DEPTH_TYPE
#ifndef GL_INTERNALFORMAT_STENCIL_TYPE
#define GL_INTERNALFORMAT_STENCIL_TYPE 0x827D
#endif //GL_INTERNALFORMAT_STENCIL_TYPE
#ifndef GL_MAX_WIDTH
#define GL_MAX_WIDTH 0x827E
#endif //GL_MAX_WIDTH
#ifndef GL_MAX_HEIGHT
#define GL_MAX_HEIGHT 0x827F
#endif //GL_MAX_HEIGHT
#ifndef GL_MAX_DEPTH
#define GL_MAX_DEPTH 0x8280
#endif //GL_MAX_DEPTH
#ifndef GL_MAX_LAYERS
#define GL_MAX_LAYERS 0x8281
#endif //GL_MAX_LAYERS
#ifndef GL_MAX_COMBINED_DIMENSIONS
#define GL_MAX_COMBINED_DIMENSIONS 0x8282
#endif //GL_MAX_COMBINED_DIMENSIONS
#ifndef GL_COLOR_COMPONENTS
#define GL_COLOR_COMPONENTS 0x8283
#endif //GL_COLOR_COMPONENTS
#ifndef GL_DEPTH_COMPONENTS
#define GL_DEPTH_COMPONENTS 0x8284
#endif //GL_DEPTH_COMPONENTS
#ifndef GL_STENCIL_COMPONENTS
#define GL_STENCIL_COMPONENTS 0x8285
#endif //GL_STENCIL_COMPONENTS
#ifndef GL_COLOR_RENDERABLE
#define GL_COLOR_RENDERABLE 0x8286
#endif //GL_COLOR_RENDERABLE
#ifndef GL_DEPTH_RENDERABLE
#define GL_DEPTH_RENDERABLE 0x8287
#endif //GL_DEPTH_RENDERABLE
#ifndef GL_STENCIL_RENDERABLE
#define GL_STENCIL_RENDERABLE 0x8288
#endif //GL_STENCIL_RENDERABLE
#ifndef GL_FRAMEBUFFER_RENDERABLE
#define GL_FRAMEBUFFER_RENDERABLE 0x8289
#endif //GL_FRAMEBUFFER_RENDERABLE
#ifndef GL_FRAMEBUFFER_RENDERABLE_LAYERED
#define GL_FRAMEBUFFER_RENDERABLE_LAYERED 0x828A
#endif //GL_FRAMEBUFFER_RENDERABLE_LAYERED
#ifndef GL_FRAMEBUFFER_BLEND
#define GL_FRAMEBUFFER_BLEND 0x828B
#endif //GL_FRAMEBUFFER_BLEND
#ifndef GL_READ_PIXELS
#define GL_READ_PIXELS 0x828C
#endif //GL_READ_PIXELS
#ifndef GL_READ_PIXELS_FORMAT
#define GL_READ_PIXELS_FORMAT 0x828D
#endif //GL_READ_PIXELS_FORMAT
#ifndef GL_READ_PIXELS_TYPE
#define GL_READ_PIXELS_TYPE 0x828E
#endif //GL_READ_PIXELS_TYPE
#ifndef GL_TEXTURE_IMAGE_FORMAT
#define GL_TEXTURE_IMAGE_FORMAT 0x828F
#endif //GL_TEXTURE_IMAGE_FORMAT
#ifndef GL_TEXTURE_IMAGE_TYPE
#define GL_TEXTURE_IMAGE_TYPE 0x8290
#endif //GL_TEXTURE_IMAGE_TYPE
#ifndef GL_GET_TEXTURE_IMAGE_FORMAT
#define GL_GET_TEXTURE_IMAGE_FORMAT 0x8291
#endif //GL_GET_TEXTURE_IMAGE_FORMAT
#ifndef GL_GET_TEXTURE_IMAGE_TYPE
#define GL_GET_TEXTURE_IMAGE_TYPE 0x8292
#endif //GL_GET_TEXTURE_IMAGE_TYPE
#ifndef GL_MIPMAP
#define GL_MIPMAP 0x8293
#endif //GL_MIPMAP
#ifndef GL_MANUAL_GENERATE_MIPMAP
#define GL_MANUAL_GENERATE_MIPMAP 0x8294
#endif //GL_MANUAL_GENERATE_MIPMAP
#ifndef GL_AUTO_GENERATE_MIPMAP
#define GL_AUTO_GENERATE_MIPMAP 0x8295
#endif //GL_AUTO_GENERATE_MIPMAP
#ifndef GL_COLOR_ENCODING
#define GL_COLOR_ENCODING 0x8296
#endif //GL_COLOR_ENCODING
#ifndef GL_SRGB_READ
#define GL_SRGB_READ 0x8297
#endif //GL_SRGB_READ
#ifndef GL_SRGB_WRITE
#define GL_SRGB_WRITE 0x8298
#endif //GL_SRGB_WRITE
#ifndef GL_FILTER
#define GL_FILTER 0x829A
#endif //GL_FILTER
#ifndef GL_VERTEX_TEXTURE
#define GL_VERTEX_TEXTURE 0x829B
#endif //GL_VERTEX_TEXTURE
#ifndef GL_TESS_CONTROL_TEXTURE
#define GL_TESS_CONTROL_TEXTURE 0x829C
#endif //GL_TESS_CONTROL_TEXTURE
#ifndef GL_TESS_EVALUATION_TEXTURE
#define GL_TESS_EVALUATION_TEXTURE 0x829D
#endif //GL_TESS_EVALUATION_TEXTURE
#ifndef GL_GEOMETRY_TEXTURE
#define GL_GEOMETRY_TEXTURE 0x829E
#endif //GL_GEOMETRY_TEXTURE
#ifndef GL_FRAGMENT_TEXTURE
#define GL_FRAGMENT_TEXTURE 0x829F
#endif //GL_FRAGMENT_TEXTURE
#ifndef GL_COMPUTE_TEXTURE
#define GL_COMPUTE_TEXTURE 0x82A0
#endif //GL_COMPUTE_TEXTURE
#ifndef GL_TEXTURE_SHADOW
#define GL_TEXTURE_SHADOW 0x82A1
#endif //GL_TEXTURE_SHADOW
#ifndef GL_TEXTURE_GATHER
#define GL_TEXTURE_GATHER 0x82A2
#endif //GL_TEXTURE_GATHER
#ifndef GL_TEXTURE_GATHER_SHADOW
#define GL_TEXTURE_GATHER_SHADOW 0x82A3
#endif //GL_TEXTURE_GATHER_SHADOW
#ifndef GL_SHADER_IMAGE_LOAD
#define GL_SHADER_IMAGE_LOAD 0x82A4
#endif //GL_SHADER_IMAGE_LOAD
#ifndef GL_SHADER_IMAGE_STORE
#define GL_SHADER_IMAGE_STORE 0x82A5
#endif //GL_SHADER_IMAGE_STORE
#ifndef GL_SHADER_IMAGE_ATOMIC
#define GL_SHADER_IMAGE_ATOMIC 0x82A6
#endif //GL_SHADER_IMAGE_ATOMIC
#ifndef GL_IMAGE_TEXEL_SIZE
#define GL_IMAGE_TEXEL_SIZE 0x82A7
#endif //GL_IMAGE_TEXEL_SIZE
#ifndef GL_IMAGE_COMPATIBILITY_CLASS
#define GL_IMAGE_COMPATIBILITY_CLASS 0x82A8
#endif //GL_IMAGE_COMPATIBILITY_CLASS
#ifndef GL_IMAGE_PIXEL_FORMAT
#define GL_IMAGE_PIXEL_FORMAT 0x82A9
#endif //GL_IMAGE_PIXEL_FORMAT
#ifndef GL_IMAGE_PIXEL_TYPE
#define GL_IMAGE_PIXEL_TYPE 0x82AA
#endif //GL_IMAGE_PIXEL_TYPE
#ifndef GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST 0x82AC
#endif //GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST
#ifndef GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST 0x82AD
#endif //GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST
#ifndef GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE 0x82AE
#endif //GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE
#ifndef GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE 0x82AF
#endif //GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE
#ifndef GL_TEXTURE_COMPRESSED_BLOCK_WIDTH
#define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH 0x82B1
#endif //GL_TEXTURE_COMPRESSED_BLOCK_WIDTH
#ifndef GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT
#define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT 0x82B2
#endif //GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT
#ifndef GL_TEXTURE_COMPRESSED_BLOCK_SIZE
#define GL_TEXTURE_COMPRESSED_BLOCK_SIZE 0x82B3
#endif //GL_TEXTURE_COMPRESSED_BLOCK_SIZE
#ifndef GL_CLEAR_BUFFER
#define GL_CLEAR_BUFFER 0x82B4
#endif //GL_CLEAR_BUFFER
#ifndef GL_TEXTURE_VIEW
#define GL_TEXTURE_VIEW 0x82B5
#endif //GL_TEXTURE_VIEW
#ifndef GL_VIEW_COMPATIBILITY_CLASS
#define GL_VIEW_COMPATIBILITY_CLASS 0x82B6
#endif //GL_VIEW_COMPATIBILITY_CLASS
#ifndef GL_FULL_SUPPORT
#define GL_FULL_SUPPORT 0x82B7
#endif //GL_FULL_SUPPORT
#ifndef GL_CAVEAT_SUPPORT
#define GL_CAVEAT_SUPPORT 0x82B8
#endif //GL_CAVEAT_SUPPORT
#ifndef GL_IMAGE_CLASS_4_X_32
#define GL_IMAGE_CLASS_4_X_32 0x82B9
#endif //GL_IMAGE_CLASS_4_X_32
#ifndef GL_IMAGE_CLASS_2_X_32
#define GL_IMAGE_CLASS_2_X_32 0x82BA
#endif //GL_IMAGE_CLASS_2_X_32
#ifndef GL_IMAGE_CLASS_1_X_32
#define GL_IMAGE_CLASS_1_X_32 0x82BB
#endif //GL_IMAGE_CLASS_1_X_32
#ifndef GL_IMAGE_CLASS_4_X_16
#define GL_IMAGE_CLASS_4_X_16 0x82BC
#endif //GL_IMAGE_CLASS_4_X_16
#ifndef GL_IMAGE_CLASS_2_X_16
#define GL_IMAGE_CLASS_2_X_16 0x82BD
#endif //GL_IMAGE_CLASS_2_X_16
#ifndef GL_IMAGE_CLASS_1_X_16
#define GL_IMAGE_CLASS_1_X_16 0x82BE
#endif //GL_IMAGE_CLASS_1_X_16
#ifndef GL_IMAGE_CLASS_4_X_8
#define GL_IMAGE_CLASS_4_X_8 0x82BF
#endif //GL_IMAGE_CLASS_4_X_8
#ifndef GL_IMAGE_CLASS_2_X_8
#define GL_IMAGE_CLASS_2_X_8 0x82C0
#endif //GL_IMAGE_CLASS_2_X_8
#ifndef GL_IMAGE_CLASS_1_X_8
#define GL_IMAGE_CLASS_1_X_8 0x82C1
#endif //GL_IMAGE_CLASS_1_X_8
#ifndef GL_IMAGE_CLASS_11_11_10
#define GL_IMAGE_CLASS_11_11_10 0x82C2
#endif //GL_IMAGE_CLASS_11_11_10
#ifndef GL_IMAGE_CLASS_10_10_10_2
#define GL_IMAGE_CLASS_10_10_10_2 0x82C3
#endif //GL_IMAGE_CLASS_10_10_10_2
#ifndef GL_VIEW_CLASS_128_BITS
#define GL_VIEW_CLASS_128_BITS 0x82C4
#endif //GL_VIEW_CLASS_128_BITS
#ifndef GL_VIEW_CLASS_96_BITS
#define GL_VIEW_CLASS_96_BITS 0x82C5
#endif //GL_VIEW_CLASS_96_BITS
#ifndef GL_VIEW_CLASS_64_BITS
#define GL_VIEW_CLASS_64_BITS 0x82C6
#endif //GL_VIEW_CLASS_64_BITS
#ifndef GL_VIEW_CLASS_48_BITS
#define GL_VIEW_CLASS_48_BITS 0x82C7
#endif //GL_VIEW_CLASS_48_BITS
#ifndef GL_VIEW_CLASS_32_BITS
#define GL_VIEW_CLASS_32_BITS 0x82C8
#endif //GL_VIEW_CLASS_32_BITS
#ifndef GL_VIEW_CLASS_24_BITS
#define GL_VIEW_CLASS_24_BITS 0x82C9
#endif //GL_VIEW_CLASS_24_BITS
#ifndef GL_VIEW_CLASS_16_BITS
#define GL_VIEW_CLASS_16_BITS 0x82CA
#endif //GL_VIEW_CLASS_16_BITS
#ifndef GL_VIEW_CLASS_8_BITS
#define GL_VIEW_CLASS_8_BITS 0x82CB
#endif //GL_VIEW_CLASS_8_BITS
#ifndef GL_VIEW_CLASS_S3TC_DXT1_RGB
#define GL_VIEW_CLASS_S3TC_DXT1_RGB 0x82CC
#endif //GL_VIEW_CLASS_S3TC_DXT1_RGB
#ifndef GL_VIEW_CLASS_S3TC_DXT1_RGBA
#define GL_VIEW_CLASS_S3TC_DXT1_RGBA 0x82CD
#endif //GL_VIEW_CLASS_S3TC_DXT1_RGBA
#ifndef GL_VIEW_CLASS_S3TC_DXT3_RGBA
#define GL_VIEW_CLASS_S3TC_DXT3_RGBA 0x82CE
#endif //GL_VIEW_CLASS_S3TC_DXT3_RGBA
#ifndef GL_VIEW_CLASS_S3TC_DXT5_RGBA
#define GL_VIEW_CLASS_S3TC_DXT5_RGBA 0x82CF
#endif //GL_VIEW_CLASS_S3TC_DXT5_RGBA
#ifndef GL_VIEW_CLASS_RGTC1_RED
#define GL_VIEW_CLASS_RGTC1_RED 0x82D0
#endif //GL_VIEW_CLASS_RGTC1_RED
#ifndef GL_VIEW_CLASS_RGTC2_RG
#define GL_VIEW_CLASS_RGTC2_RG 0x82D1
#endif //GL_VIEW_CLASS_RGTC2_RG
#ifndef GL_VIEW_CLASS_BPTC_UNORM
#define GL_VIEW_CLASS_BPTC_UNORM 0x82D2
#endif //GL_VIEW_CLASS_BPTC_UNORM
#ifndef GL_VIEW_CLASS_BPTC_FLOAT
#define GL_VIEW_CLASS_BPTC_FLOAT 0x82D3
#endif //GL_VIEW_CLASS_BPTC_FLOAT
#ifndef GL_VERTEX_ATTRIB_BINDING
#define GL_VERTEX_ATTRIB_BINDING 0x82D4
#endif //GL_VERTEX_ATTRIB_BINDING
#ifndef GL_VERTEX_ATTRIB_RELATIVE_OFFSET
#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D5
#endif //GL_VERTEX_ATTRIB_RELATIVE_OFFSET
#ifndef GL_VERTEX_BINDING_DIVISOR
#define GL_VERTEX_BINDING_DIVISOR 0x82D6
#endif //GL_VERTEX_BINDING_DIVISOR
#ifndef GL_VERTEX_BINDING_OFFSET
#define GL_VERTEX_BINDING_OFFSET 0x82D7
#endif //GL_VERTEX_BINDING_OFFSET
#ifndef GL_VERTEX_BINDING_STRIDE
#define GL_VERTEX_BINDING_STRIDE 0x82D8
#endif //GL_VERTEX_BINDING_STRIDE
#ifndef GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET
#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D9
#endif //GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET
#ifndef GL_MAX_VERTEX_ATTRIB_BINDINGS
#define GL_MAX_VERTEX_ATTRIB_BINDINGS 0x82DA
#endif //GL_MAX_VERTEX_ATTRIB_BINDINGS
#ifndef GL_TEXTURE_VIEW_MIN_LEVEL
#define GL_TEXTURE_VIEW_MIN_LEVEL 0x82DB
#endif //GL_TEXTURE_VIEW_MIN_LEVEL
#ifndef GL_TEXTURE_VIEW_NUM_LEVELS
#define GL_TEXTURE_VIEW_NUM_LEVELS 0x82DC
#endif //GL_TEXTURE_VIEW_NUM_LEVELS
#ifndef GL_TEXTURE_VIEW_MIN_LAYER
#define GL_TEXTURE_VIEW_MIN_LAYER 0x82DD
#endif //GL_TEXTURE_VIEW_MIN_LAYER
#ifndef GL_TEXTURE_VIEW_NUM_LAYERS
#define GL_TEXTURE_VIEW_NUM_LAYERS 0x82DE
#endif //GL_TEXTURE_VIEW_NUM_LAYERS
#ifndef GL_TEXTURE_IMMUTABLE_LEVELS
#define GL_TEXTURE_IMMUTABLE_LEVELS 0x82DF
#endif //GL_TEXTURE_IMMUTABLE_LEVELS
#ifndef GL_BUFFER
#define GL_BUFFER 0x82E0
#endif //GL_BUFFER
#ifndef GL_SHADER
#define GL_SHADER 0x82E1
#endif //GL_SHADER
#ifndef GL_PROGRAM
#define GL_PROGRAM 0x82E2
#endif //GL_PROGRAM
#ifndef GL_QUERY
#define GL_QUERY 0x82E3
#endif //GL_QUERY
#ifndef GL_PROGRAM_PIPELINE
#define GL_PROGRAM_PIPELINE 0x82E4
#endif //GL_PROGRAM_PIPELINE
#ifndef GL_SAMPLER
#define GL_SAMPLER 0x82E6
#endif //GL_SAMPLER
#ifndef GL_MAX_LABEL_LENGTH
#define GL_MAX_LABEL_LENGTH 0x82E8
#endif //GL_MAX_LABEL_LENGTH
#ifndef GL_NUM_SHADING_LANGUAGE_VERSIONS
#define GL_NUM_SHADING_LANGUAGE_VERSIONS 0x82E9
#endif //GL_NUM_SHADING_LANGUAGE_VERSIONS
#ifndef GL_UNSIGNED_BYTE_2_3_3_REV
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#endif //GL_UNSIGNED_BYTE_2_3_3_REV
#ifndef GL_UNSIGNED_SHORT_5_6_5
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#endif //GL_UNSIGNED_SHORT_5_6_5
#ifndef GL_UNSIGNED_SHORT_5_6_5_REV
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#endif //GL_UNSIGNED_SHORT_5_6_5_REV
#ifndef GL_UNSIGNED_SHORT_4_4_4_4_REV
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#endif //GL_UNSIGNED_SHORT_4_4_4_4_REV
#ifndef GL_UNSIGNED_SHORT_1_5_5_5_REV
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#endif //GL_UNSIGNED_SHORT_1_5_5_5_REV
#ifndef GL_UNSIGNED_INT_8_8_8_8_REV
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#endif //GL_UNSIGNED_INT_8_8_8_8_REV
#ifndef GL_UNSIGNED_INT_2_10_10_10_REV
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#endif //GL_UNSIGNED_INT_2_10_10_10_REV
#ifndef GL_MIRRORED_REPEAT
#define GL_MIRRORED_REPEAT 0x8370
#endif //GL_MIRRORED_REPEAT
#ifndef GL_ALIASED_LINE_WIDTH_RANGE
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#endif //GL_ALIASED_LINE_WIDTH_RANGE
#ifndef GL_TEXTURE0
#define GL_TEXTURE0 0x84C0
#endif //GL_TEXTURE0
#ifndef GL_TEXTURE1
#define GL_TEXTURE1 0x84C1
#endif //GL_TEXTURE1
#ifndef GL_TEXTURE2
#define GL_TEXTURE2 0x84C2
#endif //GL_TEXTURE2
#ifndef GL_TEXTURE3
#define GL_TEXTURE3 0x84C3
#endif //GL_TEXTURE3
#ifndef GL_TEXTURE4
#define GL_TEXTURE4 0x84C4
#endif //GL_TEXTURE4
#ifndef GL_TEXTURE5
#define GL_TEXTURE5 0x84C5
#endif //GL_TEXTURE5
#ifndef GL_TEXTURE6
#define GL_TEXTURE6 0x84C6
#endif //GL_TEXTURE6
#ifndef GL_TEXTURE7
#define GL_TEXTURE7 0x84C7
#endif //GL_TEXTURE7
#ifndef GL_TEXTURE8
#define GL_TEXTURE8 0x84C8
#endif //GL_TEXTURE8
#ifndef GL_TEXTURE9
#define GL_TEXTURE9 0x84C9
#endif //GL_TEXTURE9
#ifndef GL_TEXTURE10
#define GL_TEXTURE10 0x84CA
#endif //GL_TEXTURE10
#ifndef GL_TEXTURE11
#define GL_TEXTURE11 0x84CB
#endif //GL_TEXTURE11
#ifndef GL_TEXTURE12
#define GL_TEXTURE12 0x84CC
#endif //GL_TEXTURE12
#ifndef GL_TEXTURE13
#define GL_TEXTURE13 0x84CD
#endif //GL_TEXTURE13
#ifndef GL_TEXTURE14
#define GL_TEXTURE14 0x84CE
#endif //GL_TEXTURE14
#ifndef GL_TEXTURE15
#define GL_TEXTURE15 0x84CF
#endif //GL_TEXTURE15
#ifndef GL_TEXTURE16
#define GL_TEXTURE16 0x84D0
#endif //GL_TEXTURE16
#ifndef GL_TEXTURE17
#define GL_TEXTURE17 0x84D1
#endif //GL_TEXTURE17
#ifndef GL_TEXTURE18
#define GL_TEXTURE18 0x84D2
#endif //GL_TEXTURE18
#ifndef GL_TEXTURE19
#define GL_TEXTURE19 0x84D3
#endif //GL_TEXTURE19
#ifndef GL_TEXTURE20
#define GL_TEXTURE20 0x84D4
#endif //GL_TEXTURE20
#ifndef GL_TEXTURE21
#define GL_TEXTURE21 0x84D5
#endif //GL_TEXTURE21
#ifndef GL_TEXTURE22
#define GL_TEXTURE22 0x84D6
#endif //GL_TEXTURE22
#ifndef GL_TEXTURE23
#define GL_TEXTURE23 0x84D7
#endif //GL_TEXTURE23
#ifndef GL_TEXTURE24
#define GL_TEXTURE24 0x84D8
#endif //GL_TEXTURE24
#ifndef GL_TEXTURE25
#define GL_TEXTURE25 0x84D9
#endif //GL_TEXTURE25
#ifndef GL_TEXTURE26
#define GL_TEXTURE26 0x84DA
#endif //GL_TEXTURE26
#ifndef GL_TEXTURE27
#define GL_TEXTURE27 0x84DB
#endif //GL_TEXTURE27
#ifndef GL_TEXTURE28
#define GL_TEXTURE28 0x84DC
#endif //GL_TEXTURE28
#ifndef GL_TEXTURE29
#define GL_TEXTURE29 0x84DD
#endif //GL_TEXTURE29
#ifndef GL_TEXTURE30
#define GL_TEXTURE30 0x84DE
#endif //GL_TEXTURE30
#ifndef GL_TEXTURE31
#define GL_TEXTURE31 0x84DF
#endif //GL_TEXTURE31
#ifndef GL_ACTIVE_TEXTURE
#define GL_ACTIVE_TEXTURE 0x84E0
#endif //GL_ACTIVE_TEXTURE
#ifndef GL_MAX_RENDERBUFFER_SIZE
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#endif //GL_MAX_RENDERBUFFER_SIZE
#ifndef GL_COMPRESSED_RGB
#define GL_COMPRESSED_RGB 0x84ED
#endif //GL_COMPRESSED_RGB
#ifndef GL_COMPRESSED_RGBA
#define GL_COMPRESSED_RGBA 0x84EE
#endif //GL_COMPRESSED_RGBA
#ifndef GL_TEXTURE_COMPRESSION_HINT
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#endif //GL_TEXTURE_COMPRESSION_HINT
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
#endif //GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
#endif //GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER
#ifndef GL_TEXTURE_RECTANGLE
#define GL_TEXTURE_RECTANGLE 0x84F5
#endif //GL_TEXTURE_RECTANGLE
#ifndef GL_TEXTURE_BINDING_RECTANGLE
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#endif //GL_TEXTURE_BINDING_RECTANGLE
#ifndef GL_PROXY_TEXTURE_RECTANGLE
#define GL_PROXY_TEXTURE_RECTANGLE 0x84F7
#endif //GL_PROXY_TEXTURE_RECTANGLE
#ifndef GL_MAX_RECTANGLE_TEXTURE_SIZE
#define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8
#endif //GL_MAX_RECTANGLE_TEXTURE_SIZE
#ifndef GL_DEPTH_STENCIL
#define GL_DEPTH_STENCIL 0x84F9
#endif //GL_DEPTH_STENCIL
#ifndef GL_UNSIGNED_INT_24_8
#define GL_UNSIGNED_INT_24_8 0x84FA
#endif //GL_UNSIGNED_INT_24_8
#ifndef GL_MAX_TEXTURE_LOD_BIAS
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#endif //GL_MAX_TEXTURE_LOD_BIAS
#ifndef GL_TEXTURE_LOD_BIAS
#define GL_TEXTURE_LOD_BIAS 0x8501
#endif //GL_TEXTURE_LOD_BIAS
#ifndef GL_INCR_WRAP
#define GL_INCR_WRAP 0x8507
#endif //GL_INCR_WRAP
#ifndef GL_DECR_WRAP
#define GL_DECR_WRAP 0x8508
#endif //GL_DECR_WRAP
#ifndef GL_TEXTURE_CUBE_MAP
#define GL_TEXTURE_CUBE_MAP 0x8513
#endif //GL_TEXTURE_CUBE_MAP
#ifndef GL_TEXTURE_BINDING_CUBE_MAP
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#endif //GL_TEXTURE_BINDING_CUBE_MAP
#ifndef GL_TEXTURE_CUBE_MAP_POSITIVE_X
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#endif //GL_TEXTURE_CUBE_MAP_POSITIVE_X
#ifndef GL_TEXTURE_CUBE_MAP_NEGATIVE_X
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#endif //GL_TEXTURE_CUBE_MAP_NEGATIVE_X
#ifndef GL_TEXTURE_CUBE_MAP_POSITIVE_Y
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#endif //GL_TEXTURE_CUBE_MAP_POSITIVE_Y
#ifndef GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#endif //GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
#ifndef GL_TEXTURE_CUBE_MAP_POSITIVE_Z
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#endif //GL_TEXTURE_CUBE_MAP_POSITIVE_Z
#ifndef GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#endif //GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
#ifndef GL_PROXY_TEXTURE_CUBE_MAP
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#endif //GL_PROXY_TEXTURE_CUBE_MAP
#ifndef GL_MAX_CUBE_MAP_TEXTURE_SIZE
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#endif //GL_MAX_CUBE_MAP_TEXTURE_SIZE
#ifndef GL_SRC1_ALPHA
#define GL_SRC1_ALPHA 0x8589
#endif //GL_SRC1_ALPHA
#ifndef GL_VERTEX_ARRAY_BINDING
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#endif //GL_VERTEX_ARRAY_BINDING
#ifndef GL_VERTEX_ATTRIB_ARRAY_ENABLED
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#endif //GL_VERTEX_ATTRIB_ARRAY_ENABLED
#ifndef GL_VERTEX_ATTRIB_ARRAY_SIZE
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#endif //GL_VERTEX_ATTRIB_ARRAY_SIZE
#ifndef GL_VERTEX_ATTRIB_ARRAY_STRIDE
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#endif //GL_VERTEX_ATTRIB_ARRAY_STRIDE
#ifndef GL_VERTEX_ATTRIB_ARRAY_TYPE
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#endif //GL_VERTEX_ATTRIB_ARRAY_TYPE
#ifndef GL_CURRENT_VERTEX_ATTRIB
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#endif //GL_CURRENT_VERTEX_ATTRIB
#ifndef GL_PROGRAM_POINT_SIZE
#define GL_PROGRAM_POINT_SIZE 0x8642
#endif //GL_PROGRAM_POINT_SIZE
#ifndef GL_VERTEX_PROGRAM_POINT_SIZE
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#endif //GL_VERTEX_PROGRAM_POINT_SIZE
#ifndef GL_VERTEX_ATTRIB_ARRAY_POINTER
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#endif //GL_VERTEX_ATTRIB_ARRAY_POINTER
#ifndef GL_DEPTH_CLAMP
#define GL_DEPTH_CLAMP 0x864F
#endif //GL_DEPTH_CLAMP
#ifndef GL_TEXTURE_COMPRESSED_IMAGE_SIZE
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#endif //GL_TEXTURE_COMPRESSED_IMAGE_SIZE
#ifndef GL_TEXTURE_COMPRESSED
#define GL_TEXTURE_COMPRESSED 0x86A1
#endif //GL_TEXTURE_COMPRESSED
#ifndef GL_NUM_COMPRESSED_TEXTURE_FORMATS
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#endif //GL_NUM_COMPRESSED_TEXTURE_FORMATS
#ifndef GL_COMPRESSED_TEXTURE_FORMATS
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#endif //GL_COMPRESSED_TEXTURE_FORMATS
#ifndef GL_PROGRAM_BINARY_LENGTH
#define GL_PROGRAM_BINARY_LENGTH 0x8741
#endif //GL_PROGRAM_BINARY_LENGTH
#ifndef GL_VERTEX_ATTRIB_ARRAY_LONG
#define GL_VERTEX_ATTRIB_ARRAY_LONG 0x874E
#endif //GL_VERTEX_ATTRIB_ARRAY_LONG
#ifndef GL_BUFFER_SIZE
#define GL_BUFFER_SIZE 0x8764
#endif //GL_BUFFER_SIZE
#ifndef GL_BUFFER_USAGE
#define GL_BUFFER_USAGE 0x8765
#endif //GL_BUFFER_USAGE
#ifndef GL_NUM_PROGRAM_BINARY_FORMATS
#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE
#endif //GL_NUM_PROGRAM_BINARY_FORMATS
#ifndef GL_PROGRAM_BINARY_FORMATS
#define GL_PROGRAM_BINARY_FORMATS 0x87FF
#endif //GL_PROGRAM_BINARY_FORMATS
#ifndef GL_STENCIL_BACK_FUNC
#define GL_STENCIL_BACK_FUNC 0x8800
#endif //GL_STENCIL_BACK_FUNC
#ifndef GL_STENCIL_BACK_FAIL
#define GL_STENCIL_BACK_FAIL 0x8801
#endif //GL_STENCIL_BACK_FAIL
#ifndef GL_STENCIL_BACK_PASS_DEPTH_FAIL
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#endif //GL_STENCIL_BACK_PASS_DEPTH_FAIL
#ifndef GL_STENCIL_BACK_PASS_DEPTH_PASS
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#endif //GL_STENCIL_BACK_PASS_DEPTH_PASS
#ifndef GL_RGBA32F
#define GL_RGBA32F 0x8814
#endif //GL_RGBA32F
#ifndef GL_RGB32F
#define GL_RGB32F 0x8815
#endif //GL_RGB32F
#ifndef GL_RGBA16F
#define GL_RGBA16F 0x881A
#endif //GL_RGBA16F
#ifndef GL_RGB16F
#define GL_RGB16F 0x881B
#endif //GL_RGB16F
#ifndef GL_MAX_DRAW_BUFFERS
#define GL_MAX_DRAW_BUFFERS 0x8824
#endif //GL_MAX_DRAW_BUFFERS
#ifndef GL_DRAW_BUFFER0
#define GL_DRAW_BUFFER0 0x8825
#endif //GL_DRAW_BUFFER0
#ifndef GL_DRAW_BUFFER1
#define GL_DRAW_BUFFER1 0x8826
#endif //GL_DRAW_BUFFER1
#ifndef GL_DRAW_BUFFER2
#define GL_DRAW_BUFFER2 0x8827
#endif //GL_DRAW_BUFFER2
#ifndef GL_DRAW_BUFFER3
#define GL_DRAW_BUFFER3 0x8828
#endif //GL_DRAW_BUFFER3
#ifndef GL_DRAW_BUFFER4
#define GL_DRAW_BUFFER4 0x8829
#endif //GL_DRAW_BUFFER4
#ifndef GL_DRAW_BUFFER5
#define GL_DRAW_BUFFER5 0x882A
#endif //GL_DRAW_BUFFER5
#ifndef GL_DRAW_BUFFER6
#define GL_DRAW_BUFFER6 0x882B
#endif //GL_DRAW_BUFFER6
#ifndef GL_DRAW_BUFFER7
#define GL_DRAW_BUFFER7 0x882C
#endif //GL_DRAW_BUFFER7
#ifndef GL_DRAW_BUFFER8
#define GL_DRAW_BUFFER8 0x882D
#endif //GL_DRAW_BUFFER8
#ifndef GL_DRAW_BUFFER9
#define GL_DRAW_BUFFER9 0x882E
#endif //GL_DRAW_BUFFER9
#ifndef GL_DRAW_BUFFER10
#define GL_DRAW_BUFFER10 0x882F
#endif //GL_DRAW_BUFFER10
#ifndef GL_DRAW_BUFFER11
#define GL_DRAW_BUFFER11 0x8830
#endif //GL_DRAW_BUFFER11
#ifndef GL_DRAW_BUFFER12
#define GL_DRAW_BUFFER12 0x8831
#endif //GL_DRAW_BUFFER12
#ifndef GL_DRAW_BUFFER13
#define GL_DRAW_BUFFER13 0x8832
#endif //GL_DRAW_BUFFER13
#ifndef GL_DRAW_BUFFER14
#define GL_DRAW_BUFFER14 0x8833
#endif //GL_DRAW_BUFFER14
#ifndef GL_DRAW_BUFFER15
#define GL_DRAW_BUFFER15 0x8834
#endif //GL_DRAW_BUFFER15
#ifndef GL_BLEND_EQUATION_ALPHA
#define GL_BLEND_EQUATION_ALPHA 0x883D
#endif //GL_BLEND_EQUATION_ALPHA
#ifndef GL_TEXTURE_DEPTH_SIZE
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#endif //GL_TEXTURE_DEPTH_SIZE
#ifndef GL_TEXTURE_COMPARE_MODE
#define GL_TEXTURE_COMPARE_MODE 0x884C
#endif //GL_TEXTURE_COMPARE_MODE
#ifndef GL_TEXTURE_COMPARE_FUNC
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#endif //GL_TEXTURE_COMPARE_FUNC
#ifndef GL_COMPARE_REF_TO_TEXTURE
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#endif //GL_COMPARE_REF_TO_TEXTURE
#ifndef GL_TEXTURE_CUBE_MAP_SEAMLESS
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#endif //GL_TEXTURE_CUBE_MAP_SEAMLESS
#ifndef GL_QUERY_COUNTER_BITS
#define GL_QUERY_COUNTER_BITS 0x8864
#endif //GL_QUERY_COUNTER_BITS
#ifndef GL_CURRENT_QUERY
#define GL_CURRENT_QUERY 0x8865
#endif //GL_CURRENT_QUERY
#ifndef GL_QUERY_RESULT
#define GL_QUERY_RESULT 0x8866
#endif //GL_QUERY_RESULT
#ifndef GL_QUERY_RESULT_AVAILABLE
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#endif //GL_QUERY_RESULT_AVAILABLE
#ifndef GL_MAX_VERTEX_ATTRIBS
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#endif //GL_MAX_VERTEX_ATTRIBS
#ifndef GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#endif //GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
#ifndef GL_MAX_TESS_CONTROL_INPUT_COMPONENTS
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#endif //GL_MAX_TESS_CONTROL_INPUT_COMPONENTS
#ifndef GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#endif //GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS
#ifndef GL_MAX_TEXTURE_IMAGE_UNITS
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#endif //GL_MAX_TEXTURE_IMAGE_UNITS
#ifndef GL_GEOMETRY_SHADER_INVOCATIONS
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#endif //GL_GEOMETRY_SHADER_INVOCATIONS
#ifndef GL_ARRAY_BUFFER
#define GL_ARRAY_BUFFER 0x8892
#endif //GL_ARRAY_BUFFER
#ifndef GL_ELEMENT_ARRAY_BUFFER
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#endif //GL_ELEMENT_ARRAY_BUFFER
#ifndef GL_ARRAY_BUFFER_BINDING
#define GL_ARRAY_BUFFER_BINDING 0x8894
#endif //GL_ARRAY_BUFFER_BINDING
#ifndef GL_ELEMENT_ARRAY_BUFFER_BINDING
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#endif //GL_ELEMENT_ARRAY_BUFFER_BINDING
#ifndef GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#endif //GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
#ifndef GL_READ_ONLY
#define GL_READ_ONLY 0x88B8
#endif //GL_READ_ONLY
#ifndef GL_WRITE_ONLY
#define GL_WRITE_ONLY 0x88B9
#endif //GL_WRITE_ONLY
#ifndef GL_READ_WRITE
#define GL_READ_WRITE 0x88BA
#endif //GL_READ_WRITE
#ifndef GL_BUFFER_ACCESS
#define GL_BUFFER_ACCESS 0x88BB
#endif //GL_BUFFER_ACCESS
#ifndef GL_BUFFER_MAPPED
#define GL_BUFFER_MAPPED 0x88BC
#endif //GL_BUFFER_MAPPED
#ifndef GL_BUFFER_MAP_POINTER
#define GL_BUFFER_MAP_POINTER 0x88BD
#endif //GL_BUFFER_MAP_POINTER
#ifndef GL_TIME_ELAPSED
#define GL_TIME_ELAPSED 0x88BF
#endif //GL_TIME_ELAPSED
#ifndef GL_STREAM_DRAW
#define GL_STREAM_DRAW 0x88E0
#endif //GL_STREAM_DRAW
#ifndef GL_STREAM_READ
#define GL_STREAM_READ 0x88E1
#endif //GL_STREAM_READ
#ifndef GL_STREAM_COPY
#define GL_STREAM_COPY 0x88E2
#endif //GL_STREAM_COPY
#ifndef GL_STATIC_DRAW
#define GL_STATIC_DRAW 0x88E4
#endif //GL_STATIC_DRAW
#ifndef GL_STATIC_READ
#define GL_STATIC_READ 0x88E5
#endif //GL_STATIC_READ
#ifndef GL_STATIC_COPY
#define GL_STATIC_COPY 0x88E6
#endif //GL_STATIC_COPY
#ifndef GL_DYNAMIC_DRAW
#define GL_DYNAMIC_DRAW 0x88E8
#endif //GL_DYNAMIC_DRAW
#ifndef GL_DYNAMIC_READ
#define GL_DYNAMIC_READ 0x88E9
#endif //GL_DYNAMIC_READ
#ifndef GL_DYNAMIC_COPY
#define GL_DYNAMIC_COPY 0x88EA
#endif //GL_DYNAMIC_COPY
#ifndef GL_PIXEL_PACK_BUFFER
#define GL_PIXEL_PACK_BUFFER 0x88EB
#endif //GL_PIXEL_PACK_BUFFER
#ifndef GL_PIXEL_UNPACK_BUFFER
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#endif //GL_PIXEL_UNPACK_BUFFER
#ifndef GL_PIXEL_PACK_BUFFER_BINDING
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#endif //GL_PIXEL_PACK_BUFFER_BINDING
#ifndef GL_PIXEL_UNPACK_BUFFER_BINDING
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#endif //GL_PIXEL_UNPACK_BUFFER_BINDING
#ifndef GL_DEPTH24_STENCIL8
#define GL_DEPTH24_STENCIL8 0x88F0
#endif //GL_DEPTH24_STENCIL8
#ifndef GL_TEXTURE_STENCIL_SIZE
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#endif //GL_TEXTURE_STENCIL_SIZE
#ifndef GL_SRC1_COLOR
#define GL_SRC1_COLOR 0x88F9
#endif //GL_SRC1_COLOR
#ifndef GL_ONE_MINUS_SRC1_COLOR
#define GL_ONE_MINUS_SRC1_COLOR 0x88FA
#endif //GL_ONE_MINUS_SRC1_COLOR
#ifndef GL_ONE_MINUS_SRC1_ALPHA
#define GL_ONE_MINUS_SRC1_ALPHA 0x88FB
#endif //GL_ONE_MINUS_SRC1_ALPHA
#ifndef GL_MAX_DUAL_SOURCE_DRAW_BUFFERS
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC
#endif //GL_MAX_DUAL_SOURCE_DRAW_BUFFERS
#ifndef GL_VERTEX_ATTRIB_ARRAY_INTEGER
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#endif //GL_VERTEX_ATTRIB_ARRAY_INTEGER
#ifndef GL_VERTEX_ATTRIB_ARRAY_DIVISOR
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE
#endif //GL_VERTEX_ATTRIB_ARRAY_DIVISOR
#ifndef GL_MAX_ARRAY_TEXTURE_LAYERS
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#endif //GL_MAX_ARRAY_TEXTURE_LAYERS
#ifndef GL_MIN_PROGRAM_TEXEL_OFFSET
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#endif //GL_MIN_PROGRAM_TEXEL_OFFSET
#ifndef GL_MAX_PROGRAM_TEXEL_OFFSET
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#endif //GL_MAX_PROGRAM_TEXEL_OFFSET
#ifndef GL_SAMPLES_PASSED
#define GL_SAMPLES_PASSED 0x8914
#endif //GL_SAMPLES_PASSED
#ifndef GL_GEOMETRY_VERTICES_OUT
#define GL_GEOMETRY_VERTICES_OUT 0x8916
#endif //GL_GEOMETRY_VERTICES_OUT
#ifndef GL_GEOMETRY_INPUT_TYPE
#define GL_GEOMETRY_INPUT_TYPE 0x8917
#endif //GL_GEOMETRY_INPUT_TYPE
#ifndef GL_GEOMETRY_OUTPUT_TYPE
#define GL_GEOMETRY_OUTPUT_TYPE 0x8918
#endif //GL_GEOMETRY_OUTPUT_TYPE
#ifndef GL_SAMPLER_BINDING
#define GL_SAMPLER_BINDING 0x8919
#endif //GL_SAMPLER_BINDING
#ifndef GL_CLAMP_READ_COLOR
#define GL_CLAMP_READ_COLOR 0x891C
#endif //GL_CLAMP_READ_COLOR
#ifndef GL_FIXED_ONLY
#define GL_FIXED_ONLY 0x891D
#endif //GL_FIXED_ONLY
#ifndef GL_UNIFORM_BUFFER
#define GL_UNIFORM_BUFFER 0x8A11
#endif //GL_UNIFORM_BUFFER
#ifndef GL_UNIFORM_BUFFER_BINDING
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#endif //GL_UNIFORM_BUFFER_BINDING
#ifndef GL_UNIFORM_BUFFER_START
#define GL_UNIFORM_BUFFER_START 0x8A29
#endif //GL_UNIFORM_BUFFER_START
#ifndef GL_UNIFORM_BUFFER_SIZE
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#endif //GL_UNIFORM_BUFFER_SIZE
#ifndef GL_MAX_VERTEX_UNIFORM_BLOCKS
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#endif //GL_MAX_VERTEX_UNIFORM_BLOCKS
#ifndef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#endif //GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#ifndef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#endif //GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#ifndef GL_MAX_COMBINED_UNIFORM_BLOCKS
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#endif //GL_MAX_COMBINED_UNIFORM_BLOCKS
#ifndef GL_MAX_UNIFORM_BUFFER_BINDINGS
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#endif //GL_MAX_UNIFORM_BUFFER_BINDINGS
#ifndef GL_MAX_UNIFORM_BLOCK_SIZE
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#endif //GL_MAX_UNIFORM_BLOCK_SIZE
#ifndef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#endif //GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#ifndef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#endif //GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#ifndef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#endif //GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#ifndef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#endif //GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#ifndef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#endif //GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#ifndef GL_ACTIVE_UNIFORM_BLOCKS
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#endif //GL_ACTIVE_UNIFORM_BLOCKS
#ifndef GL_UNIFORM_TYPE
#define GL_UNIFORM_TYPE 0x8A37
#endif //GL_UNIFORM_TYPE
#ifndef GL_UNIFORM_SIZE
#define GL_UNIFORM_SIZE 0x8A38
#endif //GL_UNIFORM_SIZE
#ifndef GL_UNIFORM_NAME_LENGTH
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#endif //GL_UNIFORM_NAME_LENGTH
#ifndef GL_UNIFORM_BLOCK_INDEX
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#endif //GL_UNIFORM_BLOCK_INDEX
#ifndef GL_UNIFORM_OFFSET
#define GL_UNIFORM_OFFSET 0x8A3B
#endif //GL_UNIFORM_OFFSET
#ifndef GL_UNIFORM_ARRAY_STRIDE
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#endif //GL_UNIFORM_ARRAY_STRIDE
#ifndef GL_UNIFORM_MATRIX_STRIDE
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#endif //GL_UNIFORM_MATRIX_STRIDE
#ifndef GL_UNIFORM_IS_ROW_MAJOR
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#endif //GL_UNIFORM_IS_ROW_MAJOR
#ifndef GL_UNIFORM_BLOCK_BINDING
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#endif //GL_UNIFORM_BLOCK_BINDING
#ifndef GL_UNIFORM_BLOCK_DATA_SIZE
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#endif //GL_UNIFORM_BLOCK_DATA_SIZE
#ifndef GL_UNIFORM_BLOCK_NAME_LENGTH
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#endif //GL_UNIFORM_BLOCK_NAME_LENGTH
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#endif //GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#ifndef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#endif //GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#endif //GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#endif //GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#endif //GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#ifndef GL_FRAGMENT_SHADER
#define GL_FRAGMENT_SHADER 0x8B30
#endif //GL_FRAGMENT_SHADER
#ifndef GL_VERTEX_SHADER
#define GL_VERTEX_SHADER 0x8B31
#endif //GL_VERTEX_SHADER
#ifndef GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#endif //GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
#ifndef GL_MAX_VERTEX_UNIFORM_COMPONENTS
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#endif //GL_MAX_VERTEX_UNIFORM_COMPONENTS
#ifndef GL_MAX_VARYING_COMPONENTS
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#endif //GL_MAX_VARYING_COMPONENTS
#ifndef GL_MAX_VARYING_FLOATS
#define GL_MAX_VARYING_FLOATS 0x8B4B
#endif //GL_MAX_VARYING_FLOATS
#ifndef GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#endif //GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
#ifndef GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#endif //GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
#ifndef GL_SHADER_TYPE
#define GL_SHADER_TYPE 0x8B4F
#endif //GL_SHADER_TYPE
#ifndef GL_FLOAT_VEC2
#define GL_FLOAT_VEC2 0x8B50
#endif //GL_FLOAT_VEC2
#ifndef GL_FLOAT_VEC3
#define GL_FLOAT_VEC3 0x8B51
#endif //GL_FLOAT_VEC3
#ifndef GL_FLOAT_VEC4
#define GL_FLOAT_VEC4 0x8B52
#endif //GL_FLOAT_VEC4
#ifndef GL_INT_VEC2
#define GL_INT_VEC2 0x8B53
#endif //GL_INT_VEC2
#ifndef GL_INT_VEC3
#define GL_INT_VEC3 0x8B54
#endif //GL_INT_VEC3
#ifndef GL_INT_VEC4
#define GL_INT_VEC4 0x8B55
#endif //GL_INT_VEC4
#ifndef GL_BOOL
#define GL_BOOL 0x8B56
#endif //GL_BOOL
#ifndef GL_BOOL_VEC2
#define GL_BOOL_VEC2 0x8B57
#endif //GL_BOOL_VEC2
#ifndef GL_BOOL_VEC3
#define GL_BOOL_VEC3 0x8B58
#endif //GL_BOOL_VEC3
#ifndef GL_BOOL_VEC4
#define GL_BOOL_VEC4 0x8B59
#endif //GL_BOOL_VEC4
#ifndef GL_FLOAT_MAT2
#define GL_FLOAT_MAT2 0x8B5A
#endif //GL_FLOAT_MAT2
#ifndef GL_FLOAT_MAT3
#define GL_FLOAT_MAT3 0x8B5B
#endif //GL_FLOAT_MAT3
#ifndef GL_FLOAT_MAT4
#define GL_FLOAT_MAT4 0x8B5C
#endif //GL_FLOAT_MAT4
#ifndef GL_SAMPLER_1D
#define GL_SAMPLER_1D 0x8B5D
#endif //GL_SAMPLER_1D
#ifndef GL_SAMPLER_2D
#define GL_SAMPLER_2D 0x8B5E
#endif //GL_SAMPLER_2D
#ifndef GL_SAMPLER_3D
#define GL_SAMPLER_3D 0x8B5F
#endif //GL_SAMPLER_3D
#ifndef GL_SAMPLER_CUBE
#define GL_SAMPLER_CUBE 0x8B60
#endif //GL_SAMPLER_CUBE
#ifndef GL_SAMPLER_1D_SHADOW
#define GL_SAMPLER_1D_SHADOW 0x8B61
#endif //GL_SAMPLER_1D_SHADOW
#ifndef GL_SAMPLER_2D_SHADOW
#define GL_SAMPLER_2D_SHADOW 0x8B62
#endif //GL_SAMPLER_2D_SHADOW
#ifndef GL_SAMPLER_2D_RECT
#define GL_SAMPLER_2D_RECT 0x8B63
#endif //GL_SAMPLER_2D_RECT
#ifndef GL_SAMPLER_2D_RECT_SHADOW
#define GL_SAMPLER_2D_RECT_SHADOW 0x8B64
#endif //GL_SAMPLER_2D_RECT_SHADOW
#ifndef GL_FLOAT_MAT2x3
#define GL_FLOAT_MAT2x3 0x8B65
#endif //GL_FLOAT_MAT2x3
#ifndef GL_FLOAT_MAT2x4
#define GL_FLOAT_MAT2x4 0x8B66
#endif //GL_FLOAT_MAT2x4
#ifndef GL_FLOAT_MAT3x2
#define GL_FLOAT_MAT3x2 0x8B67
#endif //GL_FLOAT_MAT3x2
#ifndef GL_FLOAT_MAT3x4
#define GL_FLOAT_MAT3x4 0x8B68
#endif //GL_FLOAT_MAT3x4
#ifndef GL_FLOAT_MAT4x2
#define GL_FLOAT_MAT4x2 0x8B69
#endif //GL_FLOAT_MAT4x2
#ifndef GL_FLOAT_MAT4x3
#define GL_FLOAT_MAT4x3 0x8B6A
#endif //GL_FLOAT_MAT4x3
#ifndef GL_DELETE_STATUS
#define GL_DELETE_STATUS 0x8B80
#endif //GL_DELETE_STATUS
#ifndef GL_COMPILE_STATUS
#define GL_COMPILE_STATUS 0x8B81
#endif //GL_COMPILE_STATUS
#ifndef GL_LINK_STATUS
#define GL_LINK_STATUS 0x8B82
#endif //GL_LINK_STATUS
#ifndef GL_VALIDATE_STATUS
#define GL_VALIDATE_STATUS 0x8B83
#endif //GL_VALIDATE_STATUS
#ifndef GL_INFO_LOG_LENGTH
#define GL_INFO_LOG_LENGTH 0x8B84
#endif //GL_INFO_LOG_LENGTH
#ifndef GL_ATTACHED_SHADERS
#define GL_ATTACHED_SHADERS 0x8B85
#endif //GL_ATTACHED_SHADERS
#ifndef GL_ACTIVE_UNIFORMS
#define GL_ACTIVE_UNIFORMS 0x8B86
#endif //GL_ACTIVE_UNIFORMS
#ifndef GL_ACTIVE_UNIFORM_MAX_LENGTH
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#endif //GL_ACTIVE_UNIFORM_MAX_LENGTH
#ifndef GL_SHADER_SOURCE_LENGTH
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#endif //GL_SHADER_SOURCE_LENGTH
#ifndef GL_ACTIVE_ATTRIBUTES
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#endif //GL_ACTIVE_ATTRIBUTES
#ifndef GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#endif //GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
#ifndef GL_FRAGMENT_SHADER_DERIVATIVE_HINT
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#endif //GL_FRAGMENT_SHADER_DERIVATIVE_HINT
#ifndef GL_SHADING_LANGUAGE_VERSION
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#endif //GL_SHADING_LANGUAGE_VERSION
#ifndef GL_CURRENT_PROGRAM
#define GL_CURRENT_PROGRAM 0x8B8D
#endif //GL_CURRENT_PROGRAM
#ifndef GL_IMPLEMENTATION_COLOR_READ_TYPE
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#endif //GL_IMPLEMENTATION_COLOR_READ_TYPE
#ifndef GL_IMPLEMENTATION_COLOR_READ_FORMAT
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#endif //GL_IMPLEMENTATION_COLOR_READ_FORMAT
#ifndef GL_TEXTURE_RED_TYPE
#define GL_TEXTURE_RED_TYPE 0x8C10
#endif //GL_TEXTURE_RED_TYPE
#ifndef GL_TEXTURE_GREEN_TYPE
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#endif //GL_TEXTURE_GREEN_TYPE
#ifndef GL_TEXTURE_BLUE_TYPE
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#endif //GL_TEXTURE_BLUE_TYPE
#ifndef GL_TEXTURE_ALPHA_TYPE
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#endif //GL_TEXTURE_ALPHA_TYPE
#ifndef GL_TEXTURE_DEPTH_TYPE
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#endif //GL_TEXTURE_DEPTH_TYPE
#ifndef GL_UNSIGNED_NORMALIZED
#define GL_UNSIGNED_NORMALIZED 0x8C17
#endif //GL_UNSIGNED_NORMALIZED
#ifndef GL_TEXTURE_1D_ARRAY
#define GL_TEXTURE_1D_ARRAY 0x8C18
#endif //GL_TEXTURE_1D_ARRAY
#ifndef GL_PROXY_TEXTURE_1D_ARRAY
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#endif //GL_PROXY_TEXTURE_1D_ARRAY
#ifndef GL_TEXTURE_2D_ARRAY
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#endif //GL_TEXTURE_2D_ARRAY
#ifndef GL_PROXY_TEXTURE_2D_ARRAY
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#endif //GL_PROXY_TEXTURE_2D_ARRAY
#ifndef GL_TEXTURE_BINDING_1D_ARRAY
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#endif //GL_TEXTURE_BINDING_1D_ARRAY
#ifndef GL_TEXTURE_BINDING_2D_ARRAY
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#endif //GL_TEXTURE_BINDING_2D_ARRAY
#ifndef GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#endif //GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
#ifndef GL_TEXTURE_BUFFER
#define GL_TEXTURE_BUFFER 0x8C2A
#endif //GL_TEXTURE_BUFFER
#ifndef GL_MAX_TEXTURE_BUFFER_SIZE
#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
#endif //GL_MAX_TEXTURE_BUFFER_SIZE
#ifndef GL_TEXTURE_BINDING_BUFFER
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#endif //GL_TEXTURE_BINDING_BUFFER
#ifndef GL_TEXTURE_BUFFER_DATA_STORE_BINDING
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#endif //GL_TEXTURE_BUFFER_DATA_STORE_BINDING
#ifndef GL_ANY_SAMPLES_PASSED
#define GL_ANY_SAMPLES_PASSED 0x8C2F
#endif //GL_ANY_SAMPLES_PASSED
#ifndef GL_SAMPLE_SHADING
#define GL_SAMPLE_SHADING 0x8C36
#endif //GL_SAMPLE_SHADING
#ifndef GL_MIN_SAMPLE_SHADING_VALUE
#define GL_MIN_SAMPLE_SHADING_VALUE 0x8C37
#endif //GL_MIN_SAMPLE_SHADING_VALUE
#ifndef GL_R11F_G11F_B10F
#define GL_R11F_G11F_B10F 0x8C3A
#endif //GL_R11F_G11F_B10F
#ifndef GL_UNSIGNED_INT_10F_11F_11F_REV
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#endif //GL_UNSIGNED_INT_10F_11F_11F_REV
#ifndef GL_RGB9_E5
#define GL_RGB9_E5 0x8C3D
#endif //GL_RGB9_E5
#ifndef GL_UNSIGNED_INT_5_9_9_9_REV
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#endif //GL_UNSIGNED_INT_5_9_9_9_REV
#ifndef GL_TEXTURE_SHARED_SIZE
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#endif //GL_TEXTURE_SHARED_SIZE
#ifndef GL_SRGB
#define GL_SRGB 0x8C40
#endif //GL_SRGB
#ifndef GL_SRGB8
#define GL_SRGB8 0x8C41
#endif //GL_SRGB8
#ifndef GL_SRGB_ALPHA
#define GL_SRGB_ALPHA 0x8C42
#endif //GL_SRGB_ALPHA
#ifndef GL_SRGB8_ALPHA8
#define GL_SRGB8_ALPHA8 0x8C43
#endif //GL_SRGB8_ALPHA8
#ifndef GL_COMPRESSED_SRGB
#define GL_COMPRESSED_SRGB 0x8C48
#endif //GL_COMPRESSED_SRGB
#ifndef GL_COMPRESSED_SRGB_ALPHA
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
#endif //GL_COMPRESSED_SRGB_ALPHA
#ifndef GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#endif //GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_MODE
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_MODE
#ifndef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#endif //GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
#ifndef GL_TRANSFORM_FEEDBACK_VARYINGS
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#endif //GL_TRANSFORM_FEEDBACK_VARYINGS
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_START
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_START
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
#ifndef GL_PRIMITIVES_GENERATED
#define GL_PRIMITIVES_GENERATED 0x8C87
#endif //GL_PRIMITIVES_GENERATED
#ifndef GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#endif //GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
#ifndef GL_RASTERIZER_DISCARD
#define GL_RASTERIZER_DISCARD 0x8C89
#endif //GL_RASTERIZER_DISCARD
#ifndef GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#endif //GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
#ifndef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#endif //GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
#ifndef GL_INTERLEAVED_ATTRIBS
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#endif //GL_INTERLEAVED_ATTRIBS
#ifndef GL_SEPARATE_ATTRIBS
#define GL_SEPARATE_ATTRIBS 0x8C8D
#endif //GL_SEPARATE_ATTRIBS
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#endif //GL_TRANSFORM_FEEDBACK_BUFFER
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
#ifndef GL_POINT_SPRITE_COORD_ORIGIN
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#endif //GL_POINT_SPRITE_COORD_ORIGIN
#ifndef GL_LOWER_LEFT
#define GL_LOWER_LEFT 0x8CA1
#endif //GL_LOWER_LEFT
#ifndef GL_UPPER_LEFT
#define GL_UPPER_LEFT 0x8CA2
#endif //GL_UPPER_LEFT
#ifndef GL_STENCIL_BACK_REF
#define GL_STENCIL_BACK_REF 0x8CA3
#endif //GL_STENCIL_BACK_REF
#ifndef GL_STENCIL_BACK_VALUE_MASK
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#endif //GL_STENCIL_BACK_VALUE_MASK
#ifndef GL_STENCIL_BACK_WRITEMASK
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#endif //GL_STENCIL_BACK_WRITEMASK
#ifndef GL_FRAMEBUFFER_BINDING
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#endif //GL_FRAMEBUFFER_BINDING
#ifndef GL_DRAW_FRAMEBUFFER_BINDING
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#endif //GL_DRAW_FRAMEBUFFER_BINDING
#ifndef GL_RENDERBUFFER_BINDING
#define GL_RENDERBUFFER_BINDING 0x8CA7
#endif //GL_RENDERBUFFER_BINDING
#ifndef GL_READ_FRAMEBUFFER
#define GL_READ_FRAMEBUFFER 0x8CA8
#endif //GL_READ_FRAMEBUFFER
#ifndef GL_DRAW_FRAMEBUFFER
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#endif //GL_DRAW_FRAMEBUFFER
#ifndef GL_READ_FRAMEBUFFER_BINDING
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#endif //GL_READ_FRAMEBUFFER_BINDING
#ifndef GL_RENDERBUFFER_SAMPLES
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#endif //GL_RENDERBUFFER_SAMPLES
#ifndef GL_DEPTH_COMPONENT32F
#define GL_DEPTH_COMPONENT32F 0x8CAC
#endif //GL_DEPTH_COMPONENT32F
#ifndef GL_DEPTH32F_STENCIL8
#define GL_DEPTH32F_STENCIL8 0x8CAD
#endif //GL_DEPTH32F_STENCIL8
#ifndef GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#endif //GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#endif //GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
#ifndef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#endif //GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
#ifndef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#endif //GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
#ifndef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#endif //GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
#ifndef GL_FRAMEBUFFER_COMPLETE
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#endif //GL_FRAMEBUFFER_COMPLETE
#ifndef GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#endif //GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
#ifndef GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#endif //GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
#ifndef GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#endif //GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
#ifndef GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#endif //GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
#ifndef GL_FRAMEBUFFER_UNSUPPORTED
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#endif //GL_FRAMEBUFFER_UNSUPPORTED
#ifndef GL_MAX_COLOR_ATTACHMENTS
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#endif //GL_MAX_COLOR_ATTACHMENTS
#ifndef GL_COLOR_ATTACHMENT0
#define GL_COLOR_ATTACHMENT0 0x8CE0
#endif //GL_COLOR_ATTACHMENT0
#ifndef GL_COLOR_ATTACHMENT1
#define GL_COLOR_ATTACHMENT1 0x8CE1
#endif //GL_COLOR_ATTACHMENT1
#ifndef GL_COLOR_ATTACHMENT2
#define GL_COLOR_ATTACHMENT2 0x8CE2
#endif //GL_COLOR_ATTACHMENT2
#ifndef GL_COLOR_ATTACHMENT3
#define GL_COLOR_ATTACHMENT3 0x8CE3
#endif //GL_COLOR_ATTACHMENT3
#ifndef GL_COLOR_ATTACHMENT4
#define GL_COLOR_ATTACHMENT4 0x8CE4
#endif //GL_COLOR_ATTACHMENT4
#ifndef GL_COLOR_ATTACHMENT5
#define GL_COLOR_ATTACHMENT5 0x8CE5
#endif //GL_COLOR_ATTACHMENT5
#ifndef GL_COLOR_ATTACHMENT6
#define GL_COLOR_ATTACHMENT6 0x8CE6
#endif //GL_COLOR_ATTACHMENT6
#ifndef GL_COLOR_ATTACHMENT7
#define GL_COLOR_ATTACHMENT7 0x8CE7
#endif //GL_COLOR_ATTACHMENT7
#ifndef GL_COLOR_ATTACHMENT8
#define GL_COLOR_ATTACHMENT8 0x8CE8
#endif //GL_COLOR_ATTACHMENT8
#ifndef GL_COLOR_ATTACHMENT9
#define GL_COLOR_ATTACHMENT9 0x8CE9
#endif //GL_COLOR_ATTACHMENT9
#ifndef GL_COLOR_ATTACHMENT10
#define GL_COLOR_ATTACHMENT10 0x8CEA
#endif //GL_COLOR_ATTACHMENT10
#ifndef GL_COLOR_ATTACHMENT11
#define GL_COLOR_ATTACHMENT11 0x8CEB
#endif //GL_COLOR_ATTACHMENT11
#ifndef GL_COLOR_ATTACHMENT12
#define GL_COLOR_ATTACHMENT12 0x8CEC
#endif //GL_COLOR_ATTACHMENT12
#ifndef GL_COLOR_ATTACHMENT13
#define GL_COLOR_ATTACHMENT13 0x8CED
#endif //GL_COLOR_ATTACHMENT13
#ifndef GL_COLOR_ATTACHMENT14
#define GL_COLOR_ATTACHMENT14 0x8CEE
#endif //GL_COLOR_ATTACHMENT14
#ifndef GL_COLOR_ATTACHMENT15
#define GL_COLOR_ATTACHMENT15 0x8CEF
#endif //GL_COLOR_ATTACHMENT15
#ifndef GL_DEPTH_ATTACHMENT
#define GL_DEPTH_ATTACHMENT 0x8D00
#endif //GL_DEPTH_ATTACHMENT
#ifndef GL_STENCIL_ATTACHMENT
#define GL_STENCIL_ATTACHMENT 0x8D20
#endif //GL_STENCIL_ATTACHMENT
#ifndef GL_FRAMEBUFFER
#define GL_FRAMEBUFFER 0x8D40
#endif //GL_FRAMEBUFFER
#ifndef GL_RENDERBUFFER
#define GL_RENDERBUFFER 0x8D41
#endif //GL_RENDERBUFFER
#ifndef GL_RENDERBUFFER_WIDTH
#define GL_RENDERBUFFER_WIDTH 0x8D42
#endif //GL_RENDERBUFFER_WIDTH
#ifndef GL_RENDERBUFFER_HEIGHT
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#endif //GL_RENDERBUFFER_HEIGHT
#ifndef GL_RENDERBUFFER_INTERNAL_FORMAT
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#endif //GL_RENDERBUFFER_INTERNAL_FORMAT
#ifndef GL_STENCIL_INDEX1
#define GL_STENCIL_INDEX1 0x8D46
#endif //GL_STENCIL_INDEX1
#ifndef GL_STENCIL_INDEX4
#define GL_STENCIL_INDEX4 0x8D47
#endif //GL_STENCIL_INDEX4
#ifndef GL_STENCIL_INDEX8
#define GL_STENCIL_INDEX8 0x8D48
#endif //GL_STENCIL_INDEX8
#ifndef GL_STENCIL_INDEX16
#define GL_STENCIL_INDEX16 0x8D49
#endif //GL_STENCIL_INDEX16
#ifndef GL_RENDERBUFFER_RED_SIZE
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#endif //GL_RENDERBUFFER_RED_SIZE
#ifndef GL_RENDERBUFFER_GREEN_SIZE
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#endif //GL_RENDERBUFFER_GREEN_SIZE
#ifndef GL_RENDERBUFFER_BLUE_SIZE
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#endif //GL_RENDERBUFFER_BLUE_SIZE
#ifndef GL_RENDERBUFFER_ALPHA_SIZE
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#endif //GL_RENDERBUFFER_ALPHA_SIZE
#ifndef GL_RENDERBUFFER_DEPTH_SIZE
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#endif //GL_RENDERBUFFER_DEPTH_SIZE
#ifndef GL_RENDERBUFFER_STENCIL_SIZE
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#endif //GL_RENDERBUFFER_STENCIL_SIZE
#ifndef GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#endif //GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
#ifndef GL_MAX_SAMPLES
#define GL_MAX_SAMPLES 0x8D57
#endif //GL_MAX_SAMPLES
#ifndef GL_RGB565
#define GL_RGB565 0x8D62
#endif //GL_RGB565
#ifndef GL_PRIMITIVE_RESTART_FIXED_INDEX
#define GL_PRIMITIVE_RESTART_FIXED_INDEX 0x8D69
#endif //GL_PRIMITIVE_RESTART_FIXED_INDEX
#ifndef GL_ANY_SAMPLES_PASSED_CONSERVATIVE
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0x8D6A
#endif //GL_ANY_SAMPLES_PASSED_CONSERVATIVE
#ifndef GL_MAX_ELEMENT_INDEX
#define GL_MAX_ELEMENT_INDEX 0x8D6B
#endif //GL_MAX_ELEMENT_INDEX
#ifndef GL_RGBA32UI
#define GL_RGBA32UI 0x8D70
#endif //GL_RGBA32UI
#ifndef GL_RGB32UI
#define GL_RGB32UI 0x8D71
#endif //GL_RGB32UI
#ifndef GL_RGBA16UI
#define GL_RGBA16UI 0x8D76
#endif //GL_RGBA16UI
#ifndef GL_RGB16UI
#define GL_RGB16UI 0x8D77
#endif //GL_RGB16UI
#ifndef GL_RGBA8UI
#define GL_RGBA8UI 0x8D7C
#endif //GL_RGBA8UI
#ifndef GL_RGB8UI
#define GL_RGB8UI 0x8D7D
#endif //GL_RGB8UI
#ifndef GL_RGBA32I
#define GL_RGBA32I 0x8D82
#endif //GL_RGBA32I
#ifndef GL_RGB32I
#define GL_RGB32I 0x8D83
#endif //GL_RGB32I
#ifndef GL_RGBA16I
#define GL_RGBA16I 0x8D88
#endif //GL_RGBA16I
#ifndef GL_RGB16I
#define GL_RGB16I 0x8D89
#endif //GL_RGB16I
#ifndef GL_RGBA8I
#define GL_RGBA8I 0x8D8E
#endif //GL_RGBA8I
#ifndef GL_RGB8I
#define GL_RGB8I 0x8D8F
#endif //GL_RGB8I
#ifndef GL_RED_INTEGER
#define GL_RED_INTEGER 0x8D94
#endif //GL_RED_INTEGER
#ifndef GL_GREEN_INTEGER
#define GL_GREEN_INTEGER 0x8D95
#endif //GL_GREEN_INTEGER
#ifndef GL_BLUE_INTEGER
#define GL_BLUE_INTEGER 0x8D96
#endif //GL_BLUE_INTEGER
#ifndef GL_RGB_INTEGER
#define GL_RGB_INTEGER 0x8D98
#endif //GL_RGB_INTEGER
#ifndef GL_RGBA_INTEGER
#define GL_RGBA_INTEGER 0x8D99
#endif //GL_RGBA_INTEGER
#ifndef GL_BGR_INTEGER
#define GL_BGR_INTEGER 0x8D9A
#endif //GL_BGR_INTEGER
#ifndef GL_BGRA_INTEGER
#define GL_BGRA_INTEGER 0x8D9B
#endif //GL_BGRA_INTEGER
#ifndef GL_INT_2_10_10_10_REV
#define GL_INT_2_10_10_10_REV 0x8D9F
#endif //GL_INT_2_10_10_10_REV
#ifndef GL_FRAMEBUFFER_ATTACHMENT_LAYERED
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#endif //GL_FRAMEBUFFER_ATTACHMENT_LAYERED
#ifndef GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#endif //GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
#ifndef GL_FLOAT_32_UNSIGNED_INT_24_8_REV
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#endif //GL_FLOAT_32_UNSIGNED_INT_24_8_REV
#ifndef GL_FRAMEBUFFER_SRGB
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#endif //GL_FRAMEBUFFER_SRGB
#ifndef GL_COMPRESSED_RED_RGTC1
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#endif //GL_COMPRESSED_RED_RGTC1
#ifndef GL_COMPRESSED_SIGNED_RED_RGTC1
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#endif //GL_COMPRESSED_SIGNED_RED_RGTC1
#ifndef GL_COMPRESSED_RG_RGTC2
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#endif //GL_COMPRESSED_RG_RGTC2
#ifndef GL_COMPRESSED_SIGNED_RG_RGTC2
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#endif //GL_COMPRESSED_SIGNED_RG_RGTC2
#ifndef GL_SAMPLER_1D_ARRAY
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#endif //GL_SAMPLER_1D_ARRAY
#ifndef GL_SAMPLER_2D_ARRAY
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#endif //GL_SAMPLER_2D_ARRAY
#ifndef GL_SAMPLER_BUFFER
#define GL_SAMPLER_BUFFER 0x8DC2
#endif //GL_SAMPLER_BUFFER
#ifndef GL_SAMPLER_1D_ARRAY_SHADOW
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#endif //GL_SAMPLER_1D_ARRAY_SHADOW
#ifndef GL_SAMPLER_2D_ARRAY_SHADOW
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#endif //GL_SAMPLER_2D_ARRAY_SHADOW
#ifndef GL_SAMPLER_CUBE_SHADOW
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#endif //GL_SAMPLER_CUBE_SHADOW
#ifndef GL_UNSIGNED_INT_VEC2
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#endif //GL_UNSIGNED_INT_VEC2
#ifndef GL_UNSIGNED_INT_VEC3
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#endif //GL_UNSIGNED_INT_VEC3
#ifndef GL_UNSIGNED_INT_VEC4
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#endif //GL_UNSIGNED_INT_VEC4
#ifndef GL_INT_SAMPLER_1D
#define GL_INT_SAMPLER_1D 0x8DC9
#endif //GL_INT_SAMPLER_1D
#ifndef GL_INT_SAMPLER_2D
#define GL_INT_SAMPLER_2D 0x8DCA
#endif //GL_INT_SAMPLER_2D
#ifndef GL_INT_SAMPLER_3D
#define GL_INT_SAMPLER_3D 0x8DCB
#endif //GL_INT_SAMPLER_3D
#ifndef GL_INT_SAMPLER_CUBE
#define GL_INT_SAMPLER_CUBE 0x8DCC
#endif //GL_INT_SAMPLER_CUBE
#ifndef GL_INT_SAMPLER_2D_RECT
#define GL_INT_SAMPLER_2D_RECT 0x8DCD
#endif //GL_INT_SAMPLER_2D_RECT
#ifndef GL_INT_SAMPLER_1D_ARRAY
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#endif //GL_INT_SAMPLER_1D_ARRAY
#ifndef GL_INT_SAMPLER_2D_ARRAY
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#endif //GL_INT_SAMPLER_2D_ARRAY
#ifndef GL_INT_SAMPLER_BUFFER
#define GL_INT_SAMPLER_BUFFER 0x8DD0
#endif //GL_INT_SAMPLER_BUFFER
#ifndef GL_UNSIGNED_INT_SAMPLER_1D
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#endif //GL_UNSIGNED_INT_SAMPLER_1D
#ifndef GL_UNSIGNED_INT_SAMPLER_2D
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#endif //GL_UNSIGNED_INT_SAMPLER_2D
#ifndef GL_UNSIGNED_INT_SAMPLER_3D
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#endif //GL_UNSIGNED_INT_SAMPLER_3D
#ifndef GL_UNSIGNED_INT_SAMPLER_CUBE
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#endif //GL_UNSIGNED_INT_SAMPLER_CUBE
#ifndef GL_UNSIGNED_INT_SAMPLER_2D_RECT
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5
#endif //GL_UNSIGNED_INT_SAMPLER_2D_RECT
#ifndef GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#endif //GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
#ifndef GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#endif //GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
#ifndef GL_UNSIGNED_INT_SAMPLER_BUFFER
#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
#endif //GL_UNSIGNED_INT_SAMPLER_BUFFER
#ifndef GL_GEOMETRY_SHADER
#define GL_GEOMETRY_SHADER 0x8DD9
#endif //GL_GEOMETRY_SHADER
#ifndef GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#endif //GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
#ifndef GL_MAX_GEOMETRY_OUTPUT_VERTICES
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
#endif //GL_MAX_GEOMETRY_OUTPUT_VERTICES
#ifndef GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#endif //GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
#ifndef GL_ACTIVE_SUBROUTINES
#define GL_ACTIVE_SUBROUTINES 0x8DE5
#endif //GL_ACTIVE_SUBROUTINES
#ifndef GL_ACTIVE_SUBROUTINE_UNIFORMS
#define GL_ACTIVE_SUBROUTINE_UNIFORMS 0x8DE6
#endif //GL_ACTIVE_SUBROUTINE_UNIFORMS
#ifndef GL_MAX_SUBROUTINES
#define GL_MAX_SUBROUTINES 0x8DE7
#endif //GL_MAX_SUBROUTINES
#ifndef GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
#endif //GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS
#ifndef GL_LOW_FLOAT
#define GL_LOW_FLOAT 0x8DF0
#endif //GL_LOW_FLOAT
#ifndef GL_MEDIUM_FLOAT
#define GL_MEDIUM_FLOAT 0x8DF1
#endif //GL_MEDIUM_FLOAT
#ifndef GL_HIGH_FLOAT
#define GL_HIGH_FLOAT 0x8DF2
#endif //GL_HIGH_FLOAT
#ifndef GL_LOW_INT
#define GL_LOW_INT 0x8DF3
#endif //GL_LOW_INT
#ifndef GL_MEDIUM_INT
#define GL_MEDIUM_INT 0x8DF4
#endif //GL_MEDIUM_INT
#ifndef GL_HIGH_INT
#define GL_HIGH_INT 0x8DF5
#endif //GL_HIGH_INT
#ifndef GL_SHADER_BINARY_FORMATS
#define GL_SHADER_BINARY_FORMATS 0x8DF8
#endif //GL_SHADER_BINARY_FORMATS
#ifndef GL_NUM_SHADER_BINARY_FORMATS
#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
#endif //GL_NUM_SHADER_BINARY_FORMATS
#ifndef GL_SHADER_COMPILER
#define GL_SHADER_COMPILER 0x8DFA
#endif //GL_SHADER_COMPILER
#ifndef GL_MAX_VERTEX_UNIFORM_VECTORS
#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
#endif //GL_MAX_VERTEX_UNIFORM_VECTORS
#ifndef GL_MAX_VARYING_VECTORS
#define GL_MAX_VARYING_VECTORS 0x8DFC
#endif //GL_MAX_VARYING_VECTORS
#ifndef GL_MAX_FRAGMENT_UNIFORM_VECTORS
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
#endif //GL_MAX_FRAGMENT_UNIFORM_VECTORS
#ifndef GL_QUERY_WAIT
#define GL_QUERY_WAIT 0x8E13
#endif //GL_QUERY_WAIT
#ifndef GL_QUERY_NO_WAIT
#define GL_QUERY_NO_WAIT 0x8E14
#endif //GL_QUERY_NO_WAIT
#ifndef GL_QUERY_BY_REGION_WAIT
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#endif //GL_QUERY_BY_REGION_WAIT
#ifndef GL_QUERY_BY_REGION_NO_WAIT
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#endif //GL_QUERY_BY_REGION_NO_WAIT
#ifndef GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#endif //GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS
#ifndef GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#endif //GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS
#ifndef GL_TRANSFORM_FEEDBACK
#define GL_TRANSFORM_FEEDBACK 0x8E22
#endif //GL_TRANSFORM_FEEDBACK
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED
#ifndef GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#endif //GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE
#ifndef GL_TRANSFORM_FEEDBACK_BINDING
#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
#endif //GL_TRANSFORM_FEEDBACK_BINDING
#ifndef GL_TIMESTAMP
#define GL_TIMESTAMP 0x8E28
#endif //GL_TIMESTAMP
#ifndef GL_TEXTURE_SWIZZLE_R
#define GL_TEXTURE_SWIZZLE_R 0x8E42
#endif //GL_TEXTURE_SWIZZLE_R
#ifndef GL_TEXTURE_SWIZZLE_G
#define GL_TEXTURE_SWIZZLE_G 0x8E43
#endif //GL_TEXTURE_SWIZZLE_G
#ifndef GL_TEXTURE_SWIZZLE_B
#define GL_TEXTURE_SWIZZLE_B 0x8E44
#endif //GL_TEXTURE_SWIZZLE_B
#ifndef GL_TEXTURE_SWIZZLE_A
#define GL_TEXTURE_SWIZZLE_A 0x8E45
#endif //GL_TEXTURE_SWIZZLE_A
#ifndef GL_TEXTURE_SWIZZLE_RGBA
#define GL_TEXTURE_SWIZZLE_RGBA 0x8E46
#endif //GL_TEXTURE_SWIZZLE_RGBA
#ifndef GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
#endif //GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS
#ifndef GL_ACTIVE_SUBROUTINE_MAX_LENGTH
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0x8E48
#endif //GL_ACTIVE_SUBROUTINE_MAX_LENGTH
#ifndef GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
#endif //GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH
#ifndef GL_NUM_COMPATIBLE_SUBROUTINES
#define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A
#endif //GL_NUM_COMPATIBLE_SUBROUTINES
#ifndef GL_COMPATIBLE_SUBROUTINES
#define GL_COMPATIBLE_SUBROUTINES 0x8E4B
#endif //GL_COMPATIBLE_SUBROUTINES
#ifndef GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#endif //GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
#ifndef GL_FIRST_VERTEX_CONVENTION
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#endif //GL_FIRST_VERTEX_CONVENTION
#ifndef GL_LAST_VERTEX_CONVENTION
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#endif //GL_LAST_VERTEX_CONVENTION
#ifndef GL_PROVOKING_VERTEX
#define GL_PROVOKING_VERTEX 0x8E4F
#endif //GL_PROVOKING_VERTEX
#ifndef GL_SAMPLE_POSITION
#define GL_SAMPLE_POSITION 0x8E50
#endif //GL_SAMPLE_POSITION
#ifndef GL_SAMPLE_MASK
#define GL_SAMPLE_MASK 0x8E51
#endif //GL_SAMPLE_MASK
#ifndef GL_SAMPLE_MASK_VALUE
#define GL_SAMPLE_MASK_VALUE 0x8E52
#endif //GL_SAMPLE_MASK_VALUE
#ifndef GL_MAX_SAMPLE_MASK_WORDS
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#endif //GL_MAX_SAMPLE_MASK_WORDS
#ifndef GL_MAX_GEOMETRY_SHADER_INVOCATIONS
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#endif //GL_MAX_GEOMETRY_SHADER_INVOCATIONS
#ifndef GL_MIN_FRAGMENT_INTERPOLATION_OFFSET
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#endif //GL_MIN_FRAGMENT_INTERPOLATION_OFFSET
#ifndef GL_MAX_FRAGMENT_INTERPOLATION_OFFSET
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#endif //GL_MAX_FRAGMENT_INTERPOLATION_OFFSET
#ifndef GL_FRAGMENT_INTERPOLATION_OFFSET_BITS
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#endif //GL_FRAGMENT_INTERPOLATION_OFFSET_BITS
#ifndef GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
#endif //GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET
#ifndef GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
#endif //GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET
#ifndef GL_MAX_TRANSFORM_FEEDBACK_BUFFERS
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
#endif //GL_MAX_TRANSFORM_FEEDBACK_BUFFERS
#ifndef GL_MAX_VERTEX_STREAMS
#define GL_MAX_VERTEX_STREAMS 0x8E71
#endif //GL_MAX_VERTEX_STREAMS
#ifndef GL_PATCH_VERTICES
#define GL_PATCH_VERTICES 0x8E72
#endif //GL_PATCH_VERTICES
#ifndef GL_PATCH_DEFAULT_INNER_LEVEL
#define GL_PATCH_DEFAULT_INNER_LEVEL 0x8E73
#endif //GL_PATCH_DEFAULT_INNER_LEVEL
#ifndef GL_PATCH_DEFAULT_OUTER_LEVEL
#define GL_PATCH_DEFAULT_OUTER_LEVEL 0x8E74
#endif //GL_PATCH_DEFAULT_OUTER_LEVEL
#ifndef GL_TESS_CONTROL_OUTPUT_VERTICES
#define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75
#endif //GL_TESS_CONTROL_OUTPUT_VERTICES
#ifndef GL_TESS_GEN_MODE
#define GL_TESS_GEN_MODE 0x8E76
#endif //GL_TESS_GEN_MODE
#ifndef GL_TESS_GEN_SPACING
#define GL_TESS_GEN_SPACING 0x8E77
#endif //GL_TESS_GEN_SPACING
#ifndef GL_TESS_GEN_VERTEX_ORDER
#define GL_TESS_GEN_VERTEX_ORDER 0x8E78
#endif //GL_TESS_GEN_VERTEX_ORDER
#ifndef GL_TESS_GEN_POINT_MODE
#define GL_TESS_GEN_POINT_MODE 0x8E79
#endif //GL_TESS_GEN_POINT_MODE
#ifndef GL_ISOLINES
#define GL_ISOLINES 0x8E7A
#endif //GL_ISOLINES
#ifndef GL_FRACTIONAL_ODD
#define GL_FRACTIONAL_ODD 0x8E7B
#endif //GL_FRACTIONAL_ODD
#ifndef GL_FRACTIONAL_EVEN
#define GL_FRACTIONAL_EVEN 0x8E7C
#endif //GL_FRACTIONAL_EVEN
#ifndef GL_MAX_PATCH_VERTICES
#define GL_MAX_PATCH_VERTICES 0x8E7D
#endif //GL_MAX_PATCH_VERTICES
#ifndef GL_MAX_TESS_GEN_LEVEL
#define GL_MAX_TESS_GEN_LEVEL 0x8E7E
#endif //GL_MAX_TESS_GEN_LEVEL
#ifndef GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#endif //GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS
#ifndef GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#endif //GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS
#ifndef GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#endif //GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS
#ifndef GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#endif //GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS
#ifndef GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#endif //GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS
#ifndef GL_MAX_TESS_PATCH_COMPONENTS
#define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84
#endif //GL_MAX_TESS_PATCH_COMPONENTS
#ifndef GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#endif //GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS
#ifndef GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#endif //GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS
#ifndef GL_TESS_EVALUATION_SHADER
#define GL_TESS_EVALUATION_SHADER 0x8E87
#endif //GL_TESS_EVALUATION_SHADER
#ifndef GL_TESS_CONTROL_SHADER
#define GL_TESS_CONTROL_SHADER 0x8E88
#endif //GL_TESS_CONTROL_SHADER
#ifndef GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#endif //GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS
#ifndef GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#endif //GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS
#ifndef GL_COMPRESSED_RGBA_BPTC_UNORM
#define GL_COMPRESSED_RGBA_BPTC_UNORM 0x8E8C
#endif //GL_COMPRESSED_RGBA_BPTC_UNORM
#ifndef GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM 0x8E8D
#endif //GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM
#ifndef GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT 0x8E8E
#endif //GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT
#ifndef GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT 0x8E8F
#endif //GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT
#ifndef GL_COPY_READ_BUFFER
#define GL_COPY_READ_BUFFER 0x8F36
#endif //GL_COPY_READ_BUFFER
#ifndef GL_COPY_WRITE_BUFFER
#define GL_COPY_WRITE_BUFFER 0x8F37
#endif //GL_COPY_WRITE_BUFFER
#ifndef GL_MAX_IMAGE_UNITS
#define GL_MAX_IMAGE_UNITS 0x8F38
#endif //GL_MAX_IMAGE_UNITS
#ifndef GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES
#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39
#endif //GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES
#ifndef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#endif //GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#ifndef GL_IMAGE_BINDING_NAME
#define GL_IMAGE_BINDING_NAME 0x8F3A
#endif //GL_IMAGE_BINDING_NAME
#ifndef GL_IMAGE_BINDING_LEVEL
#define GL_IMAGE_BINDING_LEVEL 0x8F3B
#endif //GL_IMAGE_BINDING_LEVEL
#ifndef GL_IMAGE_BINDING_LAYERED
#define GL_IMAGE_BINDING_LAYERED 0x8F3C
#endif //GL_IMAGE_BINDING_LAYERED
#ifndef GL_IMAGE_BINDING_LAYER
#define GL_IMAGE_BINDING_LAYER 0x8F3D
#endif //GL_IMAGE_BINDING_LAYER
#ifndef GL_IMAGE_BINDING_ACCESS
#define GL_IMAGE_BINDING_ACCESS 0x8F3E
#endif //GL_IMAGE_BINDING_ACCESS
#ifndef GL_DRAW_INDIRECT_BUFFER
#define GL_DRAW_INDIRECT_BUFFER 0x8F3F
#endif //GL_DRAW_INDIRECT_BUFFER
#ifndef GL_DRAW_INDIRECT_BUFFER_BINDING
#define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43
#endif //GL_DRAW_INDIRECT_BUFFER_BINDING
#ifndef GL_DOUBLE_MAT2
#define GL_DOUBLE_MAT2 0x8F46
#endif //GL_DOUBLE_MAT2
#ifndef GL_DOUBLE_MAT3
#define GL_DOUBLE_MAT3 0x8F47
#endif //GL_DOUBLE_MAT3
#ifndef GL_DOUBLE_MAT4
#define GL_DOUBLE_MAT4 0x8F48
#endif //GL_DOUBLE_MAT4
#ifndef GL_DOUBLE_MAT2x3
#define GL_DOUBLE_MAT2x3 0x8F49
#endif //GL_DOUBLE_MAT2x3
#ifndef GL_DOUBLE_MAT2x4
#define GL_DOUBLE_MAT2x4 0x8F4A
#endif //GL_DOUBLE_MAT2x4
#ifndef GL_DOUBLE_MAT3x2
#define GL_DOUBLE_MAT3x2 0x8F4B
#endif //GL_DOUBLE_MAT3x2
#ifndef GL_DOUBLE_MAT3x4
#define GL_DOUBLE_MAT3x4 0x8F4C
#endif //GL_DOUBLE_MAT3x4
#ifndef GL_DOUBLE_MAT4x2
#define GL_DOUBLE_MAT4x2 0x8F4D
#endif //GL_DOUBLE_MAT4x2
#ifndef GL_DOUBLE_MAT4x3
#define GL_DOUBLE_MAT4x3 0x8F4E
#endif //GL_DOUBLE_MAT4x3
#ifndef GL_VERTEX_BINDING_BUFFER
#define GL_VERTEX_BINDING_BUFFER 0x8F4F
#endif //GL_VERTEX_BINDING_BUFFER
#ifndef GL_R8_SNORM
#define GL_R8_SNORM 0x8F94
#endif //GL_R8_SNORM
#ifndef GL_RG8_SNORM
#define GL_RG8_SNORM 0x8F95
#endif //GL_RG8_SNORM
#ifndef GL_RGB8_SNORM
#define GL_RGB8_SNORM 0x8F96
#endif //GL_RGB8_SNORM
#ifndef GL_RGBA8_SNORM
#define GL_RGBA8_SNORM 0x8F97
#endif //GL_RGBA8_SNORM
#ifndef GL_R16_SNORM
#define GL_R16_SNORM 0x8F98
#endif //GL_R16_SNORM
#ifndef GL_RG16_SNORM
#define GL_RG16_SNORM 0x8F99
#endif //GL_RG16_SNORM
#ifndef GL_RGB16_SNORM
#define GL_RGB16_SNORM 0x8F9A
#endif //GL_RGB16_SNORM
#ifndef GL_RGBA16_SNORM
#define GL_RGBA16_SNORM 0x8F9B
#endif //GL_RGBA16_SNORM
#ifndef GL_SIGNED_NORMALIZED
#define GL_SIGNED_NORMALIZED 0x8F9C
#endif //GL_SIGNED_NORMALIZED
#ifndef GL_PRIMITIVE_RESTART
#define GL_PRIMITIVE_RESTART 0x8F9D
#endif //GL_PRIMITIVE_RESTART
#ifndef GL_PRIMITIVE_RESTART_INDEX
#define GL_PRIMITIVE_RESTART_INDEX 0x8F9E
#endif //GL_PRIMITIVE_RESTART_INDEX
#ifndef GL_DOUBLE_VEC2
#define GL_DOUBLE_VEC2 0x8FFC
#endif //GL_DOUBLE_VEC2
#ifndef GL_DOUBLE_VEC3
#define GL_DOUBLE_VEC3 0x8FFD
#endif //GL_DOUBLE_VEC3
#ifndef GL_DOUBLE_VEC4
#define GL_DOUBLE_VEC4 0x8FFE
#endif //GL_DOUBLE_VEC4
#ifndef GL_TEXTURE_CUBE_MAP_ARRAY
#define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009
#endif //GL_TEXTURE_CUBE_MAP_ARRAY
#ifndef GL_TEXTURE_BINDING_CUBE_MAP_ARRAY
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#endif //GL_TEXTURE_BINDING_CUBE_MAP_ARRAY
#ifndef GL_PROXY_TEXTURE_CUBE_MAP_ARRAY
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY 0x900B
#endif //GL_PROXY_TEXTURE_CUBE_MAP_ARRAY
#ifndef GL_SAMPLER_CUBE_MAP_ARRAY
#define GL_SAMPLER_CUBE_MAP_ARRAY 0x900C
#endif //GL_SAMPLER_CUBE_MAP_ARRAY
#ifndef GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0x900D
#endif //GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW
#ifndef GL_INT_SAMPLER_CUBE_MAP_ARRAY
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0x900E
#endif //GL_INT_SAMPLER_CUBE_MAP_ARRAY
#ifndef GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
#endif //GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY
#ifndef GL_IMAGE_1D
#define GL_IMAGE_1D 0x904C
#endif //GL_IMAGE_1D
#ifndef GL_IMAGE_2D
#define GL_IMAGE_2D 0x904D
#endif //GL_IMAGE_2D
#ifndef GL_IMAGE_3D
#define GL_IMAGE_3D 0x904E
#endif //GL_IMAGE_3D
#ifndef GL_IMAGE_2D_RECT
#define GL_IMAGE_2D_RECT 0x904F
#endif //GL_IMAGE_2D_RECT
#ifndef GL_IMAGE_CUBE
#define GL_IMAGE_CUBE 0x9050
#endif //GL_IMAGE_CUBE
#ifndef GL_IMAGE_BUFFER
#define GL_IMAGE_BUFFER 0x9051
#endif //GL_IMAGE_BUFFER
#ifndef GL_IMAGE_1D_ARRAY
#define GL_IMAGE_1D_ARRAY 0x9052
#endif //GL_IMAGE_1D_ARRAY
#ifndef GL_IMAGE_2D_ARRAY
#define GL_IMAGE_2D_ARRAY 0x9053
#endif //GL_IMAGE_2D_ARRAY
#ifndef GL_IMAGE_CUBE_MAP_ARRAY
#define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#endif //GL_IMAGE_CUBE_MAP_ARRAY
#ifndef GL_IMAGE_2D_MULTISAMPLE
#define GL_IMAGE_2D_MULTISAMPLE 0x9055
#endif //GL_IMAGE_2D_MULTISAMPLE
#ifndef GL_IMAGE_2D_MULTISAMPLE_ARRAY
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#endif //GL_IMAGE_2D_MULTISAMPLE_ARRAY
#ifndef GL_INT_IMAGE_1D
#define GL_INT_IMAGE_1D 0x9057
#endif //GL_INT_IMAGE_1D
#ifndef GL_INT_IMAGE_2D
#define GL_INT_IMAGE_2D 0x9058
#endif //GL_INT_IMAGE_2D
#ifndef GL_INT_IMAGE_3D
#define GL_INT_IMAGE_3D 0x9059
#endif //GL_INT_IMAGE_3D
#ifndef GL_INT_IMAGE_2D_RECT
#define GL_INT_IMAGE_2D_RECT 0x905A
#endif //GL_INT_IMAGE_2D_RECT
#ifndef GL_INT_IMAGE_CUBE
#define GL_INT_IMAGE_CUBE 0x905B
#endif //GL_INT_IMAGE_CUBE
#ifndef GL_INT_IMAGE_BUFFER
#define GL_INT_IMAGE_BUFFER 0x905C
#endif //GL_INT_IMAGE_BUFFER
#ifndef GL_INT_IMAGE_1D_ARRAY
#define GL_INT_IMAGE_1D_ARRAY 0x905D
#endif //GL_INT_IMAGE_1D_ARRAY
#ifndef GL_INT_IMAGE_2D_ARRAY
#define GL_INT_IMAGE_2D_ARRAY 0x905E
#endif //GL_INT_IMAGE_2D_ARRAY
#ifndef GL_INT_IMAGE_CUBE_MAP_ARRAY
#define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#endif //GL_INT_IMAGE_CUBE_MAP_ARRAY
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE
#define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#endif //GL_INT_IMAGE_2D_MULTISAMPLE
#ifndef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#endif //GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#ifndef GL_UNSIGNED_INT_IMAGE_1D
#define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#endif //GL_UNSIGNED_INT_IMAGE_1D
#ifndef GL_UNSIGNED_INT_IMAGE_2D
#define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#endif //GL_UNSIGNED_INT_IMAGE_2D
#ifndef GL_UNSIGNED_INT_IMAGE_3D
#define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#endif //GL_UNSIGNED_INT_IMAGE_3D
#ifndef GL_UNSIGNED_INT_IMAGE_2D_RECT
#define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#endif //GL_UNSIGNED_INT_IMAGE_2D_RECT
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE
#define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#endif //GL_UNSIGNED_INT_IMAGE_CUBE
#ifndef GL_UNSIGNED_INT_IMAGE_BUFFER
#define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#endif //GL_UNSIGNED_INT_IMAGE_BUFFER
#ifndef GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#endif //GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#ifndef GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#endif //GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#ifndef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#endif //GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#endif //GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#endif //GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#ifndef GL_MAX_IMAGE_SAMPLES
#define GL_MAX_IMAGE_SAMPLES 0x906D
#endif //GL_MAX_IMAGE_SAMPLES
#ifndef GL_IMAGE_BINDING_FORMAT
#define GL_IMAGE_BINDING_FORMAT 0x906E
#endif //GL_IMAGE_BINDING_FORMAT
#ifndef GL_RGB10_A2UI
#define GL_RGB10_A2UI 0x906F
#endif //GL_RGB10_A2UI
#ifndef GL_MIN_MAP_BUFFER_ALIGNMENT
#define GL_MIN_MAP_BUFFER_ALIGNMENT 0x90BC
#endif //GL_MIN_MAP_BUFFER_ALIGNMENT
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#endif //GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#endif //GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#endif //GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#ifndef GL_MAX_VERTEX_IMAGE_UNIFORMS
#define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#endif //GL_MAX_VERTEX_IMAGE_UNIFORMS
#ifndef GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#endif //GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#ifndef GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#endif //GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#ifndef GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#endif //GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#ifndef GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#endif //GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#ifndef GL_MAX_COMBINED_IMAGE_UNIFORMS
#define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#endif //GL_MAX_COMBINED_IMAGE_UNIFORMS
#ifndef GL_SHADER_STORAGE_BUFFER
#define GL_SHADER_STORAGE_BUFFER 0x90D2
#endif //GL_SHADER_STORAGE_BUFFER
#ifndef GL_SHADER_STORAGE_BUFFER_BINDING
#define GL_SHADER_STORAGE_BUFFER_BINDING 0x90D3
#endif //GL_SHADER_STORAGE_BUFFER_BINDING
#ifndef GL_SHADER_STORAGE_BUFFER_START
#define GL_SHADER_STORAGE_BUFFER_START 0x90D4
#endif //GL_SHADER_STORAGE_BUFFER_START
#ifndef GL_SHADER_STORAGE_BUFFER_SIZE
#define GL_SHADER_STORAGE_BUFFER_SIZE 0x90D5
#endif //GL_SHADER_STORAGE_BUFFER_SIZE
#ifndef GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS
#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0x90D6
#endif //GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS
#ifndef GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0x90D7
#endif //GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS
#ifndef GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8
#endif //GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS
#ifndef GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9
#endif //GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS
#ifndef GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS
#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0x90DA
#endif //GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS
#ifndef GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS
#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0x90DB
#endif //GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS
#ifndef GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS
#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0x90DC
#endif //GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS
#ifndef GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS
#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0x90DD
#endif //GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS
#ifndef GL_MAX_SHADER_STORAGE_BLOCK_SIZE
#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE 0x90DE
#endif //GL_MAX_SHADER_STORAGE_BLOCK_SIZE
#ifndef GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT
#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF
#endif //GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT
#ifndef GL_DEPTH_STENCIL_TEXTURE_MODE
#define GL_DEPTH_STENCIL_TEXTURE_MODE 0x90EA
#endif //GL_DEPTH_STENCIL_TEXTURE_MODE
#ifndef GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS
#define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0x90EB
#endif //GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS
#ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER
#define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER 0x90EC
#endif //GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER 0x90ED
#endif //GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER
#ifndef GL_DISPATCH_INDIRECT_BUFFER
#define GL_DISPATCH_INDIRECT_BUFFER 0x90EE
#endif //GL_DISPATCH_INDIRECT_BUFFER
#ifndef GL_DISPATCH_INDIRECT_BUFFER_BINDING
#define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0x90EF
#endif //GL_DISPATCH_INDIRECT_BUFFER_BINDING
#ifndef GL_TEXTURE_2D_MULTISAMPLE
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#endif //GL_TEXTURE_2D_MULTISAMPLE
#ifndef GL_PROXY_TEXTURE_2D_MULTISAMPLE
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
#endif //GL_PROXY_TEXTURE_2D_MULTISAMPLE
#ifndef GL_TEXTURE_2D_MULTISAMPLE_ARRAY
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#endif //GL_TEXTURE_2D_MULTISAMPLE_ARRAY
#ifndef GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#endif //GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
#ifndef GL_TEXTURE_BINDING_2D_MULTISAMPLE
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#endif //GL_TEXTURE_BINDING_2D_MULTISAMPLE
#ifndef GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#endif //GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
#ifndef GL_TEXTURE_SAMPLES
#define GL_TEXTURE_SAMPLES 0x9106
#endif //GL_TEXTURE_SAMPLES
#ifndef GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#endif //GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
#ifndef GL_SAMPLER_2D_MULTISAMPLE
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#endif //GL_SAMPLER_2D_MULTISAMPLE
#ifndef GL_INT_SAMPLER_2D_MULTISAMPLE
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#endif //GL_INT_SAMPLER_2D_MULTISAMPLE
#ifndef GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#endif //GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
#ifndef GL_SAMPLER_2D_MULTISAMPLE_ARRAY
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#endif //GL_SAMPLER_2D_MULTISAMPLE_ARRAY
#ifndef GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#endif //GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
#ifndef GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#endif //GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
#ifndef GL_MAX_COLOR_TEXTURE_SAMPLES
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#endif //GL_MAX_COLOR_TEXTURE_SAMPLES
#ifndef GL_MAX_DEPTH_TEXTURE_SAMPLES
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#endif //GL_MAX_DEPTH_TEXTURE_SAMPLES
#ifndef GL_MAX_INTEGER_SAMPLES
#define GL_MAX_INTEGER_SAMPLES 0x9110
#endif //GL_MAX_INTEGER_SAMPLES
#ifndef GL_MAX_SERVER_WAIT_TIMEOUT
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#endif //GL_MAX_SERVER_WAIT_TIMEOUT
#ifndef GL_OBJECT_TYPE
#define GL_OBJECT_TYPE 0x9112
#endif //GL_OBJECT_TYPE
#ifndef GL_SYNC_CONDITION
#define GL_SYNC_CONDITION 0x9113
#endif //GL_SYNC_CONDITION
#ifndef GL_SYNC_STATUS
#define GL_SYNC_STATUS 0x9114
#endif //GL_SYNC_STATUS
#ifndef GL_SYNC_FLAGS
#define GL_SYNC_FLAGS 0x9115
#endif //GL_SYNC_FLAGS
#ifndef GL_SYNC_FENCE
#define GL_SYNC_FENCE 0x9116
#endif //GL_SYNC_FENCE
#ifndef GL_SYNC_GPU_COMMANDS_COMPLETE
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#endif //GL_SYNC_GPU_COMMANDS_COMPLETE
#ifndef GL_UNSIGNALED
#define GL_UNSIGNALED 0x9118
#endif //GL_UNSIGNALED
#ifndef GL_SIGNALED
#define GL_SIGNALED 0x9119
#endif //GL_SIGNALED
#ifndef GL_ALREADY_SIGNALED
#define GL_ALREADY_SIGNALED 0x911A
#endif //GL_ALREADY_SIGNALED
#ifndef GL_TIMEOUT_EXPIRED
#define GL_TIMEOUT_EXPIRED 0x911B
#endif //GL_TIMEOUT_EXPIRED
#ifndef GL_CONDITION_SATISFIED
#define GL_CONDITION_SATISFIED 0x911C
#endif //GL_CONDITION_SATISFIED
#ifndef GL_WAIT_FAILED
#define GL_WAIT_FAILED 0x911D
#endif //GL_WAIT_FAILED
#ifndef GL_BUFFER_ACCESS_FLAGS
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#endif //GL_BUFFER_ACCESS_FLAGS
#ifndef GL_BUFFER_MAP_LENGTH
#define GL_BUFFER_MAP_LENGTH 0x9120
#endif //GL_BUFFER_MAP_LENGTH
#ifndef GL_BUFFER_MAP_OFFSET
#define GL_BUFFER_MAP_OFFSET 0x9121
#endif //GL_BUFFER_MAP_OFFSET
#ifndef GL_MAX_VERTEX_OUTPUT_COMPONENTS
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
#endif //GL_MAX_VERTEX_OUTPUT_COMPONENTS
#ifndef GL_MAX_GEOMETRY_INPUT_COMPONENTS
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
#endif //GL_MAX_GEOMETRY_INPUT_COMPONENTS
#ifndef GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#endif //GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
#ifndef GL_MAX_FRAGMENT_INPUT_COMPONENTS
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
#endif //GL_MAX_FRAGMENT_INPUT_COMPONENTS
#ifndef GL_CONTEXT_PROFILE_MASK
#define GL_CONTEXT_PROFILE_MASK 0x9126
#endif //GL_CONTEXT_PROFILE_MASK
#ifndef GL_UNPACK_COMPRESSED_BLOCK_WIDTH
#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH 0x9127
#endif //GL_UNPACK_COMPRESSED_BLOCK_WIDTH
#ifndef GL_UNPACK_COMPRESSED_BLOCK_HEIGHT
#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT 0x9128
#endif //GL_UNPACK_COMPRESSED_BLOCK_HEIGHT
#ifndef GL_UNPACK_COMPRESSED_BLOCK_DEPTH
#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH 0x9129
#endif //GL_UNPACK_COMPRESSED_BLOCK_DEPTH
#ifndef GL_UNPACK_COMPRESSED_BLOCK_SIZE
#define GL_UNPACK_COMPRESSED_BLOCK_SIZE 0x912A
#endif //GL_UNPACK_COMPRESSED_BLOCK_SIZE
#ifndef GL_PACK_COMPRESSED_BLOCK_WIDTH
#define GL_PACK_COMPRESSED_BLOCK_WIDTH 0x912B
#endif //GL_PACK_COMPRESSED_BLOCK_WIDTH
#ifndef GL_PACK_COMPRESSED_BLOCK_HEIGHT
#define GL_PACK_COMPRESSED_BLOCK_HEIGHT 0x912C
#endif //GL_PACK_COMPRESSED_BLOCK_HEIGHT
#ifndef GL_PACK_COMPRESSED_BLOCK_DEPTH
#define GL_PACK_COMPRESSED_BLOCK_DEPTH 0x912D
#endif //GL_PACK_COMPRESSED_BLOCK_DEPTH
#ifndef GL_PACK_COMPRESSED_BLOCK_SIZE
#define GL_PACK_COMPRESSED_BLOCK_SIZE 0x912E
#endif //GL_PACK_COMPRESSED_BLOCK_SIZE
#ifndef GL_TEXTURE_IMMUTABLE_FORMAT
#define GL_TEXTURE_IMMUTABLE_FORMAT 0x912F
#endif //GL_TEXTURE_IMMUTABLE_FORMAT
#ifndef GL_MAX_DEBUG_MESSAGE_LENGTH
#define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#endif //GL_MAX_DEBUG_MESSAGE_LENGTH
#ifndef GL_MAX_DEBUG_LOGGED_MESSAGES
#define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#endif //GL_MAX_DEBUG_LOGGED_MESSAGES
#ifndef GL_DEBUG_LOGGED_MESSAGES
#define GL_DEBUG_LOGGED_MESSAGES 0x9145
#endif //GL_DEBUG_LOGGED_MESSAGES
#ifndef GL_DEBUG_SEVERITY_HIGH
#define GL_DEBUG_SEVERITY_HIGH 0x9146
#endif //GL_DEBUG_SEVERITY_HIGH
#ifndef GL_DEBUG_SEVERITY_MEDIUM
#define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#endif //GL_DEBUG_SEVERITY_MEDIUM
#ifndef GL_DEBUG_SEVERITY_LOW
#define GL_DEBUG_SEVERITY_LOW 0x9148
#endif //GL_DEBUG_SEVERITY_LOW
#ifndef GL_TEXTURE_BUFFER_OFFSET
#define GL_TEXTURE_BUFFER_OFFSET 0x919D
#endif //GL_TEXTURE_BUFFER_OFFSET
#ifndef GL_TEXTURE_BUFFER_SIZE
#define GL_TEXTURE_BUFFER_SIZE 0x919E
#endif //GL_TEXTURE_BUFFER_SIZE
#ifndef GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0x919F
#endif //GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT
#ifndef GL_COMPUTE_SHADER
#define GL_COMPUTE_SHADER 0x91B9
#endif //GL_COMPUTE_SHADER
#ifndef GL_MAX_COMPUTE_UNIFORM_BLOCKS
#define GL_MAX_COMPUTE_UNIFORM_BLOCKS 0x91BB
#endif //GL_MAX_COMPUTE_UNIFORM_BLOCKS
#ifndef GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS
#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0x91BC
#endif //GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS
#ifndef GL_MAX_COMPUTE_IMAGE_UNIFORMS
#define GL_MAX_COMPUTE_IMAGE_UNIFORMS 0x91BD
#endif //GL_MAX_COMPUTE_IMAGE_UNIFORMS
#ifndef GL_MAX_COMPUTE_WORK_GROUP_COUNT
#define GL_MAX_COMPUTE_WORK_GROUP_COUNT 0x91BE
#endif //GL_MAX_COMPUTE_WORK_GROUP_COUNT
#ifndef GL_MAX_COMPUTE_WORK_GROUP_SIZE
#define GL_MAX_COMPUTE_WORK_GROUP_SIZE 0x91BF
#endif //GL_MAX_COMPUTE_WORK_GROUP_SIZE
#ifndef GL_COMPRESSED_R11_EAC
#define GL_COMPRESSED_R11_EAC 0x9270
#endif //GL_COMPRESSED_R11_EAC
#ifndef GL_COMPRESSED_SIGNED_R11_EAC
#define GL_COMPRESSED_SIGNED_R11_EAC 0x9271
#endif //GL_COMPRESSED_SIGNED_R11_EAC
#ifndef GL_COMPRESSED_RG11_EAC
#define GL_COMPRESSED_RG11_EAC 0x9272
#endif //GL_COMPRESSED_RG11_EAC
#ifndef GL_COMPRESSED_SIGNED_RG11_EAC
#define GL_COMPRESSED_SIGNED_RG11_EAC 0x9273
#endif //GL_COMPRESSED_SIGNED_RG11_EAC
#ifndef GL_COMPRESSED_RGB8_ETC2
#define GL_COMPRESSED_RGB8_ETC2 0x9274
#endif //GL_COMPRESSED_RGB8_ETC2
#ifndef GL_COMPRESSED_SRGB8_ETC2
#define GL_COMPRESSED_SRGB8_ETC2 0x9275
#endif //GL_COMPRESSED_SRGB8_ETC2
#ifndef GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276
#endif //GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
#ifndef GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277
#endif //GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
#ifndef GL_COMPRESSED_RGBA8_ETC2_EAC
#define GL_COMPRESSED_RGBA8_ETC2_EAC 0x9278
#endif //GL_COMPRESSED_RGBA8_ETC2_EAC
#ifndef GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0x9279
#endif //GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
#ifndef GL_ATOMIC_COUNTER_BUFFER
#define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#endif //GL_ATOMIC_COUNTER_BUFFER
#ifndef GL_ATOMIC_COUNTER_BUFFER_BINDING
#define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#endif //GL_ATOMIC_COUNTER_BUFFER_BINDING
#ifndef GL_ATOMIC_COUNTER_BUFFER_START
#define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#endif //GL_ATOMIC_COUNTER_BUFFER_START
#ifndef GL_ATOMIC_COUNTER_BUFFER_SIZE
#define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#endif //GL_ATOMIC_COUNTER_BUFFER_SIZE
#ifndef GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#endif //GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#endif //GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#endif //GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#endif //GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#endif //GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#endif //GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#endif //GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#endif //GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#endif //GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#endif //GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#endif //GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#endif //GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#endif //GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#endif //GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#ifndef GL_MAX_VERTEX_ATOMIC_COUNTERS
#define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#endif //GL_MAX_VERTEX_ATOMIC_COUNTERS
#ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#endif //GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#endif //GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#endif //GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#endif //GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#ifndef GL_MAX_COMBINED_ATOMIC_COUNTERS
#define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#endif //GL_MAX_COMBINED_ATOMIC_COUNTERS
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#endif //GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#ifndef GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#endif //GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#ifndef GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#endif //GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#ifndef GL_UNSIGNED_INT_ATOMIC_COUNTER
#define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#endif //GL_UNSIGNED_INT_ATOMIC_COUNTER
#ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#endif //GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
#ifndef GL_DEBUG_OUTPUT
#define GL_DEBUG_OUTPUT 0x92E0
#endif //GL_DEBUG_OUTPUT
#ifndef GL_UNIFORM
#define GL_UNIFORM 0x92E1
#endif //GL_UNIFORM
#ifndef GL_UNIFORM_BLOCK
#define GL_UNIFORM_BLOCK 0x92E2
#endif //GL_UNIFORM_BLOCK
#ifndef GL_PROGRAM_INPUT
#define GL_PROGRAM_INPUT 0x92E3
#endif //GL_PROGRAM_INPUT
#ifndef GL_PROGRAM_OUTPUT
#define GL_PROGRAM_OUTPUT 0x92E4
#endif //GL_PROGRAM_OUTPUT
#ifndef GL_BUFFER_VARIABLE
#define GL_BUFFER_VARIABLE 0x92E5
#endif //GL_BUFFER_VARIABLE
#ifndef GL_SHADER_STORAGE_BLOCK
#define GL_SHADER_STORAGE_BLOCK 0x92E6
#endif //GL_SHADER_STORAGE_BLOCK
#ifndef GL_IS_PER_PATCH
#define GL_IS_PER_PATCH 0x92E7
#endif //GL_IS_PER_PATCH
#ifndef GL_VERTEX_SUBROUTINE
#define GL_VERTEX_SUBROUTINE 0x92E8
#endif //GL_VERTEX_SUBROUTINE
#ifndef GL_TESS_CONTROL_SUBROUTINE
#define GL_TESS_CONTROL_SUBROUTINE 0x92E9
#endif //GL_TESS_CONTROL_SUBROUTINE
#ifndef GL_TESS_EVALUATION_SUBROUTINE
#define GL_TESS_EVALUATION_SUBROUTINE 0x92EA
#endif //GL_TESS_EVALUATION_SUBROUTINE
#ifndef GL_GEOMETRY_SUBROUTINE
#define GL_GEOMETRY_SUBROUTINE 0x92EB
#endif //GL_GEOMETRY_SUBROUTINE
#ifndef GL_FRAGMENT_SUBROUTINE
#define GL_FRAGMENT_SUBROUTINE 0x92EC
#endif //GL_FRAGMENT_SUBROUTINE
#ifndef GL_COMPUTE_SUBROUTINE
#define GL_COMPUTE_SUBROUTINE 0x92ED
#endif //GL_COMPUTE_SUBROUTINE
#ifndef GL_VERTEX_SUBROUTINE_UNIFORM
#define GL_VERTEX_SUBROUTINE_UNIFORM 0x92EE
#endif //GL_VERTEX_SUBROUTINE_UNIFORM
#ifndef GL_TESS_CONTROL_SUBROUTINE_UNIFORM
#define GL_TESS_CONTROL_SUBROUTINE_UNIFORM 0x92EF
#endif //GL_TESS_CONTROL_SUBROUTINE_UNIFORM
#ifndef GL_TESS_EVALUATION_SUBROUTINE_UNIFORM
#define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM 0x92F0
#endif //GL_TESS_EVALUATION_SUBROUTINE_UNIFORM
#ifndef GL_GEOMETRY_SUBROUTINE_UNIFORM
#define GL_GEOMETRY_SUBROUTINE_UNIFORM 0x92F1
#endif //GL_GEOMETRY_SUBROUTINE_UNIFORM
#ifndef GL_FRAGMENT_SUBROUTINE_UNIFORM
#define GL_FRAGMENT_SUBROUTINE_UNIFORM 0x92F2
#endif //GL_FRAGMENT_SUBROUTINE_UNIFORM
#ifndef GL_COMPUTE_SUBROUTINE_UNIFORM
#define GL_COMPUTE_SUBROUTINE_UNIFORM 0x92F3
#endif //GL_COMPUTE_SUBROUTINE_UNIFORM
#ifndef GL_TRANSFORM_FEEDBACK_VARYING
#define GL_TRANSFORM_FEEDBACK_VARYING 0x92F4
#endif //GL_TRANSFORM_FEEDBACK_VARYING
#ifndef GL_ACTIVE_RESOURCES
#define GL_ACTIVE_RESOURCES 0x92F5
#endif //GL_ACTIVE_RESOURCES
#ifndef GL_MAX_NAME_LENGTH
#define GL_MAX_NAME_LENGTH 0x92F6
#endif //GL_MAX_NAME_LENGTH
#ifndef GL_MAX_NUM_ACTIVE_VARIABLES
#define GL_MAX_NUM_ACTIVE_VARIABLES 0x92F7
#endif //GL_MAX_NUM_ACTIVE_VARIABLES
#ifndef GL_MAX_NUM_COMPATIBLE_SUBROUTINES
#define GL_MAX_NUM_COMPATIBLE_SUBROUTINES 0x92F8
#endif //GL_MAX_NUM_COMPATIBLE_SUBROUTINES
#ifndef GL_NAME_LENGTH
#define GL_NAME_LENGTH 0x92F9
#endif //GL_NAME_LENGTH
#ifndef GL_TYPE
#define GL_TYPE 0x92FA
#endif //GL_TYPE
#ifndef GL_ARRAY_SIZE
#define GL_ARRAY_SIZE 0x92FB
#endif //GL_ARRAY_SIZE
#ifndef GL_OFFSET
#define GL_OFFSET 0x92FC
#endif //GL_OFFSET
#ifndef GL_BLOCK_INDEX
#define GL_BLOCK_INDEX 0x92FD
#endif //GL_BLOCK_INDEX
#ifndef GL_ARRAY_STRIDE
#define GL_ARRAY_STRIDE 0x92FE
#endif //GL_ARRAY_STRIDE
#ifndef GL_MATRIX_STRIDE
#define GL_MATRIX_STRIDE 0x92FF
#endif //GL_MATRIX_STRIDE
#ifndef GL_IS_ROW_MAJOR
#define GL_IS_ROW_MAJOR 0x9300
#endif //GL_IS_ROW_MAJOR
#ifndef GL_ATOMIC_COUNTER_BUFFER_INDEX
#define GL_ATOMIC_COUNTER_BUFFER_INDEX 0x9301
#endif //GL_ATOMIC_COUNTER_BUFFER_INDEX
#ifndef GL_BUFFER_BINDING
#define GL_BUFFER_BINDING 0x9302
#endif //GL_BUFFER_BINDING
#ifndef GL_BUFFER_DATA_SIZE
#define GL_BUFFER_DATA_SIZE 0x9303
#endif //GL_BUFFER_DATA_SIZE
#ifndef GL_NUM_ACTIVE_VARIABLES
#define GL_NUM_ACTIVE_VARIABLES 0x9304
#endif //GL_NUM_ACTIVE_VARIABLES
#ifndef GL_ACTIVE_VARIABLES
#define GL_ACTIVE_VARIABLES 0x9305
#endif //GL_ACTIVE_VARIABLES
#ifndef GL_REFERENCED_BY_VERTEX_SHADER
#define GL_REFERENCED_BY_VERTEX_SHADER 0x9306
#endif //GL_REFERENCED_BY_VERTEX_SHADER
#ifndef GL_REFERENCED_BY_TESS_CONTROL_SHADER
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0x9307
#endif //GL_REFERENCED_BY_TESS_CONTROL_SHADER
#ifndef GL_REFERENCED_BY_TESS_EVALUATION_SHADER
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0x9308
#endif //GL_REFERENCED_BY_TESS_EVALUATION_SHADER
#ifndef GL_REFERENCED_BY_GEOMETRY_SHADER
#define GL_REFERENCED_BY_GEOMETRY_SHADER 0x9309
#endif //GL_REFERENCED_BY_GEOMETRY_SHADER
#ifndef GL_REFERENCED_BY_FRAGMENT_SHADER
#define GL_REFERENCED_BY_FRAGMENT_SHADER 0x930A
#endif //GL_REFERENCED_BY_FRAGMENT_SHADER
#ifndef GL_REFERENCED_BY_COMPUTE_SHADER
#define GL_REFERENCED_BY_COMPUTE_SHADER 0x930B
#endif //GL_REFERENCED_BY_COMPUTE_SHADER
#ifndef GL_TOP_LEVEL_ARRAY_SIZE
#define GL_TOP_LEVEL_ARRAY_SIZE 0x930C
#endif //GL_TOP_LEVEL_ARRAY_SIZE
#ifndef GL_TOP_LEVEL_ARRAY_STRIDE
#define GL_TOP_LEVEL_ARRAY_STRIDE 0x930D
#endif //GL_TOP_LEVEL_ARRAY_STRIDE
#ifndef GL_LOCATION
#define GL_LOCATION 0x930E
#endif //GL_LOCATION
#ifndef GL_LOCATION_INDEX
#define GL_LOCATION_INDEX 0x930F
#endif //GL_LOCATION_INDEX
#ifndef GL_FRAMEBUFFER_DEFAULT_WIDTH
#define GL_FRAMEBUFFER_DEFAULT_WIDTH 0x9310
#endif //GL_FRAMEBUFFER_DEFAULT_WIDTH
#ifndef GL_FRAMEBUFFER_DEFAULT_HEIGHT
#define GL_FRAMEBUFFER_DEFAULT_HEIGHT 0x9311
#endif //GL_FRAMEBUFFER_DEFAULT_HEIGHT
#ifndef GL_FRAMEBUFFER_DEFAULT_LAYERS
#define GL_FRAMEBUFFER_DEFAULT_LAYERS 0x9312
#endif //GL_FRAMEBUFFER_DEFAULT_LAYERS
#ifndef GL_FRAMEBUFFER_DEFAULT_SAMPLES
#define GL_FRAMEBUFFER_DEFAULT_SAMPLES 0x9313
#endif //GL_FRAMEBUFFER_DEFAULT_SAMPLES
#ifndef GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS
#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0x9314
#endif //GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS
#ifndef GL_MAX_FRAMEBUFFER_WIDTH
#define GL_MAX_FRAMEBUFFER_WIDTH 0x9315
#endif //GL_MAX_FRAMEBUFFER_WIDTH
#ifndef GL_MAX_FRAMEBUFFER_HEIGHT
#define GL_MAX_FRAMEBUFFER_HEIGHT 0x9316
#endif //GL_MAX_FRAMEBUFFER_HEIGHT
#ifndef GL_MAX_FRAMEBUFFER_LAYERS
#define GL_MAX_FRAMEBUFFER_LAYERS 0x9317
#endif //GL_MAX_FRAMEBUFFER_LAYERS
#ifndef GL_MAX_FRAMEBUFFER_SAMPLES
#define GL_MAX_FRAMEBUFFER_SAMPLES 0x9318
#endif //GL_MAX_FRAMEBUFFER_SAMPLES
#ifndef GL_NUM_SAMPLE_COUNTS
#define GL_NUM_SAMPLE_COUNTS 0x9380
#endif //GL_NUM_SAMPLE_COUNTS
#ifndef GL_ALL_BARRIER_BITS
#define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#endif //GL_ALL_BARRIER_BITS
#ifndef GL_ALL_SHADER_BITS
#define GL_ALL_SHADER_BITS 0xFFFFFFFF
#endif //GL_ALL_SHADER_BITS
#ifndef GL_INVALID_INDEX
#define GL_INVALID_INDEX 0xFFFFFFFF
#endif //GL_INVALID_INDEX
#ifndef GL_TIMEOUT_IGNORED
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFF
#endif //GL_TIMEOUT_IGNORED
#ifndef GL_ONE
#define GL_ONE 1
#endif //GL_ONE
#ifndef GL_TRUE
#define GL_TRUE 1
#endif //GL_TRUE
CGUARDBEGIN

#ifndef GL_VERSION_1_1
extern void glBindTexture(GLenum,GLuint);
#endif

#ifndef GL_VERSION_1_0
extern void glBlendFunc(GLenum,GLenum);
#endif

#ifndef GL_VERSION_1_0
extern void glClear(GLbitfield);
#endif

#ifndef GL_VERSION_1_0
extern void glClearColor(GLfloat,GLfloat,GLfloat,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glClearDepth(GLdouble);
#endif

#ifndef GL_VERSION_1_0
extern void glClearStencil(GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glColorMask(GLboolean,GLboolean,GLboolean,GLboolean);
#endif

#ifndef GL_VERSION_1_1
extern void glCopyTexImage1D(GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLint);
#endif

#ifndef GL_VERSION_1_1
extern void glCopyTexImage2D(GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLsizei,GLint);
#endif

#ifndef GL_VERSION_1_1
extern void glCopyTexSubImage1D(GLenum,GLint,GLint,GLint,GLint,GLsizei);
#endif

#ifndef GL_VERSION_1_1
extern void glCopyTexSubImage2D(GLenum,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
#endif

#ifndef GL_VERSION_1_0
extern void glCullFace(GLenum);
#endif

#ifndef GL_VERSION_1_1
extern void glDeleteTextures(GLsizei,const GLuint *);
#endif

#ifndef GL_VERSION_1_0
extern void glDepthFunc(GLenum);
#endif

#ifndef GL_VERSION_1_0
extern void glDepthMask(GLboolean);
#endif

#ifndef GL_VERSION_1_0
extern void glDepthRange(GLdouble,GLdouble);
#endif

#ifndef GL_VERSION_1_0
extern void glDisable(GLenum);
#endif

#ifndef GL_VERSION_1_1
extern void glDrawArrays(GLenum,GLint,GLsizei);
#endif

#ifndef GL_VERSION_1_0
extern void glDrawBuffer(GLenum);
#endif

#ifndef GL_VERSION_1_1
extern void glDrawElements(GLenum,GLsizei,GLenum,const void *);
#endif

#ifndef GL_VERSION_1_0
extern void glEnable(GLenum);
#endif

#ifndef GL_VERSION_1_0
extern void glFinish();
#endif

#ifndef GL_VERSION_1_0
extern void glFlush();
#endif

#ifndef GL_VERSION_1_0
extern void glFrontFace(GLenum);
#endif

#ifndef GL_VERSION_1_1
extern void glGenTextures(GLsizei,GLuint *);
#endif

#ifndef GL_VERSION_1_0
extern void glGetBooleanv(GLenum,GLboolean *);
#endif

#ifndef GL_VERSION_1_0
extern void glGetDoublev(GLenum,GLdouble *);
#endif

#ifndef GL_VERSION_1_0
extern GLenum glGetError();
#endif

#ifndef GL_VERSION_1_0
extern void glGetFloatv(GLenum,GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glGetIntegerv(GLenum,GLint *);
#endif

#ifndef GL_VERSION_1_0
extern const GLubyte * glGetString(GLenum);
#endif

#ifndef GL_VERSION_1_0
extern void glGetTexImage(GLenum,GLint,GLenum,GLenum,void *);
#endif

#ifndef GL_VERSION_1_0
extern void glGetTexLevelParameterfv(GLenum,GLint,GLenum,GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glGetTexLevelParameteriv(GLenum,GLint,GLenum,GLint *);
#endif

#ifndef GL_VERSION_1_0
extern void glGetTexParameterfv(GLenum,GLenum,GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glGetTexParameteriv(GLenum,GLenum,GLint *);
#endif

#ifndef GL_VERSION_1_0
extern void glHint(GLenum,GLenum);
#endif

#ifndef GL_VERSION_1_0
extern GLboolean glIsEnabled(GLenum);
#endif

#ifndef GL_VERSION_1_1
extern GLboolean glIsTexture(GLuint);
#endif

#ifndef GL_VERSION_1_0
extern void glLineWidth(GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glLogicOp(GLenum);
#endif

#ifndef GL_VERSION_1_0
extern void glPixelStoref(GLenum,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glPixelStorei(GLenum,GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glPointSize(GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glPolygonMode(GLenum,GLenum);
#endif

#ifndef GL_VERSION_1_1
extern void glPolygonOffset(GLfloat,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glReadBuffer(GLenum);
#endif

#ifndef GL_VERSION_1_0
extern void glReadPixels(GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,void *);
#endif

#ifndef GL_VERSION_1_0
extern void glScissor(GLint,GLint,GLsizei,GLsizei);
#endif

#ifndef GL_VERSION_1_0
extern void glStencilFunc(GLenum,GLint,GLuint);
#endif

#ifndef GL_VERSION_1_0
extern void glStencilMask(GLuint);
#endif

#ifndef GL_VERSION_1_0
extern void glStencilOp(GLenum,GLenum,GLenum);
#endif

#ifndef GL_VERSION_1_0
extern void glTexImage1D(GLenum,GLint,GLint,GLsizei,GLint,GLenum,GLenum,const void *);
#endif

#ifndef GL_VERSION_1_0
extern void glTexImage2D(GLenum,GLint,GLint,GLsizei,GLsizei,GLint,GLenum,GLenum,const void *);
#endif

#ifndef GL_VERSION_1_0
extern void glTexParameterf(GLenum,GLenum,GLfloat);
#endif

#ifndef GL_VERSION_1_0
extern void glTexParameterfv(GLenum,GLenum,const GLfloat *);
#endif

#ifndef GL_VERSION_1_0
extern void glTexParameteri(GLenum,GLenum,GLint);
#endif

#ifndef GL_VERSION_1_0
extern void glTexParameteriv(GLenum,GLenum,const GLint *);
#endif

#ifndef GL_VERSION_1_1
extern void glTexSubImage1D(GLenum,GLint,GLint,GLsizei,GLenum,GLenum,const void *);
#endif

#ifndef GL_VERSION_1_1
extern void glTexSubImage2D(GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,const void *);
#endif

#ifndef GL_VERSION_1_0
extern void glViewport(GLint,GLint,GLsizei,GLsizei);
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ActiveShaderProgram
#define GL_ALT_FUNDEF_ActiveShaderProgram
typedef void (*PFNGLACTIVESHADERPROGRAMPROC_ALT)(GLuint,GLuint);
static inline void glActiveShaderProgram(GLuint pipeline1,GLuint program1)
{
#ifdef __cplusplus
	static PFNGLACTIVESHADERPROGRAMPROC_ALT fn=(PFNGLACTIVESHADERPROGRAMPROC_ALT)glaltGetProcAddressVersion("glActiveShaderProgram",4,3);
#else
	static PFNGLACTIVESHADERPROGRAMPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLACTIVESHADERPROGRAMPROC_ALT)glaltGetProcAddressVersion("glActiveShaderProgram",4,3); }
#endif
	 fn(pipeline1,program1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_ActiveTexture
#define GL_ALT_FUNDEF_ActiveTexture
typedef void (*PFNGLACTIVETEXTUREPROC_ALT)(GLenum);
static inline void glActiveTexture(GLenum texture1)
{
#ifdef __cplusplus
	static PFNGLACTIVETEXTUREPROC_ALT fn=(PFNGLACTIVETEXTUREPROC_ALT)glaltGetProcAddressVersion("glActiveTexture",4,3);
#else
	static PFNGLACTIVETEXTUREPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLACTIVETEXTUREPROC_ALT)glaltGetProcAddressVersion("glActiveTexture",4,3); }
#endif
	 fn(texture1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_AttachShader
#define GL_ALT_FUNDEF_AttachShader
typedef void (*PFNGLATTACHSHADERPROC_ALT)(GLuint,GLuint);
static inline void glAttachShader(GLuint program1,GLuint shader1)
{
#ifdef __cplusplus
	static PFNGLATTACHSHADERPROC_ALT fn=(PFNGLATTACHSHADERPROC_ALT)glaltGetProcAddressVersion("glAttachShader",4,3);
#else
	static PFNGLATTACHSHADERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLATTACHSHADERPROC_ALT)glaltGetProcAddressVersion("glAttachShader",4,3); }
#endif
	 fn(program1,shader1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_BeginConditionalRender
#define GL_ALT_FUNDEF_BeginConditionalRender
typedef void (*PFNGLBEGINCONDITIONALRENDERPROC_ALT)(GLuint,GLenum);
static inline void glBeginConditionalRender(GLuint id1,GLenum mode1)
{
#ifdef __cplusplus
	static PFNGLBEGINCONDITIONALRENDERPROC_ALT fn=(PFNGLBEGINCONDITIONALRENDERPROC_ALT)glaltGetProcAddressVersion("glBeginConditionalRender",4,3);
#else
	static PFNGLBEGINCONDITIONALRENDERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBEGINCONDITIONALRENDERPROC_ALT)glaltGetProcAddressVersion("glBeginConditionalRender",4,3); }
#endif
	 fn(id1,mode1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_BeginQuery
#define GL_ALT_FUNDEF_BeginQuery
typedef void (*PFNGLBEGINQUERYPROC_ALT)(GLenum,GLuint);
static inline void glBeginQuery(GLenum target1,GLuint id1)
{
#ifdef __cplusplus
	static PFNGLBEGINQUERYPROC_ALT fn=(PFNGLBEGINQUERYPROC_ALT)glaltGetProcAddressVersion("glBeginQuery",4,3);
#else
	static PFNGLBEGINQUERYPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBEGINQUERYPROC_ALT)glaltGetProcAddressVersion("glBeginQuery",4,3); }
#endif
	 fn(target1,id1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_BeginQueryIndexed
#define GL_ALT_FUNDEF_BeginQueryIndexed
typedef void (*PFNGLBEGINQUERYINDEXEDPROC_ALT)(GLenum,GLuint,GLuint);
static inline void glBeginQueryIndexed(GLenum target1,GLuint index1,GLuint id1)
{
#ifdef __cplusplus
	static PFNGLBEGINQUERYINDEXEDPROC_ALT fn=(PFNGLBEGINQUERYINDEXEDPROC_ALT)glaltGetProcAddressVersion("glBeginQueryIndexed",4,3);
#else
	static PFNGLBEGINQUERYINDEXEDPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBEGINQUERYINDEXEDPROC_ALT)glaltGetProcAddressVersion("glBeginQueryIndexed",4,3); }
#endif
	 fn(target1,index1,id1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_BeginTransformFeedback
#define GL_ALT_FUNDEF_BeginTransformFeedback
typedef void (*PFNGLBEGINTRANSFORMFEEDBACKPROC_ALT)(GLenum);
static inline void glBeginTransformFeedback(GLenum primitiveMode1)
{
#ifdef __cplusplus
	static PFNGLBEGINTRANSFORMFEEDBACKPROC_ALT fn=(PFNGLBEGINTRANSFORMFEEDBACKPROC_ALT)glaltGetProcAddressVersion("glBeginTransformFeedback",4,3);
#else
	static PFNGLBEGINTRANSFORMFEEDBACKPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBEGINTRANSFORMFEEDBACKPROC_ALT)glaltGetProcAddressVersion("glBeginTransformFeedback",4,3); }
#endif
	 fn(primitiveMode1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_BindAttribLocation
#define GL_ALT_FUNDEF_BindAttribLocation
typedef void (*PFNGLBINDATTRIBLOCATIONPROC_ALT)(GLuint,GLuint,const GLchar *);
static inline void glBindAttribLocation(GLuint program1,GLuint index1,const GLchar * name1)
{
#ifdef __cplusplus
	static PFNGLBINDATTRIBLOCATIONPROC_ALT fn=(PFNGLBINDATTRIBLOCATIONPROC_ALT)glaltGetProcAddressVersion("glBindAttribLocation",4,3);
#else
	static PFNGLBINDATTRIBLOCATIONPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBINDATTRIBLOCATIONPROC_ALT)glaltGetProcAddressVersion("glBindAttribLocation",4,3); }
#endif
	 fn(program1,index1,name1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_BindBuffer
#define GL_ALT_FUNDEF_BindBuffer
typedef void (*PFNGLBINDBUFFERPROC_ALT)(GLenum,GLuint);
static inline void glBindBuffer(GLenum target1,GLuint buffer1)
{
#ifdef __cplusplus
	static PFNGLBINDBUFFERPROC_ALT fn=(PFNGLBINDBUFFERPROC_ALT)glaltGetProcAddressVersion("glBindBuffer",4,3);
#else
	static PFNGLBINDBUFFERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBINDBUFFERPROC_ALT)glaltGetProcAddressVersion("glBindBuffer",4,3); }
#endif
	 fn(target1,buffer1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_BindBufferBase
#define GL_ALT_FUNDEF_BindBufferBase
typedef void (*PFNGLBINDBUFFERBASEPROC_ALT)(GLenum,GLuint,GLuint);
static inline void glBindBufferBase(GLenum target1,GLuint index1,GLuint buffer1)
{
#ifdef __cplusplus
	static PFNGLBINDBUFFERBASEPROC_ALT fn=(PFNGLBINDBUFFERBASEPROC_ALT)glaltGetProcAddressVersion("glBindBufferBase",4,3);
#else
	static PFNGLBINDBUFFERBASEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBINDBUFFERBASEPROC_ALT)glaltGetProcAddressVersion("glBindBufferBase",4,3); }
#endif
	 fn(target1,index1,buffer1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_BindBufferRange
#define GL_ALT_FUNDEF_BindBufferRange
typedef void (*PFNGLBINDBUFFERRANGEPROC_ALT)(GLenum,GLuint,GLuint,GLintptr,GLsizeiptr);
static inline void glBindBufferRange(GLenum target1,GLuint index1,GLuint buffer1,GLintptr offset1,GLsizeiptr size1)
{
#ifdef __cplusplus
	static PFNGLBINDBUFFERRANGEPROC_ALT fn=(PFNGLBINDBUFFERRANGEPROC_ALT)glaltGetProcAddressVersion("glBindBufferRange",4,3);
#else
	static PFNGLBINDBUFFERRANGEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBINDBUFFERRANGEPROC_ALT)glaltGetProcAddressVersion("glBindBufferRange",4,3); }
#endif
	 fn(target1,index1,buffer1,offset1,size1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_BindFragDataLocation
#define GL_ALT_FUNDEF_BindFragDataLocation
typedef void (*PFNGLBINDFRAGDATALOCATIONPROC_ALT)(GLuint,GLuint,const GLchar *);
static inline void glBindFragDataLocation(GLuint program1,GLuint color1,const GLchar * name1)
{
#ifdef __cplusplus
	static PFNGLBINDFRAGDATALOCATIONPROC_ALT fn=(PFNGLBINDFRAGDATALOCATIONPROC_ALT)glaltGetProcAddressVersion("glBindFragDataLocation",4,3);
#else
	static PFNGLBINDFRAGDATALOCATIONPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBINDFRAGDATALOCATIONPROC_ALT)glaltGetProcAddressVersion("glBindFragDataLocation",4,3); }
#endif
	 fn(program1,color1,name1);
}
#endif
#endif

#ifndef GL_VERSION_3_3
#ifndef	GL_ALT_FUNDEF_BindFragDataLocationIndexed
#define GL_ALT_FUNDEF_BindFragDataLocationIndexed
typedef void (*PFNGLBINDFRAGDATALOCATIONINDEXEDPROC_ALT)(GLuint,GLuint,GLuint,const GLchar *);
static inline void glBindFragDataLocationIndexed(GLuint program1,GLuint colorNumber1,GLuint index1,const GLchar * name1)
{
#ifdef __cplusplus
	static PFNGLBINDFRAGDATALOCATIONINDEXEDPROC_ALT fn=(PFNGLBINDFRAGDATALOCATIONINDEXEDPROC_ALT)glaltGetProcAddressVersion("glBindFragDataLocationIndexed",4,3);
#else
	static PFNGLBINDFRAGDATALOCATIONINDEXEDPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBINDFRAGDATALOCATIONINDEXEDPROC_ALT)glaltGetProcAddressVersion("glBindFragDataLocationIndexed",4,3); }
#endif
	 fn(program1,colorNumber1,index1,name1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_BindFramebuffer
#define GL_ALT_FUNDEF_BindFramebuffer
typedef void (*PFNGLBINDFRAMEBUFFERPROC_ALT)(GLenum,GLuint);
static inline void glBindFramebuffer(GLenum target1,GLuint framebuffer1)
{
#ifdef __cplusplus
	static PFNGLBINDFRAMEBUFFERPROC_ALT fn=(PFNGLBINDFRAMEBUFFERPROC_ALT)glaltGetProcAddressVersion("glBindFramebuffer",4,3);
#else
	static PFNGLBINDFRAMEBUFFERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBINDFRAMEBUFFERPROC_ALT)glaltGetProcAddressVersion("glBindFramebuffer",4,3); }
#endif
	 fn(target1,framebuffer1);
}
#endif
#endif

#ifndef GL_VERSION_4_2
#ifndef	GL_ALT_FUNDEF_BindImageTexture
#define GL_ALT_FUNDEF_BindImageTexture
typedef void (*PFNGLBINDIMAGETEXTUREPROC_ALT)(GLuint,GLuint,GLint,GLboolean,GLint,GLenum,GLenum);
static inline void glBindImageTexture(GLuint unit1,GLuint texture1,GLint level1,GLboolean layered1,GLint layer1,GLenum access1,GLenum format1)
{
#ifdef __cplusplus
	static PFNGLBINDIMAGETEXTUREPROC_ALT fn=(PFNGLBINDIMAGETEXTUREPROC_ALT)glaltGetProcAddressVersion("glBindImageTexture",4,3);
#else
	static PFNGLBINDIMAGETEXTUREPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBINDIMAGETEXTUREPROC_ALT)glaltGetProcAddressVersion("glBindImageTexture",4,3); }
#endif
	 fn(unit1,texture1,level1,layered1,layer1,access1,format1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_BindProgramPipeline
#define GL_ALT_FUNDEF_BindProgramPipeline
typedef void (*PFNGLBINDPROGRAMPIPELINEPROC_ALT)(GLuint);
static inline void glBindProgramPipeline(GLuint pipeline1)
{
#ifdef __cplusplus
	static PFNGLBINDPROGRAMPIPELINEPROC_ALT fn=(PFNGLBINDPROGRAMPIPELINEPROC_ALT)glaltGetProcAddressVersion("glBindProgramPipeline",4,3);
#else
	static PFNGLBINDPROGRAMPIPELINEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBINDPROGRAMPIPELINEPROC_ALT)glaltGetProcAddressVersion("glBindProgramPipeline",4,3); }
#endif
	 fn(pipeline1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_BindRenderbuffer
#define GL_ALT_FUNDEF_BindRenderbuffer
typedef void (*PFNGLBINDRENDERBUFFERPROC_ALT)(GLenum,GLuint);
static inline void glBindRenderbuffer(GLenum target1,GLuint renderbuffer1)
{
#ifdef __cplusplus
	static PFNGLBINDRENDERBUFFERPROC_ALT fn=(PFNGLBINDRENDERBUFFERPROC_ALT)glaltGetProcAddressVersion("glBindRenderbuffer",4,3);
#else
	static PFNGLBINDRENDERBUFFERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBINDRENDERBUFFERPROC_ALT)glaltGetProcAddressVersion("glBindRenderbuffer",4,3); }
#endif
	 fn(target1,renderbuffer1);
}
#endif
#endif

#ifndef GL_VERSION_3_3
#ifndef	GL_ALT_FUNDEF_BindSampler
#define GL_ALT_FUNDEF_BindSampler
typedef void (*PFNGLBINDSAMPLERPROC_ALT)(GLuint,GLuint);
static inline void glBindSampler(GLuint unit1,GLuint sampler1)
{
#ifdef __cplusplus
	static PFNGLBINDSAMPLERPROC_ALT fn=(PFNGLBINDSAMPLERPROC_ALT)glaltGetProcAddressVersion("glBindSampler",4,3);
#else
	static PFNGLBINDSAMPLERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBINDSAMPLERPROC_ALT)glaltGetProcAddressVersion("glBindSampler",4,3); }
#endif
	 fn(unit1,sampler1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_BindTransformFeedback
#define GL_ALT_FUNDEF_BindTransformFeedback
typedef void (*PFNGLBINDTRANSFORMFEEDBACKPROC_ALT)(GLenum,GLuint);
static inline void glBindTransformFeedback(GLenum target1,GLuint id1)
{
#ifdef __cplusplus
	static PFNGLBINDTRANSFORMFEEDBACKPROC_ALT fn=(PFNGLBINDTRANSFORMFEEDBACKPROC_ALT)glaltGetProcAddressVersion("glBindTransformFeedback",4,3);
#else
	static PFNGLBINDTRANSFORMFEEDBACKPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBINDTRANSFORMFEEDBACKPROC_ALT)glaltGetProcAddressVersion("glBindTransformFeedback",4,3); }
#endif
	 fn(target1,id1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_BindVertexArray
#define GL_ALT_FUNDEF_BindVertexArray
typedef void (*PFNGLBINDVERTEXARRAYPROC_ALT)(GLuint);
static inline void glBindVertexArray(GLuint array1)
{
#ifdef __cplusplus
	static PFNGLBINDVERTEXARRAYPROC_ALT fn=(PFNGLBINDVERTEXARRAYPROC_ALT)glaltGetProcAddressVersion("glBindVertexArray",4,3);
#else
	static PFNGLBINDVERTEXARRAYPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBINDVERTEXARRAYPROC_ALT)glaltGetProcAddressVersion("glBindVertexArray",4,3); }
#endif
	 fn(array1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_BindVertexBuffer
#define GL_ALT_FUNDEF_BindVertexBuffer
typedef void (*PFNGLBINDVERTEXBUFFERPROC_ALT)(GLuint,GLuint,GLintptr,GLsizei);
static inline void glBindVertexBuffer(GLuint bindingindex1,GLuint buffer1,GLintptr offset1,GLsizei stride1)
{
#ifdef __cplusplus
	static PFNGLBINDVERTEXBUFFERPROC_ALT fn=(PFNGLBINDVERTEXBUFFERPROC_ALT)glaltGetProcAddressVersion("glBindVertexBuffer",4,3);
#else
	static PFNGLBINDVERTEXBUFFERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBINDVERTEXBUFFERPROC_ALT)glaltGetProcAddressVersion("glBindVertexBuffer",4,3); }
#endif
	 fn(bindingindex1,buffer1,offset1,stride1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_BlendColor
#define GL_ALT_FUNDEF_BlendColor
typedef void (*PFNGLBLENDCOLORPROC_ALT)(GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glBlendColor(GLfloat red1,GLfloat green1,GLfloat blue1,GLfloat alpha1)
{
#ifdef __cplusplus
	static PFNGLBLENDCOLORPROC_ALT fn=(PFNGLBLENDCOLORPROC_ALT)glaltGetProcAddressVersion("glBlendColor",4,3);
#else
	static PFNGLBLENDCOLORPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBLENDCOLORPROC_ALT)glaltGetProcAddressVersion("glBlendColor",4,3); }
#endif
	 fn(red1,green1,blue1,alpha1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_BlendEquation
#define GL_ALT_FUNDEF_BlendEquation
typedef void (*PFNGLBLENDEQUATIONPROC_ALT)(GLenum);
static inline void glBlendEquation(GLenum mode1)
{
#ifdef __cplusplus
	static PFNGLBLENDEQUATIONPROC_ALT fn=(PFNGLBLENDEQUATIONPROC_ALT)glaltGetProcAddressVersion("glBlendEquation",4,3);
#else
	static PFNGLBLENDEQUATIONPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBLENDEQUATIONPROC_ALT)glaltGetProcAddressVersion("glBlendEquation",4,3); }
#endif
	 fn(mode1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_BlendEquationSeparate
#define GL_ALT_FUNDEF_BlendEquationSeparate
typedef void (*PFNGLBLENDEQUATIONSEPARATEPROC_ALT)(GLenum,GLenum);
static inline void glBlendEquationSeparate(GLenum modeRGB1,GLenum modeAlpha1)
{
#ifdef __cplusplus
	static PFNGLBLENDEQUATIONSEPARATEPROC_ALT fn=(PFNGLBLENDEQUATIONSEPARATEPROC_ALT)glaltGetProcAddressVersion("glBlendEquationSeparate",4,3);
#else
	static PFNGLBLENDEQUATIONSEPARATEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBLENDEQUATIONSEPARATEPROC_ALT)glaltGetProcAddressVersion("glBlendEquationSeparate",4,3); }
#endif
	 fn(modeRGB1,modeAlpha1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_BlendEquationSeparatei
#define GL_ALT_FUNDEF_BlendEquationSeparatei
typedef void (*PFNGLBLENDEQUATIONSEPARATEIPROC_ALT)(GLuint,GLenum,GLenum);
static inline void glBlendEquationSeparatei(GLuint buf1,GLenum modeRGB1,GLenum modeAlpha1)
{
#ifdef __cplusplus
	static PFNGLBLENDEQUATIONSEPARATEIPROC_ALT fn=(PFNGLBLENDEQUATIONSEPARATEIPROC_ALT)glaltGetProcAddressVersion("glBlendEquationSeparatei",4,3);
#else
	static PFNGLBLENDEQUATIONSEPARATEIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBLENDEQUATIONSEPARATEIPROC_ALT)glaltGetProcAddressVersion("glBlendEquationSeparatei",4,3); }
#endif
	 fn(buf1,modeRGB1,modeAlpha1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_BlendEquationi
#define GL_ALT_FUNDEF_BlendEquationi
typedef void (*PFNGLBLENDEQUATIONIPROC_ALT)(GLuint,GLenum);
static inline void glBlendEquationi(GLuint buf1,GLenum mode1)
{
#ifdef __cplusplus
	static PFNGLBLENDEQUATIONIPROC_ALT fn=(PFNGLBLENDEQUATIONIPROC_ALT)glaltGetProcAddressVersion("glBlendEquationi",4,3);
#else
	static PFNGLBLENDEQUATIONIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBLENDEQUATIONIPROC_ALT)glaltGetProcAddressVersion("glBlendEquationi",4,3); }
#endif
	 fn(buf1,mode1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_BlendFuncSeparate
#define GL_ALT_FUNDEF_BlendFuncSeparate
typedef void (*PFNGLBLENDFUNCSEPARATEPROC_ALT)(GLenum,GLenum,GLenum,GLenum);
static inline void glBlendFuncSeparate(GLenum sfactorRGB1,GLenum dfactorRGB1,GLenum sfactorAlpha1,GLenum dfactorAlpha1)
{
#ifdef __cplusplus
	static PFNGLBLENDFUNCSEPARATEPROC_ALT fn=(PFNGLBLENDFUNCSEPARATEPROC_ALT)glaltGetProcAddressVersion("glBlendFuncSeparate",4,3);
#else
	static PFNGLBLENDFUNCSEPARATEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBLENDFUNCSEPARATEPROC_ALT)glaltGetProcAddressVersion("glBlendFuncSeparate",4,3); }
#endif
	 fn(sfactorRGB1,dfactorRGB1,sfactorAlpha1,dfactorAlpha1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_BlendFuncSeparatei
#define GL_ALT_FUNDEF_BlendFuncSeparatei
typedef void (*PFNGLBLENDFUNCSEPARATEIPROC_ALT)(GLuint,GLenum,GLenum,GLenum,GLenum);
static inline void glBlendFuncSeparatei(GLuint buf1,GLenum srcRGB1,GLenum dstRGB1,GLenum srcAlpha1,GLenum dstAlpha1)
{
#ifdef __cplusplus
	static PFNGLBLENDFUNCSEPARATEIPROC_ALT fn=(PFNGLBLENDFUNCSEPARATEIPROC_ALT)glaltGetProcAddressVersion("glBlendFuncSeparatei",4,3);
#else
	static PFNGLBLENDFUNCSEPARATEIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBLENDFUNCSEPARATEIPROC_ALT)glaltGetProcAddressVersion("glBlendFuncSeparatei",4,3); }
#endif
	 fn(buf1,srcRGB1,dstRGB1,srcAlpha1,dstAlpha1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_BlendFunci
#define GL_ALT_FUNDEF_BlendFunci
typedef void (*PFNGLBLENDFUNCIPROC_ALT)(GLuint,GLenum,GLenum);
static inline void glBlendFunci(GLuint buf1,GLenum src1,GLenum dst1)
{
#ifdef __cplusplus
	static PFNGLBLENDFUNCIPROC_ALT fn=(PFNGLBLENDFUNCIPROC_ALT)glaltGetProcAddressVersion("glBlendFunci",4,3);
#else
	static PFNGLBLENDFUNCIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBLENDFUNCIPROC_ALT)glaltGetProcAddressVersion("glBlendFunci",4,3); }
#endif
	 fn(buf1,src1,dst1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_BlitFramebuffer
#define GL_ALT_FUNDEF_BlitFramebuffer
typedef void (*PFNGLBLITFRAMEBUFFERPROC_ALT)(GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLbitfield,GLenum);
static inline void glBlitFramebuffer(GLint srcX01,GLint srcY01,GLint srcX11,GLint srcY11,GLint dstX01,GLint dstY01,GLint dstX11,GLint dstY11,GLbitfield mask1,GLenum filter1)
{
#ifdef __cplusplus
	static PFNGLBLITFRAMEBUFFERPROC_ALT fn=(PFNGLBLITFRAMEBUFFERPROC_ALT)glaltGetProcAddressVersion("glBlitFramebuffer",4,3);
#else
	static PFNGLBLITFRAMEBUFFERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBLITFRAMEBUFFERPROC_ALT)glaltGetProcAddressVersion("glBlitFramebuffer",4,3); }
#endif
	 fn(srcX01,srcY01,srcX11,srcY11,dstX01,dstY01,dstX11,dstY11,mask1,filter1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_BufferData
#define GL_ALT_FUNDEF_BufferData
typedef void (*PFNGLBUFFERDATAPROC_ALT)(GLenum,GLsizeiptr,const void *,GLenum);
static inline void glBufferData(GLenum target1,GLsizeiptr size1,const void * data1,GLenum usage1)
{
#ifdef __cplusplus
	static PFNGLBUFFERDATAPROC_ALT fn=(PFNGLBUFFERDATAPROC_ALT)glaltGetProcAddressVersion("glBufferData",4,3);
#else
	static PFNGLBUFFERDATAPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBUFFERDATAPROC_ALT)glaltGetProcAddressVersion("glBufferData",4,3); }
#endif
	 fn(target1,size1,data1,usage1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_BufferSubData
#define GL_ALT_FUNDEF_BufferSubData
typedef void (*PFNGLBUFFERSUBDATAPROC_ALT)(GLenum,GLintptr,GLsizeiptr,const void *);
static inline void glBufferSubData(GLenum target1,GLintptr offset1,GLsizeiptr size1,const void * data1)
{
#ifdef __cplusplus
	static PFNGLBUFFERSUBDATAPROC_ALT fn=(PFNGLBUFFERSUBDATAPROC_ALT)glaltGetProcAddressVersion("glBufferSubData",4,3);
#else
	static PFNGLBUFFERSUBDATAPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLBUFFERSUBDATAPROC_ALT)glaltGetProcAddressVersion("glBufferSubData",4,3); }
#endif
	 fn(target1,offset1,size1,data1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_CheckFramebufferStatus
#define GL_ALT_FUNDEF_CheckFramebufferStatus
typedef GLenum (*PFNGLCHECKFRAMEBUFFERSTATUSPROC_ALT)(GLenum);
static inline GLenum glCheckFramebufferStatus(GLenum target1)
{
#ifdef __cplusplus
	static PFNGLCHECKFRAMEBUFFERSTATUSPROC_ALT fn=(PFNGLCHECKFRAMEBUFFERSTATUSPROC_ALT)glaltGetProcAddressVersion("glCheckFramebufferStatus",4,3);
#else
	static PFNGLCHECKFRAMEBUFFERSTATUSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCHECKFRAMEBUFFERSTATUSPROC_ALT)glaltGetProcAddressVersion("glCheckFramebufferStatus",4,3); }
#endif
	return fn(target1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_ClampColor
#define GL_ALT_FUNDEF_ClampColor
typedef void (*PFNGLCLAMPCOLORPROC_ALT)(GLenum,GLenum);
static inline void glClampColor(GLenum target1,GLenum clamp1)
{
#ifdef __cplusplus
	static PFNGLCLAMPCOLORPROC_ALT fn=(PFNGLCLAMPCOLORPROC_ALT)glaltGetProcAddressVersion("glClampColor",4,3);
#else
	static PFNGLCLAMPCOLORPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCLAMPCOLORPROC_ALT)glaltGetProcAddressVersion("glClampColor",4,3); }
#endif
	 fn(target1,clamp1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_ClearBufferData
#define GL_ALT_FUNDEF_ClearBufferData
typedef void (*PFNGLCLEARBUFFERDATAPROC_ALT)(GLenum,GLenum,GLenum,GLenum,const void *);
static inline void glClearBufferData(GLenum target1,GLenum internalformat1,GLenum format1,GLenum type1,const void * data1)
{
#ifdef __cplusplus
	static PFNGLCLEARBUFFERDATAPROC_ALT fn=(PFNGLCLEARBUFFERDATAPROC_ALT)glaltGetProcAddressVersion("glClearBufferData",4,3);
#else
	static PFNGLCLEARBUFFERDATAPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCLEARBUFFERDATAPROC_ALT)glaltGetProcAddressVersion("glClearBufferData",4,3); }
#endif
	 fn(target1,internalformat1,format1,type1,data1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_ClearBufferSubData
#define GL_ALT_FUNDEF_ClearBufferSubData
typedef void (*PFNGLCLEARBUFFERSUBDATAPROC_ALT)(GLenum,GLenum,GLintptr,GLsizeiptr,GLenum,GLenum,const void *);
static inline void glClearBufferSubData(GLenum target1,GLenum internalformat1,GLintptr offset1,GLsizeiptr size1,GLenum format1,GLenum type1,const void * data1)
{
#ifdef __cplusplus
	static PFNGLCLEARBUFFERSUBDATAPROC_ALT fn=(PFNGLCLEARBUFFERSUBDATAPROC_ALT)glaltGetProcAddressVersion("glClearBufferSubData",4,3);
#else
	static PFNGLCLEARBUFFERSUBDATAPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCLEARBUFFERSUBDATAPROC_ALT)glaltGetProcAddressVersion("glClearBufferSubData",4,3); }
#endif
	 fn(target1,internalformat1,offset1,size1,format1,type1,data1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_ClearBufferfi
#define GL_ALT_FUNDEF_ClearBufferfi
typedef void (*PFNGLCLEARBUFFERFIPROC_ALT)(GLenum,GLint,GLfloat,GLint);
static inline void glClearBufferfi(GLenum buffer1,GLint drawbuffer1,GLfloat depth1,GLint stencil1)
{
#ifdef __cplusplus
	static PFNGLCLEARBUFFERFIPROC_ALT fn=(PFNGLCLEARBUFFERFIPROC_ALT)glaltGetProcAddressVersion("glClearBufferfi",4,3);
#else
	static PFNGLCLEARBUFFERFIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCLEARBUFFERFIPROC_ALT)glaltGetProcAddressVersion("glClearBufferfi",4,3); }
#endif
	 fn(buffer1,drawbuffer1,depth1,stencil1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_ClearBufferfv
#define GL_ALT_FUNDEF_ClearBufferfv
typedef void (*PFNGLCLEARBUFFERFVPROC_ALT)(GLenum,GLint,const GLfloat *);
static inline void glClearBufferfv(GLenum buffer1,GLint drawbuffer1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLCLEARBUFFERFVPROC_ALT fn=(PFNGLCLEARBUFFERFVPROC_ALT)glaltGetProcAddressVersion("glClearBufferfv",4,3);
#else
	static PFNGLCLEARBUFFERFVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCLEARBUFFERFVPROC_ALT)glaltGetProcAddressVersion("glClearBufferfv",4,3); }
#endif
	 fn(buffer1,drawbuffer1,value1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_ClearBufferiv
#define GL_ALT_FUNDEF_ClearBufferiv
typedef void (*PFNGLCLEARBUFFERIVPROC_ALT)(GLenum,GLint,const GLint *);
static inline void glClearBufferiv(GLenum buffer1,GLint drawbuffer1,const GLint * value1)
{
#ifdef __cplusplus
	static PFNGLCLEARBUFFERIVPROC_ALT fn=(PFNGLCLEARBUFFERIVPROC_ALT)glaltGetProcAddressVersion("glClearBufferiv",4,3);
#else
	static PFNGLCLEARBUFFERIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCLEARBUFFERIVPROC_ALT)glaltGetProcAddressVersion("glClearBufferiv",4,3); }
#endif
	 fn(buffer1,drawbuffer1,value1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_ClearBufferuiv
#define GL_ALT_FUNDEF_ClearBufferuiv
typedef void (*PFNGLCLEARBUFFERUIVPROC_ALT)(GLenum,GLint,const GLuint *);
static inline void glClearBufferuiv(GLenum buffer1,GLint drawbuffer1,const GLuint * value1)
{
#ifdef __cplusplus
	static PFNGLCLEARBUFFERUIVPROC_ALT fn=(PFNGLCLEARBUFFERUIVPROC_ALT)glaltGetProcAddressVersion("glClearBufferuiv",4,3);
#else
	static PFNGLCLEARBUFFERUIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCLEARBUFFERUIVPROC_ALT)glaltGetProcAddressVersion("glClearBufferuiv",4,3); }
#endif
	 fn(buffer1,drawbuffer1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ClearDepthf
#define GL_ALT_FUNDEF_ClearDepthf
typedef void (*PFNGLCLEARDEPTHFPROC_ALT)(GLfloat);
static inline void glClearDepthf(GLfloat d1)
{
#ifdef __cplusplus
	static PFNGLCLEARDEPTHFPROC_ALT fn=(PFNGLCLEARDEPTHFPROC_ALT)glaltGetProcAddressVersion("glClearDepthf",4,3);
#else
	static PFNGLCLEARDEPTHFPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCLEARDEPTHFPROC_ALT)glaltGetProcAddressVersion("glClearDepthf",4,3); }
#endif
	 fn(d1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_ClientWaitSync
#define GL_ALT_FUNDEF_ClientWaitSync
typedef GLenum (*PFNGLCLIENTWAITSYNCPROC_ALT)(GLsync,GLbitfield,GLuint64);
static inline GLenum glClientWaitSync(GLsync sync1,GLbitfield flags1,GLuint64 timeout1)
{
#ifdef __cplusplus
	static PFNGLCLIENTWAITSYNCPROC_ALT fn=(PFNGLCLIENTWAITSYNCPROC_ALT)glaltGetProcAddressVersion("glClientWaitSync",4,3);
#else
	static PFNGLCLIENTWAITSYNCPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCLIENTWAITSYNCPROC_ALT)glaltGetProcAddressVersion("glClientWaitSync",4,3); }
#endif
	return fn(sync1,flags1,timeout1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_ColorMaski
#define GL_ALT_FUNDEF_ColorMaski
typedef void (*PFNGLCOLORMASKIPROC_ALT)(GLuint,GLboolean,GLboolean,GLboolean,GLboolean);
static inline void glColorMaski(GLuint index1,GLboolean r1,GLboolean g1,GLboolean b1,GLboolean a1)
{
#ifdef __cplusplus
	static PFNGLCOLORMASKIPROC_ALT fn=(PFNGLCOLORMASKIPROC_ALT)glaltGetProcAddressVersion("glColorMaski",4,3);
#else
	static PFNGLCOLORMASKIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCOLORMASKIPROC_ALT)glaltGetProcAddressVersion("glColorMaski",4,3); }
#endif
	 fn(index1,r1,g1,b1,a1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_CompileShader
#define GL_ALT_FUNDEF_CompileShader
typedef void (*PFNGLCOMPILESHADERPROC_ALT)(GLuint);
static inline void glCompileShader(GLuint shader1)
{
#ifdef __cplusplus
	static PFNGLCOMPILESHADERPROC_ALT fn=(PFNGLCOMPILESHADERPROC_ALT)glaltGetProcAddressVersion("glCompileShader",4,3);
#else
	static PFNGLCOMPILESHADERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCOMPILESHADERPROC_ALT)glaltGetProcAddressVersion("glCompileShader",4,3); }
#endif
	 fn(shader1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_CompressedTexImage1D
#define GL_ALT_FUNDEF_CompressedTexImage1D
typedef void (*PFNGLCOMPRESSEDTEXIMAGE1DPROC_ALT)(GLenum,GLint,GLenum,GLsizei,GLint,GLsizei,const void *);
static inline void glCompressedTexImage1D(GLenum target1,GLint level1,GLenum internalformat1,GLsizei width1,GLint border1,GLsizei imageSize1,const void * data1)
{
#ifdef __cplusplus
	static PFNGLCOMPRESSEDTEXIMAGE1DPROC_ALT fn=(PFNGLCOMPRESSEDTEXIMAGE1DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexImage1D",4,3);
#else
	static PFNGLCOMPRESSEDTEXIMAGE1DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCOMPRESSEDTEXIMAGE1DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexImage1D",4,3); }
#endif
	 fn(target1,level1,internalformat1,width1,border1,imageSize1,data1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_CompressedTexImage2D
#define GL_ALT_FUNDEF_CompressedTexImage2D
typedef void (*PFNGLCOMPRESSEDTEXIMAGE2DPROC_ALT)(GLenum,GLint,GLenum,GLsizei,GLsizei,GLint,GLsizei,const void *);
static inline void glCompressedTexImage2D(GLenum target1,GLint level1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLint border1,GLsizei imageSize1,const void * data1)
{
#ifdef __cplusplus
	static PFNGLCOMPRESSEDTEXIMAGE2DPROC_ALT fn=(PFNGLCOMPRESSEDTEXIMAGE2DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexImage2D",4,3);
#else
	static PFNGLCOMPRESSEDTEXIMAGE2DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCOMPRESSEDTEXIMAGE2DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexImage2D",4,3); }
#endif
	 fn(target1,level1,internalformat1,width1,height1,border1,imageSize1,data1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_CompressedTexImage3D
#define GL_ALT_FUNDEF_CompressedTexImage3D
typedef void (*PFNGLCOMPRESSEDTEXIMAGE3DPROC_ALT)(GLenum,GLint,GLenum,GLsizei,GLsizei,GLsizei,GLint,GLsizei,const void *);
static inline void glCompressedTexImage3D(GLenum target1,GLint level1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLint border1,GLsizei imageSize1,const void * data1)
{
#ifdef __cplusplus
	static PFNGLCOMPRESSEDTEXIMAGE3DPROC_ALT fn=(PFNGLCOMPRESSEDTEXIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexImage3D",4,3);
#else
	static PFNGLCOMPRESSEDTEXIMAGE3DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCOMPRESSEDTEXIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexImage3D",4,3); }
#endif
	 fn(target1,level1,internalformat1,width1,height1,depth1,border1,imageSize1,data1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_CompressedTexSubImage1D
#define GL_ALT_FUNDEF_CompressedTexSubImage1D
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC_ALT)(GLenum,GLint,GLint,GLsizei,GLenum,GLsizei,const void *);
static inline void glCompressedTexSubImage1D(GLenum target1,GLint level1,GLint xoffset1,GLsizei width1,GLenum format1,GLsizei imageSize1,const void * data1)
{
#ifdef __cplusplus
	static PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC_ALT fn=(PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexSubImage1D",4,3);
#else
	static PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexSubImage1D",4,3); }
#endif
	 fn(target1,level1,xoffset1,width1,format1,imageSize1,data1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_CompressedTexSubImage2D
#define GL_ALT_FUNDEF_CompressedTexSubImage2D
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC_ALT)(GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLsizei,const void *);
static inline void glCompressedTexSubImage2D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLsizei width1,GLsizei height1,GLenum format1,GLsizei imageSize1,const void * data1)
{
#ifdef __cplusplus
	static PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC_ALT fn=(PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexSubImage2D",4,3);
#else
	static PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexSubImage2D",4,3); }
#endif
	 fn(target1,level1,xoffset1,yoffset1,width1,height1,format1,imageSize1,data1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_CompressedTexSubImage3D
#define GL_ALT_FUNDEF_CompressedTexSubImage3D
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC_ALT)(GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLsizei,const void *);
static inline void glCompressedTexSubImage3D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLsizei width1,GLsizei height1,GLsizei depth1,GLenum format1,GLsizei imageSize1,const void * data1)
{
#ifdef __cplusplus
	static PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC_ALT fn=(PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexSubImage3D",4,3);
#else
	static PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexSubImage3D",4,3); }
#endif
	 fn(target1,level1,xoffset1,yoffset1,zoffset1,width1,height1,depth1,format1,imageSize1,data1);
}
#endif
#endif

#ifndef GL_VERSION_3_1
#ifndef	GL_ALT_FUNDEF_CopyBufferSubData
#define GL_ALT_FUNDEF_CopyBufferSubData
typedef void (*PFNGLCOPYBUFFERSUBDATAPROC_ALT)(GLenum,GLenum,GLintptr,GLintptr,GLsizeiptr);
static inline void glCopyBufferSubData(GLenum readTarget1,GLenum writeTarget1,GLintptr readOffset1,GLintptr writeOffset1,GLsizeiptr size1)
{
#ifdef __cplusplus
	static PFNGLCOPYBUFFERSUBDATAPROC_ALT fn=(PFNGLCOPYBUFFERSUBDATAPROC_ALT)glaltGetProcAddressVersion("glCopyBufferSubData",4,3);
#else
	static PFNGLCOPYBUFFERSUBDATAPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCOPYBUFFERSUBDATAPROC_ALT)glaltGetProcAddressVersion("glCopyBufferSubData",4,3); }
#endif
	 fn(readTarget1,writeTarget1,readOffset1,writeOffset1,size1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_CopyImageSubData
#define GL_ALT_FUNDEF_CopyImageSubData
typedef void (*PFNGLCOPYIMAGESUBDATAPROC_ALT)(GLuint,GLenum,GLint,GLint,GLint,GLint,GLuint,GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei);
static inline void glCopyImageSubData(GLuint srcName1,GLenum srcTarget1,GLint srcLevel1,GLint srcX1,GLint srcY1,GLint srcZ1,GLuint dstName1,GLenum dstTarget1,GLint dstLevel1,GLint dstX1,GLint dstY1,GLint dstZ1,GLsizei srcWidth1,GLsizei srcHeight1,GLsizei srcDepth1)
{
#ifdef __cplusplus
	static PFNGLCOPYIMAGESUBDATAPROC_ALT fn=(PFNGLCOPYIMAGESUBDATAPROC_ALT)glaltGetProcAddressVersion("glCopyImageSubData",4,3);
#else
	static PFNGLCOPYIMAGESUBDATAPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCOPYIMAGESUBDATAPROC_ALT)glaltGetProcAddressVersion("glCopyImageSubData",4,3); }
#endif
	 fn(srcName1,srcTarget1,srcLevel1,srcX1,srcY1,srcZ1,dstName1,dstTarget1,dstLevel1,dstX1,dstY1,dstZ1,srcWidth1,srcHeight1,srcDepth1);
}
#endif
#endif

#ifndef GL_VERSION_1_2
#ifndef	GL_ALT_FUNDEF_CopyTexSubImage3D
#define GL_ALT_FUNDEF_CopyTexSubImage3D
typedef void (*PFNGLCOPYTEXSUBIMAGE3DPROC_ALT)(GLenum,GLint,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
static inline void glCopyTexSubImage3D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
#ifdef __cplusplus
	static PFNGLCOPYTEXSUBIMAGE3DPROC_ALT fn=(PFNGLCOPYTEXSUBIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glCopyTexSubImage3D",4,3);
#else
	static PFNGLCOPYTEXSUBIMAGE3DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCOPYTEXSUBIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glCopyTexSubImage3D",4,3); }
#endif
	 fn(target1,level1,xoffset1,yoffset1,zoffset1,x1,y1,width1,height1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_CreateProgram
#define GL_ALT_FUNDEF_CreateProgram
typedef GLuint (*PFNGLCREATEPROGRAMPROC_ALT)();
static inline GLuint glCreateProgram()
{
#ifdef __cplusplus
	static PFNGLCREATEPROGRAMPROC_ALT fn=(PFNGLCREATEPROGRAMPROC_ALT)glaltGetProcAddressVersion("glCreateProgram",4,3);
#else
	static PFNGLCREATEPROGRAMPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCREATEPROGRAMPROC_ALT)glaltGetProcAddressVersion("glCreateProgram",4,3); }
#endif
	return fn();
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_CreateShader
#define GL_ALT_FUNDEF_CreateShader
typedef GLuint (*PFNGLCREATESHADERPROC_ALT)(GLenum);
static inline GLuint glCreateShader(GLenum type1)
{
#ifdef __cplusplus
	static PFNGLCREATESHADERPROC_ALT fn=(PFNGLCREATESHADERPROC_ALT)glaltGetProcAddressVersion("glCreateShader",4,3);
#else
	static PFNGLCREATESHADERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCREATESHADERPROC_ALT)glaltGetProcAddressVersion("glCreateShader",4,3); }
#endif
	return fn(type1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_CreateShaderProgramv
#define GL_ALT_FUNDEF_CreateShaderProgramv
typedef GLuint (*PFNGLCREATESHADERPROGRAMVPROC_ALT)(GLenum,GLsizei,const GLchar *const*);
static inline GLuint glCreateShaderProgramv(GLenum type1,GLsizei count1,const GLchar *const* strings1)
{
#ifdef __cplusplus
	static PFNGLCREATESHADERPROGRAMVPROC_ALT fn=(PFNGLCREATESHADERPROGRAMVPROC_ALT)glaltGetProcAddressVersion("glCreateShaderProgramv",4,3);
#else
	static PFNGLCREATESHADERPROGRAMVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCREATESHADERPROGRAMVPROC_ALT)glaltGetProcAddressVersion("glCreateShaderProgramv",4,3); }
#endif
	return fn(type1,count1,strings1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_DebugMessageCallback
#define GL_ALT_FUNDEF_DebugMessageCallback
typedef void (*PFNGLDEBUGMESSAGECALLBACKPROC_ALT)(GLALTDEBUGPROC,const void *);
static inline void glDebugMessageCallback(GLALTDEBUGPROC callback1,const void * userParam1)
{
#ifdef __cplusplus
	static PFNGLDEBUGMESSAGECALLBACKPROC_ALT fn=(PFNGLDEBUGMESSAGECALLBACKPROC_ALT)glaltGetProcAddressVersion("glDebugMessageCallback",4,3);
#else
	static PFNGLDEBUGMESSAGECALLBACKPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDEBUGMESSAGECALLBACKPROC_ALT)glaltGetProcAddressVersion("glDebugMessageCallback",4,3); }
#endif
	 fn(callback1,userParam1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_DebugMessageControl
#define GL_ALT_FUNDEF_DebugMessageControl
typedef void (*PFNGLDEBUGMESSAGECONTROLPROC_ALT)(GLenum,GLenum,GLenum,GLsizei,const GLuint *,GLboolean);
static inline void glDebugMessageControl(GLenum source1,GLenum type1,GLenum severity1,GLsizei count1,const GLuint * ids1,GLboolean enabled1)
{
#ifdef __cplusplus
	static PFNGLDEBUGMESSAGECONTROLPROC_ALT fn=(PFNGLDEBUGMESSAGECONTROLPROC_ALT)glaltGetProcAddressVersion("glDebugMessageControl",4,3);
#else
	static PFNGLDEBUGMESSAGECONTROLPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDEBUGMESSAGECONTROLPROC_ALT)glaltGetProcAddressVersion("glDebugMessageControl",4,3); }
#endif
	 fn(source1,type1,severity1,count1,ids1,enabled1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_DebugMessageInsert
#define GL_ALT_FUNDEF_DebugMessageInsert
typedef void (*PFNGLDEBUGMESSAGEINSERTPROC_ALT)(GLenum,GLenum,GLuint,GLenum,GLsizei,const GLchar *);
static inline void glDebugMessageInsert(GLenum source1,GLenum type1,GLuint id1,GLenum severity1,GLsizei length1,const GLchar * buf1)
{
#ifdef __cplusplus
	static PFNGLDEBUGMESSAGEINSERTPROC_ALT fn=(PFNGLDEBUGMESSAGEINSERTPROC_ALT)glaltGetProcAddressVersion("glDebugMessageInsert",4,3);
#else
	static PFNGLDEBUGMESSAGEINSERTPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDEBUGMESSAGEINSERTPROC_ALT)glaltGetProcAddressVersion("glDebugMessageInsert",4,3); }
#endif
	 fn(source1,type1,id1,severity1,length1,buf1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_DeleteBuffers
#define GL_ALT_FUNDEF_DeleteBuffers
typedef void (*PFNGLDELETEBUFFERSPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteBuffers(GLsizei n1,const GLuint * buffers1)
{
#ifdef __cplusplus
	static PFNGLDELETEBUFFERSPROC_ALT fn=(PFNGLDELETEBUFFERSPROC_ALT)glaltGetProcAddressVersion("glDeleteBuffers",4,3);
#else
	static PFNGLDELETEBUFFERSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDELETEBUFFERSPROC_ALT)glaltGetProcAddressVersion("glDeleteBuffers",4,3); }
#endif
	 fn(n1,buffers1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_DeleteFramebuffers
#define GL_ALT_FUNDEF_DeleteFramebuffers
typedef void (*PFNGLDELETEFRAMEBUFFERSPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteFramebuffers(GLsizei n1,const GLuint * framebuffers1)
{
#ifdef __cplusplus
	static PFNGLDELETEFRAMEBUFFERSPROC_ALT fn=(PFNGLDELETEFRAMEBUFFERSPROC_ALT)glaltGetProcAddressVersion("glDeleteFramebuffers",4,3);
#else
	static PFNGLDELETEFRAMEBUFFERSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDELETEFRAMEBUFFERSPROC_ALT)glaltGetProcAddressVersion("glDeleteFramebuffers",4,3); }
#endif
	 fn(n1,framebuffers1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_DeleteProgram
#define GL_ALT_FUNDEF_DeleteProgram
typedef void (*PFNGLDELETEPROGRAMPROC_ALT)(GLuint);
static inline void glDeleteProgram(GLuint program1)
{
#ifdef __cplusplus
	static PFNGLDELETEPROGRAMPROC_ALT fn=(PFNGLDELETEPROGRAMPROC_ALT)glaltGetProcAddressVersion("glDeleteProgram",4,3);
#else
	static PFNGLDELETEPROGRAMPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDELETEPROGRAMPROC_ALT)glaltGetProcAddressVersion("glDeleteProgram",4,3); }
#endif
	 fn(program1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_DeleteProgramPipelines
#define GL_ALT_FUNDEF_DeleteProgramPipelines
typedef void (*PFNGLDELETEPROGRAMPIPELINESPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteProgramPipelines(GLsizei n1,const GLuint * pipelines1)
{
#ifdef __cplusplus
	static PFNGLDELETEPROGRAMPIPELINESPROC_ALT fn=(PFNGLDELETEPROGRAMPIPELINESPROC_ALT)glaltGetProcAddressVersion("glDeleteProgramPipelines",4,3);
#else
	static PFNGLDELETEPROGRAMPIPELINESPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDELETEPROGRAMPIPELINESPROC_ALT)glaltGetProcAddressVersion("glDeleteProgramPipelines",4,3); }
#endif
	 fn(n1,pipelines1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_DeleteQueries
#define GL_ALT_FUNDEF_DeleteQueries
typedef void (*PFNGLDELETEQUERIESPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteQueries(GLsizei n1,const GLuint * ids1)
{
#ifdef __cplusplus
	static PFNGLDELETEQUERIESPROC_ALT fn=(PFNGLDELETEQUERIESPROC_ALT)glaltGetProcAddressVersion("glDeleteQueries",4,3);
#else
	static PFNGLDELETEQUERIESPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDELETEQUERIESPROC_ALT)glaltGetProcAddressVersion("glDeleteQueries",4,3); }
#endif
	 fn(n1,ids1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_DeleteRenderbuffers
#define GL_ALT_FUNDEF_DeleteRenderbuffers
typedef void (*PFNGLDELETERENDERBUFFERSPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteRenderbuffers(GLsizei n1,const GLuint * renderbuffers1)
{
#ifdef __cplusplus
	static PFNGLDELETERENDERBUFFERSPROC_ALT fn=(PFNGLDELETERENDERBUFFERSPROC_ALT)glaltGetProcAddressVersion("glDeleteRenderbuffers",4,3);
#else
	static PFNGLDELETERENDERBUFFERSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDELETERENDERBUFFERSPROC_ALT)glaltGetProcAddressVersion("glDeleteRenderbuffers",4,3); }
#endif
	 fn(n1,renderbuffers1);
}
#endif
#endif

#ifndef GL_VERSION_3_3
#ifndef	GL_ALT_FUNDEF_DeleteSamplers
#define GL_ALT_FUNDEF_DeleteSamplers
typedef void (*PFNGLDELETESAMPLERSPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteSamplers(GLsizei count1,const GLuint * samplers1)
{
#ifdef __cplusplus
	static PFNGLDELETESAMPLERSPROC_ALT fn=(PFNGLDELETESAMPLERSPROC_ALT)glaltGetProcAddressVersion("glDeleteSamplers",4,3);
#else
	static PFNGLDELETESAMPLERSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDELETESAMPLERSPROC_ALT)glaltGetProcAddressVersion("glDeleteSamplers",4,3); }
#endif
	 fn(count1,samplers1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_DeleteShader
#define GL_ALT_FUNDEF_DeleteShader
typedef void (*PFNGLDELETESHADERPROC_ALT)(GLuint);
static inline void glDeleteShader(GLuint shader1)
{
#ifdef __cplusplus
	static PFNGLDELETESHADERPROC_ALT fn=(PFNGLDELETESHADERPROC_ALT)glaltGetProcAddressVersion("glDeleteShader",4,3);
#else
	static PFNGLDELETESHADERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDELETESHADERPROC_ALT)glaltGetProcAddressVersion("glDeleteShader",4,3); }
#endif
	 fn(shader1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_DeleteSync
#define GL_ALT_FUNDEF_DeleteSync
typedef void (*PFNGLDELETESYNCPROC_ALT)(GLsync);
static inline void glDeleteSync(GLsync sync1)
{
#ifdef __cplusplus
	static PFNGLDELETESYNCPROC_ALT fn=(PFNGLDELETESYNCPROC_ALT)glaltGetProcAddressVersion("glDeleteSync",4,3);
#else
	static PFNGLDELETESYNCPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDELETESYNCPROC_ALT)glaltGetProcAddressVersion("glDeleteSync",4,3); }
#endif
	 fn(sync1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_DeleteTransformFeedbacks
#define GL_ALT_FUNDEF_DeleteTransformFeedbacks
typedef void (*PFNGLDELETETRANSFORMFEEDBACKSPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteTransformFeedbacks(GLsizei n1,const GLuint * ids1)
{
#ifdef __cplusplus
	static PFNGLDELETETRANSFORMFEEDBACKSPROC_ALT fn=(PFNGLDELETETRANSFORMFEEDBACKSPROC_ALT)glaltGetProcAddressVersion("glDeleteTransformFeedbacks",4,3);
#else
	static PFNGLDELETETRANSFORMFEEDBACKSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDELETETRANSFORMFEEDBACKSPROC_ALT)glaltGetProcAddressVersion("glDeleteTransformFeedbacks",4,3); }
#endif
	 fn(n1,ids1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_DeleteVertexArrays
#define GL_ALT_FUNDEF_DeleteVertexArrays
typedef void (*PFNGLDELETEVERTEXARRAYSPROC_ALT)(GLsizei,const GLuint *);
static inline void glDeleteVertexArrays(GLsizei n1,const GLuint * arrays1)
{
#ifdef __cplusplus
	static PFNGLDELETEVERTEXARRAYSPROC_ALT fn=(PFNGLDELETEVERTEXARRAYSPROC_ALT)glaltGetProcAddressVersion("glDeleteVertexArrays",4,3);
#else
	static PFNGLDELETEVERTEXARRAYSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDELETEVERTEXARRAYSPROC_ALT)glaltGetProcAddressVersion("glDeleteVertexArrays",4,3); }
#endif
	 fn(n1,arrays1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_DepthRangeArrayv
#define GL_ALT_FUNDEF_DepthRangeArrayv
typedef void (*PFNGLDEPTHRANGEARRAYVPROC_ALT)(GLuint,GLsizei,const GLdouble *);
static inline void glDepthRangeArrayv(GLuint first1,GLsizei count1,const GLdouble * v1)
{
#ifdef __cplusplus
	static PFNGLDEPTHRANGEARRAYVPROC_ALT fn=(PFNGLDEPTHRANGEARRAYVPROC_ALT)glaltGetProcAddressVersion("glDepthRangeArrayv",4,3);
#else
	static PFNGLDEPTHRANGEARRAYVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDEPTHRANGEARRAYVPROC_ALT)glaltGetProcAddressVersion("glDepthRangeArrayv",4,3); }
#endif
	 fn(first1,count1,v1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_DepthRangeIndexed
#define GL_ALT_FUNDEF_DepthRangeIndexed
typedef void (*PFNGLDEPTHRANGEINDEXEDPROC_ALT)(GLuint,GLdouble,GLdouble);
static inline void glDepthRangeIndexed(GLuint index1,GLdouble n1,GLdouble f1)
{
#ifdef __cplusplus
	static PFNGLDEPTHRANGEINDEXEDPROC_ALT fn=(PFNGLDEPTHRANGEINDEXEDPROC_ALT)glaltGetProcAddressVersion("glDepthRangeIndexed",4,3);
#else
	static PFNGLDEPTHRANGEINDEXEDPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDEPTHRANGEINDEXEDPROC_ALT)glaltGetProcAddressVersion("glDepthRangeIndexed",4,3); }
#endif
	 fn(index1,n1,f1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_DepthRangef
#define GL_ALT_FUNDEF_DepthRangef
typedef void (*PFNGLDEPTHRANGEFPROC_ALT)(GLfloat,GLfloat);
static inline void glDepthRangef(GLfloat n1,GLfloat f1)
{
#ifdef __cplusplus
	static PFNGLDEPTHRANGEFPROC_ALT fn=(PFNGLDEPTHRANGEFPROC_ALT)glaltGetProcAddressVersion("glDepthRangef",4,3);
#else
	static PFNGLDEPTHRANGEFPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDEPTHRANGEFPROC_ALT)glaltGetProcAddressVersion("glDepthRangef",4,3); }
#endif
	 fn(n1,f1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_DetachShader
#define GL_ALT_FUNDEF_DetachShader
typedef void (*PFNGLDETACHSHADERPROC_ALT)(GLuint,GLuint);
static inline void glDetachShader(GLuint program1,GLuint shader1)
{
#ifdef __cplusplus
	static PFNGLDETACHSHADERPROC_ALT fn=(PFNGLDETACHSHADERPROC_ALT)glaltGetProcAddressVersion("glDetachShader",4,3);
#else
	static PFNGLDETACHSHADERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDETACHSHADERPROC_ALT)glaltGetProcAddressVersion("glDetachShader",4,3); }
#endif
	 fn(program1,shader1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_DisableVertexAttribArray
#define GL_ALT_FUNDEF_DisableVertexAttribArray
typedef void (*PFNGLDISABLEVERTEXATTRIBARRAYPROC_ALT)(GLuint);
static inline void glDisableVertexAttribArray(GLuint index1)
{
#ifdef __cplusplus
	static PFNGLDISABLEVERTEXATTRIBARRAYPROC_ALT fn=(PFNGLDISABLEVERTEXATTRIBARRAYPROC_ALT)glaltGetProcAddressVersion("glDisableVertexAttribArray",4,3);
#else
	static PFNGLDISABLEVERTEXATTRIBARRAYPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDISABLEVERTEXATTRIBARRAYPROC_ALT)glaltGetProcAddressVersion("glDisableVertexAttribArray",4,3); }
#endif
	 fn(index1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_Disablei
#define GL_ALT_FUNDEF_Disablei
typedef void (*PFNGLDISABLEIPROC_ALT)(GLenum,GLuint);
static inline void glDisablei(GLenum target1,GLuint index1)
{
#ifdef __cplusplus
	static PFNGLDISABLEIPROC_ALT fn=(PFNGLDISABLEIPROC_ALT)glaltGetProcAddressVersion("glDisablei",4,3);
#else
	static PFNGLDISABLEIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDISABLEIPROC_ALT)glaltGetProcAddressVersion("glDisablei",4,3); }
#endif
	 fn(target1,index1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_DispatchCompute
#define GL_ALT_FUNDEF_DispatchCompute
typedef void (*PFNGLDISPATCHCOMPUTEPROC_ALT)(GLuint,GLuint,GLuint);
static inline void glDispatchCompute(GLuint num_groups_x1,GLuint num_groups_y1,GLuint num_groups_z1)
{
#ifdef __cplusplus
	static PFNGLDISPATCHCOMPUTEPROC_ALT fn=(PFNGLDISPATCHCOMPUTEPROC_ALT)glaltGetProcAddressVersion("glDispatchCompute",4,3);
#else
	static PFNGLDISPATCHCOMPUTEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDISPATCHCOMPUTEPROC_ALT)glaltGetProcAddressVersion("glDispatchCompute",4,3); }
#endif
	 fn(num_groups_x1,num_groups_y1,num_groups_z1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_DispatchComputeIndirect
#define GL_ALT_FUNDEF_DispatchComputeIndirect
typedef void (*PFNGLDISPATCHCOMPUTEINDIRECTPROC_ALT)(GLintptr);
static inline void glDispatchComputeIndirect(GLintptr indirect1)
{
#ifdef __cplusplus
	static PFNGLDISPATCHCOMPUTEINDIRECTPROC_ALT fn=(PFNGLDISPATCHCOMPUTEINDIRECTPROC_ALT)glaltGetProcAddressVersion("glDispatchComputeIndirect",4,3);
#else
	static PFNGLDISPATCHCOMPUTEINDIRECTPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDISPATCHCOMPUTEINDIRECTPROC_ALT)glaltGetProcAddressVersion("glDispatchComputeIndirect",4,3); }
#endif
	 fn(indirect1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_DrawArraysIndirect
#define GL_ALT_FUNDEF_DrawArraysIndirect
typedef void (*PFNGLDRAWARRAYSINDIRECTPROC_ALT)(GLenum,const void *);
static inline void glDrawArraysIndirect(GLenum mode1,const void * indirect1)
{
#ifdef __cplusplus
	static PFNGLDRAWARRAYSINDIRECTPROC_ALT fn=(PFNGLDRAWARRAYSINDIRECTPROC_ALT)glaltGetProcAddressVersion("glDrawArraysIndirect",4,3);
#else
	static PFNGLDRAWARRAYSINDIRECTPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDRAWARRAYSINDIRECTPROC_ALT)glaltGetProcAddressVersion("glDrawArraysIndirect",4,3); }
#endif
	 fn(mode1,indirect1);
}
#endif
#endif

#ifndef GL_VERSION_3_1
#ifndef	GL_ALT_FUNDEF_DrawArraysInstanced
#define GL_ALT_FUNDEF_DrawArraysInstanced
typedef void (*PFNGLDRAWARRAYSINSTANCEDPROC_ALT)(GLenum,GLint,GLsizei,GLsizei);
static inline void glDrawArraysInstanced(GLenum mode1,GLint first1,GLsizei count1,GLsizei instancecount1)
{
#ifdef __cplusplus
	static PFNGLDRAWARRAYSINSTANCEDPROC_ALT fn=(PFNGLDRAWARRAYSINSTANCEDPROC_ALT)glaltGetProcAddressVersion("glDrawArraysInstanced",4,3);
#else
	static PFNGLDRAWARRAYSINSTANCEDPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDRAWARRAYSINSTANCEDPROC_ALT)glaltGetProcAddressVersion("glDrawArraysInstanced",4,3); }
#endif
	 fn(mode1,first1,count1,instancecount1);
}
#endif
#endif

#ifndef GL_VERSION_4_2
#ifndef	GL_ALT_FUNDEF_DrawArraysInstancedBaseInstance
#define GL_ALT_FUNDEF_DrawArraysInstancedBaseInstance
typedef void (*PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC_ALT)(GLenum,GLint,GLsizei,GLsizei,GLuint);
static inline void glDrawArraysInstancedBaseInstance(GLenum mode1,GLint first1,GLsizei count1,GLsizei instancecount1,GLuint baseinstance1)
{
#ifdef __cplusplus
	static PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC_ALT fn=(PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC_ALT)glaltGetProcAddressVersion("glDrawArraysInstancedBaseInstance",4,3);
#else
	static PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC_ALT)glaltGetProcAddressVersion("glDrawArraysInstancedBaseInstance",4,3); }
#endif
	 fn(mode1,first1,count1,instancecount1,baseinstance1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_DrawBuffers
#define GL_ALT_FUNDEF_DrawBuffers
typedef void (*PFNGLDRAWBUFFERSPROC_ALT)(GLsizei,const GLenum *);
static inline void glDrawBuffers(GLsizei n1,const GLenum * bufs1)
{
#ifdef __cplusplus
	static PFNGLDRAWBUFFERSPROC_ALT fn=(PFNGLDRAWBUFFERSPROC_ALT)glaltGetProcAddressVersion("glDrawBuffers",4,3);
#else
	static PFNGLDRAWBUFFERSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDRAWBUFFERSPROC_ALT)glaltGetProcAddressVersion("glDrawBuffers",4,3); }
#endif
	 fn(n1,bufs1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_DrawElementsBaseVertex
#define GL_ALT_FUNDEF_DrawElementsBaseVertex
typedef void (*PFNGLDRAWELEMENTSBASEVERTEXPROC_ALT)(GLenum,GLsizei,GLenum,const void *,GLint);
static inline void glDrawElementsBaseVertex(GLenum mode1,GLsizei count1,GLenum type1,const void * indices1,GLint basevertex1)
{
#ifdef __cplusplus
	static PFNGLDRAWELEMENTSBASEVERTEXPROC_ALT fn=(PFNGLDRAWELEMENTSBASEVERTEXPROC_ALT)glaltGetProcAddressVersion("glDrawElementsBaseVertex",4,3);
#else
	static PFNGLDRAWELEMENTSBASEVERTEXPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDRAWELEMENTSBASEVERTEXPROC_ALT)glaltGetProcAddressVersion("glDrawElementsBaseVertex",4,3); }
#endif
	 fn(mode1,count1,type1,indices1,basevertex1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_DrawElementsIndirect
#define GL_ALT_FUNDEF_DrawElementsIndirect
typedef void (*PFNGLDRAWELEMENTSINDIRECTPROC_ALT)(GLenum,GLenum,const void *);
static inline void glDrawElementsIndirect(GLenum mode1,GLenum type1,const void * indirect1)
{
#ifdef __cplusplus
	static PFNGLDRAWELEMENTSINDIRECTPROC_ALT fn=(PFNGLDRAWELEMENTSINDIRECTPROC_ALT)glaltGetProcAddressVersion("glDrawElementsIndirect",4,3);
#else
	static PFNGLDRAWELEMENTSINDIRECTPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDRAWELEMENTSINDIRECTPROC_ALT)glaltGetProcAddressVersion("glDrawElementsIndirect",4,3); }
#endif
	 fn(mode1,type1,indirect1);
}
#endif
#endif

#ifndef GL_VERSION_3_1
#ifndef	GL_ALT_FUNDEF_DrawElementsInstanced
#define GL_ALT_FUNDEF_DrawElementsInstanced
typedef void (*PFNGLDRAWELEMENTSINSTANCEDPROC_ALT)(GLenum,GLsizei,GLenum,const void *,GLsizei);
static inline void glDrawElementsInstanced(GLenum mode1,GLsizei count1,GLenum type1,const void * indices1,GLsizei instancecount1)
{
#ifdef __cplusplus
	static PFNGLDRAWELEMENTSINSTANCEDPROC_ALT fn=(PFNGLDRAWELEMENTSINSTANCEDPROC_ALT)glaltGetProcAddressVersion("glDrawElementsInstanced",4,3);
#else
	static PFNGLDRAWELEMENTSINSTANCEDPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDRAWELEMENTSINSTANCEDPROC_ALT)glaltGetProcAddressVersion("glDrawElementsInstanced",4,3); }
#endif
	 fn(mode1,count1,type1,indices1,instancecount1);
}
#endif
#endif

#ifndef GL_VERSION_4_2
#ifndef	GL_ALT_FUNDEF_DrawElementsInstancedBaseInstance
#define GL_ALT_FUNDEF_DrawElementsInstancedBaseInstance
typedef void (*PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC_ALT)(GLenum,GLsizei,GLenum,const void *,GLsizei,GLuint);
static inline void glDrawElementsInstancedBaseInstance(GLenum mode1,GLsizei count1,GLenum type1,const void * indices1,GLsizei instancecount1,GLuint baseinstance1)
{
#ifdef __cplusplus
	static PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC_ALT fn=(PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC_ALT)glaltGetProcAddressVersion("glDrawElementsInstancedBaseInstance",4,3);
#else
	static PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC_ALT)glaltGetProcAddressVersion("glDrawElementsInstancedBaseInstance",4,3); }
#endif
	 fn(mode1,count1,type1,indices1,instancecount1,baseinstance1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_DrawElementsInstancedBaseVertex
#define GL_ALT_FUNDEF_DrawElementsInstancedBaseVertex
typedef void (*PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC_ALT)(GLenum,GLsizei,GLenum,const void *,GLsizei,GLint);
static inline void glDrawElementsInstancedBaseVertex(GLenum mode1,GLsizei count1,GLenum type1,const void * indices1,GLsizei instancecount1,GLint basevertex1)
{
#ifdef __cplusplus
	static PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC_ALT fn=(PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC_ALT)glaltGetProcAddressVersion("glDrawElementsInstancedBaseVertex",4,3);
#else
	static PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC_ALT)glaltGetProcAddressVersion("glDrawElementsInstancedBaseVertex",4,3); }
#endif
	 fn(mode1,count1,type1,indices1,instancecount1,basevertex1);
}
#endif
#endif

#ifndef GL_VERSION_4_2
#ifndef	GL_ALT_FUNDEF_DrawElementsInstancedBaseVertexBaseInstance
#define GL_ALT_FUNDEF_DrawElementsInstancedBaseVertexBaseInstance
typedef void (*PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC_ALT)(GLenum,GLsizei,GLenum,const void *,GLsizei,GLint,GLuint);
static inline void glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode1,GLsizei count1,GLenum type1,const void * indices1,GLsizei instancecount1,GLint basevertex1,GLuint baseinstance1)
{
#ifdef __cplusplus
	static PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC_ALT fn=(PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC_ALT)glaltGetProcAddressVersion("glDrawElementsInstancedBaseVertexBaseInstance",4,3);
#else
	static PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC_ALT)glaltGetProcAddressVersion("glDrawElementsInstancedBaseVertexBaseInstance",4,3); }
#endif
	 fn(mode1,count1,type1,indices1,instancecount1,basevertex1,baseinstance1);
}
#endif
#endif

#ifndef GL_VERSION_1_2
#ifndef	GL_ALT_FUNDEF_DrawRangeElements
#define GL_ALT_FUNDEF_DrawRangeElements
typedef void (*PFNGLDRAWRANGEELEMENTSPROC_ALT)(GLenum,GLuint,GLuint,GLsizei,GLenum,const void *);
static inline void glDrawRangeElements(GLenum mode1,GLuint start1,GLuint end1,GLsizei count1,GLenum type1,const void * indices1)
{
#ifdef __cplusplus
	static PFNGLDRAWRANGEELEMENTSPROC_ALT fn=(PFNGLDRAWRANGEELEMENTSPROC_ALT)glaltGetProcAddressVersion("glDrawRangeElements",4,3);
#else
	static PFNGLDRAWRANGEELEMENTSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDRAWRANGEELEMENTSPROC_ALT)glaltGetProcAddressVersion("glDrawRangeElements",4,3); }
#endif
	 fn(mode1,start1,end1,count1,type1,indices1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_DrawRangeElementsBaseVertex
#define GL_ALT_FUNDEF_DrawRangeElementsBaseVertex
typedef void (*PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC_ALT)(GLenum,GLuint,GLuint,GLsizei,GLenum,const void *,GLint);
static inline void glDrawRangeElementsBaseVertex(GLenum mode1,GLuint start1,GLuint end1,GLsizei count1,GLenum type1,const void * indices1,GLint basevertex1)
{
#ifdef __cplusplus
	static PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC_ALT fn=(PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC_ALT)glaltGetProcAddressVersion("glDrawRangeElementsBaseVertex",4,3);
#else
	static PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC_ALT)glaltGetProcAddressVersion("glDrawRangeElementsBaseVertex",4,3); }
#endif
	 fn(mode1,start1,end1,count1,type1,indices1,basevertex1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_DrawTransformFeedback
#define GL_ALT_FUNDEF_DrawTransformFeedback
typedef void (*PFNGLDRAWTRANSFORMFEEDBACKPROC_ALT)(GLenum,GLuint);
static inline void glDrawTransformFeedback(GLenum mode1,GLuint id1)
{
#ifdef __cplusplus
	static PFNGLDRAWTRANSFORMFEEDBACKPROC_ALT fn=(PFNGLDRAWTRANSFORMFEEDBACKPROC_ALT)glaltGetProcAddressVersion("glDrawTransformFeedback",4,3);
#else
	static PFNGLDRAWTRANSFORMFEEDBACKPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDRAWTRANSFORMFEEDBACKPROC_ALT)glaltGetProcAddressVersion("glDrawTransformFeedback",4,3); }
#endif
	 fn(mode1,id1);
}
#endif
#endif

#ifndef GL_VERSION_4_2
#ifndef	GL_ALT_FUNDEF_DrawTransformFeedbackInstanced
#define GL_ALT_FUNDEF_DrawTransformFeedbackInstanced
typedef void (*PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC_ALT)(GLenum,GLuint,GLsizei);
static inline void glDrawTransformFeedbackInstanced(GLenum mode1,GLuint id1,GLsizei instancecount1)
{
#ifdef __cplusplus
	static PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC_ALT fn=(PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC_ALT)glaltGetProcAddressVersion("glDrawTransformFeedbackInstanced",4,3);
#else
	static PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC_ALT)glaltGetProcAddressVersion("glDrawTransformFeedbackInstanced",4,3); }
#endif
	 fn(mode1,id1,instancecount1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_DrawTransformFeedbackStream
#define GL_ALT_FUNDEF_DrawTransformFeedbackStream
typedef void (*PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC_ALT)(GLenum,GLuint,GLuint);
static inline void glDrawTransformFeedbackStream(GLenum mode1,GLuint id1,GLuint stream1)
{
#ifdef __cplusplus
	static PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC_ALT fn=(PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC_ALT)glaltGetProcAddressVersion("glDrawTransformFeedbackStream",4,3);
#else
	static PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC_ALT)glaltGetProcAddressVersion("glDrawTransformFeedbackStream",4,3); }
#endif
	 fn(mode1,id1,stream1);
}
#endif
#endif

#ifndef GL_VERSION_4_2
#ifndef	GL_ALT_FUNDEF_DrawTransformFeedbackStreamInstanced
#define GL_ALT_FUNDEF_DrawTransformFeedbackStreamInstanced
typedef void (*PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC_ALT)(GLenum,GLuint,GLuint,GLsizei);
static inline void glDrawTransformFeedbackStreamInstanced(GLenum mode1,GLuint id1,GLuint stream1,GLsizei instancecount1)
{
#ifdef __cplusplus
	static PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC_ALT fn=(PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC_ALT)glaltGetProcAddressVersion("glDrawTransformFeedbackStreamInstanced",4,3);
#else
	static PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC_ALT)glaltGetProcAddressVersion("glDrawTransformFeedbackStreamInstanced",4,3); }
#endif
	 fn(mode1,id1,stream1,instancecount1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_EnableVertexAttribArray
#define GL_ALT_FUNDEF_EnableVertexAttribArray
typedef void (*PFNGLENABLEVERTEXATTRIBARRAYPROC_ALT)(GLuint);
static inline void glEnableVertexAttribArray(GLuint index1)
{
#ifdef __cplusplus
	static PFNGLENABLEVERTEXATTRIBARRAYPROC_ALT fn=(PFNGLENABLEVERTEXATTRIBARRAYPROC_ALT)glaltGetProcAddressVersion("glEnableVertexAttribArray",4,3);
#else
	static PFNGLENABLEVERTEXATTRIBARRAYPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLENABLEVERTEXATTRIBARRAYPROC_ALT)glaltGetProcAddressVersion("glEnableVertexAttribArray",4,3); }
#endif
	 fn(index1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_Enablei
#define GL_ALT_FUNDEF_Enablei
typedef void (*PFNGLENABLEIPROC_ALT)(GLenum,GLuint);
static inline void glEnablei(GLenum target1,GLuint index1)
{
#ifdef __cplusplus
	static PFNGLENABLEIPROC_ALT fn=(PFNGLENABLEIPROC_ALT)glaltGetProcAddressVersion("glEnablei",4,3);
#else
	static PFNGLENABLEIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLENABLEIPROC_ALT)glaltGetProcAddressVersion("glEnablei",4,3); }
#endif
	 fn(target1,index1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_EndConditionalRender
#define GL_ALT_FUNDEF_EndConditionalRender
typedef void (*PFNGLENDCONDITIONALRENDERPROC_ALT)();
static inline void glEndConditionalRender()
{
#ifdef __cplusplus
	static PFNGLENDCONDITIONALRENDERPROC_ALT fn=(PFNGLENDCONDITIONALRENDERPROC_ALT)glaltGetProcAddressVersion("glEndConditionalRender",4,3);
#else
	static PFNGLENDCONDITIONALRENDERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLENDCONDITIONALRENDERPROC_ALT)glaltGetProcAddressVersion("glEndConditionalRender",4,3); }
#endif
	 fn();
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_EndQuery
#define GL_ALT_FUNDEF_EndQuery
typedef void (*PFNGLENDQUERYPROC_ALT)(GLenum);
static inline void glEndQuery(GLenum target1)
{
#ifdef __cplusplus
	static PFNGLENDQUERYPROC_ALT fn=(PFNGLENDQUERYPROC_ALT)glaltGetProcAddressVersion("glEndQuery",4,3);
#else
	static PFNGLENDQUERYPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLENDQUERYPROC_ALT)glaltGetProcAddressVersion("glEndQuery",4,3); }
#endif
	 fn(target1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_EndQueryIndexed
#define GL_ALT_FUNDEF_EndQueryIndexed
typedef void (*PFNGLENDQUERYINDEXEDPROC_ALT)(GLenum,GLuint);
static inline void glEndQueryIndexed(GLenum target1,GLuint index1)
{
#ifdef __cplusplus
	static PFNGLENDQUERYINDEXEDPROC_ALT fn=(PFNGLENDQUERYINDEXEDPROC_ALT)glaltGetProcAddressVersion("glEndQueryIndexed",4,3);
#else
	static PFNGLENDQUERYINDEXEDPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLENDQUERYINDEXEDPROC_ALT)glaltGetProcAddressVersion("glEndQueryIndexed",4,3); }
#endif
	 fn(target1,index1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_EndTransformFeedback
#define GL_ALT_FUNDEF_EndTransformFeedback
typedef void (*PFNGLENDTRANSFORMFEEDBACKPROC_ALT)();
static inline void glEndTransformFeedback()
{
#ifdef __cplusplus
	static PFNGLENDTRANSFORMFEEDBACKPROC_ALT fn=(PFNGLENDTRANSFORMFEEDBACKPROC_ALT)glaltGetProcAddressVersion("glEndTransformFeedback",4,3);
#else
	static PFNGLENDTRANSFORMFEEDBACKPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLENDTRANSFORMFEEDBACKPROC_ALT)glaltGetProcAddressVersion("glEndTransformFeedback",4,3); }
#endif
	 fn();
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_FenceSync
#define GL_ALT_FUNDEF_FenceSync
typedef GLsync (*PFNGLFENCESYNCPROC_ALT)(GLenum,GLbitfield);
static inline GLsync glFenceSync(GLenum condition1,GLbitfield flags1)
{
#ifdef __cplusplus
	static PFNGLFENCESYNCPROC_ALT fn=(PFNGLFENCESYNCPROC_ALT)glaltGetProcAddressVersion("glFenceSync",4,3);
#else
	static PFNGLFENCESYNCPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLFENCESYNCPROC_ALT)glaltGetProcAddressVersion("glFenceSync",4,3); }
#endif
	return fn(condition1,flags1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_FlushMappedBufferRange
#define GL_ALT_FUNDEF_FlushMappedBufferRange
typedef void (*PFNGLFLUSHMAPPEDBUFFERRANGEPROC_ALT)(GLenum,GLintptr,GLsizeiptr);
static inline void glFlushMappedBufferRange(GLenum target1,GLintptr offset1,GLsizeiptr length1)
{
#ifdef __cplusplus
	static PFNGLFLUSHMAPPEDBUFFERRANGEPROC_ALT fn=(PFNGLFLUSHMAPPEDBUFFERRANGEPROC_ALT)glaltGetProcAddressVersion("glFlushMappedBufferRange",4,3);
#else
	static PFNGLFLUSHMAPPEDBUFFERRANGEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLFLUSHMAPPEDBUFFERRANGEPROC_ALT)glaltGetProcAddressVersion("glFlushMappedBufferRange",4,3); }
#endif
	 fn(target1,offset1,length1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_FramebufferParameteri
#define GL_ALT_FUNDEF_FramebufferParameteri
typedef void (*PFNGLFRAMEBUFFERPARAMETERIPROC_ALT)(GLenum,GLenum,GLint);
static inline void glFramebufferParameteri(GLenum target1,GLenum pname1,GLint param1)
{
#ifdef __cplusplus
	static PFNGLFRAMEBUFFERPARAMETERIPROC_ALT fn=(PFNGLFRAMEBUFFERPARAMETERIPROC_ALT)glaltGetProcAddressVersion("glFramebufferParameteri",4,3);
#else
	static PFNGLFRAMEBUFFERPARAMETERIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLFRAMEBUFFERPARAMETERIPROC_ALT)glaltGetProcAddressVersion("glFramebufferParameteri",4,3); }
#endif
	 fn(target1,pname1,param1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_FramebufferRenderbuffer
#define GL_ALT_FUNDEF_FramebufferRenderbuffer
typedef void (*PFNGLFRAMEBUFFERRENDERBUFFERPROC_ALT)(GLenum,GLenum,GLenum,GLuint);
static inline void glFramebufferRenderbuffer(GLenum target1,GLenum attachment1,GLenum renderbuffertarget1,GLuint renderbuffer1)
{
#ifdef __cplusplus
	static PFNGLFRAMEBUFFERRENDERBUFFERPROC_ALT fn=(PFNGLFRAMEBUFFERRENDERBUFFERPROC_ALT)glaltGetProcAddressVersion("glFramebufferRenderbuffer",4,3);
#else
	static PFNGLFRAMEBUFFERRENDERBUFFERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLFRAMEBUFFERRENDERBUFFERPROC_ALT)glaltGetProcAddressVersion("glFramebufferRenderbuffer",4,3); }
#endif
	 fn(target1,attachment1,renderbuffertarget1,renderbuffer1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_FramebufferTexture
#define GL_ALT_FUNDEF_FramebufferTexture
typedef void (*PFNGLFRAMEBUFFERTEXTUREPROC_ALT)(GLenum,GLenum,GLuint,GLint);
static inline void glFramebufferTexture(GLenum target1,GLenum attachment1,GLuint texture1,GLint level1)
{
#ifdef __cplusplus
	static PFNGLFRAMEBUFFERTEXTUREPROC_ALT fn=(PFNGLFRAMEBUFFERTEXTUREPROC_ALT)glaltGetProcAddressVersion("glFramebufferTexture",4,3);
#else
	static PFNGLFRAMEBUFFERTEXTUREPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLFRAMEBUFFERTEXTUREPROC_ALT)glaltGetProcAddressVersion("glFramebufferTexture",4,3); }
#endif
	 fn(target1,attachment1,texture1,level1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_FramebufferTexture1D
#define GL_ALT_FUNDEF_FramebufferTexture1D
typedef void (*PFNGLFRAMEBUFFERTEXTURE1DPROC_ALT)(GLenum,GLenum,GLenum,GLuint,GLint);
static inline void glFramebufferTexture1D(GLenum target1,GLenum attachment1,GLenum textarget1,GLuint texture1,GLint level1)
{
#ifdef __cplusplus
	static PFNGLFRAMEBUFFERTEXTURE1DPROC_ALT fn=(PFNGLFRAMEBUFFERTEXTURE1DPROC_ALT)glaltGetProcAddressVersion("glFramebufferTexture1D",4,3);
#else
	static PFNGLFRAMEBUFFERTEXTURE1DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLFRAMEBUFFERTEXTURE1DPROC_ALT)glaltGetProcAddressVersion("glFramebufferTexture1D",4,3); }
#endif
	 fn(target1,attachment1,textarget1,texture1,level1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_FramebufferTexture2D
#define GL_ALT_FUNDEF_FramebufferTexture2D
typedef void (*PFNGLFRAMEBUFFERTEXTURE2DPROC_ALT)(GLenum,GLenum,GLenum,GLuint,GLint);
static inline void glFramebufferTexture2D(GLenum target1,GLenum attachment1,GLenum textarget1,GLuint texture1,GLint level1)
{
#ifdef __cplusplus
	static PFNGLFRAMEBUFFERTEXTURE2DPROC_ALT fn=(PFNGLFRAMEBUFFERTEXTURE2DPROC_ALT)glaltGetProcAddressVersion("glFramebufferTexture2D",4,3);
#else
	static PFNGLFRAMEBUFFERTEXTURE2DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLFRAMEBUFFERTEXTURE2DPROC_ALT)glaltGetProcAddressVersion("glFramebufferTexture2D",4,3); }
#endif
	 fn(target1,attachment1,textarget1,texture1,level1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_FramebufferTexture3D
#define GL_ALT_FUNDEF_FramebufferTexture3D
typedef void (*PFNGLFRAMEBUFFERTEXTURE3DPROC_ALT)(GLenum,GLenum,GLenum,GLuint,GLint,GLint);
static inline void glFramebufferTexture3D(GLenum target1,GLenum attachment1,GLenum textarget1,GLuint texture1,GLint level1,GLint zoffset1)
{
#ifdef __cplusplus
	static PFNGLFRAMEBUFFERTEXTURE3DPROC_ALT fn=(PFNGLFRAMEBUFFERTEXTURE3DPROC_ALT)glaltGetProcAddressVersion("glFramebufferTexture3D",4,3);
#else
	static PFNGLFRAMEBUFFERTEXTURE3DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLFRAMEBUFFERTEXTURE3DPROC_ALT)glaltGetProcAddressVersion("glFramebufferTexture3D",4,3); }
#endif
	 fn(target1,attachment1,textarget1,texture1,level1,zoffset1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_FramebufferTextureLayer
#define GL_ALT_FUNDEF_FramebufferTextureLayer
typedef void (*PFNGLFRAMEBUFFERTEXTURELAYERPROC_ALT)(GLenum,GLenum,GLuint,GLint,GLint);
static inline void glFramebufferTextureLayer(GLenum target1,GLenum attachment1,GLuint texture1,GLint level1,GLint layer1)
{
#ifdef __cplusplus
	static PFNGLFRAMEBUFFERTEXTURELAYERPROC_ALT fn=(PFNGLFRAMEBUFFERTEXTURELAYERPROC_ALT)glaltGetProcAddressVersion("glFramebufferTextureLayer",4,3);
#else
	static PFNGLFRAMEBUFFERTEXTURELAYERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLFRAMEBUFFERTEXTURELAYERPROC_ALT)glaltGetProcAddressVersion("glFramebufferTextureLayer",4,3); }
#endif
	 fn(target1,attachment1,texture1,level1,layer1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_GenBuffers
#define GL_ALT_FUNDEF_GenBuffers
typedef void (*PFNGLGENBUFFERSPROC_ALT)(GLsizei,GLuint *);
static inline void glGenBuffers(GLsizei n1,GLuint * buffers1)
{
#ifdef __cplusplus
	static PFNGLGENBUFFERSPROC_ALT fn=(PFNGLGENBUFFERSPROC_ALT)glaltGetProcAddressVersion("glGenBuffers",4,3);
#else
	static PFNGLGENBUFFERSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGENBUFFERSPROC_ALT)glaltGetProcAddressVersion("glGenBuffers",4,3); }
#endif
	 fn(n1,buffers1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GenFramebuffers
#define GL_ALT_FUNDEF_GenFramebuffers
typedef void (*PFNGLGENFRAMEBUFFERSPROC_ALT)(GLsizei,GLuint *);
static inline void glGenFramebuffers(GLsizei n1,GLuint * framebuffers1)
{
#ifdef __cplusplus
	static PFNGLGENFRAMEBUFFERSPROC_ALT fn=(PFNGLGENFRAMEBUFFERSPROC_ALT)glaltGetProcAddressVersion("glGenFramebuffers",4,3);
#else
	static PFNGLGENFRAMEBUFFERSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGENFRAMEBUFFERSPROC_ALT)glaltGetProcAddressVersion("glGenFramebuffers",4,3); }
#endif
	 fn(n1,framebuffers1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_GenProgramPipelines
#define GL_ALT_FUNDEF_GenProgramPipelines
typedef void (*PFNGLGENPROGRAMPIPELINESPROC_ALT)(GLsizei,GLuint *);
static inline void glGenProgramPipelines(GLsizei n1,GLuint * pipelines1)
{
#ifdef __cplusplus
	static PFNGLGENPROGRAMPIPELINESPROC_ALT fn=(PFNGLGENPROGRAMPIPELINESPROC_ALT)glaltGetProcAddressVersion("glGenProgramPipelines",4,3);
#else
	static PFNGLGENPROGRAMPIPELINESPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGENPROGRAMPIPELINESPROC_ALT)glaltGetProcAddressVersion("glGenProgramPipelines",4,3); }
#endif
	 fn(n1,pipelines1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_GenQueries
#define GL_ALT_FUNDEF_GenQueries
typedef void (*PFNGLGENQUERIESPROC_ALT)(GLsizei,GLuint *);
static inline void glGenQueries(GLsizei n1,GLuint * ids1)
{
#ifdef __cplusplus
	static PFNGLGENQUERIESPROC_ALT fn=(PFNGLGENQUERIESPROC_ALT)glaltGetProcAddressVersion("glGenQueries",4,3);
#else
	static PFNGLGENQUERIESPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGENQUERIESPROC_ALT)glaltGetProcAddressVersion("glGenQueries",4,3); }
#endif
	 fn(n1,ids1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GenRenderbuffers
#define GL_ALT_FUNDEF_GenRenderbuffers
typedef void (*PFNGLGENRENDERBUFFERSPROC_ALT)(GLsizei,GLuint *);
static inline void glGenRenderbuffers(GLsizei n1,GLuint * renderbuffers1)
{
#ifdef __cplusplus
	static PFNGLGENRENDERBUFFERSPROC_ALT fn=(PFNGLGENRENDERBUFFERSPROC_ALT)glaltGetProcAddressVersion("glGenRenderbuffers",4,3);
#else
	static PFNGLGENRENDERBUFFERSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGENRENDERBUFFERSPROC_ALT)glaltGetProcAddressVersion("glGenRenderbuffers",4,3); }
#endif
	 fn(n1,renderbuffers1);
}
#endif
#endif

#ifndef GL_VERSION_3_3
#ifndef	GL_ALT_FUNDEF_GenSamplers
#define GL_ALT_FUNDEF_GenSamplers
typedef void (*PFNGLGENSAMPLERSPROC_ALT)(GLsizei,GLuint *);
static inline void glGenSamplers(GLsizei count1,GLuint * samplers1)
{
#ifdef __cplusplus
	static PFNGLGENSAMPLERSPROC_ALT fn=(PFNGLGENSAMPLERSPROC_ALT)glaltGetProcAddressVersion("glGenSamplers",4,3);
#else
	static PFNGLGENSAMPLERSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGENSAMPLERSPROC_ALT)glaltGetProcAddressVersion("glGenSamplers",4,3); }
#endif
	 fn(count1,samplers1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_GenTransformFeedbacks
#define GL_ALT_FUNDEF_GenTransformFeedbacks
typedef void (*PFNGLGENTRANSFORMFEEDBACKSPROC_ALT)(GLsizei,GLuint *);
static inline void glGenTransformFeedbacks(GLsizei n1,GLuint * ids1)
{
#ifdef __cplusplus
	static PFNGLGENTRANSFORMFEEDBACKSPROC_ALT fn=(PFNGLGENTRANSFORMFEEDBACKSPROC_ALT)glaltGetProcAddressVersion("glGenTransformFeedbacks",4,3);
#else
	static PFNGLGENTRANSFORMFEEDBACKSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGENTRANSFORMFEEDBACKSPROC_ALT)glaltGetProcAddressVersion("glGenTransformFeedbacks",4,3); }
#endif
	 fn(n1,ids1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GenVertexArrays
#define GL_ALT_FUNDEF_GenVertexArrays
typedef void (*PFNGLGENVERTEXARRAYSPROC_ALT)(GLsizei,GLuint *);
static inline void glGenVertexArrays(GLsizei n1,GLuint * arrays1)
{
#ifdef __cplusplus
	static PFNGLGENVERTEXARRAYSPROC_ALT fn=(PFNGLGENVERTEXARRAYSPROC_ALT)glaltGetProcAddressVersion("glGenVertexArrays",4,3);
#else
	static PFNGLGENVERTEXARRAYSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGENVERTEXARRAYSPROC_ALT)glaltGetProcAddressVersion("glGenVertexArrays",4,3); }
#endif
	 fn(n1,arrays1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GenerateMipmap
#define GL_ALT_FUNDEF_GenerateMipmap
typedef void (*PFNGLGENERATEMIPMAPPROC_ALT)(GLenum);
static inline void glGenerateMipmap(GLenum target1)
{
#ifdef __cplusplus
	static PFNGLGENERATEMIPMAPPROC_ALT fn=(PFNGLGENERATEMIPMAPPROC_ALT)glaltGetProcAddressVersion("glGenerateMipmap",4,3);
#else
	static PFNGLGENERATEMIPMAPPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGENERATEMIPMAPPROC_ALT)glaltGetProcAddressVersion("glGenerateMipmap",4,3); }
#endif
	 fn(target1);
}
#endif
#endif

#ifndef GL_VERSION_4_2
#ifndef	GL_ALT_FUNDEF_GetActiveAtomicCounterBufferiv
#define GL_ALT_FUNDEF_GetActiveAtomicCounterBufferiv
typedef void (*PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC_ALT)(GLuint,GLuint,GLenum,GLint *);
static inline void glGetActiveAtomicCounterBufferiv(GLuint program1,GLuint bufferIndex1,GLenum pname1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC_ALT fn=(PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC_ALT)glaltGetProcAddressVersion("glGetActiveAtomicCounterBufferiv",4,3);
#else
	static PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC_ALT)glaltGetProcAddressVersion("glGetActiveAtomicCounterBufferiv",4,3); }
#endif
	 fn(program1,bufferIndex1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetActiveAttrib
#define GL_ALT_FUNDEF_GetActiveAttrib
typedef void (*PFNGLGETACTIVEATTRIBPROC_ALT)(GLuint,GLuint,GLsizei,GLsizei *,GLint *,GLenum *,GLchar *);
static inline void glGetActiveAttrib(GLuint program1,GLuint index1,GLsizei bufSize1,GLsizei * length1,GLint * size1,GLenum * type1,GLchar * name1)
{
#ifdef __cplusplus
	static PFNGLGETACTIVEATTRIBPROC_ALT fn=(PFNGLGETACTIVEATTRIBPROC_ALT)glaltGetProcAddressVersion("glGetActiveAttrib",4,3);
#else
	static PFNGLGETACTIVEATTRIBPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETACTIVEATTRIBPROC_ALT)glaltGetProcAddressVersion("glGetActiveAttrib",4,3); }
#endif
	 fn(program1,index1,bufSize1,length1,size1,type1,name1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_GetActiveSubroutineName
#define GL_ALT_FUNDEF_GetActiveSubroutineName
typedef void (*PFNGLGETACTIVESUBROUTINENAMEPROC_ALT)(GLuint,GLenum,GLuint,GLsizei,GLsizei *,GLchar *);
static inline void glGetActiveSubroutineName(GLuint program1,GLenum shadertype1,GLuint index1,GLsizei bufsize1,GLsizei * length1,GLchar * name1)
{
#ifdef __cplusplus
	static PFNGLGETACTIVESUBROUTINENAMEPROC_ALT fn=(PFNGLGETACTIVESUBROUTINENAMEPROC_ALT)glaltGetProcAddressVersion("glGetActiveSubroutineName",4,3);
#else
	static PFNGLGETACTIVESUBROUTINENAMEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETACTIVESUBROUTINENAMEPROC_ALT)glaltGetProcAddressVersion("glGetActiveSubroutineName",4,3); }
#endif
	 fn(program1,shadertype1,index1,bufsize1,length1,name1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_GetActiveSubroutineUniformName
#define GL_ALT_FUNDEF_GetActiveSubroutineUniformName
typedef void (*PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC_ALT)(GLuint,GLenum,GLuint,GLsizei,GLsizei *,GLchar *);
static inline void glGetActiveSubroutineUniformName(GLuint program1,GLenum shadertype1,GLuint index1,GLsizei bufsize1,GLsizei * length1,GLchar * name1)
{
#ifdef __cplusplus
	static PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC_ALT fn=(PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC_ALT)glaltGetProcAddressVersion("glGetActiveSubroutineUniformName",4,3);
#else
	static PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC_ALT)glaltGetProcAddressVersion("glGetActiveSubroutineUniformName",4,3); }
#endif
	 fn(program1,shadertype1,index1,bufsize1,length1,name1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_GetActiveSubroutineUniformiv
#define GL_ALT_FUNDEF_GetActiveSubroutineUniformiv
typedef void (*PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC_ALT)(GLuint,GLenum,GLuint,GLenum,GLint *);
static inline void glGetActiveSubroutineUniformiv(GLuint program1,GLenum shadertype1,GLuint index1,GLenum pname1,GLint * values1)
{
#ifdef __cplusplus
	static PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC_ALT fn=(PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC_ALT)glaltGetProcAddressVersion("glGetActiveSubroutineUniformiv",4,3);
#else
	static PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC_ALT)glaltGetProcAddressVersion("glGetActiveSubroutineUniformiv",4,3); }
#endif
	 fn(program1,shadertype1,index1,pname1,values1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetActiveUniform
#define GL_ALT_FUNDEF_GetActiveUniform
typedef void (*PFNGLGETACTIVEUNIFORMPROC_ALT)(GLuint,GLuint,GLsizei,GLsizei *,GLint *,GLenum *,GLchar *);
static inline void glGetActiveUniform(GLuint program1,GLuint index1,GLsizei bufSize1,GLsizei * length1,GLint * size1,GLenum * type1,GLchar * name1)
{
#ifdef __cplusplus
	static PFNGLGETACTIVEUNIFORMPROC_ALT fn=(PFNGLGETACTIVEUNIFORMPROC_ALT)glaltGetProcAddressVersion("glGetActiveUniform",4,3);
#else
	static PFNGLGETACTIVEUNIFORMPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETACTIVEUNIFORMPROC_ALT)glaltGetProcAddressVersion("glGetActiveUniform",4,3); }
#endif
	 fn(program1,index1,bufSize1,length1,size1,type1,name1);
}
#endif
#endif

#ifndef GL_VERSION_3_1
#ifndef	GL_ALT_FUNDEF_GetActiveUniformBlockName
#define GL_ALT_FUNDEF_GetActiveUniformBlockName
typedef void (*PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC_ALT)(GLuint,GLuint,GLsizei,GLsizei *,GLchar *);
static inline void glGetActiveUniformBlockName(GLuint program1,GLuint uniformBlockIndex1,GLsizei bufSize1,GLsizei * length1,GLchar * uniformBlockName1)
{
#ifdef __cplusplus
	static PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC_ALT fn=(PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC_ALT)glaltGetProcAddressVersion("glGetActiveUniformBlockName",4,3);
#else
	static PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC_ALT)glaltGetProcAddressVersion("glGetActiveUniformBlockName",4,3); }
#endif
	 fn(program1,uniformBlockIndex1,bufSize1,length1,uniformBlockName1);
}
#endif
#endif

#ifndef GL_VERSION_3_1
#ifndef	GL_ALT_FUNDEF_GetActiveUniformBlockiv
#define GL_ALT_FUNDEF_GetActiveUniformBlockiv
typedef void (*PFNGLGETACTIVEUNIFORMBLOCKIVPROC_ALT)(GLuint,GLuint,GLenum,GLint *);
static inline void glGetActiveUniformBlockiv(GLuint program1,GLuint uniformBlockIndex1,GLenum pname1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETACTIVEUNIFORMBLOCKIVPROC_ALT fn=(PFNGLGETACTIVEUNIFORMBLOCKIVPROC_ALT)glaltGetProcAddressVersion("glGetActiveUniformBlockiv",4,3);
#else
	static PFNGLGETACTIVEUNIFORMBLOCKIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETACTIVEUNIFORMBLOCKIVPROC_ALT)glaltGetProcAddressVersion("glGetActiveUniformBlockiv",4,3); }
#endif
	 fn(program1,uniformBlockIndex1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_1
#ifndef	GL_ALT_FUNDEF_GetActiveUniformName
#define GL_ALT_FUNDEF_GetActiveUniformName
typedef void (*PFNGLGETACTIVEUNIFORMNAMEPROC_ALT)(GLuint,GLuint,GLsizei,GLsizei *,GLchar *);
static inline void glGetActiveUniformName(GLuint program1,GLuint uniformIndex1,GLsizei bufSize1,GLsizei * length1,GLchar * uniformName1)
{
#ifdef __cplusplus
	static PFNGLGETACTIVEUNIFORMNAMEPROC_ALT fn=(PFNGLGETACTIVEUNIFORMNAMEPROC_ALT)glaltGetProcAddressVersion("glGetActiveUniformName",4,3);
#else
	static PFNGLGETACTIVEUNIFORMNAMEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETACTIVEUNIFORMNAMEPROC_ALT)glaltGetProcAddressVersion("glGetActiveUniformName",4,3); }
#endif
	 fn(program1,uniformIndex1,bufSize1,length1,uniformName1);
}
#endif
#endif

#ifndef GL_VERSION_3_1
#ifndef	GL_ALT_FUNDEF_GetActiveUniformsiv
#define GL_ALT_FUNDEF_GetActiveUniformsiv
typedef void (*PFNGLGETACTIVEUNIFORMSIVPROC_ALT)(GLuint,GLsizei,const GLuint *,GLenum,GLint *);
static inline void glGetActiveUniformsiv(GLuint program1,GLsizei uniformCount1,const GLuint * uniformIndices1,GLenum pname1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETACTIVEUNIFORMSIVPROC_ALT fn=(PFNGLGETACTIVEUNIFORMSIVPROC_ALT)glaltGetProcAddressVersion("glGetActiveUniformsiv",4,3);
#else
	static PFNGLGETACTIVEUNIFORMSIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETACTIVEUNIFORMSIVPROC_ALT)glaltGetProcAddressVersion("glGetActiveUniformsiv",4,3); }
#endif
	 fn(program1,uniformCount1,uniformIndices1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetAttachedShaders
#define GL_ALT_FUNDEF_GetAttachedShaders
typedef void (*PFNGLGETATTACHEDSHADERSPROC_ALT)(GLuint,GLsizei,GLsizei *,GLuint *);
static inline void glGetAttachedShaders(GLuint program1,GLsizei maxCount1,GLsizei * count1,GLuint * shaders1)
{
#ifdef __cplusplus
	static PFNGLGETATTACHEDSHADERSPROC_ALT fn=(PFNGLGETATTACHEDSHADERSPROC_ALT)glaltGetProcAddressVersion("glGetAttachedShaders",4,3);
#else
	static PFNGLGETATTACHEDSHADERSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETATTACHEDSHADERSPROC_ALT)glaltGetProcAddressVersion("glGetAttachedShaders",4,3); }
#endif
	 fn(program1,maxCount1,count1,shaders1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetAttribLocation
#define GL_ALT_FUNDEF_GetAttribLocation
typedef GLint (*PFNGLGETATTRIBLOCATIONPROC_ALT)(GLuint,const GLchar *);
static inline GLint glGetAttribLocation(GLuint program1,const GLchar * name1)
{
#ifdef __cplusplus
	static PFNGLGETATTRIBLOCATIONPROC_ALT fn=(PFNGLGETATTRIBLOCATIONPROC_ALT)glaltGetProcAddressVersion("glGetAttribLocation",4,3);
#else
	static PFNGLGETATTRIBLOCATIONPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETATTRIBLOCATIONPROC_ALT)glaltGetProcAddressVersion("glGetAttribLocation",4,3); }
#endif
	return fn(program1,name1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetBooleani_v
#define GL_ALT_FUNDEF_GetBooleani_v
typedef void (*PFNGLGETBOOLEANI_VPROC_ALT)(GLenum,GLuint,GLboolean *);
static inline void glGetBooleani_v(GLenum target1,GLuint index1,GLboolean * data1)
{
#ifdef __cplusplus
	static PFNGLGETBOOLEANI_VPROC_ALT fn=(PFNGLGETBOOLEANI_VPROC_ALT)glaltGetProcAddressVersion("glGetBooleani_v",4,3);
#else
	static PFNGLGETBOOLEANI_VPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETBOOLEANI_VPROC_ALT)glaltGetProcAddressVersion("glGetBooleani_v",4,3); }
#endif
	 fn(target1,index1,data1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_GetBufferParameteri64v
#define GL_ALT_FUNDEF_GetBufferParameteri64v
typedef void (*PFNGLGETBUFFERPARAMETERI64VPROC_ALT)(GLenum,GLenum,GLint64 *);
static inline void glGetBufferParameteri64v(GLenum target1,GLenum pname1,GLint64 * params1)
{
#ifdef __cplusplus
	static PFNGLGETBUFFERPARAMETERI64VPROC_ALT fn=(PFNGLGETBUFFERPARAMETERI64VPROC_ALT)glaltGetProcAddressVersion("glGetBufferParameteri64v",4,3);
#else
	static PFNGLGETBUFFERPARAMETERI64VPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETBUFFERPARAMETERI64VPROC_ALT)glaltGetProcAddressVersion("glGetBufferParameteri64v",4,3); }
#endif
	 fn(target1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_GetBufferParameteriv
#define GL_ALT_FUNDEF_GetBufferParameteriv
typedef void (*PFNGLGETBUFFERPARAMETERIVPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetBufferParameteriv(GLenum target1,GLenum pname1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETBUFFERPARAMETERIVPROC_ALT fn=(PFNGLGETBUFFERPARAMETERIVPROC_ALT)glaltGetProcAddressVersion("glGetBufferParameteriv",4,3);
#else
	static PFNGLGETBUFFERPARAMETERIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETBUFFERPARAMETERIVPROC_ALT)glaltGetProcAddressVersion("glGetBufferParameteriv",4,3); }
#endif
	 fn(target1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_GetBufferPointerv
#define GL_ALT_FUNDEF_GetBufferPointerv
typedef void (*PFNGLGETBUFFERPOINTERVPROC_ALT)(GLenum,GLenum,void **);
static inline void glGetBufferPointerv(GLenum target1,GLenum pname1,void ** params1)
{
#ifdef __cplusplus
	static PFNGLGETBUFFERPOINTERVPROC_ALT fn=(PFNGLGETBUFFERPOINTERVPROC_ALT)glaltGetProcAddressVersion("glGetBufferPointerv",4,3);
#else
	static PFNGLGETBUFFERPOINTERVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETBUFFERPOINTERVPROC_ALT)glaltGetProcAddressVersion("glGetBufferPointerv",4,3); }
#endif
	 fn(target1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_GetBufferSubData
#define GL_ALT_FUNDEF_GetBufferSubData
typedef void (*PFNGLGETBUFFERSUBDATAPROC_ALT)(GLenum,GLintptr,GLsizeiptr,void *);
static inline void glGetBufferSubData(GLenum target1,GLintptr offset1,GLsizeiptr size1,void * data1)
{
#ifdef __cplusplus
	static PFNGLGETBUFFERSUBDATAPROC_ALT fn=(PFNGLGETBUFFERSUBDATAPROC_ALT)glaltGetProcAddressVersion("glGetBufferSubData",4,3);
#else
	static PFNGLGETBUFFERSUBDATAPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETBUFFERSUBDATAPROC_ALT)glaltGetProcAddressVersion("glGetBufferSubData",4,3); }
#endif
	 fn(target1,offset1,size1,data1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_GetCompressedTexImage
#define GL_ALT_FUNDEF_GetCompressedTexImage
typedef void (*PFNGLGETCOMPRESSEDTEXIMAGEPROC_ALT)(GLenum,GLint,void *);
static inline void glGetCompressedTexImage(GLenum target1,GLint level1,void * img1)
{
#ifdef __cplusplus
	static PFNGLGETCOMPRESSEDTEXIMAGEPROC_ALT fn=(PFNGLGETCOMPRESSEDTEXIMAGEPROC_ALT)glaltGetProcAddressVersion("glGetCompressedTexImage",4,3);
#else
	static PFNGLGETCOMPRESSEDTEXIMAGEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETCOMPRESSEDTEXIMAGEPROC_ALT)glaltGetProcAddressVersion("glGetCompressedTexImage",4,3); }
#endif
	 fn(target1,level1,img1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_GetDebugMessageLog
#define GL_ALT_FUNDEF_GetDebugMessageLog
typedef GLuint (*PFNGLGETDEBUGMESSAGELOGPROC_ALT)(GLuint,GLsizei,GLenum *,GLenum *,GLuint *,GLenum *,GLsizei *,GLchar *);
static inline GLuint glGetDebugMessageLog(GLuint count1,GLsizei bufSize1,GLenum * sources1,GLenum * types1,GLuint * ids1,GLenum * severities1,GLsizei * lengths1,GLchar * messageLog1)
{
#ifdef __cplusplus
	static PFNGLGETDEBUGMESSAGELOGPROC_ALT fn=(PFNGLGETDEBUGMESSAGELOGPROC_ALT)glaltGetProcAddressVersion("glGetDebugMessageLog",4,3);
#else
	static PFNGLGETDEBUGMESSAGELOGPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETDEBUGMESSAGELOGPROC_ALT)glaltGetProcAddressVersion("glGetDebugMessageLog",4,3); }
#endif
	return fn(count1,bufSize1,sources1,types1,ids1,severities1,lengths1,messageLog1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_GetDoublei_v
#define GL_ALT_FUNDEF_GetDoublei_v
typedef void (*PFNGLGETDOUBLEI_VPROC_ALT)(GLenum,GLuint,GLdouble *);
static inline void glGetDoublei_v(GLenum target1,GLuint index1,GLdouble * data1)
{
#ifdef __cplusplus
	static PFNGLGETDOUBLEI_VPROC_ALT fn=(PFNGLGETDOUBLEI_VPROC_ALT)glaltGetProcAddressVersion("glGetDoublei_v",4,3);
#else
	static PFNGLGETDOUBLEI_VPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETDOUBLEI_VPROC_ALT)glaltGetProcAddressVersion("glGetDoublei_v",4,3); }
#endif
	 fn(target1,index1,data1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_GetFloati_v
#define GL_ALT_FUNDEF_GetFloati_v
typedef void (*PFNGLGETFLOATI_VPROC_ALT)(GLenum,GLuint,GLfloat *);
static inline void glGetFloati_v(GLenum target1,GLuint index1,GLfloat * data1)
{
#ifdef __cplusplus
	static PFNGLGETFLOATI_VPROC_ALT fn=(PFNGLGETFLOATI_VPROC_ALT)glaltGetProcAddressVersion("glGetFloati_v",4,3);
#else
	static PFNGLGETFLOATI_VPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETFLOATI_VPROC_ALT)glaltGetProcAddressVersion("glGetFloati_v",4,3); }
#endif
	 fn(target1,index1,data1);
}
#endif
#endif

#ifndef GL_VERSION_3_3
#ifndef	GL_ALT_FUNDEF_GetFragDataIndex
#define GL_ALT_FUNDEF_GetFragDataIndex
typedef GLint (*PFNGLGETFRAGDATAINDEXPROC_ALT)(GLuint,const GLchar *);
static inline GLint glGetFragDataIndex(GLuint program1,const GLchar * name1)
{
#ifdef __cplusplus
	static PFNGLGETFRAGDATAINDEXPROC_ALT fn=(PFNGLGETFRAGDATAINDEXPROC_ALT)glaltGetProcAddressVersion("glGetFragDataIndex",4,3);
#else
	static PFNGLGETFRAGDATAINDEXPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETFRAGDATAINDEXPROC_ALT)glaltGetProcAddressVersion("glGetFragDataIndex",4,3); }
#endif
	return fn(program1,name1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetFragDataLocation
#define GL_ALT_FUNDEF_GetFragDataLocation
typedef GLint (*PFNGLGETFRAGDATALOCATIONPROC_ALT)(GLuint,const GLchar *);
static inline GLint glGetFragDataLocation(GLuint program1,const GLchar * name1)
{
#ifdef __cplusplus
	static PFNGLGETFRAGDATALOCATIONPROC_ALT fn=(PFNGLGETFRAGDATALOCATIONPROC_ALT)glaltGetProcAddressVersion("glGetFragDataLocation",4,3);
#else
	static PFNGLGETFRAGDATALOCATIONPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETFRAGDATALOCATIONPROC_ALT)glaltGetProcAddressVersion("glGetFragDataLocation",4,3); }
#endif
	return fn(program1,name1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetFramebufferAttachmentParameteriv
#define GL_ALT_FUNDEF_GetFramebufferAttachmentParameteriv
typedef void (*PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC_ALT)(GLenum,GLenum,GLenum,GLint *);
static inline void glGetFramebufferAttachmentParameteriv(GLenum target1,GLenum attachment1,GLenum pname1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC_ALT fn=(PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC_ALT)glaltGetProcAddressVersion("glGetFramebufferAttachmentParameteriv",4,3);
#else
	static PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC_ALT)glaltGetProcAddressVersion("glGetFramebufferAttachmentParameteriv",4,3); }
#endif
	 fn(target1,attachment1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_GetFramebufferParameteriv
#define GL_ALT_FUNDEF_GetFramebufferParameteriv
typedef void (*PFNGLGETFRAMEBUFFERPARAMETERIVPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetFramebufferParameteriv(GLenum target1,GLenum pname1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETFRAMEBUFFERPARAMETERIVPROC_ALT fn=(PFNGLGETFRAMEBUFFERPARAMETERIVPROC_ALT)glaltGetProcAddressVersion("glGetFramebufferParameteriv",4,3);
#else
	static PFNGLGETFRAMEBUFFERPARAMETERIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETFRAMEBUFFERPARAMETERIVPROC_ALT)glaltGetProcAddressVersion("glGetFramebufferParameteriv",4,3); }
#endif
	 fn(target1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_GetInteger64i_v
#define GL_ALT_FUNDEF_GetInteger64i_v
typedef void (*PFNGLGETINTEGER64I_VPROC_ALT)(GLenum,GLuint,GLint64 *);
static inline void glGetInteger64i_v(GLenum target1,GLuint index1,GLint64 * data1)
{
#ifdef __cplusplus
	static PFNGLGETINTEGER64I_VPROC_ALT fn=(PFNGLGETINTEGER64I_VPROC_ALT)glaltGetProcAddressVersion("glGetInteger64i_v",4,3);
#else
	static PFNGLGETINTEGER64I_VPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETINTEGER64I_VPROC_ALT)glaltGetProcAddressVersion("glGetInteger64i_v",4,3); }
#endif
	 fn(target1,index1,data1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_GetInteger64v
#define GL_ALT_FUNDEF_GetInteger64v
typedef void (*PFNGLGETINTEGER64VPROC_ALT)(GLenum,GLint64 *);
static inline void glGetInteger64v(GLenum pname1,GLint64 * data1)
{
#ifdef __cplusplus
	static PFNGLGETINTEGER64VPROC_ALT fn=(PFNGLGETINTEGER64VPROC_ALT)glaltGetProcAddressVersion("glGetInteger64v",4,3);
#else
	static PFNGLGETINTEGER64VPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETINTEGER64VPROC_ALT)glaltGetProcAddressVersion("glGetInteger64v",4,3); }
#endif
	 fn(pname1,data1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetIntegeri_v
#define GL_ALT_FUNDEF_GetIntegeri_v
typedef void (*PFNGLGETINTEGERI_VPROC_ALT)(GLenum,GLuint,GLint *);
static inline void glGetIntegeri_v(GLenum target1,GLuint index1,GLint * data1)
{
#ifdef __cplusplus
	static PFNGLGETINTEGERI_VPROC_ALT fn=(PFNGLGETINTEGERI_VPROC_ALT)glaltGetProcAddressVersion("glGetIntegeri_v",4,3);
#else
	static PFNGLGETINTEGERI_VPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETINTEGERI_VPROC_ALT)glaltGetProcAddressVersion("glGetIntegeri_v",4,3); }
#endif
	 fn(target1,index1,data1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_GetInternalformati64v
#define GL_ALT_FUNDEF_GetInternalformati64v
typedef void (*PFNGLGETINTERNALFORMATI64VPROC_ALT)(GLenum,GLenum,GLenum,GLsizei,GLint64 *);
static inline void glGetInternalformati64v(GLenum target1,GLenum internalformat1,GLenum pname1,GLsizei bufSize1,GLint64 * params1)
{
#ifdef __cplusplus
	static PFNGLGETINTERNALFORMATI64VPROC_ALT fn=(PFNGLGETINTERNALFORMATI64VPROC_ALT)glaltGetProcAddressVersion("glGetInternalformati64v",4,3);
#else
	static PFNGLGETINTERNALFORMATI64VPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETINTERNALFORMATI64VPROC_ALT)glaltGetProcAddressVersion("glGetInternalformati64v",4,3); }
#endif
	 fn(target1,internalformat1,pname1,bufSize1,params1);
}
#endif
#endif

#ifndef GL_VERSION_4_2
#ifndef	GL_ALT_FUNDEF_GetInternalformativ
#define GL_ALT_FUNDEF_GetInternalformativ
typedef void (*PFNGLGETINTERNALFORMATIVPROC_ALT)(GLenum,GLenum,GLenum,GLsizei,GLint *);
static inline void glGetInternalformativ(GLenum target1,GLenum internalformat1,GLenum pname1,GLsizei bufSize1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETINTERNALFORMATIVPROC_ALT fn=(PFNGLGETINTERNALFORMATIVPROC_ALT)glaltGetProcAddressVersion("glGetInternalformativ",4,3);
#else
	static PFNGLGETINTERNALFORMATIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETINTERNALFORMATIVPROC_ALT)glaltGetProcAddressVersion("glGetInternalformativ",4,3); }
#endif
	 fn(target1,internalformat1,pname1,bufSize1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_GetMultisamplefv
#define GL_ALT_FUNDEF_GetMultisamplefv
typedef void (*PFNGLGETMULTISAMPLEFVPROC_ALT)(GLenum,GLuint,GLfloat *);
static inline void glGetMultisamplefv(GLenum pname1,GLuint index1,GLfloat * val1)
{
#ifdef __cplusplus
	static PFNGLGETMULTISAMPLEFVPROC_ALT fn=(PFNGLGETMULTISAMPLEFVPROC_ALT)glaltGetProcAddressVersion("glGetMultisamplefv",4,3);
#else
	static PFNGLGETMULTISAMPLEFVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETMULTISAMPLEFVPROC_ALT)glaltGetProcAddressVersion("glGetMultisamplefv",4,3); }
#endif
	 fn(pname1,index1,val1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_GetObjectLabel
#define GL_ALT_FUNDEF_GetObjectLabel
typedef void (*PFNGLGETOBJECTLABELPROC_ALT)(GLenum,GLuint,GLsizei,GLsizei *,GLchar *);
static inline void glGetObjectLabel(GLenum identifier1,GLuint name1,GLsizei bufSize1,GLsizei * length1,GLchar * label1)
{
#ifdef __cplusplus
	static PFNGLGETOBJECTLABELPROC_ALT fn=(PFNGLGETOBJECTLABELPROC_ALT)glaltGetProcAddressVersion("glGetObjectLabel",4,3);
#else
	static PFNGLGETOBJECTLABELPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETOBJECTLABELPROC_ALT)glaltGetProcAddressVersion("glGetObjectLabel",4,3); }
#endif
	 fn(identifier1,name1,bufSize1,length1,label1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_GetObjectPtrLabel
#define GL_ALT_FUNDEF_GetObjectPtrLabel
typedef void (*PFNGLGETOBJECTPTRLABELPROC_ALT)(const void *,GLsizei,GLsizei *,GLchar *);
static inline void glGetObjectPtrLabel(const void * ptr1,GLsizei bufSize1,GLsizei * length1,GLchar * label1)
{
#ifdef __cplusplus
	static PFNGLGETOBJECTPTRLABELPROC_ALT fn=(PFNGLGETOBJECTPTRLABELPROC_ALT)glaltGetProcAddressVersion("glGetObjectPtrLabel",4,3);
#else
	static PFNGLGETOBJECTPTRLABELPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETOBJECTPTRLABELPROC_ALT)glaltGetProcAddressVersion("glGetObjectPtrLabel",4,3); }
#endif
	 fn(ptr1,bufSize1,length1,label1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_GetProgramBinary
#define GL_ALT_FUNDEF_GetProgramBinary
typedef void (*PFNGLGETPROGRAMBINARYPROC_ALT)(GLuint,GLsizei,GLsizei *,GLenum *,void *);
static inline void glGetProgramBinary(GLuint program1,GLsizei bufSize1,GLsizei * length1,GLenum * binaryFormat1,void * binary1)
{
#ifdef __cplusplus
	static PFNGLGETPROGRAMBINARYPROC_ALT fn=(PFNGLGETPROGRAMBINARYPROC_ALT)glaltGetProcAddressVersion("glGetProgramBinary",4,3);
#else
	static PFNGLGETPROGRAMBINARYPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETPROGRAMBINARYPROC_ALT)glaltGetProcAddressVersion("glGetProgramBinary",4,3); }
#endif
	 fn(program1,bufSize1,length1,binaryFormat1,binary1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetProgramInfoLog
#define GL_ALT_FUNDEF_GetProgramInfoLog
typedef void (*PFNGLGETPROGRAMINFOLOGPROC_ALT)(GLuint,GLsizei,GLsizei *,GLchar *);
static inline void glGetProgramInfoLog(GLuint program1,GLsizei bufSize1,GLsizei * length1,GLchar * infoLog1)
{
#ifdef __cplusplus
	static PFNGLGETPROGRAMINFOLOGPROC_ALT fn=(PFNGLGETPROGRAMINFOLOGPROC_ALT)glaltGetProcAddressVersion("glGetProgramInfoLog",4,3);
#else
	static PFNGLGETPROGRAMINFOLOGPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETPROGRAMINFOLOGPROC_ALT)glaltGetProcAddressVersion("glGetProgramInfoLog",4,3); }
#endif
	 fn(program1,bufSize1,length1,infoLog1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_GetProgramInterfaceiv
#define GL_ALT_FUNDEF_GetProgramInterfaceiv
typedef void (*PFNGLGETPROGRAMINTERFACEIVPROC_ALT)(GLuint,GLenum,GLenum,GLint *);
static inline void glGetProgramInterfaceiv(GLuint program1,GLenum programInterface1,GLenum pname1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETPROGRAMINTERFACEIVPROC_ALT fn=(PFNGLGETPROGRAMINTERFACEIVPROC_ALT)glaltGetProcAddressVersion("glGetProgramInterfaceiv",4,3);
#else
	static PFNGLGETPROGRAMINTERFACEIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETPROGRAMINTERFACEIVPROC_ALT)glaltGetProcAddressVersion("glGetProgramInterfaceiv",4,3); }
#endif
	 fn(program1,programInterface1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_GetProgramPipelineInfoLog
#define GL_ALT_FUNDEF_GetProgramPipelineInfoLog
typedef void (*PFNGLGETPROGRAMPIPELINEINFOLOGPROC_ALT)(GLuint,GLsizei,GLsizei *,GLchar *);
static inline void glGetProgramPipelineInfoLog(GLuint pipeline1,GLsizei bufSize1,GLsizei * length1,GLchar * infoLog1)
{
#ifdef __cplusplus
	static PFNGLGETPROGRAMPIPELINEINFOLOGPROC_ALT fn=(PFNGLGETPROGRAMPIPELINEINFOLOGPROC_ALT)glaltGetProcAddressVersion("glGetProgramPipelineInfoLog",4,3);
#else
	static PFNGLGETPROGRAMPIPELINEINFOLOGPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETPROGRAMPIPELINEINFOLOGPROC_ALT)glaltGetProcAddressVersion("glGetProgramPipelineInfoLog",4,3); }
#endif
	 fn(pipeline1,bufSize1,length1,infoLog1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_GetProgramPipelineiv
#define GL_ALT_FUNDEF_GetProgramPipelineiv
typedef void (*PFNGLGETPROGRAMPIPELINEIVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetProgramPipelineiv(GLuint pipeline1,GLenum pname1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETPROGRAMPIPELINEIVPROC_ALT fn=(PFNGLGETPROGRAMPIPELINEIVPROC_ALT)glaltGetProcAddressVersion("glGetProgramPipelineiv",4,3);
#else
	static PFNGLGETPROGRAMPIPELINEIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETPROGRAMPIPELINEIVPROC_ALT)glaltGetProcAddressVersion("glGetProgramPipelineiv",4,3); }
#endif
	 fn(pipeline1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_GetProgramResourceIndex
#define GL_ALT_FUNDEF_GetProgramResourceIndex
typedef GLuint (*PFNGLGETPROGRAMRESOURCEINDEXPROC_ALT)(GLuint,GLenum,const GLchar *);
static inline GLuint glGetProgramResourceIndex(GLuint program1,GLenum programInterface1,const GLchar * name1)
{
#ifdef __cplusplus
	static PFNGLGETPROGRAMRESOURCEINDEXPROC_ALT fn=(PFNGLGETPROGRAMRESOURCEINDEXPROC_ALT)glaltGetProcAddressVersion("glGetProgramResourceIndex",4,3);
#else
	static PFNGLGETPROGRAMRESOURCEINDEXPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETPROGRAMRESOURCEINDEXPROC_ALT)glaltGetProcAddressVersion("glGetProgramResourceIndex",4,3); }
#endif
	return fn(program1,programInterface1,name1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_GetProgramResourceLocation
#define GL_ALT_FUNDEF_GetProgramResourceLocation
typedef GLint (*PFNGLGETPROGRAMRESOURCELOCATIONPROC_ALT)(GLuint,GLenum,const GLchar *);
static inline GLint glGetProgramResourceLocation(GLuint program1,GLenum programInterface1,const GLchar * name1)
{
#ifdef __cplusplus
	static PFNGLGETPROGRAMRESOURCELOCATIONPROC_ALT fn=(PFNGLGETPROGRAMRESOURCELOCATIONPROC_ALT)glaltGetProcAddressVersion("glGetProgramResourceLocation",4,3);
#else
	static PFNGLGETPROGRAMRESOURCELOCATIONPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETPROGRAMRESOURCELOCATIONPROC_ALT)glaltGetProcAddressVersion("glGetProgramResourceLocation",4,3); }
#endif
	return fn(program1,programInterface1,name1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_GetProgramResourceLocationIndex
#define GL_ALT_FUNDEF_GetProgramResourceLocationIndex
typedef GLint (*PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC_ALT)(GLuint,GLenum,const GLchar *);
static inline GLint glGetProgramResourceLocationIndex(GLuint program1,GLenum programInterface1,const GLchar * name1)
{
#ifdef __cplusplus
	static PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC_ALT fn=(PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC_ALT)glaltGetProcAddressVersion("glGetProgramResourceLocationIndex",4,3);
#else
	static PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC_ALT)glaltGetProcAddressVersion("glGetProgramResourceLocationIndex",4,3); }
#endif
	return fn(program1,programInterface1,name1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_GetProgramResourceName
#define GL_ALT_FUNDEF_GetProgramResourceName
typedef void (*PFNGLGETPROGRAMRESOURCENAMEPROC_ALT)(GLuint,GLenum,GLuint,GLsizei,GLsizei *,GLchar *);
static inline void glGetProgramResourceName(GLuint program1,GLenum programInterface1,GLuint index1,GLsizei bufSize1,GLsizei * length1,GLchar * name1)
{
#ifdef __cplusplus
	static PFNGLGETPROGRAMRESOURCENAMEPROC_ALT fn=(PFNGLGETPROGRAMRESOURCENAMEPROC_ALT)glaltGetProcAddressVersion("glGetProgramResourceName",4,3);
#else
	static PFNGLGETPROGRAMRESOURCENAMEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETPROGRAMRESOURCENAMEPROC_ALT)glaltGetProcAddressVersion("glGetProgramResourceName",4,3); }
#endif
	 fn(program1,programInterface1,index1,bufSize1,length1,name1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_GetProgramResourceiv
#define GL_ALT_FUNDEF_GetProgramResourceiv
typedef void (*PFNGLGETPROGRAMRESOURCEIVPROC_ALT)(GLuint,GLenum,GLuint,GLsizei,const GLenum *,GLsizei,GLsizei *,GLint *);
static inline void glGetProgramResourceiv(GLuint program1,GLenum programInterface1,GLuint index1,GLsizei propCount1,const GLenum * props1,GLsizei bufSize1,GLsizei * length1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETPROGRAMRESOURCEIVPROC_ALT fn=(PFNGLGETPROGRAMRESOURCEIVPROC_ALT)glaltGetProcAddressVersion("glGetProgramResourceiv",4,3);
#else
	static PFNGLGETPROGRAMRESOURCEIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETPROGRAMRESOURCEIVPROC_ALT)glaltGetProcAddressVersion("glGetProgramResourceiv",4,3); }
#endif
	 fn(program1,programInterface1,index1,propCount1,props1,bufSize1,length1,params1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_GetProgramStageiv
#define GL_ALT_FUNDEF_GetProgramStageiv
typedef void (*PFNGLGETPROGRAMSTAGEIVPROC_ALT)(GLuint,GLenum,GLenum,GLint *);
static inline void glGetProgramStageiv(GLuint program1,GLenum shadertype1,GLenum pname1,GLint * values1)
{
#ifdef __cplusplus
	static PFNGLGETPROGRAMSTAGEIVPROC_ALT fn=(PFNGLGETPROGRAMSTAGEIVPROC_ALT)glaltGetProcAddressVersion("glGetProgramStageiv",4,3);
#else
	static PFNGLGETPROGRAMSTAGEIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETPROGRAMSTAGEIVPROC_ALT)glaltGetProcAddressVersion("glGetProgramStageiv",4,3); }
#endif
	 fn(program1,shadertype1,pname1,values1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetProgramiv
#define GL_ALT_FUNDEF_GetProgramiv
typedef void (*PFNGLGETPROGRAMIVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetProgramiv(GLuint program1,GLenum pname1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETPROGRAMIVPROC_ALT fn=(PFNGLGETPROGRAMIVPROC_ALT)glaltGetProcAddressVersion("glGetProgramiv",4,3);
#else
	static PFNGLGETPROGRAMIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETPROGRAMIVPROC_ALT)glaltGetProcAddressVersion("glGetProgramiv",4,3); }
#endif
	 fn(program1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_GetQueryIndexediv
#define GL_ALT_FUNDEF_GetQueryIndexediv
typedef void (*PFNGLGETQUERYINDEXEDIVPROC_ALT)(GLenum,GLuint,GLenum,GLint *);
static inline void glGetQueryIndexediv(GLenum target1,GLuint index1,GLenum pname1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETQUERYINDEXEDIVPROC_ALT fn=(PFNGLGETQUERYINDEXEDIVPROC_ALT)glaltGetProcAddressVersion("glGetQueryIndexediv",4,3);
#else
	static PFNGLGETQUERYINDEXEDIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETQUERYINDEXEDIVPROC_ALT)glaltGetProcAddressVersion("glGetQueryIndexediv",4,3); }
#endif
	 fn(target1,index1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_3
#ifndef	GL_ALT_FUNDEF_GetQueryObjecti64v
#define GL_ALT_FUNDEF_GetQueryObjecti64v
typedef void (*PFNGLGETQUERYOBJECTI64VPROC_ALT)(GLuint,GLenum,GLint64 *);
static inline void glGetQueryObjecti64v(GLuint id1,GLenum pname1,GLint64 * params1)
{
#ifdef __cplusplus
	static PFNGLGETQUERYOBJECTI64VPROC_ALT fn=(PFNGLGETQUERYOBJECTI64VPROC_ALT)glaltGetProcAddressVersion("glGetQueryObjecti64v",4,3);
#else
	static PFNGLGETQUERYOBJECTI64VPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETQUERYOBJECTI64VPROC_ALT)glaltGetProcAddressVersion("glGetQueryObjecti64v",4,3); }
#endif
	 fn(id1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_GetQueryObjectiv
#define GL_ALT_FUNDEF_GetQueryObjectiv
typedef void (*PFNGLGETQUERYOBJECTIVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetQueryObjectiv(GLuint id1,GLenum pname1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETQUERYOBJECTIVPROC_ALT fn=(PFNGLGETQUERYOBJECTIVPROC_ALT)glaltGetProcAddressVersion("glGetQueryObjectiv",4,3);
#else
	static PFNGLGETQUERYOBJECTIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETQUERYOBJECTIVPROC_ALT)glaltGetProcAddressVersion("glGetQueryObjectiv",4,3); }
#endif
	 fn(id1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_3
#ifndef	GL_ALT_FUNDEF_GetQueryObjectui64v
#define GL_ALT_FUNDEF_GetQueryObjectui64v
typedef void (*PFNGLGETQUERYOBJECTUI64VPROC_ALT)(GLuint,GLenum,GLuint64 *);
static inline void glGetQueryObjectui64v(GLuint id1,GLenum pname1,GLuint64 * params1)
{
#ifdef __cplusplus
	static PFNGLGETQUERYOBJECTUI64VPROC_ALT fn=(PFNGLGETQUERYOBJECTUI64VPROC_ALT)glaltGetProcAddressVersion("glGetQueryObjectui64v",4,3);
#else
	static PFNGLGETQUERYOBJECTUI64VPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETQUERYOBJECTUI64VPROC_ALT)glaltGetProcAddressVersion("glGetQueryObjectui64v",4,3); }
#endif
	 fn(id1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_GetQueryObjectuiv
#define GL_ALT_FUNDEF_GetQueryObjectuiv
typedef void (*PFNGLGETQUERYOBJECTUIVPROC_ALT)(GLuint,GLenum,GLuint *);
static inline void glGetQueryObjectuiv(GLuint id1,GLenum pname1,GLuint * params1)
{
#ifdef __cplusplus
	static PFNGLGETQUERYOBJECTUIVPROC_ALT fn=(PFNGLGETQUERYOBJECTUIVPROC_ALT)glaltGetProcAddressVersion("glGetQueryObjectuiv",4,3);
#else
	static PFNGLGETQUERYOBJECTUIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETQUERYOBJECTUIVPROC_ALT)glaltGetProcAddressVersion("glGetQueryObjectuiv",4,3); }
#endif
	 fn(id1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_GetQueryiv
#define GL_ALT_FUNDEF_GetQueryiv
typedef void (*PFNGLGETQUERYIVPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetQueryiv(GLenum target1,GLenum pname1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETQUERYIVPROC_ALT fn=(PFNGLGETQUERYIVPROC_ALT)glaltGetProcAddressVersion("glGetQueryiv",4,3);
#else
	static PFNGLGETQUERYIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETQUERYIVPROC_ALT)glaltGetProcAddressVersion("glGetQueryiv",4,3); }
#endif
	 fn(target1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetRenderbufferParameteriv
#define GL_ALT_FUNDEF_GetRenderbufferParameteriv
typedef void (*PFNGLGETRENDERBUFFERPARAMETERIVPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetRenderbufferParameteriv(GLenum target1,GLenum pname1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETRENDERBUFFERPARAMETERIVPROC_ALT fn=(PFNGLGETRENDERBUFFERPARAMETERIVPROC_ALT)glaltGetProcAddressVersion("glGetRenderbufferParameteriv",4,3);
#else
	static PFNGLGETRENDERBUFFERPARAMETERIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETRENDERBUFFERPARAMETERIVPROC_ALT)glaltGetProcAddressVersion("glGetRenderbufferParameteriv",4,3); }
#endif
	 fn(target1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_3
#ifndef	GL_ALT_FUNDEF_GetSamplerParameterIiv
#define GL_ALT_FUNDEF_GetSamplerParameterIiv
typedef void (*PFNGLGETSAMPLERPARAMETERIIVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetSamplerParameterIiv(GLuint sampler1,GLenum pname1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETSAMPLERPARAMETERIIVPROC_ALT fn=(PFNGLGETSAMPLERPARAMETERIIVPROC_ALT)glaltGetProcAddressVersion("glGetSamplerParameterIiv",4,3);
#else
	static PFNGLGETSAMPLERPARAMETERIIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETSAMPLERPARAMETERIIVPROC_ALT)glaltGetProcAddressVersion("glGetSamplerParameterIiv",4,3); }
#endif
	 fn(sampler1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_3
#ifndef	GL_ALT_FUNDEF_GetSamplerParameterIuiv
#define GL_ALT_FUNDEF_GetSamplerParameterIuiv
typedef void (*PFNGLGETSAMPLERPARAMETERIUIVPROC_ALT)(GLuint,GLenum,GLuint *);
static inline void glGetSamplerParameterIuiv(GLuint sampler1,GLenum pname1,GLuint * params1)
{
#ifdef __cplusplus
	static PFNGLGETSAMPLERPARAMETERIUIVPROC_ALT fn=(PFNGLGETSAMPLERPARAMETERIUIVPROC_ALT)glaltGetProcAddressVersion("glGetSamplerParameterIuiv",4,3);
#else
	static PFNGLGETSAMPLERPARAMETERIUIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETSAMPLERPARAMETERIUIVPROC_ALT)glaltGetProcAddressVersion("glGetSamplerParameterIuiv",4,3); }
#endif
	 fn(sampler1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_3
#ifndef	GL_ALT_FUNDEF_GetSamplerParameterfv
#define GL_ALT_FUNDEF_GetSamplerParameterfv
typedef void (*PFNGLGETSAMPLERPARAMETERFVPROC_ALT)(GLuint,GLenum,GLfloat *);
static inline void glGetSamplerParameterfv(GLuint sampler1,GLenum pname1,GLfloat * params1)
{
#ifdef __cplusplus
	static PFNGLGETSAMPLERPARAMETERFVPROC_ALT fn=(PFNGLGETSAMPLERPARAMETERFVPROC_ALT)glaltGetProcAddressVersion("glGetSamplerParameterfv",4,3);
#else
	static PFNGLGETSAMPLERPARAMETERFVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETSAMPLERPARAMETERFVPROC_ALT)glaltGetProcAddressVersion("glGetSamplerParameterfv",4,3); }
#endif
	 fn(sampler1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_3
#ifndef	GL_ALT_FUNDEF_GetSamplerParameteriv
#define GL_ALT_FUNDEF_GetSamplerParameteriv
typedef void (*PFNGLGETSAMPLERPARAMETERIVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetSamplerParameteriv(GLuint sampler1,GLenum pname1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETSAMPLERPARAMETERIVPROC_ALT fn=(PFNGLGETSAMPLERPARAMETERIVPROC_ALT)glaltGetProcAddressVersion("glGetSamplerParameteriv",4,3);
#else
	static PFNGLGETSAMPLERPARAMETERIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETSAMPLERPARAMETERIVPROC_ALT)glaltGetProcAddressVersion("glGetSamplerParameteriv",4,3); }
#endif
	 fn(sampler1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetShaderInfoLog
#define GL_ALT_FUNDEF_GetShaderInfoLog
typedef void (*PFNGLGETSHADERINFOLOGPROC_ALT)(GLuint,GLsizei,GLsizei *,GLchar *);
static inline void glGetShaderInfoLog(GLuint shader1,GLsizei bufSize1,GLsizei * length1,GLchar * infoLog1)
{
#ifdef __cplusplus
	static PFNGLGETSHADERINFOLOGPROC_ALT fn=(PFNGLGETSHADERINFOLOGPROC_ALT)glaltGetProcAddressVersion("glGetShaderInfoLog",4,3);
#else
	static PFNGLGETSHADERINFOLOGPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETSHADERINFOLOGPROC_ALT)glaltGetProcAddressVersion("glGetShaderInfoLog",4,3); }
#endif
	 fn(shader1,bufSize1,length1,infoLog1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_GetShaderPrecisionFormat
#define GL_ALT_FUNDEF_GetShaderPrecisionFormat
typedef void (*PFNGLGETSHADERPRECISIONFORMATPROC_ALT)(GLenum,GLenum,GLint *,GLint *);
static inline void glGetShaderPrecisionFormat(GLenum shadertype1,GLenum precisiontype1,GLint * range1,GLint * precision1)
{
#ifdef __cplusplus
	static PFNGLGETSHADERPRECISIONFORMATPROC_ALT fn=(PFNGLGETSHADERPRECISIONFORMATPROC_ALT)glaltGetProcAddressVersion("glGetShaderPrecisionFormat",4,3);
#else
	static PFNGLGETSHADERPRECISIONFORMATPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETSHADERPRECISIONFORMATPROC_ALT)glaltGetProcAddressVersion("glGetShaderPrecisionFormat",4,3); }
#endif
	 fn(shadertype1,precisiontype1,range1,precision1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetShaderSource
#define GL_ALT_FUNDEF_GetShaderSource
typedef void (*PFNGLGETSHADERSOURCEPROC_ALT)(GLuint,GLsizei,GLsizei *,GLchar *);
static inline void glGetShaderSource(GLuint shader1,GLsizei bufSize1,GLsizei * length1,GLchar * source1)
{
#ifdef __cplusplus
	static PFNGLGETSHADERSOURCEPROC_ALT fn=(PFNGLGETSHADERSOURCEPROC_ALT)glaltGetProcAddressVersion("glGetShaderSource",4,3);
#else
	static PFNGLGETSHADERSOURCEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETSHADERSOURCEPROC_ALT)glaltGetProcAddressVersion("glGetShaderSource",4,3); }
#endif
	 fn(shader1,bufSize1,length1,source1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetShaderiv
#define GL_ALT_FUNDEF_GetShaderiv
typedef void (*PFNGLGETSHADERIVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetShaderiv(GLuint shader1,GLenum pname1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETSHADERIVPROC_ALT fn=(PFNGLGETSHADERIVPROC_ALT)glaltGetProcAddressVersion("glGetShaderiv",4,3);
#else
	static PFNGLGETSHADERIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETSHADERIVPROC_ALT)glaltGetProcAddressVersion("glGetShaderiv",4,3); }
#endif
	 fn(shader1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetStringi
#define GL_ALT_FUNDEF_GetStringi
typedef const GLubyte * (*PFNGLGETSTRINGIPROC_ALT)(GLenum,GLuint);
static inline const GLubyte * glGetStringi(GLenum name1,GLuint index1)
{
#ifdef __cplusplus
	static PFNGLGETSTRINGIPROC_ALT fn=(PFNGLGETSTRINGIPROC_ALT)glaltGetProcAddressVersion("glGetStringi",4,3);
#else
	static PFNGLGETSTRINGIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETSTRINGIPROC_ALT)glaltGetProcAddressVersion("glGetStringi",4,3); }
#endif
	return fn(name1,index1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_GetSubroutineIndex
#define GL_ALT_FUNDEF_GetSubroutineIndex
typedef GLuint (*PFNGLGETSUBROUTINEINDEXPROC_ALT)(GLuint,GLenum,const GLchar *);
static inline GLuint glGetSubroutineIndex(GLuint program1,GLenum shadertype1,const GLchar * name1)
{
#ifdef __cplusplus
	static PFNGLGETSUBROUTINEINDEXPROC_ALT fn=(PFNGLGETSUBROUTINEINDEXPROC_ALT)glaltGetProcAddressVersion("glGetSubroutineIndex",4,3);
#else
	static PFNGLGETSUBROUTINEINDEXPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETSUBROUTINEINDEXPROC_ALT)glaltGetProcAddressVersion("glGetSubroutineIndex",4,3); }
#endif
	return fn(program1,shadertype1,name1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_GetSubroutineUniformLocation
#define GL_ALT_FUNDEF_GetSubroutineUniformLocation
typedef GLint (*PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC_ALT)(GLuint,GLenum,const GLchar *);
static inline GLint glGetSubroutineUniformLocation(GLuint program1,GLenum shadertype1,const GLchar * name1)
{
#ifdef __cplusplus
	static PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC_ALT fn=(PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC_ALT)glaltGetProcAddressVersion("glGetSubroutineUniformLocation",4,3);
#else
	static PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC_ALT)glaltGetProcAddressVersion("glGetSubroutineUniformLocation",4,3); }
#endif
	return fn(program1,shadertype1,name1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_GetSynciv
#define GL_ALT_FUNDEF_GetSynciv
typedef void (*PFNGLGETSYNCIVPROC_ALT)(GLsync,GLenum,GLsizei,GLsizei *,GLint *);
static inline void glGetSynciv(GLsync sync1,GLenum pname1,GLsizei bufSize1,GLsizei * length1,GLint * values1)
{
#ifdef __cplusplus
	static PFNGLGETSYNCIVPROC_ALT fn=(PFNGLGETSYNCIVPROC_ALT)glaltGetProcAddressVersion("glGetSynciv",4,3);
#else
	static PFNGLGETSYNCIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETSYNCIVPROC_ALT)glaltGetProcAddressVersion("glGetSynciv",4,3); }
#endif
	 fn(sync1,pname1,bufSize1,length1,values1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetTexParameterIiv
#define GL_ALT_FUNDEF_GetTexParameterIiv
typedef void (*PFNGLGETTEXPARAMETERIIVPROC_ALT)(GLenum,GLenum,GLint *);
static inline void glGetTexParameterIiv(GLenum target1,GLenum pname1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETTEXPARAMETERIIVPROC_ALT fn=(PFNGLGETTEXPARAMETERIIVPROC_ALT)glaltGetProcAddressVersion("glGetTexParameterIiv",4,3);
#else
	static PFNGLGETTEXPARAMETERIIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETTEXPARAMETERIIVPROC_ALT)glaltGetProcAddressVersion("glGetTexParameterIiv",4,3); }
#endif
	 fn(target1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetTexParameterIuiv
#define GL_ALT_FUNDEF_GetTexParameterIuiv
typedef void (*PFNGLGETTEXPARAMETERIUIVPROC_ALT)(GLenum,GLenum,GLuint *);
static inline void glGetTexParameterIuiv(GLenum target1,GLenum pname1,GLuint * params1)
{
#ifdef __cplusplus
	static PFNGLGETTEXPARAMETERIUIVPROC_ALT fn=(PFNGLGETTEXPARAMETERIUIVPROC_ALT)glaltGetProcAddressVersion("glGetTexParameterIuiv",4,3);
#else
	static PFNGLGETTEXPARAMETERIUIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETTEXPARAMETERIUIVPROC_ALT)glaltGetProcAddressVersion("glGetTexParameterIuiv",4,3); }
#endif
	 fn(target1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetTransformFeedbackVarying
#define GL_ALT_FUNDEF_GetTransformFeedbackVarying
typedef void (*PFNGLGETTRANSFORMFEEDBACKVARYINGPROC_ALT)(GLuint,GLuint,GLsizei,GLsizei *,GLsizei *,GLenum *,GLchar *);
static inline void glGetTransformFeedbackVarying(GLuint program1,GLuint index1,GLsizei bufSize1,GLsizei * length1,GLsizei * size1,GLenum * type1,GLchar * name1)
{
#ifdef __cplusplus
	static PFNGLGETTRANSFORMFEEDBACKVARYINGPROC_ALT fn=(PFNGLGETTRANSFORMFEEDBACKVARYINGPROC_ALT)glaltGetProcAddressVersion("glGetTransformFeedbackVarying",4,3);
#else
	static PFNGLGETTRANSFORMFEEDBACKVARYINGPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETTRANSFORMFEEDBACKVARYINGPROC_ALT)glaltGetProcAddressVersion("glGetTransformFeedbackVarying",4,3); }
#endif
	 fn(program1,index1,bufSize1,length1,size1,type1,name1);
}
#endif
#endif

#ifndef GL_VERSION_3_1
#ifndef	GL_ALT_FUNDEF_GetUniformBlockIndex
#define GL_ALT_FUNDEF_GetUniformBlockIndex
typedef GLuint (*PFNGLGETUNIFORMBLOCKINDEXPROC_ALT)(GLuint,const GLchar *);
static inline GLuint glGetUniformBlockIndex(GLuint program1,const GLchar * uniformBlockName1)
{
#ifdef __cplusplus
	static PFNGLGETUNIFORMBLOCKINDEXPROC_ALT fn=(PFNGLGETUNIFORMBLOCKINDEXPROC_ALT)glaltGetProcAddressVersion("glGetUniformBlockIndex",4,3);
#else
	static PFNGLGETUNIFORMBLOCKINDEXPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETUNIFORMBLOCKINDEXPROC_ALT)glaltGetProcAddressVersion("glGetUniformBlockIndex",4,3); }
#endif
	return fn(program1,uniformBlockName1);
}
#endif
#endif

#ifndef GL_VERSION_3_1
#ifndef	GL_ALT_FUNDEF_GetUniformIndices
#define GL_ALT_FUNDEF_GetUniformIndices
typedef void (*PFNGLGETUNIFORMINDICESPROC_ALT)(GLuint,GLsizei,const GLchar *const*,GLuint *);
static inline void glGetUniformIndices(GLuint program1,GLsizei uniformCount1,const GLchar *const* uniformNames1,GLuint * uniformIndices1)
{
#ifdef __cplusplus
	static PFNGLGETUNIFORMINDICESPROC_ALT fn=(PFNGLGETUNIFORMINDICESPROC_ALT)glaltGetProcAddressVersion("glGetUniformIndices",4,3);
#else
	static PFNGLGETUNIFORMINDICESPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETUNIFORMINDICESPROC_ALT)glaltGetProcAddressVersion("glGetUniformIndices",4,3); }
#endif
	 fn(program1,uniformCount1,uniformNames1,uniformIndices1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetUniformLocation
#define GL_ALT_FUNDEF_GetUniformLocation
typedef GLint (*PFNGLGETUNIFORMLOCATIONPROC_ALT)(GLuint,const GLchar *);
static inline GLint glGetUniformLocation(GLuint program1,const GLchar * name1)
{
#ifdef __cplusplus
	static PFNGLGETUNIFORMLOCATIONPROC_ALT fn=(PFNGLGETUNIFORMLOCATIONPROC_ALT)glaltGetProcAddressVersion("glGetUniformLocation",4,3);
#else
	static PFNGLGETUNIFORMLOCATIONPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETUNIFORMLOCATIONPROC_ALT)glaltGetProcAddressVersion("glGetUniformLocation",4,3); }
#endif
	return fn(program1,name1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_GetUniformSubroutineuiv
#define GL_ALT_FUNDEF_GetUniformSubroutineuiv
typedef void (*PFNGLGETUNIFORMSUBROUTINEUIVPROC_ALT)(GLenum,GLint,GLuint *);
static inline void glGetUniformSubroutineuiv(GLenum shadertype1,GLint location1,GLuint * params1)
{
#ifdef __cplusplus
	static PFNGLGETUNIFORMSUBROUTINEUIVPROC_ALT fn=(PFNGLGETUNIFORMSUBROUTINEUIVPROC_ALT)glaltGetProcAddressVersion("glGetUniformSubroutineuiv",4,3);
#else
	static PFNGLGETUNIFORMSUBROUTINEUIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETUNIFORMSUBROUTINEUIVPROC_ALT)glaltGetProcAddressVersion("glGetUniformSubroutineuiv",4,3); }
#endif
	 fn(shadertype1,location1,params1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_GetUniformdv
#define GL_ALT_FUNDEF_GetUniformdv
typedef void (*PFNGLGETUNIFORMDVPROC_ALT)(GLuint,GLint,GLdouble *);
static inline void glGetUniformdv(GLuint program1,GLint location1,GLdouble * params1)
{
#ifdef __cplusplus
	static PFNGLGETUNIFORMDVPROC_ALT fn=(PFNGLGETUNIFORMDVPROC_ALT)glaltGetProcAddressVersion("glGetUniformdv",4,3);
#else
	static PFNGLGETUNIFORMDVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETUNIFORMDVPROC_ALT)glaltGetProcAddressVersion("glGetUniformdv",4,3); }
#endif
	 fn(program1,location1,params1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetUniformfv
#define GL_ALT_FUNDEF_GetUniformfv
typedef void (*PFNGLGETUNIFORMFVPROC_ALT)(GLuint,GLint,GLfloat *);
static inline void glGetUniformfv(GLuint program1,GLint location1,GLfloat * params1)
{
#ifdef __cplusplus
	static PFNGLGETUNIFORMFVPROC_ALT fn=(PFNGLGETUNIFORMFVPROC_ALT)glaltGetProcAddressVersion("glGetUniformfv",4,3);
#else
	static PFNGLGETUNIFORMFVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETUNIFORMFVPROC_ALT)glaltGetProcAddressVersion("glGetUniformfv",4,3); }
#endif
	 fn(program1,location1,params1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetUniformiv
#define GL_ALT_FUNDEF_GetUniformiv
typedef void (*PFNGLGETUNIFORMIVPROC_ALT)(GLuint,GLint,GLint *);
static inline void glGetUniformiv(GLuint program1,GLint location1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETUNIFORMIVPROC_ALT fn=(PFNGLGETUNIFORMIVPROC_ALT)glaltGetProcAddressVersion("glGetUniformiv",4,3);
#else
	static PFNGLGETUNIFORMIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETUNIFORMIVPROC_ALT)glaltGetProcAddressVersion("glGetUniformiv",4,3); }
#endif
	 fn(program1,location1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetUniformuiv
#define GL_ALT_FUNDEF_GetUniformuiv
typedef void (*PFNGLGETUNIFORMUIVPROC_ALT)(GLuint,GLint,GLuint *);
static inline void glGetUniformuiv(GLuint program1,GLint location1,GLuint * params1)
{
#ifdef __cplusplus
	static PFNGLGETUNIFORMUIVPROC_ALT fn=(PFNGLGETUNIFORMUIVPROC_ALT)glaltGetProcAddressVersion("glGetUniformuiv",4,3);
#else
	static PFNGLGETUNIFORMUIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETUNIFORMUIVPROC_ALT)glaltGetProcAddressVersion("glGetUniformuiv",4,3); }
#endif
	 fn(program1,location1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetVertexAttribIiv
#define GL_ALT_FUNDEF_GetVertexAttribIiv
typedef void (*PFNGLGETVERTEXATTRIBIIVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetVertexAttribIiv(GLuint index1,GLenum pname1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETVERTEXATTRIBIIVPROC_ALT fn=(PFNGLGETVERTEXATTRIBIIVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribIiv",4,3);
#else
	static PFNGLGETVERTEXATTRIBIIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETVERTEXATTRIBIIVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribIiv",4,3); }
#endif
	 fn(index1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_GetVertexAttribIuiv
#define GL_ALT_FUNDEF_GetVertexAttribIuiv
typedef void (*PFNGLGETVERTEXATTRIBIUIVPROC_ALT)(GLuint,GLenum,GLuint *);
static inline void glGetVertexAttribIuiv(GLuint index1,GLenum pname1,GLuint * params1)
{
#ifdef __cplusplus
	static PFNGLGETVERTEXATTRIBIUIVPROC_ALT fn=(PFNGLGETVERTEXATTRIBIUIVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribIuiv",4,3);
#else
	static PFNGLGETVERTEXATTRIBIUIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETVERTEXATTRIBIUIVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribIuiv",4,3); }
#endif
	 fn(index1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_GetVertexAttribLdv
#define GL_ALT_FUNDEF_GetVertexAttribLdv
typedef void (*PFNGLGETVERTEXATTRIBLDVPROC_ALT)(GLuint,GLenum,GLdouble *);
static inline void glGetVertexAttribLdv(GLuint index1,GLenum pname1,GLdouble * params1)
{
#ifdef __cplusplus
	static PFNGLGETVERTEXATTRIBLDVPROC_ALT fn=(PFNGLGETVERTEXATTRIBLDVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribLdv",4,3);
#else
	static PFNGLGETVERTEXATTRIBLDVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETVERTEXATTRIBLDVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribLdv",4,3); }
#endif
	 fn(index1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetVertexAttribPointerv
#define GL_ALT_FUNDEF_GetVertexAttribPointerv
typedef void (*PFNGLGETVERTEXATTRIBPOINTERVPROC_ALT)(GLuint,GLenum,void **);
static inline void glGetVertexAttribPointerv(GLuint index1,GLenum pname1,void ** pointer1)
{
#ifdef __cplusplus
	static PFNGLGETVERTEXATTRIBPOINTERVPROC_ALT fn=(PFNGLGETVERTEXATTRIBPOINTERVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribPointerv",4,3);
#else
	static PFNGLGETVERTEXATTRIBPOINTERVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETVERTEXATTRIBPOINTERVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribPointerv",4,3); }
#endif
	 fn(index1,pname1,pointer1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetVertexAttribdv
#define GL_ALT_FUNDEF_GetVertexAttribdv
typedef void (*PFNGLGETVERTEXATTRIBDVPROC_ALT)(GLuint,GLenum,GLdouble *);
static inline void glGetVertexAttribdv(GLuint index1,GLenum pname1,GLdouble * params1)
{
#ifdef __cplusplus
	static PFNGLGETVERTEXATTRIBDVPROC_ALT fn=(PFNGLGETVERTEXATTRIBDVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribdv",4,3);
#else
	static PFNGLGETVERTEXATTRIBDVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETVERTEXATTRIBDVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribdv",4,3); }
#endif
	 fn(index1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetVertexAttribfv
#define GL_ALT_FUNDEF_GetVertexAttribfv
typedef void (*PFNGLGETVERTEXATTRIBFVPROC_ALT)(GLuint,GLenum,GLfloat *);
static inline void glGetVertexAttribfv(GLuint index1,GLenum pname1,GLfloat * params1)
{
#ifdef __cplusplus
	static PFNGLGETVERTEXATTRIBFVPROC_ALT fn=(PFNGLGETVERTEXATTRIBFVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribfv",4,3);
#else
	static PFNGLGETVERTEXATTRIBFVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETVERTEXATTRIBFVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribfv",4,3); }
#endif
	 fn(index1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_GetVertexAttribiv
#define GL_ALT_FUNDEF_GetVertexAttribiv
typedef void (*PFNGLGETVERTEXATTRIBIVPROC_ALT)(GLuint,GLenum,GLint *);
static inline void glGetVertexAttribiv(GLuint index1,GLenum pname1,GLint * params1)
{
#ifdef __cplusplus
	static PFNGLGETVERTEXATTRIBIVPROC_ALT fn=(PFNGLGETVERTEXATTRIBIVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribiv",4,3);
#else
	static PFNGLGETVERTEXATTRIBIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETVERTEXATTRIBIVPROC_ALT)glaltGetProcAddressVersion("glGetVertexAttribiv",4,3); }
#endif
	 fn(index1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_InvalidateBufferData
#define GL_ALT_FUNDEF_InvalidateBufferData
typedef void (*PFNGLINVALIDATEBUFFERDATAPROC_ALT)(GLuint);
static inline void glInvalidateBufferData(GLuint buffer1)
{
#ifdef __cplusplus
	static PFNGLINVALIDATEBUFFERDATAPROC_ALT fn=(PFNGLINVALIDATEBUFFERDATAPROC_ALT)glaltGetProcAddressVersion("glInvalidateBufferData",4,3);
#else
	static PFNGLINVALIDATEBUFFERDATAPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLINVALIDATEBUFFERDATAPROC_ALT)glaltGetProcAddressVersion("glInvalidateBufferData",4,3); }
#endif
	 fn(buffer1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_InvalidateBufferSubData
#define GL_ALT_FUNDEF_InvalidateBufferSubData
typedef void (*PFNGLINVALIDATEBUFFERSUBDATAPROC_ALT)(GLuint,GLintptr,GLsizeiptr);
static inline void glInvalidateBufferSubData(GLuint buffer1,GLintptr offset1,GLsizeiptr length1)
{
#ifdef __cplusplus
	static PFNGLINVALIDATEBUFFERSUBDATAPROC_ALT fn=(PFNGLINVALIDATEBUFFERSUBDATAPROC_ALT)glaltGetProcAddressVersion("glInvalidateBufferSubData",4,3);
#else
	static PFNGLINVALIDATEBUFFERSUBDATAPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLINVALIDATEBUFFERSUBDATAPROC_ALT)glaltGetProcAddressVersion("glInvalidateBufferSubData",4,3); }
#endif
	 fn(buffer1,offset1,length1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_InvalidateFramebuffer
#define GL_ALT_FUNDEF_InvalidateFramebuffer
typedef void (*PFNGLINVALIDATEFRAMEBUFFERPROC_ALT)(GLenum,GLsizei,const GLenum *);
static inline void glInvalidateFramebuffer(GLenum target1,GLsizei numAttachments1,const GLenum * attachments1)
{
#ifdef __cplusplus
	static PFNGLINVALIDATEFRAMEBUFFERPROC_ALT fn=(PFNGLINVALIDATEFRAMEBUFFERPROC_ALT)glaltGetProcAddressVersion("glInvalidateFramebuffer",4,3);
#else
	static PFNGLINVALIDATEFRAMEBUFFERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLINVALIDATEFRAMEBUFFERPROC_ALT)glaltGetProcAddressVersion("glInvalidateFramebuffer",4,3); }
#endif
	 fn(target1,numAttachments1,attachments1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_InvalidateSubFramebuffer
#define GL_ALT_FUNDEF_InvalidateSubFramebuffer
typedef void (*PFNGLINVALIDATESUBFRAMEBUFFERPROC_ALT)(GLenum,GLsizei,const GLenum *,GLint,GLint,GLsizei,GLsizei);
static inline void glInvalidateSubFramebuffer(GLenum target1,GLsizei numAttachments1,const GLenum * attachments1,GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
#ifdef __cplusplus
	static PFNGLINVALIDATESUBFRAMEBUFFERPROC_ALT fn=(PFNGLINVALIDATESUBFRAMEBUFFERPROC_ALT)glaltGetProcAddressVersion("glInvalidateSubFramebuffer",4,3);
#else
	static PFNGLINVALIDATESUBFRAMEBUFFERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLINVALIDATESUBFRAMEBUFFERPROC_ALT)glaltGetProcAddressVersion("glInvalidateSubFramebuffer",4,3); }
#endif
	 fn(target1,numAttachments1,attachments1,x1,y1,width1,height1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_InvalidateTexImage
#define GL_ALT_FUNDEF_InvalidateTexImage
typedef void (*PFNGLINVALIDATETEXIMAGEPROC_ALT)(GLuint,GLint);
static inline void glInvalidateTexImage(GLuint texture1,GLint level1)
{
#ifdef __cplusplus
	static PFNGLINVALIDATETEXIMAGEPROC_ALT fn=(PFNGLINVALIDATETEXIMAGEPROC_ALT)glaltGetProcAddressVersion("glInvalidateTexImage",4,3);
#else
	static PFNGLINVALIDATETEXIMAGEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLINVALIDATETEXIMAGEPROC_ALT)glaltGetProcAddressVersion("glInvalidateTexImage",4,3); }
#endif
	 fn(texture1,level1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_InvalidateTexSubImage
#define GL_ALT_FUNDEF_InvalidateTexSubImage
typedef void (*PFNGLINVALIDATETEXSUBIMAGEPROC_ALT)(GLuint,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei);
static inline void glInvalidateTexSubImage(GLuint texture1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLsizei width1,GLsizei height1,GLsizei depth1)
{
#ifdef __cplusplus
	static PFNGLINVALIDATETEXSUBIMAGEPROC_ALT fn=(PFNGLINVALIDATETEXSUBIMAGEPROC_ALT)glaltGetProcAddressVersion("glInvalidateTexSubImage",4,3);
#else
	static PFNGLINVALIDATETEXSUBIMAGEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLINVALIDATETEXSUBIMAGEPROC_ALT)glaltGetProcAddressVersion("glInvalidateTexSubImage",4,3); }
#endif
	 fn(texture1,level1,xoffset1,yoffset1,zoffset1,width1,height1,depth1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_IsBuffer
#define GL_ALT_FUNDEF_IsBuffer
typedef GLboolean (*PFNGLISBUFFERPROC_ALT)(GLuint);
static inline GLboolean glIsBuffer(GLuint buffer1)
{
#ifdef __cplusplus
	static PFNGLISBUFFERPROC_ALT fn=(PFNGLISBUFFERPROC_ALT)glaltGetProcAddressVersion("glIsBuffer",4,3);
#else
	static PFNGLISBUFFERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLISBUFFERPROC_ALT)glaltGetProcAddressVersion("glIsBuffer",4,3); }
#endif
	return fn(buffer1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_IsEnabledi
#define GL_ALT_FUNDEF_IsEnabledi
typedef GLboolean (*PFNGLISENABLEDIPROC_ALT)(GLenum,GLuint);
static inline GLboolean glIsEnabledi(GLenum target1,GLuint index1)
{
#ifdef __cplusplus
	static PFNGLISENABLEDIPROC_ALT fn=(PFNGLISENABLEDIPROC_ALT)glaltGetProcAddressVersion("glIsEnabledi",4,3);
#else
	static PFNGLISENABLEDIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLISENABLEDIPROC_ALT)glaltGetProcAddressVersion("glIsEnabledi",4,3); }
#endif
	return fn(target1,index1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_IsFramebuffer
#define GL_ALT_FUNDEF_IsFramebuffer
typedef GLboolean (*PFNGLISFRAMEBUFFERPROC_ALT)(GLuint);
static inline GLboolean glIsFramebuffer(GLuint framebuffer1)
{
#ifdef __cplusplus
	static PFNGLISFRAMEBUFFERPROC_ALT fn=(PFNGLISFRAMEBUFFERPROC_ALT)glaltGetProcAddressVersion("glIsFramebuffer",4,3);
#else
	static PFNGLISFRAMEBUFFERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLISFRAMEBUFFERPROC_ALT)glaltGetProcAddressVersion("glIsFramebuffer",4,3); }
#endif
	return fn(framebuffer1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_IsProgram
#define GL_ALT_FUNDEF_IsProgram
typedef GLboolean (*PFNGLISPROGRAMPROC_ALT)(GLuint);
static inline GLboolean glIsProgram(GLuint program1)
{
#ifdef __cplusplus
	static PFNGLISPROGRAMPROC_ALT fn=(PFNGLISPROGRAMPROC_ALT)glaltGetProcAddressVersion("glIsProgram",4,3);
#else
	static PFNGLISPROGRAMPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLISPROGRAMPROC_ALT)glaltGetProcAddressVersion("glIsProgram",4,3); }
#endif
	return fn(program1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_IsProgramPipeline
#define GL_ALT_FUNDEF_IsProgramPipeline
typedef GLboolean (*PFNGLISPROGRAMPIPELINEPROC_ALT)(GLuint);
static inline GLboolean glIsProgramPipeline(GLuint pipeline1)
{
#ifdef __cplusplus
	static PFNGLISPROGRAMPIPELINEPROC_ALT fn=(PFNGLISPROGRAMPIPELINEPROC_ALT)glaltGetProcAddressVersion("glIsProgramPipeline",4,3);
#else
	static PFNGLISPROGRAMPIPELINEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLISPROGRAMPIPELINEPROC_ALT)glaltGetProcAddressVersion("glIsProgramPipeline",4,3); }
#endif
	return fn(pipeline1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_IsQuery
#define GL_ALT_FUNDEF_IsQuery
typedef GLboolean (*PFNGLISQUERYPROC_ALT)(GLuint);
static inline GLboolean glIsQuery(GLuint id1)
{
#ifdef __cplusplus
	static PFNGLISQUERYPROC_ALT fn=(PFNGLISQUERYPROC_ALT)glaltGetProcAddressVersion("glIsQuery",4,3);
#else
	static PFNGLISQUERYPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLISQUERYPROC_ALT)glaltGetProcAddressVersion("glIsQuery",4,3); }
#endif
	return fn(id1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_IsRenderbuffer
#define GL_ALT_FUNDEF_IsRenderbuffer
typedef GLboolean (*PFNGLISRENDERBUFFERPROC_ALT)(GLuint);
static inline GLboolean glIsRenderbuffer(GLuint renderbuffer1)
{
#ifdef __cplusplus
	static PFNGLISRENDERBUFFERPROC_ALT fn=(PFNGLISRENDERBUFFERPROC_ALT)glaltGetProcAddressVersion("glIsRenderbuffer",4,3);
#else
	static PFNGLISRENDERBUFFERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLISRENDERBUFFERPROC_ALT)glaltGetProcAddressVersion("glIsRenderbuffer",4,3); }
#endif
	return fn(renderbuffer1);
}
#endif
#endif

#ifndef GL_VERSION_3_3
#ifndef	GL_ALT_FUNDEF_IsSampler
#define GL_ALT_FUNDEF_IsSampler
typedef GLboolean (*PFNGLISSAMPLERPROC_ALT)(GLuint);
static inline GLboolean glIsSampler(GLuint sampler1)
{
#ifdef __cplusplus
	static PFNGLISSAMPLERPROC_ALT fn=(PFNGLISSAMPLERPROC_ALT)glaltGetProcAddressVersion("glIsSampler",4,3);
#else
	static PFNGLISSAMPLERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLISSAMPLERPROC_ALT)glaltGetProcAddressVersion("glIsSampler",4,3); }
#endif
	return fn(sampler1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_IsShader
#define GL_ALT_FUNDEF_IsShader
typedef GLboolean (*PFNGLISSHADERPROC_ALT)(GLuint);
static inline GLboolean glIsShader(GLuint shader1)
{
#ifdef __cplusplus
	static PFNGLISSHADERPROC_ALT fn=(PFNGLISSHADERPROC_ALT)glaltGetProcAddressVersion("glIsShader",4,3);
#else
	static PFNGLISSHADERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLISSHADERPROC_ALT)glaltGetProcAddressVersion("glIsShader",4,3); }
#endif
	return fn(shader1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_IsSync
#define GL_ALT_FUNDEF_IsSync
typedef GLboolean (*PFNGLISSYNCPROC_ALT)(GLsync);
static inline GLboolean glIsSync(GLsync sync1)
{
#ifdef __cplusplus
	static PFNGLISSYNCPROC_ALT fn=(PFNGLISSYNCPROC_ALT)glaltGetProcAddressVersion("glIsSync",4,3);
#else
	static PFNGLISSYNCPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLISSYNCPROC_ALT)glaltGetProcAddressVersion("glIsSync",4,3); }
#endif
	return fn(sync1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_IsTransformFeedback
#define GL_ALT_FUNDEF_IsTransformFeedback
typedef GLboolean (*PFNGLISTRANSFORMFEEDBACKPROC_ALT)(GLuint);
static inline GLboolean glIsTransformFeedback(GLuint id1)
{
#ifdef __cplusplus
	static PFNGLISTRANSFORMFEEDBACKPROC_ALT fn=(PFNGLISTRANSFORMFEEDBACKPROC_ALT)glaltGetProcAddressVersion("glIsTransformFeedback",4,3);
#else
	static PFNGLISTRANSFORMFEEDBACKPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLISTRANSFORMFEEDBACKPROC_ALT)glaltGetProcAddressVersion("glIsTransformFeedback",4,3); }
#endif
	return fn(id1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_IsVertexArray
#define GL_ALT_FUNDEF_IsVertexArray
typedef GLboolean (*PFNGLISVERTEXARRAYPROC_ALT)(GLuint);
static inline GLboolean glIsVertexArray(GLuint array1)
{
#ifdef __cplusplus
	static PFNGLISVERTEXARRAYPROC_ALT fn=(PFNGLISVERTEXARRAYPROC_ALT)glaltGetProcAddressVersion("glIsVertexArray",4,3);
#else
	static PFNGLISVERTEXARRAYPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLISVERTEXARRAYPROC_ALT)glaltGetProcAddressVersion("glIsVertexArray",4,3); }
#endif
	return fn(array1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_LinkProgram
#define GL_ALT_FUNDEF_LinkProgram
typedef void (*PFNGLLINKPROGRAMPROC_ALT)(GLuint);
static inline void glLinkProgram(GLuint program1)
{
#ifdef __cplusplus
	static PFNGLLINKPROGRAMPROC_ALT fn=(PFNGLLINKPROGRAMPROC_ALT)glaltGetProcAddressVersion("glLinkProgram",4,3);
#else
	static PFNGLLINKPROGRAMPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLLINKPROGRAMPROC_ALT)glaltGetProcAddressVersion("glLinkProgram",4,3); }
#endif
	 fn(program1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_MapBuffer
#define GL_ALT_FUNDEF_MapBuffer
typedef void * (*PFNGLMAPBUFFERPROC_ALT)(GLenum,GLenum);
static inline void * glMapBuffer(GLenum target1,GLenum access1)
{
#ifdef __cplusplus
	static PFNGLMAPBUFFERPROC_ALT fn=(PFNGLMAPBUFFERPROC_ALT)glaltGetProcAddressVersion("glMapBuffer",4,3);
#else
	static PFNGLMAPBUFFERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMAPBUFFERPROC_ALT)glaltGetProcAddressVersion("glMapBuffer",4,3); }
#endif
	return fn(target1,access1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_MapBufferRange
#define GL_ALT_FUNDEF_MapBufferRange
typedef void * (*PFNGLMAPBUFFERRANGEPROC_ALT)(GLenum,GLintptr,GLsizeiptr,GLbitfield);
static inline void * glMapBufferRange(GLenum target1,GLintptr offset1,GLsizeiptr length1,GLbitfield access1)
{
#ifdef __cplusplus
	static PFNGLMAPBUFFERRANGEPROC_ALT fn=(PFNGLMAPBUFFERRANGEPROC_ALT)glaltGetProcAddressVersion("glMapBufferRange",4,3);
#else
	static PFNGLMAPBUFFERRANGEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMAPBUFFERRANGEPROC_ALT)glaltGetProcAddressVersion("glMapBufferRange",4,3); }
#endif
	return fn(target1,offset1,length1,access1);
}
#endif
#endif

#ifndef GL_VERSION_4_2
#ifndef	GL_ALT_FUNDEF_MemoryBarrier
#define GL_ALT_FUNDEF_MemoryBarrier
typedef void (*PFNGLMEMORYBARRIERPROC_ALT)(GLbitfield);
static inline void glMemoryBarrier(GLbitfield barriers1)
{
#ifdef __cplusplus
	static PFNGLMEMORYBARRIERPROC_ALT fn=(PFNGLMEMORYBARRIERPROC_ALT)glaltGetProcAddressVersion("glMemoryBarrier",4,3);
#else
	static PFNGLMEMORYBARRIERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMEMORYBARRIERPROC_ALT)glaltGetProcAddressVersion("glMemoryBarrier",4,3); }
#endif
	 fn(barriers1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_MinSampleShading
#define GL_ALT_FUNDEF_MinSampleShading
typedef void (*PFNGLMINSAMPLESHADINGPROC_ALT)(GLfloat);
static inline void glMinSampleShading(GLfloat value1)
{
#ifdef __cplusplus
	static PFNGLMINSAMPLESHADINGPROC_ALT fn=(PFNGLMINSAMPLESHADINGPROC_ALT)glaltGetProcAddressVersion("glMinSampleShading",4,3);
#else
	static PFNGLMINSAMPLESHADINGPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMINSAMPLESHADINGPROC_ALT)glaltGetProcAddressVersion("glMinSampleShading",4,3); }
#endif
	 fn(value1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_MultiDrawArrays
#define GL_ALT_FUNDEF_MultiDrawArrays
typedef void (*PFNGLMULTIDRAWARRAYSPROC_ALT)(GLenum,const GLint *,const GLsizei *,GLsizei);
static inline void glMultiDrawArrays(GLenum mode1,const GLint * first1,const GLsizei * count1,GLsizei drawcount1)
{
#ifdef __cplusplus
	static PFNGLMULTIDRAWARRAYSPROC_ALT fn=(PFNGLMULTIDRAWARRAYSPROC_ALT)glaltGetProcAddressVersion("glMultiDrawArrays",4,3);
#else
	static PFNGLMULTIDRAWARRAYSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTIDRAWARRAYSPROC_ALT)glaltGetProcAddressVersion("glMultiDrawArrays",4,3); }
#endif
	 fn(mode1,first1,count1,drawcount1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_MultiDrawArraysIndirect
#define GL_ALT_FUNDEF_MultiDrawArraysIndirect
typedef void (*PFNGLMULTIDRAWARRAYSINDIRECTPROC_ALT)(GLenum,const void *,GLsizei,GLsizei);
static inline void glMultiDrawArraysIndirect(GLenum mode1,const void * indirect1,GLsizei drawcount1,GLsizei stride1)
{
#ifdef __cplusplus
	static PFNGLMULTIDRAWARRAYSINDIRECTPROC_ALT fn=(PFNGLMULTIDRAWARRAYSINDIRECTPROC_ALT)glaltGetProcAddressVersion("glMultiDrawArraysIndirect",4,3);
#else
	static PFNGLMULTIDRAWARRAYSINDIRECTPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTIDRAWARRAYSINDIRECTPROC_ALT)glaltGetProcAddressVersion("glMultiDrawArraysIndirect",4,3); }
#endif
	 fn(mode1,indirect1,drawcount1,stride1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_MultiDrawElements
#define GL_ALT_FUNDEF_MultiDrawElements
typedef void (*PFNGLMULTIDRAWELEMENTSPROC_ALT)(GLenum,const GLsizei *,GLenum,const void *const*,GLsizei);
static inline void glMultiDrawElements(GLenum mode1,const GLsizei * count1,GLenum type1,const void *const* indices1,GLsizei drawcount1)
{
#ifdef __cplusplus
	static PFNGLMULTIDRAWELEMENTSPROC_ALT fn=(PFNGLMULTIDRAWELEMENTSPROC_ALT)glaltGetProcAddressVersion("glMultiDrawElements",4,3);
#else
	static PFNGLMULTIDRAWELEMENTSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTIDRAWELEMENTSPROC_ALT)glaltGetProcAddressVersion("glMultiDrawElements",4,3); }
#endif
	 fn(mode1,count1,type1,indices1,drawcount1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_MultiDrawElementsBaseVertex
#define GL_ALT_FUNDEF_MultiDrawElementsBaseVertex
typedef void (*PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC_ALT)(GLenum,const GLsizei *,GLenum,const void *const*,GLsizei,const GLint *);
static inline void glMultiDrawElementsBaseVertex(GLenum mode1,const GLsizei * count1,GLenum type1,const void *const* indices1,GLsizei drawcount1,const GLint * basevertex1)
{
#ifdef __cplusplus
	static PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC_ALT fn=(PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC_ALT)glaltGetProcAddressVersion("glMultiDrawElementsBaseVertex",4,3);
#else
	static PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC_ALT)glaltGetProcAddressVersion("glMultiDrawElementsBaseVertex",4,3); }
#endif
	 fn(mode1,count1,type1,indices1,drawcount1,basevertex1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_MultiDrawElementsIndirect
#define GL_ALT_FUNDEF_MultiDrawElementsIndirect
typedef void (*PFNGLMULTIDRAWELEMENTSINDIRECTPROC_ALT)(GLenum,GLenum,const void *,GLsizei,GLsizei);
static inline void glMultiDrawElementsIndirect(GLenum mode1,GLenum type1,const void * indirect1,GLsizei drawcount1,GLsizei stride1)
{
#ifdef __cplusplus
	static PFNGLMULTIDRAWELEMENTSINDIRECTPROC_ALT fn=(PFNGLMULTIDRAWELEMENTSINDIRECTPROC_ALT)glaltGetProcAddressVersion("glMultiDrawElementsIndirect",4,3);
#else
	static PFNGLMULTIDRAWELEMENTSINDIRECTPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTIDRAWELEMENTSINDIRECTPROC_ALT)glaltGetProcAddressVersion("glMultiDrawElementsIndirect",4,3); }
#endif
	 fn(mode1,type1,indirect1,drawcount1,stride1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_ObjectLabel
#define GL_ALT_FUNDEF_ObjectLabel
typedef void (*PFNGLOBJECTLABELPROC_ALT)(GLenum,GLuint,GLsizei,const GLchar *);
static inline void glObjectLabel(GLenum identifier1,GLuint name1,GLsizei length1,const GLchar * label1)
{
#ifdef __cplusplus
	static PFNGLOBJECTLABELPROC_ALT fn=(PFNGLOBJECTLABELPROC_ALT)glaltGetProcAddressVersion("glObjectLabel",4,3);
#else
	static PFNGLOBJECTLABELPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLOBJECTLABELPROC_ALT)glaltGetProcAddressVersion("glObjectLabel",4,3); }
#endif
	 fn(identifier1,name1,length1,label1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_ObjectPtrLabel
#define GL_ALT_FUNDEF_ObjectPtrLabel
typedef void (*PFNGLOBJECTPTRLABELPROC_ALT)(const void *,GLsizei,const GLchar *);
static inline void glObjectPtrLabel(const void * ptr1,GLsizei length1,const GLchar * label1)
{
#ifdef __cplusplus
	static PFNGLOBJECTPTRLABELPROC_ALT fn=(PFNGLOBJECTPTRLABELPROC_ALT)glaltGetProcAddressVersion("glObjectPtrLabel",4,3);
#else
	static PFNGLOBJECTPTRLABELPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLOBJECTPTRLABELPROC_ALT)glaltGetProcAddressVersion("glObjectPtrLabel",4,3); }
#endif
	 fn(ptr1,length1,label1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_PatchParameterfv
#define GL_ALT_FUNDEF_PatchParameterfv
typedef void (*PFNGLPATCHPARAMETERFVPROC_ALT)(GLenum,const GLfloat *);
static inline void glPatchParameterfv(GLenum pname1,const GLfloat * values1)
{
#ifdef __cplusplus
	static PFNGLPATCHPARAMETERFVPROC_ALT fn=(PFNGLPATCHPARAMETERFVPROC_ALT)glaltGetProcAddressVersion("glPatchParameterfv",4,3);
#else
	static PFNGLPATCHPARAMETERFVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPATCHPARAMETERFVPROC_ALT)glaltGetProcAddressVersion("glPatchParameterfv",4,3); }
#endif
	 fn(pname1,values1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_PatchParameteri
#define GL_ALT_FUNDEF_PatchParameteri
typedef void (*PFNGLPATCHPARAMETERIPROC_ALT)(GLenum,GLint);
static inline void glPatchParameteri(GLenum pname1,GLint value1)
{
#ifdef __cplusplus
	static PFNGLPATCHPARAMETERIPROC_ALT fn=(PFNGLPATCHPARAMETERIPROC_ALT)glaltGetProcAddressVersion("glPatchParameteri",4,3);
#else
	static PFNGLPATCHPARAMETERIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPATCHPARAMETERIPROC_ALT)glaltGetProcAddressVersion("glPatchParameteri",4,3); }
#endif
	 fn(pname1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_PauseTransformFeedback
#define GL_ALT_FUNDEF_PauseTransformFeedback
typedef void (*PFNGLPAUSETRANSFORMFEEDBACKPROC_ALT)();
static inline void glPauseTransformFeedback()
{
#ifdef __cplusplus
	static PFNGLPAUSETRANSFORMFEEDBACKPROC_ALT fn=(PFNGLPAUSETRANSFORMFEEDBACKPROC_ALT)glaltGetProcAddressVersion("glPauseTransformFeedback",4,3);
#else
	static PFNGLPAUSETRANSFORMFEEDBACKPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPAUSETRANSFORMFEEDBACKPROC_ALT)glaltGetProcAddressVersion("glPauseTransformFeedback",4,3); }
#endif
	 fn();
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_PointParameterf
#define GL_ALT_FUNDEF_PointParameterf
typedef void (*PFNGLPOINTPARAMETERFPROC_ALT)(GLenum,GLfloat);
static inline void glPointParameterf(GLenum pname1,GLfloat param1)
{
#ifdef __cplusplus
	static PFNGLPOINTPARAMETERFPROC_ALT fn=(PFNGLPOINTPARAMETERFPROC_ALT)glaltGetProcAddressVersion("glPointParameterf",4,3);
#else
	static PFNGLPOINTPARAMETERFPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPOINTPARAMETERFPROC_ALT)glaltGetProcAddressVersion("glPointParameterf",4,3); }
#endif
	 fn(pname1,param1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_PointParameterfv
#define GL_ALT_FUNDEF_PointParameterfv
typedef void (*PFNGLPOINTPARAMETERFVPROC_ALT)(GLenum,const GLfloat *);
static inline void glPointParameterfv(GLenum pname1,const GLfloat * params1)
{
#ifdef __cplusplus
	static PFNGLPOINTPARAMETERFVPROC_ALT fn=(PFNGLPOINTPARAMETERFVPROC_ALT)glaltGetProcAddressVersion("glPointParameterfv",4,3);
#else
	static PFNGLPOINTPARAMETERFVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPOINTPARAMETERFVPROC_ALT)glaltGetProcAddressVersion("glPointParameterfv",4,3); }
#endif
	 fn(pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_PointParameteri
#define GL_ALT_FUNDEF_PointParameteri
typedef void (*PFNGLPOINTPARAMETERIPROC_ALT)(GLenum,GLint);
static inline void glPointParameteri(GLenum pname1,GLint param1)
{
#ifdef __cplusplus
	static PFNGLPOINTPARAMETERIPROC_ALT fn=(PFNGLPOINTPARAMETERIPROC_ALT)glaltGetProcAddressVersion("glPointParameteri",4,3);
#else
	static PFNGLPOINTPARAMETERIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPOINTPARAMETERIPROC_ALT)glaltGetProcAddressVersion("glPointParameteri",4,3); }
#endif
	 fn(pname1,param1);
}
#endif
#endif

#ifndef GL_VERSION_1_4
#ifndef	GL_ALT_FUNDEF_PointParameteriv
#define GL_ALT_FUNDEF_PointParameteriv
typedef void (*PFNGLPOINTPARAMETERIVPROC_ALT)(GLenum,const GLint *);
static inline void glPointParameteriv(GLenum pname1,const GLint * params1)
{
#ifdef __cplusplus
	static PFNGLPOINTPARAMETERIVPROC_ALT fn=(PFNGLPOINTPARAMETERIVPROC_ALT)glaltGetProcAddressVersion("glPointParameteriv",4,3);
#else
	static PFNGLPOINTPARAMETERIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPOINTPARAMETERIVPROC_ALT)glaltGetProcAddressVersion("glPointParameteriv",4,3); }
#endif
	 fn(pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_PopDebugGroup
#define GL_ALT_FUNDEF_PopDebugGroup
typedef void (*PFNGLPOPDEBUGGROUPPROC_ALT)();
static inline void glPopDebugGroup()
{
#ifdef __cplusplus
	static PFNGLPOPDEBUGGROUPPROC_ALT fn=(PFNGLPOPDEBUGGROUPPROC_ALT)glaltGetProcAddressVersion("glPopDebugGroup",4,3);
#else
	static PFNGLPOPDEBUGGROUPPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPOPDEBUGGROUPPROC_ALT)glaltGetProcAddressVersion("glPopDebugGroup",4,3); }
#endif
	 fn();
}
#endif
#endif

#ifndef GL_VERSION_3_1
#ifndef	GL_ALT_FUNDEF_PrimitiveRestartIndex
#define GL_ALT_FUNDEF_PrimitiveRestartIndex
typedef void (*PFNGLPRIMITIVERESTARTINDEXPROC_ALT)(GLuint);
static inline void glPrimitiveRestartIndex(GLuint index1)
{
#ifdef __cplusplus
	static PFNGLPRIMITIVERESTARTINDEXPROC_ALT fn=(PFNGLPRIMITIVERESTARTINDEXPROC_ALT)glaltGetProcAddressVersion("glPrimitiveRestartIndex",4,3);
#else
	static PFNGLPRIMITIVERESTARTINDEXPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPRIMITIVERESTARTINDEXPROC_ALT)glaltGetProcAddressVersion("glPrimitiveRestartIndex",4,3); }
#endif
	 fn(index1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramBinary
#define GL_ALT_FUNDEF_ProgramBinary
typedef void (*PFNGLPROGRAMBINARYPROC_ALT)(GLuint,GLenum,const void *,GLsizei);
static inline void glProgramBinary(GLuint program1,GLenum binaryFormat1,const void * binary1,GLsizei length1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMBINARYPROC_ALT fn=(PFNGLPROGRAMBINARYPROC_ALT)glaltGetProcAddressVersion("glProgramBinary",4,3);
#else
	static PFNGLPROGRAMBINARYPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMBINARYPROC_ALT)glaltGetProcAddressVersion("glProgramBinary",4,3); }
#endif
	 fn(program1,binaryFormat1,binary1,length1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramParameteri
#define GL_ALT_FUNDEF_ProgramParameteri
typedef void (*PFNGLPROGRAMPARAMETERIPROC_ALT)(GLuint,GLenum,GLint);
static inline void glProgramParameteri(GLuint program1,GLenum pname1,GLint value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMPARAMETERIPROC_ALT fn=(PFNGLPROGRAMPARAMETERIPROC_ALT)glaltGetProcAddressVersion("glProgramParameteri",4,3);
#else
	static PFNGLPROGRAMPARAMETERIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMPARAMETERIPROC_ALT)glaltGetProcAddressVersion("glProgramParameteri",4,3); }
#endif
	 fn(program1,pname1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform1d
#define GL_ALT_FUNDEF_ProgramUniform1d
typedef void (*PFNGLPROGRAMUNIFORM1DPROC_ALT)(GLuint,GLint,GLdouble);
static inline void glProgramUniform1d(GLuint program1,GLint location1,GLdouble v01)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM1DPROC_ALT fn=(PFNGLPROGRAMUNIFORM1DPROC_ALT)glaltGetProcAddressVersion("glProgramUniform1d",4,3);
#else
	static PFNGLPROGRAMUNIFORM1DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM1DPROC_ALT)glaltGetProcAddressVersion("glProgramUniform1d",4,3); }
#endif
	 fn(program1,location1,v01);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform1dv
#define GL_ALT_FUNDEF_ProgramUniform1dv
typedef void (*PFNGLPROGRAMUNIFORM1DVPROC_ALT)(GLuint,GLint,GLsizei,const GLdouble *);
static inline void glProgramUniform1dv(GLuint program1,GLint location1,GLsizei count1,const GLdouble * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM1DVPROC_ALT fn=(PFNGLPROGRAMUNIFORM1DVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform1dv",4,3);
#else
	static PFNGLPROGRAMUNIFORM1DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM1DVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform1dv",4,3); }
#endif
	 fn(program1,location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform1f
#define GL_ALT_FUNDEF_ProgramUniform1f
typedef void (*PFNGLPROGRAMUNIFORM1FPROC_ALT)(GLuint,GLint,GLfloat);
static inline void glProgramUniform1f(GLuint program1,GLint location1,GLfloat v01)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM1FPROC_ALT fn=(PFNGLPROGRAMUNIFORM1FPROC_ALT)glaltGetProcAddressVersion("glProgramUniform1f",4,3);
#else
	static PFNGLPROGRAMUNIFORM1FPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM1FPROC_ALT)glaltGetProcAddressVersion("glProgramUniform1f",4,3); }
#endif
	 fn(program1,location1,v01);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform1fv
#define GL_ALT_FUNDEF_ProgramUniform1fv
typedef void (*PFNGLPROGRAMUNIFORM1FVPROC_ALT)(GLuint,GLint,GLsizei,const GLfloat *);
static inline void glProgramUniform1fv(GLuint program1,GLint location1,GLsizei count1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM1FVPROC_ALT fn=(PFNGLPROGRAMUNIFORM1FVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform1fv",4,3);
#else
	static PFNGLPROGRAMUNIFORM1FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM1FVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform1fv",4,3); }
#endif
	 fn(program1,location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform1i
#define GL_ALT_FUNDEF_ProgramUniform1i
typedef void (*PFNGLPROGRAMUNIFORM1IPROC_ALT)(GLuint,GLint,GLint);
static inline void glProgramUniform1i(GLuint program1,GLint location1,GLint v01)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM1IPROC_ALT fn=(PFNGLPROGRAMUNIFORM1IPROC_ALT)glaltGetProcAddressVersion("glProgramUniform1i",4,3);
#else
	static PFNGLPROGRAMUNIFORM1IPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM1IPROC_ALT)glaltGetProcAddressVersion("glProgramUniform1i",4,3); }
#endif
	 fn(program1,location1,v01);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform1iv
#define GL_ALT_FUNDEF_ProgramUniform1iv
typedef void (*PFNGLPROGRAMUNIFORM1IVPROC_ALT)(GLuint,GLint,GLsizei,const GLint *);
static inline void glProgramUniform1iv(GLuint program1,GLint location1,GLsizei count1,const GLint * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM1IVPROC_ALT fn=(PFNGLPROGRAMUNIFORM1IVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform1iv",4,3);
#else
	static PFNGLPROGRAMUNIFORM1IVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM1IVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform1iv",4,3); }
#endif
	 fn(program1,location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform1ui
#define GL_ALT_FUNDEF_ProgramUniform1ui
typedef void (*PFNGLPROGRAMUNIFORM1UIPROC_ALT)(GLuint,GLint,GLuint);
static inline void glProgramUniform1ui(GLuint program1,GLint location1,GLuint v01)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM1UIPROC_ALT fn=(PFNGLPROGRAMUNIFORM1UIPROC_ALT)glaltGetProcAddressVersion("glProgramUniform1ui",4,3);
#else
	static PFNGLPROGRAMUNIFORM1UIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM1UIPROC_ALT)glaltGetProcAddressVersion("glProgramUniform1ui",4,3); }
#endif
	 fn(program1,location1,v01);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform1uiv
#define GL_ALT_FUNDEF_ProgramUniform1uiv
typedef void (*PFNGLPROGRAMUNIFORM1UIVPROC_ALT)(GLuint,GLint,GLsizei,const GLuint *);
static inline void glProgramUniform1uiv(GLuint program1,GLint location1,GLsizei count1,const GLuint * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM1UIVPROC_ALT fn=(PFNGLPROGRAMUNIFORM1UIVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform1uiv",4,3);
#else
	static PFNGLPROGRAMUNIFORM1UIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM1UIVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform1uiv",4,3); }
#endif
	 fn(program1,location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform2d
#define GL_ALT_FUNDEF_ProgramUniform2d
typedef void (*PFNGLPROGRAMUNIFORM2DPROC_ALT)(GLuint,GLint,GLdouble,GLdouble);
static inline void glProgramUniform2d(GLuint program1,GLint location1,GLdouble v01,GLdouble v11)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM2DPROC_ALT fn=(PFNGLPROGRAMUNIFORM2DPROC_ALT)glaltGetProcAddressVersion("glProgramUniform2d",4,3);
#else
	static PFNGLPROGRAMUNIFORM2DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM2DPROC_ALT)glaltGetProcAddressVersion("glProgramUniform2d",4,3); }
#endif
	 fn(program1,location1,v01,v11);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform2dv
#define GL_ALT_FUNDEF_ProgramUniform2dv
typedef void (*PFNGLPROGRAMUNIFORM2DVPROC_ALT)(GLuint,GLint,GLsizei,const GLdouble *);
static inline void glProgramUniform2dv(GLuint program1,GLint location1,GLsizei count1,const GLdouble * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM2DVPROC_ALT fn=(PFNGLPROGRAMUNIFORM2DVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform2dv",4,3);
#else
	static PFNGLPROGRAMUNIFORM2DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM2DVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform2dv",4,3); }
#endif
	 fn(program1,location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform2f
#define GL_ALT_FUNDEF_ProgramUniform2f
typedef void (*PFNGLPROGRAMUNIFORM2FPROC_ALT)(GLuint,GLint,GLfloat,GLfloat);
static inline void glProgramUniform2f(GLuint program1,GLint location1,GLfloat v01,GLfloat v11)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM2FPROC_ALT fn=(PFNGLPROGRAMUNIFORM2FPROC_ALT)glaltGetProcAddressVersion("glProgramUniform2f",4,3);
#else
	static PFNGLPROGRAMUNIFORM2FPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM2FPROC_ALT)glaltGetProcAddressVersion("glProgramUniform2f",4,3); }
#endif
	 fn(program1,location1,v01,v11);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform2fv
#define GL_ALT_FUNDEF_ProgramUniform2fv
typedef void (*PFNGLPROGRAMUNIFORM2FVPROC_ALT)(GLuint,GLint,GLsizei,const GLfloat *);
static inline void glProgramUniform2fv(GLuint program1,GLint location1,GLsizei count1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM2FVPROC_ALT fn=(PFNGLPROGRAMUNIFORM2FVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform2fv",4,3);
#else
	static PFNGLPROGRAMUNIFORM2FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM2FVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform2fv",4,3); }
#endif
	 fn(program1,location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform2i
#define GL_ALT_FUNDEF_ProgramUniform2i
typedef void (*PFNGLPROGRAMUNIFORM2IPROC_ALT)(GLuint,GLint,GLint,GLint);
static inline void glProgramUniform2i(GLuint program1,GLint location1,GLint v01,GLint v11)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM2IPROC_ALT fn=(PFNGLPROGRAMUNIFORM2IPROC_ALT)glaltGetProcAddressVersion("glProgramUniform2i",4,3);
#else
	static PFNGLPROGRAMUNIFORM2IPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM2IPROC_ALT)glaltGetProcAddressVersion("glProgramUniform2i",4,3); }
#endif
	 fn(program1,location1,v01,v11);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform2iv
#define GL_ALT_FUNDEF_ProgramUniform2iv
typedef void (*PFNGLPROGRAMUNIFORM2IVPROC_ALT)(GLuint,GLint,GLsizei,const GLint *);
static inline void glProgramUniform2iv(GLuint program1,GLint location1,GLsizei count1,const GLint * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM2IVPROC_ALT fn=(PFNGLPROGRAMUNIFORM2IVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform2iv",4,3);
#else
	static PFNGLPROGRAMUNIFORM2IVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM2IVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform2iv",4,3); }
#endif
	 fn(program1,location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform2ui
#define GL_ALT_FUNDEF_ProgramUniform2ui
typedef void (*PFNGLPROGRAMUNIFORM2UIPROC_ALT)(GLuint,GLint,GLuint,GLuint);
static inline void glProgramUniform2ui(GLuint program1,GLint location1,GLuint v01,GLuint v11)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM2UIPROC_ALT fn=(PFNGLPROGRAMUNIFORM2UIPROC_ALT)glaltGetProcAddressVersion("glProgramUniform2ui",4,3);
#else
	static PFNGLPROGRAMUNIFORM2UIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM2UIPROC_ALT)glaltGetProcAddressVersion("glProgramUniform2ui",4,3); }
#endif
	 fn(program1,location1,v01,v11);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform2uiv
#define GL_ALT_FUNDEF_ProgramUniform2uiv
typedef void (*PFNGLPROGRAMUNIFORM2UIVPROC_ALT)(GLuint,GLint,GLsizei,const GLuint *);
static inline void glProgramUniform2uiv(GLuint program1,GLint location1,GLsizei count1,const GLuint * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM2UIVPROC_ALT fn=(PFNGLPROGRAMUNIFORM2UIVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform2uiv",4,3);
#else
	static PFNGLPROGRAMUNIFORM2UIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM2UIVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform2uiv",4,3); }
#endif
	 fn(program1,location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform3d
#define GL_ALT_FUNDEF_ProgramUniform3d
typedef void (*PFNGLPROGRAMUNIFORM3DPROC_ALT)(GLuint,GLint,GLdouble,GLdouble,GLdouble);
static inline void glProgramUniform3d(GLuint program1,GLint location1,GLdouble v01,GLdouble v11,GLdouble v21)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM3DPROC_ALT fn=(PFNGLPROGRAMUNIFORM3DPROC_ALT)glaltGetProcAddressVersion("glProgramUniform3d",4,3);
#else
	static PFNGLPROGRAMUNIFORM3DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM3DPROC_ALT)glaltGetProcAddressVersion("glProgramUniform3d",4,3); }
#endif
	 fn(program1,location1,v01,v11,v21);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform3dv
#define GL_ALT_FUNDEF_ProgramUniform3dv
typedef void (*PFNGLPROGRAMUNIFORM3DVPROC_ALT)(GLuint,GLint,GLsizei,const GLdouble *);
static inline void glProgramUniform3dv(GLuint program1,GLint location1,GLsizei count1,const GLdouble * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM3DVPROC_ALT fn=(PFNGLPROGRAMUNIFORM3DVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform3dv",4,3);
#else
	static PFNGLPROGRAMUNIFORM3DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM3DVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform3dv",4,3); }
#endif
	 fn(program1,location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform3f
#define GL_ALT_FUNDEF_ProgramUniform3f
typedef void (*PFNGLPROGRAMUNIFORM3FPROC_ALT)(GLuint,GLint,GLfloat,GLfloat,GLfloat);
static inline void glProgramUniform3f(GLuint program1,GLint location1,GLfloat v01,GLfloat v11,GLfloat v21)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM3FPROC_ALT fn=(PFNGLPROGRAMUNIFORM3FPROC_ALT)glaltGetProcAddressVersion("glProgramUniform3f",4,3);
#else
	static PFNGLPROGRAMUNIFORM3FPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM3FPROC_ALT)glaltGetProcAddressVersion("glProgramUniform3f",4,3); }
#endif
	 fn(program1,location1,v01,v11,v21);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform3fv
#define GL_ALT_FUNDEF_ProgramUniform3fv
typedef void (*PFNGLPROGRAMUNIFORM3FVPROC_ALT)(GLuint,GLint,GLsizei,const GLfloat *);
static inline void glProgramUniform3fv(GLuint program1,GLint location1,GLsizei count1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM3FVPROC_ALT fn=(PFNGLPROGRAMUNIFORM3FVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform3fv",4,3);
#else
	static PFNGLPROGRAMUNIFORM3FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM3FVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform3fv",4,3); }
#endif
	 fn(program1,location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform3i
#define GL_ALT_FUNDEF_ProgramUniform3i
typedef void (*PFNGLPROGRAMUNIFORM3IPROC_ALT)(GLuint,GLint,GLint,GLint,GLint);
static inline void glProgramUniform3i(GLuint program1,GLint location1,GLint v01,GLint v11,GLint v21)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM3IPROC_ALT fn=(PFNGLPROGRAMUNIFORM3IPROC_ALT)glaltGetProcAddressVersion("glProgramUniform3i",4,3);
#else
	static PFNGLPROGRAMUNIFORM3IPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM3IPROC_ALT)glaltGetProcAddressVersion("glProgramUniform3i",4,3); }
#endif
	 fn(program1,location1,v01,v11,v21);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform3iv
#define GL_ALT_FUNDEF_ProgramUniform3iv
typedef void (*PFNGLPROGRAMUNIFORM3IVPROC_ALT)(GLuint,GLint,GLsizei,const GLint *);
static inline void glProgramUniform3iv(GLuint program1,GLint location1,GLsizei count1,const GLint * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM3IVPROC_ALT fn=(PFNGLPROGRAMUNIFORM3IVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform3iv",4,3);
#else
	static PFNGLPROGRAMUNIFORM3IVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM3IVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform3iv",4,3); }
#endif
	 fn(program1,location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform3ui
#define GL_ALT_FUNDEF_ProgramUniform3ui
typedef void (*PFNGLPROGRAMUNIFORM3UIPROC_ALT)(GLuint,GLint,GLuint,GLuint,GLuint);
static inline void glProgramUniform3ui(GLuint program1,GLint location1,GLuint v01,GLuint v11,GLuint v21)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM3UIPROC_ALT fn=(PFNGLPROGRAMUNIFORM3UIPROC_ALT)glaltGetProcAddressVersion("glProgramUniform3ui",4,3);
#else
	static PFNGLPROGRAMUNIFORM3UIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM3UIPROC_ALT)glaltGetProcAddressVersion("glProgramUniform3ui",4,3); }
#endif
	 fn(program1,location1,v01,v11,v21);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform3uiv
#define GL_ALT_FUNDEF_ProgramUniform3uiv
typedef void (*PFNGLPROGRAMUNIFORM3UIVPROC_ALT)(GLuint,GLint,GLsizei,const GLuint *);
static inline void glProgramUniform3uiv(GLuint program1,GLint location1,GLsizei count1,const GLuint * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM3UIVPROC_ALT fn=(PFNGLPROGRAMUNIFORM3UIVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform3uiv",4,3);
#else
	static PFNGLPROGRAMUNIFORM3UIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM3UIVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform3uiv",4,3); }
#endif
	 fn(program1,location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform4d
#define GL_ALT_FUNDEF_ProgramUniform4d
typedef void (*PFNGLPROGRAMUNIFORM4DPROC_ALT)(GLuint,GLint,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void glProgramUniform4d(GLuint program1,GLint location1,GLdouble v01,GLdouble v11,GLdouble v21,GLdouble v31)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM4DPROC_ALT fn=(PFNGLPROGRAMUNIFORM4DPROC_ALT)glaltGetProcAddressVersion("glProgramUniform4d",4,3);
#else
	static PFNGLPROGRAMUNIFORM4DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM4DPROC_ALT)glaltGetProcAddressVersion("glProgramUniform4d",4,3); }
#endif
	 fn(program1,location1,v01,v11,v21,v31);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform4dv
#define GL_ALT_FUNDEF_ProgramUniform4dv
typedef void (*PFNGLPROGRAMUNIFORM4DVPROC_ALT)(GLuint,GLint,GLsizei,const GLdouble *);
static inline void glProgramUniform4dv(GLuint program1,GLint location1,GLsizei count1,const GLdouble * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM4DVPROC_ALT fn=(PFNGLPROGRAMUNIFORM4DVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform4dv",4,3);
#else
	static PFNGLPROGRAMUNIFORM4DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM4DVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform4dv",4,3); }
#endif
	 fn(program1,location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform4f
#define GL_ALT_FUNDEF_ProgramUniform4f
typedef void (*PFNGLPROGRAMUNIFORM4FPROC_ALT)(GLuint,GLint,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glProgramUniform4f(GLuint program1,GLint location1,GLfloat v01,GLfloat v11,GLfloat v21,GLfloat v31)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM4FPROC_ALT fn=(PFNGLPROGRAMUNIFORM4FPROC_ALT)glaltGetProcAddressVersion("glProgramUniform4f",4,3);
#else
	static PFNGLPROGRAMUNIFORM4FPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM4FPROC_ALT)glaltGetProcAddressVersion("glProgramUniform4f",4,3); }
#endif
	 fn(program1,location1,v01,v11,v21,v31);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform4fv
#define GL_ALT_FUNDEF_ProgramUniform4fv
typedef void (*PFNGLPROGRAMUNIFORM4FVPROC_ALT)(GLuint,GLint,GLsizei,const GLfloat *);
static inline void glProgramUniform4fv(GLuint program1,GLint location1,GLsizei count1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM4FVPROC_ALT fn=(PFNGLPROGRAMUNIFORM4FVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform4fv",4,3);
#else
	static PFNGLPROGRAMUNIFORM4FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM4FVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform4fv",4,3); }
#endif
	 fn(program1,location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform4i
#define GL_ALT_FUNDEF_ProgramUniform4i
typedef void (*PFNGLPROGRAMUNIFORM4IPROC_ALT)(GLuint,GLint,GLint,GLint,GLint,GLint);
static inline void glProgramUniform4i(GLuint program1,GLint location1,GLint v01,GLint v11,GLint v21,GLint v31)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM4IPROC_ALT fn=(PFNGLPROGRAMUNIFORM4IPROC_ALT)glaltGetProcAddressVersion("glProgramUniform4i",4,3);
#else
	static PFNGLPROGRAMUNIFORM4IPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM4IPROC_ALT)glaltGetProcAddressVersion("glProgramUniform4i",4,3); }
#endif
	 fn(program1,location1,v01,v11,v21,v31);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform4iv
#define GL_ALT_FUNDEF_ProgramUniform4iv
typedef void (*PFNGLPROGRAMUNIFORM4IVPROC_ALT)(GLuint,GLint,GLsizei,const GLint *);
static inline void glProgramUniform4iv(GLuint program1,GLint location1,GLsizei count1,const GLint * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM4IVPROC_ALT fn=(PFNGLPROGRAMUNIFORM4IVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform4iv",4,3);
#else
	static PFNGLPROGRAMUNIFORM4IVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM4IVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform4iv",4,3); }
#endif
	 fn(program1,location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform4ui
#define GL_ALT_FUNDEF_ProgramUniform4ui
typedef void (*PFNGLPROGRAMUNIFORM4UIPROC_ALT)(GLuint,GLint,GLuint,GLuint,GLuint,GLuint);
static inline void glProgramUniform4ui(GLuint program1,GLint location1,GLuint v01,GLuint v11,GLuint v21,GLuint v31)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM4UIPROC_ALT fn=(PFNGLPROGRAMUNIFORM4UIPROC_ALT)glaltGetProcAddressVersion("glProgramUniform4ui",4,3);
#else
	static PFNGLPROGRAMUNIFORM4UIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM4UIPROC_ALT)glaltGetProcAddressVersion("glProgramUniform4ui",4,3); }
#endif
	 fn(program1,location1,v01,v11,v21,v31);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniform4uiv
#define GL_ALT_FUNDEF_ProgramUniform4uiv
typedef void (*PFNGLPROGRAMUNIFORM4UIVPROC_ALT)(GLuint,GLint,GLsizei,const GLuint *);
static inline void glProgramUniform4uiv(GLuint program1,GLint location1,GLsizei count1,const GLuint * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORM4UIVPROC_ALT fn=(PFNGLPROGRAMUNIFORM4UIVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform4uiv",4,3);
#else
	static PFNGLPROGRAMUNIFORM4UIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORM4UIVPROC_ALT)glaltGetProcAddressVersion("glProgramUniform4uiv",4,3); }
#endif
	 fn(program1,location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix2dv
#define GL_ALT_FUNDEF_ProgramUniformMatrix2dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2DVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glProgramUniformMatrix2dv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORMMATRIX2DVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX2DVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix2dv",4,3);
#else
	static PFNGLPROGRAMUNIFORMMATRIX2DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORMMATRIX2DVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix2dv",4,3); }
#endif
	 fn(program1,location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix2fv
#define GL_ALT_FUNDEF_ProgramUniformMatrix2fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2FVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix2fv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORMMATRIX2FVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX2FVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix2fv",4,3);
#else
	static PFNGLPROGRAMUNIFORMMATRIX2FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORMMATRIX2FVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix2fv",4,3); }
#endif
	 fn(program1,location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix2x3dv
#define GL_ALT_FUNDEF_ProgramUniformMatrix2x3dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glProgramUniformMatrix2x3dv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix2x3dv",4,3);
#else
	static PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix2x3dv",4,3); }
#endif
	 fn(program1,location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix2x3fv
#define GL_ALT_FUNDEF_ProgramUniformMatrix2x3fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix2x3fv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix2x3fv",4,3);
#else
	static PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix2x3fv",4,3); }
#endif
	 fn(program1,location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix2x4dv
#define GL_ALT_FUNDEF_ProgramUniformMatrix2x4dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glProgramUniformMatrix2x4dv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix2x4dv",4,3);
#else
	static PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix2x4dv",4,3); }
#endif
	 fn(program1,location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix2x4fv
#define GL_ALT_FUNDEF_ProgramUniformMatrix2x4fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix2x4fv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix2x4fv",4,3);
#else
	static PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix2x4fv",4,3); }
#endif
	 fn(program1,location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix3dv
#define GL_ALT_FUNDEF_ProgramUniformMatrix3dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3DVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glProgramUniformMatrix3dv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORMMATRIX3DVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX3DVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix3dv",4,3);
#else
	static PFNGLPROGRAMUNIFORMMATRIX3DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORMMATRIX3DVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix3dv",4,3); }
#endif
	 fn(program1,location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix3fv
#define GL_ALT_FUNDEF_ProgramUniformMatrix3fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3FVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix3fv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORMMATRIX3FVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX3FVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix3fv",4,3);
#else
	static PFNGLPROGRAMUNIFORMMATRIX3FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORMMATRIX3FVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix3fv",4,3); }
#endif
	 fn(program1,location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix3x2dv
#define GL_ALT_FUNDEF_ProgramUniformMatrix3x2dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glProgramUniformMatrix3x2dv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix3x2dv",4,3);
#else
	static PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix3x2dv",4,3); }
#endif
	 fn(program1,location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix3x2fv
#define GL_ALT_FUNDEF_ProgramUniformMatrix3x2fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix3x2fv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix3x2fv",4,3);
#else
	static PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix3x2fv",4,3); }
#endif
	 fn(program1,location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix3x4dv
#define GL_ALT_FUNDEF_ProgramUniformMatrix3x4dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glProgramUniformMatrix3x4dv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix3x4dv",4,3);
#else
	static PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix3x4dv",4,3); }
#endif
	 fn(program1,location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix3x4fv
#define GL_ALT_FUNDEF_ProgramUniformMatrix3x4fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix3x4fv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix3x4fv",4,3);
#else
	static PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix3x4fv",4,3); }
#endif
	 fn(program1,location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix4dv
#define GL_ALT_FUNDEF_ProgramUniformMatrix4dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4DVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glProgramUniformMatrix4dv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORMMATRIX4DVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX4DVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix4dv",4,3);
#else
	static PFNGLPROGRAMUNIFORMMATRIX4DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORMMATRIX4DVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix4dv",4,3); }
#endif
	 fn(program1,location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix4fv
#define GL_ALT_FUNDEF_ProgramUniformMatrix4fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4FVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix4fv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORMMATRIX4FVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX4FVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix4fv",4,3);
#else
	static PFNGLPROGRAMUNIFORMMATRIX4FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORMMATRIX4FVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix4fv",4,3); }
#endif
	 fn(program1,location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix4x2dv
#define GL_ALT_FUNDEF_ProgramUniformMatrix4x2dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glProgramUniformMatrix4x2dv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix4x2dv",4,3);
#else
	static PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix4x2dv",4,3); }
#endif
	 fn(program1,location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix4x2fv
#define GL_ALT_FUNDEF_ProgramUniformMatrix4x2fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix4x2fv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix4x2fv",4,3);
#else
	static PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix4x2fv",4,3); }
#endif
	 fn(program1,location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix4x3dv
#define GL_ALT_FUNDEF_ProgramUniformMatrix4x3dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glProgramUniformMatrix4x3dv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix4x3dv",4,3);
#else
	static PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix4x3dv",4,3); }
#endif
	 fn(program1,location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ProgramUniformMatrix4x3fv
#define GL_ALT_FUNDEF_ProgramUniformMatrix4x3fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC_ALT)(GLuint,GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glProgramUniformMatrix4x3fv(GLuint program1,GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC_ALT fn=(PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix4x3fv",4,3);
#else
	static PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC_ALT)glaltGetProcAddressVersion("glProgramUniformMatrix4x3fv",4,3); }
#endif
	 fn(program1,location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_ProvokingVertex
#define GL_ALT_FUNDEF_ProvokingVertex
typedef void (*PFNGLPROVOKINGVERTEXPROC_ALT)(GLenum);
static inline void glProvokingVertex(GLenum mode1)
{
#ifdef __cplusplus
	static PFNGLPROVOKINGVERTEXPROC_ALT fn=(PFNGLPROVOKINGVERTEXPROC_ALT)glaltGetProcAddressVersion("glProvokingVertex",4,3);
#else
	static PFNGLPROVOKINGVERTEXPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPROVOKINGVERTEXPROC_ALT)glaltGetProcAddressVersion("glProvokingVertex",4,3); }
#endif
	 fn(mode1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_PushDebugGroup
#define GL_ALT_FUNDEF_PushDebugGroup
typedef void (*PFNGLPUSHDEBUGGROUPPROC_ALT)(GLenum,GLuint,GLsizei,const GLchar *);
static inline void glPushDebugGroup(GLenum source1,GLuint id1,GLsizei length1,const GLchar * message1)
{
#ifdef __cplusplus
	static PFNGLPUSHDEBUGGROUPPROC_ALT fn=(PFNGLPUSHDEBUGGROUPPROC_ALT)glaltGetProcAddressVersion("glPushDebugGroup",4,3);
#else
	static PFNGLPUSHDEBUGGROUPPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLPUSHDEBUGGROUPPROC_ALT)glaltGetProcAddressVersion("glPushDebugGroup",4,3); }
#endif
	 fn(source1,id1,length1,message1);
}
#endif
#endif

#ifndef GL_VERSION_3_3
#ifndef	GL_ALT_FUNDEF_QueryCounter
#define GL_ALT_FUNDEF_QueryCounter
typedef void (*PFNGLQUERYCOUNTERPROC_ALT)(GLuint,GLenum);
static inline void glQueryCounter(GLuint id1,GLenum target1)
{
#ifdef __cplusplus
	static PFNGLQUERYCOUNTERPROC_ALT fn=(PFNGLQUERYCOUNTERPROC_ALT)glaltGetProcAddressVersion("glQueryCounter",4,3);
#else
	static PFNGLQUERYCOUNTERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLQUERYCOUNTERPROC_ALT)glaltGetProcAddressVersion("glQueryCounter",4,3); }
#endif
	 fn(id1,target1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ReleaseShaderCompiler
#define GL_ALT_FUNDEF_ReleaseShaderCompiler
typedef void (*PFNGLRELEASESHADERCOMPILERPROC_ALT)();
static inline void glReleaseShaderCompiler()
{
#ifdef __cplusplus
	static PFNGLRELEASESHADERCOMPILERPROC_ALT fn=(PFNGLRELEASESHADERCOMPILERPROC_ALT)glaltGetProcAddressVersion("glReleaseShaderCompiler",4,3);
#else
	static PFNGLRELEASESHADERCOMPILERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLRELEASESHADERCOMPILERPROC_ALT)glaltGetProcAddressVersion("glReleaseShaderCompiler",4,3); }
#endif
	 fn();
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_RenderbufferStorage
#define GL_ALT_FUNDEF_RenderbufferStorage
typedef void (*PFNGLRENDERBUFFERSTORAGEPROC_ALT)(GLenum,GLenum,GLsizei,GLsizei);
static inline void glRenderbufferStorage(GLenum target1,GLenum internalformat1,GLsizei width1,GLsizei height1)
{
#ifdef __cplusplus
	static PFNGLRENDERBUFFERSTORAGEPROC_ALT fn=(PFNGLRENDERBUFFERSTORAGEPROC_ALT)glaltGetProcAddressVersion("glRenderbufferStorage",4,3);
#else
	static PFNGLRENDERBUFFERSTORAGEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLRENDERBUFFERSTORAGEPROC_ALT)glaltGetProcAddressVersion("glRenderbufferStorage",4,3); }
#endif
	 fn(target1,internalformat1,width1,height1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_RenderbufferStorageMultisample
#define GL_ALT_FUNDEF_RenderbufferStorageMultisample
typedef void (*PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC_ALT)(GLenum,GLsizei,GLenum,GLsizei,GLsizei);
static inline void glRenderbufferStorageMultisample(GLenum target1,GLsizei samples1,GLenum internalformat1,GLsizei width1,GLsizei height1)
{
#ifdef __cplusplus
	static PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC_ALT fn=(PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC_ALT)glaltGetProcAddressVersion("glRenderbufferStorageMultisample",4,3);
#else
	static PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC_ALT)glaltGetProcAddressVersion("glRenderbufferStorageMultisample",4,3); }
#endif
	 fn(target1,samples1,internalformat1,width1,height1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_ResumeTransformFeedback
#define GL_ALT_FUNDEF_ResumeTransformFeedback
typedef void (*PFNGLRESUMETRANSFORMFEEDBACKPROC_ALT)();
static inline void glResumeTransformFeedback()
{
#ifdef __cplusplus
	static PFNGLRESUMETRANSFORMFEEDBACKPROC_ALT fn=(PFNGLRESUMETRANSFORMFEEDBACKPROC_ALT)glaltGetProcAddressVersion("glResumeTransformFeedback",4,3);
#else
	static PFNGLRESUMETRANSFORMFEEDBACKPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLRESUMETRANSFORMFEEDBACKPROC_ALT)glaltGetProcAddressVersion("glResumeTransformFeedback",4,3); }
#endif
	 fn();
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_SampleCoverage
#define GL_ALT_FUNDEF_SampleCoverage
typedef void (*PFNGLSAMPLECOVERAGEPROC_ALT)(GLfloat,GLboolean);
static inline void glSampleCoverage(GLfloat value1,GLboolean invert1)
{
#ifdef __cplusplus
	static PFNGLSAMPLECOVERAGEPROC_ALT fn=(PFNGLSAMPLECOVERAGEPROC_ALT)glaltGetProcAddressVersion("glSampleCoverage",4,3);
#else
	static PFNGLSAMPLECOVERAGEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLSAMPLECOVERAGEPROC_ALT)glaltGetProcAddressVersion("glSampleCoverage",4,3); }
#endif
	 fn(value1,invert1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_SampleMaski
#define GL_ALT_FUNDEF_SampleMaski
typedef void (*PFNGLSAMPLEMASKIPROC_ALT)(GLuint,GLbitfield);
static inline void glSampleMaski(GLuint maskNumber1,GLbitfield mask1)
{
#ifdef __cplusplus
	static PFNGLSAMPLEMASKIPROC_ALT fn=(PFNGLSAMPLEMASKIPROC_ALT)glaltGetProcAddressVersion("glSampleMaski",4,3);
#else
	static PFNGLSAMPLEMASKIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLSAMPLEMASKIPROC_ALT)glaltGetProcAddressVersion("glSampleMaski",4,3); }
#endif
	 fn(maskNumber1,mask1);
}
#endif
#endif

#ifndef GL_VERSION_3_3
#ifndef	GL_ALT_FUNDEF_SamplerParameterIiv
#define GL_ALT_FUNDEF_SamplerParameterIiv
typedef void (*PFNGLSAMPLERPARAMETERIIVPROC_ALT)(GLuint,GLenum,const GLint *);
static inline void glSamplerParameterIiv(GLuint sampler1,GLenum pname1,const GLint * param1)
{
#ifdef __cplusplus
	static PFNGLSAMPLERPARAMETERIIVPROC_ALT fn=(PFNGLSAMPLERPARAMETERIIVPROC_ALT)glaltGetProcAddressVersion("glSamplerParameterIiv",4,3);
#else
	static PFNGLSAMPLERPARAMETERIIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLSAMPLERPARAMETERIIVPROC_ALT)glaltGetProcAddressVersion("glSamplerParameterIiv",4,3); }
#endif
	 fn(sampler1,pname1,param1);
}
#endif
#endif

#ifndef GL_VERSION_3_3
#ifndef	GL_ALT_FUNDEF_SamplerParameterIuiv
#define GL_ALT_FUNDEF_SamplerParameterIuiv
typedef void (*PFNGLSAMPLERPARAMETERIUIVPROC_ALT)(GLuint,GLenum,const GLuint *);
static inline void glSamplerParameterIuiv(GLuint sampler1,GLenum pname1,const GLuint * param1)
{
#ifdef __cplusplus
	static PFNGLSAMPLERPARAMETERIUIVPROC_ALT fn=(PFNGLSAMPLERPARAMETERIUIVPROC_ALT)glaltGetProcAddressVersion("glSamplerParameterIuiv",4,3);
#else
	static PFNGLSAMPLERPARAMETERIUIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLSAMPLERPARAMETERIUIVPROC_ALT)glaltGetProcAddressVersion("glSamplerParameterIuiv",4,3); }
#endif
	 fn(sampler1,pname1,param1);
}
#endif
#endif

#ifndef GL_VERSION_3_3
#ifndef	GL_ALT_FUNDEF_SamplerParameterf
#define GL_ALT_FUNDEF_SamplerParameterf
typedef void (*PFNGLSAMPLERPARAMETERFPROC_ALT)(GLuint,GLenum,GLfloat);
static inline void glSamplerParameterf(GLuint sampler1,GLenum pname1,GLfloat param1)
{
#ifdef __cplusplus
	static PFNGLSAMPLERPARAMETERFPROC_ALT fn=(PFNGLSAMPLERPARAMETERFPROC_ALT)glaltGetProcAddressVersion("glSamplerParameterf",4,3);
#else
	static PFNGLSAMPLERPARAMETERFPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLSAMPLERPARAMETERFPROC_ALT)glaltGetProcAddressVersion("glSamplerParameterf",4,3); }
#endif
	 fn(sampler1,pname1,param1);
}
#endif
#endif

#ifndef GL_VERSION_3_3
#ifndef	GL_ALT_FUNDEF_SamplerParameterfv
#define GL_ALT_FUNDEF_SamplerParameterfv
typedef void (*PFNGLSAMPLERPARAMETERFVPROC_ALT)(GLuint,GLenum,const GLfloat *);
static inline void glSamplerParameterfv(GLuint sampler1,GLenum pname1,const GLfloat * param1)
{
#ifdef __cplusplus
	static PFNGLSAMPLERPARAMETERFVPROC_ALT fn=(PFNGLSAMPLERPARAMETERFVPROC_ALT)glaltGetProcAddressVersion("glSamplerParameterfv",4,3);
#else
	static PFNGLSAMPLERPARAMETERFVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLSAMPLERPARAMETERFVPROC_ALT)glaltGetProcAddressVersion("glSamplerParameterfv",4,3); }
#endif
	 fn(sampler1,pname1,param1);
}
#endif
#endif

#ifndef GL_VERSION_3_3
#ifndef	GL_ALT_FUNDEF_SamplerParameteri
#define GL_ALT_FUNDEF_SamplerParameteri
typedef void (*PFNGLSAMPLERPARAMETERIPROC_ALT)(GLuint,GLenum,GLint);
static inline void glSamplerParameteri(GLuint sampler1,GLenum pname1,GLint param1)
{
#ifdef __cplusplus
	static PFNGLSAMPLERPARAMETERIPROC_ALT fn=(PFNGLSAMPLERPARAMETERIPROC_ALT)glaltGetProcAddressVersion("glSamplerParameteri",4,3);
#else
	static PFNGLSAMPLERPARAMETERIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLSAMPLERPARAMETERIPROC_ALT)glaltGetProcAddressVersion("glSamplerParameteri",4,3); }
#endif
	 fn(sampler1,pname1,param1);
}
#endif
#endif

#ifndef GL_VERSION_3_3
#ifndef	GL_ALT_FUNDEF_SamplerParameteriv
#define GL_ALT_FUNDEF_SamplerParameteriv
typedef void (*PFNGLSAMPLERPARAMETERIVPROC_ALT)(GLuint,GLenum,const GLint *);
static inline void glSamplerParameteriv(GLuint sampler1,GLenum pname1,const GLint * param1)
{
#ifdef __cplusplus
	static PFNGLSAMPLERPARAMETERIVPROC_ALT fn=(PFNGLSAMPLERPARAMETERIVPROC_ALT)glaltGetProcAddressVersion("glSamplerParameteriv",4,3);
#else
	static PFNGLSAMPLERPARAMETERIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLSAMPLERPARAMETERIVPROC_ALT)glaltGetProcAddressVersion("glSamplerParameteriv",4,3); }
#endif
	 fn(sampler1,pname1,param1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ScissorArrayv
#define GL_ALT_FUNDEF_ScissorArrayv
typedef void (*PFNGLSCISSORARRAYVPROC_ALT)(GLuint,GLsizei,const GLint *);
static inline void glScissorArrayv(GLuint first1,GLsizei count1,const GLint * v1)
{
#ifdef __cplusplus
	static PFNGLSCISSORARRAYVPROC_ALT fn=(PFNGLSCISSORARRAYVPROC_ALT)glaltGetProcAddressVersion("glScissorArrayv",4,3);
#else
	static PFNGLSCISSORARRAYVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLSCISSORARRAYVPROC_ALT)glaltGetProcAddressVersion("glScissorArrayv",4,3); }
#endif
	 fn(first1,count1,v1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ScissorIndexed
#define GL_ALT_FUNDEF_ScissorIndexed
typedef void (*PFNGLSCISSORINDEXEDPROC_ALT)(GLuint,GLint,GLint,GLsizei,GLsizei);
static inline void glScissorIndexed(GLuint index1,GLint left1,GLint bottom1,GLsizei width1,GLsizei height1)
{
#ifdef __cplusplus
	static PFNGLSCISSORINDEXEDPROC_ALT fn=(PFNGLSCISSORINDEXEDPROC_ALT)glaltGetProcAddressVersion("glScissorIndexed",4,3);
#else
	static PFNGLSCISSORINDEXEDPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLSCISSORINDEXEDPROC_ALT)glaltGetProcAddressVersion("glScissorIndexed",4,3); }
#endif
	 fn(index1,left1,bottom1,width1,height1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ScissorIndexedv
#define GL_ALT_FUNDEF_ScissorIndexedv
typedef void (*PFNGLSCISSORINDEXEDVPROC_ALT)(GLuint,const GLint *);
static inline void glScissorIndexedv(GLuint index1,const GLint * v1)
{
#ifdef __cplusplus
	static PFNGLSCISSORINDEXEDVPROC_ALT fn=(PFNGLSCISSORINDEXEDVPROC_ALT)glaltGetProcAddressVersion("glScissorIndexedv",4,3);
#else
	static PFNGLSCISSORINDEXEDVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLSCISSORINDEXEDVPROC_ALT)glaltGetProcAddressVersion("glScissorIndexedv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ShaderBinary
#define GL_ALT_FUNDEF_ShaderBinary
typedef void (*PFNGLSHADERBINARYPROC_ALT)(GLsizei,const GLuint *,GLenum,const void *,GLsizei);
static inline void glShaderBinary(GLsizei count1,const GLuint * shaders1,GLenum binaryformat1,const void * binary1,GLsizei length1)
{
#ifdef __cplusplus
	static PFNGLSHADERBINARYPROC_ALT fn=(PFNGLSHADERBINARYPROC_ALT)glaltGetProcAddressVersion("glShaderBinary",4,3);
#else
	static PFNGLSHADERBINARYPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLSHADERBINARYPROC_ALT)glaltGetProcAddressVersion("glShaderBinary",4,3); }
#endif
	 fn(count1,shaders1,binaryformat1,binary1,length1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_ShaderSource
#define GL_ALT_FUNDEF_ShaderSource
typedef void (*PFNGLSHADERSOURCEPROC_ALT)(GLuint,GLsizei,const GLchar *const*,const GLint *);
static inline void glShaderSource(GLuint shader1,GLsizei count1,const GLchar *const* string1,const GLint * length1)
{
#ifdef __cplusplus
	static PFNGLSHADERSOURCEPROC_ALT fn=(PFNGLSHADERSOURCEPROC_ALT)glaltGetProcAddressVersion("glShaderSource",4,3);
#else
	static PFNGLSHADERSOURCEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLSHADERSOURCEPROC_ALT)glaltGetProcAddressVersion("glShaderSource",4,3); }
#endif
	 fn(shader1,count1,string1,length1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_ShaderStorageBlockBinding
#define GL_ALT_FUNDEF_ShaderStorageBlockBinding
typedef void (*PFNGLSHADERSTORAGEBLOCKBINDINGPROC_ALT)(GLuint,GLuint,GLuint);
static inline void glShaderStorageBlockBinding(GLuint program1,GLuint storageBlockIndex1,GLuint storageBlockBinding1)
{
#ifdef __cplusplus
	static PFNGLSHADERSTORAGEBLOCKBINDINGPROC_ALT fn=(PFNGLSHADERSTORAGEBLOCKBINDINGPROC_ALT)glaltGetProcAddressVersion("glShaderStorageBlockBinding",4,3);
#else
	static PFNGLSHADERSTORAGEBLOCKBINDINGPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLSHADERSTORAGEBLOCKBINDINGPROC_ALT)glaltGetProcAddressVersion("glShaderStorageBlockBinding",4,3); }
#endif
	 fn(program1,storageBlockIndex1,storageBlockBinding1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_StencilFuncSeparate
#define GL_ALT_FUNDEF_StencilFuncSeparate
typedef void (*PFNGLSTENCILFUNCSEPARATEPROC_ALT)(GLenum,GLenum,GLint,GLuint);
static inline void glStencilFuncSeparate(GLenum face1,GLenum func1,GLint ref1,GLuint mask1)
{
#ifdef __cplusplus
	static PFNGLSTENCILFUNCSEPARATEPROC_ALT fn=(PFNGLSTENCILFUNCSEPARATEPROC_ALT)glaltGetProcAddressVersion("glStencilFuncSeparate",4,3);
#else
	static PFNGLSTENCILFUNCSEPARATEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLSTENCILFUNCSEPARATEPROC_ALT)glaltGetProcAddressVersion("glStencilFuncSeparate",4,3); }
#endif
	 fn(face1,func1,ref1,mask1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_StencilMaskSeparate
#define GL_ALT_FUNDEF_StencilMaskSeparate
typedef void (*PFNGLSTENCILMASKSEPARATEPROC_ALT)(GLenum,GLuint);
static inline void glStencilMaskSeparate(GLenum face1,GLuint mask1)
{
#ifdef __cplusplus
	static PFNGLSTENCILMASKSEPARATEPROC_ALT fn=(PFNGLSTENCILMASKSEPARATEPROC_ALT)glaltGetProcAddressVersion("glStencilMaskSeparate",4,3);
#else
	static PFNGLSTENCILMASKSEPARATEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLSTENCILMASKSEPARATEPROC_ALT)glaltGetProcAddressVersion("glStencilMaskSeparate",4,3); }
#endif
	 fn(face1,mask1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_StencilOpSeparate
#define GL_ALT_FUNDEF_StencilOpSeparate
typedef void (*PFNGLSTENCILOPSEPARATEPROC_ALT)(GLenum,GLenum,GLenum,GLenum);
static inline void glStencilOpSeparate(GLenum face1,GLenum sfail1,GLenum dpfail1,GLenum dppass1)
{
#ifdef __cplusplus
	static PFNGLSTENCILOPSEPARATEPROC_ALT fn=(PFNGLSTENCILOPSEPARATEPROC_ALT)glaltGetProcAddressVersion("glStencilOpSeparate",4,3);
#else
	static PFNGLSTENCILOPSEPARATEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLSTENCILOPSEPARATEPROC_ALT)glaltGetProcAddressVersion("glStencilOpSeparate",4,3); }
#endif
	 fn(face1,sfail1,dpfail1,dppass1);
}
#endif
#endif

#ifndef GL_VERSION_3_1
#ifndef	GL_ALT_FUNDEF_TexBuffer
#define GL_ALT_FUNDEF_TexBuffer
typedef void (*PFNGLTEXBUFFERPROC_ALT)(GLenum,GLenum,GLuint);
static inline void glTexBuffer(GLenum target1,GLenum internalformat1,GLuint buffer1)
{
#ifdef __cplusplus
	static PFNGLTEXBUFFERPROC_ALT fn=(PFNGLTEXBUFFERPROC_ALT)glaltGetProcAddressVersion("glTexBuffer",4,3);
#else
	static PFNGLTEXBUFFERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLTEXBUFFERPROC_ALT)glaltGetProcAddressVersion("glTexBuffer",4,3); }
#endif
	 fn(target1,internalformat1,buffer1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_TexBufferRange
#define GL_ALT_FUNDEF_TexBufferRange
typedef void (*PFNGLTEXBUFFERRANGEPROC_ALT)(GLenum,GLenum,GLuint,GLintptr,GLsizeiptr);
static inline void glTexBufferRange(GLenum target1,GLenum internalformat1,GLuint buffer1,GLintptr offset1,GLsizeiptr size1)
{
#ifdef __cplusplus
	static PFNGLTEXBUFFERRANGEPROC_ALT fn=(PFNGLTEXBUFFERRANGEPROC_ALT)glaltGetProcAddressVersion("glTexBufferRange",4,3);
#else
	static PFNGLTEXBUFFERRANGEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLTEXBUFFERRANGEPROC_ALT)glaltGetProcAddressVersion("glTexBufferRange",4,3); }
#endif
	 fn(target1,internalformat1,buffer1,offset1,size1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_TexImage2DMultisample
#define GL_ALT_FUNDEF_TexImage2DMultisample
typedef void (*PFNGLTEXIMAGE2DMULTISAMPLEPROC_ALT)(GLenum,GLsizei,GLenum,GLsizei,GLsizei,GLboolean);
static inline void glTexImage2DMultisample(GLenum target1,GLsizei samples1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLboolean fixedsamplelocations1)
{
#ifdef __cplusplus
	static PFNGLTEXIMAGE2DMULTISAMPLEPROC_ALT fn=(PFNGLTEXIMAGE2DMULTISAMPLEPROC_ALT)glaltGetProcAddressVersion("glTexImage2DMultisample",4,3);
#else
	static PFNGLTEXIMAGE2DMULTISAMPLEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLTEXIMAGE2DMULTISAMPLEPROC_ALT)glaltGetProcAddressVersion("glTexImage2DMultisample",4,3); }
#endif
	 fn(target1,samples1,internalformat1,width1,height1,fixedsamplelocations1);
}
#endif
#endif

#ifndef GL_VERSION_1_2
#ifndef	GL_ALT_FUNDEF_TexImage3D
#define GL_ALT_FUNDEF_TexImage3D
typedef void (*PFNGLTEXIMAGE3DPROC_ALT)(GLenum,GLint,GLint,GLsizei,GLsizei,GLsizei,GLint,GLenum,GLenum,const void *);
static inline void glTexImage3D(GLenum target1,GLint level1,GLint internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLint border1,GLenum format1,GLenum type1,const void * pixels1)
{
#ifdef __cplusplus
	static PFNGLTEXIMAGE3DPROC_ALT fn=(PFNGLTEXIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glTexImage3D",4,3);
#else
	static PFNGLTEXIMAGE3DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLTEXIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glTexImage3D",4,3); }
#endif
	 fn(target1,level1,internalformat1,width1,height1,depth1,border1,format1,type1,pixels1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_TexImage3DMultisample
#define GL_ALT_FUNDEF_TexImage3DMultisample
typedef void (*PFNGLTEXIMAGE3DMULTISAMPLEPROC_ALT)(GLenum,GLsizei,GLenum,GLsizei,GLsizei,GLsizei,GLboolean);
static inline void glTexImage3DMultisample(GLenum target1,GLsizei samples1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLboolean fixedsamplelocations1)
{
#ifdef __cplusplus
	static PFNGLTEXIMAGE3DMULTISAMPLEPROC_ALT fn=(PFNGLTEXIMAGE3DMULTISAMPLEPROC_ALT)glaltGetProcAddressVersion("glTexImage3DMultisample",4,3);
#else
	static PFNGLTEXIMAGE3DMULTISAMPLEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLTEXIMAGE3DMULTISAMPLEPROC_ALT)glaltGetProcAddressVersion("glTexImage3DMultisample",4,3); }
#endif
	 fn(target1,samples1,internalformat1,width1,height1,depth1,fixedsamplelocations1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_TexParameterIiv
#define GL_ALT_FUNDEF_TexParameterIiv
typedef void (*PFNGLTEXPARAMETERIIVPROC_ALT)(GLenum,GLenum,const GLint *);
static inline void glTexParameterIiv(GLenum target1,GLenum pname1,const GLint * params1)
{
#ifdef __cplusplus
	static PFNGLTEXPARAMETERIIVPROC_ALT fn=(PFNGLTEXPARAMETERIIVPROC_ALT)glaltGetProcAddressVersion("glTexParameterIiv",4,3);
#else
	static PFNGLTEXPARAMETERIIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLTEXPARAMETERIIVPROC_ALT)glaltGetProcAddressVersion("glTexParameterIiv",4,3); }
#endif
	 fn(target1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_TexParameterIuiv
#define GL_ALT_FUNDEF_TexParameterIuiv
typedef void (*PFNGLTEXPARAMETERIUIVPROC_ALT)(GLenum,GLenum,const GLuint *);
static inline void glTexParameterIuiv(GLenum target1,GLenum pname1,const GLuint * params1)
{
#ifdef __cplusplus
	static PFNGLTEXPARAMETERIUIVPROC_ALT fn=(PFNGLTEXPARAMETERIUIVPROC_ALT)glaltGetProcAddressVersion("glTexParameterIuiv",4,3);
#else
	static PFNGLTEXPARAMETERIUIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLTEXPARAMETERIUIVPROC_ALT)glaltGetProcAddressVersion("glTexParameterIuiv",4,3); }
#endif
	 fn(target1,pname1,params1);
}
#endif
#endif

#ifndef GL_VERSION_4_2
#ifndef	GL_ALT_FUNDEF_TexStorage1D
#define GL_ALT_FUNDEF_TexStorage1D
typedef void (*PFNGLTEXSTORAGE1DPROC_ALT)(GLenum,GLsizei,GLenum,GLsizei);
static inline void glTexStorage1D(GLenum target1,GLsizei levels1,GLenum internalformat1,GLsizei width1)
{
#ifdef __cplusplus
	static PFNGLTEXSTORAGE1DPROC_ALT fn=(PFNGLTEXSTORAGE1DPROC_ALT)glaltGetProcAddressVersion("glTexStorage1D",4,3);
#else
	static PFNGLTEXSTORAGE1DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLTEXSTORAGE1DPROC_ALT)glaltGetProcAddressVersion("glTexStorage1D",4,3); }
#endif
	 fn(target1,levels1,internalformat1,width1);
}
#endif
#endif

#ifndef GL_VERSION_4_2
#ifndef	GL_ALT_FUNDEF_TexStorage2D
#define GL_ALT_FUNDEF_TexStorage2D
typedef void (*PFNGLTEXSTORAGE2DPROC_ALT)(GLenum,GLsizei,GLenum,GLsizei,GLsizei);
static inline void glTexStorage2D(GLenum target1,GLsizei levels1,GLenum internalformat1,GLsizei width1,GLsizei height1)
{
#ifdef __cplusplus
	static PFNGLTEXSTORAGE2DPROC_ALT fn=(PFNGLTEXSTORAGE2DPROC_ALT)glaltGetProcAddressVersion("glTexStorage2D",4,3);
#else
	static PFNGLTEXSTORAGE2DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLTEXSTORAGE2DPROC_ALT)glaltGetProcAddressVersion("glTexStorage2D",4,3); }
#endif
	 fn(target1,levels1,internalformat1,width1,height1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_TexStorage2DMultisample
#define GL_ALT_FUNDEF_TexStorage2DMultisample
typedef void (*PFNGLTEXSTORAGE2DMULTISAMPLEPROC_ALT)(GLenum,GLsizei,GLenum,GLsizei,GLsizei,GLboolean);
static inline void glTexStorage2DMultisample(GLenum target1,GLsizei samples1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLboolean fixedsamplelocations1)
{
#ifdef __cplusplus
	static PFNGLTEXSTORAGE2DMULTISAMPLEPROC_ALT fn=(PFNGLTEXSTORAGE2DMULTISAMPLEPROC_ALT)glaltGetProcAddressVersion("glTexStorage2DMultisample",4,3);
#else
	static PFNGLTEXSTORAGE2DMULTISAMPLEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLTEXSTORAGE2DMULTISAMPLEPROC_ALT)glaltGetProcAddressVersion("glTexStorage2DMultisample",4,3); }
#endif
	 fn(target1,samples1,internalformat1,width1,height1,fixedsamplelocations1);
}
#endif
#endif

#ifndef GL_VERSION_4_2
#ifndef	GL_ALT_FUNDEF_TexStorage3D
#define GL_ALT_FUNDEF_TexStorage3D
typedef void (*PFNGLTEXSTORAGE3DPROC_ALT)(GLenum,GLsizei,GLenum,GLsizei,GLsizei,GLsizei);
static inline void glTexStorage3D(GLenum target1,GLsizei levels1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1)
{
#ifdef __cplusplus
	static PFNGLTEXSTORAGE3DPROC_ALT fn=(PFNGLTEXSTORAGE3DPROC_ALT)glaltGetProcAddressVersion("glTexStorage3D",4,3);
#else
	static PFNGLTEXSTORAGE3DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLTEXSTORAGE3DPROC_ALT)glaltGetProcAddressVersion("glTexStorage3D",4,3); }
#endif
	 fn(target1,levels1,internalformat1,width1,height1,depth1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_TexStorage3DMultisample
#define GL_ALT_FUNDEF_TexStorage3DMultisample
typedef void (*PFNGLTEXSTORAGE3DMULTISAMPLEPROC_ALT)(GLenum,GLsizei,GLenum,GLsizei,GLsizei,GLsizei,GLboolean);
static inline void glTexStorage3DMultisample(GLenum target1,GLsizei samples1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLboolean fixedsamplelocations1)
{
#ifdef __cplusplus
	static PFNGLTEXSTORAGE3DMULTISAMPLEPROC_ALT fn=(PFNGLTEXSTORAGE3DMULTISAMPLEPROC_ALT)glaltGetProcAddressVersion("glTexStorage3DMultisample",4,3);
#else
	static PFNGLTEXSTORAGE3DMULTISAMPLEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLTEXSTORAGE3DMULTISAMPLEPROC_ALT)glaltGetProcAddressVersion("glTexStorage3DMultisample",4,3); }
#endif
	 fn(target1,samples1,internalformat1,width1,height1,depth1,fixedsamplelocations1);
}
#endif
#endif

#ifndef GL_VERSION_1_2
#ifndef	GL_ALT_FUNDEF_TexSubImage3D
#define GL_ALT_FUNDEF_TexSubImage3D
typedef void (*PFNGLTEXSUBIMAGE3DPROC_ALT)(GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,const void *);
static inline void glTexSubImage3D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLsizei width1,GLsizei height1,GLsizei depth1,GLenum format1,GLenum type1,const void * pixels1)
{
#ifdef __cplusplus
	static PFNGLTEXSUBIMAGE3DPROC_ALT fn=(PFNGLTEXSUBIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glTexSubImage3D",4,3);
#else
	static PFNGLTEXSUBIMAGE3DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLTEXSUBIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glTexSubImage3D",4,3); }
#endif
	 fn(target1,level1,xoffset1,yoffset1,zoffset1,width1,height1,depth1,format1,type1,pixels1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_TextureView
#define GL_ALT_FUNDEF_TextureView
typedef void (*PFNGLTEXTUREVIEWPROC_ALT)(GLuint,GLenum,GLuint,GLenum,GLuint,GLuint,GLuint,GLuint);
static inline void glTextureView(GLuint texture1,GLenum target1,GLuint origtexture1,GLenum internalformat1,GLuint minlevel1,GLuint numlevels1,GLuint minlayer1,GLuint numlayers1)
{
#ifdef __cplusplus
	static PFNGLTEXTUREVIEWPROC_ALT fn=(PFNGLTEXTUREVIEWPROC_ALT)glaltGetProcAddressVersion("glTextureView",4,3);
#else
	static PFNGLTEXTUREVIEWPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLTEXTUREVIEWPROC_ALT)glaltGetProcAddressVersion("glTextureView",4,3); }
#endif
	 fn(texture1,target1,origtexture1,internalformat1,minlevel1,numlevels1,minlayer1,numlayers1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_TransformFeedbackVaryings
#define GL_ALT_FUNDEF_TransformFeedbackVaryings
typedef void (*PFNGLTRANSFORMFEEDBACKVARYINGSPROC_ALT)(GLuint,GLsizei,const GLchar *const*,GLenum);
static inline void glTransformFeedbackVaryings(GLuint program1,GLsizei count1,const GLchar *const* varyings1,GLenum bufferMode1)
{
#ifdef __cplusplus
	static PFNGLTRANSFORMFEEDBACKVARYINGSPROC_ALT fn=(PFNGLTRANSFORMFEEDBACKVARYINGSPROC_ALT)glaltGetProcAddressVersion("glTransformFeedbackVaryings",4,3);
#else
	static PFNGLTRANSFORMFEEDBACKVARYINGSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLTRANSFORMFEEDBACKVARYINGSPROC_ALT)glaltGetProcAddressVersion("glTransformFeedbackVaryings",4,3); }
#endif
	 fn(program1,count1,varyings1,bufferMode1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_Uniform1d
#define GL_ALT_FUNDEF_Uniform1d
typedef void (*PFNGLUNIFORM1DPROC_ALT)(GLint,GLdouble);
static inline void glUniform1d(GLint location1,GLdouble x1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM1DPROC_ALT fn=(PFNGLUNIFORM1DPROC_ALT)glaltGetProcAddressVersion("glUniform1d",4,3);
#else
	static PFNGLUNIFORM1DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM1DPROC_ALT)glaltGetProcAddressVersion("glUniform1d",4,3); }
#endif
	 fn(location1,x1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_Uniform1dv
#define GL_ALT_FUNDEF_Uniform1dv
typedef void (*PFNGLUNIFORM1DVPROC_ALT)(GLint,GLsizei,const GLdouble *);
static inline void glUniform1dv(GLint location1,GLsizei count1,const GLdouble * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM1DVPROC_ALT fn=(PFNGLUNIFORM1DVPROC_ALT)glaltGetProcAddressVersion("glUniform1dv",4,3);
#else
	static PFNGLUNIFORM1DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM1DVPROC_ALT)glaltGetProcAddressVersion("glUniform1dv",4,3); }
#endif
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform1f
#define GL_ALT_FUNDEF_Uniform1f
typedef void (*PFNGLUNIFORM1FPROC_ALT)(GLint,GLfloat);
static inline void glUniform1f(GLint location1,GLfloat v01)
{
#ifdef __cplusplus
	static PFNGLUNIFORM1FPROC_ALT fn=(PFNGLUNIFORM1FPROC_ALT)glaltGetProcAddressVersion("glUniform1f",4,3);
#else
	static PFNGLUNIFORM1FPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM1FPROC_ALT)glaltGetProcAddressVersion("glUniform1f",4,3); }
#endif
	 fn(location1,v01);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform1fv
#define GL_ALT_FUNDEF_Uniform1fv
typedef void (*PFNGLUNIFORM1FVPROC_ALT)(GLint,GLsizei,const GLfloat *);
static inline void glUniform1fv(GLint location1,GLsizei count1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM1FVPROC_ALT fn=(PFNGLUNIFORM1FVPROC_ALT)glaltGetProcAddressVersion("glUniform1fv",4,3);
#else
	static PFNGLUNIFORM1FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM1FVPROC_ALT)glaltGetProcAddressVersion("glUniform1fv",4,3); }
#endif
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform1i
#define GL_ALT_FUNDEF_Uniform1i
typedef void (*PFNGLUNIFORM1IPROC_ALT)(GLint,GLint);
static inline void glUniform1i(GLint location1,GLint v01)
{
#ifdef __cplusplus
	static PFNGLUNIFORM1IPROC_ALT fn=(PFNGLUNIFORM1IPROC_ALT)glaltGetProcAddressVersion("glUniform1i",4,3);
#else
	static PFNGLUNIFORM1IPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM1IPROC_ALT)glaltGetProcAddressVersion("glUniform1i",4,3); }
#endif
	 fn(location1,v01);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform1iv
#define GL_ALT_FUNDEF_Uniform1iv
typedef void (*PFNGLUNIFORM1IVPROC_ALT)(GLint,GLsizei,const GLint *);
static inline void glUniform1iv(GLint location1,GLsizei count1,const GLint * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM1IVPROC_ALT fn=(PFNGLUNIFORM1IVPROC_ALT)glaltGetProcAddressVersion("glUniform1iv",4,3);
#else
	static PFNGLUNIFORM1IVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM1IVPROC_ALT)glaltGetProcAddressVersion("glUniform1iv",4,3); }
#endif
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_Uniform1ui
#define GL_ALT_FUNDEF_Uniform1ui
typedef void (*PFNGLUNIFORM1UIPROC_ALT)(GLint,GLuint);
static inline void glUniform1ui(GLint location1,GLuint v01)
{
#ifdef __cplusplus
	static PFNGLUNIFORM1UIPROC_ALT fn=(PFNGLUNIFORM1UIPROC_ALT)glaltGetProcAddressVersion("glUniform1ui",4,3);
#else
	static PFNGLUNIFORM1UIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM1UIPROC_ALT)glaltGetProcAddressVersion("glUniform1ui",4,3); }
#endif
	 fn(location1,v01);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_Uniform1uiv
#define GL_ALT_FUNDEF_Uniform1uiv
typedef void (*PFNGLUNIFORM1UIVPROC_ALT)(GLint,GLsizei,const GLuint *);
static inline void glUniform1uiv(GLint location1,GLsizei count1,const GLuint * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM1UIVPROC_ALT fn=(PFNGLUNIFORM1UIVPROC_ALT)glaltGetProcAddressVersion("glUniform1uiv",4,3);
#else
	static PFNGLUNIFORM1UIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM1UIVPROC_ALT)glaltGetProcAddressVersion("glUniform1uiv",4,3); }
#endif
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_Uniform2d
#define GL_ALT_FUNDEF_Uniform2d
typedef void (*PFNGLUNIFORM2DPROC_ALT)(GLint,GLdouble,GLdouble);
static inline void glUniform2d(GLint location1,GLdouble x1,GLdouble y1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM2DPROC_ALT fn=(PFNGLUNIFORM2DPROC_ALT)glaltGetProcAddressVersion("glUniform2d",4,3);
#else
	static PFNGLUNIFORM2DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM2DPROC_ALT)glaltGetProcAddressVersion("glUniform2d",4,3); }
#endif
	 fn(location1,x1,y1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_Uniform2dv
#define GL_ALT_FUNDEF_Uniform2dv
typedef void (*PFNGLUNIFORM2DVPROC_ALT)(GLint,GLsizei,const GLdouble *);
static inline void glUniform2dv(GLint location1,GLsizei count1,const GLdouble * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM2DVPROC_ALT fn=(PFNGLUNIFORM2DVPROC_ALT)glaltGetProcAddressVersion("glUniform2dv",4,3);
#else
	static PFNGLUNIFORM2DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM2DVPROC_ALT)glaltGetProcAddressVersion("glUniform2dv",4,3); }
#endif
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform2f
#define GL_ALT_FUNDEF_Uniform2f
typedef void (*PFNGLUNIFORM2FPROC_ALT)(GLint,GLfloat,GLfloat);
static inline void glUniform2f(GLint location1,GLfloat v01,GLfloat v11)
{
#ifdef __cplusplus
	static PFNGLUNIFORM2FPROC_ALT fn=(PFNGLUNIFORM2FPROC_ALT)glaltGetProcAddressVersion("glUniform2f",4,3);
#else
	static PFNGLUNIFORM2FPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM2FPROC_ALT)glaltGetProcAddressVersion("glUniform2f",4,3); }
#endif
	 fn(location1,v01,v11);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform2fv
#define GL_ALT_FUNDEF_Uniform2fv
typedef void (*PFNGLUNIFORM2FVPROC_ALT)(GLint,GLsizei,const GLfloat *);
static inline void glUniform2fv(GLint location1,GLsizei count1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM2FVPROC_ALT fn=(PFNGLUNIFORM2FVPROC_ALT)glaltGetProcAddressVersion("glUniform2fv",4,3);
#else
	static PFNGLUNIFORM2FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM2FVPROC_ALT)glaltGetProcAddressVersion("glUniform2fv",4,3); }
#endif
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform2i
#define GL_ALT_FUNDEF_Uniform2i
typedef void (*PFNGLUNIFORM2IPROC_ALT)(GLint,GLint,GLint);
static inline void glUniform2i(GLint location1,GLint v01,GLint v11)
{
#ifdef __cplusplus
	static PFNGLUNIFORM2IPROC_ALT fn=(PFNGLUNIFORM2IPROC_ALT)glaltGetProcAddressVersion("glUniform2i",4,3);
#else
	static PFNGLUNIFORM2IPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM2IPROC_ALT)glaltGetProcAddressVersion("glUniform2i",4,3); }
#endif
	 fn(location1,v01,v11);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform2iv
#define GL_ALT_FUNDEF_Uniform2iv
typedef void (*PFNGLUNIFORM2IVPROC_ALT)(GLint,GLsizei,const GLint *);
static inline void glUniform2iv(GLint location1,GLsizei count1,const GLint * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM2IVPROC_ALT fn=(PFNGLUNIFORM2IVPROC_ALT)glaltGetProcAddressVersion("glUniform2iv",4,3);
#else
	static PFNGLUNIFORM2IVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM2IVPROC_ALT)glaltGetProcAddressVersion("glUniform2iv",4,3); }
#endif
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_Uniform2ui
#define GL_ALT_FUNDEF_Uniform2ui
typedef void (*PFNGLUNIFORM2UIPROC_ALT)(GLint,GLuint,GLuint);
static inline void glUniform2ui(GLint location1,GLuint v01,GLuint v11)
{
#ifdef __cplusplus
	static PFNGLUNIFORM2UIPROC_ALT fn=(PFNGLUNIFORM2UIPROC_ALT)glaltGetProcAddressVersion("glUniform2ui",4,3);
#else
	static PFNGLUNIFORM2UIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM2UIPROC_ALT)glaltGetProcAddressVersion("glUniform2ui",4,3); }
#endif
	 fn(location1,v01,v11);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_Uniform2uiv
#define GL_ALT_FUNDEF_Uniform2uiv
typedef void (*PFNGLUNIFORM2UIVPROC_ALT)(GLint,GLsizei,const GLuint *);
static inline void glUniform2uiv(GLint location1,GLsizei count1,const GLuint * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM2UIVPROC_ALT fn=(PFNGLUNIFORM2UIVPROC_ALT)glaltGetProcAddressVersion("glUniform2uiv",4,3);
#else
	static PFNGLUNIFORM2UIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM2UIVPROC_ALT)glaltGetProcAddressVersion("glUniform2uiv",4,3); }
#endif
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_Uniform3d
#define GL_ALT_FUNDEF_Uniform3d
typedef void (*PFNGLUNIFORM3DPROC_ALT)(GLint,GLdouble,GLdouble,GLdouble);
static inline void glUniform3d(GLint location1,GLdouble x1,GLdouble y1,GLdouble z1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM3DPROC_ALT fn=(PFNGLUNIFORM3DPROC_ALT)glaltGetProcAddressVersion("glUniform3d",4,3);
#else
	static PFNGLUNIFORM3DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM3DPROC_ALT)glaltGetProcAddressVersion("glUniform3d",4,3); }
#endif
	 fn(location1,x1,y1,z1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_Uniform3dv
#define GL_ALT_FUNDEF_Uniform3dv
typedef void (*PFNGLUNIFORM3DVPROC_ALT)(GLint,GLsizei,const GLdouble *);
static inline void glUniform3dv(GLint location1,GLsizei count1,const GLdouble * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM3DVPROC_ALT fn=(PFNGLUNIFORM3DVPROC_ALT)glaltGetProcAddressVersion("glUniform3dv",4,3);
#else
	static PFNGLUNIFORM3DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM3DVPROC_ALT)glaltGetProcAddressVersion("glUniform3dv",4,3); }
#endif
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform3f
#define GL_ALT_FUNDEF_Uniform3f
typedef void (*PFNGLUNIFORM3FPROC_ALT)(GLint,GLfloat,GLfloat,GLfloat);
static inline void glUniform3f(GLint location1,GLfloat v01,GLfloat v11,GLfloat v21)
{
#ifdef __cplusplus
	static PFNGLUNIFORM3FPROC_ALT fn=(PFNGLUNIFORM3FPROC_ALT)glaltGetProcAddressVersion("glUniform3f",4,3);
#else
	static PFNGLUNIFORM3FPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM3FPROC_ALT)glaltGetProcAddressVersion("glUniform3f",4,3); }
#endif
	 fn(location1,v01,v11,v21);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform3fv
#define GL_ALT_FUNDEF_Uniform3fv
typedef void (*PFNGLUNIFORM3FVPROC_ALT)(GLint,GLsizei,const GLfloat *);
static inline void glUniform3fv(GLint location1,GLsizei count1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM3FVPROC_ALT fn=(PFNGLUNIFORM3FVPROC_ALT)glaltGetProcAddressVersion("glUniform3fv",4,3);
#else
	static PFNGLUNIFORM3FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM3FVPROC_ALT)glaltGetProcAddressVersion("glUniform3fv",4,3); }
#endif
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform3i
#define GL_ALT_FUNDEF_Uniform3i
typedef void (*PFNGLUNIFORM3IPROC_ALT)(GLint,GLint,GLint,GLint);
static inline void glUniform3i(GLint location1,GLint v01,GLint v11,GLint v21)
{
#ifdef __cplusplus
	static PFNGLUNIFORM3IPROC_ALT fn=(PFNGLUNIFORM3IPROC_ALT)glaltGetProcAddressVersion("glUniform3i",4,3);
#else
	static PFNGLUNIFORM3IPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM3IPROC_ALT)glaltGetProcAddressVersion("glUniform3i",4,3); }
#endif
	 fn(location1,v01,v11,v21);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform3iv
#define GL_ALT_FUNDEF_Uniform3iv
typedef void (*PFNGLUNIFORM3IVPROC_ALT)(GLint,GLsizei,const GLint *);
static inline void glUniform3iv(GLint location1,GLsizei count1,const GLint * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM3IVPROC_ALT fn=(PFNGLUNIFORM3IVPROC_ALT)glaltGetProcAddressVersion("glUniform3iv",4,3);
#else
	static PFNGLUNIFORM3IVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM3IVPROC_ALT)glaltGetProcAddressVersion("glUniform3iv",4,3); }
#endif
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_Uniform3ui
#define GL_ALT_FUNDEF_Uniform3ui
typedef void (*PFNGLUNIFORM3UIPROC_ALT)(GLint,GLuint,GLuint,GLuint);
static inline void glUniform3ui(GLint location1,GLuint v01,GLuint v11,GLuint v21)
{
#ifdef __cplusplus
	static PFNGLUNIFORM3UIPROC_ALT fn=(PFNGLUNIFORM3UIPROC_ALT)glaltGetProcAddressVersion("glUniform3ui",4,3);
#else
	static PFNGLUNIFORM3UIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM3UIPROC_ALT)glaltGetProcAddressVersion("glUniform3ui",4,3); }
#endif
	 fn(location1,v01,v11,v21);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_Uniform3uiv
#define GL_ALT_FUNDEF_Uniform3uiv
typedef void (*PFNGLUNIFORM3UIVPROC_ALT)(GLint,GLsizei,const GLuint *);
static inline void glUniform3uiv(GLint location1,GLsizei count1,const GLuint * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM3UIVPROC_ALT fn=(PFNGLUNIFORM3UIVPROC_ALT)glaltGetProcAddressVersion("glUniform3uiv",4,3);
#else
	static PFNGLUNIFORM3UIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM3UIVPROC_ALT)glaltGetProcAddressVersion("glUniform3uiv",4,3); }
#endif
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_Uniform4d
#define GL_ALT_FUNDEF_Uniform4d
typedef void (*PFNGLUNIFORM4DPROC_ALT)(GLint,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void glUniform4d(GLint location1,GLdouble x1,GLdouble y1,GLdouble z1,GLdouble w1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM4DPROC_ALT fn=(PFNGLUNIFORM4DPROC_ALT)glaltGetProcAddressVersion("glUniform4d",4,3);
#else
	static PFNGLUNIFORM4DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM4DPROC_ALT)glaltGetProcAddressVersion("glUniform4d",4,3); }
#endif
	 fn(location1,x1,y1,z1,w1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_Uniform4dv
#define GL_ALT_FUNDEF_Uniform4dv
typedef void (*PFNGLUNIFORM4DVPROC_ALT)(GLint,GLsizei,const GLdouble *);
static inline void glUniform4dv(GLint location1,GLsizei count1,const GLdouble * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM4DVPROC_ALT fn=(PFNGLUNIFORM4DVPROC_ALT)glaltGetProcAddressVersion("glUniform4dv",4,3);
#else
	static PFNGLUNIFORM4DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM4DVPROC_ALT)glaltGetProcAddressVersion("glUniform4dv",4,3); }
#endif
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform4f
#define GL_ALT_FUNDEF_Uniform4f
typedef void (*PFNGLUNIFORM4FPROC_ALT)(GLint,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glUniform4f(GLint location1,GLfloat v01,GLfloat v11,GLfloat v21,GLfloat v31)
{
#ifdef __cplusplus
	static PFNGLUNIFORM4FPROC_ALT fn=(PFNGLUNIFORM4FPROC_ALT)glaltGetProcAddressVersion("glUniform4f",4,3);
#else
	static PFNGLUNIFORM4FPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM4FPROC_ALT)glaltGetProcAddressVersion("glUniform4f",4,3); }
#endif
	 fn(location1,v01,v11,v21,v31);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform4fv
#define GL_ALT_FUNDEF_Uniform4fv
typedef void (*PFNGLUNIFORM4FVPROC_ALT)(GLint,GLsizei,const GLfloat *);
static inline void glUniform4fv(GLint location1,GLsizei count1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM4FVPROC_ALT fn=(PFNGLUNIFORM4FVPROC_ALT)glaltGetProcAddressVersion("glUniform4fv",4,3);
#else
	static PFNGLUNIFORM4FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM4FVPROC_ALT)glaltGetProcAddressVersion("glUniform4fv",4,3); }
#endif
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform4i
#define GL_ALT_FUNDEF_Uniform4i
typedef void (*PFNGLUNIFORM4IPROC_ALT)(GLint,GLint,GLint,GLint,GLint);
static inline void glUniform4i(GLint location1,GLint v01,GLint v11,GLint v21,GLint v31)
{
#ifdef __cplusplus
	static PFNGLUNIFORM4IPROC_ALT fn=(PFNGLUNIFORM4IPROC_ALT)glaltGetProcAddressVersion("glUniform4i",4,3);
#else
	static PFNGLUNIFORM4IPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM4IPROC_ALT)glaltGetProcAddressVersion("glUniform4i",4,3); }
#endif
	 fn(location1,v01,v11,v21,v31);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_Uniform4iv
#define GL_ALT_FUNDEF_Uniform4iv
typedef void (*PFNGLUNIFORM4IVPROC_ALT)(GLint,GLsizei,const GLint *);
static inline void glUniform4iv(GLint location1,GLsizei count1,const GLint * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM4IVPROC_ALT fn=(PFNGLUNIFORM4IVPROC_ALT)glaltGetProcAddressVersion("glUniform4iv",4,3);
#else
	static PFNGLUNIFORM4IVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM4IVPROC_ALT)glaltGetProcAddressVersion("glUniform4iv",4,3); }
#endif
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_Uniform4ui
#define GL_ALT_FUNDEF_Uniform4ui
typedef void (*PFNGLUNIFORM4UIPROC_ALT)(GLint,GLuint,GLuint,GLuint,GLuint);
static inline void glUniform4ui(GLint location1,GLuint v01,GLuint v11,GLuint v21,GLuint v31)
{
#ifdef __cplusplus
	static PFNGLUNIFORM4UIPROC_ALT fn=(PFNGLUNIFORM4UIPROC_ALT)glaltGetProcAddressVersion("glUniform4ui",4,3);
#else
	static PFNGLUNIFORM4UIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM4UIPROC_ALT)glaltGetProcAddressVersion("glUniform4ui",4,3); }
#endif
	 fn(location1,v01,v11,v21,v31);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_Uniform4uiv
#define GL_ALT_FUNDEF_Uniform4uiv
typedef void (*PFNGLUNIFORM4UIVPROC_ALT)(GLint,GLsizei,const GLuint *);
static inline void glUniform4uiv(GLint location1,GLsizei count1,const GLuint * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORM4UIVPROC_ALT fn=(PFNGLUNIFORM4UIVPROC_ALT)glaltGetProcAddressVersion("glUniform4uiv",4,3);
#else
	static PFNGLUNIFORM4UIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORM4UIVPROC_ALT)glaltGetProcAddressVersion("glUniform4uiv",4,3); }
#endif
	 fn(location1,count1,value1);
}
#endif
#endif

#ifndef GL_VERSION_3_1
#ifndef	GL_ALT_FUNDEF_UniformBlockBinding
#define GL_ALT_FUNDEF_UniformBlockBinding
typedef void (*PFNGLUNIFORMBLOCKBINDINGPROC_ALT)(GLuint,GLuint,GLuint);
static inline void glUniformBlockBinding(GLuint program1,GLuint uniformBlockIndex1,GLuint uniformBlockBinding1)
{
#ifdef __cplusplus
	static PFNGLUNIFORMBLOCKBINDINGPROC_ALT fn=(PFNGLUNIFORMBLOCKBINDINGPROC_ALT)glaltGetProcAddressVersion("glUniformBlockBinding",4,3);
#else
	static PFNGLUNIFORMBLOCKBINDINGPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORMBLOCKBINDINGPROC_ALT)glaltGetProcAddressVersion("glUniformBlockBinding",4,3); }
#endif
	 fn(program1,uniformBlockIndex1,uniformBlockBinding1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_UniformMatrix2dv
#define GL_ALT_FUNDEF_UniformMatrix2dv
typedef void (*PFNGLUNIFORMMATRIX2DVPROC_ALT)(GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glUniformMatrix2dv(GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORMMATRIX2DVPROC_ALT fn=(PFNGLUNIFORMMATRIX2DVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix2dv",4,3);
#else
	static PFNGLUNIFORMMATRIX2DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORMMATRIX2DVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix2dv",4,3); }
#endif
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_UniformMatrix2fv
#define GL_ALT_FUNDEF_UniformMatrix2fv
typedef void (*PFNGLUNIFORMMATRIX2FVPROC_ALT)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glUniformMatrix2fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORMMATRIX2FVPROC_ALT fn=(PFNGLUNIFORMMATRIX2FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix2fv",4,3);
#else
	static PFNGLUNIFORMMATRIX2FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORMMATRIX2FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix2fv",4,3); }
#endif
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_UniformMatrix2x3dv
#define GL_ALT_FUNDEF_UniformMatrix2x3dv
typedef void (*PFNGLUNIFORMMATRIX2X3DVPROC_ALT)(GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glUniformMatrix2x3dv(GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORMMATRIX2X3DVPROC_ALT fn=(PFNGLUNIFORMMATRIX2X3DVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix2x3dv",4,3);
#else
	static PFNGLUNIFORMMATRIX2X3DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORMMATRIX2X3DVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix2x3dv",4,3); }
#endif
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_1
#ifndef	GL_ALT_FUNDEF_UniformMatrix2x3fv
#define GL_ALT_FUNDEF_UniformMatrix2x3fv
typedef void (*PFNGLUNIFORMMATRIX2X3FVPROC_ALT)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glUniformMatrix2x3fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORMMATRIX2X3FVPROC_ALT fn=(PFNGLUNIFORMMATRIX2X3FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix2x3fv",4,3);
#else
	static PFNGLUNIFORMMATRIX2X3FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORMMATRIX2X3FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix2x3fv",4,3); }
#endif
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_UniformMatrix2x4dv
#define GL_ALT_FUNDEF_UniformMatrix2x4dv
typedef void (*PFNGLUNIFORMMATRIX2X4DVPROC_ALT)(GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glUniformMatrix2x4dv(GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORMMATRIX2X4DVPROC_ALT fn=(PFNGLUNIFORMMATRIX2X4DVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix2x4dv",4,3);
#else
	static PFNGLUNIFORMMATRIX2X4DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORMMATRIX2X4DVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix2x4dv",4,3); }
#endif
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_1
#ifndef	GL_ALT_FUNDEF_UniformMatrix2x4fv
#define GL_ALT_FUNDEF_UniformMatrix2x4fv
typedef void (*PFNGLUNIFORMMATRIX2X4FVPROC_ALT)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glUniformMatrix2x4fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORMMATRIX2X4FVPROC_ALT fn=(PFNGLUNIFORMMATRIX2X4FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix2x4fv",4,3);
#else
	static PFNGLUNIFORMMATRIX2X4FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORMMATRIX2X4FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix2x4fv",4,3); }
#endif
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_UniformMatrix3dv
#define GL_ALT_FUNDEF_UniformMatrix3dv
typedef void (*PFNGLUNIFORMMATRIX3DVPROC_ALT)(GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glUniformMatrix3dv(GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORMMATRIX3DVPROC_ALT fn=(PFNGLUNIFORMMATRIX3DVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix3dv",4,3);
#else
	static PFNGLUNIFORMMATRIX3DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORMMATRIX3DVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix3dv",4,3); }
#endif
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_UniformMatrix3fv
#define GL_ALT_FUNDEF_UniformMatrix3fv
typedef void (*PFNGLUNIFORMMATRIX3FVPROC_ALT)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glUniformMatrix3fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORMMATRIX3FVPROC_ALT fn=(PFNGLUNIFORMMATRIX3FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix3fv",4,3);
#else
	static PFNGLUNIFORMMATRIX3FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORMMATRIX3FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix3fv",4,3); }
#endif
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_UniformMatrix3x2dv
#define GL_ALT_FUNDEF_UniformMatrix3x2dv
typedef void (*PFNGLUNIFORMMATRIX3X2DVPROC_ALT)(GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glUniformMatrix3x2dv(GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORMMATRIX3X2DVPROC_ALT fn=(PFNGLUNIFORMMATRIX3X2DVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix3x2dv",4,3);
#else
	static PFNGLUNIFORMMATRIX3X2DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORMMATRIX3X2DVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix3x2dv",4,3); }
#endif
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_1
#ifndef	GL_ALT_FUNDEF_UniformMatrix3x2fv
#define GL_ALT_FUNDEF_UniformMatrix3x2fv
typedef void (*PFNGLUNIFORMMATRIX3X2FVPROC_ALT)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glUniformMatrix3x2fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORMMATRIX3X2FVPROC_ALT fn=(PFNGLUNIFORMMATRIX3X2FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix3x2fv",4,3);
#else
	static PFNGLUNIFORMMATRIX3X2FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORMMATRIX3X2FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix3x2fv",4,3); }
#endif
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_UniformMatrix3x4dv
#define GL_ALT_FUNDEF_UniformMatrix3x4dv
typedef void (*PFNGLUNIFORMMATRIX3X4DVPROC_ALT)(GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glUniformMatrix3x4dv(GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORMMATRIX3X4DVPROC_ALT fn=(PFNGLUNIFORMMATRIX3X4DVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix3x4dv",4,3);
#else
	static PFNGLUNIFORMMATRIX3X4DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORMMATRIX3X4DVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix3x4dv",4,3); }
#endif
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_1
#ifndef	GL_ALT_FUNDEF_UniformMatrix3x4fv
#define GL_ALT_FUNDEF_UniformMatrix3x4fv
typedef void (*PFNGLUNIFORMMATRIX3X4FVPROC_ALT)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glUniformMatrix3x4fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORMMATRIX3X4FVPROC_ALT fn=(PFNGLUNIFORMMATRIX3X4FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix3x4fv",4,3);
#else
	static PFNGLUNIFORMMATRIX3X4FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORMMATRIX3X4FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix3x4fv",4,3); }
#endif
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_UniformMatrix4dv
#define GL_ALT_FUNDEF_UniformMatrix4dv
typedef void (*PFNGLUNIFORMMATRIX4DVPROC_ALT)(GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glUniformMatrix4dv(GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORMMATRIX4DVPROC_ALT fn=(PFNGLUNIFORMMATRIX4DVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix4dv",4,3);
#else
	static PFNGLUNIFORMMATRIX4DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORMMATRIX4DVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix4dv",4,3); }
#endif
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_UniformMatrix4fv
#define GL_ALT_FUNDEF_UniformMatrix4fv
typedef void (*PFNGLUNIFORMMATRIX4FVPROC_ALT)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glUniformMatrix4fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORMMATRIX4FVPROC_ALT fn=(PFNGLUNIFORMMATRIX4FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix4fv",4,3);
#else
	static PFNGLUNIFORMMATRIX4FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORMMATRIX4FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix4fv",4,3); }
#endif
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_UniformMatrix4x2dv
#define GL_ALT_FUNDEF_UniformMatrix4x2dv
typedef void (*PFNGLUNIFORMMATRIX4X2DVPROC_ALT)(GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glUniformMatrix4x2dv(GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORMMATRIX4X2DVPROC_ALT fn=(PFNGLUNIFORMMATRIX4X2DVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix4x2dv",4,3);
#else
	static PFNGLUNIFORMMATRIX4X2DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORMMATRIX4X2DVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix4x2dv",4,3); }
#endif
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_1
#ifndef	GL_ALT_FUNDEF_UniformMatrix4x2fv
#define GL_ALT_FUNDEF_UniformMatrix4x2fv
typedef void (*PFNGLUNIFORMMATRIX4X2FVPROC_ALT)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glUniformMatrix4x2fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORMMATRIX4X2FVPROC_ALT fn=(PFNGLUNIFORMMATRIX4X2FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix4x2fv",4,3);
#else
	static PFNGLUNIFORMMATRIX4X2FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORMMATRIX4X2FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix4x2fv",4,3); }
#endif
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_UniformMatrix4x3dv
#define GL_ALT_FUNDEF_UniformMatrix4x3dv
typedef void (*PFNGLUNIFORMMATRIX4X3DVPROC_ALT)(GLint,GLsizei,GLboolean,const GLdouble *);
static inline void glUniformMatrix4x3dv(GLint location1,GLsizei count1,GLboolean transpose1,const GLdouble * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORMMATRIX4X3DVPROC_ALT fn=(PFNGLUNIFORMMATRIX4X3DVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix4x3dv",4,3);
#else
	static PFNGLUNIFORMMATRIX4X3DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORMMATRIX4X3DVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix4x3dv",4,3); }
#endif
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_1
#ifndef	GL_ALT_FUNDEF_UniformMatrix4x3fv
#define GL_ALT_FUNDEF_UniformMatrix4x3fv
typedef void (*PFNGLUNIFORMMATRIX4X3FVPROC_ALT)(GLint,GLsizei,GLboolean,const GLfloat *);
static inline void glUniformMatrix4x3fv(GLint location1,GLsizei count1,GLboolean transpose1,const GLfloat * value1)
{
#ifdef __cplusplus
	static PFNGLUNIFORMMATRIX4X3FVPROC_ALT fn=(PFNGLUNIFORMMATRIX4X3FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix4x3fv",4,3);
#else
	static PFNGLUNIFORMMATRIX4X3FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORMMATRIX4X3FVPROC_ALT)glaltGetProcAddressVersion("glUniformMatrix4x3fv",4,3); }
#endif
	 fn(location1,count1,transpose1,value1);
}
#endif
#endif

#ifndef GL_VERSION_4_0
#ifndef	GL_ALT_FUNDEF_UniformSubroutinesuiv
#define GL_ALT_FUNDEF_UniformSubroutinesuiv
typedef void (*PFNGLUNIFORMSUBROUTINESUIVPROC_ALT)(GLenum,GLsizei,const GLuint *);
static inline void glUniformSubroutinesuiv(GLenum shadertype1,GLsizei count1,const GLuint * indices1)
{
#ifdef __cplusplus
	static PFNGLUNIFORMSUBROUTINESUIVPROC_ALT fn=(PFNGLUNIFORMSUBROUTINESUIVPROC_ALT)glaltGetProcAddressVersion("glUniformSubroutinesuiv",4,3);
#else
	static PFNGLUNIFORMSUBROUTINESUIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNIFORMSUBROUTINESUIVPROC_ALT)glaltGetProcAddressVersion("glUniformSubroutinesuiv",4,3); }
#endif
	 fn(shadertype1,count1,indices1);
}
#endif
#endif

#ifndef GL_VERSION_1_5
#ifndef	GL_ALT_FUNDEF_UnmapBuffer
#define GL_ALT_FUNDEF_UnmapBuffer
typedef GLboolean (*PFNGLUNMAPBUFFERPROC_ALT)(GLenum);
static inline GLboolean glUnmapBuffer(GLenum target1)
{
#ifdef __cplusplus
	static PFNGLUNMAPBUFFERPROC_ALT fn=(PFNGLUNMAPBUFFERPROC_ALT)glaltGetProcAddressVersion("glUnmapBuffer",4,3);
#else
	static PFNGLUNMAPBUFFERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUNMAPBUFFERPROC_ALT)glaltGetProcAddressVersion("glUnmapBuffer",4,3); }
#endif
	return fn(target1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_UseProgram
#define GL_ALT_FUNDEF_UseProgram
typedef void (*PFNGLUSEPROGRAMPROC_ALT)(GLuint);
static inline void glUseProgram(GLuint program1)
{
#ifdef __cplusplus
	static PFNGLUSEPROGRAMPROC_ALT fn=(PFNGLUSEPROGRAMPROC_ALT)glaltGetProcAddressVersion("glUseProgram",4,3);
#else
	static PFNGLUSEPROGRAMPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUSEPROGRAMPROC_ALT)glaltGetProcAddressVersion("glUseProgram",4,3); }
#endif
	 fn(program1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_UseProgramStages
#define GL_ALT_FUNDEF_UseProgramStages
typedef void (*PFNGLUSEPROGRAMSTAGESPROC_ALT)(GLuint,GLbitfield,GLuint);
static inline void glUseProgramStages(GLuint pipeline1,GLbitfield stages1,GLuint program1)
{
#ifdef __cplusplus
	static PFNGLUSEPROGRAMSTAGESPROC_ALT fn=(PFNGLUSEPROGRAMSTAGESPROC_ALT)glaltGetProcAddressVersion("glUseProgramStages",4,3);
#else
	static PFNGLUSEPROGRAMSTAGESPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLUSEPROGRAMSTAGESPROC_ALT)glaltGetProcAddressVersion("glUseProgramStages",4,3); }
#endif
	 fn(pipeline1,stages1,program1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_ValidateProgram
#define GL_ALT_FUNDEF_ValidateProgram
typedef void (*PFNGLVALIDATEPROGRAMPROC_ALT)(GLuint);
static inline void glValidateProgram(GLuint program1)
{
#ifdef __cplusplus
	static PFNGLVALIDATEPROGRAMPROC_ALT fn=(PFNGLVALIDATEPROGRAMPROC_ALT)glaltGetProcAddressVersion("glValidateProgram",4,3);
#else
	static PFNGLVALIDATEPROGRAMPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVALIDATEPROGRAMPROC_ALT)glaltGetProcAddressVersion("glValidateProgram",4,3); }
#endif
	 fn(program1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ValidateProgramPipeline
#define GL_ALT_FUNDEF_ValidateProgramPipeline
typedef void (*PFNGLVALIDATEPROGRAMPIPELINEPROC_ALT)(GLuint);
static inline void glValidateProgramPipeline(GLuint pipeline1)
{
#ifdef __cplusplus
	static PFNGLVALIDATEPROGRAMPIPELINEPROC_ALT fn=(PFNGLVALIDATEPROGRAMPIPELINEPROC_ALT)glaltGetProcAddressVersion("glValidateProgramPipeline",4,3);
#else
	static PFNGLVALIDATEPROGRAMPIPELINEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVALIDATEPROGRAMPIPELINEPROC_ALT)glaltGetProcAddressVersion("glValidateProgramPipeline",4,3); }
#endif
	 fn(pipeline1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib1d
#define GL_ALT_FUNDEF_VertexAttrib1d
typedef void (*PFNGLVERTEXATTRIB1DPROC_ALT)(GLuint,GLdouble);
static inline void glVertexAttrib1d(GLuint index1,GLdouble x1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB1DPROC_ALT fn=(PFNGLVERTEXATTRIB1DPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib1d",4,3);
#else
	static PFNGLVERTEXATTRIB1DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB1DPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib1d",4,3); }
#endif
	 fn(index1,x1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib1dv
#define GL_ALT_FUNDEF_VertexAttrib1dv
typedef void (*PFNGLVERTEXATTRIB1DVPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttrib1dv(GLuint index1,const GLdouble * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB1DVPROC_ALT fn=(PFNGLVERTEXATTRIB1DVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib1dv",4,3);
#else
	static PFNGLVERTEXATTRIB1DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB1DVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib1dv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib1f
#define GL_ALT_FUNDEF_VertexAttrib1f
typedef void (*PFNGLVERTEXATTRIB1FPROC_ALT)(GLuint,GLfloat);
static inline void glVertexAttrib1f(GLuint index1,GLfloat x1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB1FPROC_ALT fn=(PFNGLVERTEXATTRIB1FPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib1f",4,3);
#else
	static PFNGLVERTEXATTRIB1FPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB1FPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib1f",4,3); }
#endif
	 fn(index1,x1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib1fv
#define GL_ALT_FUNDEF_VertexAttrib1fv
typedef void (*PFNGLVERTEXATTRIB1FVPROC_ALT)(GLuint,const GLfloat *);
static inline void glVertexAttrib1fv(GLuint index1,const GLfloat * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB1FVPROC_ALT fn=(PFNGLVERTEXATTRIB1FVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib1fv",4,3);
#else
	static PFNGLVERTEXATTRIB1FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB1FVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib1fv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib1s
#define GL_ALT_FUNDEF_VertexAttrib1s
typedef void (*PFNGLVERTEXATTRIB1SPROC_ALT)(GLuint,GLshort);
static inline void glVertexAttrib1s(GLuint index1,GLshort x1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB1SPROC_ALT fn=(PFNGLVERTEXATTRIB1SPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib1s",4,3);
#else
	static PFNGLVERTEXATTRIB1SPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB1SPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib1s",4,3); }
#endif
	 fn(index1,x1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib1sv
#define GL_ALT_FUNDEF_VertexAttrib1sv
typedef void (*PFNGLVERTEXATTRIB1SVPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttrib1sv(GLuint index1,const GLshort * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB1SVPROC_ALT fn=(PFNGLVERTEXATTRIB1SVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib1sv",4,3);
#else
	static PFNGLVERTEXATTRIB1SVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB1SVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib1sv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib2d
#define GL_ALT_FUNDEF_VertexAttrib2d
typedef void (*PFNGLVERTEXATTRIB2DPROC_ALT)(GLuint,GLdouble,GLdouble);
static inline void glVertexAttrib2d(GLuint index1,GLdouble x1,GLdouble y1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB2DPROC_ALT fn=(PFNGLVERTEXATTRIB2DPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib2d",4,3);
#else
	static PFNGLVERTEXATTRIB2DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB2DPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib2d",4,3); }
#endif
	 fn(index1,x1,y1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib2dv
#define GL_ALT_FUNDEF_VertexAttrib2dv
typedef void (*PFNGLVERTEXATTRIB2DVPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttrib2dv(GLuint index1,const GLdouble * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB2DVPROC_ALT fn=(PFNGLVERTEXATTRIB2DVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib2dv",4,3);
#else
	static PFNGLVERTEXATTRIB2DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB2DVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib2dv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib2f
#define GL_ALT_FUNDEF_VertexAttrib2f
typedef void (*PFNGLVERTEXATTRIB2FPROC_ALT)(GLuint,GLfloat,GLfloat);
static inline void glVertexAttrib2f(GLuint index1,GLfloat x1,GLfloat y1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB2FPROC_ALT fn=(PFNGLVERTEXATTRIB2FPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib2f",4,3);
#else
	static PFNGLVERTEXATTRIB2FPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB2FPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib2f",4,3); }
#endif
	 fn(index1,x1,y1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib2fv
#define GL_ALT_FUNDEF_VertexAttrib2fv
typedef void (*PFNGLVERTEXATTRIB2FVPROC_ALT)(GLuint,const GLfloat *);
static inline void glVertexAttrib2fv(GLuint index1,const GLfloat * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB2FVPROC_ALT fn=(PFNGLVERTEXATTRIB2FVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib2fv",4,3);
#else
	static PFNGLVERTEXATTRIB2FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB2FVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib2fv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib2s
#define GL_ALT_FUNDEF_VertexAttrib2s
typedef void (*PFNGLVERTEXATTRIB2SPROC_ALT)(GLuint,GLshort,GLshort);
static inline void glVertexAttrib2s(GLuint index1,GLshort x1,GLshort y1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB2SPROC_ALT fn=(PFNGLVERTEXATTRIB2SPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib2s",4,3);
#else
	static PFNGLVERTEXATTRIB2SPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB2SPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib2s",4,3); }
#endif
	 fn(index1,x1,y1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib2sv
#define GL_ALT_FUNDEF_VertexAttrib2sv
typedef void (*PFNGLVERTEXATTRIB2SVPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttrib2sv(GLuint index1,const GLshort * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB2SVPROC_ALT fn=(PFNGLVERTEXATTRIB2SVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib2sv",4,3);
#else
	static PFNGLVERTEXATTRIB2SVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB2SVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib2sv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib3d
#define GL_ALT_FUNDEF_VertexAttrib3d
typedef void (*PFNGLVERTEXATTRIB3DPROC_ALT)(GLuint,GLdouble,GLdouble,GLdouble);
static inline void glVertexAttrib3d(GLuint index1,GLdouble x1,GLdouble y1,GLdouble z1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB3DPROC_ALT fn=(PFNGLVERTEXATTRIB3DPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib3d",4,3);
#else
	static PFNGLVERTEXATTRIB3DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB3DPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib3d",4,3); }
#endif
	 fn(index1,x1,y1,z1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib3dv
#define GL_ALT_FUNDEF_VertexAttrib3dv
typedef void (*PFNGLVERTEXATTRIB3DVPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttrib3dv(GLuint index1,const GLdouble * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB3DVPROC_ALT fn=(PFNGLVERTEXATTRIB3DVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib3dv",4,3);
#else
	static PFNGLVERTEXATTRIB3DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB3DVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib3dv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib3f
#define GL_ALT_FUNDEF_VertexAttrib3f
typedef void (*PFNGLVERTEXATTRIB3FPROC_ALT)(GLuint,GLfloat,GLfloat,GLfloat);
static inline void glVertexAttrib3f(GLuint index1,GLfloat x1,GLfloat y1,GLfloat z1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB3FPROC_ALT fn=(PFNGLVERTEXATTRIB3FPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib3f",4,3);
#else
	static PFNGLVERTEXATTRIB3FPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB3FPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib3f",4,3); }
#endif
	 fn(index1,x1,y1,z1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib3fv
#define GL_ALT_FUNDEF_VertexAttrib3fv
typedef void (*PFNGLVERTEXATTRIB3FVPROC_ALT)(GLuint,const GLfloat *);
static inline void glVertexAttrib3fv(GLuint index1,const GLfloat * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB3FVPROC_ALT fn=(PFNGLVERTEXATTRIB3FVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib3fv",4,3);
#else
	static PFNGLVERTEXATTRIB3FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB3FVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib3fv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib3s
#define GL_ALT_FUNDEF_VertexAttrib3s
typedef void (*PFNGLVERTEXATTRIB3SPROC_ALT)(GLuint,GLshort,GLshort,GLshort);
static inline void glVertexAttrib3s(GLuint index1,GLshort x1,GLshort y1,GLshort z1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB3SPROC_ALT fn=(PFNGLVERTEXATTRIB3SPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib3s",4,3);
#else
	static PFNGLVERTEXATTRIB3SPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB3SPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib3s",4,3); }
#endif
	 fn(index1,x1,y1,z1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib3sv
#define GL_ALT_FUNDEF_VertexAttrib3sv
typedef void (*PFNGLVERTEXATTRIB3SVPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttrib3sv(GLuint index1,const GLshort * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB3SVPROC_ALT fn=(PFNGLVERTEXATTRIB3SVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib3sv",4,3);
#else
	static PFNGLVERTEXATTRIB3SVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB3SVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib3sv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4Nbv
#define GL_ALT_FUNDEF_VertexAttrib4Nbv
typedef void (*PFNGLVERTEXATTRIB4NBVPROC_ALT)(GLuint,const GLbyte *);
static inline void glVertexAttrib4Nbv(GLuint index1,const GLbyte * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4NBVPROC_ALT fn=(PFNGLVERTEXATTRIB4NBVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Nbv",4,3);
#else
	static PFNGLVERTEXATTRIB4NBVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4NBVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Nbv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4Niv
#define GL_ALT_FUNDEF_VertexAttrib4Niv
typedef void (*PFNGLVERTEXATTRIB4NIVPROC_ALT)(GLuint,const GLint *);
static inline void glVertexAttrib4Niv(GLuint index1,const GLint * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4NIVPROC_ALT fn=(PFNGLVERTEXATTRIB4NIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Niv",4,3);
#else
	static PFNGLVERTEXATTRIB4NIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4NIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Niv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4Nsv
#define GL_ALT_FUNDEF_VertexAttrib4Nsv
typedef void (*PFNGLVERTEXATTRIB4NSVPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttrib4Nsv(GLuint index1,const GLshort * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4NSVPROC_ALT fn=(PFNGLVERTEXATTRIB4NSVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Nsv",4,3);
#else
	static PFNGLVERTEXATTRIB4NSVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4NSVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Nsv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4Nub
#define GL_ALT_FUNDEF_VertexAttrib4Nub
typedef void (*PFNGLVERTEXATTRIB4NUBPROC_ALT)(GLuint,GLubyte,GLubyte,GLubyte,GLubyte);
static inline void glVertexAttrib4Nub(GLuint index1,GLubyte x1,GLubyte y1,GLubyte z1,GLubyte w1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4NUBPROC_ALT fn=(PFNGLVERTEXATTRIB4NUBPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Nub",4,3);
#else
	static PFNGLVERTEXATTRIB4NUBPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4NUBPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Nub",4,3); }
#endif
	 fn(index1,x1,y1,z1,w1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4Nubv
#define GL_ALT_FUNDEF_VertexAttrib4Nubv
typedef void (*PFNGLVERTEXATTRIB4NUBVPROC_ALT)(GLuint,const GLubyte *);
static inline void glVertexAttrib4Nubv(GLuint index1,const GLubyte * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4NUBVPROC_ALT fn=(PFNGLVERTEXATTRIB4NUBVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Nubv",4,3);
#else
	static PFNGLVERTEXATTRIB4NUBVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4NUBVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Nubv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4Nuiv
#define GL_ALT_FUNDEF_VertexAttrib4Nuiv
typedef void (*PFNGLVERTEXATTRIB4NUIVPROC_ALT)(GLuint,const GLuint *);
static inline void glVertexAttrib4Nuiv(GLuint index1,const GLuint * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4NUIVPROC_ALT fn=(PFNGLVERTEXATTRIB4NUIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Nuiv",4,3);
#else
	static PFNGLVERTEXATTRIB4NUIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4NUIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Nuiv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4Nusv
#define GL_ALT_FUNDEF_VertexAttrib4Nusv
typedef void (*PFNGLVERTEXATTRIB4NUSVPROC_ALT)(GLuint,const GLushort *);
static inline void glVertexAttrib4Nusv(GLuint index1,const GLushort * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4NUSVPROC_ALT fn=(PFNGLVERTEXATTRIB4NUSVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Nusv",4,3);
#else
	static PFNGLVERTEXATTRIB4NUSVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4NUSVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4Nusv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4bv
#define GL_ALT_FUNDEF_VertexAttrib4bv
typedef void (*PFNGLVERTEXATTRIB4BVPROC_ALT)(GLuint,const GLbyte *);
static inline void glVertexAttrib4bv(GLuint index1,const GLbyte * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4BVPROC_ALT fn=(PFNGLVERTEXATTRIB4BVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4bv",4,3);
#else
	static PFNGLVERTEXATTRIB4BVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4BVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4bv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4d
#define GL_ALT_FUNDEF_VertexAttrib4d
typedef void (*PFNGLVERTEXATTRIB4DPROC_ALT)(GLuint,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void glVertexAttrib4d(GLuint index1,GLdouble x1,GLdouble y1,GLdouble z1,GLdouble w1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4DPROC_ALT fn=(PFNGLVERTEXATTRIB4DPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4d",4,3);
#else
	static PFNGLVERTEXATTRIB4DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4DPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4d",4,3); }
#endif
	 fn(index1,x1,y1,z1,w1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4dv
#define GL_ALT_FUNDEF_VertexAttrib4dv
typedef void (*PFNGLVERTEXATTRIB4DVPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttrib4dv(GLuint index1,const GLdouble * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4DVPROC_ALT fn=(PFNGLVERTEXATTRIB4DVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4dv",4,3);
#else
	static PFNGLVERTEXATTRIB4DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4DVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4dv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4f
#define GL_ALT_FUNDEF_VertexAttrib4f
typedef void (*PFNGLVERTEXATTRIB4FPROC_ALT)(GLuint,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glVertexAttrib4f(GLuint index1,GLfloat x1,GLfloat y1,GLfloat z1,GLfloat w1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4FPROC_ALT fn=(PFNGLVERTEXATTRIB4FPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4f",4,3);
#else
	static PFNGLVERTEXATTRIB4FPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4FPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4f",4,3); }
#endif
	 fn(index1,x1,y1,z1,w1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4fv
#define GL_ALT_FUNDEF_VertexAttrib4fv
typedef void (*PFNGLVERTEXATTRIB4FVPROC_ALT)(GLuint,const GLfloat *);
static inline void glVertexAttrib4fv(GLuint index1,const GLfloat * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4FVPROC_ALT fn=(PFNGLVERTEXATTRIB4FVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4fv",4,3);
#else
	static PFNGLVERTEXATTRIB4FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4FVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4fv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4iv
#define GL_ALT_FUNDEF_VertexAttrib4iv
typedef void (*PFNGLVERTEXATTRIB4IVPROC_ALT)(GLuint,const GLint *);
static inline void glVertexAttrib4iv(GLuint index1,const GLint * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4IVPROC_ALT fn=(PFNGLVERTEXATTRIB4IVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4iv",4,3);
#else
	static PFNGLVERTEXATTRIB4IVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4IVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4iv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4s
#define GL_ALT_FUNDEF_VertexAttrib4s
typedef void (*PFNGLVERTEXATTRIB4SPROC_ALT)(GLuint,GLshort,GLshort,GLshort,GLshort);
static inline void glVertexAttrib4s(GLuint index1,GLshort x1,GLshort y1,GLshort z1,GLshort w1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4SPROC_ALT fn=(PFNGLVERTEXATTRIB4SPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4s",4,3);
#else
	static PFNGLVERTEXATTRIB4SPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4SPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4s",4,3); }
#endif
	 fn(index1,x1,y1,z1,w1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4sv
#define GL_ALT_FUNDEF_VertexAttrib4sv
typedef void (*PFNGLVERTEXATTRIB4SVPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttrib4sv(GLuint index1,const GLshort * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4SVPROC_ALT fn=(PFNGLVERTEXATTRIB4SVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4sv",4,3);
#else
	static PFNGLVERTEXATTRIB4SVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4SVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4sv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4ubv
#define GL_ALT_FUNDEF_VertexAttrib4ubv
typedef void (*PFNGLVERTEXATTRIB4UBVPROC_ALT)(GLuint,const GLubyte *);
static inline void glVertexAttrib4ubv(GLuint index1,const GLubyte * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4UBVPROC_ALT fn=(PFNGLVERTEXATTRIB4UBVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4ubv",4,3);
#else
	static PFNGLVERTEXATTRIB4UBVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4UBVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4ubv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4uiv
#define GL_ALT_FUNDEF_VertexAttrib4uiv
typedef void (*PFNGLVERTEXATTRIB4UIVPROC_ALT)(GLuint,const GLuint *);
static inline void glVertexAttrib4uiv(GLuint index1,const GLuint * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4UIVPROC_ALT fn=(PFNGLVERTEXATTRIB4UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4uiv",4,3);
#else
	static PFNGLVERTEXATTRIB4UIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4uiv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttrib4usv
#define GL_ALT_FUNDEF_VertexAttrib4usv
typedef void (*PFNGLVERTEXATTRIB4USVPROC_ALT)(GLuint,const GLushort *);
static inline void glVertexAttrib4usv(GLuint index1,const GLushort * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIB4USVPROC_ALT fn=(PFNGLVERTEXATTRIB4USVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4usv",4,3);
#else
	static PFNGLVERTEXATTRIB4USVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIB4USVPROC_ALT)glaltGetProcAddressVersion("glVertexAttrib4usv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_VertexAttribBinding
#define GL_ALT_FUNDEF_VertexAttribBinding
typedef void (*PFNGLVERTEXATTRIBBINDINGPROC_ALT)(GLuint,GLuint);
static inline void glVertexAttribBinding(GLuint attribindex1,GLuint bindingindex1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBBINDINGPROC_ALT fn=(PFNGLVERTEXATTRIBBINDINGPROC_ALT)glaltGetProcAddressVersion("glVertexAttribBinding",4,3);
#else
	static PFNGLVERTEXATTRIBBINDINGPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBBINDINGPROC_ALT)glaltGetProcAddressVersion("glVertexAttribBinding",4,3); }
#endif
	 fn(attribindex1,bindingindex1);
}
#endif
#endif

#ifndef GL_VERSION_3_3
#ifndef	GL_ALT_FUNDEF_VertexAttribDivisor
#define GL_ALT_FUNDEF_VertexAttribDivisor
typedef void (*PFNGLVERTEXATTRIBDIVISORPROC_ALT)(GLuint,GLuint);
static inline void glVertexAttribDivisor(GLuint index1,GLuint divisor1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBDIVISORPROC_ALT fn=(PFNGLVERTEXATTRIBDIVISORPROC_ALT)glaltGetProcAddressVersion("glVertexAttribDivisor",4,3);
#else
	static PFNGLVERTEXATTRIBDIVISORPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBDIVISORPROC_ALT)glaltGetProcAddressVersion("glVertexAttribDivisor",4,3); }
#endif
	 fn(index1,divisor1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_VertexAttribFormat
#define GL_ALT_FUNDEF_VertexAttribFormat
typedef void (*PFNGLVERTEXATTRIBFORMATPROC_ALT)(GLuint,GLint,GLenum,GLboolean,GLuint);
static inline void glVertexAttribFormat(GLuint attribindex1,GLint size1,GLenum type1,GLboolean normalized1,GLuint relativeoffset1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBFORMATPROC_ALT fn=(PFNGLVERTEXATTRIBFORMATPROC_ALT)glaltGetProcAddressVersion("glVertexAttribFormat",4,3);
#else
	static PFNGLVERTEXATTRIBFORMATPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBFORMATPROC_ALT)glaltGetProcAddressVersion("glVertexAttribFormat",4,3); }
#endif
	 fn(attribindex1,size1,type1,normalized1,relativeoffset1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI1i
#define GL_ALT_FUNDEF_VertexAttribI1i
typedef void (*PFNGLVERTEXATTRIBI1IPROC_ALT)(GLuint,GLint);
static inline void glVertexAttribI1i(GLuint index1,GLint x1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI1IPROC_ALT fn=(PFNGLVERTEXATTRIBI1IPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI1i",4,3);
#else
	static PFNGLVERTEXATTRIBI1IPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI1IPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI1i",4,3); }
#endif
	 fn(index1,x1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI1iv
#define GL_ALT_FUNDEF_VertexAttribI1iv
typedef void (*PFNGLVERTEXATTRIBI1IVPROC_ALT)(GLuint,const GLint *);
static inline void glVertexAttribI1iv(GLuint index1,const GLint * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI1IVPROC_ALT fn=(PFNGLVERTEXATTRIBI1IVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI1iv",4,3);
#else
	static PFNGLVERTEXATTRIBI1IVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI1IVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI1iv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI1ui
#define GL_ALT_FUNDEF_VertexAttribI1ui
typedef void (*PFNGLVERTEXATTRIBI1UIPROC_ALT)(GLuint,GLuint);
static inline void glVertexAttribI1ui(GLuint index1,GLuint x1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI1UIPROC_ALT fn=(PFNGLVERTEXATTRIBI1UIPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI1ui",4,3);
#else
	static PFNGLVERTEXATTRIBI1UIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI1UIPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI1ui",4,3); }
#endif
	 fn(index1,x1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI1uiv
#define GL_ALT_FUNDEF_VertexAttribI1uiv
typedef void (*PFNGLVERTEXATTRIBI1UIVPROC_ALT)(GLuint,const GLuint *);
static inline void glVertexAttribI1uiv(GLuint index1,const GLuint * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI1UIVPROC_ALT fn=(PFNGLVERTEXATTRIBI1UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI1uiv",4,3);
#else
	static PFNGLVERTEXATTRIBI1UIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI1UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI1uiv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI2i
#define GL_ALT_FUNDEF_VertexAttribI2i
typedef void (*PFNGLVERTEXATTRIBI2IPROC_ALT)(GLuint,GLint,GLint);
static inline void glVertexAttribI2i(GLuint index1,GLint x1,GLint y1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI2IPROC_ALT fn=(PFNGLVERTEXATTRIBI2IPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI2i",4,3);
#else
	static PFNGLVERTEXATTRIBI2IPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI2IPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI2i",4,3); }
#endif
	 fn(index1,x1,y1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI2iv
#define GL_ALT_FUNDEF_VertexAttribI2iv
typedef void (*PFNGLVERTEXATTRIBI2IVPROC_ALT)(GLuint,const GLint *);
static inline void glVertexAttribI2iv(GLuint index1,const GLint * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI2IVPROC_ALT fn=(PFNGLVERTEXATTRIBI2IVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI2iv",4,3);
#else
	static PFNGLVERTEXATTRIBI2IVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI2IVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI2iv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI2ui
#define GL_ALT_FUNDEF_VertexAttribI2ui
typedef void (*PFNGLVERTEXATTRIBI2UIPROC_ALT)(GLuint,GLuint,GLuint);
static inline void glVertexAttribI2ui(GLuint index1,GLuint x1,GLuint y1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI2UIPROC_ALT fn=(PFNGLVERTEXATTRIBI2UIPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI2ui",4,3);
#else
	static PFNGLVERTEXATTRIBI2UIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI2UIPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI2ui",4,3); }
#endif
	 fn(index1,x1,y1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI2uiv
#define GL_ALT_FUNDEF_VertexAttribI2uiv
typedef void (*PFNGLVERTEXATTRIBI2UIVPROC_ALT)(GLuint,const GLuint *);
static inline void glVertexAttribI2uiv(GLuint index1,const GLuint * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI2UIVPROC_ALT fn=(PFNGLVERTEXATTRIBI2UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI2uiv",4,3);
#else
	static PFNGLVERTEXATTRIBI2UIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI2UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI2uiv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI3i
#define GL_ALT_FUNDEF_VertexAttribI3i
typedef void (*PFNGLVERTEXATTRIBI3IPROC_ALT)(GLuint,GLint,GLint,GLint);
static inline void glVertexAttribI3i(GLuint index1,GLint x1,GLint y1,GLint z1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI3IPROC_ALT fn=(PFNGLVERTEXATTRIBI3IPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI3i",4,3);
#else
	static PFNGLVERTEXATTRIBI3IPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI3IPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI3i",4,3); }
#endif
	 fn(index1,x1,y1,z1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI3iv
#define GL_ALT_FUNDEF_VertexAttribI3iv
typedef void (*PFNGLVERTEXATTRIBI3IVPROC_ALT)(GLuint,const GLint *);
static inline void glVertexAttribI3iv(GLuint index1,const GLint * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI3IVPROC_ALT fn=(PFNGLVERTEXATTRIBI3IVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI3iv",4,3);
#else
	static PFNGLVERTEXATTRIBI3IVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI3IVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI3iv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI3ui
#define GL_ALT_FUNDEF_VertexAttribI3ui
typedef void (*PFNGLVERTEXATTRIBI3UIPROC_ALT)(GLuint,GLuint,GLuint,GLuint);
static inline void glVertexAttribI3ui(GLuint index1,GLuint x1,GLuint y1,GLuint z1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI3UIPROC_ALT fn=(PFNGLVERTEXATTRIBI3UIPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI3ui",4,3);
#else
	static PFNGLVERTEXATTRIBI3UIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI3UIPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI3ui",4,3); }
#endif
	 fn(index1,x1,y1,z1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI3uiv
#define GL_ALT_FUNDEF_VertexAttribI3uiv
typedef void (*PFNGLVERTEXATTRIBI3UIVPROC_ALT)(GLuint,const GLuint *);
static inline void glVertexAttribI3uiv(GLuint index1,const GLuint * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI3UIVPROC_ALT fn=(PFNGLVERTEXATTRIBI3UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI3uiv",4,3);
#else
	static PFNGLVERTEXATTRIBI3UIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI3UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI3uiv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI4bv
#define GL_ALT_FUNDEF_VertexAttribI4bv
typedef void (*PFNGLVERTEXATTRIBI4BVPROC_ALT)(GLuint,const GLbyte *);
static inline void glVertexAttribI4bv(GLuint index1,const GLbyte * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI4BVPROC_ALT fn=(PFNGLVERTEXATTRIBI4BVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4bv",4,3);
#else
	static PFNGLVERTEXATTRIBI4BVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI4BVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4bv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI4i
#define GL_ALT_FUNDEF_VertexAttribI4i
typedef void (*PFNGLVERTEXATTRIBI4IPROC_ALT)(GLuint,GLint,GLint,GLint,GLint);
static inline void glVertexAttribI4i(GLuint index1,GLint x1,GLint y1,GLint z1,GLint w1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI4IPROC_ALT fn=(PFNGLVERTEXATTRIBI4IPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4i",4,3);
#else
	static PFNGLVERTEXATTRIBI4IPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI4IPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4i",4,3); }
#endif
	 fn(index1,x1,y1,z1,w1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI4iv
#define GL_ALT_FUNDEF_VertexAttribI4iv
typedef void (*PFNGLVERTEXATTRIBI4IVPROC_ALT)(GLuint,const GLint *);
static inline void glVertexAttribI4iv(GLuint index1,const GLint * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI4IVPROC_ALT fn=(PFNGLVERTEXATTRIBI4IVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4iv",4,3);
#else
	static PFNGLVERTEXATTRIBI4IVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI4IVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4iv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI4sv
#define GL_ALT_FUNDEF_VertexAttribI4sv
typedef void (*PFNGLVERTEXATTRIBI4SVPROC_ALT)(GLuint,const GLshort *);
static inline void glVertexAttribI4sv(GLuint index1,const GLshort * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI4SVPROC_ALT fn=(PFNGLVERTEXATTRIBI4SVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4sv",4,3);
#else
	static PFNGLVERTEXATTRIBI4SVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI4SVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4sv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI4ubv
#define GL_ALT_FUNDEF_VertexAttribI4ubv
typedef void (*PFNGLVERTEXATTRIBI4UBVPROC_ALT)(GLuint,const GLubyte *);
static inline void glVertexAttribI4ubv(GLuint index1,const GLubyte * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI4UBVPROC_ALT fn=(PFNGLVERTEXATTRIBI4UBVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4ubv",4,3);
#else
	static PFNGLVERTEXATTRIBI4UBVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI4UBVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4ubv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI4ui
#define GL_ALT_FUNDEF_VertexAttribI4ui
typedef void (*PFNGLVERTEXATTRIBI4UIPROC_ALT)(GLuint,GLuint,GLuint,GLuint,GLuint);
static inline void glVertexAttribI4ui(GLuint index1,GLuint x1,GLuint y1,GLuint z1,GLuint w1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI4UIPROC_ALT fn=(PFNGLVERTEXATTRIBI4UIPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4ui",4,3);
#else
	static PFNGLVERTEXATTRIBI4UIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI4UIPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4ui",4,3); }
#endif
	 fn(index1,x1,y1,z1,w1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI4uiv
#define GL_ALT_FUNDEF_VertexAttribI4uiv
typedef void (*PFNGLVERTEXATTRIBI4UIVPROC_ALT)(GLuint,const GLuint *);
static inline void glVertexAttribI4uiv(GLuint index1,const GLuint * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI4UIVPROC_ALT fn=(PFNGLVERTEXATTRIBI4UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4uiv",4,3);
#else
	static PFNGLVERTEXATTRIBI4UIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI4UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4uiv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribI4usv
#define GL_ALT_FUNDEF_VertexAttribI4usv
typedef void (*PFNGLVERTEXATTRIBI4USVPROC_ALT)(GLuint,const GLushort *);
static inline void glVertexAttribI4usv(GLuint index1,const GLushort * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBI4USVPROC_ALT fn=(PFNGLVERTEXATTRIBI4USVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4usv",4,3);
#else
	static PFNGLVERTEXATTRIBI4USVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBI4USVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribI4usv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_VertexAttribIFormat
#define GL_ALT_FUNDEF_VertexAttribIFormat
typedef void (*PFNGLVERTEXATTRIBIFORMATPROC_ALT)(GLuint,GLint,GLenum,GLuint);
static inline void glVertexAttribIFormat(GLuint attribindex1,GLint size1,GLenum type1,GLuint relativeoffset1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBIFORMATPROC_ALT fn=(PFNGLVERTEXATTRIBIFORMATPROC_ALT)glaltGetProcAddressVersion("glVertexAttribIFormat",4,3);
#else
	static PFNGLVERTEXATTRIBIFORMATPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBIFORMATPROC_ALT)glaltGetProcAddressVersion("glVertexAttribIFormat",4,3); }
#endif
	 fn(attribindex1,size1,type1,relativeoffset1);
}
#endif
#endif

#ifndef GL_VERSION_3_0
#ifndef	GL_ALT_FUNDEF_VertexAttribIPointer
#define GL_ALT_FUNDEF_VertexAttribIPointer
typedef void (*PFNGLVERTEXATTRIBIPOINTERPROC_ALT)(GLuint,GLint,GLenum,GLsizei,const void *);
static inline void glVertexAttribIPointer(GLuint index1,GLint size1,GLenum type1,GLsizei stride1,const void * pointer1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBIPOINTERPROC_ALT fn=(PFNGLVERTEXATTRIBIPOINTERPROC_ALT)glaltGetProcAddressVersion("glVertexAttribIPointer",4,3);
#else
	static PFNGLVERTEXATTRIBIPOINTERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBIPOINTERPROC_ALT)glaltGetProcAddressVersion("glVertexAttribIPointer",4,3); }
#endif
	 fn(index1,size1,type1,stride1,pointer1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_VertexAttribL1d
#define GL_ALT_FUNDEF_VertexAttribL1d
typedef void (*PFNGLVERTEXATTRIBL1DPROC_ALT)(GLuint,GLdouble);
static inline void glVertexAttribL1d(GLuint index1,GLdouble x1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBL1DPROC_ALT fn=(PFNGLVERTEXATTRIBL1DPROC_ALT)glaltGetProcAddressVersion("glVertexAttribL1d",4,3);
#else
	static PFNGLVERTEXATTRIBL1DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBL1DPROC_ALT)glaltGetProcAddressVersion("glVertexAttribL1d",4,3); }
#endif
	 fn(index1,x1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_VertexAttribL1dv
#define GL_ALT_FUNDEF_VertexAttribL1dv
typedef void (*PFNGLVERTEXATTRIBL1DVPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttribL1dv(GLuint index1,const GLdouble * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBL1DVPROC_ALT fn=(PFNGLVERTEXATTRIBL1DVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribL1dv",4,3);
#else
	static PFNGLVERTEXATTRIBL1DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBL1DVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribL1dv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_VertexAttribL2d
#define GL_ALT_FUNDEF_VertexAttribL2d
typedef void (*PFNGLVERTEXATTRIBL2DPROC_ALT)(GLuint,GLdouble,GLdouble);
static inline void glVertexAttribL2d(GLuint index1,GLdouble x1,GLdouble y1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBL2DPROC_ALT fn=(PFNGLVERTEXATTRIBL2DPROC_ALT)glaltGetProcAddressVersion("glVertexAttribL2d",4,3);
#else
	static PFNGLVERTEXATTRIBL2DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBL2DPROC_ALT)glaltGetProcAddressVersion("glVertexAttribL2d",4,3); }
#endif
	 fn(index1,x1,y1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_VertexAttribL2dv
#define GL_ALT_FUNDEF_VertexAttribL2dv
typedef void (*PFNGLVERTEXATTRIBL2DVPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttribL2dv(GLuint index1,const GLdouble * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBL2DVPROC_ALT fn=(PFNGLVERTEXATTRIBL2DVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribL2dv",4,3);
#else
	static PFNGLVERTEXATTRIBL2DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBL2DVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribL2dv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_VertexAttribL3d
#define GL_ALT_FUNDEF_VertexAttribL3d
typedef void (*PFNGLVERTEXATTRIBL3DPROC_ALT)(GLuint,GLdouble,GLdouble,GLdouble);
static inline void glVertexAttribL3d(GLuint index1,GLdouble x1,GLdouble y1,GLdouble z1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBL3DPROC_ALT fn=(PFNGLVERTEXATTRIBL3DPROC_ALT)glaltGetProcAddressVersion("glVertexAttribL3d",4,3);
#else
	static PFNGLVERTEXATTRIBL3DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBL3DPROC_ALT)glaltGetProcAddressVersion("glVertexAttribL3d",4,3); }
#endif
	 fn(index1,x1,y1,z1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_VertexAttribL3dv
#define GL_ALT_FUNDEF_VertexAttribL3dv
typedef void (*PFNGLVERTEXATTRIBL3DVPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttribL3dv(GLuint index1,const GLdouble * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBL3DVPROC_ALT fn=(PFNGLVERTEXATTRIBL3DVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribL3dv",4,3);
#else
	static PFNGLVERTEXATTRIBL3DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBL3DVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribL3dv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_VertexAttribL4d
#define GL_ALT_FUNDEF_VertexAttribL4d
typedef void (*PFNGLVERTEXATTRIBL4DPROC_ALT)(GLuint,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void glVertexAttribL4d(GLuint index1,GLdouble x1,GLdouble y1,GLdouble z1,GLdouble w1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBL4DPROC_ALT fn=(PFNGLVERTEXATTRIBL4DPROC_ALT)glaltGetProcAddressVersion("glVertexAttribL4d",4,3);
#else
	static PFNGLVERTEXATTRIBL4DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBL4DPROC_ALT)glaltGetProcAddressVersion("glVertexAttribL4d",4,3); }
#endif
	 fn(index1,x1,y1,z1,w1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_VertexAttribL4dv
#define GL_ALT_FUNDEF_VertexAttribL4dv
typedef void (*PFNGLVERTEXATTRIBL4DVPROC_ALT)(GLuint,const GLdouble *);
static inline void glVertexAttribL4dv(GLuint index1,const GLdouble * v1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBL4DVPROC_ALT fn=(PFNGLVERTEXATTRIBL4DVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribL4dv",4,3);
#else
	static PFNGLVERTEXATTRIBL4DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBL4DVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribL4dv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_VertexAttribLFormat
#define GL_ALT_FUNDEF_VertexAttribLFormat
typedef void (*PFNGLVERTEXATTRIBLFORMATPROC_ALT)(GLuint,GLint,GLenum,GLuint);
static inline void glVertexAttribLFormat(GLuint attribindex1,GLint size1,GLenum type1,GLuint relativeoffset1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBLFORMATPROC_ALT fn=(PFNGLVERTEXATTRIBLFORMATPROC_ALT)glaltGetProcAddressVersion("glVertexAttribLFormat",4,3);
#else
	static PFNGLVERTEXATTRIBLFORMATPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBLFORMATPROC_ALT)glaltGetProcAddressVersion("glVertexAttribLFormat",4,3); }
#endif
	 fn(attribindex1,size1,type1,relativeoffset1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_VertexAttribLPointer
#define GL_ALT_FUNDEF_VertexAttribLPointer
typedef void (*PFNGLVERTEXATTRIBLPOINTERPROC_ALT)(GLuint,GLint,GLenum,GLsizei,const void *);
static inline void glVertexAttribLPointer(GLuint index1,GLint size1,GLenum type1,GLsizei stride1,const void * pointer1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBLPOINTERPROC_ALT fn=(PFNGLVERTEXATTRIBLPOINTERPROC_ALT)glaltGetProcAddressVersion("glVertexAttribLPointer",4,3);
#else
	static PFNGLVERTEXATTRIBLPOINTERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBLPOINTERPROC_ALT)glaltGetProcAddressVersion("glVertexAttribLPointer",4,3); }
#endif
	 fn(index1,size1,type1,stride1,pointer1);
}
#endif
#endif

#ifndef GL_VERSION_3_3
#ifndef	GL_ALT_FUNDEF_VertexAttribP1ui
#define GL_ALT_FUNDEF_VertexAttribP1ui
typedef void (*PFNGLVERTEXATTRIBP1UIPROC_ALT)(GLuint,GLenum,GLboolean,GLuint);
static inline void glVertexAttribP1ui(GLuint index1,GLenum type1,GLboolean normalized1,GLuint value1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBP1UIPROC_ALT fn=(PFNGLVERTEXATTRIBP1UIPROC_ALT)glaltGetProcAddressVersion("glVertexAttribP1ui",4,3);
#else
	static PFNGLVERTEXATTRIBP1UIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBP1UIPROC_ALT)glaltGetProcAddressVersion("glVertexAttribP1ui",4,3); }
#endif
	 fn(index1,type1,normalized1,value1);
}
#endif
#endif

#ifndef GL_VERSION_3_3
#ifndef	GL_ALT_FUNDEF_VertexAttribP1uiv
#define GL_ALT_FUNDEF_VertexAttribP1uiv
typedef void (*PFNGLVERTEXATTRIBP1UIVPROC_ALT)(GLuint,GLenum,GLboolean,const GLuint *);
static inline void glVertexAttribP1uiv(GLuint index1,GLenum type1,GLboolean normalized1,const GLuint * value1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBP1UIVPROC_ALT fn=(PFNGLVERTEXATTRIBP1UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribP1uiv",4,3);
#else
	static PFNGLVERTEXATTRIBP1UIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBP1UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribP1uiv",4,3); }
#endif
	 fn(index1,type1,normalized1,value1);
}
#endif
#endif

#ifndef GL_VERSION_3_3
#ifndef	GL_ALT_FUNDEF_VertexAttribP2ui
#define GL_ALT_FUNDEF_VertexAttribP2ui
typedef void (*PFNGLVERTEXATTRIBP2UIPROC_ALT)(GLuint,GLenum,GLboolean,GLuint);
static inline void glVertexAttribP2ui(GLuint index1,GLenum type1,GLboolean normalized1,GLuint value1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBP2UIPROC_ALT fn=(PFNGLVERTEXATTRIBP2UIPROC_ALT)glaltGetProcAddressVersion("glVertexAttribP2ui",4,3);
#else
	static PFNGLVERTEXATTRIBP2UIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBP2UIPROC_ALT)glaltGetProcAddressVersion("glVertexAttribP2ui",4,3); }
#endif
	 fn(index1,type1,normalized1,value1);
}
#endif
#endif

#ifndef GL_VERSION_3_3
#ifndef	GL_ALT_FUNDEF_VertexAttribP2uiv
#define GL_ALT_FUNDEF_VertexAttribP2uiv
typedef void (*PFNGLVERTEXATTRIBP2UIVPROC_ALT)(GLuint,GLenum,GLboolean,const GLuint *);
static inline void glVertexAttribP2uiv(GLuint index1,GLenum type1,GLboolean normalized1,const GLuint * value1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBP2UIVPROC_ALT fn=(PFNGLVERTEXATTRIBP2UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribP2uiv",4,3);
#else
	static PFNGLVERTEXATTRIBP2UIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBP2UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribP2uiv",4,3); }
#endif
	 fn(index1,type1,normalized1,value1);
}
#endif
#endif

#ifndef GL_VERSION_3_3
#ifndef	GL_ALT_FUNDEF_VertexAttribP3ui
#define GL_ALT_FUNDEF_VertexAttribP3ui
typedef void (*PFNGLVERTEXATTRIBP3UIPROC_ALT)(GLuint,GLenum,GLboolean,GLuint);
static inline void glVertexAttribP3ui(GLuint index1,GLenum type1,GLboolean normalized1,GLuint value1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBP3UIPROC_ALT fn=(PFNGLVERTEXATTRIBP3UIPROC_ALT)glaltGetProcAddressVersion("glVertexAttribP3ui",4,3);
#else
	static PFNGLVERTEXATTRIBP3UIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBP3UIPROC_ALT)glaltGetProcAddressVersion("glVertexAttribP3ui",4,3); }
#endif
	 fn(index1,type1,normalized1,value1);
}
#endif
#endif

#ifndef GL_VERSION_3_3
#ifndef	GL_ALT_FUNDEF_VertexAttribP3uiv
#define GL_ALT_FUNDEF_VertexAttribP3uiv
typedef void (*PFNGLVERTEXATTRIBP3UIVPROC_ALT)(GLuint,GLenum,GLboolean,const GLuint *);
static inline void glVertexAttribP3uiv(GLuint index1,GLenum type1,GLboolean normalized1,const GLuint * value1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBP3UIVPROC_ALT fn=(PFNGLVERTEXATTRIBP3UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribP3uiv",4,3);
#else
	static PFNGLVERTEXATTRIBP3UIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBP3UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribP3uiv",4,3); }
#endif
	 fn(index1,type1,normalized1,value1);
}
#endif
#endif

#ifndef GL_VERSION_3_3
#ifndef	GL_ALT_FUNDEF_VertexAttribP4ui
#define GL_ALT_FUNDEF_VertexAttribP4ui
typedef void (*PFNGLVERTEXATTRIBP4UIPROC_ALT)(GLuint,GLenum,GLboolean,GLuint);
static inline void glVertexAttribP4ui(GLuint index1,GLenum type1,GLboolean normalized1,GLuint value1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBP4UIPROC_ALT fn=(PFNGLVERTEXATTRIBP4UIPROC_ALT)glaltGetProcAddressVersion("glVertexAttribP4ui",4,3);
#else
	static PFNGLVERTEXATTRIBP4UIPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBP4UIPROC_ALT)glaltGetProcAddressVersion("glVertexAttribP4ui",4,3); }
#endif
	 fn(index1,type1,normalized1,value1);
}
#endif
#endif

#ifndef GL_VERSION_3_3
#ifndef	GL_ALT_FUNDEF_VertexAttribP4uiv
#define GL_ALT_FUNDEF_VertexAttribP4uiv
typedef void (*PFNGLVERTEXATTRIBP4UIVPROC_ALT)(GLuint,GLenum,GLboolean,const GLuint *);
static inline void glVertexAttribP4uiv(GLuint index1,GLenum type1,GLboolean normalized1,const GLuint * value1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBP4UIVPROC_ALT fn=(PFNGLVERTEXATTRIBP4UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribP4uiv",4,3);
#else
	static PFNGLVERTEXATTRIBP4UIVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBP4UIVPROC_ALT)glaltGetProcAddressVersion("glVertexAttribP4uiv",4,3); }
#endif
	 fn(index1,type1,normalized1,value1);
}
#endif
#endif

#ifndef GL_VERSION_2_0
#ifndef	GL_ALT_FUNDEF_VertexAttribPointer
#define GL_ALT_FUNDEF_VertexAttribPointer
typedef void (*PFNGLVERTEXATTRIBPOINTERPROC_ALT)(GLuint,GLint,GLenum,GLboolean,GLsizei,const void *);
static inline void glVertexAttribPointer(GLuint index1,GLint size1,GLenum type1,GLboolean normalized1,GLsizei stride1,const void * pointer1)
{
#ifdef __cplusplus
	static PFNGLVERTEXATTRIBPOINTERPROC_ALT fn=(PFNGLVERTEXATTRIBPOINTERPROC_ALT)glaltGetProcAddressVersion("glVertexAttribPointer",4,3);
#else
	static PFNGLVERTEXATTRIBPOINTERPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXATTRIBPOINTERPROC_ALT)glaltGetProcAddressVersion("glVertexAttribPointer",4,3); }
#endif
	 fn(index1,size1,type1,normalized1,stride1,pointer1);
}
#endif
#endif

#ifndef GL_VERSION_4_3
#ifndef	GL_ALT_FUNDEF_VertexBindingDivisor
#define GL_ALT_FUNDEF_VertexBindingDivisor
typedef void (*PFNGLVERTEXBINDINGDIVISORPROC_ALT)(GLuint,GLuint);
static inline void glVertexBindingDivisor(GLuint bindingindex1,GLuint divisor1)
{
#ifdef __cplusplus
	static PFNGLVERTEXBINDINGDIVISORPROC_ALT fn=(PFNGLVERTEXBINDINGDIVISORPROC_ALT)glaltGetProcAddressVersion("glVertexBindingDivisor",4,3);
#else
	static PFNGLVERTEXBINDINGDIVISORPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVERTEXBINDINGDIVISORPROC_ALT)glaltGetProcAddressVersion("glVertexBindingDivisor",4,3); }
#endif
	 fn(bindingindex1,divisor1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ViewportArrayv
#define GL_ALT_FUNDEF_ViewportArrayv
typedef void (*PFNGLVIEWPORTARRAYVPROC_ALT)(GLuint,GLsizei,const GLfloat *);
static inline void glViewportArrayv(GLuint first1,GLsizei count1,const GLfloat * v1)
{
#ifdef __cplusplus
	static PFNGLVIEWPORTARRAYVPROC_ALT fn=(PFNGLVIEWPORTARRAYVPROC_ALT)glaltGetProcAddressVersion("glViewportArrayv",4,3);
#else
	static PFNGLVIEWPORTARRAYVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVIEWPORTARRAYVPROC_ALT)glaltGetProcAddressVersion("glViewportArrayv",4,3); }
#endif
	 fn(first1,count1,v1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ViewportIndexedf
#define GL_ALT_FUNDEF_ViewportIndexedf
typedef void (*PFNGLVIEWPORTINDEXEDFPROC_ALT)(GLuint,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glViewportIndexedf(GLuint index1,GLfloat x1,GLfloat y1,GLfloat w1,GLfloat h1)
{
#ifdef __cplusplus
	static PFNGLVIEWPORTINDEXEDFPROC_ALT fn=(PFNGLVIEWPORTINDEXEDFPROC_ALT)glaltGetProcAddressVersion("glViewportIndexedf",4,3);
#else
	static PFNGLVIEWPORTINDEXEDFPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVIEWPORTINDEXEDFPROC_ALT)glaltGetProcAddressVersion("glViewportIndexedf",4,3); }
#endif
	 fn(index1,x1,y1,w1,h1);
}
#endif
#endif

#ifndef GL_VERSION_4_1
#ifndef	GL_ALT_FUNDEF_ViewportIndexedfv
#define GL_ALT_FUNDEF_ViewportIndexedfv
typedef void (*PFNGLVIEWPORTINDEXEDFVPROC_ALT)(GLuint,const GLfloat *);
static inline void glViewportIndexedfv(GLuint index1,const GLfloat * v1)
{
#ifdef __cplusplus
	static PFNGLVIEWPORTINDEXEDFVPROC_ALT fn=(PFNGLVIEWPORTINDEXEDFVPROC_ALT)glaltGetProcAddressVersion("glViewportIndexedfv",4,3);
#else
	static PFNGLVIEWPORTINDEXEDFVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLVIEWPORTINDEXEDFVPROC_ALT)glaltGetProcAddressVersion("glViewportIndexedfv",4,3); }
#endif
	 fn(index1,v1);
}
#endif
#endif

#ifndef GL_VERSION_3_2
#ifndef	GL_ALT_FUNDEF_WaitSync
#define GL_ALT_FUNDEF_WaitSync
typedef void (*PFNGLWAITSYNCPROC_ALT)(GLsync,GLbitfield,GLuint64);
static inline void glWaitSync(GLsync sync1,GLbitfield flags1,GLuint64 timeout1)
{
#ifdef __cplusplus
	static PFNGLWAITSYNCPROC_ALT fn=(PFNGLWAITSYNCPROC_ALT)glaltGetProcAddressVersion("glWaitSync",4,3);
#else
	static PFNGLWAITSYNCPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLWAITSYNCPROC_ALT)glaltGetProcAddressVersion("glWaitSync",4,3); }
#endif
	 fn(sync1,flags1,timeout1);
}
#endif
#endif

CGUARDEND

#endif
