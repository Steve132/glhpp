#ifndef GL_ALT_GL_VERSION_1_3_ALT
#define GL_ALT_GL_VERSION_1_3_ALT
#include "common.h"


#ifndef GL_ALT_API_NAME
#define GL_ALT_API_NAME GL_ALT_GL_API
#endif
#ifndef GL_ALT_API_VERSION
#define GL_ALT_API_VERSION 130
#endif
#ifndef GL_NO_ERROR
#define GL_NO_ERROR 0
#endif //GL_NO_ERROR
#ifndef GL_FALSE
#define GL_FALSE 0
#endif //GL_FALSE
#ifndef GL_NONE
#define GL_NONE 0
#endif //GL_NONE
#ifndef GL_ZERO
#define GL_ZERO 0
#endif //GL_ZERO
#ifndef GL_POINTS
#define GL_POINTS 0x0000
#endif //GL_POINTS
#ifndef GL_CURRENT_BIT
#define GL_CURRENT_BIT 0x00000001
#endif //GL_CURRENT_BIT
#ifndef GL_CLIENT_PIXEL_STORE_BIT
#define GL_CLIENT_PIXEL_STORE_BIT 0x00000001
#endif //GL_CLIENT_PIXEL_STORE_BIT
#ifndef GL_POINT_BIT
#define GL_POINT_BIT 0x00000002
#endif //GL_POINT_BIT
#ifndef GL_CLIENT_VERTEX_ARRAY_BIT
#define GL_CLIENT_VERTEX_ARRAY_BIT 0x00000002
#endif //GL_CLIENT_VERTEX_ARRAY_BIT
#ifndef GL_LINE_BIT
#define GL_LINE_BIT 0x00000004
#endif //GL_LINE_BIT
#ifndef GL_POLYGON_BIT
#define GL_POLYGON_BIT 0x00000008
#endif //GL_POLYGON_BIT
#ifndef GL_POLYGON_STIPPLE_BIT
#define GL_POLYGON_STIPPLE_BIT 0x00000010
#endif //GL_POLYGON_STIPPLE_BIT
#ifndef GL_PIXEL_MODE_BIT
#define GL_PIXEL_MODE_BIT 0x00000020
#endif //GL_PIXEL_MODE_BIT
#ifndef GL_LIGHTING_BIT
#define GL_LIGHTING_BIT 0x00000040
#endif //GL_LIGHTING_BIT
#ifndef GL_FOG_BIT
#define GL_FOG_BIT 0x00000080
#endif //GL_FOG_BIT
#ifndef GL_DEPTH_BUFFER_BIT
#define GL_DEPTH_BUFFER_BIT 0x00000100
#endif //GL_DEPTH_BUFFER_BIT
#ifndef GL_ACCUM_BUFFER_BIT
#define GL_ACCUM_BUFFER_BIT 0x00000200
#endif //GL_ACCUM_BUFFER_BIT
#ifndef GL_STENCIL_BUFFER_BIT
#define GL_STENCIL_BUFFER_BIT 0x00000400
#endif //GL_STENCIL_BUFFER_BIT
#ifndef GL_VIEWPORT_BIT
#define GL_VIEWPORT_BIT 0x00000800
#endif //GL_VIEWPORT_BIT
#ifndef GL_TRANSFORM_BIT
#define GL_TRANSFORM_BIT 0x00001000
#endif //GL_TRANSFORM_BIT
#ifndef GL_ENABLE_BIT
#define GL_ENABLE_BIT 0x00002000
#endif //GL_ENABLE_BIT
#ifndef GL_COLOR_BUFFER_BIT
#define GL_COLOR_BUFFER_BIT 0x00004000
#endif //GL_COLOR_BUFFER_BIT
#ifndef GL_HINT_BIT
#define GL_HINT_BIT 0x00008000
#endif //GL_HINT_BIT
#ifndef GL_LINES
#define GL_LINES 0x0001
#endif //GL_LINES
#ifndef GL_EVAL_BIT
#define GL_EVAL_BIT 0x00010000
#endif //GL_EVAL_BIT
#ifndef GL_LINE_LOOP
#define GL_LINE_LOOP 0x0002
#endif //GL_LINE_LOOP
#ifndef GL_LIST_BIT
#define GL_LIST_BIT 0x00020000
#endif //GL_LIST_BIT
#ifndef GL_LINE_STRIP
#define GL_LINE_STRIP 0x0003
#endif //GL_LINE_STRIP
#ifndef GL_TRIANGLES
#define GL_TRIANGLES 0x0004
#endif //GL_TRIANGLES
#ifndef GL_TEXTURE_BIT
#define GL_TEXTURE_BIT 0x00040000
#endif //GL_TEXTURE_BIT
#ifndef GL_TRIANGLE_STRIP
#define GL_TRIANGLE_STRIP 0x0005
#endif //GL_TRIANGLE_STRIP
#ifndef GL_TRIANGLE_FAN
#define GL_TRIANGLE_FAN 0x0006
#endif //GL_TRIANGLE_FAN
#ifndef GL_QUADS
#define GL_QUADS 0x0007
#endif //GL_QUADS
#ifndef GL_QUAD_STRIP
#define GL_QUAD_STRIP 0x0008
#endif //GL_QUAD_STRIP
#ifndef GL_SCISSOR_BIT
#define GL_SCISSOR_BIT 0x00080000
#endif //GL_SCISSOR_BIT
#ifndef GL_POLYGON
#define GL_POLYGON 0x0009
#endif //GL_POLYGON
#ifndef GL_ACCUM
#define GL_ACCUM 0x0100
#endif //GL_ACCUM
#ifndef GL_LOAD
#define GL_LOAD 0x0101
#endif //GL_LOAD
#ifndef GL_RETURN
#define GL_RETURN 0x0102
#endif //GL_RETURN
#ifndef GL_MULT
#define GL_MULT 0x0103
#endif //GL_MULT
#ifndef GL_ADD
#define GL_ADD 0x0104
#endif //GL_ADD
#ifndef GL_NEVER
#define GL_NEVER 0x0200
#endif //GL_NEVER
#ifndef GL_LESS
#define GL_LESS 0x0201
#endif //GL_LESS
#ifndef GL_EQUAL
#define GL_EQUAL 0x0202
#endif //GL_EQUAL
#ifndef GL_LEQUAL
#define GL_LEQUAL 0x0203
#endif //GL_LEQUAL
#ifndef GL_GREATER
#define GL_GREATER 0x0204
#endif //GL_GREATER
#ifndef GL_NOTEQUAL
#define GL_NOTEQUAL 0x0205
#endif //GL_NOTEQUAL
#ifndef GL_GEQUAL
#define GL_GEQUAL 0x0206
#endif //GL_GEQUAL
#ifndef GL_ALWAYS
#define GL_ALWAYS 0x0207
#endif //GL_ALWAYS
#ifndef GL_SRC_COLOR
#define GL_SRC_COLOR 0x0300
#endif //GL_SRC_COLOR
#ifndef GL_ONE_MINUS_SRC_COLOR
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#endif //GL_ONE_MINUS_SRC_COLOR
#ifndef GL_SRC_ALPHA
#define GL_SRC_ALPHA 0x0302
#endif //GL_SRC_ALPHA
#ifndef GL_ONE_MINUS_SRC_ALPHA
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#endif //GL_ONE_MINUS_SRC_ALPHA
#ifndef GL_DST_ALPHA
#define GL_DST_ALPHA 0x0304
#endif //GL_DST_ALPHA
#ifndef GL_ONE_MINUS_DST_ALPHA
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#endif //GL_ONE_MINUS_DST_ALPHA
#ifndef GL_DST_COLOR
#define GL_DST_COLOR 0x0306
#endif //GL_DST_COLOR
#ifndef GL_ONE_MINUS_DST_COLOR
#define GL_ONE_MINUS_DST_COLOR 0x0307
#endif //GL_ONE_MINUS_DST_COLOR
#ifndef GL_SRC_ALPHA_SATURATE
#define GL_SRC_ALPHA_SATURATE 0x0308
#endif //GL_SRC_ALPHA_SATURATE
#ifndef GL_FRONT_LEFT
#define GL_FRONT_LEFT 0x0400
#endif //GL_FRONT_LEFT
#ifndef GL_FRONT_RIGHT
#define GL_FRONT_RIGHT 0x0401
#endif //GL_FRONT_RIGHT
#ifndef GL_BACK_LEFT
#define GL_BACK_LEFT 0x0402
#endif //GL_BACK_LEFT
#ifndef GL_BACK_RIGHT
#define GL_BACK_RIGHT 0x0403
#endif //GL_BACK_RIGHT
#ifndef GL_FRONT
#define GL_FRONT 0x0404
#endif //GL_FRONT
#ifndef GL_BACK
#define GL_BACK 0x0405
#endif //GL_BACK
#ifndef GL_LEFT
#define GL_LEFT 0x0406
#endif //GL_LEFT
#ifndef GL_RIGHT
#define GL_RIGHT 0x0407
#endif //GL_RIGHT
#ifndef GL_FRONT_AND_BACK
#define GL_FRONT_AND_BACK 0x0408
#endif //GL_FRONT_AND_BACK
#ifndef GL_AUX0
#define GL_AUX0 0x0409
#endif //GL_AUX0
#ifndef GL_AUX1
#define GL_AUX1 0x040A
#endif //GL_AUX1
#ifndef GL_AUX2
#define GL_AUX2 0x040B
#endif //GL_AUX2
#ifndef GL_AUX3
#define GL_AUX3 0x040C
#endif //GL_AUX3
#ifndef GL_INVALID_ENUM
#define GL_INVALID_ENUM 0x0500
#endif //GL_INVALID_ENUM
#ifndef GL_INVALID_VALUE
#define GL_INVALID_VALUE 0x0501
#endif //GL_INVALID_VALUE
#ifndef GL_INVALID_OPERATION
#define GL_INVALID_OPERATION 0x0502
#endif //GL_INVALID_OPERATION
#ifndef GL_STACK_OVERFLOW
#define GL_STACK_OVERFLOW 0x0503
#endif //GL_STACK_OVERFLOW
#ifndef GL_STACK_UNDERFLOW
#define GL_STACK_UNDERFLOW 0x0504
#endif //GL_STACK_UNDERFLOW
#ifndef GL_OUT_OF_MEMORY
#define GL_OUT_OF_MEMORY 0x0505
#endif //GL_OUT_OF_MEMORY
#ifndef GL_2D
#define GL_2D 0x0600
#endif //GL_2D
#ifndef GL_3D
#define GL_3D 0x0601
#endif //GL_3D
#ifndef GL_3D_COLOR
#define GL_3D_COLOR 0x0602
#endif //GL_3D_COLOR
#ifndef GL_3D_COLOR_TEXTURE
#define GL_3D_COLOR_TEXTURE 0x0603
#endif //GL_3D_COLOR_TEXTURE
#ifndef GL_4D_COLOR_TEXTURE
#define GL_4D_COLOR_TEXTURE 0x0604
#endif //GL_4D_COLOR_TEXTURE
#ifndef GL_PASS_THROUGH_TOKEN
#define GL_PASS_THROUGH_TOKEN 0x0700
#endif //GL_PASS_THROUGH_TOKEN
#ifndef GL_POINT_TOKEN
#define GL_POINT_TOKEN 0x0701
#endif //GL_POINT_TOKEN
#ifndef GL_LINE_TOKEN
#define GL_LINE_TOKEN 0x0702
#endif //GL_LINE_TOKEN
#ifndef GL_POLYGON_TOKEN
#define GL_POLYGON_TOKEN 0x0703
#endif //GL_POLYGON_TOKEN
#ifndef GL_BITMAP_TOKEN
#define GL_BITMAP_TOKEN 0x0704
#endif //GL_BITMAP_TOKEN
#ifndef GL_DRAW_PIXEL_TOKEN
#define GL_DRAW_PIXEL_TOKEN 0x0705
#endif //GL_DRAW_PIXEL_TOKEN
#ifndef GL_COPY_PIXEL_TOKEN
#define GL_COPY_PIXEL_TOKEN 0x0706
#endif //GL_COPY_PIXEL_TOKEN
#ifndef GL_LINE_RESET_TOKEN
#define GL_LINE_RESET_TOKEN 0x0707
#endif //GL_LINE_RESET_TOKEN
#ifndef GL_EXP
#define GL_EXP 0x0800
#endif //GL_EXP
#ifndef GL_EXP2
#define GL_EXP2 0x0801
#endif //GL_EXP2
#ifndef GL_CW
#define GL_CW 0x0900
#endif //GL_CW
#ifndef GL_CCW
#define GL_CCW 0x0901
#endif //GL_CCW
#ifndef GL_COEFF
#define GL_COEFF 0x0A00
#endif //GL_COEFF
#ifndef GL_ORDER
#define GL_ORDER 0x0A01
#endif //GL_ORDER
#ifndef GL_DOMAIN
#define GL_DOMAIN 0x0A02
#endif //GL_DOMAIN
#ifndef GL_CURRENT_COLOR
#define GL_CURRENT_COLOR 0x0B00
#endif //GL_CURRENT_COLOR
#ifndef GL_CURRENT_INDEX
#define GL_CURRENT_INDEX 0x0B01
#endif //GL_CURRENT_INDEX
#ifndef GL_CURRENT_NORMAL
#define GL_CURRENT_NORMAL 0x0B02
#endif //GL_CURRENT_NORMAL
#ifndef GL_CURRENT_TEXTURE_COORDS
#define GL_CURRENT_TEXTURE_COORDS 0x0B03
#endif //GL_CURRENT_TEXTURE_COORDS
#ifndef GL_CURRENT_RASTER_COLOR
#define GL_CURRENT_RASTER_COLOR 0x0B04
#endif //GL_CURRENT_RASTER_COLOR
#ifndef GL_CURRENT_RASTER_INDEX
#define GL_CURRENT_RASTER_INDEX 0x0B05
#endif //GL_CURRENT_RASTER_INDEX
#ifndef GL_CURRENT_RASTER_TEXTURE_COORDS
#define GL_CURRENT_RASTER_TEXTURE_COORDS 0x0B06
#endif //GL_CURRENT_RASTER_TEXTURE_COORDS
#ifndef GL_CURRENT_RASTER_POSITION
#define GL_CURRENT_RASTER_POSITION 0x0B07
#endif //GL_CURRENT_RASTER_POSITION
#ifndef GL_CURRENT_RASTER_POSITION_VALID
#define GL_CURRENT_RASTER_POSITION_VALID 0x0B08
#endif //GL_CURRENT_RASTER_POSITION_VALID
#ifndef GL_CURRENT_RASTER_DISTANCE
#define GL_CURRENT_RASTER_DISTANCE 0x0B09
#endif //GL_CURRENT_RASTER_DISTANCE
#ifndef GL_POINT_SMOOTH
#define GL_POINT_SMOOTH 0x0B10
#endif //GL_POINT_SMOOTH
#ifndef GL_POINT_SIZE
#define GL_POINT_SIZE 0x0B11
#endif //GL_POINT_SIZE
#ifndef GL_SMOOTH_POINT_SIZE_RANGE
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#endif //GL_SMOOTH_POINT_SIZE_RANGE
#ifndef GL_POINT_SIZE_RANGE
#define GL_POINT_SIZE_RANGE 0x0B12
#endif //GL_POINT_SIZE_RANGE
#ifndef GL_POINT_SIZE_GRANULARITY
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#endif //GL_POINT_SIZE_GRANULARITY
#ifndef GL_SMOOTH_POINT_SIZE_GRANULARITY
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#endif //GL_SMOOTH_POINT_SIZE_GRANULARITY
#ifndef GL_LINE_SMOOTH
#define GL_LINE_SMOOTH 0x0B20
#endif //GL_LINE_SMOOTH
#ifndef GL_LINE_WIDTH
#define GL_LINE_WIDTH 0x0B21
#endif //GL_LINE_WIDTH
#ifndef GL_SMOOTH_LINE_WIDTH_RANGE
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#endif //GL_SMOOTH_LINE_WIDTH_RANGE
#ifndef GL_LINE_WIDTH_RANGE
#define GL_LINE_WIDTH_RANGE 0x0B22
#endif //GL_LINE_WIDTH_RANGE
#ifndef GL_LINE_WIDTH_GRANULARITY
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#endif //GL_LINE_WIDTH_GRANULARITY
#ifndef GL_SMOOTH_LINE_WIDTH_GRANULARITY
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#endif //GL_SMOOTH_LINE_WIDTH_GRANULARITY
#ifndef GL_LINE_STIPPLE
#define GL_LINE_STIPPLE 0x0B24
#endif //GL_LINE_STIPPLE
#ifndef GL_LINE_STIPPLE_PATTERN
#define GL_LINE_STIPPLE_PATTERN 0x0B25
#endif //GL_LINE_STIPPLE_PATTERN
#ifndef GL_LINE_STIPPLE_REPEAT
#define GL_LINE_STIPPLE_REPEAT 0x0B26
#endif //GL_LINE_STIPPLE_REPEAT
#ifndef GL_LIST_MODE
#define GL_LIST_MODE 0x0B30
#endif //GL_LIST_MODE
#ifndef GL_MAX_LIST_NESTING
#define GL_MAX_LIST_NESTING 0x0B31
#endif //GL_MAX_LIST_NESTING
#ifndef GL_LIST_BASE
#define GL_LIST_BASE 0x0B32
#endif //GL_LIST_BASE
#ifndef GL_LIST_INDEX
#define GL_LIST_INDEX 0x0B33
#endif //GL_LIST_INDEX
#ifndef GL_POLYGON_MODE
#define GL_POLYGON_MODE 0x0B40
#endif //GL_POLYGON_MODE
#ifndef GL_POLYGON_SMOOTH
#define GL_POLYGON_SMOOTH 0x0B41
#endif //GL_POLYGON_SMOOTH
#ifndef GL_POLYGON_STIPPLE
#define GL_POLYGON_STIPPLE 0x0B42
#endif //GL_POLYGON_STIPPLE
#ifndef GL_EDGE_FLAG
#define GL_EDGE_FLAG 0x0B43
#endif //GL_EDGE_FLAG
#ifndef GL_CULL_FACE
#define GL_CULL_FACE 0x0B44
#endif //GL_CULL_FACE
#ifndef GL_CULL_FACE_MODE
#define GL_CULL_FACE_MODE 0x0B45
#endif //GL_CULL_FACE_MODE
#ifndef GL_FRONT_FACE
#define GL_FRONT_FACE 0x0B46
#endif //GL_FRONT_FACE
#ifndef GL_LIGHTING
#define GL_LIGHTING 0x0B50
#endif //GL_LIGHTING
#ifndef GL_LIGHT_MODEL_LOCAL_VIEWER
#define GL_LIGHT_MODEL_LOCAL_VIEWER 0x0B51
#endif //GL_LIGHT_MODEL_LOCAL_VIEWER
#ifndef GL_LIGHT_MODEL_TWO_SIDE
#define GL_LIGHT_MODEL_TWO_SIDE 0x0B52
#endif //GL_LIGHT_MODEL_TWO_SIDE
#ifndef GL_LIGHT_MODEL_AMBIENT
#define GL_LIGHT_MODEL_AMBIENT 0x0B53
#endif //GL_LIGHT_MODEL_AMBIENT
#ifndef GL_SHADE_MODEL
#define GL_SHADE_MODEL 0x0B54
#endif //GL_SHADE_MODEL
#ifndef GL_COLOR_MATERIAL_FACE
#define GL_COLOR_MATERIAL_FACE 0x0B55
#endif //GL_COLOR_MATERIAL_FACE
#ifndef GL_COLOR_MATERIAL_PARAMETER
#define GL_COLOR_MATERIAL_PARAMETER 0x0B56
#endif //GL_COLOR_MATERIAL_PARAMETER
#ifndef GL_COLOR_MATERIAL
#define GL_COLOR_MATERIAL 0x0B57
#endif //GL_COLOR_MATERIAL
#ifndef GL_FOG
#define GL_FOG 0x0B60
#endif //GL_FOG
#ifndef GL_FOG_INDEX
#define GL_FOG_INDEX 0x0B61
#endif //GL_FOG_INDEX
#ifndef GL_FOG_DENSITY
#define GL_FOG_DENSITY 0x0B62
#endif //GL_FOG_DENSITY
#ifndef GL_FOG_START
#define GL_FOG_START 0x0B63
#endif //GL_FOG_START
#ifndef GL_FOG_END
#define GL_FOG_END 0x0B64
#endif //GL_FOG_END
#ifndef GL_FOG_MODE
#define GL_FOG_MODE 0x0B65
#endif //GL_FOG_MODE
#ifndef GL_FOG_COLOR
#define GL_FOG_COLOR 0x0B66
#endif //GL_FOG_COLOR
#ifndef GL_DEPTH_RANGE
#define GL_DEPTH_RANGE 0x0B70
#endif //GL_DEPTH_RANGE
#ifndef GL_DEPTH_TEST
#define GL_DEPTH_TEST 0x0B71
#endif //GL_DEPTH_TEST
#ifndef GL_DEPTH_WRITEMASK
#define GL_DEPTH_WRITEMASK 0x0B72
#endif //GL_DEPTH_WRITEMASK
#ifndef GL_DEPTH_CLEAR_VALUE
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#endif //GL_DEPTH_CLEAR_VALUE
#ifndef GL_DEPTH_FUNC
#define GL_DEPTH_FUNC 0x0B74
#endif //GL_DEPTH_FUNC
#ifndef GL_ACCUM_CLEAR_VALUE
#define GL_ACCUM_CLEAR_VALUE 0x0B80
#endif //GL_ACCUM_CLEAR_VALUE
#ifndef GL_STENCIL_TEST
#define GL_STENCIL_TEST 0x0B90
#endif //GL_STENCIL_TEST
#ifndef GL_STENCIL_CLEAR_VALUE
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#endif //GL_STENCIL_CLEAR_VALUE
#ifndef GL_STENCIL_FUNC
#define GL_STENCIL_FUNC 0x0B92
#endif //GL_STENCIL_FUNC
#ifndef GL_STENCIL_VALUE_MASK
#define GL_STENCIL_VALUE_MASK 0x0B93
#endif //GL_STENCIL_VALUE_MASK
#ifndef GL_STENCIL_FAIL
#define GL_STENCIL_FAIL 0x0B94
#endif //GL_STENCIL_FAIL
#ifndef GL_STENCIL_PASS_DEPTH_FAIL
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#endif //GL_STENCIL_PASS_DEPTH_FAIL
#ifndef GL_STENCIL_PASS_DEPTH_PASS
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#endif //GL_STENCIL_PASS_DEPTH_PASS
#ifndef GL_STENCIL_REF
#define GL_STENCIL_REF 0x0B97
#endif //GL_STENCIL_REF
#ifndef GL_STENCIL_WRITEMASK
#define GL_STENCIL_WRITEMASK 0x0B98
#endif //GL_STENCIL_WRITEMASK
#ifndef GL_MATRIX_MODE
#define GL_MATRIX_MODE 0x0BA0
#endif //GL_MATRIX_MODE
#ifndef GL_NORMALIZE
#define GL_NORMALIZE 0x0BA1
#endif //GL_NORMALIZE
#ifndef GL_VIEWPORT
#define GL_VIEWPORT 0x0BA2
#endif //GL_VIEWPORT
#ifndef GL_MODELVIEW_STACK_DEPTH
#define GL_MODELVIEW_STACK_DEPTH 0x0BA3
#endif //GL_MODELVIEW_STACK_DEPTH
#ifndef GL_PROJECTION_STACK_DEPTH
#define GL_PROJECTION_STACK_DEPTH 0x0BA4
#endif //GL_PROJECTION_STACK_DEPTH
#ifndef GL_TEXTURE_STACK_DEPTH
#define GL_TEXTURE_STACK_DEPTH 0x0BA5
#endif //GL_TEXTURE_STACK_DEPTH
#ifndef GL_MODELVIEW_MATRIX
#define GL_MODELVIEW_MATRIX 0x0BA6
#endif //GL_MODELVIEW_MATRIX
#ifndef GL_PROJECTION_MATRIX
#define GL_PROJECTION_MATRIX 0x0BA7
#endif //GL_PROJECTION_MATRIX
#ifndef GL_TEXTURE_MATRIX
#define GL_TEXTURE_MATRIX 0x0BA8
#endif //GL_TEXTURE_MATRIX
#ifndef GL_ATTRIB_STACK_DEPTH
#define GL_ATTRIB_STACK_DEPTH 0x0BB0
#endif //GL_ATTRIB_STACK_DEPTH
#ifndef GL_CLIENT_ATTRIB_STACK_DEPTH
#define GL_CLIENT_ATTRIB_STACK_DEPTH 0x0BB1
#endif //GL_CLIENT_ATTRIB_STACK_DEPTH
#ifndef GL_ALPHA_TEST
#define GL_ALPHA_TEST 0x0BC0
#endif //GL_ALPHA_TEST
#ifndef GL_ALPHA_TEST_FUNC
#define GL_ALPHA_TEST_FUNC 0x0BC1
#endif //GL_ALPHA_TEST_FUNC
#ifndef GL_ALPHA_TEST_REF
#define GL_ALPHA_TEST_REF 0x0BC2
#endif //GL_ALPHA_TEST_REF
#ifndef GL_DITHER
#define GL_DITHER 0x0BD0
#endif //GL_DITHER
#ifndef GL_BLEND_DST
#define GL_BLEND_DST 0x0BE0
#endif //GL_BLEND_DST
#ifndef GL_BLEND_SRC
#define GL_BLEND_SRC 0x0BE1
#endif //GL_BLEND_SRC
#ifndef GL_BLEND
#define GL_BLEND 0x0BE2
#endif //GL_BLEND
#ifndef GL_LOGIC_OP_MODE
#define GL_LOGIC_OP_MODE 0x0BF0
#endif //GL_LOGIC_OP_MODE
#ifndef GL_LOGIC_OP
#define GL_LOGIC_OP 0x0BF1
#endif //GL_LOGIC_OP
#ifndef GL_INDEX_LOGIC_OP
#define GL_INDEX_LOGIC_OP 0x0BF1
#endif //GL_INDEX_LOGIC_OP
#ifndef GL_COLOR_LOGIC_OP
#define GL_COLOR_LOGIC_OP 0x0BF2
#endif //GL_COLOR_LOGIC_OP
#ifndef GL_AUX_BUFFERS
#define GL_AUX_BUFFERS 0x0C00
#endif //GL_AUX_BUFFERS
#ifndef GL_DRAW_BUFFER
#define GL_DRAW_BUFFER 0x0C01
#endif //GL_DRAW_BUFFER
#ifndef GL_READ_BUFFER
#define GL_READ_BUFFER 0x0C02
#endif //GL_READ_BUFFER
#ifndef GL_SCISSOR_BOX
#define GL_SCISSOR_BOX 0x0C10
#endif //GL_SCISSOR_BOX
#ifndef GL_SCISSOR_TEST
#define GL_SCISSOR_TEST 0x0C11
#endif //GL_SCISSOR_TEST
#ifndef GL_INDEX_CLEAR_VALUE
#define GL_INDEX_CLEAR_VALUE 0x0C20
#endif //GL_INDEX_CLEAR_VALUE
#ifndef GL_INDEX_WRITEMASK
#define GL_INDEX_WRITEMASK 0x0C21
#endif //GL_INDEX_WRITEMASK
#ifndef GL_COLOR_CLEAR_VALUE
#define GL_COLOR_CLEAR_VALUE 0x0C22
#endif //GL_COLOR_CLEAR_VALUE
#ifndef GL_COLOR_WRITEMASK
#define GL_COLOR_WRITEMASK 0x0C23
#endif //GL_COLOR_WRITEMASK
#ifndef GL_INDEX_MODE
#define GL_INDEX_MODE 0x0C30
#endif //GL_INDEX_MODE
#ifndef GL_RGBA_MODE
#define GL_RGBA_MODE 0x0C31
#endif //GL_RGBA_MODE
#ifndef GL_DOUBLEBUFFER
#define GL_DOUBLEBUFFER 0x0C32
#endif //GL_DOUBLEBUFFER
#ifndef GL_STEREO
#define GL_STEREO 0x0C33
#endif //GL_STEREO
#ifndef GL_RENDER_MODE
#define GL_RENDER_MODE 0x0C40
#endif //GL_RENDER_MODE
#ifndef GL_PERSPECTIVE_CORRECTION_HINT
#define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50
#endif //GL_PERSPECTIVE_CORRECTION_HINT
#ifndef GL_POINT_SMOOTH_HINT
#define GL_POINT_SMOOTH_HINT 0x0C51
#endif //GL_POINT_SMOOTH_HINT
#ifndef GL_LINE_SMOOTH_HINT
#define GL_LINE_SMOOTH_HINT 0x0C52
#endif //GL_LINE_SMOOTH_HINT
#ifndef GL_POLYGON_SMOOTH_HINT
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#endif //GL_POLYGON_SMOOTH_HINT
#ifndef GL_FOG_HINT
#define GL_FOG_HINT 0x0C54
#endif //GL_FOG_HINT
#ifndef GL_TEXTURE_GEN_S
#define GL_TEXTURE_GEN_S 0x0C60
#endif //GL_TEXTURE_GEN_S
#ifndef GL_TEXTURE_GEN_T
#define GL_TEXTURE_GEN_T 0x0C61
#endif //GL_TEXTURE_GEN_T
#ifndef GL_TEXTURE_GEN_R
#define GL_TEXTURE_GEN_R 0x0C62
#endif //GL_TEXTURE_GEN_R
#ifndef GL_TEXTURE_GEN_Q
#define GL_TEXTURE_GEN_Q 0x0C63
#endif //GL_TEXTURE_GEN_Q
#ifndef GL_PIXEL_MAP_I_TO_I
#define GL_PIXEL_MAP_I_TO_I 0x0C70
#endif //GL_PIXEL_MAP_I_TO_I
#ifndef GL_PIXEL_MAP_S_TO_S
#define GL_PIXEL_MAP_S_TO_S 0x0C71
#endif //GL_PIXEL_MAP_S_TO_S
#ifndef GL_PIXEL_MAP_I_TO_R
#define GL_PIXEL_MAP_I_TO_R 0x0C72
#endif //GL_PIXEL_MAP_I_TO_R
#ifndef GL_PIXEL_MAP_I_TO_G
#define GL_PIXEL_MAP_I_TO_G 0x0C73
#endif //GL_PIXEL_MAP_I_TO_G
#ifndef GL_PIXEL_MAP_I_TO_B
#define GL_PIXEL_MAP_I_TO_B 0x0C74
#endif //GL_PIXEL_MAP_I_TO_B
#ifndef GL_PIXEL_MAP_I_TO_A
#define GL_PIXEL_MAP_I_TO_A 0x0C75
#endif //GL_PIXEL_MAP_I_TO_A
#ifndef GL_PIXEL_MAP_R_TO_R
#define GL_PIXEL_MAP_R_TO_R 0x0C76
#endif //GL_PIXEL_MAP_R_TO_R
#ifndef GL_PIXEL_MAP_G_TO_G
#define GL_PIXEL_MAP_G_TO_G 0x0C77
#endif //GL_PIXEL_MAP_G_TO_G
#ifndef GL_PIXEL_MAP_B_TO_B
#define GL_PIXEL_MAP_B_TO_B 0x0C78
#endif //GL_PIXEL_MAP_B_TO_B
#ifndef GL_PIXEL_MAP_A_TO_A
#define GL_PIXEL_MAP_A_TO_A 0x0C79
#endif //GL_PIXEL_MAP_A_TO_A
#ifndef GL_PIXEL_MAP_I_TO_I_SIZE
#define GL_PIXEL_MAP_I_TO_I_SIZE 0x0CB0
#endif //GL_PIXEL_MAP_I_TO_I_SIZE
#ifndef GL_PIXEL_MAP_S_TO_S_SIZE
#define GL_PIXEL_MAP_S_TO_S_SIZE 0x0CB1
#endif //GL_PIXEL_MAP_S_TO_S_SIZE
#ifndef GL_PIXEL_MAP_I_TO_R_SIZE
#define GL_PIXEL_MAP_I_TO_R_SIZE 0x0CB2
#endif //GL_PIXEL_MAP_I_TO_R_SIZE
#ifndef GL_PIXEL_MAP_I_TO_G_SIZE
#define GL_PIXEL_MAP_I_TO_G_SIZE 0x0CB3
#endif //GL_PIXEL_MAP_I_TO_G_SIZE
#ifndef GL_PIXEL_MAP_I_TO_B_SIZE
#define GL_PIXEL_MAP_I_TO_B_SIZE 0x0CB4
#endif //GL_PIXEL_MAP_I_TO_B_SIZE
#ifndef GL_PIXEL_MAP_I_TO_A_SIZE
#define GL_PIXEL_MAP_I_TO_A_SIZE 0x0CB5
#endif //GL_PIXEL_MAP_I_TO_A_SIZE
#ifndef GL_PIXEL_MAP_R_TO_R_SIZE
#define GL_PIXEL_MAP_R_TO_R_SIZE 0x0CB6
#endif //GL_PIXEL_MAP_R_TO_R_SIZE
#ifndef GL_PIXEL_MAP_G_TO_G_SIZE
#define GL_PIXEL_MAP_G_TO_G_SIZE 0x0CB7
#endif //GL_PIXEL_MAP_G_TO_G_SIZE
#ifndef GL_PIXEL_MAP_B_TO_B_SIZE
#define GL_PIXEL_MAP_B_TO_B_SIZE 0x0CB8
#endif //GL_PIXEL_MAP_B_TO_B_SIZE
#ifndef GL_PIXEL_MAP_A_TO_A_SIZE
#define GL_PIXEL_MAP_A_TO_A_SIZE 0x0CB9
#endif //GL_PIXEL_MAP_A_TO_A_SIZE
#ifndef GL_UNPACK_SWAP_BYTES
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#endif //GL_UNPACK_SWAP_BYTES
#ifndef GL_UNPACK_LSB_FIRST
#define GL_UNPACK_LSB_FIRST 0x0CF1
#endif //GL_UNPACK_LSB_FIRST
#ifndef GL_UNPACK_ROW_LENGTH
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#endif //GL_UNPACK_ROW_LENGTH
#ifndef GL_UNPACK_SKIP_ROWS
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#endif //GL_UNPACK_SKIP_ROWS
#ifndef GL_UNPACK_SKIP_PIXELS
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#endif //GL_UNPACK_SKIP_PIXELS
#ifndef GL_UNPACK_ALIGNMENT
#define GL_UNPACK_ALIGNMENT 0x0CF5
#endif //GL_UNPACK_ALIGNMENT
#ifndef GL_PACK_SWAP_BYTES
#define GL_PACK_SWAP_BYTES 0x0D00
#endif //GL_PACK_SWAP_BYTES
#ifndef GL_PACK_LSB_FIRST
#define GL_PACK_LSB_FIRST 0x0D01
#endif //GL_PACK_LSB_FIRST
#ifndef GL_PACK_ROW_LENGTH
#define GL_PACK_ROW_LENGTH 0x0D02
#endif //GL_PACK_ROW_LENGTH
#ifndef GL_PACK_SKIP_ROWS
#define GL_PACK_SKIP_ROWS 0x0D03
#endif //GL_PACK_SKIP_ROWS
#ifndef GL_PACK_SKIP_PIXELS
#define GL_PACK_SKIP_PIXELS 0x0D04
#endif //GL_PACK_SKIP_PIXELS
#ifndef GL_PACK_ALIGNMENT
#define GL_PACK_ALIGNMENT 0x0D05
#endif //GL_PACK_ALIGNMENT
#ifndef GL_MAP_COLOR
#define GL_MAP_COLOR 0x0D10
#endif //GL_MAP_COLOR
#ifndef GL_MAP_STENCIL
#define GL_MAP_STENCIL 0x0D11
#endif //GL_MAP_STENCIL
#ifndef GL_INDEX_SHIFT
#define GL_INDEX_SHIFT 0x0D12
#endif //GL_INDEX_SHIFT
#ifndef GL_INDEX_OFFSET
#define GL_INDEX_OFFSET 0x0D13
#endif //GL_INDEX_OFFSET
#ifndef GL_RED_SCALE
#define GL_RED_SCALE 0x0D14
#endif //GL_RED_SCALE
#ifndef GL_RED_BIAS
#define GL_RED_BIAS 0x0D15
#endif //GL_RED_BIAS
#ifndef GL_ZOOM_X
#define GL_ZOOM_X 0x0D16
#endif //GL_ZOOM_X
#ifndef GL_ZOOM_Y
#define GL_ZOOM_Y 0x0D17
#endif //GL_ZOOM_Y
#ifndef GL_GREEN_SCALE
#define GL_GREEN_SCALE 0x0D18
#endif //GL_GREEN_SCALE
#ifndef GL_GREEN_BIAS
#define GL_GREEN_BIAS 0x0D19
#endif //GL_GREEN_BIAS
#ifndef GL_BLUE_SCALE
#define GL_BLUE_SCALE 0x0D1A
#endif //GL_BLUE_SCALE
#ifndef GL_BLUE_BIAS
#define GL_BLUE_BIAS 0x0D1B
#endif //GL_BLUE_BIAS
#ifndef GL_ALPHA_SCALE
#define GL_ALPHA_SCALE 0x0D1C
#endif //GL_ALPHA_SCALE
#ifndef GL_ALPHA_BIAS
#define GL_ALPHA_BIAS 0x0D1D
#endif //GL_ALPHA_BIAS
#ifndef GL_DEPTH_SCALE
#define GL_DEPTH_SCALE 0x0D1E
#endif //GL_DEPTH_SCALE
#ifndef GL_DEPTH_BIAS
#define GL_DEPTH_BIAS 0x0D1F
#endif //GL_DEPTH_BIAS
#ifndef GL_MAX_EVAL_ORDER
#define GL_MAX_EVAL_ORDER 0x0D30
#endif //GL_MAX_EVAL_ORDER
#ifndef GL_MAX_LIGHTS
#define GL_MAX_LIGHTS 0x0D31
#endif //GL_MAX_LIGHTS
#ifndef GL_MAX_CLIP_PLANES
#define GL_MAX_CLIP_PLANES 0x0D32
#endif //GL_MAX_CLIP_PLANES
#ifndef GL_MAX_TEXTURE_SIZE
#define GL_MAX_TEXTURE_SIZE 0x0D33
#endif //GL_MAX_TEXTURE_SIZE
#ifndef GL_MAX_PIXEL_MAP_TABLE
#define GL_MAX_PIXEL_MAP_TABLE 0x0D34
#endif //GL_MAX_PIXEL_MAP_TABLE
#ifndef GL_MAX_ATTRIB_STACK_DEPTH
#define GL_MAX_ATTRIB_STACK_DEPTH 0x0D35
#endif //GL_MAX_ATTRIB_STACK_DEPTH
#ifndef GL_MAX_MODELVIEW_STACK_DEPTH
#define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36
#endif //GL_MAX_MODELVIEW_STACK_DEPTH
#ifndef GL_MAX_NAME_STACK_DEPTH
#define GL_MAX_NAME_STACK_DEPTH 0x0D37
#endif //GL_MAX_NAME_STACK_DEPTH
#ifndef GL_MAX_PROJECTION_STACK_DEPTH
#define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38
#endif //GL_MAX_PROJECTION_STACK_DEPTH
#ifndef GL_MAX_TEXTURE_STACK_DEPTH
#define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39
#endif //GL_MAX_TEXTURE_STACK_DEPTH
#ifndef GL_MAX_VIEWPORT_DIMS
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#endif //GL_MAX_VIEWPORT_DIMS
#ifndef GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0x0D3B
#endif //GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
#ifndef GL_SUBPIXEL_BITS
#define GL_SUBPIXEL_BITS 0x0D50
#endif //GL_SUBPIXEL_BITS
#ifndef GL_INDEX_BITS
#define GL_INDEX_BITS 0x0D51
#endif //GL_INDEX_BITS
#ifndef GL_RED_BITS
#define GL_RED_BITS 0x0D52
#endif //GL_RED_BITS
#ifndef GL_GREEN_BITS
#define GL_GREEN_BITS 0x0D53
#endif //GL_GREEN_BITS
#ifndef GL_BLUE_BITS
#define GL_BLUE_BITS 0x0D54
#endif //GL_BLUE_BITS
#ifndef GL_ALPHA_BITS
#define GL_ALPHA_BITS 0x0D55
#endif //GL_ALPHA_BITS
#ifndef GL_DEPTH_BITS
#define GL_DEPTH_BITS 0x0D56
#endif //GL_DEPTH_BITS
#ifndef GL_STENCIL_BITS
#define GL_STENCIL_BITS 0x0D57
#endif //GL_STENCIL_BITS
#ifndef GL_ACCUM_RED_BITS
#define GL_ACCUM_RED_BITS 0x0D58
#endif //GL_ACCUM_RED_BITS
#ifndef GL_ACCUM_GREEN_BITS
#define GL_ACCUM_GREEN_BITS 0x0D59
#endif //GL_ACCUM_GREEN_BITS
#ifndef GL_ACCUM_BLUE_BITS
#define GL_ACCUM_BLUE_BITS 0x0D5A
#endif //GL_ACCUM_BLUE_BITS
#ifndef GL_ACCUM_ALPHA_BITS
#define GL_ACCUM_ALPHA_BITS 0x0D5B
#endif //GL_ACCUM_ALPHA_BITS
#ifndef GL_NAME_STACK_DEPTH
#define GL_NAME_STACK_DEPTH 0x0D70
#endif //GL_NAME_STACK_DEPTH
#ifndef GL_AUTO_NORMAL
#define GL_AUTO_NORMAL 0x0D80
#endif //GL_AUTO_NORMAL
#ifndef GL_MAP1_COLOR_4
#define GL_MAP1_COLOR_4 0x0D90
#endif //GL_MAP1_COLOR_4
#ifndef GL_MAP1_INDEX
#define GL_MAP1_INDEX 0x0D91
#endif //GL_MAP1_INDEX
#ifndef GL_MAP1_NORMAL
#define GL_MAP1_NORMAL 0x0D92
#endif //GL_MAP1_NORMAL
#ifndef GL_MAP1_TEXTURE_COORD_1
#define GL_MAP1_TEXTURE_COORD_1 0x0D93
#endif //GL_MAP1_TEXTURE_COORD_1
#ifndef GL_MAP1_TEXTURE_COORD_2
#define GL_MAP1_TEXTURE_COORD_2 0x0D94
#endif //GL_MAP1_TEXTURE_COORD_2
#ifndef GL_MAP1_TEXTURE_COORD_3
#define GL_MAP1_TEXTURE_COORD_3 0x0D95
#endif //GL_MAP1_TEXTURE_COORD_3
#ifndef GL_MAP1_TEXTURE_COORD_4
#define GL_MAP1_TEXTURE_COORD_4 0x0D96
#endif //GL_MAP1_TEXTURE_COORD_4
#ifndef GL_MAP1_VERTEX_3
#define GL_MAP1_VERTEX_3 0x0D97
#endif //GL_MAP1_VERTEX_3
#ifndef GL_MAP1_VERTEX_4
#define GL_MAP1_VERTEX_4 0x0D98
#endif //GL_MAP1_VERTEX_4
#ifndef GL_MAP2_COLOR_4
#define GL_MAP2_COLOR_4 0x0DB0
#endif //GL_MAP2_COLOR_4
#ifndef GL_MAP2_INDEX
#define GL_MAP2_INDEX 0x0DB1
#endif //GL_MAP2_INDEX
#ifndef GL_MAP2_NORMAL
#define GL_MAP2_NORMAL 0x0DB2
#endif //GL_MAP2_NORMAL
#ifndef GL_MAP2_TEXTURE_COORD_1
#define GL_MAP2_TEXTURE_COORD_1 0x0DB3
#endif //GL_MAP2_TEXTURE_COORD_1
#ifndef GL_MAP2_TEXTURE_COORD_2
#define GL_MAP2_TEXTURE_COORD_2 0x0DB4
#endif //GL_MAP2_TEXTURE_COORD_2
#ifndef GL_MAP2_TEXTURE_COORD_3
#define GL_MAP2_TEXTURE_COORD_3 0x0DB5
#endif //GL_MAP2_TEXTURE_COORD_3
#ifndef GL_MAP2_TEXTURE_COORD_4
#define GL_MAP2_TEXTURE_COORD_4 0x0DB6
#endif //GL_MAP2_TEXTURE_COORD_4
#ifndef GL_MAP2_VERTEX_3
#define GL_MAP2_VERTEX_3 0x0DB7
#endif //GL_MAP2_VERTEX_3
#ifndef GL_MAP2_VERTEX_4
#define GL_MAP2_VERTEX_4 0x0DB8
#endif //GL_MAP2_VERTEX_4
#ifndef GL_MAP1_GRID_DOMAIN
#define GL_MAP1_GRID_DOMAIN 0x0DD0
#endif //GL_MAP1_GRID_DOMAIN
#ifndef GL_MAP1_GRID_SEGMENTS
#define GL_MAP1_GRID_SEGMENTS 0x0DD1
#endif //GL_MAP1_GRID_SEGMENTS
#ifndef GL_MAP2_GRID_DOMAIN
#define GL_MAP2_GRID_DOMAIN 0x0DD2
#endif //GL_MAP2_GRID_DOMAIN
#ifndef GL_MAP2_GRID_SEGMENTS
#define GL_MAP2_GRID_SEGMENTS 0x0DD3
#endif //GL_MAP2_GRID_SEGMENTS
#ifndef GL_TEXTURE_1D
#define GL_TEXTURE_1D 0x0DE0
#endif //GL_TEXTURE_1D
#ifndef GL_TEXTURE_2D
#define GL_TEXTURE_2D 0x0DE1
#endif //GL_TEXTURE_2D
#ifndef GL_FEEDBACK_BUFFER_POINTER
#define GL_FEEDBACK_BUFFER_POINTER 0x0DF0
#endif //GL_FEEDBACK_BUFFER_POINTER
#ifndef GL_FEEDBACK_BUFFER_SIZE
#define GL_FEEDBACK_BUFFER_SIZE 0x0DF1
#endif //GL_FEEDBACK_BUFFER_SIZE
#ifndef GL_FEEDBACK_BUFFER_TYPE
#define GL_FEEDBACK_BUFFER_TYPE 0x0DF2
#endif //GL_FEEDBACK_BUFFER_TYPE
#ifndef GL_SELECTION_BUFFER_POINTER
#define GL_SELECTION_BUFFER_POINTER 0x0DF3
#endif //GL_SELECTION_BUFFER_POINTER
#ifndef GL_SELECTION_BUFFER_SIZE
#define GL_SELECTION_BUFFER_SIZE 0x0DF4
#endif //GL_SELECTION_BUFFER_SIZE
#ifndef GL_TEXTURE_WIDTH
#define GL_TEXTURE_WIDTH 0x1000
#endif //GL_TEXTURE_WIDTH
#ifndef GL_TEXTURE_HEIGHT
#define GL_TEXTURE_HEIGHT 0x1001
#endif //GL_TEXTURE_HEIGHT
#ifndef GL_TEXTURE_COMPONENTS
#define GL_TEXTURE_COMPONENTS 0x1003
#endif //GL_TEXTURE_COMPONENTS
#ifndef GL_TEXTURE_INTERNAL_FORMAT
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#endif //GL_TEXTURE_INTERNAL_FORMAT
#ifndef GL_TEXTURE_BORDER_COLOR
#define GL_TEXTURE_BORDER_COLOR 0x1004
#endif //GL_TEXTURE_BORDER_COLOR
#ifndef GL_TEXTURE_BORDER
#define GL_TEXTURE_BORDER 0x1005
#endif //GL_TEXTURE_BORDER
#ifndef GL_DONT_CARE
#define GL_DONT_CARE 0x1100
#endif //GL_DONT_CARE
#ifndef GL_FASTEST
#define GL_FASTEST 0x1101
#endif //GL_FASTEST
#ifndef GL_NICEST
#define GL_NICEST 0x1102
#endif //GL_NICEST
#ifndef GL_AMBIENT
#define GL_AMBIENT 0x1200
#endif //GL_AMBIENT
#ifndef GL_DIFFUSE
#define GL_DIFFUSE 0x1201
#endif //GL_DIFFUSE
#ifndef GL_SPECULAR
#define GL_SPECULAR 0x1202
#endif //GL_SPECULAR
#ifndef GL_POSITION
#define GL_POSITION 0x1203
#endif //GL_POSITION
#ifndef GL_SPOT_DIRECTION
#define GL_SPOT_DIRECTION 0x1204
#endif //GL_SPOT_DIRECTION
#ifndef GL_SPOT_EXPONENT
#define GL_SPOT_EXPONENT 0x1205
#endif //GL_SPOT_EXPONENT
#ifndef GL_SPOT_CUTOFF
#define GL_SPOT_CUTOFF 0x1206
#endif //GL_SPOT_CUTOFF
#ifndef GL_CONSTANT_ATTENUATION
#define GL_CONSTANT_ATTENUATION 0x1207
#endif //GL_CONSTANT_ATTENUATION
#ifndef GL_LINEAR_ATTENUATION
#define GL_LINEAR_ATTENUATION 0x1208
#endif //GL_LINEAR_ATTENUATION
#ifndef GL_QUADRATIC_ATTENUATION
#define GL_QUADRATIC_ATTENUATION 0x1209
#endif //GL_QUADRATIC_ATTENUATION
#ifndef GL_COMPILE
#define GL_COMPILE 0x1300
#endif //GL_COMPILE
#ifndef GL_COMPILE_AND_EXECUTE
#define GL_COMPILE_AND_EXECUTE 0x1301
#endif //GL_COMPILE_AND_EXECUTE
#ifndef GL_BYTE
#define GL_BYTE 0x1400
#endif //GL_BYTE
#ifndef GL_UNSIGNED_BYTE
#define GL_UNSIGNED_BYTE 0x1401
#endif //GL_UNSIGNED_BYTE
#ifndef GL_SHORT
#define GL_SHORT 0x1402
#endif //GL_SHORT
#ifndef GL_UNSIGNED_SHORT
#define GL_UNSIGNED_SHORT 0x1403
#endif //GL_UNSIGNED_SHORT
#ifndef GL_INT
#define GL_INT 0x1404
#endif //GL_INT
#ifndef GL_UNSIGNED_INT
#define GL_UNSIGNED_INT 0x1405
#endif //GL_UNSIGNED_INT
#ifndef GL_FLOAT
#define GL_FLOAT 0x1406
#endif //GL_FLOAT
#ifndef GL_2_BYTES
#define GL_2_BYTES 0x1407
#endif //GL_2_BYTES
#ifndef GL_3_BYTES
#define GL_3_BYTES 0x1408
#endif //GL_3_BYTES
#ifndef GL_4_BYTES
#define GL_4_BYTES 0x1409
#endif //GL_4_BYTES
#ifndef GL_DOUBLE
#define GL_DOUBLE 0x140A
#endif //GL_DOUBLE
#ifndef GL_CLEAR
#define GL_CLEAR 0x1500
#endif //GL_CLEAR
#ifndef GL_AND
#define GL_AND 0x1501
#endif //GL_AND
#ifndef GL_AND_REVERSE
#define GL_AND_REVERSE 0x1502
#endif //GL_AND_REVERSE
#ifndef GL_COPY
#define GL_COPY 0x1503
#endif //GL_COPY
#ifndef GL_AND_INVERTED
#define GL_AND_INVERTED 0x1504
#endif //GL_AND_INVERTED
#ifndef GL_NOOP
#define GL_NOOP 0x1505
#endif //GL_NOOP
#ifndef GL_XOR
#define GL_XOR 0x1506
#endif //GL_XOR
#ifndef GL_OR
#define GL_OR 0x1507
#endif //GL_OR
#ifndef GL_NOR
#define GL_NOR 0x1508
#endif //GL_NOR
#ifndef GL_EQUIV
#define GL_EQUIV 0x1509
#endif //GL_EQUIV
#ifndef GL_INVERT
#define GL_INVERT 0x150A
#endif //GL_INVERT
#ifndef GL_OR_REVERSE
#define GL_OR_REVERSE 0x150B
#endif //GL_OR_REVERSE
#ifndef GL_COPY_INVERTED
#define GL_COPY_INVERTED 0x150C
#endif //GL_COPY_INVERTED
#ifndef GL_OR_INVERTED
#define GL_OR_INVERTED 0x150D
#endif //GL_OR_INVERTED
#ifndef GL_NAND
#define GL_NAND 0x150E
#endif //GL_NAND
#ifndef GL_SET
#define GL_SET 0x150F
#endif //GL_SET
#ifndef GL_EMISSION
#define GL_EMISSION 0x1600
#endif //GL_EMISSION
#ifndef GL_SHININESS
#define GL_SHININESS 0x1601
#endif //GL_SHININESS
#ifndef GL_AMBIENT_AND_DIFFUSE
#define GL_AMBIENT_AND_DIFFUSE 0x1602
#endif //GL_AMBIENT_AND_DIFFUSE
#ifndef GL_COLOR_INDEXES
#define GL_COLOR_INDEXES 0x1603
#endif //GL_COLOR_INDEXES
#ifndef GL_MODELVIEW
#define GL_MODELVIEW 0x1700
#endif //GL_MODELVIEW
#ifndef GL_PROJECTION
#define GL_PROJECTION 0x1701
#endif //GL_PROJECTION
#ifndef GL_TEXTURE
#define GL_TEXTURE 0x1702
#endif //GL_TEXTURE
#ifndef GL_COLOR
#define GL_COLOR 0x1800
#endif //GL_COLOR
#ifndef GL_DEPTH
#define GL_DEPTH 0x1801
#endif //GL_DEPTH
#ifndef GL_STENCIL
#define GL_STENCIL 0x1802
#endif //GL_STENCIL
#ifndef GL_COLOR_INDEX
#define GL_COLOR_INDEX 0x1900
#endif //GL_COLOR_INDEX
#ifndef GL_STENCIL_INDEX
#define GL_STENCIL_INDEX 0x1901
#endif //GL_STENCIL_INDEX
#ifndef GL_DEPTH_COMPONENT
#define GL_DEPTH_COMPONENT 0x1902
#endif //GL_DEPTH_COMPONENT
#ifndef GL_RED
#define GL_RED 0x1903
#endif //GL_RED
#ifndef GL_GREEN
#define GL_GREEN 0x1904
#endif //GL_GREEN
#ifndef GL_BLUE
#define GL_BLUE 0x1905
#endif //GL_BLUE
#ifndef GL_ALPHA
#define GL_ALPHA 0x1906
#endif //GL_ALPHA
#ifndef GL_RGB
#define GL_RGB 0x1907
#endif //GL_RGB
#ifndef GL_RGBA
#define GL_RGBA 0x1908
#endif //GL_RGBA
#ifndef GL_LUMINANCE
#define GL_LUMINANCE 0x1909
#endif //GL_LUMINANCE
#ifndef GL_LUMINANCE_ALPHA
#define GL_LUMINANCE_ALPHA 0x190A
#endif //GL_LUMINANCE_ALPHA
#ifndef GL_BITMAP
#define GL_BITMAP 0x1A00
#endif //GL_BITMAP
#ifndef GL_POINT
#define GL_POINT 0x1B00
#endif //GL_POINT
#ifndef GL_LINE
#define GL_LINE 0x1B01
#endif //GL_LINE
#ifndef GL_FILL
#define GL_FILL 0x1B02
#endif //GL_FILL
#ifndef GL_RENDER
#define GL_RENDER 0x1C00
#endif //GL_RENDER
#ifndef GL_FEEDBACK
#define GL_FEEDBACK 0x1C01
#endif //GL_FEEDBACK
#ifndef GL_SELECT
#define GL_SELECT 0x1C02
#endif //GL_SELECT
#ifndef GL_FLAT
#define GL_FLAT 0x1D00
#endif //GL_FLAT
#ifndef GL_SMOOTH
#define GL_SMOOTH 0x1D01
#endif //GL_SMOOTH
#ifndef GL_KEEP
#define GL_KEEP 0x1E00
#endif //GL_KEEP
#ifndef GL_REPLACE
#define GL_REPLACE 0x1E01
#endif //GL_REPLACE
#ifndef GL_INCR
#define GL_INCR 0x1E02
#endif //GL_INCR
#ifndef GL_DECR
#define GL_DECR 0x1E03
#endif //GL_DECR
#ifndef GL_VENDOR
#define GL_VENDOR 0x1F00
#endif //GL_VENDOR
#ifndef GL_RENDERER
#define GL_RENDERER 0x1F01
#endif //GL_RENDERER
#ifndef GL_VERSION
#define GL_VERSION 0x1F02
#endif //GL_VERSION
#ifndef GL_EXTENSIONS
#define GL_EXTENSIONS 0x1F03
#endif //GL_EXTENSIONS
#ifndef GL_S
#define GL_S 0x2000
#endif //GL_S
#ifndef GL_MULTISAMPLE_BIT
#define GL_MULTISAMPLE_BIT 0x20000000
#endif //GL_MULTISAMPLE_BIT
#ifndef GL_T
#define GL_T 0x2001
#endif //GL_T
#ifndef GL_R
#define GL_R 0x2002
#endif //GL_R
#ifndef GL_Q
#define GL_Q 0x2003
#endif //GL_Q
#ifndef GL_MODULATE
#define GL_MODULATE 0x2100
#endif //GL_MODULATE
#ifndef GL_DECAL
#define GL_DECAL 0x2101
#endif //GL_DECAL
#ifndef GL_TEXTURE_ENV_MODE
#define GL_TEXTURE_ENV_MODE 0x2200
#endif //GL_TEXTURE_ENV_MODE
#ifndef GL_TEXTURE_ENV_COLOR
#define GL_TEXTURE_ENV_COLOR 0x2201
#endif //GL_TEXTURE_ENV_COLOR
#ifndef GL_TEXTURE_ENV
#define GL_TEXTURE_ENV 0x2300
#endif //GL_TEXTURE_ENV
#ifndef GL_EYE_LINEAR
#define GL_EYE_LINEAR 0x2400
#endif //GL_EYE_LINEAR
#ifndef GL_OBJECT_LINEAR
#define GL_OBJECT_LINEAR 0x2401
#endif //GL_OBJECT_LINEAR
#ifndef GL_SPHERE_MAP
#define GL_SPHERE_MAP 0x2402
#endif //GL_SPHERE_MAP
#ifndef GL_TEXTURE_GEN_MODE
#define GL_TEXTURE_GEN_MODE 0x2500
#endif //GL_TEXTURE_GEN_MODE
#ifndef GL_OBJECT_PLANE
#define GL_OBJECT_PLANE 0x2501
#endif //GL_OBJECT_PLANE
#ifndef GL_EYE_PLANE
#define GL_EYE_PLANE 0x2502
#endif //GL_EYE_PLANE
#ifndef GL_NEAREST
#define GL_NEAREST 0x2600
#endif //GL_NEAREST
#ifndef GL_LINEAR
#define GL_LINEAR 0x2601
#endif //GL_LINEAR
#ifndef GL_NEAREST_MIPMAP_NEAREST
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#endif //GL_NEAREST_MIPMAP_NEAREST
#ifndef GL_LINEAR_MIPMAP_NEAREST
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#endif //GL_LINEAR_MIPMAP_NEAREST
#ifndef GL_NEAREST_MIPMAP_LINEAR
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#endif //GL_NEAREST_MIPMAP_LINEAR
#ifndef GL_LINEAR_MIPMAP_LINEAR
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#endif //GL_LINEAR_MIPMAP_LINEAR
#ifndef GL_TEXTURE_MAG_FILTER
#define GL_TEXTURE_MAG_FILTER 0x2800
#endif //GL_TEXTURE_MAG_FILTER
#ifndef GL_TEXTURE_MIN_FILTER
#define GL_TEXTURE_MIN_FILTER 0x2801
#endif //GL_TEXTURE_MIN_FILTER
#ifndef GL_TEXTURE_WRAP_S
#define GL_TEXTURE_WRAP_S 0x2802
#endif //GL_TEXTURE_WRAP_S
#ifndef GL_TEXTURE_WRAP_T
#define GL_TEXTURE_WRAP_T 0x2803
#endif //GL_TEXTURE_WRAP_T
#ifndef GL_CLAMP
#define GL_CLAMP 0x2900
#endif //GL_CLAMP
#ifndef GL_REPEAT
#define GL_REPEAT 0x2901
#endif //GL_REPEAT
#ifndef GL_POLYGON_OFFSET_UNITS
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#endif //GL_POLYGON_OFFSET_UNITS
#ifndef GL_POLYGON_OFFSET_POINT
#define GL_POLYGON_OFFSET_POINT 0x2A01
#endif //GL_POLYGON_OFFSET_POINT
#ifndef GL_POLYGON_OFFSET_LINE
#define GL_POLYGON_OFFSET_LINE 0x2A02
#endif //GL_POLYGON_OFFSET_LINE
#ifndef GL_R3_G3_B2
#define GL_R3_G3_B2 0x2A10
#endif //GL_R3_G3_B2
#ifndef GL_V2F
#define GL_V2F 0x2A20
#endif //GL_V2F
#ifndef GL_V3F
#define GL_V3F 0x2A21
#endif //GL_V3F
#ifndef GL_C4UB_V2F
#define GL_C4UB_V2F 0x2A22
#endif //GL_C4UB_V2F
#ifndef GL_C4UB_V3F
#define GL_C4UB_V3F 0x2A23
#endif //GL_C4UB_V3F
#ifndef GL_C3F_V3F
#define GL_C3F_V3F 0x2A24
#endif //GL_C3F_V3F
#ifndef GL_N3F_V3F
#define GL_N3F_V3F 0x2A25
#endif //GL_N3F_V3F
#ifndef GL_C4F_N3F_V3F
#define GL_C4F_N3F_V3F 0x2A26
#endif //GL_C4F_N3F_V3F
#ifndef GL_T2F_V3F
#define GL_T2F_V3F 0x2A27
#endif //GL_T2F_V3F
#ifndef GL_T4F_V4F
#define GL_T4F_V4F 0x2A28
#endif //GL_T4F_V4F
#ifndef GL_T2F_C4UB_V3F
#define GL_T2F_C4UB_V3F 0x2A29
#endif //GL_T2F_C4UB_V3F
#ifndef GL_T2F_C3F_V3F
#define GL_T2F_C3F_V3F 0x2A2A
#endif //GL_T2F_C3F_V3F
#ifndef GL_T2F_N3F_V3F
#define GL_T2F_N3F_V3F 0x2A2B
#endif //GL_T2F_N3F_V3F
#ifndef GL_T2F_C4F_N3F_V3F
#define GL_T2F_C4F_N3F_V3F 0x2A2C
#endif //GL_T2F_C4F_N3F_V3F
#ifndef GL_T4F_C4F_N3F_V4F
#define GL_T4F_C4F_N3F_V4F 0x2A2D
#endif //GL_T4F_C4F_N3F_V4F
#ifndef GL_CLIP_PLANE0
#define GL_CLIP_PLANE0 0x3000
#endif //GL_CLIP_PLANE0
#ifndef GL_CLIP_PLANE1
#define GL_CLIP_PLANE1 0x3001
#endif //GL_CLIP_PLANE1
#ifndef GL_CLIP_PLANE2
#define GL_CLIP_PLANE2 0x3002
#endif //GL_CLIP_PLANE2
#ifndef GL_CLIP_PLANE3
#define GL_CLIP_PLANE3 0x3003
#endif //GL_CLIP_PLANE3
#ifndef GL_CLIP_PLANE4
#define GL_CLIP_PLANE4 0x3004
#endif //GL_CLIP_PLANE4
#ifndef GL_CLIP_PLANE5
#define GL_CLIP_PLANE5 0x3005
#endif //GL_CLIP_PLANE5
#ifndef GL_LIGHT0
#define GL_LIGHT0 0x4000
#endif //GL_LIGHT0
#ifndef GL_LIGHT1
#define GL_LIGHT1 0x4001
#endif //GL_LIGHT1
#ifndef GL_LIGHT2
#define GL_LIGHT2 0x4002
#endif //GL_LIGHT2
#ifndef GL_LIGHT3
#define GL_LIGHT3 0x4003
#endif //GL_LIGHT3
#ifndef GL_LIGHT4
#define GL_LIGHT4 0x4004
#endif //GL_LIGHT4
#ifndef GL_LIGHT5
#define GL_LIGHT5 0x4005
#endif //GL_LIGHT5
#ifndef GL_LIGHT6
#define GL_LIGHT6 0x4006
#endif //GL_LIGHT6
#ifndef GL_LIGHT7
#define GL_LIGHT7 0x4007
#endif //GL_LIGHT7
#ifndef GL_UNSIGNED_BYTE_3_3_2
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#endif //GL_UNSIGNED_BYTE_3_3_2
#ifndef GL_UNSIGNED_SHORT_4_4_4_4
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#endif //GL_UNSIGNED_SHORT_4_4_4_4
#ifndef GL_UNSIGNED_SHORT_5_5_5_1
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#endif //GL_UNSIGNED_SHORT_5_5_5_1
#ifndef GL_UNSIGNED_INT_8_8_8_8
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#endif //GL_UNSIGNED_INT_8_8_8_8
#ifndef GL_UNSIGNED_INT_10_10_10_2
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#endif //GL_UNSIGNED_INT_10_10_10_2
#ifndef GL_POLYGON_OFFSET_FILL
#define GL_POLYGON_OFFSET_FILL 0x8037
#endif //GL_POLYGON_OFFSET_FILL
#ifndef GL_POLYGON_OFFSET_FACTOR
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#endif //GL_POLYGON_OFFSET_FACTOR
#ifndef GL_RESCALE_NORMAL
#define GL_RESCALE_NORMAL 0x803A
#endif //GL_RESCALE_NORMAL
#ifndef GL_ALPHA4
#define GL_ALPHA4 0x803B
#endif //GL_ALPHA4
#ifndef GL_ALPHA8
#define GL_ALPHA8 0x803C
#endif //GL_ALPHA8
#ifndef GL_ALPHA12
#define GL_ALPHA12 0x803D
#endif //GL_ALPHA12
#ifndef GL_ALPHA16
#define GL_ALPHA16 0x803E
#endif //GL_ALPHA16
#ifndef GL_LUMINANCE4
#define GL_LUMINANCE4 0x803F
#endif //GL_LUMINANCE4
#ifndef GL_LUMINANCE8
#define GL_LUMINANCE8 0x8040
#endif //GL_LUMINANCE8
#ifndef GL_LUMINANCE12
#define GL_LUMINANCE12 0x8041
#endif //GL_LUMINANCE12
#ifndef GL_LUMINANCE16
#define GL_LUMINANCE16 0x8042
#endif //GL_LUMINANCE16
#ifndef GL_LUMINANCE4_ALPHA4
#define GL_LUMINANCE4_ALPHA4 0x8043
#endif //GL_LUMINANCE4_ALPHA4
#ifndef GL_LUMINANCE6_ALPHA2
#define GL_LUMINANCE6_ALPHA2 0x8044
#endif //GL_LUMINANCE6_ALPHA2
#ifndef GL_LUMINANCE8_ALPHA8
#define GL_LUMINANCE8_ALPHA8 0x8045
#endif //GL_LUMINANCE8_ALPHA8
#ifndef GL_LUMINANCE12_ALPHA4
#define GL_LUMINANCE12_ALPHA4 0x8046
#endif //GL_LUMINANCE12_ALPHA4
#ifndef GL_LUMINANCE12_ALPHA12
#define GL_LUMINANCE12_ALPHA12 0x8047
#endif //GL_LUMINANCE12_ALPHA12
#ifndef GL_LUMINANCE16_ALPHA16
#define GL_LUMINANCE16_ALPHA16 0x8048
#endif //GL_LUMINANCE16_ALPHA16
#ifndef GL_INTENSITY
#define GL_INTENSITY 0x8049
#endif //GL_INTENSITY
#ifndef GL_INTENSITY4
#define GL_INTENSITY4 0x804A
#endif //GL_INTENSITY4
#ifndef GL_INTENSITY8
#define GL_INTENSITY8 0x804B
#endif //GL_INTENSITY8
#ifndef GL_INTENSITY12
#define GL_INTENSITY12 0x804C
#endif //GL_INTENSITY12
#ifndef GL_INTENSITY16
#define GL_INTENSITY16 0x804D
#endif //GL_INTENSITY16
#ifndef GL_RGB4
#define GL_RGB4 0x804F
#endif //GL_RGB4
#ifndef GL_RGB5
#define GL_RGB5 0x8050
#endif //GL_RGB5
#ifndef GL_RGB8
#define GL_RGB8 0x8051
#endif //GL_RGB8
#ifndef GL_RGB10
#define GL_RGB10 0x8052
#endif //GL_RGB10
#ifndef GL_RGB12
#define GL_RGB12 0x8053
#endif //GL_RGB12
#ifndef GL_RGB16
#define GL_RGB16 0x8054
#endif //GL_RGB16
#ifndef GL_RGBA2
#define GL_RGBA2 0x8055
#endif //GL_RGBA2
#ifndef GL_RGBA4
#define GL_RGBA4 0x8056
#endif //GL_RGBA4
#ifndef GL_RGB5_A1
#define GL_RGB5_A1 0x8057
#endif //GL_RGB5_A1
#ifndef GL_RGBA8
#define GL_RGBA8 0x8058
#endif //GL_RGBA8
#ifndef GL_RGB10_A2
#define GL_RGB10_A2 0x8059
#endif //GL_RGB10_A2
#ifndef GL_RGBA12
#define GL_RGBA12 0x805A
#endif //GL_RGBA12
#ifndef GL_RGBA16
#define GL_RGBA16 0x805B
#endif //GL_RGBA16
#ifndef GL_TEXTURE_RED_SIZE
#define GL_TEXTURE_RED_SIZE 0x805C
#endif //GL_TEXTURE_RED_SIZE
#ifndef GL_TEXTURE_GREEN_SIZE
#define GL_TEXTURE_GREEN_SIZE 0x805D
#endif //GL_TEXTURE_GREEN_SIZE
#ifndef GL_TEXTURE_BLUE_SIZE
#define GL_TEXTURE_BLUE_SIZE 0x805E
#endif //GL_TEXTURE_BLUE_SIZE
#ifndef GL_TEXTURE_ALPHA_SIZE
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#endif //GL_TEXTURE_ALPHA_SIZE
#ifndef GL_TEXTURE_LUMINANCE_SIZE
#define GL_TEXTURE_LUMINANCE_SIZE 0x8060
#endif //GL_TEXTURE_LUMINANCE_SIZE
#ifndef GL_TEXTURE_INTENSITY_SIZE
#define GL_TEXTURE_INTENSITY_SIZE 0x8061
#endif //GL_TEXTURE_INTENSITY_SIZE
#ifndef GL_PROXY_TEXTURE_1D
#define GL_PROXY_TEXTURE_1D 0x8063
#endif //GL_PROXY_TEXTURE_1D
#ifndef GL_PROXY_TEXTURE_2D
#define GL_PROXY_TEXTURE_2D 0x8064
#endif //GL_PROXY_TEXTURE_2D
#ifndef GL_TEXTURE_PRIORITY
#define GL_TEXTURE_PRIORITY 0x8066
#endif //GL_TEXTURE_PRIORITY
#ifndef GL_TEXTURE_RESIDENT
#define GL_TEXTURE_RESIDENT 0x8067
#endif //GL_TEXTURE_RESIDENT
#ifndef GL_TEXTURE_BINDING_1D
#define GL_TEXTURE_BINDING_1D 0x8068
#endif //GL_TEXTURE_BINDING_1D
#ifndef GL_TEXTURE_BINDING_2D
#define GL_TEXTURE_BINDING_2D 0x8069
#endif //GL_TEXTURE_BINDING_2D
#ifndef GL_TEXTURE_BINDING_3D
#define GL_TEXTURE_BINDING_3D 0x806A
#endif //GL_TEXTURE_BINDING_3D
#ifndef GL_PACK_SKIP_IMAGES
#define GL_PACK_SKIP_IMAGES 0x806B
#endif //GL_PACK_SKIP_IMAGES
#ifndef GL_PACK_IMAGE_HEIGHT
#define GL_PACK_IMAGE_HEIGHT 0x806C
#endif //GL_PACK_IMAGE_HEIGHT
#ifndef GL_UNPACK_SKIP_IMAGES
#define GL_UNPACK_SKIP_IMAGES 0x806D
#endif //GL_UNPACK_SKIP_IMAGES
#ifndef GL_UNPACK_IMAGE_HEIGHT
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#endif //GL_UNPACK_IMAGE_HEIGHT
#ifndef GL_TEXTURE_3D
#define GL_TEXTURE_3D 0x806F
#endif //GL_TEXTURE_3D
#ifndef GL_PROXY_TEXTURE_3D
#define GL_PROXY_TEXTURE_3D 0x8070
#endif //GL_PROXY_TEXTURE_3D
#ifndef GL_TEXTURE_DEPTH
#define GL_TEXTURE_DEPTH 0x8071
#endif //GL_TEXTURE_DEPTH
#ifndef GL_TEXTURE_WRAP_R
#define GL_TEXTURE_WRAP_R 0x8072
#endif //GL_TEXTURE_WRAP_R
#ifndef GL_MAX_3D_TEXTURE_SIZE
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#endif //GL_MAX_3D_TEXTURE_SIZE
#ifndef GL_VERTEX_ARRAY
#define GL_VERTEX_ARRAY 0x8074
#endif //GL_VERTEX_ARRAY
#ifndef GL_NORMAL_ARRAY
#define GL_NORMAL_ARRAY 0x8075
#endif //GL_NORMAL_ARRAY
#ifndef GL_COLOR_ARRAY
#define GL_COLOR_ARRAY 0x8076
#endif //GL_COLOR_ARRAY
#ifndef GL_INDEX_ARRAY
#define GL_INDEX_ARRAY 0x8077
#endif //GL_INDEX_ARRAY
#ifndef GL_TEXTURE_COORD_ARRAY
#define GL_TEXTURE_COORD_ARRAY 0x8078
#endif //GL_TEXTURE_COORD_ARRAY
#ifndef GL_EDGE_FLAG_ARRAY
#define GL_EDGE_FLAG_ARRAY 0x8079
#endif //GL_EDGE_FLAG_ARRAY
#ifndef GL_VERTEX_ARRAY_SIZE
#define GL_VERTEX_ARRAY_SIZE 0x807A
#endif //GL_VERTEX_ARRAY_SIZE
#ifndef GL_VERTEX_ARRAY_TYPE
#define GL_VERTEX_ARRAY_TYPE 0x807B
#endif //GL_VERTEX_ARRAY_TYPE
#ifndef GL_VERTEX_ARRAY_STRIDE
#define GL_VERTEX_ARRAY_STRIDE 0x807C
#endif //GL_VERTEX_ARRAY_STRIDE
#ifndef GL_NORMAL_ARRAY_TYPE
#define GL_NORMAL_ARRAY_TYPE 0x807E
#endif //GL_NORMAL_ARRAY_TYPE
#ifndef GL_NORMAL_ARRAY_STRIDE
#define GL_NORMAL_ARRAY_STRIDE 0x807F
#endif //GL_NORMAL_ARRAY_STRIDE
#ifndef GL_COLOR_ARRAY_SIZE
#define GL_COLOR_ARRAY_SIZE 0x8081
#endif //GL_COLOR_ARRAY_SIZE
#ifndef GL_COLOR_ARRAY_TYPE
#define GL_COLOR_ARRAY_TYPE 0x8082
#endif //GL_COLOR_ARRAY_TYPE
#ifndef GL_COLOR_ARRAY_STRIDE
#define GL_COLOR_ARRAY_STRIDE 0x8083
#endif //GL_COLOR_ARRAY_STRIDE
#ifndef GL_INDEX_ARRAY_TYPE
#define GL_INDEX_ARRAY_TYPE 0x8085
#endif //GL_INDEX_ARRAY_TYPE
#ifndef GL_INDEX_ARRAY_STRIDE
#define GL_INDEX_ARRAY_STRIDE 0x8086
#endif //GL_INDEX_ARRAY_STRIDE
#ifndef GL_TEXTURE_COORD_ARRAY_SIZE
#define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088
#endif //GL_TEXTURE_COORD_ARRAY_SIZE
#ifndef GL_TEXTURE_COORD_ARRAY_TYPE
#define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089
#endif //GL_TEXTURE_COORD_ARRAY_TYPE
#ifndef GL_TEXTURE_COORD_ARRAY_STRIDE
#define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A
#endif //GL_TEXTURE_COORD_ARRAY_STRIDE
#ifndef GL_EDGE_FLAG_ARRAY_STRIDE
#define GL_EDGE_FLAG_ARRAY_STRIDE 0x808C
#endif //GL_EDGE_FLAG_ARRAY_STRIDE
#ifndef GL_VERTEX_ARRAY_POINTER
#define GL_VERTEX_ARRAY_POINTER 0x808E
#endif //GL_VERTEX_ARRAY_POINTER
#ifndef GL_NORMAL_ARRAY_POINTER
#define GL_NORMAL_ARRAY_POINTER 0x808F
#endif //GL_NORMAL_ARRAY_POINTER
#ifndef GL_COLOR_ARRAY_POINTER
#define GL_COLOR_ARRAY_POINTER 0x8090
#endif //GL_COLOR_ARRAY_POINTER
#ifndef GL_INDEX_ARRAY_POINTER
#define GL_INDEX_ARRAY_POINTER 0x8091
#endif //GL_INDEX_ARRAY_POINTER
#ifndef GL_TEXTURE_COORD_ARRAY_POINTER
#define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092
#endif //GL_TEXTURE_COORD_ARRAY_POINTER
#ifndef GL_EDGE_FLAG_ARRAY_POINTER
#define GL_EDGE_FLAG_ARRAY_POINTER 0x8093
#endif //GL_EDGE_FLAG_ARRAY_POINTER
#ifndef GL_MULTISAMPLE
#define GL_MULTISAMPLE 0x809D
#endif //GL_MULTISAMPLE
#ifndef GL_SAMPLE_ALPHA_TO_COVERAGE
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#endif //GL_SAMPLE_ALPHA_TO_COVERAGE
#ifndef GL_SAMPLE_ALPHA_TO_ONE
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#endif //GL_SAMPLE_ALPHA_TO_ONE
#ifndef GL_SAMPLE_COVERAGE
#define GL_SAMPLE_COVERAGE 0x80A0
#endif //GL_SAMPLE_COVERAGE
#ifndef GL_SAMPLE_BUFFERS
#define GL_SAMPLE_BUFFERS 0x80A8
#endif //GL_SAMPLE_BUFFERS
#ifndef GL_SAMPLES
#define GL_SAMPLES 0x80A9
#endif //GL_SAMPLES
#ifndef GL_SAMPLE_COVERAGE_VALUE
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#endif //GL_SAMPLE_COVERAGE_VALUE
#ifndef GL_SAMPLE_COVERAGE_INVERT
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#endif //GL_SAMPLE_COVERAGE_INVERT
#ifndef GL_BGR
#define GL_BGR 0x80E0
#endif //GL_BGR
#ifndef GL_BGRA
#define GL_BGRA 0x80E1
#endif //GL_BGRA
#ifndef GL_MAX_ELEMENTS_VERTICES
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#endif //GL_MAX_ELEMENTS_VERTICES
#ifndef GL_MAX_ELEMENTS_INDICES
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#endif //GL_MAX_ELEMENTS_INDICES
#ifndef GL_CLAMP_TO_BORDER
#define GL_CLAMP_TO_BORDER 0x812D
#endif //GL_CLAMP_TO_BORDER
#ifndef GL_CLAMP_TO_EDGE
#define GL_CLAMP_TO_EDGE 0x812F
#endif //GL_CLAMP_TO_EDGE
#ifndef GL_TEXTURE_MIN_LOD
#define GL_TEXTURE_MIN_LOD 0x813A
#endif //GL_TEXTURE_MIN_LOD
#ifndef GL_TEXTURE_MAX_LOD
#define GL_TEXTURE_MAX_LOD 0x813B
#endif //GL_TEXTURE_MAX_LOD
#ifndef GL_TEXTURE_BASE_LEVEL
#define GL_TEXTURE_BASE_LEVEL 0x813C
#endif //GL_TEXTURE_BASE_LEVEL
#ifndef GL_TEXTURE_MAX_LEVEL
#define GL_TEXTURE_MAX_LEVEL 0x813D
#endif //GL_TEXTURE_MAX_LEVEL
#ifndef GL_LIGHT_MODEL_COLOR_CONTROL
#define GL_LIGHT_MODEL_COLOR_CONTROL 0x81F8
#endif //GL_LIGHT_MODEL_COLOR_CONTROL
#ifndef GL_SINGLE_COLOR
#define GL_SINGLE_COLOR 0x81F9
#endif //GL_SINGLE_COLOR
#ifndef GL_SEPARATE_SPECULAR_COLOR
#define GL_SEPARATE_SPECULAR_COLOR 0x81FA
#endif //GL_SEPARATE_SPECULAR_COLOR
#ifndef GL_UNSIGNED_BYTE_2_3_3_REV
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#endif //GL_UNSIGNED_BYTE_2_3_3_REV
#ifndef GL_UNSIGNED_SHORT_5_6_5
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#endif //GL_UNSIGNED_SHORT_5_6_5
#ifndef GL_UNSIGNED_SHORT_5_6_5_REV
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#endif //GL_UNSIGNED_SHORT_5_6_5_REV
#ifndef GL_UNSIGNED_SHORT_4_4_4_4_REV
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#endif //GL_UNSIGNED_SHORT_4_4_4_4_REV
#ifndef GL_UNSIGNED_SHORT_1_5_5_5_REV
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#endif //GL_UNSIGNED_SHORT_1_5_5_5_REV
#ifndef GL_UNSIGNED_INT_8_8_8_8_REV
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#endif //GL_UNSIGNED_INT_8_8_8_8_REV
#ifndef GL_UNSIGNED_INT_2_10_10_10_REV
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#endif //GL_UNSIGNED_INT_2_10_10_10_REV
#ifndef GL_ALIASED_POINT_SIZE_RANGE
#define GL_ALIASED_POINT_SIZE_RANGE 0x846D
#endif //GL_ALIASED_POINT_SIZE_RANGE
#ifndef GL_ALIASED_LINE_WIDTH_RANGE
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#endif //GL_ALIASED_LINE_WIDTH_RANGE
#ifndef GL_TEXTURE0
#define GL_TEXTURE0 0x84C0
#endif //GL_TEXTURE0
#ifndef GL_TEXTURE1
#define GL_TEXTURE1 0x84C1
#endif //GL_TEXTURE1
#ifndef GL_TEXTURE2
#define GL_TEXTURE2 0x84C2
#endif //GL_TEXTURE2
#ifndef GL_TEXTURE3
#define GL_TEXTURE3 0x84C3
#endif //GL_TEXTURE3
#ifndef GL_TEXTURE4
#define GL_TEXTURE4 0x84C4
#endif //GL_TEXTURE4
#ifndef GL_TEXTURE5
#define GL_TEXTURE5 0x84C5
#endif //GL_TEXTURE5
#ifndef GL_TEXTURE6
#define GL_TEXTURE6 0x84C6
#endif //GL_TEXTURE6
#ifndef GL_TEXTURE7
#define GL_TEXTURE7 0x84C7
#endif //GL_TEXTURE7
#ifndef GL_TEXTURE8
#define GL_TEXTURE8 0x84C8
#endif //GL_TEXTURE8
#ifndef GL_TEXTURE9
#define GL_TEXTURE9 0x84C9
#endif //GL_TEXTURE9
#ifndef GL_TEXTURE10
#define GL_TEXTURE10 0x84CA
#endif //GL_TEXTURE10
#ifndef GL_TEXTURE11
#define GL_TEXTURE11 0x84CB
#endif //GL_TEXTURE11
#ifndef GL_TEXTURE12
#define GL_TEXTURE12 0x84CC
#endif //GL_TEXTURE12
#ifndef GL_TEXTURE13
#define GL_TEXTURE13 0x84CD
#endif //GL_TEXTURE13
#ifndef GL_TEXTURE14
#define GL_TEXTURE14 0x84CE
#endif //GL_TEXTURE14
#ifndef GL_TEXTURE15
#define GL_TEXTURE15 0x84CF
#endif //GL_TEXTURE15
#ifndef GL_TEXTURE16
#define GL_TEXTURE16 0x84D0
#endif //GL_TEXTURE16
#ifndef GL_TEXTURE17
#define GL_TEXTURE17 0x84D1
#endif //GL_TEXTURE17
#ifndef GL_TEXTURE18
#define GL_TEXTURE18 0x84D2
#endif //GL_TEXTURE18
#ifndef GL_TEXTURE19
#define GL_TEXTURE19 0x84D3
#endif //GL_TEXTURE19
#ifndef GL_TEXTURE20
#define GL_TEXTURE20 0x84D4
#endif //GL_TEXTURE20
#ifndef GL_TEXTURE21
#define GL_TEXTURE21 0x84D5
#endif //GL_TEXTURE21
#ifndef GL_TEXTURE22
#define GL_TEXTURE22 0x84D6
#endif //GL_TEXTURE22
#ifndef GL_TEXTURE23
#define GL_TEXTURE23 0x84D7
#endif //GL_TEXTURE23
#ifndef GL_TEXTURE24
#define GL_TEXTURE24 0x84D8
#endif //GL_TEXTURE24
#ifndef GL_TEXTURE25
#define GL_TEXTURE25 0x84D9
#endif //GL_TEXTURE25
#ifndef GL_TEXTURE26
#define GL_TEXTURE26 0x84DA
#endif //GL_TEXTURE26
#ifndef GL_TEXTURE27
#define GL_TEXTURE27 0x84DB
#endif //GL_TEXTURE27
#ifndef GL_TEXTURE28
#define GL_TEXTURE28 0x84DC
#endif //GL_TEXTURE28
#ifndef GL_TEXTURE29
#define GL_TEXTURE29 0x84DD
#endif //GL_TEXTURE29
#ifndef GL_TEXTURE30
#define GL_TEXTURE30 0x84DE
#endif //GL_TEXTURE30
#ifndef GL_TEXTURE31
#define GL_TEXTURE31 0x84DF
#endif //GL_TEXTURE31
#ifndef GL_ACTIVE_TEXTURE
#define GL_ACTIVE_TEXTURE 0x84E0
#endif //GL_ACTIVE_TEXTURE
#ifndef GL_CLIENT_ACTIVE_TEXTURE
#define GL_CLIENT_ACTIVE_TEXTURE 0x84E1
#endif //GL_CLIENT_ACTIVE_TEXTURE
#ifndef GL_MAX_TEXTURE_UNITS
#define GL_MAX_TEXTURE_UNITS 0x84E2
#endif //GL_MAX_TEXTURE_UNITS
#ifndef GL_TRANSPOSE_MODELVIEW_MATRIX
#define GL_TRANSPOSE_MODELVIEW_MATRIX 0x84E3
#endif //GL_TRANSPOSE_MODELVIEW_MATRIX
#ifndef GL_TRANSPOSE_PROJECTION_MATRIX
#define GL_TRANSPOSE_PROJECTION_MATRIX 0x84E4
#endif //GL_TRANSPOSE_PROJECTION_MATRIX
#ifndef GL_TRANSPOSE_TEXTURE_MATRIX
#define GL_TRANSPOSE_TEXTURE_MATRIX 0x84E5
#endif //GL_TRANSPOSE_TEXTURE_MATRIX
#ifndef GL_TRANSPOSE_COLOR_MATRIX
#define GL_TRANSPOSE_COLOR_MATRIX 0x84E6
#endif //GL_TRANSPOSE_COLOR_MATRIX
#ifndef GL_SUBTRACT
#define GL_SUBTRACT 0x84E7
#endif //GL_SUBTRACT
#ifndef GL_COMPRESSED_ALPHA
#define GL_COMPRESSED_ALPHA 0x84E9
#endif //GL_COMPRESSED_ALPHA
#ifndef GL_COMPRESSED_LUMINANCE
#define GL_COMPRESSED_LUMINANCE 0x84EA
#endif //GL_COMPRESSED_LUMINANCE
#ifndef GL_COMPRESSED_LUMINANCE_ALPHA
#define GL_COMPRESSED_LUMINANCE_ALPHA 0x84EB
#endif //GL_COMPRESSED_LUMINANCE_ALPHA
#ifndef GL_COMPRESSED_INTENSITY
#define GL_COMPRESSED_INTENSITY 0x84EC
#endif //GL_COMPRESSED_INTENSITY
#ifndef GL_COMPRESSED_RGB
#define GL_COMPRESSED_RGB 0x84ED
#endif //GL_COMPRESSED_RGB
#ifndef GL_COMPRESSED_RGBA
#define GL_COMPRESSED_RGBA 0x84EE
#endif //GL_COMPRESSED_RGBA
#ifndef GL_TEXTURE_COMPRESSION_HINT
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#endif //GL_TEXTURE_COMPRESSION_HINT
#ifndef GL_NORMAL_MAP
#define GL_NORMAL_MAP 0x8511
#endif //GL_NORMAL_MAP
#ifndef GL_REFLECTION_MAP
#define GL_REFLECTION_MAP 0x8512
#endif //GL_REFLECTION_MAP
#ifndef GL_TEXTURE_CUBE_MAP
#define GL_TEXTURE_CUBE_MAP 0x8513
#endif //GL_TEXTURE_CUBE_MAP
#ifndef GL_TEXTURE_BINDING_CUBE_MAP
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#endif //GL_TEXTURE_BINDING_CUBE_MAP
#ifndef GL_TEXTURE_CUBE_MAP_POSITIVE_X
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#endif //GL_TEXTURE_CUBE_MAP_POSITIVE_X
#ifndef GL_TEXTURE_CUBE_MAP_NEGATIVE_X
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#endif //GL_TEXTURE_CUBE_MAP_NEGATIVE_X
#ifndef GL_TEXTURE_CUBE_MAP_POSITIVE_Y
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#endif //GL_TEXTURE_CUBE_MAP_POSITIVE_Y
#ifndef GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#endif //GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
#ifndef GL_TEXTURE_CUBE_MAP_POSITIVE_Z
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#endif //GL_TEXTURE_CUBE_MAP_POSITIVE_Z
#ifndef GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#endif //GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
#ifndef GL_PROXY_TEXTURE_CUBE_MAP
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#endif //GL_PROXY_TEXTURE_CUBE_MAP
#ifndef GL_MAX_CUBE_MAP_TEXTURE_SIZE
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#endif //GL_MAX_CUBE_MAP_TEXTURE_SIZE
#ifndef GL_COMBINE
#define GL_COMBINE 0x8570
#endif //GL_COMBINE
#ifndef GL_COMBINE_RGB
#define GL_COMBINE_RGB 0x8571
#endif //GL_COMBINE_RGB
#ifndef GL_COMBINE_ALPHA
#define GL_COMBINE_ALPHA 0x8572
#endif //GL_COMBINE_ALPHA
#ifndef GL_RGB_SCALE
#define GL_RGB_SCALE 0x8573
#endif //GL_RGB_SCALE
#ifndef GL_ADD_SIGNED
#define GL_ADD_SIGNED 0x8574
#endif //GL_ADD_SIGNED
#ifndef GL_INTERPOLATE
#define GL_INTERPOLATE 0x8575
#endif //GL_INTERPOLATE
#ifndef GL_CONSTANT
#define GL_CONSTANT 0x8576
#endif //GL_CONSTANT
#ifndef GL_PRIMARY_COLOR
#define GL_PRIMARY_COLOR 0x8577
#endif //GL_PRIMARY_COLOR
#ifndef GL_PREVIOUS
#define GL_PREVIOUS 0x8578
#endif //GL_PREVIOUS
#ifndef GL_SOURCE0_RGB
#define GL_SOURCE0_RGB 0x8580
#endif //GL_SOURCE0_RGB
#ifndef GL_SOURCE1_RGB
#define GL_SOURCE1_RGB 0x8581
#endif //GL_SOURCE1_RGB
#ifndef GL_SOURCE2_RGB
#define GL_SOURCE2_RGB 0x8582
#endif //GL_SOURCE2_RGB
#ifndef GL_SOURCE0_ALPHA
#define GL_SOURCE0_ALPHA 0x8588
#endif //GL_SOURCE0_ALPHA
#ifndef GL_SOURCE1_ALPHA
#define GL_SOURCE1_ALPHA 0x8589
#endif //GL_SOURCE1_ALPHA
#ifndef GL_SOURCE2_ALPHA
#define GL_SOURCE2_ALPHA 0x858A
#endif //GL_SOURCE2_ALPHA
#ifndef GL_OPERAND0_RGB
#define GL_OPERAND0_RGB 0x8590
#endif //GL_OPERAND0_RGB
#ifndef GL_OPERAND1_RGB
#define GL_OPERAND1_RGB 0x8591
#endif //GL_OPERAND1_RGB
#ifndef GL_OPERAND2_RGB
#define GL_OPERAND2_RGB 0x8592
#endif //GL_OPERAND2_RGB
#ifndef GL_OPERAND0_ALPHA
#define GL_OPERAND0_ALPHA 0x8598
#endif //GL_OPERAND0_ALPHA
#ifndef GL_OPERAND1_ALPHA
#define GL_OPERAND1_ALPHA 0x8599
#endif //GL_OPERAND1_ALPHA
#ifndef GL_OPERAND2_ALPHA
#define GL_OPERAND2_ALPHA 0x859A
#endif //GL_OPERAND2_ALPHA
#ifndef GL_TEXTURE_COMPRESSED_IMAGE_SIZE
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#endif //GL_TEXTURE_COMPRESSED_IMAGE_SIZE
#ifndef GL_TEXTURE_COMPRESSED
#define GL_TEXTURE_COMPRESSED 0x86A1
#endif //GL_TEXTURE_COMPRESSED
#ifndef GL_NUM_COMPRESSED_TEXTURE_FORMATS
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#endif //GL_NUM_COMPRESSED_TEXTURE_FORMATS
#ifndef GL_COMPRESSED_TEXTURE_FORMATS
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#endif //GL_COMPRESSED_TEXTURE_FORMATS
#ifndef GL_DOT3_RGB
#define GL_DOT3_RGB 0x86AE
#endif //GL_DOT3_RGB
#ifndef GL_DOT3_RGBA
#define GL_DOT3_RGBA 0x86AF
#endif //GL_DOT3_RGBA
#ifndef GL_ALL_ATTRIB_BITS
#define GL_ALL_ATTRIB_BITS 0xFFFFFFFF
#endif //GL_ALL_ATTRIB_BITS
#ifndef GL_CLIENT_ALL_ATTRIB_BITS
#define GL_CLIENT_ALL_ATTRIB_BITS 0xFFFFFFFF
#endif //GL_CLIENT_ALL_ATTRIB_BITS
#ifndef GL_ONE
#define GL_ONE 1
#endif //GL_ONE
#ifndef GL_TRUE
#define GL_TRUE 1
#endif //GL_TRUE
CGUARDBEGIN

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Accum
#define GL_ALT_FUNDEF_Accum
extern void glAccum(GLenum,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_AlphaFunc
#define GL_ALT_FUNDEF_AlphaFunc
extern void glAlphaFunc(GLenum,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_AreTexturesResident
#define GL_ALT_FUNDEF_AreTexturesResident
extern GLboolean glAreTexturesResident(GLsizei,const GLuint *,GLboolean *);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_ArrayElement
#define GL_ALT_FUNDEF_ArrayElement
extern void glArrayElement(GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Begin
#define GL_ALT_FUNDEF_Begin
extern void glBegin(GLenum);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_BindTexture
#define GL_ALT_FUNDEF_BindTexture
extern void glBindTexture(GLenum,GLuint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Bitmap
#define GL_ALT_FUNDEF_Bitmap
extern void glBitmap(GLsizei,GLsizei,GLfloat,GLfloat,GLfloat,GLfloat,const GLubyte *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_BlendFunc
#define GL_ALT_FUNDEF_BlendFunc
extern void glBlendFunc(GLenum,GLenum);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_CallList
#define GL_ALT_FUNDEF_CallList
extern void glCallList(GLuint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_CallLists
#define GL_ALT_FUNDEF_CallLists
extern void glCallLists(GLsizei,GLenum,const void *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Clear
#define GL_ALT_FUNDEF_Clear
extern void glClear(GLbitfield);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_ClearAccum
#define GL_ALT_FUNDEF_ClearAccum
extern void glClearAccum(GLfloat,GLfloat,GLfloat,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_ClearColor
#define GL_ALT_FUNDEF_ClearColor
extern void glClearColor(GLfloat,GLfloat,GLfloat,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_ClearDepth
#define GL_ALT_FUNDEF_ClearDepth
extern void glClearDepth(GLdouble);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_ClearIndex
#define GL_ALT_FUNDEF_ClearIndex
extern void glClearIndex(GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_ClearStencil
#define GL_ALT_FUNDEF_ClearStencil
extern void glClearStencil(GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_ClipPlane
#define GL_ALT_FUNDEF_ClipPlane
extern void glClipPlane(GLenum,const GLdouble *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color3b
#define GL_ALT_FUNDEF_Color3b
extern void glColor3b(GLbyte,GLbyte,GLbyte);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color3bv
#define GL_ALT_FUNDEF_Color3bv
extern void glColor3bv(const GLbyte *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color3d
#define GL_ALT_FUNDEF_Color3d
extern void glColor3d(GLdouble,GLdouble,GLdouble);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color3dv
#define GL_ALT_FUNDEF_Color3dv
extern void glColor3dv(const GLdouble *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color3f
#define GL_ALT_FUNDEF_Color3f
extern void glColor3f(GLfloat,GLfloat,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color3fv
#define GL_ALT_FUNDEF_Color3fv
extern void glColor3fv(const GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color3i
#define GL_ALT_FUNDEF_Color3i
extern void glColor3i(GLint,GLint,GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color3iv
#define GL_ALT_FUNDEF_Color3iv
extern void glColor3iv(const GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color3s
#define GL_ALT_FUNDEF_Color3s
extern void glColor3s(GLshort,GLshort,GLshort);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color3sv
#define GL_ALT_FUNDEF_Color3sv
extern void glColor3sv(const GLshort *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color3ub
#define GL_ALT_FUNDEF_Color3ub
extern void glColor3ub(GLubyte,GLubyte,GLubyte);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color3ubv
#define GL_ALT_FUNDEF_Color3ubv
extern void glColor3ubv(const GLubyte *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color3ui
#define GL_ALT_FUNDEF_Color3ui
extern void glColor3ui(GLuint,GLuint,GLuint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color3uiv
#define GL_ALT_FUNDEF_Color3uiv
extern void glColor3uiv(const GLuint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color3us
#define GL_ALT_FUNDEF_Color3us
extern void glColor3us(GLushort,GLushort,GLushort);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color3usv
#define GL_ALT_FUNDEF_Color3usv
extern void glColor3usv(const GLushort *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color4b
#define GL_ALT_FUNDEF_Color4b
extern void glColor4b(GLbyte,GLbyte,GLbyte,GLbyte);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color4bv
#define GL_ALT_FUNDEF_Color4bv
extern void glColor4bv(const GLbyte *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color4d
#define GL_ALT_FUNDEF_Color4d
extern void glColor4d(GLdouble,GLdouble,GLdouble,GLdouble);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color4dv
#define GL_ALT_FUNDEF_Color4dv
extern void glColor4dv(const GLdouble *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color4f
#define GL_ALT_FUNDEF_Color4f
extern void glColor4f(GLfloat,GLfloat,GLfloat,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color4fv
#define GL_ALT_FUNDEF_Color4fv
extern void glColor4fv(const GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color4i
#define GL_ALT_FUNDEF_Color4i
extern void glColor4i(GLint,GLint,GLint,GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color4iv
#define GL_ALT_FUNDEF_Color4iv
extern void glColor4iv(const GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color4s
#define GL_ALT_FUNDEF_Color4s
extern void glColor4s(GLshort,GLshort,GLshort,GLshort);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color4sv
#define GL_ALT_FUNDEF_Color4sv
extern void glColor4sv(const GLshort *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color4ub
#define GL_ALT_FUNDEF_Color4ub
extern void glColor4ub(GLubyte,GLubyte,GLubyte,GLubyte);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color4ubv
#define GL_ALT_FUNDEF_Color4ubv
extern void glColor4ubv(const GLubyte *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color4ui
#define GL_ALT_FUNDEF_Color4ui
extern void glColor4ui(GLuint,GLuint,GLuint,GLuint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color4uiv
#define GL_ALT_FUNDEF_Color4uiv
extern void glColor4uiv(const GLuint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color4us
#define GL_ALT_FUNDEF_Color4us
extern void glColor4us(GLushort,GLushort,GLushort,GLushort);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Color4usv
#define GL_ALT_FUNDEF_Color4usv
extern void glColor4usv(const GLushort *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_ColorMask
#define GL_ALT_FUNDEF_ColorMask
extern void glColorMask(GLboolean,GLboolean,GLboolean,GLboolean);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_ColorMaterial
#define GL_ALT_FUNDEF_ColorMaterial
extern void glColorMaterial(GLenum,GLenum);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_ColorPointer
#define GL_ALT_FUNDEF_ColorPointer
extern void glColorPointer(GLint,GLenum,GLsizei,const void *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_CopyPixels
#define GL_ALT_FUNDEF_CopyPixels
extern void glCopyPixels(GLint,GLint,GLsizei,GLsizei,GLenum);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_CopyTexImage1D
#define GL_ALT_FUNDEF_CopyTexImage1D
extern void glCopyTexImage1D(GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLint);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_CopyTexImage2D
#define GL_ALT_FUNDEF_CopyTexImage2D
extern void glCopyTexImage2D(GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLsizei,GLint);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_CopyTexSubImage1D
#define GL_ALT_FUNDEF_CopyTexSubImage1D
extern void glCopyTexSubImage1D(GLenum,GLint,GLint,GLint,GLint,GLsizei);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_CopyTexSubImage2D
#define GL_ALT_FUNDEF_CopyTexSubImage2D
extern void glCopyTexSubImage2D(GLenum,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_CullFace
#define GL_ALT_FUNDEF_CullFace
extern void glCullFace(GLenum);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_DeleteLists
#define GL_ALT_FUNDEF_DeleteLists
extern void glDeleteLists(GLuint,GLsizei);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_DeleteTextures
#define GL_ALT_FUNDEF_DeleteTextures
extern void glDeleteTextures(GLsizei,const GLuint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_DepthFunc
#define GL_ALT_FUNDEF_DepthFunc
extern void glDepthFunc(GLenum);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_DepthMask
#define GL_ALT_FUNDEF_DepthMask
extern void glDepthMask(GLboolean);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_DepthRange
#define GL_ALT_FUNDEF_DepthRange
extern void glDepthRange(GLdouble,GLdouble);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Disable
#define GL_ALT_FUNDEF_Disable
extern void glDisable(GLenum);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_DisableClientState
#define GL_ALT_FUNDEF_DisableClientState
extern void glDisableClientState(GLenum);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_DrawArrays
#define GL_ALT_FUNDEF_DrawArrays
extern void glDrawArrays(GLenum,GLint,GLsizei);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_DrawBuffer
#define GL_ALT_FUNDEF_DrawBuffer
extern void glDrawBuffer(GLenum);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_DrawElements
#define GL_ALT_FUNDEF_DrawElements
extern void glDrawElements(GLenum,GLsizei,GLenum,const void *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_DrawPixels
#define GL_ALT_FUNDEF_DrawPixels
extern void glDrawPixels(GLsizei,GLsizei,GLenum,GLenum,const void *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_EdgeFlag
#define GL_ALT_FUNDEF_EdgeFlag
extern void glEdgeFlag(GLboolean);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_EdgeFlagPointer
#define GL_ALT_FUNDEF_EdgeFlagPointer
extern void glEdgeFlagPointer(GLsizei,const void *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_EdgeFlagv
#define GL_ALT_FUNDEF_EdgeFlagv
extern void glEdgeFlagv(const GLboolean *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Enable
#define GL_ALT_FUNDEF_Enable
extern void glEnable(GLenum);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_EnableClientState
#define GL_ALT_FUNDEF_EnableClientState
extern void glEnableClientState(GLenum);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_End
#define GL_ALT_FUNDEF_End
extern void glEnd();
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_EndList
#define GL_ALT_FUNDEF_EndList
extern void glEndList();
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_EvalCoord1d
#define GL_ALT_FUNDEF_EvalCoord1d
extern void glEvalCoord1d(GLdouble);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_EvalCoord1dv
#define GL_ALT_FUNDEF_EvalCoord1dv
extern void glEvalCoord1dv(const GLdouble *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_EvalCoord1f
#define GL_ALT_FUNDEF_EvalCoord1f
extern void glEvalCoord1f(GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_EvalCoord1fv
#define GL_ALT_FUNDEF_EvalCoord1fv
extern void glEvalCoord1fv(const GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_EvalCoord2d
#define GL_ALT_FUNDEF_EvalCoord2d
extern void glEvalCoord2d(GLdouble,GLdouble);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_EvalCoord2dv
#define GL_ALT_FUNDEF_EvalCoord2dv
extern void glEvalCoord2dv(const GLdouble *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_EvalCoord2f
#define GL_ALT_FUNDEF_EvalCoord2f
extern void glEvalCoord2f(GLfloat,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_EvalCoord2fv
#define GL_ALT_FUNDEF_EvalCoord2fv
extern void glEvalCoord2fv(const GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_EvalMesh1
#define GL_ALT_FUNDEF_EvalMesh1
extern void glEvalMesh1(GLenum,GLint,GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_EvalMesh2
#define GL_ALT_FUNDEF_EvalMesh2
extern void glEvalMesh2(GLenum,GLint,GLint,GLint,GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_EvalPoint1
#define GL_ALT_FUNDEF_EvalPoint1
extern void glEvalPoint1(GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_EvalPoint2
#define GL_ALT_FUNDEF_EvalPoint2
extern void glEvalPoint2(GLint,GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_FeedbackBuffer
#define GL_ALT_FUNDEF_FeedbackBuffer
extern void glFeedbackBuffer(GLsizei,GLenum,GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Finish
#define GL_ALT_FUNDEF_Finish
extern void glFinish();
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Flush
#define GL_ALT_FUNDEF_Flush
extern void glFlush();
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Fogf
#define GL_ALT_FUNDEF_Fogf
extern void glFogf(GLenum,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Fogfv
#define GL_ALT_FUNDEF_Fogfv
extern void glFogfv(GLenum,const GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Fogi
#define GL_ALT_FUNDEF_Fogi
extern void glFogi(GLenum,GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Fogiv
#define GL_ALT_FUNDEF_Fogiv
extern void glFogiv(GLenum,const GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_FrontFace
#define GL_ALT_FUNDEF_FrontFace
extern void glFrontFace(GLenum);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Frustum
#define GL_ALT_FUNDEF_Frustum
extern void glFrustum(GLdouble,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GenLists
#define GL_ALT_FUNDEF_GenLists
extern GLuint glGenLists(GLsizei);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_GenTextures
#define GL_ALT_FUNDEF_GenTextures
extern void glGenTextures(GLsizei,GLuint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetBooleanv
#define GL_ALT_FUNDEF_GetBooleanv
extern void glGetBooleanv(GLenum,GLboolean *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetClipPlane
#define GL_ALT_FUNDEF_GetClipPlane
extern void glGetClipPlane(GLenum,GLdouble *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetDoublev
#define GL_ALT_FUNDEF_GetDoublev
extern void glGetDoublev(GLenum,GLdouble *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetError
#define GL_ALT_FUNDEF_GetError
extern GLenum glGetError();
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetFloatv
#define GL_ALT_FUNDEF_GetFloatv
extern void glGetFloatv(GLenum,GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetIntegerv
#define GL_ALT_FUNDEF_GetIntegerv
extern void glGetIntegerv(GLenum,GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetLightfv
#define GL_ALT_FUNDEF_GetLightfv
extern void glGetLightfv(GLenum,GLenum,GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetLightiv
#define GL_ALT_FUNDEF_GetLightiv
extern void glGetLightiv(GLenum,GLenum,GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetMapdv
#define GL_ALT_FUNDEF_GetMapdv
extern void glGetMapdv(GLenum,GLenum,GLdouble *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetMapfv
#define GL_ALT_FUNDEF_GetMapfv
extern void glGetMapfv(GLenum,GLenum,GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetMapiv
#define GL_ALT_FUNDEF_GetMapiv
extern void glGetMapiv(GLenum,GLenum,GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetMaterialfv
#define GL_ALT_FUNDEF_GetMaterialfv
extern void glGetMaterialfv(GLenum,GLenum,GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetMaterialiv
#define GL_ALT_FUNDEF_GetMaterialiv
extern void glGetMaterialiv(GLenum,GLenum,GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetPixelMapfv
#define GL_ALT_FUNDEF_GetPixelMapfv
extern void glGetPixelMapfv(GLenum,GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetPixelMapuiv
#define GL_ALT_FUNDEF_GetPixelMapuiv
extern void glGetPixelMapuiv(GLenum,GLuint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetPixelMapusv
#define GL_ALT_FUNDEF_GetPixelMapusv
extern void glGetPixelMapusv(GLenum,GLushort *);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_GetPointerv
#define GL_ALT_FUNDEF_GetPointerv
extern void glGetPointerv(GLenum,void **);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetPolygonStipple
#define GL_ALT_FUNDEF_GetPolygonStipple
extern void glGetPolygonStipple(GLubyte *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetString
#define GL_ALT_FUNDEF_GetString
extern const GLubyte * glGetString(GLenum);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetTexEnvfv
#define GL_ALT_FUNDEF_GetTexEnvfv
extern void glGetTexEnvfv(GLenum,GLenum,GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetTexEnviv
#define GL_ALT_FUNDEF_GetTexEnviv
extern void glGetTexEnviv(GLenum,GLenum,GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetTexGendv
#define GL_ALT_FUNDEF_GetTexGendv
extern void glGetTexGendv(GLenum,GLenum,GLdouble *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetTexGenfv
#define GL_ALT_FUNDEF_GetTexGenfv
extern void glGetTexGenfv(GLenum,GLenum,GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetTexGeniv
#define GL_ALT_FUNDEF_GetTexGeniv
extern void glGetTexGeniv(GLenum,GLenum,GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetTexImage
#define GL_ALT_FUNDEF_GetTexImage
extern void glGetTexImage(GLenum,GLint,GLenum,GLenum,void *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetTexLevelParameterfv
#define GL_ALT_FUNDEF_GetTexLevelParameterfv
extern void glGetTexLevelParameterfv(GLenum,GLint,GLenum,GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetTexLevelParameteriv
#define GL_ALT_FUNDEF_GetTexLevelParameteriv
extern void glGetTexLevelParameteriv(GLenum,GLint,GLenum,GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetTexParameterfv
#define GL_ALT_FUNDEF_GetTexParameterfv
extern void glGetTexParameterfv(GLenum,GLenum,GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_GetTexParameteriv
#define GL_ALT_FUNDEF_GetTexParameteriv
extern void glGetTexParameteriv(GLenum,GLenum,GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Hint
#define GL_ALT_FUNDEF_Hint
extern void glHint(GLenum,GLenum);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_IndexMask
#define GL_ALT_FUNDEF_IndexMask
extern void glIndexMask(GLuint);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_IndexPointer
#define GL_ALT_FUNDEF_IndexPointer
extern void glIndexPointer(GLenum,GLsizei,const void *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Indexd
#define GL_ALT_FUNDEF_Indexd
extern void glIndexd(GLdouble);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Indexdv
#define GL_ALT_FUNDEF_Indexdv
extern void glIndexdv(const GLdouble *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Indexf
#define GL_ALT_FUNDEF_Indexf
extern void glIndexf(GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Indexfv
#define GL_ALT_FUNDEF_Indexfv
extern void glIndexfv(const GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Indexi
#define GL_ALT_FUNDEF_Indexi
extern void glIndexi(GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Indexiv
#define GL_ALT_FUNDEF_Indexiv
extern void glIndexiv(const GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Indexs
#define GL_ALT_FUNDEF_Indexs
extern void glIndexs(GLshort);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Indexsv
#define GL_ALT_FUNDEF_Indexsv
extern void glIndexsv(const GLshort *);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_Indexub
#define GL_ALT_FUNDEF_Indexub
extern void glIndexub(GLubyte);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_Indexubv
#define GL_ALT_FUNDEF_Indexubv
extern void glIndexubv(const GLubyte *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_InitNames
#define GL_ALT_FUNDEF_InitNames
extern void glInitNames();
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_InterleavedArrays
#define GL_ALT_FUNDEF_InterleavedArrays
extern void glInterleavedArrays(GLenum,GLsizei,const void *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_IsEnabled
#define GL_ALT_FUNDEF_IsEnabled
extern GLboolean glIsEnabled(GLenum);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_IsList
#define GL_ALT_FUNDEF_IsList
extern GLboolean glIsList(GLuint);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_IsTexture
#define GL_ALT_FUNDEF_IsTexture
extern GLboolean glIsTexture(GLuint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_LightModelf
#define GL_ALT_FUNDEF_LightModelf
extern void glLightModelf(GLenum,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_LightModelfv
#define GL_ALT_FUNDEF_LightModelfv
extern void glLightModelfv(GLenum,const GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_LightModeli
#define GL_ALT_FUNDEF_LightModeli
extern void glLightModeli(GLenum,GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_LightModeliv
#define GL_ALT_FUNDEF_LightModeliv
extern void glLightModeliv(GLenum,const GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Lightf
#define GL_ALT_FUNDEF_Lightf
extern void glLightf(GLenum,GLenum,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Lightfv
#define GL_ALT_FUNDEF_Lightfv
extern void glLightfv(GLenum,GLenum,const GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Lighti
#define GL_ALT_FUNDEF_Lighti
extern void glLighti(GLenum,GLenum,GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Lightiv
#define GL_ALT_FUNDEF_Lightiv
extern void glLightiv(GLenum,GLenum,const GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_LineStipple
#define GL_ALT_FUNDEF_LineStipple
extern void glLineStipple(GLint,GLushort);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_LineWidth
#define GL_ALT_FUNDEF_LineWidth
extern void glLineWidth(GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_ListBase
#define GL_ALT_FUNDEF_ListBase
extern void glListBase(GLuint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_LoadIdentity
#define GL_ALT_FUNDEF_LoadIdentity
extern void glLoadIdentity();
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_LoadMatrixd
#define GL_ALT_FUNDEF_LoadMatrixd
extern void glLoadMatrixd(const GLdouble *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_LoadMatrixf
#define GL_ALT_FUNDEF_LoadMatrixf
extern void glLoadMatrixf(const GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_LoadName
#define GL_ALT_FUNDEF_LoadName
extern void glLoadName(GLuint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_LogicOp
#define GL_ALT_FUNDEF_LogicOp
extern void glLogicOp(GLenum);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Map1d
#define GL_ALT_FUNDEF_Map1d
extern void glMap1d(GLenum,GLdouble,GLdouble,GLint,GLint,const GLdouble *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Map1f
#define GL_ALT_FUNDEF_Map1f
extern void glMap1f(GLenum,GLfloat,GLfloat,GLint,GLint,const GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Map2d
#define GL_ALT_FUNDEF_Map2d
extern void glMap2d(GLenum,GLdouble,GLdouble,GLint,GLint,GLdouble,GLdouble,GLint,GLint,const GLdouble *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Map2f
#define GL_ALT_FUNDEF_Map2f
extern void glMap2f(GLenum,GLfloat,GLfloat,GLint,GLint,GLfloat,GLfloat,GLint,GLint,const GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_MapGrid1d
#define GL_ALT_FUNDEF_MapGrid1d
extern void glMapGrid1d(GLint,GLdouble,GLdouble);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_MapGrid1f
#define GL_ALT_FUNDEF_MapGrid1f
extern void glMapGrid1f(GLint,GLfloat,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_MapGrid2d
#define GL_ALT_FUNDEF_MapGrid2d
extern void glMapGrid2d(GLint,GLdouble,GLdouble,GLint,GLdouble,GLdouble);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_MapGrid2f
#define GL_ALT_FUNDEF_MapGrid2f
extern void glMapGrid2f(GLint,GLfloat,GLfloat,GLint,GLfloat,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Materialf
#define GL_ALT_FUNDEF_Materialf
extern void glMaterialf(GLenum,GLenum,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Materialfv
#define GL_ALT_FUNDEF_Materialfv
extern void glMaterialfv(GLenum,GLenum,const GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Materiali
#define GL_ALT_FUNDEF_Materiali
extern void glMateriali(GLenum,GLenum,GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Materialiv
#define GL_ALT_FUNDEF_Materialiv
extern void glMaterialiv(GLenum,GLenum,const GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_MatrixMode
#define GL_ALT_FUNDEF_MatrixMode
extern void glMatrixMode(GLenum);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_MultMatrixd
#define GL_ALT_FUNDEF_MultMatrixd
extern void glMultMatrixd(const GLdouble *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_MultMatrixf
#define GL_ALT_FUNDEF_MultMatrixf
extern void glMultMatrixf(const GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_NewList
#define GL_ALT_FUNDEF_NewList
extern void glNewList(GLuint,GLenum);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Normal3b
#define GL_ALT_FUNDEF_Normal3b
extern void glNormal3b(GLbyte,GLbyte,GLbyte);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Normal3bv
#define GL_ALT_FUNDEF_Normal3bv
extern void glNormal3bv(const GLbyte *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Normal3d
#define GL_ALT_FUNDEF_Normal3d
extern void glNormal3d(GLdouble,GLdouble,GLdouble);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Normal3dv
#define GL_ALT_FUNDEF_Normal3dv
extern void glNormal3dv(const GLdouble *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Normal3f
#define GL_ALT_FUNDEF_Normal3f
extern void glNormal3f(GLfloat,GLfloat,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Normal3fv
#define GL_ALT_FUNDEF_Normal3fv
extern void glNormal3fv(const GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Normal3i
#define GL_ALT_FUNDEF_Normal3i
extern void glNormal3i(GLint,GLint,GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Normal3iv
#define GL_ALT_FUNDEF_Normal3iv
extern void glNormal3iv(const GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Normal3s
#define GL_ALT_FUNDEF_Normal3s
extern void glNormal3s(GLshort,GLshort,GLshort);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Normal3sv
#define GL_ALT_FUNDEF_Normal3sv
extern void glNormal3sv(const GLshort *);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_NormalPointer
#define GL_ALT_FUNDEF_NormalPointer
extern void glNormalPointer(GLenum,GLsizei,const void *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Ortho
#define GL_ALT_FUNDEF_Ortho
extern void glOrtho(GLdouble,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_PassThrough
#define GL_ALT_FUNDEF_PassThrough
extern void glPassThrough(GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_PixelMapfv
#define GL_ALT_FUNDEF_PixelMapfv
extern void glPixelMapfv(GLenum,GLsizei,const GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_PixelMapuiv
#define GL_ALT_FUNDEF_PixelMapuiv
extern void glPixelMapuiv(GLenum,GLsizei,const GLuint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_PixelMapusv
#define GL_ALT_FUNDEF_PixelMapusv
extern void glPixelMapusv(GLenum,GLsizei,const GLushort *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_PixelStoref
#define GL_ALT_FUNDEF_PixelStoref
extern void glPixelStoref(GLenum,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_PixelStorei
#define GL_ALT_FUNDEF_PixelStorei
extern void glPixelStorei(GLenum,GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_PixelTransferf
#define GL_ALT_FUNDEF_PixelTransferf
extern void glPixelTransferf(GLenum,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_PixelTransferi
#define GL_ALT_FUNDEF_PixelTransferi
extern void glPixelTransferi(GLenum,GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_PixelZoom
#define GL_ALT_FUNDEF_PixelZoom
extern void glPixelZoom(GLfloat,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_PointSize
#define GL_ALT_FUNDEF_PointSize
extern void glPointSize(GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_PolygonMode
#define GL_ALT_FUNDEF_PolygonMode
extern void glPolygonMode(GLenum,GLenum);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_PolygonOffset
#define GL_ALT_FUNDEF_PolygonOffset
extern void glPolygonOffset(GLfloat,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_PolygonStipple
#define GL_ALT_FUNDEF_PolygonStipple
extern void glPolygonStipple(const GLubyte *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_PopAttrib
#define GL_ALT_FUNDEF_PopAttrib
extern void glPopAttrib();
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_PopClientAttrib
#define GL_ALT_FUNDEF_PopClientAttrib
extern void glPopClientAttrib();
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_PopMatrix
#define GL_ALT_FUNDEF_PopMatrix
extern void glPopMatrix();
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_PopName
#define GL_ALT_FUNDEF_PopName
extern void glPopName();
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_PrioritizeTextures
#define GL_ALT_FUNDEF_PrioritizeTextures
extern void glPrioritizeTextures(GLsizei,const GLuint *,const GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_PushAttrib
#define GL_ALT_FUNDEF_PushAttrib
extern void glPushAttrib(GLbitfield);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_PushClientAttrib
#define GL_ALT_FUNDEF_PushClientAttrib
extern void glPushClientAttrib(GLbitfield);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_PushMatrix
#define GL_ALT_FUNDEF_PushMatrix
extern void glPushMatrix();
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_PushName
#define GL_ALT_FUNDEF_PushName
extern void glPushName(GLuint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_RasterPos2d
#define GL_ALT_FUNDEF_RasterPos2d
extern void glRasterPos2d(GLdouble,GLdouble);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_RasterPos2dv
#define GL_ALT_FUNDEF_RasterPos2dv
extern void glRasterPos2dv(const GLdouble *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_RasterPos2f
#define GL_ALT_FUNDEF_RasterPos2f
extern void glRasterPos2f(GLfloat,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_RasterPos2fv
#define GL_ALT_FUNDEF_RasterPos2fv
extern void glRasterPos2fv(const GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_RasterPos2i
#define GL_ALT_FUNDEF_RasterPos2i
extern void glRasterPos2i(GLint,GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_RasterPos2iv
#define GL_ALT_FUNDEF_RasterPos2iv
extern void glRasterPos2iv(const GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_RasterPos2s
#define GL_ALT_FUNDEF_RasterPos2s
extern void glRasterPos2s(GLshort,GLshort);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_RasterPos2sv
#define GL_ALT_FUNDEF_RasterPos2sv
extern void glRasterPos2sv(const GLshort *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_RasterPos3d
#define GL_ALT_FUNDEF_RasterPos3d
extern void glRasterPos3d(GLdouble,GLdouble,GLdouble);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_RasterPos3dv
#define GL_ALT_FUNDEF_RasterPos3dv
extern void glRasterPos3dv(const GLdouble *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_RasterPos3f
#define GL_ALT_FUNDEF_RasterPos3f
extern void glRasterPos3f(GLfloat,GLfloat,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_RasterPos3fv
#define GL_ALT_FUNDEF_RasterPos3fv
extern void glRasterPos3fv(const GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_RasterPos3i
#define GL_ALT_FUNDEF_RasterPos3i
extern void glRasterPos3i(GLint,GLint,GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_RasterPos3iv
#define GL_ALT_FUNDEF_RasterPos3iv
extern void glRasterPos3iv(const GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_RasterPos3s
#define GL_ALT_FUNDEF_RasterPos3s
extern void glRasterPos3s(GLshort,GLshort,GLshort);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_RasterPos3sv
#define GL_ALT_FUNDEF_RasterPos3sv
extern void glRasterPos3sv(const GLshort *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_RasterPos4d
#define GL_ALT_FUNDEF_RasterPos4d
extern void glRasterPos4d(GLdouble,GLdouble,GLdouble,GLdouble);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_RasterPos4dv
#define GL_ALT_FUNDEF_RasterPos4dv
extern void glRasterPos4dv(const GLdouble *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_RasterPos4f
#define GL_ALT_FUNDEF_RasterPos4f
extern void glRasterPos4f(GLfloat,GLfloat,GLfloat,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_RasterPos4fv
#define GL_ALT_FUNDEF_RasterPos4fv
extern void glRasterPos4fv(const GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_RasterPos4i
#define GL_ALT_FUNDEF_RasterPos4i
extern void glRasterPos4i(GLint,GLint,GLint,GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_RasterPos4iv
#define GL_ALT_FUNDEF_RasterPos4iv
extern void glRasterPos4iv(const GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_RasterPos4s
#define GL_ALT_FUNDEF_RasterPos4s
extern void glRasterPos4s(GLshort,GLshort,GLshort,GLshort);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_RasterPos4sv
#define GL_ALT_FUNDEF_RasterPos4sv
extern void glRasterPos4sv(const GLshort *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_ReadBuffer
#define GL_ALT_FUNDEF_ReadBuffer
extern void glReadBuffer(GLenum);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_ReadPixels
#define GL_ALT_FUNDEF_ReadPixels
extern void glReadPixels(GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,void *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Rectd
#define GL_ALT_FUNDEF_Rectd
extern void glRectd(GLdouble,GLdouble,GLdouble,GLdouble);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Rectdv
#define GL_ALT_FUNDEF_Rectdv
extern void glRectdv(const GLdouble *,const GLdouble *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Rectf
#define GL_ALT_FUNDEF_Rectf
extern void glRectf(GLfloat,GLfloat,GLfloat,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Rectfv
#define GL_ALT_FUNDEF_Rectfv
extern void glRectfv(const GLfloat *,const GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Recti
#define GL_ALT_FUNDEF_Recti
extern void glRecti(GLint,GLint,GLint,GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Rectiv
#define GL_ALT_FUNDEF_Rectiv
extern void glRectiv(const GLint *,const GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Rects
#define GL_ALT_FUNDEF_Rects
extern void glRects(GLshort,GLshort,GLshort,GLshort);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Rectsv
#define GL_ALT_FUNDEF_Rectsv
extern void glRectsv(const GLshort *,const GLshort *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_RenderMode
#define GL_ALT_FUNDEF_RenderMode
extern GLint glRenderMode(GLenum);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Rotated
#define GL_ALT_FUNDEF_Rotated
extern void glRotated(GLdouble,GLdouble,GLdouble,GLdouble);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Rotatef
#define GL_ALT_FUNDEF_Rotatef
extern void glRotatef(GLfloat,GLfloat,GLfloat,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Scaled
#define GL_ALT_FUNDEF_Scaled
extern void glScaled(GLdouble,GLdouble,GLdouble);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Scalef
#define GL_ALT_FUNDEF_Scalef
extern void glScalef(GLfloat,GLfloat,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Scissor
#define GL_ALT_FUNDEF_Scissor
extern void glScissor(GLint,GLint,GLsizei,GLsizei);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_SelectBuffer
#define GL_ALT_FUNDEF_SelectBuffer
extern void glSelectBuffer(GLsizei,GLuint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_ShadeModel
#define GL_ALT_FUNDEF_ShadeModel
extern void glShadeModel(GLenum);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_StencilFunc
#define GL_ALT_FUNDEF_StencilFunc
extern void glStencilFunc(GLenum,GLint,GLuint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_StencilMask
#define GL_ALT_FUNDEF_StencilMask
extern void glStencilMask(GLuint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_StencilOp
#define GL_ALT_FUNDEF_StencilOp
extern void glStencilOp(GLenum,GLenum,GLenum);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord1d
#define GL_ALT_FUNDEF_TexCoord1d
extern void glTexCoord1d(GLdouble);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord1dv
#define GL_ALT_FUNDEF_TexCoord1dv
extern void glTexCoord1dv(const GLdouble *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord1f
#define GL_ALT_FUNDEF_TexCoord1f
extern void glTexCoord1f(GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord1fv
#define GL_ALT_FUNDEF_TexCoord1fv
extern void glTexCoord1fv(const GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord1i
#define GL_ALT_FUNDEF_TexCoord1i
extern void glTexCoord1i(GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord1iv
#define GL_ALT_FUNDEF_TexCoord1iv
extern void glTexCoord1iv(const GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord1s
#define GL_ALT_FUNDEF_TexCoord1s
extern void glTexCoord1s(GLshort);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord1sv
#define GL_ALT_FUNDEF_TexCoord1sv
extern void glTexCoord1sv(const GLshort *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord2d
#define GL_ALT_FUNDEF_TexCoord2d
extern void glTexCoord2d(GLdouble,GLdouble);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord2dv
#define GL_ALT_FUNDEF_TexCoord2dv
extern void glTexCoord2dv(const GLdouble *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord2f
#define GL_ALT_FUNDEF_TexCoord2f
extern void glTexCoord2f(GLfloat,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord2fv
#define GL_ALT_FUNDEF_TexCoord2fv
extern void glTexCoord2fv(const GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord2i
#define GL_ALT_FUNDEF_TexCoord2i
extern void glTexCoord2i(GLint,GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord2iv
#define GL_ALT_FUNDEF_TexCoord2iv
extern void glTexCoord2iv(const GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord2s
#define GL_ALT_FUNDEF_TexCoord2s
extern void glTexCoord2s(GLshort,GLshort);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord2sv
#define GL_ALT_FUNDEF_TexCoord2sv
extern void glTexCoord2sv(const GLshort *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord3d
#define GL_ALT_FUNDEF_TexCoord3d
extern void glTexCoord3d(GLdouble,GLdouble,GLdouble);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord3dv
#define GL_ALT_FUNDEF_TexCoord3dv
extern void glTexCoord3dv(const GLdouble *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord3f
#define GL_ALT_FUNDEF_TexCoord3f
extern void glTexCoord3f(GLfloat,GLfloat,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord3fv
#define GL_ALT_FUNDEF_TexCoord3fv
extern void glTexCoord3fv(const GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord3i
#define GL_ALT_FUNDEF_TexCoord3i
extern void glTexCoord3i(GLint,GLint,GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord3iv
#define GL_ALT_FUNDEF_TexCoord3iv
extern void glTexCoord3iv(const GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord3s
#define GL_ALT_FUNDEF_TexCoord3s
extern void glTexCoord3s(GLshort,GLshort,GLshort);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord3sv
#define GL_ALT_FUNDEF_TexCoord3sv
extern void glTexCoord3sv(const GLshort *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord4d
#define GL_ALT_FUNDEF_TexCoord4d
extern void glTexCoord4d(GLdouble,GLdouble,GLdouble,GLdouble);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord4dv
#define GL_ALT_FUNDEF_TexCoord4dv
extern void glTexCoord4dv(const GLdouble *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord4f
#define GL_ALT_FUNDEF_TexCoord4f
extern void glTexCoord4f(GLfloat,GLfloat,GLfloat,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord4fv
#define GL_ALT_FUNDEF_TexCoord4fv
extern void glTexCoord4fv(const GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord4i
#define GL_ALT_FUNDEF_TexCoord4i
extern void glTexCoord4i(GLint,GLint,GLint,GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord4iv
#define GL_ALT_FUNDEF_TexCoord4iv
extern void glTexCoord4iv(const GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord4s
#define GL_ALT_FUNDEF_TexCoord4s
extern void glTexCoord4s(GLshort,GLshort,GLshort,GLshort);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexCoord4sv
#define GL_ALT_FUNDEF_TexCoord4sv
extern void glTexCoord4sv(const GLshort *);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_TexCoordPointer
#define GL_ALT_FUNDEF_TexCoordPointer
extern void glTexCoordPointer(GLint,GLenum,GLsizei,const void *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexEnvf
#define GL_ALT_FUNDEF_TexEnvf
extern void glTexEnvf(GLenum,GLenum,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexEnvfv
#define GL_ALT_FUNDEF_TexEnvfv
extern void glTexEnvfv(GLenum,GLenum,const GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexEnvi
#define GL_ALT_FUNDEF_TexEnvi
extern void glTexEnvi(GLenum,GLenum,GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexEnviv
#define GL_ALT_FUNDEF_TexEnviv
extern void glTexEnviv(GLenum,GLenum,const GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexGend
#define GL_ALT_FUNDEF_TexGend
extern void glTexGend(GLenum,GLenum,GLdouble);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexGendv
#define GL_ALT_FUNDEF_TexGendv
extern void glTexGendv(GLenum,GLenum,const GLdouble *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexGenf
#define GL_ALT_FUNDEF_TexGenf
extern void glTexGenf(GLenum,GLenum,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexGenfv
#define GL_ALT_FUNDEF_TexGenfv
extern void glTexGenfv(GLenum,GLenum,const GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexGeni
#define GL_ALT_FUNDEF_TexGeni
extern void glTexGeni(GLenum,GLenum,GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexGeniv
#define GL_ALT_FUNDEF_TexGeniv
extern void glTexGeniv(GLenum,GLenum,const GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexImage1D
#define GL_ALT_FUNDEF_TexImage1D
extern void glTexImage1D(GLenum,GLint,GLint,GLsizei,GLint,GLenum,GLenum,const void *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexImage2D
#define GL_ALT_FUNDEF_TexImage2D
extern void glTexImage2D(GLenum,GLint,GLint,GLsizei,GLsizei,GLint,GLenum,GLenum,const void *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexParameterf
#define GL_ALT_FUNDEF_TexParameterf
extern void glTexParameterf(GLenum,GLenum,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexParameterfv
#define GL_ALT_FUNDEF_TexParameterfv
extern void glTexParameterfv(GLenum,GLenum,const GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexParameteri
#define GL_ALT_FUNDEF_TexParameteri
extern void glTexParameteri(GLenum,GLenum,GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_TexParameteriv
#define GL_ALT_FUNDEF_TexParameteriv
extern void glTexParameteriv(GLenum,GLenum,const GLint *);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_TexSubImage1D
#define GL_ALT_FUNDEF_TexSubImage1D
extern void glTexSubImage1D(GLenum,GLint,GLint,GLsizei,GLenum,GLenum,const void *);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_TexSubImage2D
#define GL_ALT_FUNDEF_TexSubImage2D
extern void glTexSubImage2D(GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,const void *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Translated
#define GL_ALT_FUNDEF_Translated
extern void glTranslated(GLdouble,GLdouble,GLdouble);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Translatef
#define GL_ALT_FUNDEF_Translatef
extern void glTranslatef(GLfloat,GLfloat,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Vertex2d
#define GL_ALT_FUNDEF_Vertex2d
extern void glVertex2d(GLdouble,GLdouble);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Vertex2dv
#define GL_ALT_FUNDEF_Vertex2dv
extern void glVertex2dv(const GLdouble *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Vertex2f
#define GL_ALT_FUNDEF_Vertex2f
extern void glVertex2f(GLfloat,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Vertex2fv
#define GL_ALT_FUNDEF_Vertex2fv
extern void glVertex2fv(const GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Vertex2i
#define GL_ALT_FUNDEF_Vertex2i
extern void glVertex2i(GLint,GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Vertex2iv
#define GL_ALT_FUNDEF_Vertex2iv
extern void glVertex2iv(const GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Vertex2s
#define GL_ALT_FUNDEF_Vertex2s
extern void glVertex2s(GLshort,GLshort);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Vertex2sv
#define GL_ALT_FUNDEF_Vertex2sv
extern void glVertex2sv(const GLshort *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Vertex3d
#define GL_ALT_FUNDEF_Vertex3d
extern void glVertex3d(GLdouble,GLdouble,GLdouble);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Vertex3dv
#define GL_ALT_FUNDEF_Vertex3dv
extern void glVertex3dv(const GLdouble *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Vertex3f
#define GL_ALT_FUNDEF_Vertex3f
extern void glVertex3f(GLfloat,GLfloat,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Vertex3fv
#define GL_ALT_FUNDEF_Vertex3fv
extern void glVertex3fv(const GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Vertex3i
#define GL_ALT_FUNDEF_Vertex3i
extern void glVertex3i(GLint,GLint,GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Vertex3iv
#define GL_ALT_FUNDEF_Vertex3iv
extern void glVertex3iv(const GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Vertex3s
#define GL_ALT_FUNDEF_Vertex3s
extern void glVertex3s(GLshort,GLshort,GLshort);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Vertex3sv
#define GL_ALT_FUNDEF_Vertex3sv
extern void glVertex3sv(const GLshort *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Vertex4d
#define GL_ALT_FUNDEF_Vertex4d
extern void glVertex4d(GLdouble,GLdouble,GLdouble,GLdouble);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Vertex4dv
#define GL_ALT_FUNDEF_Vertex4dv
extern void glVertex4dv(const GLdouble *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Vertex4f
#define GL_ALT_FUNDEF_Vertex4f
extern void glVertex4f(GLfloat,GLfloat,GLfloat,GLfloat);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Vertex4fv
#define GL_ALT_FUNDEF_Vertex4fv
extern void glVertex4fv(const GLfloat *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Vertex4i
#define GL_ALT_FUNDEF_Vertex4i
extern void glVertex4i(GLint,GLint,GLint,GLint);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Vertex4iv
#define GL_ALT_FUNDEF_Vertex4iv
extern void glVertex4iv(const GLint *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Vertex4s
#define GL_ALT_FUNDEF_Vertex4s
extern void glVertex4s(GLshort,GLshort,GLshort,GLshort);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Vertex4sv
#define GL_ALT_FUNDEF_Vertex4sv
extern void glVertex4sv(const GLshort *);
#endif
#endif

#ifndef GL_VERSION_1_1

#ifndef	GL_ALT_FUNDEF_VertexPointer
#define GL_ALT_FUNDEF_VertexPointer
extern void glVertexPointer(GLint,GLenum,GLsizei,const void *);
#endif
#endif

#ifndef GL_VERSION_1_0

#ifndef	GL_ALT_FUNDEF_Viewport
#define GL_ALT_FUNDEF_Viewport
extern void glViewport(GLint,GLint,GLsizei,GLsizei);
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_ActiveTexture
#define GL_ALT_FUNDEF_ActiveTexture
typedef void (*PFNGLACTIVETEXTUREPROC_ALT)(GLenum);
static inline void glActiveTexture(GLenum texture1)
{
#ifdef __cplusplus
	static PFNGLACTIVETEXTUREPROC_ALT fn=(PFNGLACTIVETEXTUREPROC_ALT)glaltGetProcAddressVersion("glActiveTexture",1,3);
#else
	static PFNGLACTIVETEXTUREPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLACTIVETEXTUREPROC_ALT)glaltGetProcAddressVersion("glActiveTexture",1,3); }
#endif
	 fn(texture1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_ClientActiveTexture
#define GL_ALT_FUNDEF_ClientActiveTexture
typedef void (*PFNGLCLIENTACTIVETEXTUREPROC_ALT)(GLenum);
static inline void glClientActiveTexture(GLenum texture1)
{
#ifdef __cplusplus
	static PFNGLCLIENTACTIVETEXTUREPROC_ALT fn=(PFNGLCLIENTACTIVETEXTUREPROC_ALT)glaltGetProcAddressVersion("glClientActiveTexture",1,3);
#else
	static PFNGLCLIENTACTIVETEXTUREPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCLIENTACTIVETEXTUREPROC_ALT)glaltGetProcAddressVersion("glClientActiveTexture",1,3); }
#endif
	 fn(texture1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_CompressedTexImage1D
#define GL_ALT_FUNDEF_CompressedTexImage1D
typedef void (*PFNGLCOMPRESSEDTEXIMAGE1DPROC_ALT)(GLenum,GLint,GLenum,GLsizei,GLint,GLsizei,const void *);
static inline void glCompressedTexImage1D(GLenum target1,GLint level1,GLenum internalformat1,GLsizei width1,GLint border1,GLsizei imageSize1,const void * data1)
{
#ifdef __cplusplus
	static PFNGLCOMPRESSEDTEXIMAGE1DPROC_ALT fn=(PFNGLCOMPRESSEDTEXIMAGE1DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexImage1D",1,3);
#else
	static PFNGLCOMPRESSEDTEXIMAGE1DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCOMPRESSEDTEXIMAGE1DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexImage1D",1,3); }
#endif
	 fn(target1,level1,internalformat1,width1,border1,imageSize1,data1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_CompressedTexImage2D
#define GL_ALT_FUNDEF_CompressedTexImage2D
typedef void (*PFNGLCOMPRESSEDTEXIMAGE2DPROC_ALT)(GLenum,GLint,GLenum,GLsizei,GLsizei,GLint,GLsizei,const void *);
static inline void glCompressedTexImage2D(GLenum target1,GLint level1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLint border1,GLsizei imageSize1,const void * data1)
{
#ifdef __cplusplus
	static PFNGLCOMPRESSEDTEXIMAGE2DPROC_ALT fn=(PFNGLCOMPRESSEDTEXIMAGE2DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexImage2D",1,3);
#else
	static PFNGLCOMPRESSEDTEXIMAGE2DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCOMPRESSEDTEXIMAGE2DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexImage2D",1,3); }
#endif
	 fn(target1,level1,internalformat1,width1,height1,border1,imageSize1,data1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_CompressedTexImage3D
#define GL_ALT_FUNDEF_CompressedTexImage3D
typedef void (*PFNGLCOMPRESSEDTEXIMAGE3DPROC_ALT)(GLenum,GLint,GLenum,GLsizei,GLsizei,GLsizei,GLint,GLsizei,const void *);
static inline void glCompressedTexImage3D(GLenum target1,GLint level1,GLenum internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLint border1,GLsizei imageSize1,const void * data1)
{
#ifdef __cplusplus
	static PFNGLCOMPRESSEDTEXIMAGE3DPROC_ALT fn=(PFNGLCOMPRESSEDTEXIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexImage3D",1,3);
#else
	static PFNGLCOMPRESSEDTEXIMAGE3DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCOMPRESSEDTEXIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexImage3D",1,3); }
#endif
	 fn(target1,level1,internalformat1,width1,height1,depth1,border1,imageSize1,data1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_CompressedTexSubImage1D
#define GL_ALT_FUNDEF_CompressedTexSubImage1D
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC_ALT)(GLenum,GLint,GLint,GLsizei,GLenum,GLsizei,const void *);
static inline void glCompressedTexSubImage1D(GLenum target1,GLint level1,GLint xoffset1,GLsizei width1,GLenum format1,GLsizei imageSize1,const void * data1)
{
#ifdef __cplusplus
	static PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC_ALT fn=(PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexSubImage1D",1,3);
#else
	static PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexSubImage1D",1,3); }
#endif
	 fn(target1,level1,xoffset1,width1,format1,imageSize1,data1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_CompressedTexSubImage2D
#define GL_ALT_FUNDEF_CompressedTexSubImage2D
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC_ALT)(GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLsizei,const void *);
static inline void glCompressedTexSubImage2D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLsizei width1,GLsizei height1,GLenum format1,GLsizei imageSize1,const void * data1)
{
#ifdef __cplusplus
	static PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC_ALT fn=(PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexSubImage2D",1,3);
#else
	static PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexSubImage2D",1,3); }
#endif
	 fn(target1,level1,xoffset1,yoffset1,width1,height1,format1,imageSize1,data1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_CompressedTexSubImage3D
#define GL_ALT_FUNDEF_CompressedTexSubImage3D
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC_ALT)(GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLsizei,const void *);
static inline void glCompressedTexSubImage3D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLsizei width1,GLsizei height1,GLsizei depth1,GLenum format1,GLsizei imageSize1,const void * data1)
{
#ifdef __cplusplus
	static PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC_ALT fn=(PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexSubImage3D",1,3);
#else
	static PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glCompressedTexSubImage3D",1,3); }
#endif
	 fn(target1,level1,xoffset1,yoffset1,zoffset1,width1,height1,depth1,format1,imageSize1,data1);
}
#endif
#endif

#ifndef GL_VERSION_1_2
#ifndef	GL_ALT_FUNDEF_CopyTexSubImage3D
#define GL_ALT_FUNDEF_CopyTexSubImage3D
typedef void (*PFNGLCOPYTEXSUBIMAGE3DPROC_ALT)(GLenum,GLint,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
static inline void glCopyTexSubImage3D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLint x1,GLint y1,GLsizei width1,GLsizei height1)
{
#ifdef __cplusplus
	static PFNGLCOPYTEXSUBIMAGE3DPROC_ALT fn=(PFNGLCOPYTEXSUBIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glCopyTexSubImage3D",1,3);
#else
	static PFNGLCOPYTEXSUBIMAGE3DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLCOPYTEXSUBIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glCopyTexSubImage3D",1,3); }
#endif
	 fn(target1,level1,xoffset1,yoffset1,zoffset1,x1,y1,width1,height1);
}
#endif
#endif

#ifndef GL_VERSION_1_2
#ifndef	GL_ALT_FUNDEF_DrawRangeElements
#define GL_ALT_FUNDEF_DrawRangeElements
typedef void (*PFNGLDRAWRANGEELEMENTSPROC_ALT)(GLenum,GLuint,GLuint,GLsizei,GLenum,const void *);
static inline void glDrawRangeElements(GLenum mode1,GLuint start1,GLuint end1,GLsizei count1,GLenum type1,const void * indices1)
{
#ifdef __cplusplus
	static PFNGLDRAWRANGEELEMENTSPROC_ALT fn=(PFNGLDRAWRANGEELEMENTSPROC_ALT)glaltGetProcAddressVersion("glDrawRangeElements",1,3);
#else
	static PFNGLDRAWRANGEELEMENTSPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLDRAWRANGEELEMENTSPROC_ALT)glaltGetProcAddressVersion("glDrawRangeElements",1,3); }
#endif
	 fn(mode1,start1,end1,count1,type1,indices1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_GetCompressedTexImage
#define GL_ALT_FUNDEF_GetCompressedTexImage
typedef void (*PFNGLGETCOMPRESSEDTEXIMAGEPROC_ALT)(GLenum,GLint,void *);
static inline void glGetCompressedTexImage(GLenum target1,GLint level1,void * img1)
{
#ifdef __cplusplus
	static PFNGLGETCOMPRESSEDTEXIMAGEPROC_ALT fn=(PFNGLGETCOMPRESSEDTEXIMAGEPROC_ALT)glaltGetProcAddressVersion("glGetCompressedTexImage",1,3);
#else
	static PFNGLGETCOMPRESSEDTEXIMAGEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLGETCOMPRESSEDTEXIMAGEPROC_ALT)glaltGetProcAddressVersion("glGetCompressedTexImage",1,3); }
#endif
	 fn(target1,level1,img1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_LoadTransposeMatrixd
#define GL_ALT_FUNDEF_LoadTransposeMatrixd
typedef void (*PFNGLLOADTRANSPOSEMATRIXDPROC_ALT)(const GLdouble *);
static inline void glLoadTransposeMatrixd(const GLdouble * m1)
{
#ifdef __cplusplus
	static PFNGLLOADTRANSPOSEMATRIXDPROC_ALT fn=(PFNGLLOADTRANSPOSEMATRIXDPROC_ALT)glaltGetProcAddressVersion("glLoadTransposeMatrixd",1,3);
#else
	static PFNGLLOADTRANSPOSEMATRIXDPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLLOADTRANSPOSEMATRIXDPROC_ALT)glaltGetProcAddressVersion("glLoadTransposeMatrixd",1,3); }
#endif
	 fn(m1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_LoadTransposeMatrixf
#define GL_ALT_FUNDEF_LoadTransposeMatrixf
typedef void (*PFNGLLOADTRANSPOSEMATRIXFPROC_ALT)(const GLfloat *);
static inline void glLoadTransposeMatrixf(const GLfloat * m1)
{
#ifdef __cplusplus
	static PFNGLLOADTRANSPOSEMATRIXFPROC_ALT fn=(PFNGLLOADTRANSPOSEMATRIXFPROC_ALT)glaltGetProcAddressVersion("glLoadTransposeMatrixf",1,3);
#else
	static PFNGLLOADTRANSPOSEMATRIXFPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLLOADTRANSPOSEMATRIXFPROC_ALT)glaltGetProcAddressVersion("glLoadTransposeMatrixf",1,3); }
#endif
	 fn(m1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultTransposeMatrixd
#define GL_ALT_FUNDEF_MultTransposeMatrixd
typedef void (*PFNGLMULTTRANSPOSEMATRIXDPROC_ALT)(const GLdouble *);
static inline void glMultTransposeMatrixd(const GLdouble * m1)
{
#ifdef __cplusplus
	static PFNGLMULTTRANSPOSEMATRIXDPROC_ALT fn=(PFNGLMULTTRANSPOSEMATRIXDPROC_ALT)glaltGetProcAddressVersion("glMultTransposeMatrixd",1,3);
#else
	static PFNGLMULTTRANSPOSEMATRIXDPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTTRANSPOSEMATRIXDPROC_ALT)glaltGetProcAddressVersion("glMultTransposeMatrixd",1,3); }
#endif
	 fn(m1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultTransposeMatrixf
#define GL_ALT_FUNDEF_MultTransposeMatrixf
typedef void (*PFNGLMULTTRANSPOSEMATRIXFPROC_ALT)(const GLfloat *);
static inline void glMultTransposeMatrixf(const GLfloat * m1)
{
#ifdef __cplusplus
	static PFNGLMULTTRANSPOSEMATRIXFPROC_ALT fn=(PFNGLMULTTRANSPOSEMATRIXFPROC_ALT)glaltGetProcAddressVersion("glMultTransposeMatrixf",1,3);
#else
	static PFNGLMULTTRANSPOSEMATRIXFPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTTRANSPOSEMATRIXFPROC_ALT)glaltGetProcAddressVersion("glMultTransposeMatrixf",1,3); }
#endif
	 fn(m1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord1d
#define GL_ALT_FUNDEF_MultiTexCoord1d
typedef void (*PFNGLMULTITEXCOORD1DPROC_ALT)(GLenum,GLdouble);
static inline void glMultiTexCoord1d(GLenum target1,GLdouble s1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD1DPROC_ALT fn=(PFNGLMULTITEXCOORD1DPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord1d",1,3);
#else
	static PFNGLMULTITEXCOORD1DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD1DPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord1d",1,3); }
#endif
	 fn(target1,s1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord1dv
#define GL_ALT_FUNDEF_MultiTexCoord1dv
typedef void (*PFNGLMULTITEXCOORD1DVPROC_ALT)(GLenum,const GLdouble *);
static inline void glMultiTexCoord1dv(GLenum target1,const GLdouble * v1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD1DVPROC_ALT fn=(PFNGLMULTITEXCOORD1DVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord1dv",1,3);
#else
	static PFNGLMULTITEXCOORD1DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD1DVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord1dv",1,3); }
#endif
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord1f
#define GL_ALT_FUNDEF_MultiTexCoord1f
typedef void (*PFNGLMULTITEXCOORD1FPROC_ALT)(GLenum,GLfloat);
static inline void glMultiTexCoord1f(GLenum target1,GLfloat s1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD1FPROC_ALT fn=(PFNGLMULTITEXCOORD1FPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord1f",1,3);
#else
	static PFNGLMULTITEXCOORD1FPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD1FPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord1f",1,3); }
#endif
	 fn(target1,s1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord1fv
#define GL_ALT_FUNDEF_MultiTexCoord1fv
typedef void (*PFNGLMULTITEXCOORD1FVPROC_ALT)(GLenum,const GLfloat *);
static inline void glMultiTexCoord1fv(GLenum target1,const GLfloat * v1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD1FVPROC_ALT fn=(PFNGLMULTITEXCOORD1FVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord1fv",1,3);
#else
	static PFNGLMULTITEXCOORD1FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD1FVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord1fv",1,3); }
#endif
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord1i
#define GL_ALT_FUNDEF_MultiTexCoord1i
typedef void (*PFNGLMULTITEXCOORD1IPROC_ALT)(GLenum,GLint);
static inline void glMultiTexCoord1i(GLenum target1,GLint s1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD1IPROC_ALT fn=(PFNGLMULTITEXCOORD1IPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord1i",1,3);
#else
	static PFNGLMULTITEXCOORD1IPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD1IPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord1i",1,3); }
#endif
	 fn(target1,s1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord1iv
#define GL_ALT_FUNDEF_MultiTexCoord1iv
typedef void (*PFNGLMULTITEXCOORD1IVPROC_ALT)(GLenum,const GLint *);
static inline void glMultiTexCoord1iv(GLenum target1,const GLint * v1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD1IVPROC_ALT fn=(PFNGLMULTITEXCOORD1IVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord1iv",1,3);
#else
	static PFNGLMULTITEXCOORD1IVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD1IVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord1iv",1,3); }
#endif
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord1s
#define GL_ALT_FUNDEF_MultiTexCoord1s
typedef void (*PFNGLMULTITEXCOORD1SPROC_ALT)(GLenum,GLshort);
static inline void glMultiTexCoord1s(GLenum target1,GLshort s1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD1SPROC_ALT fn=(PFNGLMULTITEXCOORD1SPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord1s",1,3);
#else
	static PFNGLMULTITEXCOORD1SPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD1SPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord1s",1,3); }
#endif
	 fn(target1,s1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord1sv
#define GL_ALT_FUNDEF_MultiTexCoord1sv
typedef void (*PFNGLMULTITEXCOORD1SVPROC_ALT)(GLenum,const GLshort *);
static inline void glMultiTexCoord1sv(GLenum target1,const GLshort * v1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD1SVPROC_ALT fn=(PFNGLMULTITEXCOORD1SVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord1sv",1,3);
#else
	static PFNGLMULTITEXCOORD1SVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD1SVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord1sv",1,3); }
#endif
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord2d
#define GL_ALT_FUNDEF_MultiTexCoord2d
typedef void (*PFNGLMULTITEXCOORD2DPROC_ALT)(GLenum,GLdouble,GLdouble);
static inline void glMultiTexCoord2d(GLenum target1,GLdouble s1,GLdouble t1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD2DPROC_ALT fn=(PFNGLMULTITEXCOORD2DPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord2d",1,3);
#else
	static PFNGLMULTITEXCOORD2DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD2DPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord2d",1,3); }
#endif
	 fn(target1,s1,t1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord2dv
#define GL_ALT_FUNDEF_MultiTexCoord2dv
typedef void (*PFNGLMULTITEXCOORD2DVPROC_ALT)(GLenum,const GLdouble *);
static inline void glMultiTexCoord2dv(GLenum target1,const GLdouble * v1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD2DVPROC_ALT fn=(PFNGLMULTITEXCOORD2DVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord2dv",1,3);
#else
	static PFNGLMULTITEXCOORD2DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD2DVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord2dv",1,3); }
#endif
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord2f
#define GL_ALT_FUNDEF_MultiTexCoord2f
typedef void (*PFNGLMULTITEXCOORD2FPROC_ALT)(GLenum,GLfloat,GLfloat);
static inline void glMultiTexCoord2f(GLenum target1,GLfloat s1,GLfloat t1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD2FPROC_ALT fn=(PFNGLMULTITEXCOORD2FPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord2f",1,3);
#else
	static PFNGLMULTITEXCOORD2FPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD2FPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord2f",1,3); }
#endif
	 fn(target1,s1,t1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord2fv
#define GL_ALT_FUNDEF_MultiTexCoord2fv
typedef void (*PFNGLMULTITEXCOORD2FVPROC_ALT)(GLenum,const GLfloat *);
static inline void glMultiTexCoord2fv(GLenum target1,const GLfloat * v1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD2FVPROC_ALT fn=(PFNGLMULTITEXCOORD2FVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord2fv",1,3);
#else
	static PFNGLMULTITEXCOORD2FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD2FVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord2fv",1,3); }
#endif
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord2i
#define GL_ALT_FUNDEF_MultiTexCoord2i
typedef void (*PFNGLMULTITEXCOORD2IPROC_ALT)(GLenum,GLint,GLint);
static inline void glMultiTexCoord2i(GLenum target1,GLint s1,GLint t1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD2IPROC_ALT fn=(PFNGLMULTITEXCOORD2IPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord2i",1,3);
#else
	static PFNGLMULTITEXCOORD2IPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD2IPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord2i",1,3); }
#endif
	 fn(target1,s1,t1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord2iv
#define GL_ALT_FUNDEF_MultiTexCoord2iv
typedef void (*PFNGLMULTITEXCOORD2IVPROC_ALT)(GLenum,const GLint *);
static inline void glMultiTexCoord2iv(GLenum target1,const GLint * v1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD2IVPROC_ALT fn=(PFNGLMULTITEXCOORD2IVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord2iv",1,3);
#else
	static PFNGLMULTITEXCOORD2IVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD2IVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord2iv",1,3); }
#endif
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord2s
#define GL_ALT_FUNDEF_MultiTexCoord2s
typedef void (*PFNGLMULTITEXCOORD2SPROC_ALT)(GLenum,GLshort,GLshort);
static inline void glMultiTexCoord2s(GLenum target1,GLshort s1,GLshort t1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD2SPROC_ALT fn=(PFNGLMULTITEXCOORD2SPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord2s",1,3);
#else
	static PFNGLMULTITEXCOORD2SPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD2SPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord2s",1,3); }
#endif
	 fn(target1,s1,t1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord2sv
#define GL_ALT_FUNDEF_MultiTexCoord2sv
typedef void (*PFNGLMULTITEXCOORD2SVPROC_ALT)(GLenum,const GLshort *);
static inline void glMultiTexCoord2sv(GLenum target1,const GLshort * v1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD2SVPROC_ALT fn=(PFNGLMULTITEXCOORD2SVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord2sv",1,3);
#else
	static PFNGLMULTITEXCOORD2SVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD2SVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord2sv",1,3); }
#endif
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord3d
#define GL_ALT_FUNDEF_MultiTexCoord3d
typedef void (*PFNGLMULTITEXCOORD3DPROC_ALT)(GLenum,GLdouble,GLdouble,GLdouble);
static inline void glMultiTexCoord3d(GLenum target1,GLdouble s1,GLdouble t1,GLdouble r1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD3DPROC_ALT fn=(PFNGLMULTITEXCOORD3DPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord3d",1,3);
#else
	static PFNGLMULTITEXCOORD3DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD3DPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord3d",1,3); }
#endif
	 fn(target1,s1,t1,r1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord3dv
#define GL_ALT_FUNDEF_MultiTexCoord3dv
typedef void (*PFNGLMULTITEXCOORD3DVPROC_ALT)(GLenum,const GLdouble *);
static inline void glMultiTexCoord3dv(GLenum target1,const GLdouble * v1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD3DVPROC_ALT fn=(PFNGLMULTITEXCOORD3DVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord3dv",1,3);
#else
	static PFNGLMULTITEXCOORD3DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD3DVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord3dv",1,3); }
#endif
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord3f
#define GL_ALT_FUNDEF_MultiTexCoord3f
typedef void (*PFNGLMULTITEXCOORD3FPROC_ALT)(GLenum,GLfloat,GLfloat,GLfloat);
static inline void glMultiTexCoord3f(GLenum target1,GLfloat s1,GLfloat t1,GLfloat r1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD3FPROC_ALT fn=(PFNGLMULTITEXCOORD3FPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord3f",1,3);
#else
	static PFNGLMULTITEXCOORD3FPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD3FPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord3f",1,3); }
#endif
	 fn(target1,s1,t1,r1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord3fv
#define GL_ALT_FUNDEF_MultiTexCoord3fv
typedef void (*PFNGLMULTITEXCOORD3FVPROC_ALT)(GLenum,const GLfloat *);
static inline void glMultiTexCoord3fv(GLenum target1,const GLfloat * v1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD3FVPROC_ALT fn=(PFNGLMULTITEXCOORD3FVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord3fv",1,3);
#else
	static PFNGLMULTITEXCOORD3FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD3FVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord3fv",1,3); }
#endif
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord3i
#define GL_ALT_FUNDEF_MultiTexCoord3i
typedef void (*PFNGLMULTITEXCOORD3IPROC_ALT)(GLenum,GLint,GLint,GLint);
static inline void glMultiTexCoord3i(GLenum target1,GLint s1,GLint t1,GLint r1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD3IPROC_ALT fn=(PFNGLMULTITEXCOORD3IPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord3i",1,3);
#else
	static PFNGLMULTITEXCOORD3IPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD3IPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord3i",1,3); }
#endif
	 fn(target1,s1,t1,r1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord3iv
#define GL_ALT_FUNDEF_MultiTexCoord3iv
typedef void (*PFNGLMULTITEXCOORD3IVPROC_ALT)(GLenum,const GLint *);
static inline void glMultiTexCoord3iv(GLenum target1,const GLint * v1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD3IVPROC_ALT fn=(PFNGLMULTITEXCOORD3IVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord3iv",1,3);
#else
	static PFNGLMULTITEXCOORD3IVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD3IVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord3iv",1,3); }
#endif
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord3s
#define GL_ALT_FUNDEF_MultiTexCoord3s
typedef void (*PFNGLMULTITEXCOORD3SPROC_ALT)(GLenum,GLshort,GLshort,GLshort);
static inline void glMultiTexCoord3s(GLenum target1,GLshort s1,GLshort t1,GLshort r1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD3SPROC_ALT fn=(PFNGLMULTITEXCOORD3SPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord3s",1,3);
#else
	static PFNGLMULTITEXCOORD3SPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD3SPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord3s",1,3); }
#endif
	 fn(target1,s1,t1,r1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord3sv
#define GL_ALT_FUNDEF_MultiTexCoord3sv
typedef void (*PFNGLMULTITEXCOORD3SVPROC_ALT)(GLenum,const GLshort *);
static inline void glMultiTexCoord3sv(GLenum target1,const GLshort * v1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD3SVPROC_ALT fn=(PFNGLMULTITEXCOORD3SVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord3sv",1,3);
#else
	static PFNGLMULTITEXCOORD3SVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD3SVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord3sv",1,3); }
#endif
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord4d
#define GL_ALT_FUNDEF_MultiTexCoord4d
typedef void (*PFNGLMULTITEXCOORD4DPROC_ALT)(GLenum,GLdouble,GLdouble,GLdouble,GLdouble);
static inline void glMultiTexCoord4d(GLenum target1,GLdouble s1,GLdouble t1,GLdouble r1,GLdouble q1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD4DPROC_ALT fn=(PFNGLMULTITEXCOORD4DPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord4d",1,3);
#else
	static PFNGLMULTITEXCOORD4DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD4DPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord4d",1,3); }
#endif
	 fn(target1,s1,t1,r1,q1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord4dv
#define GL_ALT_FUNDEF_MultiTexCoord4dv
typedef void (*PFNGLMULTITEXCOORD4DVPROC_ALT)(GLenum,const GLdouble *);
static inline void glMultiTexCoord4dv(GLenum target1,const GLdouble * v1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD4DVPROC_ALT fn=(PFNGLMULTITEXCOORD4DVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord4dv",1,3);
#else
	static PFNGLMULTITEXCOORD4DVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD4DVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord4dv",1,3); }
#endif
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord4f
#define GL_ALT_FUNDEF_MultiTexCoord4f
typedef void (*PFNGLMULTITEXCOORD4FPROC_ALT)(GLenum,GLfloat,GLfloat,GLfloat,GLfloat);
static inline void glMultiTexCoord4f(GLenum target1,GLfloat s1,GLfloat t1,GLfloat r1,GLfloat q1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD4FPROC_ALT fn=(PFNGLMULTITEXCOORD4FPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord4f",1,3);
#else
	static PFNGLMULTITEXCOORD4FPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD4FPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord4f",1,3); }
#endif
	 fn(target1,s1,t1,r1,q1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord4fv
#define GL_ALT_FUNDEF_MultiTexCoord4fv
typedef void (*PFNGLMULTITEXCOORD4FVPROC_ALT)(GLenum,const GLfloat *);
static inline void glMultiTexCoord4fv(GLenum target1,const GLfloat * v1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD4FVPROC_ALT fn=(PFNGLMULTITEXCOORD4FVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord4fv",1,3);
#else
	static PFNGLMULTITEXCOORD4FVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD4FVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord4fv",1,3); }
#endif
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord4i
#define GL_ALT_FUNDEF_MultiTexCoord4i
typedef void (*PFNGLMULTITEXCOORD4IPROC_ALT)(GLenum,GLint,GLint,GLint,GLint);
static inline void glMultiTexCoord4i(GLenum target1,GLint s1,GLint t1,GLint r1,GLint q1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD4IPROC_ALT fn=(PFNGLMULTITEXCOORD4IPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord4i",1,3);
#else
	static PFNGLMULTITEXCOORD4IPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD4IPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord4i",1,3); }
#endif
	 fn(target1,s1,t1,r1,q1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord4iv
#define GL_ALT_FUNDEF_MultiTexCoord4iv
typedef void (*PFNGLMULTITEXCOORD4IVPROC_ALT)(GLenum,const GLint *);
static inline void glMultiTexCoord4iv(GLenum target1,const GLint * v1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD4IVPROC_ALT fn=(PFNGLMULTITEXCOORD4IVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord4iv",1,3);
#else
	static PFNGLMULTITEXCOORD4IVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD4IVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord4iv",1,3); }
#endif
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord4s
#define GL_ALT_FUNDEF_MultiTexCoord4s
typedef void (*PFNGLMULTITEXCOORD4SPROC_ALT)(GLenum,GLshort,GLshort,GLshort,GLshort);
static inline void glMultiTexCoord4s(GLenum target1,GLshort s1,GLshort t1,GLshort r1,GLshort q1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD4SPROC_ALT fn=(PFNGLMULTITEXCOORD4SPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord4s",1,3);
#else
	static PFNGLMULTITEXCOORD4SPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD4SPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord4s",1,3); }
#endif
	 fn(target1,s1,t1,r1,q1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_MultiTexCoord4sv
#define GL_ALT_FUNDEF_MultiTexCoord4sv
typedef void (*PFNGLMULTITEXCOORD4SVPROC_ALT)(GLenum,const GLshort *);
static inline void glMultiTexCoord4sv(GLenum target1,const GLshort * v1)
{
#ifdef __cplusplus
	static PFNGLMULTITEXCOORD4SVPROC_ALT fn=(PFNGLMULTITEXCOORD4SVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord4sv",1,3);
#else
	static PFNGLMULTITEXCOORD4SVPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLMULTITEXCOORD4SVPROC_ALT)glaltGetProcAddressVersion("glMultiTexCoord4sv",1,3); }
#endif
	 fn(target1,v1);
}
#endif
#endif

#ifndef GL_VERSION_1_3
#ifndef	GL_ALT_FUNDEF_SampleCoverage
#define GL_ALT_FUNDEF_SampleCoverage
typedef void (*PFNGLSAMPLECOVERAGEPROC_ALT)(GLfloat,GLboolean);
static inline void glSampleCoverage(GLfloat value1,GLboolean invert1)
{
#ifdef __cplusplus
	static PFNGLSAMPLECOVERAGEPROC_ALT fn=(PFNGLSAMPLECOVERAGEPROC_ALT)glaltGetProcAddressVersion("glSampleCoverage",1,3);
#else
	static PFNGLSAMPLECOVERAGEPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLSAMPLECOVERAGEPROC_ALT)glaltGetProcAddressVersion("glSampleCoverage",1,3); }
#endif
	 fn(value1,invert1);
}
#endif
#endif

#ifndef GL_VERSION_1_2
#ifndef	GL_ALT_FUNDEF_TexImage3D
#define GL_ALT_FUNDEF_TexImage3D
typedef void (*PFNGLTEXIMAGE3DPROC_ALT)(GLenum,GLint,GLint,GLsizei,GLsizei,GLsizei,GLint,GLenum,GLenum,const void *);
static inline void glTexImage3D(GLenum target1,GLint level1,GLint internalformat1,GLsizei width1,GLsizei height1,GLsizei depth1,GLint border1,GLenum format1,GLenum type1,const void * pixels1)
{
#ifdef __cplusplus
	static PFNGLTEXIMAGE3DPROC_ALT fn=(PFNGLTEXIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glTexImage3D",1,3);
#else
	static PFNGLTEXIMAGE3DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLTEXIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glTexImage3D",1,3); }
#endif
	 fn(target1,level1,internalformat1,width1,height1,depth1,border1,format1,type1,pixels1);
}
#endif
#endif

#ifndef GL_VERSION_1_2
#ifndef	GL_ALT_FUNDEF_TexSubImage3D
#define GL_ALT_FUNDEF_TexSubImage3D
typedef void (*PFNGLTEXSUBIMAGE3DPROC_ALT)(GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,const void *);
static inline void glTexSubImage3D(GLenum target1,GLint level1,GLint xoffset1,GLint yoffset1,GLint zoffset1,GLsizei width1,GLsizei height1,GLsizei depth1,GLenum format1,GLenum type1,const void * pixels1)
{
#ifdef __cplusplus
	static PFNGLTEXSUBIMAGE3DPROC_ALT fn=(PFNGLTEXSUBIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glTexSubImage3D",1,3);
#else
	static PFNGLTEXSUBIMAGE3DPROC_ALT fn=NULL;
	if(!fn) { fn=(PFNGLTEXSUBIMAGE3DPROC_ALT)glaltGetProcAddressVersion("glTexSubImage3D",1,3); }
#endif
	 fn(target1,level1,xoffset1,yoffset1,zoffset1,width1,height1,depth1,format1,type1,pixels1);
}
#endif
#endif

CGUARDEND

#endif
